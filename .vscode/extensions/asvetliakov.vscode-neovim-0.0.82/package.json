{
	"name": "vscode-neovim",
	"displayName": "VSCode Neovim",
	"description": "VSCode Neovim Integration",
	"icon": "images/icon.png",
	"publisher": "asvetliakov",
	"extensionKind": [
		"ui"
	],
	"version": "0.0.82",
	"repository": {
		"type": "git",
		"url": "https://github.com/asvetliakov/vscode-neovim"
	},
	"bugs": {
		"url": "https://github.com/asvetliakov/vscode-neovim/issues",
		"email": "devpieron@gmail.com"
	},
	"engines": {
		"vscode": "^1.54.0"
	},
	"keywords": [
		"keybindings",
		"vi",
		"vim",
		"neovim"
	],
	"categories": [
		"Other",
		"Keymaps"
	],
	"activationEvents": [
		"*"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"configuration": {
			"title": "Neovim",
			"properties": {
				"vscode-neovim.neovimPath": {
					"type": "string",
					"default": "",
					"title": "Neovim path",
					"markdownDescription": "*Windows, OSX, Linux in Neovim path settings won`t work if this setting is set* Full path to Neovim executable. If you have enabled `useWSL` setting, specify the Linux path to nvim executable instead.",
					"deprecationMessage": "This setting is deprecated. Remove this setting and use neovimExecutablePaths.win32/linux/darwin instead. If you continue to use this setting, keep in mind this setting takes precedence over neovimExecutablePaths.windows/linux/darwin and those settings won't work. If you want them to work, just remove this setting from your settings.json or make its input box in User Settings empty"
				},
				"vscode-neovim.neovimExecutablePaths.win32": {
					"type": "string",
					"default": "",
					"title": "Neovim executable path on Windows",
					"markdownDescription": "Full path to Neovim executable that should be used by the extension if running VS Code on Windows.  \nExample:  \nC:\\tools\\neovim\\Neovim\\bin\\nvim.exe (if you installed using Chocolatey)  \nIf you want to use Windows Subsystem for Linux, enable the `useWSL` setting and set `neovimExecutablePaths.linux` instead"
				},
				"vscode-neovim.neovimExecutablePaths.darwin": {
					"type": "string",
					"default": "",
					"title": "Neovim executable path on OSX",
					"description": "Full path to Neovim executable that should be used by the extension if running VS Code on OSX."
				},
				"vscode-neovim.neovimExecutablePaths.linux": {
					"type": "string",
					"default": "",
					"title": "Neovim executable path on Linux (and in WSL)",
					"markdownDescription": "Full path to Neovim executable that should be used by the extension if running VS Code on Linux or WSL. If `useWSL` setting is checked, vscode-neovim will look for this path in WSL  \nExample:  \n/usr/bin/nvim"
				},
				"vscode-neovim.neovimInitPath": {
					"type": "string",
					"default": "",
					"title": "Custom init.vim path",
					"description": "Full path to custom neovim init file, equals to startup option -u. If checked useWSL flag specify a Linux path. You can also use exists('g:vscode') in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode",
					"deprecationMessage": "This setting is deprecated. Use neovimInitVimPaths.win32/linux/darwin instead. If you continue to use this setting, keep in mind this setting takes precedence over neovimInitVimPaths.win32/linux/darwin and those settings won't work. If you want them to work, just remove this setting from your settings.json or make its input box in User Settings empty"
				},
				"vscode-neovim.neovimInitVimPaths.win32": {
					"type": "string",
					"default": "",
					"title": "Custom init.vim path on Windows",
					"markdownDescription": "Full path to custom neovim init.vim file on Windows, equals to startup option `-u`. If the `useWSL` setting is checked, the value of the `neovimInitVimPaths.linux` setting will be used to find the init.vim file instead. You can also use `exists('g:vscode')` in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode"
				},
				"vscode-neovim.neovimInitVimPaths.darwin": {
					"type": "string",
					"default": "",
					"title": "Custom init.vim path on OSX",
					"markdownDescription": "Full path to custom neovim init.vim file on OSX, equals to startup option `-u`. You can also use `exists('g:vscode')` in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode"
				},
				"vscode-neovim.neovimInitVimPaths.linux": {
					"type": "string",
					"default": "",
					"title": "Custom init.vim path on Linux",
					"markdownDescription": "Full path to custom neovim init.vim file on Linux/WSL, equals to startup option `-u`. If the `useWSL` setting is checked, this path will be used to find `init.vim` in Windows Subsystem for Linux. You can also use `exists('g:vscode')` in your init.vim to check if neovim is being run in vscode and share init file between neovim/vscode"
				},
				"vscode-neovim.neovimWidth": {
					"type": "number",
					"default": 1000,
					"title": "Neovim width",
					"description": "Neovim viewport width. Increase if you're working with long lines and have horizontal scroll problems. Larger values will affect neovim performance"
				},
				"vscode-neovim.useCtrlKeysForNormalMode": {
					"type": "boolean",
					"default": true,
					"description": "Use Ctrl keys in normal/visual/etc...(except insert) modes"
				},
				"vscode-neovim.useCtrlKeysForInsertMode": {
					"type": "boolean",
					"default": true,
					"description": "Use Ctrl keys in insert mode"
				},
				"vscode-neovim.mouseSelectionStartVisualMode": {
					"type": "boolean",
					"default": false,
					"description": "Mouse selection starts visual mode"
				},
				"vscode-neovim.useWSL": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Use neovim installed in WSL. If you enable this setting, specify the path to the neovim executable installed in WSL `neovimExecutablePaths.linux` setting"
				},
				"vscode-neovim.revealCursorScrollLine": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "If 'true' reveals the cursor when scrolling by line and if it is outside view port"
				},
				"vscode-neovim.logPath": {
					"type": "string",
					"default": "",
					"description": "Log file path"
				},
				"vscode-neovim.logLevel": {
					"type": "string",
					"default": "error",
					"enum": [
						"none",
						"error",
						"warn",
						"debug"
					],
					"description": "Log Level"
				},
				"vscode-neovim.logOutputToConsole": {
					"type": "boolean",
					"default": false,
					"description": "When on, print log messages to vscode developer console (not output channel!)"
				},
				"vscode-neovim.highlightGroups.ignoreHighlights": {
					"type": "array",
					"title": "Ignore Highlighs Groups",
					"description": "List of vim highlights groups to ignore",
					"default": [
						"SpecialKey",
						"EndOfBuffer",
						"TermCursor",
						"TermCursorNC",
						"NonText",
						"ErrorMsg",
						"MoreMsg",
						"ModeMsg",
						"LineNr",
						"CursorLineNr",
						"Question",
						"StatusLine",
						"StatusLineNC",
						"VertSplit",
						"Title",
						"VisualNC",
						"WarningMsg",
						"WildMenu",
						"^Diff",
						"Sign",
						"SignColumn",
						"^Spell",
						"^Pmenu",
						"^Tab",
						"^Cursor",
						"ColorColumn",
						"QuickFixLine",
						"Whitespace",
						"NormalNC",
						"Normal",
						"NormalFloat",
						"MsgSeparator",
						"MsgArea",
						"^RedrawDebug",
						"Cursor",
						"lCursor",
						"MatchParen",
						"^Nvim",
						"Operator",
						"Delimiter",
						"Identifier",
						"SpecialChar",
						"Number",
						"Type",
						"String",
						"Error",
						"Comment",
						"Constant",
						"Special",
						"Statement",
						"PreProc",
						"Underlined",
						"Ignore",
						"Todo",
						"Character",
						"Boolean",
						"Float",
						"Function",
						"Conditional",
						"Repeat",
						"Label",
						"Keyword",
						"Exception",
						"Include",
						"Define",
						"Macro",
						"PreCondit",
						"StorageClass",
						"Structure",
						"Typedef",
						"Tag",
						"SpecialComment",
						"Debug",
						"Folded",
						"FoldColumn"
					]
				},
				"vscode-neovim.highlightGroups.highlights": {
					"type": "object",
					"title": "Highlight Groups Configuration",
					"description": "Define colors for various VIM highlight groups. Values may be 'vim' to use colors from vim or text decoration properties object",
					"additionalProperties": {
						"oneOf": [
							{
								"type": "object"
							},
							{
								"type": "string",
								"const": "vim"
							}
						]
					},
					"default": {
						"Directory": "vim",
						"IncSearch": {
							"backgroundColor": "theme.editor.findMatchBackground",
							"borderColor": "theme.editor.findMatchBorder"
						},
						"Search": {
							"backgroundColor": "theme.editor.findMatchHighlightBackground",
							"borderColor": "theme.editor.findMatchHighlightBorder"
						},
						"Visual": {
							"backgroundColor": "theme.editor.selectionBackground"
						},
						"Conceal": "vim",
						"Substitute": "vim"
					}
				},
				"vscode-neovim.highlightGroups.unknownHighlight": {
					"oneOf": [
						{
							"type": "object"
						},
						{
							"type": "string",
							"const": "vim"
						}
					],
					"title": "Unknown Highlight Groups",
					"description": "Highlight Configuration for non defined group. Can accept 'vim' to use colors coming from vim or text decoration properties object",
					"default": "vim"
				},
				"vscode-neovim.textDecorationsAtTop": {
					"type": "boolean",
					"description": "If turned on, text decorations will appear on top of the associated text instead of behind it. Consider turning this on with the EasyMotion plugin.",
					"default": false
				}
			}
		},
		"commands": [
			{
				"command": "vscode-neovim.send",
				"title": "Neovim: send key"
			},
			{
				"command": "vscode-neovim.compositeEscape1",
				"title": "Composite escape key 1"
			},
			{
				"command": "vscode-neovim.compositeEscape2",
				"title": "Composite escape key 2"
			},
			{
				"command": "vscode-neovim.escape",
				"title": "Escape key"
			},
			{
				"command": "vscode-neovim.commit-cmdline",
				"title": "Neovim: Accept cmdline"
			},
			{
				"command": "vscode-neovim.delete-word-left-cmdline",
				"title": "Neovim: Delete word cmdline"
			},
			{
				"command": "vscode-neovim.delete-all-cmdline",
				"title": "Neovim: Delete all cmdline"
			},
			{
				"command": "vscode-neovim.delete-char-left-cmdline",
				"title": "Neovim: Delete char cmdline"
			},
			{
				"command": "vscode-neovim.complete-selection-cmdline",
				"title": "Neovim: Complete selection cmdline"
			},
			{
				"command": "vscode-neovim.history-up-cmdline",
				"title": "Neovim: History up cmdline"
			},
			{
				"command": "vscode-neovim.history-down-cmdline",
				"title": "Neovim: History down cmdline"
			},
			{
				"command": "vscode-neovim.ctrl-b",
				"title": "Neovim: ctrl-b"
			},
			{
				"command": "vscode-neovim.ctrl-d",
				"title": "Neovim: ctrl-d"
			},
			{
				"command": "vscode-neovim.ctrl-e",
				"title": "Neovim: ctrl-e"
			},
			{
				"command": "vscode-neovim.ctrl-f",
				"title": "Neovim: ctrl-f"
			},
			{
				"command": "vscode-neovim.ctrl-u",
				"title": "Neovim: ctrl-u"
			},
			{
				"command": "vscode-neovim.ctrl-y",
				"title": "Neovim: ctrl-y"
			},
			{
				"command": "vscode-neovim.shift-m",
				"title": "Neovim: shift-m"
			},
			{
				"command": "vscode-neovim.shift-l",
				"title": "Neovim: shift-l"
			},
			{
				"command": "vscode-neovim:shift-h",
				"title": "Neovim: shift-h"
			},
			{
				"command": "vscode-neovim.ctrl-a-insert",
				"title": "Neovim: Ctrl-a-insert"
			},
			{
				"command": "vscode-neovim.paste-register",
				"title": "Neovim: Paste from register"
			}
		],
		"keybindings": [
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+shift+p",
				"when": "editorTextFocus && neovim.mode == visual",
				"args": "<C-P>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "shift+cmd+p",
				"when": "editorTextFocus && neovim.mode == visual",
				"args": "<C-P>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "F1",
				"when": "editorTextFocus && neovim.mode == visual",
				"args": "<C-P>"
			},
			{
				"command": "list.focusDown",
				"key": "ctrl+n",
				"when": "listFocus && !inputFocus"
			},
			{
				"command": "list.focusUp",
				"key": "ctrl+p",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "j",
				"command": "list.focusDown",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "k",
				"command": "list.focusUp",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "h",
				"command": "list.collapse",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "l",
				"command": "list.select",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "enter",
				"command": "list.select",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "g g",
				"command": "list.focusFirst",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "shift+g",
				"command": "list.focusLast",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "o",
				"command": "list.toggleExpand",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "ctrl+u",
				"command": "list.focusPageUp",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "ctrl+d",
				"command": "list.focusPageDown",
				"when": "listFocus && !inputFocus"
			},
			{
				"key": "/",
				"command": "list.toggleKeyboardNavigation",
				"when": "listFocus && !inputFocus && listSupportsKeyboardNavigation"
			},
			{
				"key": "escape",
				"command": "list.toggleKeyboardNavigation",
				"when": "listFocus && inputFocus && listSupportsKeyboardNavigation"
			},
			{
				"key": "r",
				"command": "renameFile",
				"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
			},
			{
				"key": "d",
				"command": "deleteFile",
				"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
			},
			{
				"key": "y",
				"command": "filesExplorer.copy",
				"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
			},
			{
				"key": "x",
				"command": "filesExplorer.cut",
				"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
			},
			{
				"key": "p",
				"command": "filesExplorer.paste",
				"when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
			},
			{
				"key": "v",
				"command": "explorer.openToSide",
				"when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
			},
			{
				"key": "a",
				"command": "explorer.newFile",
				"when": "filesExplorerFocus && !inputFocus"
			},
			{
				"key": "shift+a",
				"command": "explorer.newFolder",
				"when": "filesExplorerFocus && !inputFocus"
			},
			{
				"command": "showNextParameterHint",
				"key": "ctrl+n",
				"when": "editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
			},
			{
				"command": "showPrevParameterHint",
				"key": "ctrl+p",
				"when": "editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
			},
			{
				"key": "ctrl+n",
				"command": "selectNextSuggestion",
				"when": "textInputFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
			},
			{
				"key": "ctrl+p",
				"command": "selectPrevSuggestion",
				"when": "textInputFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
			},
			{
				"command": "workbench.action.quickOpenSelectNext",
				"key": "ctrl+n",
				"when": "inQuickOpen"
			},
			{
				"command": "workbench.action.quickOpenSelectPrevious",
				"key": "ctrl+p",
				"when": "inQuickOpen"
			},
			{
				"command": "vscode-neovim.escape",
				"key": "ctrl+c",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"
			},
			{
				"command": "vscode-neovim.escape",
				"key": "ctrl+c",
				"when": "editorTextFocus && neovim.init && neovim.mode == insert && neovim.ctrlKeysInsert"
			},
			{
				"command": "vscode-neovim.escape",
				"key": "Escape",
				"when": "editorTextFocus && neovim.init && !markersNavigationVisible && !parameterHintsVisible && !referenceSearchVisible"
			},
			{
				"command": "vscode-neovim.escape",
				"key": "ctrl+[",
				"when": "editorTextFocus && neovim.init"
			},
			{
				"key": "tab",
				"command": "togglePeekWidgetFocus",
				"when": "inReferenceSearchEditor || referenceSearchVisible && neovim.mode == normal"
			},
			{
				"key": "escape",
				"command": "closeReferenceSearch",
				"when": "inReferenceSearchEditor && !config.editor.stablePeek && neovim.mode == normal"
			},
			{
				"key": "ctrl+p",
				"command": "list.focusUp",
				"when": "inReferenceSearchEditor && neovim.mode == normal"
			},
			{
				"key": "ctrl+n",
				"command": "list.focusDown",
				"when": "inReferenceSearchEditor && neovim.mode == normal"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+g",
				"when": "neovim.mode == cmdline_normal || neovim.mode == cmdline_insert || neovim.mode == cmdline_replace",
				"args": "<C-g>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+t",
				"when": "neovim.mode == cmdline_normal || neovim.mode == cmdline_insert || neovim.mode == cmdline_replace",
				"args": "<C-t>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+r",
				"when": "neovim.mode == cmdline_normal || neovim.mode == cmdline_insert || neovim.mode == cmdline_replace",
				"args": "<C-r>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+l",
				"when": "neovim.mode == cmdline_normal || neovim.mode == cmdline_insert || neovim.mode == cmdline_replace",
				"args": "<C-l>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+e",
				"when": "neovim.mode == cmdline_normal || neovim.mode == cmdline_insert || neovim.mode == cmdline_replace",
				"args": "<C-e>"
			},
			{
				"command": "vscode-neovim.history-up-cmdline",
				"key": "up",
				"when": "neovim.mode == cmdline_normal"
			},
			{
				"command": "vscode-neovim.history-up-cmdline",
				"key": "ctrl+p",
				"when": "neovim.mode == cmdline_normal"
			},
			{
				"command": "vscode-neovim.history-down-cmdline",
				"key": "down",
				"when": "neovim.mode == cmdline_normal"
			},
			{
				"command": "vscode-neovim.history-down-cmdline",
				"key": "ctrl+n",
				"when": "neovim.mode == cmdline_normal"
			},
			{
				"command": "vscode-neovim.delete-word-left-cmdline",
				"key": "ctrl+w",
				"when": "neovim.mode == cmdline_normal"
			},
			{
				"command": "vscode-neovim.delete-all-cmdline",
				"key": "ctrl+u",
				"when": "neovim.mode == cmdline_normal"
			},
			{
				"command": "vscode-neovim.delete-char-left-cmdline",
				"key": "ctrl+h",
				"when": "neovim.mode == cmdline_normal"
			},
			{
				"command": "vscode-neovim.complete-selection-cmdline",
				"key": "tab",
				"when": "neovim.mode == cmdline_normal"
			},
			{
				"command": "vscode-neovim.send",
				"key": "backspace",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<BS>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "shift+backspace",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<S-BS>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+backspace",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<C-BS>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "delete",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<Del>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "shift+delete",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<S-Del>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+delete",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<C-Del>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "tab",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.mode != cmdline_normal",
				"args": "<Tab>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "shift+tab",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.mode != cmdline_normal",
				"args": "<S-Tab>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "down",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<Down>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "up",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<Up>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "left",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<Left>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "right",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<Right>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+down",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<C-Down>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+up",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<C-Up>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+right",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<C-Right>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+left",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<C-Left>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "shift+down",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<S-Down>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "shift+up",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<S-Up>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "shift+left",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<S-Left>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "shift+right",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<S-Right>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "home",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<Home>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "end",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
				"args": "<End>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+a",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-a>"
			},
			{
				"command": "vscode-neovim.ctrl-b",
				"key": "ctrl+b",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"
			},
			{
				"command": "vscode-neovim.ctrl-d",
				"key": "ctrl+d",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"
			},
			{
				"command": "vscode-neovim.ctrl-e",
				"key": "ctrl+e",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"
			},
			{
				"command": "vscode-neovim.ctrl-f",
				"key": "ctrl+f",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+i",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-i>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+o",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-o>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+r",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-r>"
			},
			{
				"command": "vscode-neovim.ctrl-u",
				"key": "ctrl+u",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+v",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-v>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+w",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-w>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+x",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-x>"
			},
			{
				"command": "vscode-neovim.ctrl-y",
				"key": "ctrl+y",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+z",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-z>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+]",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-]>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+j",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-j>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+k",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-k>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+l",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-l>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+h",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-h>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+/",
				"when": "editorTextFocus && neovim.init && neovim.mode != insert && neovim.ctrlKeysNormal",
				"args": "<C-/>"
			},
			{
				"command": "deleteAllLeft",
				"key": "ctrl-u",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"
			},
			{
				"command": "vscode-neovim.ctrl-o-insert",
				"key": "ctrl+o",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+u",
				"when": "editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert",
				"args": "<C-u>"
			},
			{
				"command": "deleteWordLeft",
				"key": "ctrl+w",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+w",
				"when": "editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert",
				"args": "<C-w>"
			},
			{
				"command": "deleteLeft",
				"key": "ctrl+h",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+h",
				"when": "editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert",
				"args": "<C-j>"
			},
			{
				"command": "editor.action.indentLines",
				"key": "ctrl+t",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+t",
				"when": "editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert",
				"args": "<C-t>"
			},
			{
				"command": "editor.action.outdentLines",
				"key": "ctrl+d",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+d",
				"when": "editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert",
				"args": "<C-d>"
			},
			{
				"command": "editor.action.insertLineAfter",
				"key": "ctrl+j",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+j",
				"when": "editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert",
				"args": "<C-j>"
			},
			{
				"command": "vscode-neovim.ctrl-a-insert",
				"key": "ctrl+a",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+a",
				"when": "editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert",
				"args": "<C-a>"
			},
			{
				"command": "vscode-neovim.send",
				"key": "ctrl+r",
				"when": "editorTextFocus && neovim.mode == insert && neovim.recording && neovim.ctrlKeysInsert",
				"args": "<C-r>"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r 0",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "0"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r 1",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "1"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r 2",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "2"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r 3",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "3"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r 4",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "4"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r 5",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "5"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r 6",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "6"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r 7",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "7"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r 8",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "8"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r 9",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "9"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r shift-'",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "\""
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r shift-5",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "%"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r shift-3",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "#"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r shift-8",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "*"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r shift-=",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "+"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r shift-;",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": ":"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r .",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "."
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r -",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "-"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r =",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "="
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r /",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "/"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r a",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "a"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r b",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "b"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r c",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "c"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r d",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "d"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r e",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "e"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r f",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "f"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r g",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "g"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r h",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "h"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r i",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "i"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r j",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "j"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r k",
				"when": "editorTextFocus && neovim.mode == insert &&& !neovim.recording & neovim.ctrlKeysInsert",
				"args": "k"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r l",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "l"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r m",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "m"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r n",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "n"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r o",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "o"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r p",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "p"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r q",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "q"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r r",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "r"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r s",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "s"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r t",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "t"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r u",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "u"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r v",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "v"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r w",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "w"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r x",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "x"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r y",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "y"
			},
			{
				"command": "vscode-neovim.paste-register",
				"key": "ctrl+r z",
				"when": "editorTextFocus && neovim.mode == insert && !neovim.recording && neovim.ctrlKeysInsert",
				"args": "z"
			}
		]
	},
	"scripts": {
		"lint": "eslint --ext .ts src",
		"test": "node ./out/test/runTest.js",
		"pretest": "yarn run test-compile",
		"vscode:prepublish": "webpack --mode production",
		"webpack": "webpack --mode development",
		"webpack-dev": "webpack --mode development --watch",
		"test-compile": "tsc -p ./"
	},
	"devDependencies": {
		"@types/glob": "^7.1.3",
		"@types/lodash-es": "^4.17.4",
		"@types/mocha": "^8.2.1",
		"@types/msgpack-lite": "^0.1.7",
		"@types/node": "^14.14.35",
		"@types/vscode": "^1.54.0",
		"@typescript-eslint/eslint-plugin": "^4.18.0",
		"@typescript-eslint/parser": "^4.18.0",
		"eslint": "^7.22.0",
		"eslint-config-prettier": "^8.1.0",
		"eslint-plugin-import": "^2.22.1",
		"eslint-plugin-prettier": "^3.3.1",
		"glob": "^7.1.6",
		"mocha": "^8.3.2",
		"prettier": "^2.2.1",
		"source-map-support": "^0.5.19",
		"ts-loader": "^8.0.18",
		"typescript": "^4.2.3",
		"vscode-test": "^1.5.1",
		"webpack": "^5.26.1",
		"webpack-cli": "^4.5.0"
	},
	"dependencies": {
		"fast-diff": "^1.2.0",
		"lodash-es": "^4.17.21",
		"neovim": "^4.9.0",
		"ts-wcwidth": "^2.0.3"
	},
	"__metadata": {
		"id": "caf8995c-5426-4bf7-9d01-f7968ebd49bb",
		"publisherId": "ce6190db-6762-4c9c-99c7-1717b9504159",
		"publisherDisplayName": "Alexey Svetliakov",
		"installedTimestamp": 1634926633643
	}
}