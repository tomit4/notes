<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sometechblog.com</title><link>https://sometechblog.com/</link><description>Recent content on sometechblog.com</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 25 Jan 2023 11:24:30 +0100</lastBuildDate><atom:link href="https://sometechblog.com/index.xml" rel="self" type="application/rss+xml"/><item><title>You might not need an ORM</title><link>https://sometechblog.com/posts/you-might-not-need-an-orm/</link><pubDate>Wed, 25 Jan 2023 11:24:30 +0100</pubDate><guid>https://sometechblog.com/posts/you-might-not-need-an-orm/</guid><description>While I was building aihelperbot.com I did what I imagine many developers do: I used an ORM for everything database related. I used ORM to handle migrations, define schemas, insert data, update data, select data, etc. I didn&amp;rsquo;t think much about it.
It was only later while building aihelperbot.com I started to wonder if I really needed an ORM? Using AI more and more I started to realize that I could do most of the things I did with an ORM directly with SQL.</description></item><item><title>Building a markdown blog using NextJS and server side components</title><link>https://sometechblog.com/posts/building-markdown-blog-using-nextjs-server-side-components/</link><pubDate>Wed, 04 Jan 2023 14:29:12 +0100</pubDate><guid>https://sometechblog.com/posts/building-markdown-blog-using-nextjs-server-side-components/</guid><description>I wanted to add markdown blog to my NextJS app. Initially I feared it would be a lot of work. But it turned out to be easy when using NextJS server side components, i.e. the appDir. This is the end result:
blog overview blog post To get started I added the scaffolding for the markdown blog to the appDir:
app/ ├── posts/ │ ├── [slug] │ │ ├── head.</description></item><item><title>Render vs Digitalocean pricing in 2023</title><link>https://sometechblog.com/posts/render-vs-digitalocean-2023/</link><pubDate>Tue, 03 Jan 2023 21:12:27 +0100</pubDate><guid>https://sometechblog.com/posts/render-vs-digitalocean-2023/</guid><description>What does it cost to host a small web app on Render vs Digitalocean with Render&amp;rsquo;s new pricing model? The tech stack:
web app running Node.js database running Postgres (Render only support Postgres) Service Render DigitalOcean Node (1CPU/1GB Ram) $25/mo $25/mon Database (1CPU/1GB Ram) $20/mo $15/month Autoscaling $19/mo 0 Bandwidth 500GB in total (additional $30 per 100GB or $3.</description></item><item><title>Render&#39;s new dual track pricing scheme doubles hosting costs</title><link>https://sometechblog.com/posts/render-new-dual-track-pricing-schema-doubles-hosting-costs/</link><pubDate>Mon, 02 Jan 2023 18:53:34 +0100</pubDate><guid>https://sometechblog.com/posts/render-new-dual-track-pricing-schema-doubles-hosting-costs/</guid><description>Render adopted a new pricing scheme for its services on 1st of January 2023. And like DigitalOcean they market it as &amp;ldquo;predictable pricing&amp;rdquo; however unlike DigitalOcean it isn&amp;rsquo;t simple anymore. Render now charges both for its services and per user. The specific user pricing then in turns depends on &amp;ldquo;group type&amp;rdquo;, e.g. individual, team or organization.
It is only a price increase while Render&amp;rsquo;s offerings remains the same. Or that is not exactly true as users in the &amp;ldquo;individual group&amp;rdquo; loose autoscaling, which is an important tool to keep cost low for indiehackers and small startups that experience jumps in traffic.</description></item><item><title>How to dynamically load Stripe with NextJS</title><link>https://sometechblog.com/posts/how-to-dynamically-load-stripe-with-nextjs/</link><pubDate>Sat, 10 Dec 2022 17:14:32 +0100</pubDate><guid>https://sometechblog.com/posts/how-to-dynamically-load-stripe-with-nextjs/</guid><description>I was checking the performance of one of my web sites using Page Speed and noticed it complained about assets loading slowly as well as the initial response time from the server being a bit long (500ms-700ms range). My first thought was that it might be the database queries being too slow. I quickly ruled that out (they all took in the vicinity of a few milliseconds).
Then I noticed Stripe was loading on each page load.</description></item><item><title>Macbook Air M1</title><link>https://sometechblog.com/posts/macbook-air-m1/</link><pubDate>Thu, 11 Nov 2021 14:56:14 +0100</pubDate><guid>https://sometechblog.com/posts/macbook-air-m1/</guid><description>I had no idea what would happen to me that day. It was my last day working for a client in Berlin. I came to the office to work and have a small goodbye party on the sunny terrace. This was the first time in the psychical office, before that I have, like almost everybody else, been working from home.
I had bought my laptop just a year before. It was the most expensive Macbook Pro 16&amp;rdquo; with 8 Intel CPU cores and it costed 3600 €.</description></item><item><title>Setup Sublime Editor for Writing</title><link>https://sometechblog.com/posts/setup-sublime-for-writing/</link><pubDate>Sat, 10 Apr 2021 14:57:48 +0200</pubDate><guid>https://sometechblog.com/posts/setup-sublime-for-writing/</guid><description>Sublime Editor is build for writing and reading code. However the urge to write down your thoughts on different matters might come and for this Sublime Editor offers excellent support. Both out of the box and with a few useful packages.
Opposite to coding, where concise code blocks and programing logic becomes more readable through highlighting and linting tools, writing is easier with fewer colors, larger text and line height.</description></item><item><title>Redux is too complex</title><link>https://sometechblog.com/posts/redux-is-complex/</link><pubDate>Mon, 05 Apr 2021 15:31:27 +0200</pubDate><guid>https://sometechblog.com/posts/redux-is-complex/</guid><description>Redux is a popular library used to manage global application state, at least the claim. Lots of developers struggle to understand what Redux does and how to use it properly. When saying global state most developers would intrinsically imagine a simple library lifting up individual states into a shared global object. This isn&amp;rsquo;t Redux. Although Redux is a small library (2kB, including dependencies), the documentation and the complimentary libraries required makes it comprehensive.</description></item><item><title>Questions to ponder before a JS job interview</title><link>https://sometechblog.com/posts/reflections-on-js-development/</link><pubDate>Tue, 12 Jan 2021 16:44:21 +0100</pubDate><guid>https://sometechblog.com/posts/reflections-on-js-development/</guid><description>It&amp;rsquo;s that time again where I have to prepare for job interviews. Since companies aren&amp;rsquo;t looking quirky originals, you need to learn what to say to look attractive. And have some answers to the common questions.
How do you approach complex problems? There isn&amp;rsquo;t one approach since complex problems are different. Here are some common ones:
structural/architectural problems as the application matures should be handled together with the team, since everyone has a stake in the app and should be heard.</description></item><item><title>You don&#39;t need a boilerplate for Next.js and Prisma</title><link>https://sometechblog.com/posts/nextjs-prisma/</link><pubDate>Fri, 08 Jan 2021 16:09:48 +0100</pubDate><guid>https://sometechblog.com/posts/nextjs-prisma/</guid><description>Originally the plan was to get familiar with Next.js and Prisma by making a simple boilerplate for it. Turns out a few commands is all it takes to generate a basic working app. Let&amp;rsquo;s get started and add Next.js:
npx create-next-app my-app To add Typescript run touch tsconfig.json &amp;amp;&amp;amp; yarn dev and Next.js will generate the needed files and install packages. Then add Prisma:
yarn add -D @prisma/cli yarn prisma init Prisma created a .</description></item><item><title>Lightweight and flexible React hook to animate height change</title><link>https://sometechblog.com/posts/height-animation-hook/</link><pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate><guid>https://sometechblog.com/posts/height-animation-hook/</guid><description>Hiding or showing a element with React is as simple as an if statement deciding whether to print it or not. However often you want to be able to animate the transition, so that it smoothly closes or opens. To avoid cluttering the various components with this animation logic, extract the logic into a hook:
/** * Returns the variables needed to animate a open and close functionality via height * @param {Boolean} isOpen: boolean is the element initially open * @param {Number} duration: number duration in ms */ function useHeightAnimation(isOpen = false, duration = 350) { const contentRef = React.</description></item><item><title>AbortController with redux-thunk and redux-saga</title><link>https://sometechblog.com/posts/abort-controller-redux/</link><pubDate>Thu, 09 Jul 2020 00:00:00 +0000</pubDate><guid>https://sometechblog.com/posts/abort-controller-redux/</guid><description>Features that allow the user to fire multiple requests quickly and where only the latest request is relevant, should build in an abort controller. A typical example of this is a search filter allowing the user to quickly select and deselect filters. With each clicked filter the application will fire another request to server and update the search results. As requests for previously selected filters are irrelevant, it makes no sense for the browser trying to resolve them all.</description></item><item><title>Deploying Gatsby on a VPS</title><link>https://sometechblog.com/posts/deploying-gatsby-on-vps/</link><pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate><guid>https://sometechblog.com/posts/deploying-gatsby-on-vps/</guid><description>Although it is clearly not in fashion at the moment, deploying websites on a VPS (virtual private server) or regular server for that matter, without any containerization and orchestration is both fast and easy. I have been running my private VPS (with Ubuntu 16.06) for years without much sweat. Using the command line to install and configure a server is both easy and powerful once you know the basic. No need to bother with a fancy UI layer or the limitions it often imposes.</description></item></channel></rss>