<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sara Soueidan – Blog</title>
  <subtitle>Articles on front-end design engineering by Sara Soueidan</subtitle>
  <link href="https://sarasoueidan.com/blog-feed.xml" rel="self"/>
  <link href="https://sarasoueidan.com/"/>
  <updated>2022-11-24T00:00:00Z</updated>
  <id>https://sarasoueidan.com/</id>
  <author>
    <name>Sara Soueidan</name>
    <email>hello@sarasoueidan.com</email>
  </author>
  
  <entry>
    <title>Setting up a screen reader testing environment on your computer</title>
    <link href="https://sarasoueidan.com/blog/testing-environment-setup/"/>
    <updated>2022-11-24T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/testing-environment-setup/</id>
    <content type="html">&lt;p&gt;When you’re designing and developing for accessibility, performing manual testing using a screen reader is important to catch and fix accessibility and usability issues that cannot be caught by automated accessibility checkers. You can catch the majority of issues by performing testing &lt;strong&gt;using the screen readers that your users rely on the most.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you haven’t already, you want to set up a screen reader testing environment on your computer, and invest a little learning time to get acquainted with the most relevant screen reader commands and shortcuts that you will need to perfom basic manual testing with a screen reader on a day-to-day basis.&lt;/p&gt;
&lt;p&gt;In this chapter, we will walk through setting up a screen reader testing environment on your computer. We will discuss software options you have to do that (both free and premium), and &lt;strong&gt;what screen reader and browser combinations to test with.&lt;/strong&gt; We will also go through enabling accessibility testing on a Mac (which requires a little manual work to do). And finally, we will learn about a few useful features and cheasheets that make testing a little friendlier when you’re just getting started.&lt;/p&gt;
&lt;h2 id=&quot;macos-vs-windows-screen-readers&quot; tabindex=&quot;-1&quot;&gt;macOS vs Windows screen readers&lt;/h2&gt;
&lt;p&gt;Both Windows and macOS come with screen readers built into them that are available for free. The built-in Windows screen reader is called &lt;strong&gt;Narrator&lt;/strong&gt;. The macOS built-in screen reader is &lt;strong&gt;VoiceOver&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&quot;https://webaim.org/projects/screenreadersurvey9/&quot;&gt;WebAIM’s screen reader user survey&lt;/a&gt;, &lt;strong&gt;more than 90% of screen reader users reported being on Windows&lt;/strong&gt;. And according to the same survey, &lt;strong&gt;the two most popular screen readers are &lt;a href=&quot;https://www.freedomscientific.com/Products/Blindness/JAWS&quot;&gt;JAWS (Job Access With Speech)&lt;/a&gt; and &lt;a href=&quot;https://www.nvaccess.org/&quot;&gt;NVDA (NonVisual Desktop Access)&lt;/a&gt;&lt;/strong&gt; (which are both Windows screen readers), followed by VoiceOver.&lt;/p&gt;
&lt;p&gt;If you’re already on Windows or if you own a Windows machine, you’re already halfway through setting up your screen reader-testing environment.&lt;/p&gt;
&lt;p&gt;If you’re on a macOS computer, &lt;strong&gt;you shouldn’t test solely with VoiceOver.&lt;/strong&gt; It is more opinionated and does not always reflect what the majority of screen reader users experiences.&lt;/p&gt;
&lt;!-- If you’re on macOS and have no access to a Windows machine, you have a couple of options to test your work using Windows screen readers. The first option that I recommend is to **set up a virtual Windows machine** on your Mac. --&gt;
&lt;p&gt;If you’re on macOS and you have no access to a Windows machine (whether an actual machine or a virtual one), you can test your work with Windows screen readers using any modern browser instead. We’ll get back to this in another section.&lt;/p&gt;
&lt;!-- ## Choose a virtualization environment

There are three popular Virtual Machine software for macOS:
- [VirtualBox](https://www.virtualbox.org/) (Free, open-source)
- [Parallels Desktop](https://www.parallels.com/products/desktop/) (Commercial)
- [VMWare Fusion](https://www.vmware.com/products/fusion.html) (Commercial)

VirtualBox has an advantage over other options in that it is **open-source and available for free.** Parallels Desktop and VMWare Fusion are commercial software.

I personally use Parallels Desktop because it is fast and has a very intuitive user interface. But you can use whichever one you prefer.

Once you have chosen, downloaded and installed a virtualization environment, you can install and run a virtual machine on it.

## Download a Windows Virtual Machine (VM)

Microsoft [provides free Windows 10 Virtual Machines](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/) that you can download and manage locally. 

&lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;../../assets/images/article--a11y-testing-env/ms-vms.png&quot; alt=&quot;Screenshot of the page on the Microsoft website providing Windows virtual machines for download.&quot;&gt;&lt;/figure&gt;

The VM requies a password to login which Microsoft provides along with the installation instructions. The password is `Passw0rd!`. 

Once you&#39;ve downloaded a VM, you want to install it using the virtualization software you have installed earlier.

After installing, **take a snapshot of the virtual machine** because it will expire after 90 days. Taking a snapshot allows you to roll back in time to that snapshot so you can keep using the virtual machine without interruptions.

To take a snapshop using Parallels desktop:

1. Go to &quot;**Actions**&quot; &gt; &quot;**Take Snapshot**&quot;

&lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;../../assets/images/article--a11y-testing-env/vm-snapshot-step-1.png&quot; alt=&quot;Screenshot of MSEdge - Win10 virtual machine desktop showing the Take Snapshopt option in the Actions menu.&quot;&gt;&lt;/figure&gt;

2. Give your snapshot a name and an optional description.
    
&lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;../../assets/images/article--a11y-testing-env/vm-snapshot-step-2.png&quot; alt=&quot;Screenshot of the Snapshot settings dialog. The dialog contains two fields: Snapshot name, and Description. I have named by snapshot &#39;A11y Env&#39;. In the Description field, describe your setup. I tend to mention what apps I have setup and what the environment is set up for.&quot;&gt;&lt;/figure&gt;

&lt;aside role=&quot;note&quot;&gt;

If you&#39;re not using Parallels, follow the instructions to take a snapshot in the virtualization environment you chose. Marcus Herrmann wrote [a short and practical step-by-step guide](https://marcus.io/blog/checking-whcm-on-mac) to installing a Windows 10 VM on VirtualBox that I recommend checking out for instructions on how to get set up in VirtualBox. 
&lt;/aside&gt;

With your Windows VM set up and ready to go, you can now start installing the screen readers you want to test on. --&gt;
&lt;h2 id=&quot;setting-up-windows-screen-readers&quot; tabindex=&quot;-1&quot;&gt;Setting up Windows screen readers&lt;/h2&gt;
&lt;p&gt;JAWS is the most popular and feature-rich screen reader. a JAWS license isn’t free and is faily expensive. But you can still use it to perform testing for your work. &lt;strong&gt;JAWS will run in full in demo mode for 40 minutes at a time, until it is activated on your computer.&lt;/strong&gt; While this is a limitation for longer testing sessions, the 40 minutes are usually more than enough to perform basic testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NVDA is a feature-rich, &lt;em&gt;free&lt;/em&gt; alternative to JAWS&lt;/strong&gt;. We will install and set up NVDA in the following sections.&lt;/p&gt;
&lt;h3 id=&quot;download-nvda-screen-reader-on-windows&quot; tabindex=&quot;-1&quot;&gt;Download NVDA screen reader on Windows&lt;/h3&gt;
&lt;p&gt;Go to the &lt;a href=&quot;https://www.nvaccess.org/&quot;&gt;NVAccess Web site&lt;/a&gt;. Click the Download link. That will take you to the &lt;a href=&quot;https://www.nvaccess.org/download/&quot;&gt;NVDA download page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;NVDA is available for free, but &lt;a href=&quot;https://www.nvaccess.org/support-us/#donation-support&quot;&gt;a donation&lt;/a&gt; is strongly encouraged. &lt;!-- For demoing purposes, I will skip the donation this time. --&gt;&lt;/p&gt;
&lt;p&gt;Click the &lt;strong&gt;Download&lt;/strong&gt; button. Wait for NVDA to download. And go through the installation wizard when it’s done. &lt;!-- (NVDA is already installed on my VM so I will skip the installation now.) --&gt;&lt;/p&gt;
&lt;h4 id=&quot;visualize-nvda%E2%80%99s-current-focus-target-with-visual-highlight&quot; tabindex=&quot;-1&quot;&gt;Visualize NVDA’s current focus target with Visual Highlight&lt;/h4&gt;
&lt;p&gt;To make testing with NVDA more convenient (especially if you’re new to screen reader testing), I recommend enabling NVDA’s Visual Highlight feature.&lt;/p&gt;
&lt;p&gt;To enable it, go to &lt;strong&gt;Preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Vision&lt;/strong&gt; &amp;gt; &lt;strong&gt;Visual Highlight&lt;/strong&gt;, and check the &lt;strong&gt;Enable Highlighting&lt;/strong&gt; option.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--a11y-testing-env/nvda-visual-highlight.png&quot; alt=&quot;Screenshot of the Vision panel in NVDA settings. In the Vision panel, the &#39;Enable Highlighting&#39; option is checked in the Visual Highlight group.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;What this does is it shows a focus highlight around the element that NVDA is currently focused on — whether it’s in a webpage or anywhere on your system. This feature is useful for partially-sighted screen reader users who want to track the location of the NVDA navigator object and the currently-focused element. Seeing where the screen reader’s current focus is at is also helpful for &lt;em&gt;you&lt;/em&gt; when you’re performing testing, especially if you’re recording your screen for an educational video, for example. ^^&lt;/p&gt;
&lt;h4 id=&quot;enable-nvda-speech-viewer&quot; tabindex=&quot;-1&quot;&gt;Enable NVDA speech viewer&lt;/h4&gt;
&lt;p&gt;Another helpful feature you can enable is the &lt;strong&gt;NVDA Speech Viewer&lt;/strong&gt; log window.&lt;/p&gt;
&lt;p&gt;Click the NVDA icon in your taskbar (on the bottom right of your screen by default), and go to &lt;strong&gt;NVDA&lt;/strong&gt; &amp;gt; &lt;strong&gt;Tools&lt;/strong&gt; and enable &lt;strong&gt;Speech Viewer&lt;/strong&gt;. You also have the option to open the speech viewer log window by default on NVDA startup.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--a11y-testing-env/nvda-speech-viewer.png&quot; alt=&quot;Screenshot of the NVDA taskbar menu, with the speech viewer option enabled in the submenu.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;The speech viewer log window contains the text that NVDA speaks, which can be helpful when you’re just getting started with screen reader testing. Just keep in mind that its usefulness of sometimes limited because &lt;a href=&quot;https://adrianroselli.com/2020/08/speech-viewer-logs-of-lies.html&quot;&gt;the log often does not fully represent what is announced&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;setup-keyboard-layout-for-testing-with-nvda-on-a-mac&quot; tabindex=&quot;-1&quot;&gt;Setup keyboard layout for testing with NVDA on a Mac&lt;/h4&gt;
&lt;p&gt;If you’re on a Mac, go to &lt;strong&gt;NVDA&lt;/strong&gt; &amp;gt; &lt;strong&gt;Preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Keyboard&lt;/strong&gt; and Choose “&lt;strong&gt;Laptop&lt;/strong&gt;” Keyboard layout instead of the default Desktop option. The desktop layout relies on many keys which do not exist on some Mac keyboards. You can also set this preference in NVDA’s start popup menu.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--a11y-testing-env/nvda-keyboard-layout.png&quot; alt=&quot;Screenshot of the NVDA settings pane.&quot; /&gt;&lt;/figure&gt;
&lt;aside role=&quot;note&quot;&gt;If you&#39;re using JAWS, there is a similar option in the JAWS startup wizard to choose the Laptop keyboard layout instead of the default Desktop layout.&lt;/aside&gt;
&lt;!-- &lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;../../assets/images/article--a11y-testing-env/jaws-laptop-keyboard-layout.png&quot; alt=&quot;Screenshot of the JAWS startup wizard.&quot;&gt;&lt;/figure&gt; --&gt;
&lt;h3 id=&quot;map-the-insert-key-to-another-key-on-mac&quot; tabindex=&quot;-1&quot;&gt;Map the Insert key to another key on Mac&lt;/h3&gt;
&lt;p&gt;The &lt;kbd&gt;insert&lt;/kbd&gt; key is the default modifier key used by most screen readers on Windows. If you don’t own an external keyboard that has an &lt;kbd&gt;insert&lt;/kbd&gt; key, you might need to use a software work-around to make up for the lack of the &lt;kbd&gt;insert&lt;/kbd&gt; key on your keyboard.&lt;/p&gt;
&lt;p&gt;NVDA settings include an option to set the &lt;kbd&gt;caps lock&lt;/kbd&gt; key as the NVDA modifier key. You can do that if you prefer. I personally prefer to not do that because it interferes with typing when the &lt;kbd&gt;caps lock&lt;/kbd&gt; is On.&lt;/p&gt;
&lt;p&gt;Alternatively, you can use a software program to map one of your less-used keyboard keys to the missing &lt;kbd&gt;insert&lt;/kbd&gt; key. I use &lt;a href=&quot;https://karabiner-elements.pqrs.org/&quot;&gt;Karabiner Elements&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;setting-up-karabiner-elements-on-macos&quot; tabindex=&quot;-1&quot;&gt;Setting up Karabiner Elements on macOS&lt;/h4&gt;
&lt;p&gt;Karabiner is a free app. To use it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the app from &lt;a href=&quot;https://karabiner-elements.pqrs.org/&quot;&gt;the Karabiner Elements Website&lt;/a&gt;. &lt;strong&gt;You want to download it on your Mac, not in your virtual machine.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Run through the setup, and make sure to enable access in your &lt;strong&gt;System Preferences&lt;/strong&gt; settings if it is blocked by macOS (which it probably will be by default).&lt;/li&gt;
&lt;li&gt;Once it is installed and your keyboard is recognized, go to &lt;strong&gt;Simple Modifications&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Choose the device(s) you want to create a mapping for, and then click &lt;strong&gt;Add Item&lt;/strong&gt; to map an unused key to the insert key.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In my Karabiner, I mapped the right &lt;kbd&gt;option&lt;/kbd&gt; key to the Windows &lt;kbd&gt;insert&lt;/kbd&gt; key. And I also mapped the right &lt;kbd&gt;cmd&lt;/kbd&gt; key to the &lt;kbd&gt;print screen&lt;/kbd&gt; key, which can be used in combination with other keys to quickly turn Windows High Contrast mode On and Off (which is a shortcut that will come in handy in another chapter).&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--a11y-testing-env/karabiner.png&quot; alt=&quot;Screenshot of Karabiner’s Simple Modifications panel. In my panel, I have mapped the right_command key to print_screen and the right_option key to insert for all devices.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;That’s it. Now if you open your VM and fire up a screen reader, you can use the right &lt;kbd&gt;option&lt;/kbd&gt; key (or the key of your choice) as a modifier key in place of the &lt;kbd&gt;insert&lt;/kbd&gt; key.&lt;/p&gt;
&lt;h2 id=&quot;virtual-accessibility-testing-in-your-browser&quot; tabindex=&quot;-1&quot;&gt;Virtual accessibility testing in your browser&lt;/h2&gt;
&lt;p&gt;If you’re on macOS and you have no access to a Windows machine, you can test your work with Windows screen readers using any modern browser instead. You can do that using a service called &lt;a href=&quot;https://assistivlabs.com/&quot;&gt;AssistivLabs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AssistivLabs is to screen reader testing what BrowserStack is to cross-browser testing.&lt;/strong&gt; It &lt;strong&gt;remotely connects you to real assistive technologies&lt;/strong&gt; (like NVDA, JAWS, and Windows High Contrast Mode) using any modern web browser.&lt;/p&gt;
&lt;p&gt;AssitivLabs &lt;em&gt;currently&lt;/em&gt; only offers testing with &lt;em&gt;Windows&lt;/em&gt; screen readers and assistive technologies (like Windows High Contrast Mode and Windows Magnifier) for most accounts; testing using macOS assistive technologies will be available in the future.&lt;/p&gt;
&lt;p&gt;AssitivLabs is a paid service — it’s not available for free by default. But it is very helpful for when and if getting access to a Windows machine is otherwise not possible.&lt;/p&gt;
&lt;aside role=&quot;note&quot;&gt;
&lt;p&gt;Note that &lt;a href=&quot;https://practical-accessibility.today/&quot;&gt;Practical Accessibility course&lt;/a&gt; enrollees will get &lt;strong&gt;a 6-months unlimited free trial&lt;/strong&gt; to Assistivlabs. 🎁&lt;/p&gt;
&lt;/aside&gt;
&lt;h2 id=&quot;enable-keyboard-accessibility-on-a-mac&quot; tabindex=&quot;-1&quot;&gt;Enable keyboard accessibility on a Mac&lt;/h2&gt;
&lt;p&gt;To complement your screen reader, you should enable keyboard accessibility on your Mac.&lt;/p&gt;
&lt;p&gt;Keyboard accessibility is not enabled by default on macOS. If you’ve ever tried to tab your way through interactive and focusable elements on webpages and couldn’t, that’s why. (Frustrating, I know.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You need to manually enable keyboard accessibility on macOS&lt;/strong&gt; by going to &lt;strong&gt;System Preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Keyboard&lt;/strong&gt;, and enabling the “&lt;strong&gt;Use keyboard navigation to move focus between controls&lt;/strong&gt;” option in the &lt;strong&gt;Shortcuts&lt;/strong&gt; tab.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--a11y-testing-env/macos-keyboard-settings.png&quot; alt=&quot;Screenshot of the Keyboard preferences pane in macOS System Preferences.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;On macOS 13+, you’ll go to &lt;strong&gt;System Preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Keyboard&lt;/strong&gt;, and then enable the &lt;strong&gt;Keyboard Navigation&lt;/strong&gt; (Use keyboard navigation to move focus between controls. Press the Tab key to move focus forwards and Shift Tab to move focus backwards) option.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--a11y-testing-env/macos-13-keyboard-a11y.png&quot; alt=&quot;Screenshot of the Keyboard preferences pane in macOS 13 System Preferences.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Once you’ve enabled system-wide keyboard accessibility, you want to also enable keyboard tabbing in Safari.&lt;/p&gt;
&lt;p&gt;In Safari, go to &lt;strong&gt;Preferences&lt;/strong&gt; &amp;gt; &lt;strong&gt;Advanced&lt;/strong&gt;. And enable the “&lt;strong&gt;Press tab to highlight each item on a webpage&lt;/strong&gt;” option.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--a11y-testing-env/safari-keyboard-settings.png&quot; alt=&quot;Screenshot of the Safari General Preferences pane.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Now you can tab your way through webpages as you should.&lt;/p&gt;
&lt;aside role=&quot;note&quot;&gt;If you&#39;re on an older version of macOS or you want to enable these settings in Firefox and Chrome, I&#39;ve added a couple of resources to help you do that in the recommended resources section at the end of the chapter.&lt;/aside&gt;
&lt;h2 id=&quot;which-browser-and-screen-reader-pairings-should-you-test-on%3F&quot; tabindex=&quot;-1&quot;&gt;Which browser and screen reader pairings should you test on?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Screen readers work best when they are paired with the browsers they are the most compatible with.&lt;/strong&gt; When performing testing, you can catch most accessibility issues (sometimes even all of them) by pairing each screen reader with the browser it is most commonly used with.&lt;/p&gt;
&lt;h3 id=&quot;on-macos&quot; tabindex=&quot;-1&quot;&gt;On macOS&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;VoiceOver works best with (and should, therefore, be paired with) Safari.&lt;/strong&gt; If you use VoiceOver with Chrome or Firefox, for example, you might get unexpected results because VoiceOver is &lt;strong&gt;optimized&lt;/strong&gt; to work with Safari not with other browsers.&lt;/p&gt;
&lt;h3 id=&quot;on-windows&quot; tabindex=&quot;-1&quot;&gt;On Windows&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Narrator works best with Edge&lt;/strong&gt;, and has difficulty interfacing with other browsers. But Narrator isn’t most users’ first choice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JAWS&lt;/strong&gt; — the most popular of all screen readers on Windows — works best with Chrome and Firefox. When perfoming testing, &lt;strong&gt;pair it with Chrome.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NVDA works best and is commonly paired with Firefox.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;mobile-screen-readers&quot; tabindex=&quot;-1&quot;&gt;Mobile screen readers&lt;/h3&gt;
&lt;p&gt;Throughout this course, we will focus mainly on desktop screen reader testing. But you should test your work using mobile screen readers as well.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://webaim.org/projects/screenreadersurvey9/&quot;&gt;WebAIM’s ninth screen reader user survey&lt;/a&gt;, &lt;strong&gt;90% of respondents reported using a screen reader on a mobile device.&lt;/strong&gt; According to WebAIM, this number has increased over the last 12 years. WebAIM also notes that participants with disabilities (91.6%) are more likely to use a mobile screen reader compared to individuals surveyed without disabilities (71.4%). So it is very important that you test your work on mobile to ensure that it works for a large group of screen reader users.&lt;/p&gt;
&lt;p&gt;VoiceOver on iOS/iPadOS is the most popular mobile screen reader. VoiceOver comes bundled with iOS/iPadOS. Like its desktop version, you want to &lt;strong&gt;use it in conjunction with mobile Safari.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On Android, &lt;strong&gt;Talkback (the built-in screen reader) is best paired with Chrome.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;guides-to-browsing-and-navigating-content-with-a-screen-reader&quot; tabindex=&quot;-1&quot;&gt;Guides to browsing and navigating content with a screen reader&lt;/h2&gt;
&lt;p&gt;Make some time to learn how to navigate and browse web content with each screen reader. It might take some time and feel like a steep learning curve at first, but by doing that you will gain an invaluable skill for your accessibility work.&lt;/p&gt;
&lt;p&gt;Here is a list of official user guides that are helpful for getting started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nvaccess.org/files/nvda/documentation/userGuide.html&quot;&gt;NVDA User guide&lt;/a&gt;. Most read-only webpages are browsed in NVDA using &lt;a href=&quot;https://www.nvaccess.org/files/nvda/documentation/userGuide.html?#BrowseMode&quot;&gt;Browse mode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freedomscientific.com/Products/software/JAWS/&quot;&gt;JAWS documentation&lt;/a&gt; (&lt;a href=&quot;https://www.freedomscientific.com/training/jaws/hotkeys/#wb&quot;&gt;Shortcut to JAWS Hotkeys&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://support.microsoft.com/en-us/windows/complete-guide-to-narrator-e4397a0d-ef4f-b386-d8ae-c172f109bdb1&quot;&gt;Complete guide to Narrator&lt;/a&gt; (&lt;a href=&quot;https://support.microsoft.com/en-us/windows/appendix-b-narrator-keyboard-commands-and-touch-gestures-8bdab3f4-b3e9-4554-7f28-8b15bd37410a#WindowsVersion=Windows_11&quot;&gt;Shortcut to Narrator keyboard commands and touch gestures&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.apple.com/iphone/11/#/iph3e2e415f&quot;&gt;VoiceOver Guide&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-lb/guide/voiceover/vo27974/10/mac/13.0&quot;&gt;Use VoiceOver to browse webpages on Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://help.apple.com/voiceover/command-charts/&quot;&gt;Apple VoiceOver Command charts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://support.google.com/accessibility/android/topic/10601774?hl=en&amp;amp;ref_topic=3529932&quot;&gt;Talkback user guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-lb/guide/iphone/iph3e2e415f/16.0/ios/16.0&quot;&gt;Turn on and practice VoiceOver on iPhone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And to get a high-level (yet practical) overview of how someone using a screen reader browses the Web, I recommend watching the Browsing with assistive technologies video series by Tetralogical:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tetralogical.com/blog/2021/09/29/browsing-with-a-desktop-screen-reader/&quot;&gt;Browsing with a desktop screen reader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tetralogical.com/blog/2021/10/05/browsing-with-a-mobile-screen-reader/&quot;&gt;Browsing with a mobile screen reader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;screen-reader-keyboard-shortcut-cheatsheets&quot; tabindex=&quot;-1&quot;&gt;Screen reader keyboard shortcut cheatsheets&lt;/h2&gt;
&lt;p&gt;When you’re just getting started with screen reader testing, and you want to test with at least three screen readers across different platforms and devices, it can be difficult to remember all the keyboard shortcuts for each screen reader right away.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dequeuniversity.com/screenreaders/&quot;&gt;Deque University&lt;/a&gt; provides useful screen reader keyboard shortcuts and gestures cheatsheets, that you can either reference on your computer, or print out and have them handy during your testing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dequeuniversity.com/screenreaders/survival-guide&quot;&gt;Desktop Screen Readers Survival Guide - Basic Keyboard Shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dequeuniversity.com/screenreaders/forms-guide&quot;&gt;Desktop Screen Readers Forms Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dequeuniversity.com/screenreaders/nvda-keyboard-shortcuts&quot;&gt;NVDA keyboard shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dequeuniversity.com/screenreaders/jaws-keyboard-shortcuts&quot;&gt;JAWS keyboard shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dequeuniversity.com/screenreaders/narrator-keyboard-shortcuts&quot;&gt;Narrator keyboard shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dequeuniversity.com/screenreaders/voiceover-keyboard-shortcuts&quot;&gt;VoiceOver keyboard shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;resources-and-recommended-reading&quot; tabindex=&quot;-1&quot;&gt;Resources and recommended reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://karlgroves.com/efficiency-in-accessibility-testing-or-why-usability-testing-should-be-last/&quot;&gt;Efficiency in Accessibility Testing or, Why Usability Testing Should be Last&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marcus.io/blog/checking-whcm-on-mac&quot;&gt;Checking Windows High Contrast mode on a Mac for free&lt;/a&gt; (inculdes instructions to download and set-up VirtualBox)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dequeuniversity.com/mac/windows-screen-readers&quot;&gt;Using Windows Screen Readers on a Mac&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webaim.org/projects/screenreadersurvey9/&quot;&gt;The WebAIM screen reader user survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scottohara.me/blog/2014/10/03/link-tabbing-firefox-osx.html&quot;&gt;No, tabbing is not broken. Yes, I was confused too.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.a11yproject.com/posts/macos-browser-keyboard-navigation/&quot;&gt;Browser keyboard navigation in macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2018/09/importance-manual-accessibility-testing/&quot;&gt;The Importance Of Manual Accessibility Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://adrianroselli.com/2022/11/your-accessibility-claims-are-wrong-unless.html&quot;&gt;Your Accessibility Claims Are Wrong, Unless…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.accessibility-developer-guide.com/knowledge/screen-readers/relevant-combinations/&quot;&gt;Relevant combinations of screen readers and browsers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;aside role=&quot;note&quot;&gt;
&lt;p&gt;Hat tip and thanks to &lt;a href=&quot;https://sarasoueidan.com/blog/testing-environment-setup/adrianroselli.com/&quot;&gt;Adrian Roselli&lt;/a&gt; for pointing out that the &lt;a href=&quot;https://addons.nvda-project.org/addons/focusHighlight.en.html&quot;&gt;Focus Highlight&lt;/a&gt; NVDA add-on is no longer necessary since focus highlighting has been built into NVDA 2019. &lt;!-- The Focus Highlight add-on also uses colored outlines to differentiate between the various NVDA browsing modes.--&gt;&lt;/p&gt;
&lt;p&gt;And thank you to &lt;a href=&quot;https://twitter.com/viki53?s=21&amp;t=UArpY22DI5MPDonW7LSFmA&quot;&gt;Corentin H.&lt;/a&gt; for providing the screenshot of keyboard accessibility preferences on macOS 13.&lt;/p&gt;
&lt;/aside&gt;
</content>
  </entry>
  
  <entry>
    <title>The CSS prefers-color-scheme user query and order of preference</title>
    <link href="https://sarasoueidan.com/blog/prefers-color-scheme-browser-vs-os/"/>
    <updated>2021-10-03T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/prefers-color-scheme-browser-vs-os/</id>
    <content type="html">&lt;div class=&quot;deck&quot;&gt;I spent some time in &lt;a href=&quot;https://reederapp.com/&quot;&gt;Reeder app&lt;/a&gt; this morning, catching up with RSS and the latest articles published by my favorite blogs.
&lt;p&gt;I was reading Scott O’Hara’s article about &lt;a href=&quot;https://www.scottohara.me//note/2021/10/01/detect-high-contrast-and-dark-modes.html&quot;&gt;using JavaScript to detect high contrast and dark modes&lt;/a&gt;, which includes a small, very useful script to do exactly what the title says. The output of that script at first looked like it was a “false positive”. But some further investigation led me to learn something new about the &lt;code&gt;prefers-color-scheme&lt;/code&gt; CSS user query.&lt;/p&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Scott’s article includes &lt;a href=&quot;https://codepen.io/scottohara/pen/BaZEQOq&quot;&gt;a Codepen&lt;/a&gt; to demonstrate the output of the script. The script will check and detect if you currently have high contrast mode or dark mode enabled, and will output the result of the check.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;600&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;BaZEQOq&quot; data-user=&quot;scottohara&quot; style=&quot;height: 571px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
        &lt;span&gt;&lt;a href=&quot;https://codepen.io/scottohara/pen/BaZEQOq&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/scottohara&quot;&gt;@scottohara&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
        &lt;/p&gt;
        &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Since JavaScript doesn’t run in Reeder app, I clicked to open the original article on Scott’s Web site. That’s when I saw that the script was reporting that I had dark mode ON, even though I don’t have dark mode enabled on my phone.&lt;/p&gt;
&lt;p&gt;Having just recently updated to iOS 15, my first thought that this might be a browser/OS bug or something.&lt;/p&gt;
&lt;p&gt;But then it hit me: I &lt;em&gt;do&lt;/em&gt; have dark mode enabled… &lt;em&gt;in Reeder app&lt;/em&gt;. &lt;small&gt;(Reeder has a nice dark mode which I enjoy reading in.)&lt;/small&gt; This instantly led me to question whether the media query was picking up &lt;em&gt;that&lt;/em&gt; dark mode, instead of the OS-level preference.&lt;/p&gt;
&lt;p&gt;When I opened the article on Scott’s Web site, I opened it in Reeder’s in-app browser. Which means that the script was running in that context when it reported that dark mode was ON.&lt;/p&gt;
&lt;p&gt;So to test my assumption further, I opened the article in iOS Safari, which is running in the Light scheme mode (set on the OS-level). The script does not report that dark mode is ON in that context.&lt;/p&gt;
&lt;p&gt;In order to confirm this behavior, I checked the results of the test in Reeder app on my Mac, which is running dark mode on OS-level. I toggled the theme in Reeder app between Light and Dark to verify the results. Sure enough, the script detected dark mode ON when the app theme was set to Dark, but not when the app theme was set to Light.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/article__prefers-color-scheme/reeder-dark-theme.png&quot; alt=&quot;Screenshot of Scott’s article opened in Reeder’s in-app browser. The codepen result says &#39;high contrast off and dark mode on&#39;. To the left of the image is Reeder’s preferences pane open, showing the current theme set to &#39;Dark&#39;&quot; /&gt;
    &lt;figcaption&gt;The &lt;code&gt;prefers-color-scheme&lt;/code&gt; media query picks up the dark mode set in the app. Note that dark mode is also enabled on the OS level, but the media query is picking up the color theme from the app context.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/article__prefers-color-scheme/reeder-light-theme.png&quot; alt=&quot;Screenshot of Scott’s article opened in Reeder’s in-app browser. The codepen result only says &#39;high contrast off&#39;, indicating that dark mode is not on. To the left of the image is Reeder’s preferences pane open, showing the current theme set to &#39;Classic&#39; (which is a light theme).&quot; /&gt;
    &lt;figcaption&gt;App color theme taking precedence over OS-level theme. Even though dark mode is enabled on the OS level, the &lt;code&gt;prefers-color-scheme&lt;/code&gt; media query picks up the light mode set in the app when the app’s theme is the classic light.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In an attempt to verify whether this was a bug or a feature, I checked &lt;a href=&quot;https://drafts.csswg.org/mediaqueries-5/#prefers-color-scheme&quot;&gt;the specification&lt;/a&gt;. The spec includes these two paragraphs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The method by which the user expresses their preference can vary. It might be a system-wide setting exposed by the Operating System, or a setting controlled by the user agent.
[…]
User preferences can also vary by medium. […] UAs are expected to take such variances into consideration so that prefers-color-scheme reflects preferences appropriate to the medium rather than preferences taken out of context.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That explains it. &lt;strong&gt;UA preference &amp;gt; OS-level preference.&lt;/strong&gt; Something to keep in mind for when an “unexpected behavior” happens. A good reminder to always test and check the specifications. Had this not been in the spec, then further investigation might have led to an existing bug report or to the creation of one. Who knows.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;And &lt;em&gt;that&lt;/em&gt; was my first #TIL moment of the day.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stay curious.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(Oh and also: &lt;strong&gt;RSS is awesome.&lt;/strong&gt; Thank you to everyone providing an RSS feed for their content. &lt;em&gt;You&lt;/em&gt; are awesome.)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>In Quest of Search</title>
    <link href="https://sarasoueidan.com/blog/in-quest-of-search/"/>
    <updated>2021-09-15T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/in-quest-of-search/</id>
    <content type="html">&lt;p&gt;There’s been &lt;a href=&quot;https://twitter.com/domenic/status/1437891692926017537?s=20&quot;&gt;a recent discussion on Twitter&lt;/a&gt; about the idea of adding a new element in HTML that represents a search interface. A search form, basically.&lt;/p&gt;
&lt;p&gt;The idea is to create a semantic HTML element for &lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#search&quot;&gt;the ARIA &lt;code&gt;search&lt;/code&gt; role&lt;/a&gt;, which represents a landmark region “that contains a collection of items and objects that, as a whole, combine to create a search facility.”&lt;/p&gt;
&lt;p&gt;Opinions have been shared in the Twitter thread about whether adding a new HTML element is necessary. Many have argued that it was unnecessary because we can use the ARIA &lt;code&gt;search&lt;/code&gt; role and repurpose a &lt;code&gt;form&lt;/code&gt; element to create the same semantics. I disagree. And this article is the longer version of &lt;strong&gt;my personal opinion&lt;/strong&gt; on the subject.&lt;/p&gt;
&lt;h2 id=&quot;tl%3Bdr&quot; tabindex=&quot;-1&quot;&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;I do strongly encourage the addition of a new HTML element that represents—and can consequently obviate the use of—the ARIA &lt;code&gt;search&lt;/code&gt; landmark role. A search element would provide HTML parity with the ARIA role, and encourage less use of ARIA in favor of native HTML elements.&lt;/p&gt;
&lt;p&gt;The suggested element would be syntactic sugar for &lt;code&gt;&amp;lt;div role=&amp;quot;search&amp;quot;&amp;gt;&lt;/code&gt; like &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; is syntactic sugar for &lt;code&gt;&amp;lt;div role=&amp;quot;main&amp;quot;&amp;gt;&lt;/code&gt;. This means that it would an HTML sectioning element, not a replacement for another element.&lt;/p&gt;
&lt;p&gt;I would choose &lt;code&gt;&amp;lt;search&amp;gt;&lt;/code&gt; as a name for that element. In my mind, &lt;code&gt;&amp;lt;search&amp;gt;&lt;/code&gt; would be to &lt;code&gt;role=&amp;quot;search&amp;quot;&lt;/code&gt; what &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; is to &lt;code&gt;role=&amp;quot;navigation&amp;quot;&lt;/code&gt;. But any other appropriate name would, of course, also work.&lt;/p&gt;
&lt;p&gt;The rest of this article is my reasoning for encouraging the idea of adding a semantic HTML element for search.&lt;/p&gt;
&lt;h2 id=&quot;html-and-aria-landmark-roles&quot; tabindex=&quot;-1&quot;&gt;HTML and ARIA landmark roles&lt;/h2&gt;
&lt;p&gt;The ARIA specification includes a list of ARIA &lt;strong&gt;roles&lt;/strong&gt; that are used to define regions of a page as landmarks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;banner&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;complementary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contentinfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;form&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;navigation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;region&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTML currently contains 112 elements. Eight of those elements are &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices/examples/landmarks/HTML5.html&quot;&gt;sectioning elements&lt;/a&gt;: &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;aside&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, &lt;code&gt;article&lt;/code&gt;, &lt;code&gt;section&lt;/code&gt;, &lt;code&gt;form&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Seven of these HTML sectioning elements are &lt;a href=&quot;https://www.w3.org/TR/core-aam-1.2/&quot;&gt;mapped&lt;/a&gt; to ARIA landmarks, which are used by assistive technologies (ATs).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;header&lt;/code&gt; is the HTML native equivalent for ARIA’s &lt;code&gt;role=&amp;quot;banner&amp;quot;&lt;/code&gt; (when it is scoped to the &lt;code&gt;body&lt;/code&gt; element. See &lt;a href=&quot;https://www.w3.org/TR/html-aam-1.0/&quot;&gt;HTML Accessibility API Mappings&lt;/a&gt; for more information.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;footer&lt;/code&gt; is the HTML native equivalent for ARIA’s &lt;code&gt;role=&amp;quot;complementary&amp;quot;&lt;/code&gt; (also in the context of the &lt;code&gt;body&lt;/code&gt; element)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nav&lt;/code&gt; is the HTML native equivalent for ARIA’s &lt;code&gt;role=&amp;quot;navigation&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt; is the HTML equivalent for ARIA’s &lt;code&gt;role=&amp;quot;main&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;form&lt;/code&gt; is the HTML equivalent for ARIA’s &lt;code&gt;role=&amp;quot;form&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aside&lt;/code&gt; is the HTML equivalent of ARIA’s &lt;code&gt;role=&amp;quot;complementary&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;section&lt;/code&gt; is the HTML native equivalent for ARIA’s &lt;code&gt;role=&amp;quot;region&amp;quot;&lt;/code&gt; (when it has &lt;a href=&quot;https://www.w3.org/TR/wai-aria/#dfn-accessible-name&quot;&gt;an accessible name&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is because these elements exist that we often don’t need to use ARIA’s equivalent roles &lt;small&gt;(unless we absolutely &lt;em&gt;have&lt;/em&gt; to repurpose another element using those roles, or expose an element to ATs when it is outside of its expected context)&lt;/small&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; exists, why should a &lt;code&gt;&amp;lt;search&amp;gt;&lt;/code&gt; &lt;small&gt;(or whatever other name it gets)&lt;/small&gt; not? If &lt;code&gt;&amp;lt;search&amp;gt;&lt;/code&gt; is to be deemed unnecessary because &lt;code&gt;role=&amp;quot;search&amp;quot;&lt;/code&gt; exists, wouldn’t this also mean that &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; (and other landmark elements) would be considered &lt;em&gt;redundant&lt;/em&gt; because &lt;code&gt;role=&amp;quot;nav&amp;quot;&lt;/code&gt; (and other ARIA roles) exists?&lt;/p&gt;
&lt;h2 id=&quot;html-and-aria-landmarks%2C-beyond-semantics&quot; tabindex=&quot;-1&quot;&gt;HTML and ARIA landmarks, beyond semantics&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://w3c.github.io/aria/#landmark_roles&quot;&gt;ARIA landmark roles&lt;/a&gt; are roles assigned to regions of a page that are intended as &lt;strong&gt;navigational landmarks&lt;/strong&gt;. Using ARIA landmarks (or their equivalent native HTML elements when they exist) is meant to also facilitate user navigation.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;https://w3c.github.io/aria/&quot;&gt;the W3C WAI-ARIA Editor’s Draft&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Assistive technologies SHOULD enable users to quickly navigate to elements with role search. User agents SHOULD treat elements with role search as navigational landmarks. User agents MAY enable users to quickly navigate to elements with role search.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When HTML sectioning elements (and/or ARIA landmark roles) are appropriately used on a page, assistive technology users such as screen readers users could use those landmarks to navigate the page more efficiently, allowing them to jump to the area of the page that they want.&lt;/p&gt;
&lt;p&gt;For example, if the &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element (or, equivalently, the &lt;code&gt;role=&amp;quot;navigation&amp;quot;&lt;/code&gt; ARIA role on a qualifying element) is used to wrap a page’s navigation, the navigation shows up in the VoiceOver Rotor on macOS. Similarly, using the &lt;code&gt;main&lt;/code&gt; element will make the main section of the page show up in the landmarks menu. The user can then quickly jump straight to the navigation section or to the main content area of the page if they want to, bypassing other regions of the page. This increases the user’s efficiency and improves their navigation experience.&lt;/p&gt;
&lt;p&gt;Similarly, when you use &lt;code&gt;role=&amp;quot;search&amp;quot;&lt;/code&gt; on a &lt;code&gt;form&lt;/code&gt; element, that form will show up as a search region in the landmarks menu. The user can then jump to the search form if they need to quickly search for something.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article__search-html-element/search-vo-webaim.png&quot; alt=&quot;A screenshot of VoiceOver&#39;s Rotor open on the homepage of Webaim.org, showing a search landmark in the Landmarks menu. The screenshot also shows the Web inspector of the page open and a code snippet highlighting the use of role=&#39;search&#39; on the form element wrapping the search input field.&quot; /&gt;&lt;figcaption&gt;The search form on WebAIM&#39;s Web site shows up in the Landmarks menu by VoiceOver on macOS because &lt;code&gt;role=&quot;search&quot;&lt;/code&gt; ARIA role is present on the &lt;code&gt;form&lt;/code&gt; element.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;figure&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article__search-html-element/search-vo-smashing.png&quot; alt=&quot;A screenshot of VoiceOver&#39;s Rotor open on SmashingMagazine.com, demonstrating the lack of a search landmark in the landmarks menu. The screenshot also shows the Web inspector of the page open and a code snippet highlighting the absence of role=&#39;search&#39; on the form element wrapping the search input field.&quot; /&gt;&lt;figcaption&gt;The search form on Smashing Magazine&#39;s Web site is not recognized as a search landmark by VoiceOver on macOS because &lt;code&gt;role=&quot;search&quot;&lt;/code&gt; ARIA role is absent on the &lt;code&gt;form&lt;/code&gt; element.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;div class=&quot;note&quot;&gt;&lt;em&gt;If HTML sectioning elements are used without understanding the associated landmark structure, assistive technology users will most likely be confused and less efficient in accessing content and interacting with web pages.&lt;/em&gt;&lt;/div&gt;
&lt;h3 id=&quot;but-is-a-native-search-landmark-worth-it%3F&quot; tabindex=&quot;-1&quot;&gt;But is a native search landmark worth it?&lt;/h3&gt;
&lt;p&gt;Yes, it is. Search is one of the most common and most used sections of many Web sites. Of course, a “It Depends” is warranted here, too.&lt;/p&gt;
&lt;p&gt;Depending on the Web site, search might be the first thing a user looks for and uses on a given site. E-commerce Web sites are a great example of where search forms are essential and heavily used. Educational and documentation sites are another example.&lt;/p&gt;
&lt;p&gt;Take MDN, for example. Search is so important and on MDN that the site even includes a Skip Link that enables keyboard users to skip straight to the search
field.&lt;/p&gt;
&lt;figure&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article__search-html-element/mdn-search-skip-link.png&quot; alt=&quot;A screenshot the MDN homepage with a &#39;skip to search&#39; skip link highlighted at the top edge of the page.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Now I don’t have any user research data or anything, but I would assume that the skip link was added because of how frequently users reach for the search field to look up documentation about specific topics they’re searching for.&lt;/p&gt;
&lt;h2 id=&quot;just-because-an-aria-role-exists%2C-it-doesn%E2%80%99t-eliminate-the-usefulness-of-a-native-html-equivalent&quot; tabindex=&quot;-1&quot;&gt;Just because an ARIA role exists, it doesn’t eliminate the usefulness of a native HTML equivalent&lt;/h2&gt;
&lt;p&gt;I’ll just say it again: ust because an ARIA role exists, it doesn’t eliminate the usefulness of a native HTML equivalent.&lt;/p&gt;
&lt;h2 id=&quot;the-purpose-of-aria&quot; tabindex=&quot;-1&quot;&gt;The purpose of ARIA&lt;/h2&gt;
&lt;p&gt;…is to provide parity with HTML semantics. It is meant to be used to &lt;strong&gt;fill in the gaps&lt;/strong&gt; and provide semantic meaning where HTML falls short.&lt;/p&gt;
&lt;p&gt;ARIA is &lt;strong&gt;not meant to &lt;em&gt;replace&lt;/em&gt; HTML.&lt;/strong&gt; If anything, the need to use ARIA as ‘polyfill’ for HTML semantics could be considered as a sign and a constant reminder of the fact that HTML falls short on some semantics that benefit users of assistive technologies. This is due to the lack of native HTML elements that provide the meaning (and sometimes, by extension, the behavior) that these ATs need to convey to their users.&lt;/p&gt;
&lt;p&gt;If we can get an HTML element that fills a part of the gap, it’s only going to be a win—no matter how small of a win it might seem.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&amp;gt; ARIA is not meant to replace HTML&lt;br /&gt;&lt;br /&gt;this! In fact, I think we might want it to go the other way around, with HTML replacing ARIA bit by bit until its services are no longer required&lt;/p&gt;&amp;mdash; Hidde (@hdv) &lt;a href=&quot;https://twitter.com/hdv/status/1438197503095103494?ref_src=twsrc%5Etfw&quot;&gt;September 15, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;the-first-rule-of-aria&quot; tabindex=&quot;-1&quot;&gt;The first rule of ARIA&lt;/h2&gt;
&lt;p&gt;The first rule of &lt;a href=&quot;https://www.w3.org/TR/aria-in-html/&quot;&gt;ARIA use in HTML&lt;/a&gt; states that you should &lt;strong&gt;avoid using ARIA if there is a native HTML element with the semantics of behavior that you require already built in.&lt;/strong&gt; If such an element exists, you should reach for that element instead.&lt;/p&gt;
&lt;p&gt;This means that ARIA should be &lt;strong&gt;a second resort, not a first approach.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By providing HTML elements that are implicitly mapped to ARIA roles, we can encourage the use of proper HTML markup to convey semantic meaning, and spread more awareness to help avoid both overuse and misuse of ARIA in general.&lt;/p&gt;
&lt;p&gt;If we can get an HTML element that enables us to use ARIA less, then that element should, in my opinion, be a welcomed addition.&lt;/p&gt;
&lt;h2 id=&quot;outro&quot; tabindex=&quot;-1&quot;&gt;Outro&lt;/h2&gt;
&lt;p&gt;A native search element might feel like a &lt;em&gt;small&lt;/em&gt; technical win to many, but the consistency it provides, the HTML semantics gap it fills, and the awareness it could potentially help spread would all make it a useful and welcomed addition.&lt;/p&gt;
&lt;p&gt;112 to 113 HTML elements? I hope so.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A guide to designing accessible, WCAG-compliant focus indicators</title>
    <link href="https://sarasoueidan.com/blog/focus-indicators/"/>
    <updated>2021-08-13T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/focus-indicators/</id>
    <content type="html">&lt;style&gt;
    figure {
        margin: 3em 0;
    }
    figure img {
        margin: 0 auto;
    }
&lt;/style&gt;
&lt;p&gt;Imagine you visit a website and you want to browse it for some content. You want to buy something; or maybe book a flight somewhere. And as you move your cursor onto the page, it suddenly disappears. Your hand may be still on the mouse, and you’re moving the mouse across the screen and across the page; but you can’t see where it is. You may or may not be hovering over a link or a button or any other form control at any moment. But if you &lt;em&gt;are&lt;/em&gt; hovering over one, you don’t know which one it is. You could try clicking and then finding out, but you can probably already imagine what a nightmare of an experience you’re about to get into.&lt;/p&gt;
&lt;p&gt;Unfortunately, keyboard users experience the Web in a similarly frustrating manner too often. Their equivalent of a mouse cursor is usually hidden on too many websites, making it almost impossible for them to navigate those sites. A keyboard user’s cursor equivalent is the &lt;strong&gt;focus indicator&lt;/strong&gt;. By designing and implementing accessible focus indicators, we can make our products accessible to keyboard users, as well as users of assistive technology that works &lt;em&gt;through&lt;/em&gt; a keyboard or emulates keyboard functionality, such as voice control, switch controls, mouth sticks, and head wands, to mention a few.&lt;/p&gt;
&lt;h2 id=&quot;what-exactly-is-a-focus-indicator%3F&quot; tabindex=&quot;-1&quot;&gt;What exactly &lt;em&gt;is&lt;/em&gt; a focus indicator?&lt;/h2&gt;
&lt;p&gt;Keyboard users typically navigate their way through websites by pressing the &lt;kbd&gt;tab&lt;/kbd&gt; key. This allows them to jump from one interactive element on the page to another.&lt;/p&gt;
&lt;p&gt;Just like mouse users, they need to be able to see where they are on a page as they Tab their way through it, otherwise they won’t be able to identify the elements they are interacting with. That’s what &lt;strong&gt;focus indicators&lt;/strong&gt; are for.&lt;/p&gt;
&lt;p&gt;A focus indicator is a visual indicator that “highlights” the currently focused element. This visual indicator is commonly presented as an outline around the element. An outline takes the shape of its element, and since every element in CSS is a rectangle, an outline is, therefore, usually a rectangle drawn around an element.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;video class=&quot;video-gif&quot; controls=&quot;&quot; src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/mdn-focus-indicator.mp4&quot; width=&quot;100%&quot;&gt;
        Sorry, your browser doesn&#39;t support embedded videos.
    &lt;/video&gt;
    &lt;figcaption&gt;Navigating the Mozilla Developer Network (MDN) website using a keyboard. As you tab through the homepage, you can see a rectangular outline highlighting the currently focused element.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;aside role=&quot;note&quot;&gt;A focus indicator can also take other forms, but outlines are very common for several reasons. Outlines have an advantage over other visual indicators (such as borders or background colors, for example) in that they can be applied to the element without causing any significant changes to that element. And since an outline is not part of an element&#39;s box model, it does not affect the layout of that element, and will therefore not cause any layout shifts when it is applied. (That&#39;s also why outlines are preferred over borders for visualizing and debugging layouts 💡) In addition to that, outlines are preserved and used in Forced Color Modes such as Windows High Contrast Mode, where background colors, border colors, and box shadows are usually overridden by user and system styles.&lt;/aside&gt;
&lt;p&gt;So a focus indicator allows a keyboard  user to see exactly where they are at any given moment. Without it, they wouldn’t know where they are on a page and they wouldn’t be able to navigate the page and operate its controls.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The focus indicator is to keyboard users what the mouse cursor is to mouse users.&lt;/strong&gt; And just like you would never want to hide the mouse cursor, you never want to hide the focus indicator.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/laura-focus-slide.png&quot; alt=&quot;Laura Carvajal on stage at Fronteers 2018, with a slide on screen behind her that says &#39;You wouldn&#39;t steal their cursor&#39;&quot; /&gt;
&lt;figcaption&gt;Laura Carvajal on stage at Fronteers conference 2018.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;In fact, &lt;strong&gt;a visible focus indicator&lt;/strong&gt; is a requirement for a site to be considered accessible under the Web Content Accessibility Guidelines (WCAG). Removing or hiding focus indicators is a violation and will therefore fail &lt;a href=&quot;https://www.w3.org/TR/WCAG22/#focus-visible&quot;&gt;Success Criterion (SC) 2.4.7: Focus Visible (Level A)&lt;/a&gt;, which states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;browser-default-focus-styles&quot; tabindex=&quot;-1&quot;&gt;Browser default focus styles&lt;/h2&gt;
&lt;p&gt;Browsers provide focus indicators to native interactive elements out of the box, for free. And most of us—if not all—have at some point in time included this CSS snippet in their stylesheets:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to remove those focus indicators applied by the browser.&lt;/p&gt;
&lt;p&gt;To meet the accessibility requirement, you should avoid removing the focus indicator provided by the browser &lt;em&gt;unless&lt;/em&gt; you are replacing it with your own focus indicator. And I do recommend you do that.&lt;/p&gt;
&lt;p&gt;By preserving browser focus styles, you &lt;em&gt;may&lt;/em&gt; meet the requirement of showing a visible focus indicator, but that may not be enough, because a focus indicator needs to be &lt;em&gt;clearly&lt;/em&gt; visible to be considered accessible. And browser focus indicators may not always be.&lt;/p&gt;
&lt;p&gt;(What’s the benefit of &lt;em&gt;showing&lt;/em&gt; an indicator that many users may not be able to &lt;em&gt;see&lt;/em&gt;?)&lt;/p&gt;
&lt;p&gt;In order for a focus indicator to be clearly visible it needs to have a color contrast against adjacent colors that is high enough for users with moderately low vision to be able to discern it.&lt;/p&gt;
&lt;p&gt;The Web Content Accessibility Guidelines define the minimum color contrast ratio required for interactive components &lt;strong&gt;and their states&lt;/strong&gt; to be accessible in SC &lt;a href=&quot;https://www.w3.org/TR/WCAG21/#non-text-contrast&quot;&gt;1.4.11 Non-Text Contrast&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Focus indicators on UI controls fall under the “non-text” components category, as they are used to identify a component’s state. To pass this criterion, our focus indicators &lt;strong&gt;must have a color contrast ratio of at least 3:1 against adjacent colors.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Default focus indicators provided by browsers may fail this criterion, depending on the colors you’re using on your page. You can end up with a usability problem if the colors of your page clash with the colors of the default focus indicators, making them difficult to see. When that happens, you’ll want to &lt;em&gt;override&lt;/em&gt; those focus styles with better, more accessible ones.&lt;/p&gt;
&lt;p&gt;Here is a screenshot of how Chrome, Firefox, Microsoft Edge, and Safari style their respective focus indicators (at the time of writing) when applied to a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/browser-focus-styles.png&quot; alt=&quot;Screenshot showing a blue button on a white background with four different focus indicators as applied by Chrome, Firefox, Edge, and Safari.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Chrome, Edge and Safari apply a 1-pixel solid outline. Firefox applies a 1-pixel dotted outline. As far as color contrast with the white background goes, they all pass the accessibility check. But the dotted outline in Firefox is still very difficult to discern compared to the other outlines, even though its color has enough contrast with the white background. This is because the contrasting &lt;em&gt;area&lt;/em&gt; of the outline is not large enough. And that’s because the outline is very thin and dotted. We’ll come back to this shortly.&lt;/p&gt;
&lt;p&gt;On a black background, Firefox’s black focus indicator disappears, and Safari’s indicator has a contrast so low it will be extremely difficult to discern by most users.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/Browser-focus-styles-on-black.png&quot; alt=&quot;Screenshot showing the blue button on a black background with four different focus indicators as applied by Chrome, Firefox, Edge, and Safari.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Chrome and MS Edge, however, have something interesting happening in that they apply what looks like a &lt;em&gt;second&lt;/em&gt; outline—a white outline around the first outline, that creates enough contrast on most darker backgrounds.&lt;/p&gt;
&lt;aside role=&quot;note&quot;&gt;
Chrome and Edge v94 and up provide more visible focus indicators that you can enable in their respective settings panes that you can access like this:
&lt;ul&gt;
&lt;li&gt;In Chrome, type this into the URL bar: &lt;code&gt;chrome://settings/accessibility&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In Edge (v94 and up), type this into the URL bar: &lt;code&gt;edge://settings/accessibility&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then you can enable the more visible focus indicators by enabling the corresponding option in each panel:&lt;/p&gt;
&lt;p&gt;In Chrome, enable the “Show a quick highlight on the focused object” option.&lt;/p&gt;
&lt;p&gt;In edge, enable the “Show a high visibility outline around the area of focus on the page” option.&lt;/p&gt;
&lt;p&gt;When these options are on, you’ll notice an additional border as well as a box shadow around the focused elements.&lt;/p&gt;
&lt;p&gt;Firefox does not provide a similar option at the time being. But you can make the default dotted outline more visible by tweaking the style and width options in Firefox’s configuration pane.&lt;/p&gt;
&lt;p&gt;You can do that by navigating to &lt;code&gt;about:config&lt;/code&gt;. Use the search bar within the config page to search for &lt;code&gt;focus_ring&lt;/code&gt;. The search results will show two variables that you can tweak: &lt;code&gt;browser.display.focus_ring_style&lt;/code&gt; and &lt;code&gt;browser.display.focus_ring_width&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you set the style value to 0 and the width value to 4, you’ll get a thicker outline that more resembles the outline provided in Chrome and Safari by default.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;So while you &lt;em&gt;may&lt;/em&gt; get away with using the default browser focus styles to meet WCAG 2.1 requirements and call it a day, it is generally a good idea that you &lt;strong&gt;override the default styles with more accessible ones.&lt;/strong&gt;  In fact, in &lt;a href=&quot;https://www.w3.org/TR/WCAG22/&quot;&gt;WCAG 2.2&lt;/a&gt;, it becomes necessary to do that, because the requirements get more specific, and as you’ll see in the following sections, browser focus indicators will often fail the new requirements.&lt;/p&gt;
&lt;p&gt;In what follows, we’re going to get a little nerdy!&lt;/p&gt;
&lt;h2 id=&quot;new-focus-indicator-accessibility-requirements-in-wcag-2.2&quot; tabindex=&quot;-1&quot;&gt;New focus indicator accessibility requirements in WCAG 2.2&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.w3.org/TR/WCAG22/&quot;&gt;WCAG 2.2&lt;/a&gt;, three new success criteria were added to define &lt;em&gt;how accessible&lt;/em&gt; a focus indicator is depending on its &lt;strong&gt;color, area, and visibility&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SC &lt;strong&gt;2.4.11 Focus Appearance&lt;/strong&gt; (Level AA),&lt;/li&gt;
&lt;li&gt;SC &lt;strong&gt;2.4.12 Focus Not Obscured (Minimum)&lt;/strong&gt; (Level AA), and&lt;/li&gt;
&lt;li&gt;SC &lt;strong&gt;2.4.13 Focus Not Obscured (Enhanced)&lt;/strong&gt; (level AAA)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These new criteria aim to ensure that a keyboard focus indicator is &lt;strong&gt;clearly visible and discernible&lt;/strong&gt;, and they provide the conditions to ensure that. These criteria specify &lt;strong&gt;a minimum area&lt;/strong&gt; required for the focus indicator to be considered accessible, taking into account its &lt;strong&gt;color contrast ratio&lt;/strong&gt;  relative to its initial color, as well as against adjacent colors within the focused component.&lt;/p&gt;
&lt;p&gt;We’re going to dive into these requirements and how to meet them in the following sections.&lt;/p&gt;
&lt;p&gt;We’ll start with &lt;strong&gt;SC 2.4.11 Focus Appearance&lt;/strong&gt; which states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When the keyboard focus indicator is visible, one or both of the following are true:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The entire focus indicator meets all the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;encloses the user interface component or sub-component that is focused, and&lt;/li&gt;
&lt;li&gt;has a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states, and&lt;/li&gt;
&lt;li&gt;has a contrast ratio of at least 3:1 against adjacent non-focus-indicator colors.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;An area of the focus indicator meets all the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;is at least as large as the area of a 1 CSS pixel thick perimeter of the unfocused component or sub-component, or is at least as large as a 4 CSS pixel thick line along the shortest side of the minimum bounding box of the unfocused component or sub-component, and&lt;/li&gt;
&lt;li&gt;has a contrast ratio of at least 3:1 between the same pixels in the focused and unfocused states, and&lt;/li&gt;
&lt;li&gt;has a contrast ratio of at least 3:1 against adjacent non-focus-indicator colors, or is no thinner than 2 CSS pixels.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exceptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The focus indicator is determined by the user agent and cannot be adjusted by the author, or&lt;/li&gt;
&lt;li&gt;The focus indicator and the indicator’s background color are not modified by the author.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;For most of the examples, we’ll be demonstrating and examining the focus indicator requirements when applied to a blue button set on a white background.&lt;/p&gt;
&lt;p&gt;To start, we’re going to define two terms that will help us understand these requirements: the &lt;strong&gt;focus indication area&lt;/strong&gt;, and the &lt;strong&gt;contrasting area&lt;/strong&gt;. (These terms were introduced in previous versions of the Success Criteria and have been edited out in the final wording. But I think they are helpful in understanding the requirements.)&lt;/p&gt;
&lt;h3 id=&quot;1.-the-focus-indication-area-and-the-contrasting-area&quot; tabindex=&quot;-1&quot;&gt;1. The focus indication area and the contrasting area&lt;/h3&gt;
&lt;p&gt;When a component changes on focus to include a focus indicator, that change can always be measured as a change of color contrast.&lt;/p&gt;
&lt;p&gt;If you add a black outline around the blue button, the change of color between the unfocused and focused states is from white to black. That’s because &lt;strong&gt;the area— the pixels on the screen —that has changed color&lt;/strong&gt; in the focused state is the area &lt;em&gt;around&lt;/em&gt; the button. That area was initially white, and it changed to black when the button received focus. This area is called &lt;strong&gt;the focus indication area.&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/focus-indication-area-1.jpg&quot; alt=&quot;Illustration: On the left is a blue button with a white label in its default, unfocused state. In the middle is the blue button with a thick black outline around it. On the right, is a button with the same outline but with a pattern applied to it, indicating that this patterned area is the focus indication area.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;The focus indication area is the area in square CSS pixels where the change in color &lt;!--contrast--&gt; between the focused and unfocused states of the component happens.&lt;/p&gt;
&lt;p&gt;For a focus indicator to be accessible, it is required to have &lt;strong&gt;an area of the focus indication area&lt;/strong&gt; (a &lt;em&gt;subset&lt;/em&gt; of the focus indication area) that has &lt;strong&gt;a minimum contrast ratio of 3:1&lt;/strong&gt; between the colors in the focused and unfocused states. That area is called &lt;strong&gt;the contrasting area&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In other words, the contrasting area is the area of the focus indication area that has at least a 3:1 contrast ratio with the colors of the unfocused state. And &lt;strong&gt;the contrasting area may or may not be equal to the entire focus indication area.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the previous example, the color change happens from a solid white to a solid black, and the color contrast ratio between the unfocused and focused state (white and black) is &lt;strong&gt;21&lt;/strong&gt;:1. So the entire focus indication area meets the minimum contrast requirement. This means that the contrasting area is equal to the entire focus indication area.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/contrasting-area-1.jpg&quot; alt=&quot;Illustration: On the left is a blue button with a white label in its default, unfocused state. In the middle is the blue button with a thick black outline around it. On the right, is a button with the same outline but with a pattern applied to it, indicating that this patterned area is the contrasting area.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Similarly, if you add a black outline that is separated from the button, once again, the area that exhibits the change in color is the contrasting area.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/contrasting-area-2.jpg&quot; alt=&quot;Illustration: On the left is a blue button with a white label in its default, unfocused state. In the middle is the blue button with a separated thick black outline. On the right, is a button with the same outline but with a pattern applied to it, indicating that this patterned area is the contrasting area.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;(I like this pattern because it adds some breathing room and helps the focus indicator stand out, making it easier to see.)&lt;/p&gt;
&lt;p&gt;If you add an outline inside the button itself, the contrasting area then lies inside the button. The change of color is from blue (the button’s background color) to black. The color contrast ratio between the focused and unfocused state is &lt;strong&gt;4.86&lt;/strong&gt;:1.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/contrasting-area-3.jpg&quot; alt=&quot;Illustration: On the left is a blue button with a white label in its default, unfocused state. In the middle is the blue button with an inner thick black outline. On the right, is a button with the same outline but with a pattern applied to it, indicating that this patterned area is the contrasting area.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;If the button changes its background color from blue to black on focus, then the entire button’s background area is the contrasting area, and the color contrast ratio between the focused and unfocused state is once again &lt;strong&gt;4.86&lt;/strong&gt;:1.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/contrasting-area-4.jpg&quot; alt=&quot;Illustration: On the left is a blue button with a white label in its default, unfocused state. In the middle is the button in its focused state, having a black background instead of blue. On the right, is a button with with a pattern applied to its background area, indicating that this patterned area is the contrasting area.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;When the focus indicator is a solid color, measuring the color contrast ratio in the contrasting area is straightforward. But color changes may not always be solid. You may want to indicate focus on the button by applying a gradient drop shadow to it. In this case, &lt;strong&gt;only the portion of the gradient with sufficient contrast (larger than 3:1) will be our contrasting area&lt;/strong&gt;; the remaining portion that fails will not be a part of it. This is an example of when the contrasting area is smaller than the focus indication area.&lt;/p&gt;
&lt;p&gt;You may need to take some spot-checks on the gradient area and establish what area meets the contrast requirement.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/gradient-contrast.jpg&quot; alt=&quot;Illustration: On the left is a blue button with a white label in its default, unfocused state. Next to it on the right is the blue button with a translucent black drop shadow as the focus indication area. On the right, is a button with the same drop shadow minus the parts of the drop shadow that don&#39;t pass the minimum contrast requirement, indicating that the remaining area (that does pass) is the contrasting area.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;The greater the change of contrast between the unfocused and focused states, the easier it is for users to see it.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In addition to requiring a minimum contrast in the contrasting area, a focus indicator is required to have &lt;em&gt;a minimum surface area&lt;/em&gt;  for the contrasting area as well. In other words, the contrasting area needs to be large enough to be considered accessible. But how much is large &lt;em&gt;enough&lt;/em&gt;?&lt;/p&gt;
&lt;h3 id=&quot;2.-minimum-contrasting-area&quot; tabindex=&quot;-1&quot;&gt;2. Minimum contrasting area&lt;/h3&gt;
&lt;p&gt;Remember how we said that Firefox’s dotted outline was difficult to discern even though its contrasting area had a high contrast ratio with the background? I mentioned that that’s because its area was small, due to the outline being thin and dotted. The main issue here lies in the fact that it is &lt;em&gt;dotted&lt;/em&gt;. The gaps in the line decrease the overall area of the focus indicator, making it difficult to see.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The bigger the visible change when the component receives focus, the easier it is to see.&lt;/strong&gt; And to ensure that focus indicators have good visibility, 2.4.11 requires &lt;strong&gt;a minimum surface area&lt;/strong&gt; for the contrasting area. That is, the contrasting area needs to be larger than a specified minimum.&lt;/p&gt;
&lt;p&gt;The SC states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The entire focus indicator encloses the user interface component or sub-component that is focused
[ or ]
An area of the focus indicator is at least as large as the area of a 1 CSS pixel thick perimeter of the unfocused component or sub-component, or is at least as large as a 4 CSS pixel thick line along the shortest side of the minimum bounding box of the unfocused component or sub-component&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To “enclose” a component means to “solidly bound or surround”. Bounding is derived from the “bounding box” of an element. The bounding box of a component is the smallest possible &lt;em&gt;rectangle&lt;/em&gt; that entirely encloses it and its descendants. Surrounding is kind of like “wrapping” a shape. The difference between bounding and surrounding is illustrated in the two images of a set of ratings stars.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/bound-vs-surround.png&quot; alt=&quot;Two sets of star ratings. In both sets, the same three stars have been selected, and the focus indicator is visible on the third star. In the first set, the focus indicator is a rectangular outline bounding the star. In the second set, the focus indicator is a star-shaped solid outline that surrounds the star.&quot; /&gt;
&lt;figcaption&gt;
In the first image, the focus indicator solidly &lt;em&gt;bounds&lt;/em&gt; the star. In the second image, the focus indicator (also a solid outline) &lt;em&gt;surrounds&lt;/em&gt; the star. (&lt;a href=&quot;https://w3c.github.io/wcag/understanding/focus-appearance.html&quot;&gt;Image Source&lt;/a&gt;)
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The first point in the criterion is technically a special case of the second condition.&lt;/p&gt;
&lt;p&gt;A focus indicator that encloses a component is a focus indicator that &lt;em&gt;solidly bounds or surrounds&lt;/em&gt; the component. A solid outline is an example of a focus indicator that solidly bounds an element. And solid 1px outline has an area of at least 1px thick perimeter of the component. (Of course, any outline thicker than 1px will also meet the area requirement.)&lt;/p&gt;
&lt;p&gt;If the focus indicator is dotted or dashed (not solid), it no longer ‘solidly bounds or surrounds’ the component and will therefore need to meet the condition defined in the second point.&lt;/p&gt;
&lt;p&gt;The second point determines the minimum contrasting area using the perimeter of the component.&lt;/p&gt;
&lt;p&gt;The perimeter of a rectangle is equal to a line that’s 2 times the width plus 2 times the height minus the shared corner pixels which are equal to 4 pixels: &lt;strong&gt;Perimeter § = 2&lt;em&gt;h + 2&lt;/em&gt;w - 4&lt;/strong&gt;.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/area-calcs.jpg&quot; alt=&quot;Illustration: On the left is the blue button with annotations for the long and short sides of the button. On the right, is the button with width and height annotations, and text that calculates the perimeter of the button: Perimeter (P) = 2*height + 2*width - 4&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;The perimeter of a circle is &lt;strong&gt;2𝜋r&lt;/strong&gt;, where &lt;strong&gt;r&lt;/strong&gt; is the radius of that circle.&lt;/p&gt;
&lt;p&gt;Firefox’s focus indicator is equal to the length of the perimeter of the button &lt;em&gt;minus&lt;/em&gt; all the gap spaces introduced by using the dotted style. The resulting length is approximately half of the perimeter. To fix it, the outline thickness can be doubled to make up for the area that is lost in the gaps. Here’s what the dotted outline looks like with 2px and 3px thicknesses. &lt;strong&gt;The thicker the outline, the larger its surface area, and the easier it is to see.&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/firefox-outline.jpg&quot; alt=&quot;Illustration: the blue button on the left with Firefox&#39;s default 1px dotted outline. In the middle is the same button with Firefox&#39;s dotted outline at 2px thickness. And on the right is the button with a 3px-thick dotted outline.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Now let’s assume, for demonstration purposes, that we’re designing focus styles for a &lt;strong&gt;150px&lt;/strong&gt; by &lt;strong&gt;75px&lt;/strong&gt; button. The perimeter of this button is: 150px + 150px + 75px + 75px - 4px = &lt;strong&gt;446px&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When we apply an &lt;em&gt;inner&lt;/em&gt; outline to the button, this outline is going to be smaller than the perimeter of the button (because the outline’s width and height are shorter than the button’s width and height). Once again, increasing the thickness of the outline will make up for the area lost by placing the outline inside the button.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/outline-area.jpg&quot; alt=&quot;Illustration: On the left: the blue button with a 1px thin inner black outline. And text indicating that this outline fails. On the right: the blue button with a 2px thick inner outline, and text indicating that this outline passes.&quot; /&gt;
&lt;figcaption&gt;A 130px by 55px outline inside the button will have a surface area of 366px, which is smaller than our perimeter&#39;s 446px area. By doubling the thickness of the outline, its surface area becomes 732px, which is larger than the perimeter and therefore meets the minimum area requirement.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Similarly, for a contrasting area in a gradient focus indicator, you’ll want to calculate the component’s perimeter and compare the contrasting area to that of the perimeter.&lt;/p&gt;
&lt;p&gt;In the following image is a circle with a 22px radius and 138px perimeter.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/circle-perimeter-example.jpg&quot; alt=&quot;Illustration: a circular button with a magnifier (search) icon as a visual label. Three variations of the button, each with a different focus indicator (1), (2), and (3). (1) is a 1px solid separated circular outline. (2) is a 1px solid circular inner outline. And (3) is a 3px thick inner circular outline.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;On the top right, the focus indicator (1) is a 1px solid circular outline. The perimeter of the focus indicator is 172px, which is larger than 138px. With a color contrast change that is higher than the minimum requirement, this indicator passes the accessibility requirement.&lt;/p&gt;
&lt;p&gt;On the bottom left, focus indicator (2) is an inner 1px solid outline with enough color contrast change, but an area (113px) smaller than the circle’s perimeter. This indicator does not pass the requirements.&lt;/p&gt;
&lt;p&gt;And finally on the bottom right, the focus indicator (3) is an inner 2px thick outline. This outline has a double the area of focus indicator (2) (226px), making it larger than the perimeter of the circle, so it passes the minimum area requirement.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In addition to the minimum area requirement that is based on the component’s perimeter, the success criterion also provides &lt;strong&gt;a secondary minimum&lt;/strong&gt; based on the shortest side of the component:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;or is at least as large as the area of a 4px thick line along the shortest side of the component’s minimum bounding box&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Instead of aiming for a minimum area of 1px thick perimeter, you could aim for a 4px thick line along the shortest side of the component’s bounding box.&lt;/p&gt;
&lt;p&gt;The secondary minimum area can be useful for when you have a list of focusable items stacked on top of each other, such as links in a vertical navigation or a drop-down menu. The focus indicator on a link in the drop-down could be a 4px thick border along the shortest side (typically the height) of the link as shown in the image below.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/4px-outline.jpg&quot; alt=&quot;A list of vertically-stacked menu items in their unfocused state (left). On the right is the list with a 4px thick focus indicator applied to the left edge (shortest side) of one of the list items.&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;The thicker the line, the larger the contrasting area, the more visible the focus indicator is. Obviously, the 4px thick line along the shortest side of the element is &lt;em&gt;a minimum&lt;/em&gt;. A border along the longest side would also meet the requirement (assuming the thickness ensures a large enough area). My point is that, while I am giving simple and specific examples, my goal is to demonstrate the requirements. But you have the creative freedom to choose any focus indicator style you prefer that meets the accessibility requirements.&lt;/p&gt;
&lt;p&gt;The main goal of the minimum area requirement is to ensure that the focus indicator is easier to see. Whetever the style you choose to indicate focus, the important thing is to ensure that the contrasting area meets the minimum area requirement(s), so that it can be easily seen.&lt;/p&gt;
&lt;h3 id=&quot;3.-contrast-with-adjacent-colors-in-the-component&quot; tabindex=&quot;-1&quot;&gt;3. Contrast with adjacent colors in the component&lt;/h3&gt;
&lt;p&gt;In addition to requiring a minimum contrast ratio 3:1 and a minimum surface area, the contrasting area also needs to be easily distinguishable from &lt;strong&gt;adjacent colors&lt;/strong&gt; within the focused component.&lt;/p&gt;
&lt;p&gt;This is accomplished either by&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ensuring &lt;strong&gt;at least 3:1 contrast ratio between the contrasting area and adjacent colors&lt;/strong&gt;, &lt;em&gt;or&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;ensuring the contrasting area has &lt;strong&gt;a thickness no less than 2px.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll start with the blue button again as an example, and apply a simple 1px (external) outline to indicate focus. But this time, I’m changing the color of the outline from black to a darker shade of the blue background.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/adjacent-contrast-fail.jpg&quot; alt=&quot;On the left, the blue button in its default, unfocused state. On the right is the blue button with a 1px thick dark blue outline applied to it.&quot; /&gt;
&lt;figcaption&gt;
The button’s background color is: `#314cff`. 
And the outline color is: `#1100cd`.
&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The contrasting area’s contrast ratio (dark blue versus the white background) is: &lt;strong&gt;11.02&lt;/strong&gt;:1. And its area is larger than the button’s perimeter. So the outline color and area pass the minimum contrasting area requirements that we discussed earlier.&lt;/p&gt;
&lt;p&gt;But the dark blue color of the outline has a low contrast ratio &lt;strong&gt;against the adjacent blue&lt;/strong&gt; used in the background of the button: 1.89:1. So while this outline meets the first two accessibility requirements, it fails the third one.&lt;/p&gt;
&lt;p&gt;To fix it, we can either&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;choose a different outline color that has at least 3:1 contrast ratio&lt;/strong&gt; against the button’s background color (like black &lt;code&gt;#000&lt;/code&gt;, for example), &lt;strong&gt;or&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;increase the thickness of the outline.&lt;/strong&gt; Any thickness greater than or equal to 2px will do.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We &lt;em&gt;can&lt;/em&gt; also fix the low adjacent contrast by &lt;strong&gt;separating the outline from the button&lt;/strong&gt;, so the outline’s adjacent color becomes white (the page background), and would therefore meet the color contrast requirement.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/adjacent-contrast-pass.png&quot; alt=&quot;On the left is the blue button with a black 1px solid outline, and text that says &#39;Pass&#39; underneath it. In the middle, is the blue button with a 2px thick dark blue outline, and text that says &#39;Pass&#39;. On the right is the blue button with a 1px dark blue outline separated from the button&#39;s edges, and text that says &#39;Pass&#39;.&quot; /&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4.-the-focused-element-cannot-be-fully-obscured&quot; tabindex=&quot;-1&quot;&gt;4. The focused element cannot be fully obscured&lt;/h3&gt;
&lt;p&gt;The goal of a focus indicator is to allow the user to see and know where they are on a page, by making the currently active element more visible to their eye.&lt;/p&gt;
&lt;p&gt;But what good is a focus indicator if the focused element itself is not visible because it’s hidden off-screen or obscured by other elements on the page?&lt;/p&gt;
&lt;p&gt;SC &lt;strong&gt;2.4.12 Focus Not Obscured (Minimum)&lt;/strong&gt; states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a user interface component receives keyboard focus, the component is not entirely hidden due to author-created content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Simply put: you want to make sure the user can actually see the component that they’re focusing on, by making sure it’s not hidden behind other content on the page.&lt;/p&gt;
&lt;p&gt;That being said, this criterion requires that the component be &lt;q&gt;not entirely hidden&lt;/q&gt;. This does imply that it could be partially hidden, as long as it’s still partially visible.&lt;/p&gt;
&lt;p&gt;SC &lt;strong&gt;2.4.13 Focus Not Obscured (Enhanced)&lt;/strong&gt; (which is the level AAA version of this requirement) states that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a user interface component receives keyboard focus, no part of the focus indicator is hidden by author-created content.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When aiming for Level AA conformance, you may get away with partially hiding the focused component, though I can’t imagine where or how that would not be problematic. I recommend that you &lt;strong&gt;always make sure focused component is &lt;em&gt;entirely&lt;/em&gt; visible&lt;/strong&gt; and not obscured by other content. It’s just better for usability. SC 2.4.13 is one of the AAA-level criteria that are also fairly easy to meet, even if you’re not aiming to be AAA-compliant.&lt;/p&gt;
&lt;p&gt;You may wonder if this requirement makes Skip links inaccessible. It doesn’t. Because Skip links are designed so that they are &lt;strong&gt;visible when they receive focus&lt;/strong&gt;; so the user &lt;em&gt;is&lt;/em&gt; able to see what they are focusing on when they focus on the skip link.&lt;/p&gt;
&lt;p&gt;A very common pattern that is more likely to fail this criterion on many websites is off-canvas navigation and other drop-down and fly-out components.  Links in drop-down or off-canvas navigations are only meant to be interactive when they are visible. If you want to click on a link, you open the navigation, the links become visible, and you can click on the link you need and go where you need to go.&lt;/p&gt;
&lt;p&gt;Keyboard users sometimes experience these navigation patterns differently when they are implemented inaccessibly. They’ll navigate through a page and suddenly notice their focus indicator disappear. They may continue tabbing, until at some point the indicator finally re-appears and continues to the next visible link.&lt;/p&gt;
&lt;p&gt;This happens because the links that are hidden off-screen or inside dropdowns are &lt;strong&gt;only visually hidden&lt;/strong&gt;, but are still accessible via keyboard. This results in a mismatch between the visual and keyboard experiences of a keyboard user: they’re tabbing through links and components that they are not seeing on screen.&lt;/p&gt;
&lt;p&gt;To avoid this happening, make sure that components that are not meant to be visibly interactive are properly hidden, by making them inert, for example.&lt;/p&gt;
&lt;h2 id=&quot;recap&quot; tabindex=&quot;-1&quot;&gt;Recap&lt;/h2&gt;
&lt;p&gt;So theses are the accessibility requirements for focus indicators to pass WCAG.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is an area of the focus indicator that has a contrast ratio of at least 3:1 between the colors in the focused and unfocused states. (This is the focus indicator’s contrasting area.)&lt;/li&gt;
&lt;li&gt;The contrasting area needs to be at least as large as:
&lt;ul&gt;
&lt;li&gt;the area of a 1px thick perimeter of the component, or&lt;/li&gt;
&lt;li&gt;the area of a 4px thick line along the shortest side of the component’s minimum bounding box&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The contrasting area has a contrast ratio of at least 3:1 against adjacent colors in the focused component, or the contrasting area has a thickness of at least 2px&lt;/li&gt;
&lt;li&gt;The focused element is not obscured by other elements on the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these requirements in mind, we now know that Firefox’s button focus indicator that we saw earlier fails the minimum contrasting area requirement.
Chrome and Edge’s current focus indicators would fail the adjacent contrast requirement if your button has a background color that clashes with the outline’s color. And Safari’s focus indicator will also fail the minimum contrast ratio requirements also depending on the colors you use inside and outside the button.&lt;/p&gt;
&lt;p&gt;These browsers may also apply different focus indicators to different interactive elements, which may also fail at least one of the accessibility requirements, depending on your color palette.&lt;/p&gt;
&lt;p&gt;So &lt;strong&gt;I highly recommend overriding the default focus indicators with custom, more accessible ones.&lt;/strong&gt; This also gives you the creative freedom to design focus indicators that look nicer on your components than the ones provided by the browser.&lt;/p&gt;
&lt;p&gt;Knowing what makes a focus indicator accessible, we can examine our own as well as the focus indicators of popular design systems and UI pattern libraries, and determine which ones pass WCAG criteria and which ones don’t…&lt;/p&gt;
&lt;h2 id=&quot;examining-the-accessibility-of-focus-indicators-in-popular-design-systems-and-ui-pattern-libraries&quot; tabindex=&quot;-1&quot;&gt;Examining the accessibility of focus indicators in popular design systems and UI pattern libraries&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://material.io/components/buttons&quot;&gt;Material design button&lt;/a&gt; focus indicator is a change in background color, in addition to an elevation effect created by extending the box shadow underneath the button. This focus indicator &lt;strong&gt;fails&lt;/strong&gt; the accessibility requirements because of a very low change in contrast (&lt;strong&gt;1.53&lt;/strong&gt;:1) between the focused and unfocused states.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/material-design-button.jpg&quot; alt=&quot;A button from Material Design&#39;s component library in its default unfocused state on the left, and its focused state on the right. When unfocused, the button has a navy blue background color. In its focused state, the background color becomes purple.&quot; style=&quot;max-width: 100%; width:500px;&quot; /&gt;
&lt;figcaption&gt;Material Design’s button focus indicators fail WCAG requirements for accessibility.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://getbootstrap.com/docs/4.0/components/buttons/&quot;&gt;Bootstrap 4 buttons&lt;/a&gt; also fail WCAG requirements because of low change in contrast between the focused and unfocused states. For example, the change in contrast on the blue button is &lt;strong&gt;1.92&lt;/strong&gt;:1.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/bootstrap-4-buttons.jpg&quot; alt=&quot;A screenshot of buttons from Bootstrap 4&#39;s component library in their unfocused state. Below it, is a screenshot of those buttons with their focus indicators visible. The focus indicators are 2px or 3px-thick outlines with lighter versions of the colors used in their backgrounds.&quot; /&gt;&lt;figcaption&gt;Bootstrap 4’s button focus indicators also fail WCAG requirements for accessibility.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://material-ui.com/components/checkboxes/#basic-checkboxes&quot;&gt;Material UI Checkboxes&lt;/a&gt; get a large focus indicator area, but the color contrast change is also low (&lt;strong&gt;1.58&lt;/strong&gt;:1).&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/Material-ui-checkbox.jpg&quot; alt=&quot;On the left: a Material UI checkbox in its unfocused state. The checkbox (in its checked state) has a red background and a white checkmark. On the right is the checkbox in its focused state, showing a large focus indicator. The focus indicator is a large circle with a light red background color.&quot; style=&quot;max-width: 100%; width:350px;&quot; /&gt;&lt;figcaption&gt;Material UI’s checkbox focus indicator fails WCAG requirements for accessibility.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gov.uk/&quot;&gt;GOV.UK&lt;/a&gt; is one of the most accessibility-compliant websites I know. So I was curious to see how their focus indicators measure against WCAG 2.2 requirements.&lt;/p&gt;
&lt;p&gt;When focused, the links get a thick underline as well as a change in background color from white to yellow. While the yellow does not pass the minimum color contrast requirement, the indicator still passes accessibility requirements with the thick border compensating for that. (Note: A focus indicator that is larger than the minimum area may have parts that do not meet the 3:1 contrast ratio, as long as an area equal to the minimum does meet the contrast ratio.)&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/govuk-link.jpg&quot; alt=&quot;On the left, a link in its default, unfocused state. The link has a blue color and an underline. On the right is the same link in its focused state. The link&#39;s focus indicator is a yellow background color behind the text, as well as a thick black underline.&quot; /&gt;&lt;figcaption&gt;GOV.UK’s link focus indicator passes WCAG requirements for accessibility.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;The text field on the &lt;a href=&quot;http://gov.uk/&quot;&gt;GOV.UK&lt;/a&gt; homepage gets a 3px solid yellow outline as a focus indicator. This yellow outline has a contrast change (&lt;strong&gt;3.86&lt;/strong&gt;:1) that’s higher than the requirement minimum (for a pixel color change from blue to yellow). The yellow color does not contrast with the input’s white background enough (adjacent contrast), but it is 3px thick, which compensates for that. So this focus indicator passes WCAG requirements.&lt;/p&gt;
&lt;figure class=&quot;&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/article--focus-indicators/govuk-text-input.jpg&quot; alt=&quot;On the left: screenshot of a text input as seen on the GOV.UK homepage. The background behind the content is a shade of blue. The text input has a white background and no border. On the right, the text input in its focused state. The focus indicator is a 3px thick yellow outline around the input.&quot; /&gt;&lt;figcaption&gt;GOV.UK’s text input focus indicator (on the homepage) passes WCAG requirements for accessibility.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&quot;showing-the-focus-indicators-only-for-keyboard-users&quot; tabindex=&quot;-1&quot;&gt;Showing the focus indicators only for keyboard users&lt;/h2&gt;
&lt;p&gt;The main argument I usually hear &lt;em&gt;against&lt;/em&gt; focus styles is that they appear even when you don’t want them to, such as when you click on the component with a mouse ot tap on it. Designers and stakeholders are usually not very fond of that. I remember a client once reporting “a bug” and telling me that mouse clicks are “kinda broken” because a thick outline appears when they clicked on links and buttons on the page. When that happens, I usually start a discussion about what focus styles are, why they are important, and why we should keep them. And then I’d always try to make a case for preserving them and “compromising aesthetics” for the sake of usability and accessibility. I didn’t always win those discussions.&lt;/p&gt;
&lt;p&gt;Today, I have those arguments far less. While I still find myself asking for focus styles in design specs, I don’t need to argue my way into including them in the final product.&lt;/p&gt;
&lt;p&gt;CSS enables us to show focus styles for keyboard users and hide them for all other users. So when you click an interactive element, the focus styles won’t show up and “ruin the aesthestics” anymore. Anyone navigating the page with a keyboard will appreciate the visual aid, and those who aren’t using a keyboard won’t even know they’re there!&lt;/p&gt;
&lt;p&gt;Browsers used to show their focus indicators on click (or tap), too. That’s why we used to include the “focus reset” rule in our style sheets:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* don&#39;t do this */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;*:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Today, all modern browsers only show focus indicators when they are needed: for keyboard users. The focus outline doesn’t show up when you click or tap an element; it only shows up when you tab to it with a keyboard.&lt;/p&gt;
&lt;p&gt;When you create your own custom focus indicators, you probably want to do the same and only show them for users who need them.&lt;/p&gt;
&lt;p&gt;You can do that using the &lt;code&gt;:focus-visible&lt;/code&gt; pseudo-class.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:focus-visible&lt;/code&gt; does exactly the same thing &lt;code&gt;:focus&lt;/code&gt; does, except that it only applies the focus indicator styles to an element when that element receives &lt;em&gt;keyboard focus&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* applies a black outline to links only when focused via keyboard */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;a:focus-visible&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2px solid black&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://caniuse.com/css-focus-visible&quot;&gt;Browser support for &lt;code&gt;:focus-visible&lt;/code&gt;&lt;/a&gt; is pretty good — pretty much all modern browsers support it today. So you may want to use &lt;a href=&quot;https://github.com/WICG/focus-visible&quot;&gt;the focus-visible polyfill&lt;/a&gt; if you need to hide the focus indicator on older browsers. The polyfill works by adding a &lt;code&gt;focus-visible&lt;/code&gt; class to the focused element, in situations in which the &lt;code&gt;:focus-visible&lt;/code&gt; pseudo-selector should match.&lt;/p&gt;
&lt;p&gt;In your CSS, you can then use the class name added by the polyfill to target the focused element and apply the same focus styles you apply using the &lt;code&gt;:focus-visible&lt;/code&gt; pseudo-class:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.js-focus-visible :focus:not(.focus-visible)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also skip the polyfill altogether and use &lt;code&gt;:focus-visible&lt;/code&gt; as an enhancement on top of &lt;code&gt;:focus&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In his article about &lt;a href=&quot;https://developer.paciellogroup.com/blog/2018/03/focus-visible-and-backwards-compatibility/&quot;&gt;&lt;code&gt;:focus-visible&lt;/code&gt; and backwards compatibility&lt;/a&gt;, Patrick Lauke suggests a clever way to use &lt;code&gt;:focus-visible&lt;/code&gt; today as part of a progressive enhancement strategy.&lt;/p&gt;
&lt;p&gt;The solution Patrick suggests is to use the &lt;code&gt;:not()&lt;/code&gt; negation pseudo-class, and to (paradoxically) define styles not for &lt;code&gt;:focus-visible&lt;/code&gt;, but to undo &lt;code&gt;:focus&lt;/code&gt; styles when it is absent, and then using &lt;code&gt;:focus-visible&lt;/code&gt; if we wanted to provide additional stronger styles for browsers that support it.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;button:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;/* some exciting button focus styles */&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;button:focus:not(:focus-visible)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token comment&quot;&gt;/* undo all the above focused button styles&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; if the button has focus but the browser wouldn&#39;t normally&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt; show default focus styles */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;button:focus-visible&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token comment&quot;&gt;/* some even *more* exciting button focus styles */&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;button:focus:not(:focus-visible)&lt;/code&gt; is CSS for “when the button receives focus that is not focus-visible”. That is, “when the button receives focus that is not keyboard focus”. In other words, “when the button receives focus that is mouse focus, for example”. When that happens, undo all the &lt;code&gt;:focus&lt;/code&gt; styles. Then apply keyboard-only focus styles using &lt;code&gt;button:focus-visible&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As Patrick notes, &lt;q&gt;this works even in browsers that don’t support &lt;code&gt;:focus-visible&lt;/code&gt; because although &lt;code&gt;:not()&lt;/code&gt; supports pseudo-classes as part of its selector list, browsers will ignore the whole thing when using a pseudo-class they don’t understand/support, meaning the entire &lt;code&gt;button:focus:not(:focus-visible) { ... }&lt;/code&gt; block is never applied.&lt;/q&gt;&lt;/p&gt;
&lt;p&gt;I have a VSCode snippet set up that I use to quickly create these rulesets in my stylesheets, with sensible defaults that I find myself repeating across projects most of the time.&lt;/p&gt;
&lt;p&gt;I’ll end this section with this paragraph from Patrick’s article (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you care about backwards compatibility (and you should, &lt;strong&gt;&lt;em&gt;until you can absolutely guarantee without any doubt that all your users will have a browser that supports&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;:focus-visible&lt;/em&gt;&lt;/strong&gt;), you will always have to either polyfill or use the combination of &lt;code&gt;:focus&lt;/code&gt; and &lt;code&gt;:not(:focus-visible)&lt;/code&gt; (plus optional even stronger &lt;code&gt;:focus-visible&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;tips-for-styling-focus-indicators&quot; tabindex=&quot;-1&quot;&gt;Tips for styling focus indicators&lt;/h2&gt;
&lt;p&gt;Focus indicators have a purpose, so do what you can do to ensure that they serve that purpose well. They are meant to improve our users’ experience. The user couldn’t care less about the aesthetics of focus styles as long as they help them do what they are visiting your site to do.&lt;/p&gt;
&lt;p&gt;I like to create focus indicators that stand out. The more visible they are, the less the user needs to look for them, the better.&lt;/p&gt;
&lt;p&gt;You can get creative and create &lt;strong&gt;patterned focus indicators&lt;/strong&gt; which have that extra benefit of not relying on color alone to convey state. Just remember to make sure they meet the minimum contrast and area requirements.&lt;/p&gt;
&lt;p&gt;We can also learn something from the way Edge and Chrome handle focus styles. Maybe create “double outlines” that play well in various color environments, or when you support both light and dark UI user preferences. In the future, the new &lt;a href=&quot;https://www.w3.org/TR/css-color-5/#colorcontrast&quot;&gt;the CSS &lt;code&gt;color-contrast()&lt;/code&gt; function&lt;/a&gt; can come in handy to create a sensible default focus style for most components. In fact, &lt;code&gt;color-contrast()&lt;/code&gt; will come in handy for a lot of accessible color design in the future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Avoid relying on background colors and box shadows alone to indicate focus.&lt;/strong&gt; Forced Color Modes and other &lt;a href=&quot;https://www.a11yproject.com/posts/2020-01-23-operating-system-and-browser-accessibility-display-modes/&quot;&gt;accessibility display modes&lt;/a&gt; will override and/or remove them. Outlines, on the other hand, will not be removed and would always be visible; and the browser will apply the display mode’s custom colors to style them.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;can&lt;/em&gt; use backgrounds, borders and box shadows to style focus states. But if you do, add a transparent outline as a “fallback” for the various display modes:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;button:focus-visible&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;/* Default. Will be removed in Forced Color Modes */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5px 5px 7px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;/* Fallback. Will be visible with custom system colors in Forced Color Modes */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid transparent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Focus indicators can also be animated.&lt;/strong&gt; Background colors, borders, box shadows, and outlines can all be animated using CSS transitions and animations. The &lt;code&gt;outline-width&lt;/code&gt; and &lt;code&gt;outline-offset&lt;/code&gt; properties take numerical values that can be animated. So you can apply a subtle transition to your focus indicators to make them pop. Just make sure to wrap any transitions or animations in a &lt;code&gt;prefers-reduced-motion&lt;/code&gt; user query, so users have the option to opt out of the animations if they want to.&lt;/p&gt;
&lt;p&gt;When you’re designing and working with a color palette, you can find a color that has enough contrast with the other colors in your palette and use it to style your focus indicators. If there is no one color that meets that criterion, you can add one, or design focus styles that work for different elements and the contexts in which they appear.&lt;/p&gt;
&lt;p&gt;You can use a color contrast tool like &lt;a href=&quot;https://www.getstark.co/&quot;&gt;Stark&lt;/a&gt; to quickly check the contrast of two colors without interrupting your workflow — whether you’re designing in a design tool like Figma or in the browser. You can also use the browser devtools to check color contrast where they are available, or an online tool like &lt;a href=&quot;https://webaim.org/resources/contrastchecker/&quot;&gt;WebAIM’s color contrast checker&lt;/a&gt;, which I used to calculate the color contrasts throughout this article.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Not all elements need to have the same focus style.&lt;/strong&gt; I personally try to keep focus indicators visually consistent as much as possible. But there are times when some elements could benefit from a different focus style, whether for aesthetic or usability purposes—or maybe even both! Get creative, but do so within the boundaries of accessibility. Creating nice focus indicators is a nice touch that not only shows your attention to detail, but it also shows that you care about &lt;em&gt;all&lt;/em&gt; of your user’s experiences enough to spend a bit of time fine-tuning these details.&lt;/p&gt;
&lt;h2 id=&quot;outro&quot; tabindex=&quot;-1&quot;&gt;Outro&lt;/h2&gt;
&lt;p&gt;Designing accessible focus indicators is easier now that there are specific criteria to measure accessibility against.&lt;/p&gt;
&lt;p&gt;If you’re a designer, make a habit to design and include focus indicator styles in your design specs if you don’t already do so.&lt;/p&gt;
&lt;p&gt;If you’re a developer, include focus styles in your CSS defaults. If you’re working with designers, strike up a discussion about focus styles with them if they don’t already prioritize them in design specs.&lt;/p&gt;
&lt;p&gt;Sometimes, you don’t need permission, extra time, or extra budget to improve the accessibility and usability of your product. Focus indicators are one small yet critical addition to your product that has tremendous usability benefits. Spending a few extra minutes designing and adding them will pay dividends and improve your product for millions of people who will use it.&lt;/p&gt;
&lt;h2 id=&quot;resources%2C-references-and-further-reading&quot; tabindex=&quot;-1&quot;&gt;Resources, references and further reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hiddedevries.nl/en/blog/2019-06-06-indicating-focus-to-improve-accessibility&quot;&gt;Indicating focus to improve accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://alastairc.uk/tests/wcag22-examples/focus-visible-enh-examples.html&quot;&gt;Focus visible enhanced examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.paciellogroup.com/blog/2018/03/focus-visible-and-backwards-compatibility/&quot;&gt;&lt;code&gt;:focus-visible&lt;/code&gt; and backwards compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/focusing-on-focus-styles/&quot;&gt;Focusing on Focus Styles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!--Alastair Campbell, one of the editors of WCAG 2.2, has also examined the accessibility of focus indicators on a bunch of websites and [shared his findings](https://alastairc.uk/tests/wcag22-examples/focus-visible-enh-examples.html). Seeing how more different focus indicators have passed or failed WCAG criteria is helpful in gaining a clearer understanding of the criteria. So I recommend checking his findings out if you need. --&gt;
</content>
  </entry>
  
  <entry>
    <title>I’m curating the programme for an upcoming accessibility-focussed conference ✨</title>
    <link href="https://sarasoueidan.com/blog/curating-aaa/"/>
    <updated>2021-08-02T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/curating-aaa/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;I’m speaking, MC’ing and curating the programme for &lt;strong&gt;Access All Areas&lt;/strong&gt; — an upcoming accessibility-focussed conference. Here’s all about the event, and how you can join us to learn more about accessibility, and maybe even present and share &lt;em&gt;your&lt;/em&gt; expertise at the event!&lt;/p&gt;
&lt;h2 id=&quot;about-the-conference-(what%2C-when%2C-where)&quot; tabindex=&quot;-1&quot;&gt;About the conference (what, when, where)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://webdirections.org/aaa/&quot;&gt;Access All Areas&lt;/a&gt; (or &lt;em&gt;aaa&lt;/em&gt;) is a new online conference—part of a series of focussed conferences created by the folks at &lt;a href=&quot;https://webdirections.org/&quot;&gt;Web Directions&lt;/a&gt;. This conference is focussed on &lt;strong&gt;accessibility for developers&lt;/strong&gt;: understanding the different kinds of accessibility issues that our code may create, finding those issues using available auditing and testing tools, as well as techniques and technologies for addressing them.&lt;/p&gt;
&lt;p&gt;This inclusive, remote-friendly conference will take place for the first time this year &lt;strong&gt;on October 25th and November 9th&lt;/strong&gt;, featuring 12–14 &lt;strong&gt;in-depth talks&lt;/strong&gt; about accessibility.&lt;/p&gt;
&lt;p&gt;Most online conferences run just like in-person conferences–one or two jam-packed days, of live streamed presentation. &lt;strong&gt;aaa&lt;/strong&gt; presentations are pre-recorded and will run over two half-days. It will run for around 4 hours each session (with a bit of downtime built-in). To cater for more audiences across different time zones, &lt;strong&gt;each session will be delivered 3 times, to suit your time zone wherever you are in the world&lt;/strong&gt;, so you can participate from the comfort of your own home or office.&lt;/p&gt;
&lt;h2 id=&quot;the-programme&quot; tabindex=&quot;-1&quot;&gt;The programme&lt;/h2&gt;
&lt;p&gt;There will be &lt;strong&gt;12–14 in-depth talks&lt;/strong&gt; by experienced accessibility engineers, focusing on deep dives to different accessibility topics that will help you &lt;strong&gt;level up your day-to-day accessibility practice.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Talks will range between short 20-minute sessions and longer 40-minute sessions, akin to &lt;a href=&quot;https://webdirections.org/lazyload/schedule.php&quot;&gt;the format of Lazy Load&lt;/a&gt;—the performance-focussed event held earlier this year.&lt;/p&gt;
&lt;h2 id=&quot;want-to-speak-at-the-conference%3F&quot; tabindex=&quot;-1&quot;&gt;Want to speak at the conference?&lt;/h2&gt;
&lt;p&gt;If you’d like to give a talk and share your expertise at &lt;strong&gt;aaa&lt;/strong&gt;, you can &lt;a href=&quot;https://webdirections.org/aaa/index.php#speakforus&quot;&gt;submit a talk idea&lt;/a&gt; before August 13th. The CFP will be open until then, and we would &lt;em&gt;love&lt;/em&gt; to hear from you!&lt;/p&gt;
&lt;p&gt;We’re looking for deep dives on all topics related to developing accessible Web sites and applications, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;language and technology features (e.g. features of HTML, CSS, Browser APIs, AOM, ARIA), and&lt;/li&gt;
&lt;li&gt;practices, or &lt;em&gt;how&lt;/em&gt; to use those technologies to create accessible digital experiences (e.g. accessible animations)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the focus of the conference is accessibility engineering, we’re not looking to focus on some areas that are commonly covered at accessibility focussed conferences. Things like the importance of accessibility, and selling accessibility into an organisation are well covered at other events. We’re also not looking to focus on automated approaches to accessibility.&lt;/p&gt;
&lt;p&gt;We’re looking for talks that offer both &lt;strong&gt;focus&lt;/strong&gt; and &lt;strong&gt;depth&lt;/strong&gt;. So think less about a broad area, and more about a very specific focussed topic you cover in depth, that helps fellow front end devs address challenges when it comes to the accessibility of their sites and applications. Less “everything you need to know about ARIA” and more “ARIA Live Regions for accessible Web Applications”.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In addition to being &lt;strong&gt;compensated for your talk&lt;/strong&gt;, Web Directions will also &lt;strong&gt;provide you with all the equipment&lt;/strong&gt; (camera, lighting, mic, software), &lt;strong&gt;direction, editing and support you need&lt;/strong&gt; to create an amazing presentation.&lt;/p&gt;
&lt;p&gt;If your talk gets picked, you’ll be getting &lt;strong&gt;an invitation from me&lt;/strong&gt; to join the speaker line-up 🥳 as I will be curating the programme for the event… ✨&lt;/p&gt;
&lt;h2 id=&quot;curating%2C-mc%E2%80%99ing-and-speaking&quot; tabindex=&quot;-1&quot;&gt;Curating, MC’ing and speaking&lt;/h2&gt;
&lt;p&gt;In addition to &lt;strong&gt;giving a talk and MC’ing&lt;/strong&gt; the event, I will be &lt;strong&gt;putting together the programme&lt;/strong&gt; for the inaugural edition of the event!&lt;/p&gt;
&lt;p&gt;If you have an idea you’d like to &lt;a href=&quot;https://webdirections.org/aaa/index.php#speakforus&quot;&gt;propose&lt;/a&gt;, feel free to reach out to me, too!&lt;/p&gt;
&lt;p&gt;If you know me, you may already be able to picture what the programme will be like. &lt;strong&gt;I want to curate the programme I want to see.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are many topics to cover in the context of accessibility (probably too many to cover in one event!). I’d like to make sure the talks cover as many topics as possible, especially &lt;strong&gt;foundational concepts, technologies, and practices&lt;/strong&gt; that you should know and can use in your day-to-day work to create more accessible Web sites and applications.&lt;/p&gt;
&lt;p&gt;We’ve already gotten a bunch of great talk proposals. And I’ll personally be sending out invitations to some of the most seasoned accessibility folks in the community—including ones I’ve admired and learned a lot from over the years. ❤  So I’m super excited about making this happen!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Conference tickets are currently on sale, so you can &lt;a href=&quot;https://webdirections.org/aaa/index.php#register&quot;&gt;register to access&lt;/a&gt; the event, and join us for two days of accessibility goodness in the Fall 🍁&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A couple of ways to highlight code syntax in Apple Keynote slides</title>
    <link href="https://sarasoueidan.com/blog/copy-paste-from-vscode-to-keynote/"/>
    <updated>2021-05-23T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/copy-paste-from-vscode-to-keynote/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.apple.com/keynote/&quot;&gt;Apple Keynote&lt;/a&gt; doesn’t come with code syntax highlighting built in. I &lt;em&gt;really&lt;/em&gt; wish it did, and hope that Apple would at some point add this feature, especially considering how many developers and engineers use Keynote to create talk slides.&lt;/p&gt;
&lt;p&gt;Seven years ago, I used to take screenshots of code snippets to include them in my presentations. That was &lt;em&gt;very&lt;/em&gt; impractical. If I wanted to make changes to the code, I’d have to rewrite it, take a screenshot again, and copy-paste it into Keynote once again. That soon became tiring and highly ineffective.&lt;/p&gt;
&lt;p&gt;Today, I know of two quick and easy ways to include “real” syntax highlighted code in Keynote. This post is me dumping my thoughts into my own “&lt;a href=&quot;https://www.wizardingworld.com/writing-by-jk-rowling/pensieve&quot;&gt;Pensieve&lt;/a&gt;”—&lt;em&gt;this blog!&lt;/em&gt;—for my future self to reference, and for anyone else who might find these tips useful.&lt;/p&gt;
&lt;h2 id=&quot;copy-pasting-formatted-code-from-vs-code&quot; tabindex=&quot;-1&quot;&gt;Copy-pasting formatted code from VS Code&lt;/h2&gt;
&lt;p&gt;A few years ago I learned that copying code from &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; to Keynote would preserve the formatting of the pasted code, i.e. I could include real code (text) snippets in my slides with syntax highlighting applied to them. That was a game changer! Shortly after learning that, I installed VS Code on my machine and used it solely for that purpose for quite a while (before I eventually made the complete switch from &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;To ensure code snippets in my slides have proper and accessible contrast, I typically enable VS Code’s High Contrast theme when I’m writing code for my presentations. (I’ve used the High Contrast theme for daily coding sessions as well for years.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Today&lt;/em&gt;, I learned that this VS Code feature is actually a setting (&lt;code&gt;editor.copyWithSyntaxHighlighting&lt;/code&gt;) that can be enabled and disabled in VS Code editor settings. I learned this after &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/1396493483943337984?s=20&quot;&gt;asking&lt;/a&gt; for suggestions for alternative ways to highlight code in Keynote after noticing that the code I was copying from VS Code was no longer preserving its formatting. (Thanks to &lt;a href=&quot;https://twitter.com/aaronbassett&quot;&gt;Aaron Bassett&lt;/a&gt; for &lt;a href=&quot;https://twitter.com/aaronbassett/status/1396495691929821185?s=20&quot;&gt;the tip&lt;/a&gt;). Turns out the setting wasn’t enabled after the last fresh install I did.&lt;/p&gt;
&lt;p&gt;If you search for &lt;code&gt;copyWithSyntaxHighlighting&lt;/code&gt; in VS Code settings, you can find the option that enables/disables it and turn it on/off:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/vscode-sh.png&quot; alt=&quot;The option in VS Code settings that controls whether syntax highlighting should be copied into the clipboard&quot; /&gt;&lt;/figure&gt;
&lt;p&gt;Alternatively, you can manually set the value to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; in your user Settings file.&lt;/p&gt;
&lt;h2 id=&quot;using-the-slides-code-highlighter-web-app&quot; tabindex=&quot;-1&quot;&gt;Using the Slides Code Highlighter Web app&lt;/h2&gt;
&lt;p&gt;If you don’t use VS Code and don’t want to install it for the sole purpose of copy-pasting code snippets into Keynote, you can use &lt;a href=&quot;https://romannurik.github.io/SlidesCodeHighlighter/&quot;&gt;Slides Code Highlighter&lt;/a&gt; tool by &lt;a href=&quot;https://twitter.com/romannurik&quot;&gt;Roman Nurik&lt;/a&gt;, kindly &lt;a href=&quot;https://twitter.com/addyosmani/status/1396494912019861508?s=20&quot;&gt;shared by Addy Osmani&lt;/a&gt; today.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/slides-code-highlighter.png&quot; alt=&quot;The Slides Code Highlighter Web app&quot; /&gt;&lt;/figure&gt;
&lt;hr /&gt;
&lt;p&gt;There are &lt;a href=&quot;https://twitter.com/jamie_gaskins/status/1396494700874539013?s=20&quot;&gt;other&lt;/a&gt; &lt;a href=&quot;https://twitter.com/frontstuff_io/status/1396498521356918784?s=20&quot;&gt;approaches&lt;/a&gt; to go around this, and probably more that I may not be aware of, but the above two approaches are simple and fast enough to work for me for now.&lt;/p&gt;
&lt;p&gt;Of course, none of these approaches are as convenient as having built-in syntax highlighting in Keynote. Maybe, someday, Apple will add this feature. Until then, we can only make do with what we got.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Design for reading: tips for optimizing content for Reader modes and reading apps</title>
    <link href="https://sarasoueidan.com/blog/tips-for-reader-modes/"/>
    <updated>2021-05-10T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/tips-for-reader-modes/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;Our content will not always look the way we expect it or want it to. Many apps, tools, and environments that people use to browse the Web strip our content of our CSS and apply their own styles to it. And unless we always keep that in mind, we risk creating incomplete or even broken experiences for users of those technologies or tools.&lt;/p&gt;
&lt;p&gt;You might be reading this very blog post in a reading app right now, or maybe even listening to it being read out loud to you. In either case, the visual style enhancements I have applied to the content don’t really matter much anymore. My CSS isn’t enhancing your experience. My content—the HTML markup—though, &lt;em&gt;defines&lt;/em&gt; your experience and can &lt;a href=&quot;https://medium.com/@mandy.michael/building-websites-for-safari-reader-mode-and-other-reading-apps-1562913c86c9&quot;&gt;either make it or break it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Reader modes and Forced Color modes are two common environments where content is typically stripped of our CSS. So a question I think we should constantly be asking ourselves is: &lt;strong&gt;Is our content still understandable without CSS? Or are we relying too much on visual styles to put ideas across?&lt;/strong&gt; Does the HTML layer alone provide a decent and sufficient experience to our users? Is our CSS truly the enhancement it is meant to be, &lt;strong&gt;or are we relying too much on our own preferences rather than our users’ to communicate our ideas?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The more I consume content in reading apps, the more I am reminded of the importance and the power of progressive enhancement as a strategy to create resilient and malleable experiences that work for everyone, regardless of how they choose to consume our content. The more we think about the Web &lt;a href=&quot;https://adactio.com/articles/16251&quot;&gt;in layers&lt;/a&gt;, the more robust experiences we can design.&lt;/p&gt;
&lt;p&gt;Designing for reading, there are a few things we can learn and do to improve our users’ reading experience (&lt;em&gt;and&lt;/em&gt; other users’ experiences as well!):&lt;/p&gt;
&lt;h2 id=&quot;1.-if-your-idea-requires-css-to-visualize%2C-provide-a-markup-only-alternative.&quot; tabindex=&quot;-1&quot;&gt;1. If your idea requires CSS to visualize, provide a markup-only alternative.&lt;/h2&gt;
&lt;p&gt;In my previous article about &lt;a href=&quot;https://sarasoueidan.com/blog/horizontal-rules/&quot;&gt;creating creative yet accessible horizontal rules&lt;/a&gt;, I discussed how I created the birds-on-a-wire horizontal rule style that I use on this Web site.&lt;/p&gt;
&lt;p&gt;After the article’s introduction was a horizontal rule, and a paragraph that read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’re a frequent reader of this blog, then you’ve most likely already seen what a horizontal rule looks like on here. In fact, if you haven’t seen it before, then you might have just done that. The birds-on-a-wire illustration above this very paragraph is a styled &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The horizontal rule above that specific paragraph was sort of as a “live demo” for the ideas and code discussed in the article. That horizontal rule is styled in my style sheet to look like a bunch of cute birds on a wire.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/hr.png&quot; alt=&quot;The horizontal rule style I am using on my Web site. It is a vector illustration of a few bird silhouettes standing on a curvey horizontal black wire.&quot; /&gt;
&lt;p&gt;Knowing that some readers will be reading the article in an RSS app or even their favorite browser’s Reader mode, I provided an alternative or “fallback” piece of content that would only show up for said users when my own CSS is stripped away.&lt;/p&gt;
&lt;figure&gt;
    &lt;img style=&quot;max-width: 400px; display: block; margin: 0 auto;&quot; src=&quot;https://sarasoueidan.com/assets/images/reader-only-text.png&quot; alt=&quot;Screenshot of what the article reads like in Reeder app with the fallback reader-only text. Above the fallback text is a horizontal line, which is the horizontal rule the text is referring to, and it is rendered as a simple line by Reeder app.&quot; /&gt;
    &lt;figcaption&gt;
        &lt;p&gt;In &lt;a href=&quot;https://reederapp.com/&quot;&gt;Reeder app&lt;/a&gt;, horizontal rules are displayed as plain horizontal lines, so my “live demo” would not be accessible to them. As such, I’ve provided alternative text that reads: &lt;em&gt;&quot;If you&#39;re reading this article in a reading app or a Web browser&#39;s reader mode, then the above horizontal rule will not appear with my custom styles applied, and you&#39;ll just see a horizontal line. Here is a picture of what the horizontal rule looks like&quot;&lt;/em&gt;. &lt;br /&gt; The paragraph is followed by &lt;em&gt;an image&lt;/em&gt; of the birds-on-a-wire horizontal rule style.&lt;/p&gt;
        &lt;p&gt;Notice how in the screenshot the reader-only piece of text appears in an Italic font style. Using the &lt;code&gt;em&lt;/code&gt;phasis HTML element I am able to visually distinguish that part of the article from the surrounding text in the reading app.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Yes, my readers could easily just click through the article’s title and check the horizontal rule styles on my Web site, &lt;strong&gt;but they shouldn’t have to.&lt;/strong&gt; They shouldn’t have to switch contexts just to check out a visual style that I can easily provide them with inside their preferred reading environment.&lt;/p&gt;
&lt;!-- Our readers should be able to access and consume our content the way they want to. And it is our job to create experiences that are inclusive of as many users as possible. When We build Web sites, we should try to make the content as usable and understandable without CSS as possible. --&gt;
&lt;p&gt;Today, inside my global &lt;code&gt;utilities&lt;/code&gt; style sheet, I have a &lt;code&gt;reader-mode-only&lt;/code&gt; utility class (that I will probably rename later to something more generic). I use that class to provide alternative content to my readers that would otherwise require my CSS to be understood. That content would always be present by default when my visual styles are not. And when the content is accessed or viewed in an environment where my CSS &lt;em&gt;is&lt;/em&gt; used, the &lt;code&gt;reader-mode-only&lt;/code&gt; content is hidden with a simple &lt;code&gt;display: none;&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The idea here is to &lt;em&gt;improve&lt;/em&gt; the user experience. This technique should never be used to shove unwanted content &lt;small&gt;(such as ads, ugh!)&lt;/small&gt; down our reader’s throats. I know we’d ideally want people to come visit our sites, but we should respect their choices, especially since our design choices might be questionable—are we presenting too many distractions on the page? are the fonts we’re using unreadable? is the text contrast sufficient? There might be many reasons why our readers might prefer reading our content in Reader modes. Instead of questioning our user’s preferences, we should reconsider our design decisions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Or not!&lt;/strong&gt;&lt;/em&gt; Many people—&lt;em&gt;myself included!&lt;/em&gt;—use RSS because it’s a very convenient way to stay up to date with content. The fact that our readers are subscribed to our blogs is but a greater incentive to make sure we provide them with the quality content &lt;em&gt;and experience&lt;/em&gt; that they are expecting from us. And if you do have unwanted elements showing up for them when they shouldn’t, make sure you “clean them up”. More on that in the third section.&lt;/p&gt;
&lt;h2 id=&quot;2.-html-is-for-content.-css-is-for-visual-styles.-keep-content-where-it-belongs%3A-in-the-markup.&quot; tabindex=&quot;-1&quot;&gt;2. HTML is for content. CSS is for visual styles. Keep content where it belongs: in the markup.&lt;/h2&gt;
&lt;p&gt;I was reading through &lt;a href=&quot;https://www.smashingmagazine.com/2017/12/prototyping-driven-process/&quot;&gt;a Smashing Magazine article&lt;/a&gt; in Reeder app when I reached what seemed like a sudden change of topic in the middle of the article. What read as part of the article was actually not. What I’m referring to is Smashing Magazine’s custom “ads” (or content callouts) that appear in the middle of each of their articles.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/smashing-inline-ad.png&quot; alt=&quot;A screenshot of a Smashing Magazine article showing their custom ads in the middle of the article, interrupting the actual article content.&quot; /&gt;
&lt;p&gt;These custom ads/callouts that highlight Smashing products typically appear in the middle of an article. With Smashing’s CSS applied, this section stands out from the rest of the article, and is preceded with heads-up text that says &lt;em&gt;&lt;q&gt;More after jump! Continue reading below! ↓&lt;/q&gt;&lt;/em&gt;. These styles make the callout section distinguishable from the rest of the article, so you can easily skip over that section and continue reading the article without your focus being affected much.&lt;/p&gt;
&lt;p&gt;In Safari Reader Mode, however, the experience is not as subtle.&lt;/p&gt;
&lt;p&gt;The heads-up text that precedes the callout section &lt;strong&gt;is not real text.&lt;/strong&gt; It’s pseudo-content—literally &lt;em&gt;fake&lt;/em&gt; content—created and added to the callout section via CSS using a &lt;code&gt;::before&lt;/code&gt; pseudo-element.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/smashing-pseudo-content.png&quot; alt=&quot;The heads-up text appears as a ::before pseudo-element in the Safari devtools and is applied to a using CSS to the callout section.&quot; /&gt;
&lt;p&gt;And since Reader Mode strips the content of CSS, that piece of text is not rendered, and the callout section no longer looks like a callout section. Instead, it just appears in the middle of the content as part of the content and interrupts the reading flow.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/smashing-ad-in-reader-mode.png&quot; alt=&quot;Screenshot showing the callout section appearing unstyled in Safari Reader Mode. The section is indistinguishable from the rest of the article content.&quot; /&gt;
&lt;p class=&quot;note&quot;&gt;It&#39;s worth noting that I noticed this issue while browsing and reading Smashing articles in Reeder app more than a year ago. But the callout section no longer shows up in Reeder app. I&#39;m not sure why that is. That&#39;s why I am using Safari Reader mode to demonstrate the issue.&lt;/p&gt;
&lt;p&gt;Similarly, the Summary section at the beginning of the article has a &lt;em&gt;“Quick Summary”&lt;/em&gt; label that is also generated in CSS. Below the summary is what looks like a horizontal rule separating it from the rest of the content, but that rule is actually just a bottom border style applied to it in CSS. Both the label and the summary disappear in Reader Mode and reading apps.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/smashing-summary-with-css.png&quot; alt=&quot;Screenshot of the article summary as it appears in the browser with CSS enabled: it starts with a label that says &#39;Quick summary&#39; and has a bottom border separating it from the rest of the article content.&quot; /&gt;
&lt;figcaption&gt;
The Smashing article summary as it appears in the browser with CSS on.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/smashing-summary-in-reader-mode.png&quot; alt=&quot;Screenshot of the article summary as it appears in Safari Reader mode: without a label and without a horizontal line separating it from the rest of the article content. Above the summary is also the author bio, which is preceding all of the article content, including the summary.&quot; /&gt;
&lt;figcaption&gt;
The Smashing article summary as it appears in Safari Reader mode with basic reader mode styles applied to the semantic HTML elements. (I find it intriguing that Safari Reader Mode styles the Summary so that it&#39;s italicized, even though there is no semantic markup (such as an &lt;code&gt;em&lt;/code&gt; element) to suggest that it should be.)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In order to ensure readers always get a proper reading experience, provide real content in HTML, and leave CSS pseudo-elements for decorational content that is not required for the core reading experience.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;You may have noticed something else happening in the last screenshot: instead of starting with the core content of it, the article starts with the (truncated) author bio. The bio clearly does not belong there, and yet &lt;em&gt;there&lt;/em&gt; it is.&lt;/p&gt;
&lt;p&gt;Furthermore, the callout section—which is &lt;em&gt;essentially&lt;/em&gt; an ad section—also &lt;strong&gt;does not belong in a distraction-free reading environment&lt;/strong&gt;. The main reason people use reading apps and Reader modes is to “declutter” the UI so they can have a “quieter” and more focused reading experience. We can do better to improve their experiences even further with just a tiny bit of HTML sparkle. ✨&lt;/p&gt;
&lt;h2 id=&quot;3.-keep-the-core-experience-clutter--and-distraction-free%3A-hide-non-core-content-by-default-and-show-it-with-css-when-it%E2%80%99s-ok-to-do-so.&quot; tabindex=&quot;-1&quot;&gt;3. Keep the core experience clutter- and distraction-free: Hide non-core content by default and show it with CSS when it’s OK to do so.&lt;/h2&gt;
&lt;p&gt;The reason the author bio and callout sections are displayed even in Reader Mode is because they are markup up as part of the main &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Reader Mode is meant to strip away all parts of a document and only present an article’s text and basic images in a clean and uncluttered format, to improve the user’s reading experience. In order to do that, &lt;strong&gt;Reader looks for content within an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; tag, and displays it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;(Note that if Safari does’t find content represented within the proper HTML elements, the Reader Mode button doesn’t even show up at all.)&lt;/small&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“It’s important to ensure that Reader draws out the key parts of your web page by using semantic markup to reinforce the meaning and purpose of elements in the document […] we indicate which parts of the page are the most important by wrapping it in an &lt;code&gt;article&lt;/code&gt; tag.
Specifically, enclosing these header elements inside the &lt;code&gt;article&lt;/code&gt; ensure that they all appear in Reader” &lt;br /&gt; – &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2018/239/&quot;&gt;https://developer.apple.com/videos/play/wwdc2018/239/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you View-Source on Smashing Magazine articles, you’ll find that the author bio and the callout section are both included in the main &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; wrapper. And that’s why they show up in Reader Mode.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;I&#39;ve noticed some inconsistencies in the way Reader Mode displays article content, even within the context of the same Web site. For example, not &lt;em&gt;all&lt;/em&gt; content inside an &lt;code&gt;article&lt;/code&gt; is displayed in Reader Mode. For example, the article meta information doesn&#39;t show up even though it&#39;s part of the &lt;code&gt;article&lt;/code&gt;. Moreover, The drop caps illustration would sometimes show up and other time it wouldn&#39;t. I&#39;m not sure what the reason behind that is, and why some elements show up and others don&#39;t.&lt;/p&gt;
&lt;p&gt;If you can move content such as author biographies, ads, and other pieces that are not part of the article’s core content &lt;em&gt;out of the &lt;code&gt;article&lt;/code&gt;&lt;/em&gt;, then do so. This will ensure that they don’t show up and clutter the user’s reading experience in Reader Mode and some reading apps.&lt;/p&gt;
&lt;p&gt;If you can’t move the clutter out of the article, &lt;strong&gt;you can hide it from Reader Mode using the HTML &lt;code&gt;hidden&lt;/code&gt; attribute.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;hidden&lt;/code&gt; attribute is the HTML equivalent of CSS’s &lt;code&gt;display: none&lt;/code&gt;. You can use it to hide content when CSS is not available. It comes in handy in a lot of scenarios which I will detail in another article. But for now, suffice it to say that by hiding the non-core pieces of content with the &lt;code&gt;hidden&lt;/code&gt; attribute, you are making sure that they are hidden even in environments where your CSS doesn’t work and they shouldn’t be present.&lt;/p&gt;
&lt;p&gt;Since the &lt;code&gt;hidden&lt;/code&gt; attribute has a very low specificity, you can override it in your CSS using a simple &lt;code&gt;display: block/flex/grid/etc.&lt;/code&gt;. So, when your reader is accessing and reading your content on, say, your Web site, you can display those elements and style them in a way that does not negatively affect their reading experience.&lt;/p&gt;
&lt;p&gt;Flexbox is used to lay out the contents of the Smashing callout section. So the &lt;code&gt;hidden&lt;/code&gt; attribute can be applied to the section in the HTML, and it can be overridden in the CSS with a &lt;code&gt;display: flex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is a video recording of me first applying the &lt;code&gt;hidden&lt;/code&gt; attribute to the callout section in Safari’s Reader Mode. You can see that the section is removed as soon as the attribute is applied. When the CSS is enabled, I re-apply the &lt;code&gt;hidden&lt;/code&gt; attribute, thus hiding the section once again. Then, I apply a &lt;code&gt;display: flex&lt;/code&gt; to the section in the CSS panel, which overrides the &lt;code&gt;hidden&lt;/code&gt; attribute and shows the section again with the necessary styling applied to it.&lt;/p&gt;
&lt;p&gt;&lt;video class=&quot;video-gif&quot; controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/videos/smashing-hidden-attribute.mp4&quot; width=&quot;100%&quot;&gt;
Sorry, your browser doesn’t support embedded videos.
&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;By leveraging the nature and &lt;em&gt;weakness&lt;/em&gt; of the &lt;code&gt;hidden&lt;/code&gt; attribute—by using it the way it was meant to be used—we can drastically improve our user’s reading experience in their preferred reading environments.&lt;/p&gt;
&lt;h2 id=&quot;outro&quot; tabindex=&quot;-1&quot;&gt;Outro&lt;/h2&gt;
&lt;p&gt;We have a tendency to always make an assumption about how
our readers are reading our content—probably in the browser, with our fancy styles applied to it.
But if we make a habit out of thinking about the Web in layers and CSS as an enhancement on top of the content
layer, then we can start optimizing and enhancing our users’ reading experiences regardless of their context.&lt;/p&gt;
&lt;p&gt;Thinking about the different ways in which users access the Web only shines light on the importance of a progressively enhanced approach to building for the Web. The more we think about the Web in layers and try to improve the experience of one layer before moving to the next, the more resilient experiences we can create. That’s what the essence of progressive enhancement is about.&lt;/p&gt;
&lt;p&gt;HTML is powerful as it is. And if marked up right, it forms a solid foundation for a more inclusive and resilient Web. CSS is a fantastic tool that enables us to further enhance an experience on top of HTML, so long as our design decisions don’t break HTML’s inherent semantics and accessibility.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;hidden&lt;/code&gt; atribute is one of HTML’s underrated features. I’ll dive more into it and demonstrate more practical use cases for it in an upcoming article. Stay tuned. And thank you for reading.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Component-level art direction with CSS Container Queries</title>
    <link href="https://sarasoueidan.com/blog/component-level-art-direction-with-container-queries-and-picture/"/>
    <updated>2021-05-09T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/component-level-art-direction-with-container-queries-and-picture/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.oddbird.net/2021/04/05/containerqueries/&quot;&gt;Container Queries&lt;/a&gt; (CQ) allow us to change the styles of a component so it responds to the size of its nearest container. With CQ, we can change how an element looks based on where on a page it is placed and how much horizontal space it occupies.&lt;/p&gt;
&lt;p&gt;A lot about a design pattern could change based on how much space it’s got. So Container Queries can be used to do more than just shift elements around in a layout. &lt;small&gt;(Have you &lt;em&gt;seen&lt;/em&gt; &lt;a href=&quot;https://twitter.com/jh3yy/status/1390798974756560904&quot;&gt;Jhey&lt;/a&gt;’s &lt;a href=&quot;https://codepen.io/jh3y/pen/qBrEMEe&quot;&gt;demo&lt;/a&gt; yet?!)&lt;/small&gt; But we can only &lt;strong&gt;take full advantage of the potential Container Queries offer us if we can use them &lt;em&gt;everywhere&lt;/em&gt; a typical viewport media query can be used&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now that we got Container Queries in CSS, I want them in HTML, too. More specifically, I can see them coming in more handy if they were available in HTML to change an image’s &lt;code&gt;source&lt;/code&gt; inside &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;, just like viewport-based media queries currently are. This would enable us to art-direct images instead of cropping them to fit in a layout.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Images are typically designed to adapt to layout changes much like other UI elements are. It’s possibly even more relevant for images to change with a layout than other UI elements because of their nature as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element&quot;&gt;replaced elements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Take the typical card component for example. Assuming the card’s layout doesn’t change, and assuming the image will always be stacked on top of the content, then it’s usually a good idea to change the aspect ratio and orientation of the image between narrow and wide layouts. A landscape photo might look good in a wide layout, but a portrait photo would suit a narrower layout better.&lt;/p&gt;
&lt;p&gt;Using a combination of &lt;code&gt;object-fit&lt;/code&gt; and &lt;code&gt;aspect-ratio&lt;/code&gt; today, we can fit any image inside a container with an aspect ratio that we specify in our CSS. And with container queries at hand, we can create a more flexible implementation, where the image adapts to the size of the card itself, independent of the size of the viewport. This is already a big improvement to the viewport-based implementation.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;aspect-ratio&lt;/code&gt; property in the following demo I have changed the aspect ratio of the image based on the width of the card component. And &lt;code&gt;object-fit&lt;/code&gt; is used to crop and scale the image to fit within the bounds of its container in all three cases (because the default aspect ratio of the image doesn’t match any of the aspect ratios I’ve specified in the CSS).&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;p class=&quot;codepen&quot; data-height=&quot;530&quot; data-theme-id=&quot;3617&quot; data-default-tab=&quot;result&quot; data-user=&quot;SaraSoueidan&quot; data-slug-hash=&quot;MWpwvbB&quot; data-editable=&quot;true&quot; style=&quot;height: 530px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;MWpwvbB&quot;&gt;
      &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/SaraSoueidan/pen/MWpwvbB&quot;&gt;
      MWpwvbB&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;https://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;)
      on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;Since the demo is using Container Queries which are currently only supported in Chrome Canary behind a flag, you may only see one aspect ratio on all three card variations. Here is a screenshot of what the image looks like for 3 different card widths:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/card-image-aspectratio-objectfit-demo-screenshot.png&quot; alt=&quot;A screenshot of the demo using the aspect-ratio and object-fit properties to scale and crop an image in a card component. The aspect ratio of the image responds to the size of the component, and the image is scaled to fit inside its container.&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;This is a pretty flexible approach for adapting images in card (or other) components. It is particularly useful when we’re dealing with images that a user might upload via a CMS and whose aspect ratios we don’t know. Specifying an aspect ratio in CSS and cropping and scaling an image to fit within it is a solid approach to handle such images.&lt;/p&gt;
&lt;p&gt;But cropping and scaling an image is not &lt;em&gt;always&lt;/em&gt; the best approach, though, because not all images can or should be cropped. Sometimes cropping an image straight-up ruins it.&lt;/p&gt;
&lt;p&gt;Take a portrait of a person, for example. Cropping it to any aspect ratio other than the one it was taken in would ruin it. And yet on the other hand, keeping the default aspect ratio might not be possible because of design and layout requirements (e.g. the image needs to be one in landscape mode in wider layouts otherwise it would be too tall).&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/cropped-portrait-screenshot.png&quot; alt=&quot;A screenshot of a demo using the aspect-ratio and object-fit properties to scale and crop a a portrait of an Egyptian child used in a card component. The aspect ratio of the image responds to the size of the component, and the image is scaled to fit inside its container. Unless the aspect ratio is tall enough, the portrait gets cropped in an undesirable way.&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;So if we have control over what image(s) to use, the better alternative is to use is to change the image entirely in this case. If I were using a portrait of a person on the site, I might want to use two different shots of that person—one for landscape and another for portrait layouts.&lt;/p&gt;
&lt;p&gt;To switch between different images we can use the HTML &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element. There are &lt;a href=&quot;https://dev.opera.com/articles/responsive-images/&quot;&gt;many ways&lt;/a&gt;  &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; can be used to serve responsive images. For art direction, the syntax might look like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(min-width: 1024px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;desk--wide.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;desk--portrait.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;My desk setup&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see the above code in action on my &lt;a href=&quot;https://sarasoueidan.com/desk&quot;&gt;Desk page&lt;/a&gt;. And here is a screenshot of the Desk page showing two different photos of my desk setup on narrower and wider screens:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/desk-narrow-and-wide.png&quot; alt=&quot;A screenshot of the Desk page showing two different photos of my desk setup on narrower and wider screens.&quot; /&gt;
&lt;/figure&gt;
&lt;div class=&quot;note&quot;&gt;&lt;small&gt;&lt;strong&gt;Accessibility considerations:&lt;/strong&gt; We currently don&#39;t have a way to change the content of the &lt;code&gt;alt&lt;/code&gt; attribute when the image source changes. Or, if we look at it differently, we don&#39;t have a separate &lt;code&gt;alt&lt;/code&gt; attribute for every image &lt;code&gt;source&lt;/code&gt; we define in our &lt;code&gt;&lt;picture&gt;&lt;/picture&gt;&lt;/code&gt;. So if you&#39;re changing the &lt;em&gt;content&lt;/em&gt; of the image, you need to keep that in mind. If your art-directed image is pure decoration, or if your image layout changes (landscape to portrait) but the core of the content is the same, then this shouldn&#39;t be an issue. But keep in mind that you may want to avoid art-direction if the content of the image changes and it doesn&#39;t match the description provided in the &lt;code&gt;alt&lt;/code&gt; atribute anymore.&lt;/small&gt;&lt;/div&gt;
&lt;p&gt;But here’s the thing: the images you specify in &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; respond to the size of the viewport, not the component they are embedded in. The image on my Desk page changes when the size of &lt;em&gt;the viewport&lt;/em&gt; hits 1024px. And that’s fine for this particular use case. But if we’re art-directing images inside components, we’ll want them to respond to the component’s size, not the viewport. After all, this is the kind of responsive behavior that we’ve needed for so long and that Container Queries now provides us with. The next step is, hopefully, Container Queries in HTML.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
    &lt;strong&gt;Update:&lt;/strong&gt; It has been brought to my attention shortly after publishing this article that this features request &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/5889&quot;&gt;has been made and discussed&lt;/a&gt; back in January. For more information about the discussion involved in making something like this work (or not!), refer to the &lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/5889&quot;&gt;open issue on Github&lt;/a&gt;.
&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;There is a way we can currently use Container Queries to art direct images in a component, but those images would need to be &lt;em&gt;embedded in the CSS&lt;/em&gt;, as background images.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.card__media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;aspect-ratio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2 / 3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string url&quot;&gt;&quot;https://assets.codepen.io/9674/desk--portrait.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100% auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;container-type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-size&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 480px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token selector&quot;&gt;.card__media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token property&quot;&gt;aspect-ratio&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 16 / 9&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string url&quot;&gt;&quot;https://assets.codepen.io/9674/desk--wide.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In other words, the images need to be non-semantic, decoration images. If your image is part of your semantic content, it can’t respond to the container query just yet. And of course, since the image is a background image, we’ll need to use the &lt;code&gt;aspet-ratio&lt;/code&gt; on the element that image is applied to, otherwise it would collapse. Here’s a live demo again using Container Queries, so it will only currently work in Canary:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;p class=&quot;codepen&quot; data-height=&quot;523&quot; data-theme-id=&quot;3617&quot; data-default-tab=&quot;result&quot; data-user=&quot;SaraSoueidan&quot; data-slug-hash=&quot;qBrdPvV&quot; style=&quot;height: 523px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Component-level art-direction using CSS Container Queries&quot;&gt;
      &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/SaraSoueidan/pen/qBrdPvV&quot;&gt;
      Component-level art-direction using CSS Container Queries&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;https://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;)
      on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;
&lt;/figure&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;And a screenshot of the result:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/art-directing-bg-images-with-cq.png&quot; alt=&quot;a screenshot of the demo using Container Queries to change the (background) image used on a card component.&quot; /&gt;
&lt;h2 id=&quot;final-thoughts&quot; tabindex=&quot;-1&quot;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;We’re only scratching the surface of what Container Queries make possible. I can imagine Container Queries coming handy even in quick prototyping-in-the-browser work, as well as more specific use cases. And I’m sure more smart people will come up with even more use cases as they push the limits of what’s currently possible.&lt;/p&gt;
&lt;p&gt;Let’s continue pushing the Web forward.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Not Your Typical Horizontal Rules</title>
    <link href="https://sarasoueidan.com/blog/horizontal-rules/"/>
    <updated>2021-03-25T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/horizontal-rules/</id>
    <content type="html">&lt;p&gt;The HTML &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; element adds a horizontal rule (or line) wherever you place it. A horizontal rule is used to provide a visual break and divide content. Like other HTML elements, horizontal rules can be styled using CSS (and SVG). This means that they don’t have to look like boring, plain horizontal lines. You can get a little creative with them, adding a nice little personal touch to your content and designs.&lt;/p&gt;
&lt;p&gt;&lt;svg role=&quot;separator&quot; style=&quot;display: block; max-width: 65%; margin: 4rem auto;&quot; width=&quot;500px&quot; height=&quot;32px&quot; viewBox=&quot;0 0 794 51&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
&lt;defs&gt;
&lt;polygon id=&quot;path-1&quot; points=&quot;0.907103825 0 798.907104 0 798.907104 364 0.907103825 364&quot;&gt;&lt;/polygon&gt;
&lt;/defs&gt;
&lt;g id=&quot;Page-1&quot; stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;
&lt;g id=&quot;36257-O0KTX6&quot; transform=&quot;translate(0.000000, -212.000000)&quot;&gt;
&lt;g id=&quot;Group&quot; transform=&quot;translate(-4.907104, 171.000000)&quot;&gt;
&lt;g id=&quot;Group-70&quot;&gt;
&lt;mask id=&quot;mask-2&quot; fill=&quot;white&quot;&gt;
&lt;use xlink:href=&quot;#path-1&quot;&gt;&lt;/use&gt;
&lt;/mask&gt;
&lt;g id=&quot;Clip-67&quot;&gt;&lt;/g&gt;
&lt;path d=&quot;M610.198586,77 C699.286076,77 783.215114,73.4231956 849.907104,64.0083772 L849.765531,63.0342269 C783.152303,72.4392054 699.257163,76.0169938 610.198586,76.0160098 C468.900459,76.0169938 314.600519,67.0124993 195.629099,58.0080049 C136.142392,53.5062497 85.4880646,49.0035105 49.7059121,45.62744 C31.8148358,43.9389128 17.6415541,42.5318068 7.94178925,41.5478166 C3.09140831,41.0548375 -0.640344182,40.6681294 -3.15975068,40.40442 C-5.67816019,40.1407106 -6.98023573,40 -6.98422371,40 L-7.09289617,40.9780863 C-7.08292622,40.9790703 327.520578,77 610.198586,77 Z&quot; id=&quot;Fill-68&quot; fill=&quot;var(--hr-color)&quot; mask=&quot;url(#mask-2)&quot;&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;path d=&quot;M204.690104,47.32 C206.259104,42.729 211.015104,44.247 211.564104,45.397 C212.744104,47.867 213.564104,47.459 213.564104,47.459 C213.564104,47.459 211.475104,47.412 210.596104,49.717 C210.211104,50.727 208.816104,56.337 204.832104,58.949 C202.997104,60.153 200.700104,60.071 198.966104,61.194 C197.487104,62.163 196.569104,65.733 194.477104,65.784 C194.528104,65.733 194.579104,65.58 194.630104,65.479 C194.069104,65.835 193.355104,65.632 192.743104,65.632 C192.845104,65.376 192.590104,65.58 192.743104,65.325 C192.641104,65.428 192.641104,65.172 192.539104,65.223 C192.488104,64.764 192.284104,64.458 192.590104,64.101 C192.437104,64.254 192.590104,64.101 192.437104,64.203 C192.131104,63.285 196.633104,60.39 197.092104,57.891 C198.220104,51.746 202.522104,48.379 204.690104,47.32&quot; id=&quot;Fill-73&quot; fill=&quot;var(--hr-color)&quot;&gt;&lt;/path&gt;
&lt;path d=&quot;M237.461104,48.48 C240.188104,44.985 244.713104,48.584 244.314104,51.397 C248.502104,52.923 251.137104,63.152 251.621104,65.056 C251.621104,65.056 254.867104,70.497 254.733104,74.267 C254.250104,72.998 254.242104,74.368 253.553104,73.169 C253.483104,73.311 252.586104,72.323 252.517104,72.464 C251.439104,71.459 250.904104,67.897 250.103104,67.455 C249.301104,67.012 244.307104,65.92 241.012104,62.94 C237.824104,60.056 237.482104,56.195 237.693104,54.727 C238.377104,49.959 234.689104,50.147 234.689104,50.147 C234.689104,50.147 236.502104,49.709 237.461104,48.48&quot; id=&quot;Fill-79&quot; fill=&quot;var(--hr-color)&quot;&gt;&lt;/path&gt;
&lt;path d=&quot;M490.329073,53.2234708 C489.681073,52.5704708 487.329073,50.5564708 485.450073,51.0884708 C483.536073,51.6304708 481.516073,54.0154708 481.624073,56.5644708 L481.662073,56.5564708 C481.662073,56.5564708 480.546073,57.4964708 480.276073,57.7454708 C479.575073,58.3664708 475.473073,63.1004708 474.745073,69.2234708 C474.510073,71.1834708 474.352073,73.7664708 474.662073,75.0564708 C474.972073,76.3454708 473.722073,78.5464708 473.020073,79.9774708 C472.696073,80.5984708 469.438073,84.9064708 471.702073,83.9734708 C470.907104,85.7234708 472.329073,85.1394708 472.329073,85.1394708 C472.329073,85.1394708 471.827073,86.6204708 472.662073,86.6204708 C473.001073,86.6204708 473.995073,85.1394708 473.995073,85.1394708 C473.995073,85.1394708 473.995073,87.9734708 475.238073,84.4414708 C476.071073,87.7754708 477.917073,79.0904708 478.528073,77.9324708 C479.140073,76.7754708 481.459073,75.7964708 483.265073,74.8634708 C485.072073,73.9324708 486.663073,71.7724708 487.632073,69.7204708 C489.035073,66.8614708 489.662073,64.4804708 489.662073,61.3064708 C489.662073,54.2234708 492.971073,53.9734708 492.971073,53.9734708 C492.971073,53.9734708 490.976073,53.8764708 490.329073,53.2234708&quot; id=&quot;Fill-87&quot; fill=&quot;var(--hr-color)&quot;&gt;&lt;/path&gt;
&lt;path d=&quot;M177.695104,46.218 C179.252104,47.12 180.579104,51.973 180.214104,56.075 C179.708104,61.772 180.593104,64.226 180.581104,64.709 C180.567104,64.962 180.224104,63.94 180.126104,64.119 C180.028104,64.3 179.377104,66.022 179.377104,66.022 C178.314104,65.897 177.788104,64.477 177.788104,64.477 C177.788104,64.477 177.614104,65.198 177.439104,65.022 C176.716104,64.271 177.416104,61.669 177.165104,60.689 C176.433104,57.829 174.939104,58.128 173.502104,55.834 C171.625104,52.839 171.708104,49.822 172.127104,48.584 C172.433104,47.644 172.922104,46.91 172.226104,45.906 C171.746104,45.206 171.072104,45.652 170.403104,45.709 C170.714104,45.484 171.124104,45.445 171.434104,45.219 C171.788104,44.971 175.734104,39.39 177.695104,46.218&quot; id=&quot;Fill-90&quot; fill=&quot;var(--hr-color)&quot;&gt;&lt;/path&gt;
&lt;path d=&quot;M422.710104,55.938 C422.537104,55.574 421.710104,50.668 417.874104,51.317 C415.392104,51.738 413.710104,53.668 414.627104,57.084 C414.271104,59.936 412.264104,61.525 413.761104,67.05 C415.427104,73.204 419.112104,76.736 419.257104,78.691 C419.356104,80.243 419.127104,86.627 419.127104,86.627 C419.236104,86.528 420.370104,85.727 420.478104,85.628 C420.696104,85.909 420.845104,86.237 421.127104,86.501 C421.153104,86.355 421.604104,86.239 421.632104,86.093 C422.013104,86.465 422.516104,87.242 423.070104,87.497 C423.089104,87.079 423.173104,86.461 423.354104,86.134 C423.363104,86.406 424.202104,87.052 424.257104,87.243 C424.202104,87.052 424.678104,86.266 424.824104,85.33 C425.142104,85.72 426.640104,85.572 426.877104,85.918 C424.794104,82.584 424.141104,77.345 424.120104,75.908 C424.019104,72.43 426.519104,69.102 426.492104,65.673 C426.454104,60.903 422.710104,55.938 422.710104,55.938&quot; id=&quot;Fill-98&quot; fill=&quot;var(--hr-color)&quot;&gt;&lt;/path&gt;
&lt;path d=&quot;M302.845104,52.885 C302.750104,52.573 302.523104,47.483 298.347104,48.334 C296.386104,48.734 295.575104,51.737 296.049104,53.353 C295.437104,55.595 294.345104,56.846 294.877104,61.459 C295.470104,66.599 298.846104,68.692 298.732104,70.277 C298.630104,71.533 298.642104,73.546 298.598104,74.85 L298.535104,75.183 C298.632104,75.116 298.744104,75.156 298.841104,75.089 C298.980104,75.342 299.019104,76.129 299.210104,76.376 C299.248104,76.262 299.903104,75.988 299.529104,75.487 C299.785104,75.832 300.989104,77.493 301.170104,77.254 C301.146104,77.474 301.582104,76.552 301.603104,76.712 C301.582104,76.552 301.681104,76.558 301.906104,75.826 C302.110104,76.178 302.440104,76.195 302.585104,76.501 C303.798104,75.019 302.642104,71.989 302.793104,70.834 C303.120104,68.033 304.624104,64.088 305.002104,61.334 C305.529104,57.506 302.845104,52.885 302.845104,52.885&quot; id=&quot;Fill-99&quot; fill=&quot;var(--hr-color)&quot;&gt;&lt;/path&gt;
&lt;path d=&quot;M542.099104,60.139 C541.980104,59.748 542.402104,54.385 537.377104,54.3367902 C534.210104,54.307 533.793104,57.501 533.210104,60.084 C532.422104,62.891 530.212104,63.731 530.877104,69.501 C531.616104,75.928 535.338104,80.463 535.187104,82.446 C535.052104,84.019 534.894104,88.962 535.018104,88.878 C535.195104,89.194 535.379104,89.576 535.622104,89.884 C535.671104,89.741 535.845104,89.516 535.894104,89.374 C536.220104,89.805 537.677104,91.884 537.908104,91.584 C537.877104,91.859 538.835104,90.146 539.124104,89.228 C539.384104,89.669 539.485104,89.668 539.670104,90.051 C541.222104,88.192 540.271104,82.86 540.467104,81.415 C540.893104,77.911 543.928104,73.925 544.419104,70.48 C545.104104,65.688 542.099104,60.139 542.099104,60.139&quot; id=&quot;Fill-100&quot; fill=&quot;var(--hr-color)&quot;&gt;&lt;/path&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;If you’re a frequent reader of this blog, then you’ve most likely already seen what a horizontal rule looks like on here. In fact, if you haven’t seen it before, then you might have &lt;em&gt;just&lt;/em&gt; done that. The birds-on-a-wire illustration above this very paragraph is a styled &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;div class=&quot;reader-mode-only&quot;&gt;
    &lt;p class=&quot;reader-mode-only&quot;&gt;&lt;em&gt;If you&#39;re reading this article in a reading app or a Web browser&#39;s reader mode, then the above horizontal rule will not appear with my custom styles, and you&#39;ll just see a horizontal line. Here is a picture of what the horizontal rule looks like:&lt;/em&gt;&lt;/p&gt;
    &lt;figure&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/hr.png&quot; alt=&quot;The horizontal rule style I am using on my Web site. It is a vector illustration of a few bird silhouettes standing on a curvey horizontal black wire.&quot; /&gt;&lt;/figure&gt;
    
&lt;/div&gt;
&lt;p&gt;Prior to creating this horizontal rule style, my horizontal rules looked as boring as you could possibly imagine. Until one day, I looked at that boring line and imagined a bunch of birds sitting on it &lt;small&gt;&lt;em&gt;(because, well, BIRDS!)&lt;/em&gt;&lt;/small&gt;. And then it clicked! I got an SVG image of a bunch of birds (silhouettes) on a wire, modified it to look like I wanted it to, and used it to style my &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; elements to look like what you can see above.&lt;/p&gt;
&lt;p&gt;In this post, I’ll go over how I did it, and how my horizontal rules can possibly be improved further, so that they adapt to various contexts, while remaining semantic and accessible.&lt;/p&gt;
&lt;h2 id=&quot;semantics-and-accessibility&quot; tabindex=&quot;-1&quot;&gt;Semantics and accessibility&lt;/h2&gt;
&lt;p&gt;An HTML horizontal rule is, &lt;strong&gt;by definition, not just a visual divider.&lt;/strong&gt; It has semantics and plays a meaningful role in the context of its surrounding content:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The HTML &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; element represents a paragraph-level thematic break, e.g. a scene change in a story, or a transition to another topic within a section of a reference book.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;hr&lt;/code&gt; element has &lt;a href=&quot;https://www.w3.org/TR/html-aria/#dfn-implicit-aria-semantics&quot;&gt;an implicit role&lt;/a&gt; of &lt;code&gt;separator&lt;/code&gt;. As such, &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; is understood and announced by screen readers. A &lt;code&gt;hr&lt;/code&gt; is announced as “Horizontal Splitter” by VoiceOver on macOS. The &lt;code&gt;hr&lt;/code&gt; is also displayed as a horizontal line by reading apps and reader modes, where your CSS is typically stripped out and HTML semantics are used to determine how an element is styled by the reading app.&lt;/p&gt;
&lt;p&gt;What’s interesting is that a horizontal rule has an implicit orientation which is &lt;code&gt;horizontal&lt;/code&gt; by default. This means that if you’re using &lt;em&gt;vertical&lt;/em&gt; rules to split content, you can inform screen readers that the rule is vertical by setting the &lt;code&gt;aria-orientation&lt;/code&gt; attribute value to &lt;code&gt;vertical&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;hr&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-orientation&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;vertical&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Note that you needn’t &amp;amp; shouldn’t explicitly set `role=&quot;separator&quot;` on the `hr` element because its semantics are implicit --&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;VoiceOver on macOS announces horizontal rules with a vertical orientation as “Vertical Splitter”.&lt;/p&gt;
&lt;p&gt;In addition to separating paragraphs in an article, horizontal rules can be used for separating groups of menu items in a menu, for example. They can also be interactive.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further reading:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#separator&quot;&gt;ARIA spec for &lt;code&gt;separator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since horizontal rules are semantic elements announced by screen readers, then &lt;strong&gt;unless you’re using a horizontal rule to &lt;em&gt;semantically&lt;/em&gt; divide content&lt;/strong&gt;, you should hide it from screen readers using &lt;code&gt;aria-hidden=&amp;quot;true&amp;quot;&lt;/code&gt;. In other words: use &lt;code&gt;aria-hidden=&amp;quot;true&amp;quot;&lt;/code&gt; to hide decorational horizontal lines. Do &lt;em&gt;not&lt;/em&gt; hide them if they are providing semantic, thematic content breaks.&lt;/p&gt;
&lt;h2 id=&quot;styling-with-css&quot; tabindex=&quot;-1&quot;&gt;Styling with CSS&lt;/h2&gt;
&lt;p&gt;Like other empty HTML elements, the &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; element can be limitedly styled using CSS. For example, you can change its width and height, border, and background color, as well as use gradients or apply a background image, etc. And even though it’s a content-less element, it seems that you can even create &lt;a href=&quot;https://sarasoueidan.com/blog/horizontal-rules/(https://css-tricks.com/examples/hrs/)&quot;&gt;simple &lt;code&gt;hr&lt;/code&gt; styles&lt;/a&gt; using &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements, too.&lt;/p&gt;
&lt;p&gt;To create the birds-on-a-wire horizontal rules used on this site, all I did was set the dimensions of the &lt;code&gt;hr&lt;/code&gt;, and apply the SVG image as a background image in CSS:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ..&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ..&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string url&quot;&gt;&quot;data:image/svg+xml,...&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; no-repeat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100% auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* .. */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There’s nothing too fancy going on in the CSS. But the above styles have irked me ever since I wrote them. Generally, I try to avoid using background images for anything that’s not purely decoration. And the horizontal rules, as mentioned earlier, are &lt;em&gt;not&lt;/em&gt; pure decoration. I also prefer to avoid using SVGs as background images and tend to inline them whenever I can so that I can take full advantage of their stylability with CSS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An SVG implemented as a background image cannot be styled from its containing (or referencing) stylesheet.&lt;/strong&gt; I want the &lt;code&gt;hr&lt;/code&gt; to be adaptive. I want to be able to customize it for different themes, and have the ability to modify and control its color(s) via CSS whenever I want. I also want to style it so that it remains accessible in user-controlled environments &lt;small&gt;(such as Windows High Contrast Mode, for example)&lt;/small&gt;. And while I don’t plan on animating the horizontal rules on this blog, I’d still like to have the option to add a subtle animation should I ever want to. After all, SVGs are handy because they are so powerful and flexible—they’re about more than crisp lines and illustrations.&lt;/p&gt;
&lt;p&gt;To style the horizontal rule to match various themes, I could possibly change the background image on the &lt;code&gt;hr&lt;/code&gt; for each theme. This would work. But if the images are inlined in the CSS, then I’ll end with a larger CSS file. And if they’re not inlined, I’ll end up with multiple requests to multiple images, which isn’t great for performance. Not to mention having to create and maintain multiple images, which is not the best workflow for something that could be simpler.&lt;/p&gt;
&lt;p&gt;Additionally, in Windows High Contrast Mode, we have no control over the active theme colors. So if I want to make sure the horizontal rule always has enough contrast with the background, then I’ll need to be able to change and control its colors in my CSS, which I can’t do if if the SVG is a background image. This means that I might end with a black horizontal rule on a black background, for example.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;(On the other hand, if you don’t really care about the horizontal rule’s styles in WHCM and you just want it to remain properly accessible, you could just strip away the background image and let WHCM style the &lt;code&gt;hr&lt;/code&gt; the way it would do by default.)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;I could just use a background image on the &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; and stop at that point. But if if I want the horizontal rule to be truly adaptive, then I need a little more flexibility that the &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; element itself doesn’t provide…&lt;/p&gt;
&lt;h2 id=&quot;a-more-flexible-and-adaptive-implementation-with-inline-svg-and-aria&quot; tabindex=&quot;-1&quot;&gt;A more flexible and adaptive implementation with inline SVG and ARIA&lt;/h2&gt;
&lt;p&gt;The best way to get the full flexibility of an SVG is by inlining it. But the &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; element is content-less — it has no opening and closing tags within which you can place other elements.&lt;/p&gt;
&lt;p&gt;The only way to work around the limitations of &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; while preserving semantics for screen reader users is to use a &lt;code&gt;div&lt;/code&gt; and provide the semantics of an &lt;code&gt;hr&lt;/code&gt; using ARIA. Yes, I am cringing at the idea as I type this. But hear me out. I think it’s worth exploring and going down this road if you want to get creative with your horizontal rules while also making sure they remain visually accessible and customizable in various contexts and environments.&lt;/p&gt;
&lt;p&gt;The alternative approach to creating flexible horizontal rules would essentially look like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;separator&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- hide the SVG from screen readers to avoid them announcing it --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-hidden&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;focusable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- svg content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or, as my friend &lt;a href=&quot;https://scottohara.me/&quot;&gt;Scott&lt;/a&gt; pointed out, the &lt;code&gt;separator&lt;/code&gt; role could be directly applied to the &lt;code&gt;svg&lt;/code&gt;, in which case there’s no need to hide the SVG with &lt;code&gt;aria-hidden&lt;/code&gt; anymore:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;separator&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;794px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;51px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 794 51&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;xlink&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/1999/xlink&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- svg content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using the above markup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we create a semantic horizontal rule that is understood and properly announced by screen readers, and&lt;/li&gt;
&lt;li&gt;the illustration, being an inline SVG now, becomes easier to style and control with CSS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For convenience, the above horizontal rule markup could be wrapped in a custom component, or separated into a template partial or a shortcode, so that it can be more efficiently inserted where a &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; would otherwise go.&lt;/p&gt;
&lt;p&gt;With the SVG inlined, I can use CSS custom properties to control what the SVG looks like in different contexts. For example, with &lt;a href=&quot;https://tympanus.net/codrops/2015/07/16/styling-svg-use-content-css/&quot;&gt;CSS custom properties sprinkled inside the SVG&lt;/a&gt;, I could then control that content using CSS, modifying and changing its colors. For example, in Windows High Contrast Mode, I could set the color of the SVG to whatever is the current text color:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* IE and Legacy Edge */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;-ms-high-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; active&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;div[role=&quot;separator&quot;] svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;--hr-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; windowText&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* Using the new standards for forced colors, currently supported in Chromium Edge */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;forced-colors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; active&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;div[role=&quot;separator&quot;] svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;--hr-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; CanvasText&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That way, the horizontal rule will always have enough contrast with the background behind it.&lt;/p&gt;
&lt;p&gt;If the content of the SVG is multi-colored, you can define and set values for multiple variables in the same manner, thus creating different versions—or themes—of the horizontal rule for different contexts or environments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further reading:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tympanus.net/codrops/2015/07/16/styling-svg-use-content-css/&quot;&gt;Styling SVG &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; Content with CSS&lt;/a&gt;, in which I elaborate more about theming SVG images using CSS custom properties&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.windows.com/msedgedev/2020/09/17/styling-for-windows-high-contrast-with-new-standards-for-forced-colors/&quot;&gt;Styling for Windows high contrast with new standards for forced colors&lt;/a&gt; &lt;small&gt;(Hat tip: &lt;a href=&quot;https://twitter.com/aardrian/status/1375201979849408514?s=20&quot;&gt;Adrian Roselli&lt;/a&gt;)&lt;/small&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using this technique:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The horizontal rule is styleable and customizable using CSS.&lt;/li&gt;
&lt;li&gt;It can be animated with CSS and/or JavaScript.&lt;/li&gt;
&lt;li&gt;It will display like it is intended to (birds on a wire) even in environments where my CSS is stripped off, such as reading apps. Because the it is now an &lt;em&gt;image&lt;/em&gt;, it will be displayed just the way it is, as opposed to an &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; that would be displayed and styled by the reading app.&lt;/li&gt;
&lt;li&gt;Using the high contrast media query, it can be adapted to always remain accessible with whatever user theme is currently active.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a video of me changing the color of my birds-on-a-wire horizontal rule in realtime using Chrome devtools. This is made possible by using inline SVG and CSS custom properties to apply the color to the SVG content:&lt;/p&gt;
&lt;figure&gt;
    &lt;div class=&quot;video&quot;&gt;
        &lt;iframe src=&quot;https://player.vimeo.com/video/528984771?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; width=&quot;100%&quot; height=&quot;auto&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen=&quot;&quot; title=&quot;theming with inline SVG and CSS custom properties&quot;&gt;&lt;/iframe&gt;
    &lt;/div&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;closing-thoughts&quot; tabindex=&quot;-1&quot;&gt;Closing Thoughts&lt;/h2&gt;
&lt;p&gt;Just like using inline SVG for icons is the best practice to ensure the icons remain adaptive and accessible, SVG can similarly provide better resilience for horizontal rules when you want to get more creative with them. Whether or not you use this technique, it’s good to have in your knowledge base, just in case you ever need it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Accessible Text Labels For All</title>
    <link href="https://sarasoueidan.com/blog/accessible-text-labels/"/>
    <updated>2021-03-17T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/accessible-text-labels/</id>
    <content type="html">&lt;p&gt;My talk &lt;em&gt;&lt;strong&gt;Applied Accessibility: Practical Tips for Creating more Accessible Front-Ends&lt;/strong&gt;&lt;/em&gt; is now &lt;a href=&quot;https://youtu.be/Mv_RlmAm4nc&quot;&gt;available to watch online&lt;/a&gt;. This blog post is an extended transcript for a section of the talk, in which I discuss how to create more descriptive button (and/or link) text labels that improve the e-commerce experience for screen reader users, whilst making sure those buttons don’t fail WCAG success criteria. This, in turn, ensures that the buttons remain usable by another category of users: those using voice commands to navigate the Web. The concepts covered are applicable to all kinds of text labels, including form control labels.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;quick-overview-of-the-voiceover-rotor-on-macos-and-how-it-can-be-used-to-display-contents-on-a-page&quot; tabindex=&quot;-1&quot;&gt;Quick overview of the VoiceOver Rotor on macOS and how it can be used to display contents on a page&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.apple.com/voiceover/info/guide/_1121.html&quot;&gt;VoiceOver&lt;/a&gt; (VO) is the built-in screen reader on macOS. VoiceOver users can navigate the Web using what is known as the Web Rotor.&lt;/p&gt;
&lt;p&gt;The VoiceOver Web Rotor is a quick way to explore and navigate a web page. It is like power commands but for screen reader users. It increases their efficiency and facilitates their browsing the web.&lt;/p&gt;
&lt;p&gt;With VoiceOver open, the rotor can be activated with the keyboard shortcut &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;option&lt;/kbd&gt; + &lt;kbd&gt;U&lt;/kbd&gt;. Once open, the rotor will be visible as a heads up display in the middle of the screen. It then presents all items of a particular type in a list.&lt;/p&gt;
&lt;p&gt;Inside the rotor, there are several lists—or menus— that the user can use to explore and navigate the content on the page. Using the rotor is an easy way to hear, for example, all the links on a page. The user can then jump to any link they want. There is also a headings menu that allows the user to jump to a particular heading on the page.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;div class=&quot;video&quot;&gt;
        &lt;iframe src=&quot;https://player.vimeo.com/video/524890417?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; width=&quot;100%&quot; height=&quot;auto&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen=&quot;&quot; title=&quot;VoiceOver Demo 2 with Audio&quot;&gt;&lt;/iframe&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;In this video, I am demoing the VoiceOver Web Rotor to navigate and explore sections on an A List Apart page. Pressing the right and left arrow inside the rotor shows the different menus available, and gives a quick overview of the different types of content on the page.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Using the rotor, and if the document is using semantic markup and proper sectioning elements (such as &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;footer&lt;/code&gt;, &lt;code&gt;aside&lt;/code&gt;, and so on), the user can move from one area of the page to another without having to go through the content in each section. And it is &lt;em&gt;very&lt;/em&gt; important for them to be able to do so.&lt;/p&gt;
&lt;p&gt;Note that &lt;strong&gt;the document structure in the rotor is defined by the document structure in your HTML&lt;/strong&gt;. So, if you don’t provide a heading, it won’t show up in the rotor and so the document hierarchy for screen reader users will be affected. If you don’t use a landmark, it won’t show up in the rotor and the user won’t be able to jump to it to use it.&lt;/p&gt;
&lt;h3 class=&quot;h5&quot;&gt;Useful Reading: &lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kb.iu.edu/d/atgb&quot;&gt;Voiceover Basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://etc.usf.edu/techease/4all/vision/how-do-i-use-webrotor-in-voiceover/&quot;&gt;Using the Web Rotor to Navigate a Web Page with VoiceOver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;We mentioned earlier that the rotor contains different menus, including Headings menu, Landmarks menu, a Links menu, and a Form Controls menu. Knowing how a screen reader user might navigate a page opens up the possibility to optimize our interfaces and improve their user experience even more.&lt;/p&gt;
&lt;h2 id=&quot;exploring-e-commerce-product-listings-using-the-voiceover-web-rotor&quot; tabindex=&quot;-1&quot;&gt;Exploring e-commerce product listings using the VoiceOver Web rotor&lt;/h2&gt;
&lt;p&gt;A common design in e-commerce Web sites is displaying a list of products on a page, each with its own &lt;em&gt;&lt;strong&gt;Add to Cart&lt;/strong&gt;&lt;/em&gt; button, allowing the user to quickly add items to their cart.&lt;/p&gt;
&lt;p&gt;To demonstrate, here is the &lt;a href=&quot;https://www.yeti.com/en_US/bottles&quot;&gt;Yeti Web site&lt;/a&gt;, showcasing a list of reusable bottles. Each bottle comes with its own &lt;em&gt;Add to Cart&lt;/em&gt; button. Some also have a Customization option. The following video is a demo of me exploring the page using the VoiceOver Web Rotor:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;div class=&quot;video&quot;&gt;
        &lt;iframe src=&quot;https://player.vimeo.com/video/524924279?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; width=&quot;400&quot; height=&quot;300&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen=&quot;&quot; title=&quot;VO Rotor Form Controls Menu demo&quot;&gt;&lt;/iframe&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When you navigate this page using VoiceOver, and use the Form Controls menu, you’ll get a list of all form controls on the page, including the &lt;em&gt;Add to Cart&lt;/em&gt; buttons.&lt;/p&gt;
&lt;p&gt;Quickly scanning these buttons you can tell that they provide very little value, as there is no way to tell which product each button corresponds to. How does a user know which button they want to go to and press if they don’t know which product it corresponds to?&lt;/p&gt;
&lt;p&gt;You may have already guessed that one way we could improve the navigation is by adding screen &lt;a href=&quot;https://sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/#hiding-content-in-css-and-html&quot;&gt;visually-hidden, reader-only text&lt;/a&gt; that would add the name of the product to its corresponding button.&lt;/p&gt;
&lt;p&gt;So, technically, the solution &lt;em&gt;could&lt;/em&gt; look something like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;lt;button type=&quot;..&quot; class=“..&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    Add &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;visually-hidden&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;PRODUCT_NAME&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; to Cart&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- P.S. Don’t do this --&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You include the product name in the button’s text label string, so then when the Form Controls menu displays the list of buttons, each button would be clearly labelled to indicate which bottle it is referring to.&lt;/p&gt;
&lt;p&gt;This is a good solution for a screen reader user navigating using Form Controls, but &lt;strong&gt;you do &lt;em&gt;not&lt;/em&gt; want to do this&lt;/strong&gt; because &lt;strong&gt;even though it improves the experience of some screen reader users, it excludes users of other assistive technologies&lt;/strong&gt; and makes these buttons inaccessible to them, and a pain to use…&lt;/p&gt;
&lt;h2 id=&quot;talking-your-way-through-web-browsing-with-voice-commands&quot; tabindex=&quot;-1&quot;&gt;Talking your way through Web browsing with voice commands&lt;/h2&gt;
&lt;p&gt;Inserting visually hidden text in the middle of a visible string of text on a button like that prevents users browsing and navigating using voice commands from interacting with the button.&lt;/p&gt;
&lt;p&gt;A popular example of Voice recognition software used to browse the Web is &lt;a href=&quot;https://www.nuance.com/dragon/business-solutions/dragon-professional-individual.html&quot;&gt;Dragon Naturally Speaking&lt;/a&gt;. It is software that allows you to use your computer and browse the web using voice commands. It comes with a full usage manual that details how to use it to perform different tasks on your computer and on the Web. Such software is useful for a lot of people, including but not limited to people with disabilities who can’t use their hands, for example, or power users who want to get things done faster (because voice dictation is faster than typing).&lt;/p&gt;
&lt;p&gt;Seeing it in action is the best way to get an idea of how it’s used.
So, to quickly demonstrate how it is used on the Web, &lt;a href=&quot;https://www.levelaccess.com/&quot;&gt;Level Access&lt;/a&gt; created &lt;a href=&quot;https://www.youtube.com/watch?v=kJKQmTumFP0&amp;amp;ab_channel=LevelAccess&quot;&gt;a video demoing Dragon Naturally Speaking to fill out a form on a page&lt;/a&gt;. The following video is a short clip from their video which you can find and &lt;a href=&quot;https://www.youtube.com/watch?v=kJKQmTumFP0&amp;amp;ab_channel=LevelAccess&quot;&gt;watch in full on Youtube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Note: Note that when he says “go to sleep” or “wake up” he’s basically pausing Dragon and reactivating it by telling it to sleep and wake up.&lt;/small&gt;&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;div class=&quot;video&quot;&gt;
        &lt;iframe src=&quot;https://player.vimeo.com/video/524959505?badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; width=&quot;936&quot; height=&quot;540&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen=&quot;&quot; title=&quot;Dragon Naturally Speaking demo excerpt&quot;&gt;&lt;/iframe&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When the dragon user (in the video) wants to select a form control, &lt;strong&gt;he speaks out the visual text label of that control&lt;/strong&gt;. This is one of many reasons why &lt;strong&gt;visual labels are important in user interfaces&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So when we have a series of &lt;strong&gt;&lt;em&gt;Add to Cart&lt;/em&gt;&lt;/strong&gt; buttons, a dragon user &lt;strong&gt;will speak the label of the button in order to interact with it&lt;/strong&gt;. This is why adding text in the middle of the string makes it inaccessible. The content in the middle of the string would break the visible label. The user would be telling dragon to interact with a button whose label is not what it visually appears to be. This is why this would fail the &lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/label-in-name.html&quot;&gt;WCAG Success Criterion 2.5.3: Label in Name&lt;/a&gt;: &lt;q&gt;For user interface components with labels that include text or images of text, the name contains the text that is presented visually. A best practice is to have the text of the label at the start of the name.&lt;/q&gt;&lt;/p&gt;
&lt;p&gt;The following two paragraphs are from the Success Criterion’s page (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;The intent of this Success Criterion is to ensure that the words which visually label a component are also the words associated with the component programmatically. This helps ensure that people with disabilities can rely on visible labels as a means to interact with the components.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;Most controls are accompanied by a visible text label. Those same controls have a programmatic name, also known as the Accessible Name. &lt;strong&gt;Users typically have a much better experience if the words and characters in the visible label of a control match or are contained within the accessible name.&lt;/strong&gt; When these match, speech-input users (i.e., users of speech recognition applications) can navigate by speaking the visible text labels of components, such as menus, links, and buttons, that appear on the screen. &lt;strong&gt;Sighted users who use text-to-speech (e.g., screen readers) will also have a better experience if the text they hear matches the text they see on the screen.&lt;/strong&gt;&lt;/p&gt;
&lt;cite&gt;&lt;a href=&quot;https://www.w3.org/WAI/WCAG21/Understanding/label-in-name.html&quot;&gt;WCAG Success Criterion 2.5.3&lt;/a&gt;&lt;/cite&gt;&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;improving-the-experience-for-screen-reader-users-whilst-keeping-it-accessible-to-speech-input-users&quot; tabindex=&quot;-1&quot;&gt;Improving the experience for screen reader users whilst keeping it accessible to speech-input users&lt;/h2&gt;
&lt;p&gt;We still want to improve the experience for screen reader users, but we can’t insert the product name into the button’s visible label. We can’t fix the experience for a group of people and end up breaking it for another group. Challenges like these make you scratch your head and think of alternative solutions.&lt;/p&gt;
&lt;p&gt;It turns out, there is a middle ground here. We &lt;em&gt;can&lt;/em&gt; still add the product name to the button, improving the user experience for screen reader users, &lt;em&gt;without&lt;/em&gt; breaking the visible name of the button, &lt;strong&gt;by &lt;em&gt;appending&lt;/em&gt; it to the end of the button’s name, instead of inserting it in the middle.&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;lt;button type=&quot;..&quot; class=“..&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    Add to Cart &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;visually-hidden&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;, PRODUCT_NAME&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By appending the text to the end of the visible name, the visible name is left intact, and the Web Rotor Form Controls menu will show a list of &lt;em&gt;&lt;strong&gt;Add to cart&lt;/strong&gt;&lt;/em&gt; buttons with the names of the products they are referring to appended to them.&lt;/p&gt;
&lt;p&gt;As for the voice control user, when they say “&lt;em&gt;click Add to Cart&lt;/em&gt;”, Dragon is going to label the &lt;em&gt;Add to Cart&lt;/em&gt; buttons with numbers, like we saw with the checkbox and radio button examples in the video, and then the user can speak out the number of the button they want to click. This works because Voice commands work by saying the name of the input you want to interact with, as long as the name is not “broken” or interrupted by content in the markup.&lt;/p&gt;
&lt;p&gt;So whenever you need to add additional text to a visible label, it best come after what’s visually shown.&lt;/p&gt;
&lt;p&gt;Similarly, always ensure the accessible name (announced by screen readers) matches the visual label as much as possible. This means that you’ll also want to avoid adding a label using &lt;code&gt;aria-label&lt;/code&gt; that does not match the text label that is shown on a control.&lt;/p&gt;
&lt;h2 id=&quot;closing-thoughts%3A-provide-visual-labels-whenever-possible&quot; tabindex=&quot;-1&quot;&gt;Closing thoughts: Provide visual labels whenever possible&lt;/h2&gt;
&lt;p&gt;Knowing how voice control users navigate the Web can also inspire more visual improvements to our components.&lt;/p&gt;
&lt;p&gt;If the user needs to see a visible label to interact with a control, then what about controls that don’t have any visible labels? What about components that have label-less controls, such as dot navigations (typically used in sliders and carousels)? If a user wants to interact with the dots in a dot navigation, they can’t speak their accessible name because they don’t have a visible one they can see. So they are left with two other ways to navigate: using voice commands to tab through the control, or using the mouse grid, which is the most tedious and least favorable option.&lt;/p&gt;
&lt;p&gt;It should be obvious by now that the best practice is to always have a visible label for UI controls. But if that’s not possible at all, then the next possible option is to &lt;em&gt;show&lt;/em&gt; a label on focus (and hover, too, maybe). Showing labels &lt;em&gt;on focus&lt;/em&gt; is particularly important because a Dragon user can tell Dragon to &lt;strong&gt;Tab&lt;/strong&gt; to the next control, but they can’t tell it to hover over it (what’s it going to hover if it has no label to indicate what it is?)&lt;/p&gt;
&lt;p&gt;Other visual elements that would be more accessible when associated with a visible label are &lt;a href=&quot;https://www.sarasoueidan.com/blog/accessible-icon-buttons/&quot;&gt;icon buttons&lt;/a&gt;. Similar to the dot navigation buttons, if you can’t add a visible label, try showing one when the user interacts with the button.&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How I set up Glyphhanger on macOS for optimizing and converting font files for the Web</title>
    <link href="https://sarasoueidan.com/blog/glyphhanger/"/>
    <updated>2021-03-02T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/glyphhanger/</id>
    <content type="html">&lt;p class=&quot;size-2x&quot;&gt;
I can&#39;t count the number of times I&#39;ve tried installing a command line tool on my machine, only to find myself going down a black hole of node modules &amp; dependencies, and a seemingly non-ending list of error messages in the terminal. This would go on for a while before I finally give up and call it quits, only to revert back to find myself googling the name of an online app and using that to do what I need instead.
&lt;/p&gt;
&lt;p&gt;Yesterday, the same thing &lt;em&gt;almost&lt;/em&gt; happened again. I got into another black hole in iTerm as I tried to install a couple of Web font conversion and optimization tools. I almost gave up before I finally managed to &lt;em&gt;kind of&lt;/em&gt; get everything working the way I wanted it to. A lot of googling and “stack-overflowing” was involved in this process. I’m sharing my struggles in this post in the hopes that it might help someone out should they get stuck where I did. I also want to have a reference to come back in the future should I ever find myself installing the same tools again.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Yesterday was just another typical work day. I was setting up the foundation for a new client project. The Web site we’re building uses the Inter font family for the typography. So, I head over to &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt;, found &lt;a href=&quot;https://fonts.google.com/specimen/Inter?preview.text_type=custom&quot;&gt;the Inter family page&lt;/a&gt;, and clicked that &lt;strong&gt;“Download family”&lt;/strong&gt; button.&lt;/p&gt;
&lt;p&gt;As you probably already know, Google Fonts doesn’t supply the fonts in WOFF or WOFF2 formats. When you download a font, you only get TTF font files. Why that is, I don’t know. Jeremy &lt;a href=&quot;https://adactio.com/journal/17480&quot;&gt;has wondered the same&lt;/a&gt; before. And if you’re a front-end developer you should also know that TTF is not the best choice for serving Web fonts, and that WOFF and WOFF2 are far leaner and more performant.&lt;/p&gt;
&lt;p&gt;So, as usual, I set out to convert the TTF files to WOFF and WOFF2 to serve them up in my project.&lt;/p&gt;
&lt;h2 id=&quot;my-previous-font-conversion-workflow&quot; tabindex=&quot;-1&quot;&gt;My previous font conversion workflow&lt;/h2&gt;
&lt;p&gt;Normally, I’d head over to one of the online tools available — whatever comes up first in Google search, because I’ve never bookmarked one tool to use at all times, even though I tend to use &lt;a href=&quot;https://www.fontsquirrel.com/tools/webfont-generator&quot;&gt;Font Squirrel generator&lt;/a&gt; quite often. But that has always felt like too much of a hassle. Ideally, I’d be able make this conversion  &lt;em&gt;within the folder in which they are located&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So the workflow would look like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;download font,&lt;/li&gt;
&lt;li&gt;unzip &amp;amp; open folder,&lt;/li&gt;
&lt;li&gt;convert to WOFF &amp;amp; WOFF2,&lt;/li&gt;
&lt;li&gt;copy to project folder and embed on page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;…&lt;strong&gt;instead of:&lt;/strong&gt; download font, unzip &amp;amp; open folder, find an online tool, upload font files, wait for conversion, download fonts, unzip &amp;amp; open folder, and then move to project folder and embed on the page. This has always felt like an clunky workflow. It always bothered me that I had to click and switch contexts as much as I did.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, yesterday &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/1366275965215793153?s=20&quot;&gt;I saught the help of the amazing Twitter #lazyWeb&lt;/a&gt; and asked my friends there what they use to convert their font files on macOS. Many responded with links to online tools, which is what I’m wanting to avoid. And some responded with recommendations for a few command line tools.&lt;/p&gt;
&lt;p&gt;I imagined I’d want a nice drag and drop tool for this. But command line tools are also pretty handy, and usually very flexible, too. Once you’ve got one set up, it could help streamline your font conversion process. And since I’m much more comfortable in the command line today than I was a few years ago, I thought it was about time I switched to one of those tools.&lt;/p&gt;
&lt;p&gt;I was instantly sold on &lt;a href=&quot;https://www.filamentgroup.com/&quot;&gt;Filament Group&lt;/a&gt;’s &lt;a href=&quot;https://github.com/filamentgroup/glyphhanger&quot;&gt;&lt;code&gt;glyphhanger&lt;/code&gt;&lt;/a&gt;. “&lt;code&gt;glyphhanger&lt;/code&gt; is a useful tool when working with web fonts—it can help optimize your font files very quickly”.&lt;/p&gt;
&lt;p&gt;Not only does &lt;code&gt;glyphhanger&lt;/code&gt; convert font files, but it also subsets them &lt;small&gt;(i.e. it removes unnecessary characters from a font file)&lt;/small&gt;, which is another optimization step you want to make to serve more performant fonts. (That, and the fact that I love the work of the folks at Filament Group, who have always been big proponents of performance.)&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/filamentgroup/glyphhanger&quot;&gt;Github repository&lt;/a&gt;’s README file includes installation instructions. And that’s where I started yesterday…&lt;/p&gt;
&lt;h2 id=&quot;installing-glyphhanger&quot; tabindex=&quot;-1&quot;&gt;Installing Glyphhanger&lt;/h2&gt;
&lt;p&gt;I’m going to start with the process I went through and the issues and errors I got. If you’re not interested in that, you can skip straight to &lt;a href=&quot;https://sarasoueidan.com/blog/glyphhanger/#setup&quot;&gt;the solution&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;down-the-rabbit-hole&quot; tabindex=&quot;-1&quot;&gt;Down the rabbit hole&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;glyphhanger&lt;/code&gt; is available on npm. According to the reposiroty’s README, installation is as simple as running:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g glyphhanger&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I ran that command. &lt;code&gt;glyphhanger&lt;/code&gt; was installed. Yay. So far so good.&lt;/p&gt;
&lt;p&gt;Following that line in the README is a note that says that &lt;code&gt;pyftsubset&lt;/code&gt; is a prerequisite. I wasn’t familiar with what &lt;code&gt;pyftsubset&lt;/code&gt; is, so I kept on reading. &lt;small&gt;(Honestly, does everyone know what everything is?)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;There was a link to another Github repository: &lt;a href=&quot;https://github.com/fonttools/fonttools&quot;&gt;fontTools&lt;/a&gt;. I chose &lt;code&gt;glyphhanger&lt;/code&gt; for its subsetting feature, and the subsetting functionality requires you to install &lt;a href=&quot;https://github.com/fonttools/fonttools&quot;&gt;fonttools&lt;/a&gt;. So, I had a dependency to install. Reading the README of the fontTools repo only complicated things for me. So, I kept on reading the &lt;code&gt;glyphhanger&lt;/code&gt; instructions.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;(At this point: I couldn’t make the direct connection between &lt;code&gt;pyftsubset&lt;/code&gt; and fontTools at first. Later on, I googled “pyftsubset fonttools” and learned that &lt;code&gt;pyftsubset&lt;/code&gt; is an OpenType font subsetter and optimizer, based on fontTools. And that’s why you need to install fontTools.)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;The next instruction is:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; fonttools&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I had no idea what &lt;code&gt;pip&lt;/code&gt; is. I decided to run the command before googling anything. Unsurprisingly, that’s when I got my first error.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;zsh: &lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; not found: pip&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oups. OK so apparently I need to have Pip installed on my machine. Not knowing what it is, I started googling. I learned that Pip is a package manager for Python. And that to install Pip, I needed to have Python installed.&lt;/p&gt;
&lt;p&gt;Many articles mentioned that macOS already comes with a version of Python installed. So I looked for what I needed to install Pip using the Python that’s already installed. For some reason, none of the commands I found worked. So I thought: “maybe Python &lt;em&gt;isn’t&lt;/em&gt; installed on my machine?”. So I opened a new browser tab and started googling for how to install Python.&lt;/p&gt;
&lt;p&gt;¯_(ツ)_/¯&lt;/p&gt;
&lt;p&gt;While I was at it, I was following the rest of the instructions in the README. I didn’t know what depended on what, so I thought I’d try continuing async.&lt;/p&gt;
&lt;p&gt;The following instructions are about cloning the Brotli and Zopfli git repositories and installing them because they are required to get WOFF and WOFF2 support:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Additional installation for --flavor=woff2&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone https://github.com/google/brotli&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; brotli&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;python setup.py &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Additional installation for --flavor=woff --with-zopfli&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; clone https://github.com/anthrotype/py-zopfli&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; py-zopfli&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;git&lt;/span&gt; submodule update --init --recursive&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;python setup.py &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you might have noticed already, these steps require Python to work, and since I didn’t have Python working for me at this point yet, I got quite a bunch of errors in the terminal. Trying to install Brotli and Zopfli like that confirmed to me that Python maybe is, indeed, &lt;em&gt;not&lt;/em&gt; installed by default.&lt;/p&gt;
&lt;p&gt;fontTools is also a Python project, which, naturally, requires Python to work. (Duh.)&lt;/p&gt;
&lt;p&gt;So it was very obvious at this point that what I needed to focus on was getting Python and Pip set up if I wanted any of this to work.&lt;/p&gt;
&lt;p&gt;After googling quite a bit and jumping between articles and Stack Overflow Q&amp;amp;As, I learned that there are multiple versions of Python (obviously), the latest (I think) is Python 3. Now this is where the weirdness started. After installing Python 3, if I wanted to run a Python command, I needed to use &lt;code&gt;python3&lt;/code&gt; followed by the command. Not &lt;code&gt;python&lt;/code&gt;. According to &lt;a href=&quot;https://www.addictivetips.com/mac-os/install-python-3-on-macos/&quot;&gt;a nice article I found later&lt;/a&gt;, “in order to send commands to Python 3, you will need to enter &lt;code&gt;python3&lt;/code&gt; in the terminal. If you enter &lt;code&gt;python&lt;/code&gt;, the command will be sent to Python 2.”&lt;/p&gt;
&lt;p&gt;So anyway, I installed Python using &lt;code&gt;brew&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; python3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yep. That worked. I don’t remember if I had any issues here. But then again, I had so many issues that I don’t remember when and where I got each.&lt;/p&gt;
&lt;p&gt;¯_(ツ)_/¯&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;strong&gt;Here’s a quick tip:&lt;/strong&gt; If you, like me, want to avoid &lt;code&gt;brew&lt;/code&gt; updating every time you use the &lt;code&gt;brew&lt;/code&gt; command, you can use &lt;code&gt;HOMEBREW_NO_AUTO_UPDATE=1&lt;/code&gt;.
I have a snippet setup so that every time I type &lt;code&gt;brew&lt;/code&gt; and press TAB, it autocompletes to &lt;code&gt;HOMEBREW_NO_AUTO_UPDATE=1 brew&lt;/code&gt;, so that I can run whatever brew command I want without allowing it to update. I learned this a few months ago when I got sick of brew updating every time I wanted to run a quick command. I googled, and found this tip on Stack Overflow and have been using it since.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Next, I needed to install Pip. Once again, I found several articles, each mentioning a different way to do it. To be quite honest, I don’t remember which one of those I ended up following. I did learn though that with Python 3 comes Pip 3.&lt;/p&gt;
&lt;p&gt;I installed Pip 3.&lt;/p&gt;
&lt;p&gt;At this point, I realized I should have everything I needed to continue going through the README instructions. So, again, I tried installing &lt;code&gt;fonttools&lt;/code&gt; using &lt;code&gt;pip install fonttools&lt;/code&gt;. After getting yet more errors, I learned that, just like &lt;code&gt;python3&lt;/code&gt; I need to use &lt;code&gt;pip3&lt;/code&gt; instead of &lt;code&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;pip3 &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; fonttools&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That worked. So I got Python, Pip, and fontTools out of the way.&lt;/p&gt;
&lt;p&gt;To generate optimized WOFF and WOFF2 font files, I needed Brotli and Zopfli. I have no idea why I still got some errors by following the installation instructions in the README (cloning the git repos for each). So, more googling ensued. Turns out, installing Brotli and Zopfli was much easier now that I had Pip installed. I didn’t even need to clone the git repositories like the README instructed. All I needed is these two commands:&lt;/p&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;pip3 &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; brotli&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;pip3 &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; zopfli&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And &lt;em&gt;Boom!&lt;/em&gt; all dependencies were installed. &lt;em&gt;Now&lt;/em&gt; when I used &lt;code&gt;glyphhanger&lt;/code&gt; to convert my font files, it finally generated the optimized TTF, WOFF, and WOFF2 files.&lt;/p&gt;
&lt;p&gt;So, to sum up:&lt;/p&gt;
&lt;h3 id=&quot;setup&quot;&gt; tl;dr: installing all dependencies and running glyphhanger&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;glyphhanger&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g glyphhanger&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Install Python 3:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;brew &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; python3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install pip. Python 3 comes with pip 3. Follow the instructions in &lt;a href=&quot;https://www.addictivetips.com/mac-os/install-python-3-on-macos/&quot;&gt;this article&lt;/a&gt; to install pip.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install fontTools using pip:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;pip3 &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; fonttools&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Install Brotli and Zopfli using pip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;pip3 &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; brotli&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;pip3 &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; zopfli&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;And then use &lt;code&gt;glyphhanger&lt;/code&gt; to subset and create optimized formats of your TTF font files:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;glyphhanger --subset&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;*.ttf&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Zach Leatherman has &lt;a href=&quot;https://www.zachleat.com/web/glyphhanger/&quot;&gt;a post&lt;/a&gt; that introduces &lt;code&gt;glyphhanger&lt;/code&gt; with examples of how to use it. You’ll want to read his article and the repository’s README for further customizations and usage options because there are quite a few.&lt;/p&gt;
&lt;h2 id=&quot;optimizing-variable-fonts&quot; tabindex=&quot;-1&quot;&gt;Optimizing Variable Fonts&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;glyphhanger&lt;/code&gt; also generates WOFF2 files for Variable fonts. The file size of the subsetted Variable Inter WOFF2 file generated by &lt;code&gt;glyphhanger&lt;/code&gt; is slightly smaller than the file size generated by Google’s &lt;a href=&quot;https://github.com/google/woff2&quot;&gt;woff2 library&lt;/a&gt; (302KB compared to 308KB). It does not break the Variable axes of the font like other online tools might, so it is safe to use it in your projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Useful resources:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://clearleft.com/posts/how-to-use-variable-fonts-in-the-real-world&quot;&gt;How to use variable fonts in the real world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://henry.codes/writing/how-to-convert-variable-ttf-font-files-to-woff2/&quot;&gt;How To Convert Variable TTF Font Files to WOFF2&lt;/a&gt; — this post explains how to set up the woff2 library and use it to generate WOFF2 from a Variable TTF font file. I’ve found it to be more helpful than the library’s README file. Make sure to follow the steps and commands to the letter.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;While I finally managed to get &lt;code&gt;glyphhanger&lt;/code&gt; set up and can now use it generate optimized Web font files, it still bugs me that I am &lt;em&gt;still&lt;/em&gt; getting an error when using it. My terminal looks like this every time I run the command:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/glyphhanger-error.png&quot; alt=&quot;Screenshot of the errors shown in the terminal after running the glyphhanger command to subset and generate font files.&quot; /&gt;
&lt;p&gt;I googled a lot trying to find what that error means and where it’s coming from. I would love to get a clean output every time I run &lt;code&gt;glyphhanger&lt;/code&gt;. I mean, it’s such a great tool. I want the output to be just as great. But after spending &lt;em&gt;quite&lt;/em&gt; some time on getting it to work, I wasn’t left with enough patience to figure the solution out. If you have an idea what might be causing it, please do &lt;a href=&quot;https://twitter.com/SaraSoueidan&quot;&gt;let me know&lt;/a&gt; — I’d appreciate it a lot.&lt;/p&gt;
&lt;p&gt;✨ &lt;strong&gt;UPDATE:&lt;/strong&gt; ✨ Twitter came to the rescue once again. &lt;a href=&quot;https://twitter.com/LurkGently&quot;&gt;@GentlyLurk&lt;/a&gt; figured out that the issue is coming from the version of &lt;code&gt;shelljs&lt;/code&gt; used in &lt;code&gt;glyphhanger&lt;/code&gt;, and kindly &lt;a href=&quot;https://twitter.com/GentlyLurk/status/1366695429212172288?s=20&quot;&gt;shared the fix&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;which glyphhanger&lt;/code&gt; in the command line. This should give you the path to the folder inside which &lt;code&gt;glyphhanger&lt;/code&gt; resides. (My result was &lt;code&gt;/usr/local/bin/glyphhanger&lt;/code&gt;; it’s a hidden folder so I had to &lt;code&gt;cmd+shift+.&lt;/code&gt; to view it.)&lt;/li&gt;
&lt;li&gt;Find the &lt;code&gt;package.json&lt;/code&gt; file in the folder and change the version of &lt;code&gt;shelljs&lt;/code&gt; to &lt;code&gt;0.8.4&lt;/code&gt;, then&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;npm install&lt;/code&gt; (inside the folder)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now the errors are finally gone. 🥳 If I run &lt;code&gt;glyphhanger --subset=Inter-Light.ttf&lt;/code&gt; for example, the result I get in the command line looks like this:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/glyphhanger-no-errors.png&quot; alt=&quot;Screenshot of the terminal after running the glyphhanger command showing only the result of generating 3 optimized font files, with no errors whatsoever.&quot; /&gt;
&lt;p&gt;(Look at those WOFF2 savings!)&lt;/p&gt;
&lt;p&gt;🎉🎉🎉&lt;/p&gt;
&lt;p&gt;✨ &lt;strong&gt;UPDATE #2 (March 11, 2021):&lt;/strong&gt; ✨ &lt;a href=&quot;https://twitter.com/zachleat/status/1370028833882132481&quot;&gt;Zach announced&lt;/a&gt; the release of glyphhanger v4, which includes dependency updates that fix the console warning issue that I had and that required the manually changing the &lt;code&gt;shelljs&lt;/code&gt; version in the package.json file. So if you follow the installation steps above, you should have a clean console output without the extra hassle. 🎉&lt;/p&gt;
&lt;h2 id=&quot;more-articles-on-font-subsetting&quot; tabindex=&quot;-1&quot;&gt;More articles on font subsetting&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fuzzylogic.me/posts/how-i-subset-web-fonts/&quot;&gt;How I subset web fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachleat.com/web/css-tricks-web-fonts/&quot;&gt;Developing a Robust Font Loading Strategy for CSS-Tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Inclusively Hiding &amp; Styling Checkboxes and Radio Buttons</title>
    <link href="https://sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/"/>
    <updated>2020-06-16T09:11:58Z</updated>
    <id>https://sarasoueidan.com/blog/inclusively-hiding-and-styling-checkboxes-and-radio-buttons/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;Checkboxes and radio buttons are two common examples of interactive form elements that we desperately want to have full control over styling but we don’t. So we’ve been hacking our way around styling them by hiding said elements with CSS and &lt;em&gt;visually&lt;/em&gt; replacing them with pseudo-elements or an SVG image — SVG, of course, being the more flexible, powerful, and accessible replacement. But an SVG image is, at the end of the day, just an &lt;em&gt;image&lt;/em&gt;, so while it can visually replace a checkbox, it doesn’t really substitute for it — the user still needs a &lt;em&gt;checkbox&lt;/em&gt; to interact with. So, when we attempt to hide the checkbox we want to style, we need to make sure that the checkbox remains accessible and interactive.&lt;/p&gt;
&lt;p&gt;I’ve recently come across quite a few articles on the topic of accessibly styling checkboxes and radio buttons. All of the articles I read use one or another variation of &lt;a href=&quot;https://a11yproject.com/posts/how-to-hide-content/&quot;&gt;the visually-hidden utility class&lt;/a&gt; which is usually used to hide content visually while keeping it screen reader-accessible. But while this technique works for some content, it’s not suitable for hiding interactive elements like radio buttons and checkboxes that have other &lt;a href=&quot;https://24ways.org/2018/inclusive-considerations-when-restyling-form-controls/&quot;&gt;accessibility and usability considerations&lt;/a&gt;. I learned this when I used the same technique myself to create my own accessible checkboxes a couple of years ago and my friend &lt;a href=&quot;https://scottohara.me/&quot;&gt;Scott O’Hara&lt;/a&gt; kindly pointed out during one of our chats that they weren’t entirely accessible because they weren’t discoverable by all screen reader users, particularly those navigating by touch.&lt;/p&gt;
&lt;p&gt;So, in this article, I will cover the different techniques for hiding elements, how each of them affects the accessibility of the content, and how to properly hide checkboxes and radio buttons taking their own accessibility and usability considerations into account to make sure we aren’t leaving any users out.&lt;/p&gt;
&lt;p&gt;Note that while I will be talking about checkboxes in this article, this technique applies to radio buttons and any other interactive form elements that you may want to restyle using an image replacement, including file inputs, for example.&lt;/p&gt;
&lt;h2 id=&quot;setting-the-foundation-in-the-markup&quot; tabindex=&quot;-1&quot;&gt;Setting the foundation in the markup&lt;/h2&gt;
&lt;p&gt;Even though &lt;a href=&quot;https://css-tricks.com/custom-styling-form-inputs-with-modern-css-features/&quot;&gt;styling a checkbox using modern CSS features&lt;/a&gt; is currently possible, using SVG to create custom checkboxes remains, in my opinion, the most flexible, powerful, and accessible way.&lt;/p&gt;
&lt;p&gt;Using SVG, we don’t style the checkbox itself — &lt;strong&gt;we hide the checkbox and use an SVG to create a checkbox &lt;em&gt;image&lt;/em&gt;&lt;/strong&gt;. So the SVG is just a visual replacement of the checkbox.&lt;/p&gt;
&lt;p&gt;So, in order to style a checkbox with SVG, we need to add the SVG to the markup somewhere. You could, of course, use the SVG as a background image (on the checkbox &lt;code&gt;label&lt;/code&gt;), yes; but it comes with drawbacks such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you lose the ability to animate the SVG, which is one of the major benefits of using SVG to begin with, and&lt;/li&gt;
&lt;li&gt;you lose the ability to optimize the SVG for user-controlled environments, such as Windows High Contrast Mode, so you could end up risking the accessibility of the checkbox in those environments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;…not to mention that inlining an SVG has overall more advantages than any other embedding techniques and that you could make use of, such as animations.&lt;/p&gt;
&lt;p&gt;I like to wrap my checkboxes inside their labels. Placing the checkbox inside the label increases the overall clickable area, which makes it more usable. I also like this approach because it makes the checkbox a more self-contained component that I can &lt;a href=&quot;https://www.sarasoueidan.com/blog/style-settings-with-css-variables/&quot;&gt;customize with CSS variables&lt;/a&gt; and use anywhere I need it.&lt;/p&gt;
&lt;p&gt;Since the checkbox is going to go inside the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;, the SVG will too.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c-checkbox&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c-custom-checkbox&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;checkbox&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c-checkbox&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;32&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;32&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;-4 -4 39 39&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-hidden&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;focusable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- The background --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;checkbox__bg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;35&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;35&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;-2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;-2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;currentColor&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;3&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;rx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;6&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;ry&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;6&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;rect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- The checkmark--&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;polyline&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;checkbox__checkmark&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;4,14 12,23 28,5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;transparent&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;4&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;polyline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;The checkbox label text&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The checkbox label now contains the label text, the checkbox itself, as well as the SVG image that will represent our checkbox visually. So, if you think about it, we’re technically going to style the &lt;em&gt;label&lt;/em&gt; — or a part of it.&lt;/p&gt;
&lt;p&gt;A couple of important things to note here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Since the SVG is going to replace the checkbox &lt;strong&gt;visually, it also needs to visually convey state&lt;/strong&gt; (checked, unchecked, disabled), &lt;strong&gt;as well as behavior&lt;/strong&gt; (focus in particular, and hover if you need that).&lt;/li&gt;
&lt;li&gt;The SVG is used to create &lt;em&gt;an image&lt;/em&gt; of a checkbox. &lt;strong&gt;The SVG image is not going to replace the checkbox semantically.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To address the first point, I placed the SVG image &lt;em&gt;after&lt;/em&gt; the checkbox in the DOM. This will allow me to use the siblings selector in CSS to select the SVG and style and animate it when the checkbox is focused and interacted with (checked and unchecked). We’ll do that in a later section.&lt;/p&gt;
&lt;p&gt;And since the image doesn’t replace the checkbox semantically, the checkbox needs to remain accessible. So when we hide it, we want to make sure we do so &lt;em&gt;accessibly&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;hiding-content-in-css-and-html&quot; tabindex=&quot;-1&quot;&gt;Hiding Content in CSS and HTML&lt;/h2&gt;
&lt;p&gt;There are several ways we can hide content in CSS and HTML, each with its own pros and cons. Knowing the upsides and downsides of each technique will help us choose the one we need when we need it.&lt;/p&gt;
&lt;h3 id=&quot;hiding-content-in-css&quot; tabindex=&quot;-1&quot;&gt;Hiding content in CSS&lt;/h3&gt;
&lt;p&gt;There are four properties in CSS that can be used to hide content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;display: none;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;visibility: hidden&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;opacity: 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;clip-path: inset(100%)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both &lt;code&gt;display: none&lt;/code&gt; and &lt;code&gt;visibility: hidden&lt;/code&gt; remove the element they hide from the DOM and &lt;a href=&quot;https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree&quot;&gt;accessibility tree&lt;/a&gt;, thus making them &lt;strong&gt;completely inaccessible&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Back in the days when we used to use background image sprites to style checkboxes and radio buttons, we used to use &lt;code&gt;display: none&lt;/code&gt; to hide the inputs, which removed them from the accessibility tree and therefore made them completely inaccessible to screen readers. &lt;strong&gt;You should never hide content using &lt;code&gt;display: none&lt;/code&gt; or &lt;code&gt;visibility: hidden&lt;/code&gt; if you want that content to remain accessible.&lt;/strong&gt; We &lt;em&gt;need&lt;/em&gt; our inputs to remain accessible to screen readers, so we not be using &lt;code&gt;display: none&lt;/code&gt; or &lt;code&gt;visibility: hidden&lt;/code&gt; anymore.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;It’s also worth mentioning that you shouldn’t rely on background images or background colors to replace essential content (such as inputs) because background images are not accessible to screen readers, not to mention that they are most likely going to be removed when your CSS isn’t applied in user-controlled environments (such as Windows High Contrast Mode) and reader modes.&lt;/small&gt;&lt;/p&gt;
&lt;h3 id=&quot;hiding-content-in-html&quot; tabindex=&quot;-1&quot;&gt;Hiding content in HTML&lt;/h3&gt;
&lt;p&gt;We can also hide content straight from the HTML using HTML attributes. There are two attributes we can use today: &lt;code&gt;hidden&lt;/code&gt; and &lt;code&gt;aria-hidden&lt;/code&gt;.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;The &lt;code&gt;hidden&lt;/code&gt; attribute &lt;/dt&gt;
&lt;dd&gt; &lt;ul&gt;&lt;li&gt;is the HTML equivalent of CSS’s &lt;code&gt;display: none&lt;/code&gt;,&lt;/li&gt;&lt;li&gt; it hides the element it is applied to both visually and from assistive technologies,&lt;/li&gt; &lt;li&gt; and is useful for hiding content when CSS is disabled (for example, in reader modes).&lt;/li&gt;&lt;/ul&gt;&lt;/dd&gt;
&lt;dt&gt;The &lt;code&gt;aria-hidden&lt;/code&gt; attribute&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;&lt;li&gt;determines whether an element is hidden from accessibility APIs (&lt;code&gt;aria-hidden=&#39;true&#39;&lt;/code&gt;) or not (&lt;code&gt;&#39;false&#39;&lt;/code&gt;);&lt;/li&gt;&lt;li&gt; is useful for hiding decorative or duplicative content (e.g. decorative icon next to text).&lt;/li&gt;&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr /&gt;
&lt;p&gt;In addition to the above, we can apply multiple CSS properties within a rule set to &lt;strong&gt;hide an element visually while keeping it screen-reader accessible.&lt;/strong&gt; An example of that would be providing text for assisitive technologies only that can’t be displayed visually. &lt;a href=&quot;https://www.sarasoueidan.com/blog/accessible-icon-buttons/&quot;&gt;Accessible icon buttons&lt;/a&gt; are a common and good example of that. Typically, the styles are applied using a utility class:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*******************************************************************************\&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; *                                                                             *&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; * Visually hide any element (mostly text) accessibly.                         *&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; * Support includes IE9+                                                       *&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; * Source: https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html   *&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; *                                                                             *&lt;/span&gt;&lt;br /&gt; *******************************************************************************/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.sr-only&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;clip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0 0 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;inset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;white-space&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nowrap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This utility class shrinks an element into a 1px square, hiding any overflow, and absolutely positioning the element to remove any trace of it from the normal document flow. This utility class is ideal for providing screen reader-only &lt;em&gt;text&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;After going over all of the above techniques, I always ask my talk and workshop attendees how they would hide a native checkbox while ensuring it remains screen reader-accessible. Since we want to make sure the checkbox remains screen-reader accessible, we rule out all of the rules that hide it from screen readers. This left us with the two most frequent answers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hide the checkbox using the &lt;code&gt;.sr-only&lt;/code&gt; class, because it seems like the perfect solution because it hides the checkboxes visually whilst keeping it accessible to screen readers, and this is what most articles online currently use.
&lt;br /&gt;&lt;br /&gt;and&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Move the checkbox off-canvas, hiding it outside of the viewport using absolute positioning. This, too, removes the checkbox from view but does not remove it from the accessibility tree.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is true that both of these techniques hide the checkbox visually and it will still be accessible by a screen reader, &lt;strong&gt;but neither of these techniques are inclusive of users navigating by touch.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;hiding-the-checkboxes-inclusively&quot; tabindex=&quot;-1&quot;&gt;Hiding the checkboxes inclusively&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Touch interface screen readers allow users to run their finger over the screen to hear what is directly underneath. This provides the user with a quick sense of an entire interface. — &lt;a href=&quot;https://material.io/design/usability/accessibility.html#understanding-accessibility&quot;&gt;Material Design Acessibility Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Screen readers on Android touch devices give users multiple ways to navigate a screen. One of these ways is &lt;a href=&quot;https://motorola-global-en-uk.custhelp.com/app/answers/indevice_detail/a_id/104169/p/30,6720,9299&quot;&gt;&lt;strong&gt;exploring by touch&lt;/strong&gt;&lt;/a&gt;. Rob Dodson has &lt;a href=&quot;https://www.youtube.com/watch?v=0Zpzl4EKCco&amp;amp;list=PLNYkxOF6rcICWx0C9LVWWVqvHlYJyqw7g&amp;amp;index=27&quot;&gt;a great screencast&lt;/a&gt; covering the basics of navigating a page using TalkBack on Android that I recommend watching for a live demo.&lt;/p&gt;
&lt;p&gt;Exploring by touch means that a mobile screen reader can explore pages on touch screens with haptics — they literally move their finger on the page looking for interactive elements.&lt;/p&gt;
&lt;p&gt;When you create a checkbox (or any other interactive element, for that matter), the user will expect to find that checkbox by touching the screen where they expect it to be. So the way you hide the checkbox determines whether touch screen reader users will be able to find it or not.&lt;/p&gt;
&lt;p&gt;As you can possibly imagine now, hiding the checkbox off canvas (outisde of the viewport area) will make it inaccessible to them, because they won’t find it within the viewport bounds as drag their finger around. Similarly, shrinking the checkbox to 1px will also make it very difficult to find and touch. So, &lt;strong&gt;while the &lt;code&gt;sr-only&lt;/code&gt; utility class is great for visually-hiding static content (e.g. text), it should not be used to hide interactive elements.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, how &lt;em&gt;do&lt;/em&gt; you hide a checkbox inclusively? The answer is: hide it visually but make sure it is still ‘physically’ present where it would naturally be present so that touch users can find it with haptics.&lt;/p&gt;
&lt;p&gt;Technically speaking this means:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;remove the checkbox from the page flow using &lt;code&gt;position: absolute&lt;/code&gt; so that it doesn’t take up any unwanted space (visually),&lt;/li&gt;
&lt;li&gt;position it (within the label) &lt;strong&gt;making sure it is positioned &lt;em&gt;on top&lt;/em&gt; of the image that is visually replacing it,&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;optional:&lt;/em&gt; set its dimensions to match those of the SVG,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;visually hide it by making it transparent&lt;/strong&gt; with &lt;code&gt;opacity: 0&lt;/code&gt;,&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is a video demo’ing the above steps.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;video class=&quot;video-gif&quot; controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/assets/videos/inclusive-checkbox.mp4&quot; width=&quot;auto&quot; style=&quot;width: 100%;&quot;&gt;
    Sorry, your browser doesn&#39;t support embedded videos.
    &lt;/video&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;small&gt;Note that I’ve already styled the SVG to convey state in this demo, which is what I’ll cover in the next section.&lt;/small&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;The CSS that handles the positioning and hiding of the checkbox looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-checkbox&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* create a postioning context for the checkbox within the label */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* other label styles here */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-checkbox input[type=&quot;checkbox&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* remove the checkbox from flow */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* hide it visually */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* tweak size and position if needed */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* position it within the label, on top of the SVG */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ...&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ...&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* sometimes you may need to add z-index */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ...&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the checkbox is technically still there where it should be, it is still interactive, it is fully accessible, but it is visually hidden so it can be replaced with a more styleable alternative: the SVG.&lt;/p&gt;
&lt;!-- _**Note** I’ve replaced the `0` opacity value with `0.0001` (basically a very small value that&#39;s almost zero but not quite) to make sure ChromeVox announces the checkbox because otherwise [it does not read content with `opacity: 0`](https://github.com/michalsnik/aos/issues/397). Hat tip to [Carolyn MacLeod](https://twitter.com/carmacleod) for the heads up and (once again to) my friend Scott for [his findings](https://scottaohara.github.io/a11y_styled_form_controls/src/checkbox/index.html)._ --&gt;
&lt;h2 id=&quot;styling-the-svg-accessibly&quot; tabindex=&quot;-1&quot;&gt;Styling the SVG accessibly&lt;/h2&gt;
&lt;p&gt;Since we’re hiding the native checkbox, we will need to substitute for the checked and unchecked states visually, as well as the focus styles.&lt;/p&gt;
&lt;p&gt;The SVG is placed right after the checkbox in the DOM, so we can select it using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator&quot;&gt;adjacent siblings selector&lt;/a&gt;, and style it based on the checkbox’s state. So when the checkbox receives focus, we display the focus outline on the SVG:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* visually show focus outline when the SVG receives focus */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-checkbox input[type=&quot;checkbox&quot;]:focus + svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    outline&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 3px solid #E55360&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    outline-offset&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* hide the focus styles for mouse users */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-checkbox input[type=&quot;checkbox&quot;]:focus:not(:focus-visible) + svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    outline&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The focus style can be anything you want, as long as it’s very clear and visually accessible. Similarly, you can add disabled state styles using the &lt;code&gt;:disabled&lt;/code&gt; seletor.&lt;/p&gt;
&lt;p&gt;To mimic checking/unchecking the checkbox in the SVG, we show/hide the checkmark inside it, and change the background color:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* basic styles for the svg */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-checkbox svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* set SVG dimensions in ems; i.e. relative to the font size so that it scales with the size of the text in the label */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* apply a transition to the elements inside the svg */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 0.1s linear&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* style changes inside the svg when the checkbox is checked */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-checkbox input[type=&quot;checkbox&quot;]:checked + svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;.checkbox__bg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--checked-state-bg-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--checked-state-bg-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;.checkbox__checkmark&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--checked-state-checkmark-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While you’re at it, you’ll want to take it further and optimize it for Windows High Contrast Mode:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-checkbox svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;-ms-high-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; active&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;.checkbox__bg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token property&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; windowText&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;-ms-high-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; active&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;.c-custom-checkbox input[type=&quot;checkbox&quot;]:checked + svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;.checkbox__bg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; windowText&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;.checkbox__checkmark&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token property&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; highlight&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the many benefits of using an inline SVG is that we have real elements (checkmark and square) with real borders (strokes) that we can flexibly style, so we don’t rely on background images and colors alone to create and convey state/behavior, because background images, colors, and effects like drop shadows are normally overridden in user-controlled environments. This is also why I normally recommend using a &lt;em&gt;real&lt;/em&gt; outline versus a fake outline created using &lt;code&gt;box-shadow&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And here is a live demo:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;600&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;39314a8271e0a7268ac79144393edb24&quot; data-user=&quot;SaraSoueidan&quot; style=&quot;height: 571px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
        &lt;span&gt;&lt;a href=&quot;https://codepen.io/SaraSoueidan/pen/39314a8271e0a7268ac79144393edb24&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
        &lt;/p&gt;
        &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;adding-delight-using-svg-animations&quot; tabindex=&quot;-1&quot;&gt;Adding delight using SVG animations&lt;/h2&gt;
&lt;p&gt;Using animated SVGs is one of my favorite ways of adding delight to otherwise boring user interfaces, particularly form controls. Checkboxes and radio buttons are a great example of controls that could benefit from more fun interactions. In 2013, Codrops published &lt;a href=&quot;https://tympanus.net/codrops/2013/10/15/animated-checkboxes-and-radio-buttons-with-svg/&quot;&gt;a collection of playful experiments&lt;/a&gt; using SVG path animations (a.k.a. &lt;a href=&quot;https://jakearchibald.com/2013/animated-line-drawing-svg/&quot;&gt;the line drawing technique&lt;/a&gt;) to create more delightful checkboxes and radio buttons. But the Codrops examples were merely a proof-of-concept for animation and were not optimized to be accessible. If you want to use such animations in your UIs today, you’ll want to make sure you hide the checkboxes using the technique presented in this article.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/codrops-animated-checkboxes.gif&quot; alt=&quot;a collection of animated checkboxes and radio buttons found on codrops&quot; /&gt;
&lt;p&gt;Here is a quick proof of concept of an accessible animated checkbox:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;600&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;Jowwde&quot; data-user=&quot;SaraSoueidan&quot; style=&quot;height: 571px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
        &lt;span&gt;&lt;a href=&quot;https://codepen.io/SaraSoueidan/pen/Jowwde&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
        &lt;/p&gt;
        &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;wrap-up&quot; tabindex=&quot;-1&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;There are several ways to hide an element in CSS and HTML. You can hide an element both visually and from screen readers, only visually, or only from screen readers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When you hide an interactive element, make sure you choose a hiding technique that keeps it screen reader-accessible, position it &lt;em&gt;on top&lt;/em&gt; of whatever is visually replacing it so that a user navigating by touch can find it where they expect to, and then make it transparent.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;references-and-recommended-reading&quot; tabindex=&quot;-1&quot;&gt;References and Recommended Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html&quot;&gt;Inclusively Hidden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://24ways.org/2018/inclusive-considerations-when-restyling-form-controls/&quot;&gt;Inclusive Considerations When Restyling Form Controls&lt;/a&gt; + &lt;a href=&quot;https://scottaohara.github.io/a11y_styled_form_controls/src/checkbox/index.html&quot;&gt;more by Scott O’hara&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Optimizing keyboard navigation using tabindex and ARIA</title>
    <link href="https://sarasoueidan.com/blog/keyboard-friendlier-article-listings/"/>
    <updated>2020-06-09T17:01:45Z</updated>
    <id>https://sarasoueidan.com/blog/keyboard-friendlier-article-listings/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
The faster the user can navigate your UI the better. The faster they can get to the content they need, the better. Therefore, the less steps they have to go through, the more efficient their overall experience with the UI will be. And this applies to keyboard tabbing, too: the less tabs the user needs to stop at while navigating, the faster they are to get to where they need. The way we mark up our content has a direct effect on the user’s experience. But we can drastically improve the UX by specifically optimizing the markup for keyboard users. 
&lt;/p&gt;
&lt;h2 id=&quot;clicks.-taps.-tabs.-steps.&quot; tabindex=&quot;-1&quot;&gt;Clicks. Taps. Tabs. Steps.&lt;/h2&gt;
&lt;p&gt;If there’s one thing working with UX designers has taught me it’s that the less steps the user needs to go through their journey, the better. As such, they usually design experiences by making sure fewer clicks are needed to get the user to the end of their journey.
As a design engineer, when talking about “steps” and “clicks”, my brain can’t help but think of taps and tabs, too. Because a user could be interacting with the UI in several ways, not just using a mouse. Taps are practically touch equivalents of clicks, so I assume the experience would be as optimized for those as it is for non-touch. But the experience for keyboard users is usually a more than a little different.&lt;/p&gt;
&lt;p&gt;As a design engineer, my job is to weigh in and provide consultancy and recommendations to make sure the UI design works for users in different contexts. This means that I provide feedback to make sure keyboard user experiences, among others, are also considered. Designs are often tweaked if and when needed based on our UX discussions. But often times, us developers can make optimizations and improvements to accessibility and UX that don’t require design discussions and/or permissions. And when we can, we should.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A user navigating and interacting with a UI using a mouse can usually move across the page with little effort — they literally move the cursor to where they want to. The mouse cursor ”hovers” &lt;em&gt;above&lt;/em&gt; a page, so to speak. Unless you use a design anti-pattern, there are rarely any obstacles in their way, because most designs are usually optimized for their interactions. It doesn’t matter how many links there are on the page, they can go straight to the link they want, click it, and move on.&lt;/p&gt;
&lt;p&gt;A keyboard user, on the other hand, can’t go anywhere without going through a series of tab stops that &lt;em&gt;you&lt;/em&gt; set for them. If they were a person standing infront of stairs, a keyboard user needs to walk up the stairs to get to their destination (compared to a mouse user who wears a pair of magical flying shoes or uses a Hoverboard to &lt;em&gt;fly&lt;/em&gt; up the stairs 😅). The more steps the stairs have, the more steps they need to climb, the longer their journey, and the more cumbersome it can be. There are no shortcuts to go where they want to more quickly and efficiently… &lt;em&gt;unless&lt;/em&gt; you &lt;em&gt;provide&lt;/em&gt; them with shortcuts. I’ll elaborate on that in another post. In this post, I want to talk about markup and how it can sometimes be optimized for more efficient keyboard navigation. As an example, I want to talk about article listings.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Blogs, online magazines and other publications will normally display lists of articles or posts. Browsing such publications, often you’ll notice a familiar pattern in most of those listings: a post entry has a typical anatomy normally consisting of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a thumbnail,&lt;/li&gt;
&lt;li&gt;a post title,&lt;/li&gt;
&lt;li&gt;author name,&lt;/li&gt;
&lt;li&gt;post tags,&lt;/li&gt;
&lt;li&gt;an excerpt or description,&lt;/li&gt;
&lt;li&gt;and a “read more” link,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;give or take one or more elements. So the post may include all of the above elements minus the thumbnail, for example. Or it might be composed of a thumbnail, a title, and a description only. It could also include a link to the comments section on the full article page. And so on.&lt;/p&gt;
&lt;p&gt;Typically, the thumbnail, post title and Read More link all link to the same page: the full article page, while the author name and list of tags post to their corresponding pages. If you’re a sighted mouse user and you want to read the full post, you click on either the thumnail, the title, or the Read More link to get there. You may even be able to click on the whole post &lt;a href=&quot;https://www.sarasoueidan.com/blog/nested-links/&quot;&gt;if it is marked up for it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But how does this post anatomy affect a keyboard user?&lt;/p&gt;
&lt;h2 id=&quot;navigating-a-list-of-posts-with-a-keyboard&quot; tabindex=&quot;-1&quot;&gt;Navigating a list of posts with a keyboard&lt;/h2&gt;
&lt;p&gt;If you use a keyboard to navigate a page containing a typical list of posts, you’ll notice that you sometimes need to tab through the same link two or three times in a row. To demonstrate, I recorded the exeprience of tabbing through the &lt;a href=&quot;https://www.nytimes.com/&quot;&gt;New York Times&lt;/a&gt;, &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt;, and &lt;a href=&quot;https://forbes.com/&quot;&gt;Forbes&lt;/a&gt; homepages:&lt;/p&gt;
&lt;figure class=&quot;video wide&quot;&gt;&lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/assets/videos/forbes.mp4&quot; width=&quot;auto&quot; style=&quot;width: 100%;&quot;&gt;
Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;figcaption&gt;Posts on the Forbes homepage contain three links per post: the the thumbnail, the post title, and an icon-only version of a “Read More” link. Clicking on any of these links takes the user to the full article page corresponding to this post. So, &lt;strong&gt;a user navigating using keyboard practically needs to tab through the same link three times in a row&lt;/strong&gt; to continue navigating to the next post and whatever content comes after. The more posts there are, the longer the tabbing journey will be.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;video wide&quot;&gt;&lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/assets/videos/nyt.mp4&quot; width=&quot;auto&quot; style=&quot;width: 100%;&quot;&gt;
Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;figcaption&gt;The New York Times homepage features a list of posts, each containing two focusable elements / links: a thumbnail, and a link that includes the text for both the title and post description. &lt;strong&gt;Both of these links take the user to the full article page.&lt;/strong&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class=&quot;video wide&quot;&gt;&lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/assets/videos/medium.mp4&quot; width=&quot;auto&quot; style=&quot;width: 100%;&quot;&gt;
Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;figcaption&gt;On the Medium homepage, each post is made up of five links, three of which link to the full article page: the post thumbnail, the title, and the post description. Tabbing through these posts means the user needs to tab through the same link three times in a row.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you use a keyboard a lot, you’ll probably start to notice how redundant it is to tab through the same link multiple times in a row. If you’re wanting to get to a section that comes after the article listings on that page, you’ll need to tab quite a lot before you get there.&lt;/p&gt;
&lt;p&gt;When a list of posts is designed like with such a structure in mind, it is usually optimized for &lt;strong&gt;a sighted mouse/touch user&lt;/strong&gt;. Such a user would have a generous collection of elements to click or tap, all leading to the same page that they probably eventually want to visit.&lt;/p&gt;
&lt;p&gt;But this design is not optimized for keyboard users. When a keyboard user needs to tab through the same link two or three times in a row they are &lt;em&gt;slowed down&lt;/em&gt; because their journey becomes literally 200% or 300% longer than it could/should be.&lt;/p&gt;
&lt;p&gt;Depending on the post structure and anatomy, we can sometimes drastically improve the keyboard user experience with very little dev effort.&lt;/p&gt;
&lt;h2 id=&quot;optimizing-keyboard-navigation-using-tabindex-and-aria-hidden&quot; tabindex=&quot;-1&quot;&gt;Optimizing keyboard navigation using &lt;code&gt;tabindex&lt;/code&gt; and &lt;code&gt;aria-hidden&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Last Fall, I had the opportunity to work on an upcoming redesign of an online publication. I was hired to build a brand new front-end foundation for the design. I put a lot of emphasis on making sure the new design is implemented as accessibly and inclusively as possible. So, naturally, I wanted to make sure the experience is optimized for keyboard users as well.&lt;/p&gt;
&lt;p&gt;Being an online publication, it contains hundreds of articles, and those articles are displayed as a list of posts on the homepage and other pages of the site.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/post-list.png&quot; alt=&quot;A screenshot of three blog post entries with a structure similar to the one mentioned earlier.&quot; /&gt;
    &lt;figcaption&gt;There were more than a dozen article entries on the publication’s homepage. Each entry consisted of an image thumbnail (mostly decorational), a title, an author name, a description (without links), and a Read More link. This means that each entry contained three links to the full article page, and one link to the author’s page.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the process of testing a component at the bottom of the homepage for accessibility, I realized that tabbing through the page to get to that component took longer than I would like it to, due to the large number of post entries on the page. Sure, this tabbing experience is the typical experience on any and all similar Web sites I’ve ever visited. But &lt;strong&gt;just because it is the typical experience, doesn’t mean it can’t be improved upon.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After a long discussion about usability and accessibility, I made a small addition to the markup that improves keyboard navigation &lt;strong&gt;by reducing the number of tabbable links&lt;/strong&gt;. &lt;strong&gt;The number of links does not change; the tabbability of a link does.&lt;/strong&gt; This means that a user navigating using a keyboard would only tab through one link to the full article page in each post instead of three, thus making the keyboard experience faster and more efficient overall.&lt;/p&gt;
&lt;p&gt;The implementation is simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prevent a link from being tabbed by using &lt;code&gt;tabindex = &amp;quot;-1&amp;quot;&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;hide said link from screen readers using &lt;code&gt;aria-hidden = &amp;quot;true&amp;quot;&lt;/code&gt;, because you don’t want a screen reader to expose a link the user won’t be able to interact with.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I applied this to the thumbnail images because they are not used to convey any particularly relevant information in an entry (they are more like decorational cover photos), and to the Read More links. Only the post title remains tabbable, as well as the link to the author page. So instead of having four tab stops in each entry, a user now has two. Thus tabbing through the long list of posts is going to be two times faster than what a typical experience would have been.&lt;/p&gt;
&lt;p&gt;The markup for each article entry looked something like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post ...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/path/to/full-article/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post__thumb&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-hidden&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;tabindex&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;-1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- img thumbnail... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post__content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/path/to/full-article/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post__title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;h3&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Inspirational Website of the Week: Dean Bradshaw&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post__excerpt&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;       &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/path/to/full-article/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post__more-link&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-hidden&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;tabindex&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;-1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-hidden&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;focusable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;16&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;7&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 16 7&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following are two live codepens that you can tab through using a keyboard to see the difference between the typical default experience and the experience with the skipped links:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;1000&quot; data-theme-id=&quot;3617&quot; data-default-tab=&quot;result&quot; data-user=&quot;SaraSoueidan&quot; data-slug-hash=&quot;fff7257ab01a4627c02b500cb9b2db21&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Demo for blog post: Optimizing keyboard navigation using tabindex and ARIA&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/SaraSoueidan/pen/fff7257ab01a4627c02b500cb9b2db21&quot;&gt;
  Demo for blog post: Optimizing keyboard navigation using tabindex and ARIA&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;https://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;1000&quot; data-theme-id=&quot;3617&quot; data-default-tab=&quot;result&quot; data-user=&quot;SaraSoueidan&quot; data-slug-hash=&quot;7ed44ee6163a42500e2928b0cbe5c2cc&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Demo for blog post: Optimizing keyboard navigation using tabindex and ARIA&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/SaraSoueidan/pen/7ed44ee6163a42500e2928b0cbe5c2cc&quot;&gt;
  Demo for blog post: Optimizing keyboard navigation using tabindex and ARIA&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;https://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;one-size-does-not-fit-all.&quot; tabindex=&quot;-1&quot;&gt;One size does &lt;em&gt;not&lt;/em&gt; fit all.&lt;/h2&gt;
&lt;p&gt;Not all article listings are equal. In the examples above, there weren’t many links between each of the consecutive full article page links. In each of the examples, the post’s excerpt is short and does not contain any links, and there are no lists of tags following the post title and separating the title from the Read More link.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Depending on how you set up your CMS or SSG to generate excerpts, they could be generated as plain text or full markup. For example, on this blog, the excerpts are generated as plain text, so they don’t contain any links. On codrops, the excerpts aren’t really excerpts — they are custom descriptions of an article, so, by design, they also don’t contain any links. But not all post excerpts or descriptions come without links.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;When there &lt;em&gt;are&lt;/em&gt; &lt;em&gt;several&lt;/em&gt; links between the title and the Read More link, it becomes &lt;em&gt;important&lt;/em&gt; for the user to be able to use the Read More link. To demonstrate, I recorded the process of tabbing through &lt;a href=&quot;https://lea.verou.me/&quot;&gt;Lea Verou’s Web site&lt;/a&gt;, where she shows a longer post excerpt per entry and containing quite a few links in some cases.&lt;/p&gt;
&lt;figure class=&quot;video wide&quot;&gt;&lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/assets/videos/lea-verou.mp4&quot; width=&quot;auto&quot; style=&quot;width: 100%;&quot;&gt;
Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;
&lt;figcaption&gt;Tabbing through a post entry on Lea Verou’s Web site. If the Continue Reading link were not there on Lea’s post, a keyboard user would need to tab all the way back to the title to visit the full article page. In such a case, a Read More link does provide value and should not be deactivated.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Because there are quite a few links after the post title in each entry, the &lt;em&gt;Continue Reading&lt;/em&gt; link in Lea’s posts is essential for the keyboard experience. The link is a shortcut to the full article’s page now; had it not been there, or had it been skipped, the user would need to tab all the way back up to the post title to visit the full article, which would have been nonsensical. This is an example of when you do &lt;em&gt;not&lt;/em&gt; want to use &lt;code&gt;tabindex&lt;/code&gt; and ARIA to skip over a link because it would &lt;em&gt;worsen&lt;/em&gt; the user experience.&lt;/p&gt;
&lt;p&gt;A few years back, I took a different approach to implementing post entries when I built &lt;a href=&quot;https://smashingmagazine.com/&quot;&gt;Smashing Magazine&lt;/a&gt;’s front-end foundation. The posts were designed to be “cards”, and cards come with their own implementation considerations that I documented in my &lt;a href=&quot;https://www.sarasoueidan.com/blog/nested-links/&quot;&gt;previous post about nested links&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Each design comes with its own usability considerations that need to be taken into account. In order to improve an experience, you need test the design using a keyboard, and with real users if possible — they can usually provide a lot of insight that we designers/developers might miss.&lt;/p&gt;
&lt;h2 id=&quot;to-sum-up%3A&quot; tabindex=&quot;-1&quot;&gt;To sum up:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Not all your users use a mouse to navigate your pages.&lt;/li&gt;
&lt;li&gt;The way you mark up your elements has a direct effect on how people interact with them.&lt;/li&gt;
&lt;li&gt;Links are focusable by default, but it might make sense to skip certain links &lt;em&gt;if the design and user experience allows it&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;A good rule of thumb for similar cases is that &lt;strong&gt;if you have multiple consecutive links to the same page, there is probably a chance to improve keyboard navigation by skipping some of those links to reduce the number of tab stops to one.&lt;/strong&gt; The less tab stops, the better, as long as it does not worsen or compromise on other aspects of usability.&lt;/li&gt;
&lt;li&gt;There is no one rule fits all. One approach might work for a design but not for another.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And, once again: each design comes with its own challenges and considerations. Take those into account, weigh your options, test with real users, use a keyboard, and make optimizations when and where appropriate. &lt;strong&gt;At the end of the day, it should always be about the &lt;em&gt;user&lt;/em&gt; experience.&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Global and Component Style Settings with CSS Variables</title>
    <link href="https://sarasoueidan.com/blog/style-settings-with-css-variables/"/>
    <updated>2020-06-01T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/style-settings-with-css-variables/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;Ever since I learned about CSS Variables a few years back, my absolute favorite feature has been the ability to scope variables to components. But to be honest, I haven&#39;t been putting this feature to much use over the years, &lt;em&gt;until&lt;/em&gt; I created my own pattern library last year to speed up prototyping and client work. That’s where scoped CSS variables really shined for me. So I want to share my favorite two ways to use CSS Variables to organize and maintain styles in my projects today.&lt;/p&gt;
&lt;p&gt;Over the last few months, I’ve started approaching the way I organize and manage my CSS differently…&lt;/p&gt;
&lt;h2 id=&quot;global-project-settings&quot; tabindex=&quot;-1&quot;&gt;Global Project Settings&lt;/h2&gt;
&lt;p&gt;Today, at the beginning of each project, I create a &lt;code&gt;_settings.scss&lt;/code&gt; stylesheet. This stylesheet contains the &lt;em&gt;global settings&lt;/em&gt; for the project. These settings are usually derived from the design style guide provided by the design team I’d be working with.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/style-guide-settings.png&quot; alt=&quot;partial screenshot of a style guide showing values for color swatches and box shadow styles&quot; /&gt;
&lt;figcaption&gt;An example of visual settings defined in a style guide for my current client project. The style guide contains color swatches, brand colors, interaction and UI colors, font styles, type scales, spacing scales, icons, etc. I used the style guide as a starting point in my CSS, as I created and defined the global project styles by deriving their values from their visual equivalents in the style guide.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Just like the style guide contains settings for visual styles like colors, box shadow styles, font styles, type scales, etc., the &lt;code&gt;_settings&lt;/code&gt; stylesheet contains variables that serve as the code equivalent of those settings, and that are used across the CSS to maintain visual consistency across the project.&lt;/p&gt;
&lt;figure&gt;
```css 
:root {
    /* UI Colors */
    --primary-hue: 12;
    --color--primary: hsl(var(--primary-hue), 100%, 44%);
    --color--primary--hover: hsl(var(--primary-hue), 100%, 39%);
    --color--primary--active: hsl(var(--primary-hue), 84%, 30%);
&lt;p&gt;/* … */&lt;/p&gt;
&lt;p&gt;–border-color: #ebebeb;&lt;/p&gt;
&lt;p&gt;/* Box Shadows */
–shadow-01: 0px 2px 4px rgba(37, 37, 37, 0.1);
–shadow-02: 0px 4px 8px rgba(37, 37, 37, 0.1);
–shadow-03: 0px 8px 16px rgba(37, 37, 37, 0.1);
–shadow-04: 0px 16px 24px rgba(37, 37, 37, 0.1);
–shadow-05: 0px 24px 32px rgba(37, 37, 37, 0.1);&lt;/p&gt;
&lt;p&gt;/* … */&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;figcaption&amp;gt;An example of global style settings defined in a &amp;lt;code&amp;gt;_settings.scss&amp;lt;/code&amp;gt; style sheet in my current client project.&amp;lt;/figcaption&amp;gt;
&amp;lt;/figure&amp;gt;


```css 
.card {
    /* ... */

    box-shadow: var(--shadow-01);
    border: 1px solid var(--border-color);

    transition: box-shadow .2s linear;

    &amp;amp;:hover, 
    &amp;amp;:focus {
        box-shadow: var(--shadow-03);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If at any point during the project any of those settings need to change, I know exactly where to go make that change, and I know it will propagate consistently throughout my entire system.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In addition to these settings, I’ve been finding the most value and convenience in using CSS variables to define local, component-scoped styles…&lt;/p&gt;
&lt;h2 id=&quot;quicker-prototyping-with-%E2%80%9Cskeleton%E2%80%9D-components&quot; tabindex=&quot;-1&quot;&gt;Quicker Prototyping with “Skeleton” Components&lt;/h2&gt;
&lt;p&gt;Over the years, and in the interest of saving myself time and speeding up prototyping ideas and client work, I’ve created a library of UI and design patterns that I find myself needing to recreate on most of my projects. The library now contains a growing collection of easily reusable UI patterns that I can reliably copy-paste into my projects when I need them. Each pattern is progressively enhanced using modern CSS and JavaScript, and is cross-browser and cross-platform accessible from the ground up.&lt;/p&gt;
&lt;p&gt;Since I created the library as an ‘internal’ project, it currently lives in a private Github repository, and behind a password on the &lt;code&gt;.dev&lt;/code&gt; domain of my site.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/skeleton.png&quot; alt=&quot;screenshot of the Skeleton component library&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;I named the library ‘Skeleton’, and I built it with &lt;a href=&quot;https://fractal.build/&quot;&gt;Fractal&lt;/a&gt;. I’ve been using Fractal for a couple of years now. I chose it over other pattern library tools because it fit my needs perfectly — I wanted a tool that was unopinionated and flexible enough to allow me to set up and structure my project the way I wanted to. Fractal fit the description perfectly because it is agnostic as to the way I develop or the tools I use. And I was further sold on it after reading about &lt;a href=&quot;https://www.smashingmagazine.com/2018/07/pattern-library-first-css/&quot;&gt;how Rachel Andrew uses it to manage CSS&lt;/a&gt; using a pattern-first approach, which was &lt;em&gt;exactly&lt;/em&gt; what I was going for. I particularly love that &lt;q&gt;components can be nested into folders to make it easier to locate particular components, and how you structure the folders is completely up to you.&lt;/q&gt;&lt;/p&gt;
&lt;p&gt;I organize my patterns so that each pattern lives in its own directory, containing the component’s HTML template, CSS, and vanilla JavaScript files, along with any additional Fractal-specific assets (such as config files).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/skeleton-folder-structure.png&quot; alt=&quot;partial screenshot of the folder structure in my component library&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Using this structure, each of my patterns is self-contained. And I can include and concatenate the pattern’s styles and scripts in my projects as I need.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;accordion&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;modal&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To quote Tyler Sticka in &lt;a href=&quot;https://cloudfour.com/thinks/tips-for-portable-patterns/&quot;&gt;“Tips for Portable Patterns”&lt;/a&gt;: &lt;q&gt;Patterns, like songs, are easier to remix when each master track is separated.&lt;/q&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;My goal from creating this library is to create a tool that allows me to prototype faster, and that’s flexible and efficient enough to use across different projects. And since patterns are usually styled differently across my projects, I wanted a way to simplify the process of customizing or “configuring” them for each project. Enter CSS Variables.&lt;/p&gt;
&lt;h2 id=&quot;scoped-component-settings&quot; tabindex=&quot;-1&quot;&gt;Scoped Component Settings&lt;/h2&gt;
&lt;p&gt;Because I don’t want to spend a lot of time overriding and undoing styles when I use a pattern in a new project, I created this library with the components having little to no styling by default — mostly white (no colors), minimal spacing, and only borders where visually appropriate. So the patterns literally look like skeletons of sort, hence the name. Now when I need to use one of these components, I have little CSS to override before they’re ready to be plugged into the new project.&lt;/p&gt;
&lt;p&gt;For each pattern, I’ve found myself modifying the same properties whenever I needed to use it — like the font, colors (text, background, border), box shadow, spacing, etc. So I figured it would be useful and time-saving if I created variables for those properties, define those variables in the ‘root’ of the component, and ‘pass in’ the values for these variables when I use the pattern as I need. This way I can customize or theme the component by changing the property values in one rule set, instead of having to jump between multiple ones to do so.&lt;/p&gt;
&lt;p&gt;I use variables to abstract all styles that I usually need to override. So every property that changes across projects is usually “promoted” into a variable. Then, if, at any point during the project, I need to tweak a pattern’s style(s), I know exactly where to do it. This makes the styles for each pattern more readable and more maintainable, which is even more important for when someone else needs to modify the CSS.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;This approach works quite well with my approach to organizing my CSS files. I like to organize my CSS into separate style sheets per patterns, that includes all the pattern’s styles and responsive behavior. There will be exceptions to this rule... for example, styles for “atoms” (like buttons, input fields, etc.) that are re-used across patterns are defined in one style sheet. And even then, when an atom’s styling gets a little complex (e.g. styling a custom file upload input), I may create a separate style sheet for that. I’ll go into a little more detail about the way I organize my CSS in another article.
&lt;/p&gt;
&lt;h3 id=&quot;example&quot; tabindex=&quot;-1&quot;&gt;Example&lt;/h3&gt;
&lt;p&gt;Like most of you, I find myself creating a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element in almost all of my projects. As of last year, I use &lt;a href=&quot;https://www.filamentgroup.com/lab/select-css.html&quot;&gt;Scott Jehl’s cross-browser styling technique&lt;/a&gt;. I find that I mostly need to change the icon, border color, border radius, and background color the most. In every project, I also set a focus outline for interactive elements. The outline color also varies across projects.&lt;/p&gt;
&lt;p&gt;So, I promoted these properties into variables. For each property, I set a default or empty value and change that value when I use the component in a new project as I need.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-select&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--icon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string url&quot;&gt;&quot;data:image/svg+xml;charset=US-ASCII,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2232%22%20height%3D%2232%22%20viewBox%3D%220%200%2032%2032%22%3E%0A%3Cpath%20fill%3D%22%23777%22%20d%3D%22M9.914%2011.086l-2.829%202.829%208.914%208.914%208.914-8.914-2.828-2.828-6.086%206.086z%22%3E%3C%2Fpath%3E%0A%3C%2Fsvg%3E%0A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--icon--disabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--border-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; currentColor&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--border-color--disabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--color--disabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--gradient-background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;linear-gradient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;to bottom&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #ffffff 0%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #e5e5e5 100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--outline-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;265&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .5em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I like to think of this rule set as a settings object for the component. It makes theming the component faster by passing in the values you want.&lt;/p&gt;
&lt;p&gt;The rest of the rule sets for the select component contain fixed rules or styles that most likely won’t change across projects:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-moz-appearance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-appearance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;appearance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;box-sizing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; border-box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--padding&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;padding-right&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--padding&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; * 3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inherit&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inherit&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1.3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--border-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--border-radius&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--background-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--icon&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--gradient-background&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-repeat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; no-repeat&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; repeat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; right &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--padding&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; * 1.5&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; top 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em auto&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-select::-ms-expand&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-select:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 0 3px &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--outline-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 0 3px -moz-mac-focusring&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-select:focus:not(:focus-visible)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-select:disabled, .c-custom-select[aria-disabled=true]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--color--disabled&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--icon--disabled&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	  &lt;span class=&quot;token function&quot;&gt;linear-gradient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;to bottom&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #ffffff 0%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;#e5e5e5 100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.c-custom-select:disabled:hover, .c-custom-select[aria-disabled=true]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;border-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--border-color--disabled&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;moving-forward&quot; tabindex=&quot;-1&quot;&gt;Moving Forward&lt;/h2&gt;
&lt;p&gt;As much as I’d love to do this in all of my projects, unfortunately I can only use this approach to styling and managing component CSS in my own projects at the time being. The reason for that is that most of my clients still need to support at least one or two versions of IE, which have no support for CSS Variables. And while there is &lt;a href=&quot;https://github.com/aaronbarker/css-variables-polyfill&quot;&gt;a polyfill&lt;/a&gt; for CSS Variables, the polyfill only provides support for variables defined on the root HTML element. Depending on the level of support and optimization we need for the IEs, I currently reach for the polyfill and use CSS Variables at least for defining global project styles.&lt;/p&gt;
&lt;p&gt;I see myself using this approach to style management in the future in combination with &lt;a href=&quot;https://www.webcomponents.org/&quot;&gt;Web Components&lt;/a&gt; to create overall more portable patterns. And hopefully, some time in the future we’ll have container queries to make these components &lt;em&gt;truly&lt;/em&gt; self-contained.&lt;/p&gt;
&lt;p&gt;As for &lt;strong&gt;&lt;em&gt;Skeleton&lt;/em&gt;&lt;/strong&gt;, it still has a long way to go. My goal is to create a custom Fractal theme to go with it. I haven’t yet found a good and complete guide on how to do this, especially since I’m looking to create a theme from scratch so I have full control over its styles. If you know me, you know I’ll probably write that guide once I figure out how to create a theme from scratch.&lt;/p&gt;
&lt;p&gt;I’m also constantly working on adding more patterns and variations of patterns. And I plan on including a Snippets section which includes code snippets I also frequently use in projects, such as JavaScript patterns and functions. And of course, I want to go heavy on documentation, including adding posts about best practices such as perf optimization techniques, icon and images best practices, etc., and I’ve already started drafting most of these ideas.&lt;/p&gt;
&lt;p&gt;I may or may not turn the library into a shareable product at some point in the future. But this is not something on its roadmap at the moment. For now, I like the idea of this being a small personal project with no strings attached. That said, I would love to publish the library as an npm package (for private use to start). I’m not familiar with how to do this yet. But I found &lt;a href=&quot;https://cloudfour.com/thinks/how-to-distribute-a-pattern-library-as-an-npm-package-from-a-private-git-repo/&quot;&gt;an article on CloudFour&lt;/a&gt; that dives into doing this exact thing, so that will probably be my starting point. And I will definitely document my process as I figure my way around doing it.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;update%3A-june-8th-2020&quot; tabindex=&quot;-1&quot;&gt;Update: June 8th 2020&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Heads up:&lt;/strong&gt; using scoped CSS variables also has performance benefits because setting &amp;amp; modifying variables defined on a global scope can be expensive &amp;amp; have performance pitfalls due to large amounts of style recalculations. Lisi Linhart has &lt;a href=&quot;https://lisilinhart.info/posts/css-variables-performance&quot;&gt;an excellent writeup&lt;/a&gt; about the performance of CSS variables as well recommendations to avoid any performance hits.&lt;/p&gt;
&lt;/figure&gt;</content>
  </entry>
  
  <entry>
    <title>What a Year of Learning and Teaching Accessibility Taught Me</title>
    <link href="https://sarasoueidan.com/blog/what-accessibility-taught-me/"/>
    <updated>2019-12-25T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/what-accessibility-taught-me/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
    &lt;small&gt;&lt;em&gt;(This article was originally published on &lt;a href=&quot;https://sarasoueidan.com/blog/what-accessibility-taught-me/&quot;&gt;24accessibility&lt;/a&gt;)&lt;/em&gt;&lt;/small&gt;.
    &lt;br /&gt;
    &lt;br /&gt;
    A few years ago I didn&#39;t know what the term &quot;accessibility&quot; meant. I built Web sites that were partially inaccessible &lt;strong&gt;because I didn&#39;t know better&lt;/strong&gt;. Fast forward to today, I know enough to be able to &lt;a href=&quot;https://sarasoueidan.com/blog/&quot;&gt;write, &lt;a href=&quot;https://sarasoueidan.com/speaking/&quot;&gt;speak and run workshops&lt;/a&gt; on accessibility, helping others build more a accessible and inclusive Web. Much like everyone else in our field, I am still learning. But since I started, I learned a lot of valuable lessons and core values that drive my work today. Here are a few of them.
&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;semantic-html-is-the-foundation-of-a-truly-accessible-web.&quot; tabindex=&quot;-1&quot;&gt;Semantic HTML is the foundation of a truly accessible Web.&lt;/h3&gt;
&lt;p&gt;Semantic HTML is the universal language that all devices accessing the internet understand. It is the language you use to communicate your content to these various devices, including but not limited to browsers, reading apps, screen readers, smart watches, and more.&lt;/p&gt;
&lt;p&gt;HTML is semantic, or in other words, it is descriptive and provides meaning — each HTML element describes the type of content it presents. So if you have a heading, you use a heading element. If you have a paragraph, you use a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag. In other words, it means using the correct HTML elements for their correct purpose.&lt;/p&gt;
&lt;p&gt;By using correct elements, your document content will have conveyable &lt;strong&gt;structure&lt;/strong&gt; and &lt;strong&gt;meaning&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Structure is important because it helps interoperability. Interoperability is the ability of different systems, devices, applications or products to connect and communicate in a coordinated way, without effort from the end user. In other words, it allows more devices to interpret and access your content, including devices that will show up in the future.&lt;/p&gt;
&lt;p&gt;Structure helps applications like reading apps and reader modes (such as Safari’s reader mode) as well as environments like Windows High Contrast Mode understand your content and style it in ways that improve the user experience. This is only possible when the proper HTML semantic elements are used, such as &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;, among &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot;&gt;many others available in HTML5&lt;/a&gt;. These elements describe the type of content they contain. Without them, these applications wouldn’t be able to tell what that content is, and therefore won’t be able to style it properly. This increases the risk of making the content less accessible, if not completely inaccessible.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/semantics-and-reader-modes.png&quot; alt=&quot;Mobile screenshots of a Web page in the Instapaper app.&quot; /&gt;
	&lt;figcaption&gt;A Web page by Mandy Michael demonstrating how an article is styled in the app Instapaper when that article is marked up using semanticless divs (left) and semantic HTML elements (right). (&lt;a href=&quot;https://medium.com/@mandy.michael/building-websites-for-safari-reader-mode-and-other-reading-apps-1562913c86c9&quot;&gt;Source&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Structure is also important because it allows your users to navigate your content more efficiently. Screen reader users rely on proper document structure to jump to areas of the page they need more quickly. They do that using various quick/hot keys — power commands but for screen reader users. If you don’t use proper landmarks (exposed to screen readers via semantic HTML elements like &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;), screen reader users may not be able to efficiently navigate the page and would have to search for their areas of interest more tediously.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/rotor-landmarks.png&quot; alt=&quot;Screenshot of macOS&#39;s VoiceOver rotor open on sarasoueidan.com&quot; /&gt;
	&lt;figcaption&gt;VoiceOver’s rotor menu exposes all landmarks available on a Web page, allowing the user to easily jump to the part of the page they need.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Headings also provide an outline or “skeleton” of the page that users can navigate using hot keys, and which is similar to the visual hierarchy sighted users get from viewing your page. We This is why using appropriate heading levels, regardless of what the heading size looks like. (Note that while we can style headings to look differently where needed, visual consistency is just as important.)&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/rotor-headings.png&quot; alt=&quot;Screenshot of macOS&#39;s VoiceOver rotor open on sarasoueidan.com&quot; /&gt;
	&lt;figcaption&gt;VoiceOver’s rotor menu exposes all headings available on a Web page, allowing the user to navigate the page more efficiently.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Semantics also convey purpose. HTML elements, as Jeremy Keith puts it in &lt;a href=&quot;https://resilientwebdesign.com/&quot;&gt;his Web book “Resilient Web Design”&lt;/a&gt; &lt;q&gt;are a vocabulary of meaning&lt;/q&gt;. When you use the proper HTML elements everywhere, it allows different apps and devices to convey your content’s meaning to the user so that they know what to expect of it and how to interact with it.&lt;/p&gt;
&lt;p&gt;For example, when you use &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; to create a button, a screen reader exposes that button as what it is, and the user knows that they can do a specific action using that button (usually specified using the button’s accessible name) by either pressing the SPACE key or the ENTER key. The native &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element comes with all the functionality and accessibility built into it by default.&lt;/p&gt;
&lt;p&gt;But if you &lt;em&gt;don’t&lt;/em&gt; use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; to create a button, and you choose to use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, for example, instead, you lose all the built-in semantics and keyboard interactivity, making the button completely inaccessible to screen readers.&lt;/p&gt;
&lt;p&gt;“But you can use ARIA attributes to turn a div into a button! Right?”&lt;/p&gt;
&lt;p&gt;Well, yes and no…&lt;/p&gt;
&lt;h3 id=&quot;aria-is-a-polyfill-for-html-semantics.&quot; tabindex=&quot;-1&quot;&gt;ARIA is a polyfill for HTML semantics.&lt;/h3&gt;
&lt;p&gt;ARIA attributes are possibly the most powerful tool in our accessibility arsenal. Many ARIA attributes  mirror native HTML semantics, while others provide semantics that do not natively exist in HTML. They don’t change behavior or add functionality. They don’t make an element focusable or add keyboard behavior, for example. So if you do choose to go the route of making a button out of a div, you’re gonna have to add that functionality yourself using JavaScript. But why create a brittle implementation of something that is already provided to you by default?&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.w3.org/TR/using-aria/#rule1&quot;&gt;first rule of ARIA&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
If you can use a native HTML element or attribute with the semantics and behavior you require &lt;strong&gt;already built in&lt;/strong&gt;, instead of re-purposing an element and adding an ARIA role, state or property to make it accessible, &lt;strong&gt;then do so&lt;/strong&gt;.
&lt;/blockquote&gt;
&lt;p&gt;So while we should defer to using native HTML elements whenever possible, there are certain widgets that we can only build with the help of ARIA. For instance, there are no native HTML equivalents for Tab widgets (e.g. markup consisting of role=tab, tablist and tabpanel) — with all the interactivity built into them by default, so we can create tabs by repurposing other elements with ARIA and exposing them combined as a tabbed UI to screen reader users (e.g. role=“tab”, role=“tablist”, etc.)&lt;/p&gt;
&lt;p&gt;Because ARIA fundamentally changes the exposed semantics and accessibility mappings of elements, if incorrectly used, it can have negative impacts on the way content is exposed to people using assistive technologies. &lt;a href=&quot;https://scottohara.me/&quot;&gt;Scott O’Hara&lt;/a&gt;, referencing the ARIA Practicing Guidelines notes:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;ARIA practices first principlal states &quot;A role is a promise&quot;.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;When using ARIA, or even HTML for that matter, think about what you’re promising the people who use your interface or consume your documents.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;Are you fulfilling the promises you are making?&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before using ARIA attributes, think about what you’re promising your users. ARIA attributes directly affect how elements are exposed in the accessibility tree, and therefore how they are communicated to your users. Use them wisely and sparingly, and make sure that what you’ve built meets the expectations you’ve created for your users. If you need pointers as to how to use and &lt;em&gt;not&lt;/em&gt; use them, &lt;a href=&quot;https://www.w3.org/TR/using-aria/&quot;&gt;the Using ARIA&lt;/a&gt; document is a great place to start.&lt;/p&gt;
&lt;blockquote&gt;
Top tip for accessibility from &lt;a href=&quot;https://twitter.com/LeonieWatson&quot;&gt;@LeonieWatson&lt;/a&gt; - there are about 147 HTML elements and only two of them have no built in accessibility features - &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;. Use the right semantic elements as much as possible! 
&lt;cite&gt;— &lt;a href=&quot;https://twitter.com/edinbeth/status/1176161245352927237&quot;&gt;Beth Fraser&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Simplest #a11y advice I&#39;ve ever received: the div is your last resort. Is this your main content? There&#39;s a tag for that. Is it your header? That&#39;s got a tag, too. The div isn&#39;t bad; it just doesn&#39;t mean anything. That means you certainly don&#39;t need it for something clickable!&lt;/p&gt;
&lt;p&gt;Assume your content has a specific meaning and try to find the tag for that meaning. If it doesn&#39;t, then the div (or span) is what you want! The div does have a place. That place is not what many tutorials would have you believe.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;— &lt;a href=&quot;https://twitter.com/codeability/status/1162861059822112770&quot;&gt;E.J. Mason&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;javascript-is-imperative-for-creating-truly-accessible-custom-interactive-components.&quot; tabindex=&quot;-1&quot;&gt;JavaScript is imperative for creating truly accessible custom interactive components.&lt;/h3&gt;
&lt;p&gt;Even though you can get away with creating “functional” interactive components such as a CSS-only modal overlay or a disclosure widget using the infamous checkbox hack, it is &lt;em&gt;almost&lt;/em&gt; always guaranteed that those CSS-only components are not truly accessible.&lt;/p&gt;
&lt;p&gt;When you create an interactive widget, that widget is most likely to have a state. A disclosure widget is either “open” or “closed” (or “expanded/collapsed”). That state is exposed to screen reader users using ARIA attributes (e.g. &lt;code&gt;aria-expanded= &amp;quot;true/false&lt;/code&gt;), and when a user interacts with the widget, the state changes, and that change needs to be conveyed to the user. JavaScript is &lt;em&gt;needed&lt;/em&gt; to do that. I made peace with this fact two years ago when I &lt;a href=&quot;https://sarasoueidan.com/blog/accessible-tooltips&quot;&gt;needed to create an accessible tooltip&lt;/a&gt; for one of my clients.&lt;/p&gt;
&lt;p&gt;JavaScript is also needed to add keyboard functionality to custom components (e.g. tabs in a tabbed interface need to be nagivatable by arrow keys, and a disclosure widget needs to be operable using SPACE and ENTER keys).&lt;/p&gt;
&lt;p&gt;Side note: Even though JavaScript is a requirement for creating interactive custom components, in order to make sure that your content is inclusive of all users regardless of their context, you can, and probably should — whenever possible — make sure that they can consume that content when JavaScript is not available. In fact, you should never assume that your users will have JavaScript, as there are &lt;a href=&quot;https://kryogenix.org/code/browser/everyonehasjs.html&quot;&gt;plenty of reasons&lt;/a&gt; why they might not. This is why progressive enhancement is the most accessible strategy for building for the Web. I would even go as far as saying that it is a requirement, in some cases, for creating inclusive documents and components.&lt;/p&gt;
&lt;h3 id=&quot;progressive-enhancement-is-an-inclusive-strategy-for-building-for-the-web.&quot; tabindex=&quot;-1&quot;&gt;Progressive enhancement is an inclusive strategy for building for the Web.&lt;/h3&gt;
&lt;p&gt;There seems to be a misconception among many developers that just because JavaScript is required to make an interactive component accessible then you cannot possibly build it with progressive enhancement as an approach. The reason for that is that those developers think that Progressive Enhancement is anti-JavaScript. That is a fallacy.&lt;/p&gt;
&lt;p&gt;Progressive enhancement is about layering — starting with the most resilient base — semantic HTML! — and then layering styles (CSS) and functionality (JavaScript!) on top as appropriate.&lt;/p&gt;
&lt;p&gt;But what progressive enhancement achieves is having a resilient layer of content that will always be accessible, even when the CSS and/or JavaScript are absent.&lt;/p&gt;
&lt;p&gt;From the first day that I learned about progressive enhancement, it’s become my go-to strategy for building Web interfaces. I can’t imagine creating for the Web another way. And when I started building with accessibility in mind, I was convinced that it is the most sensible approach to developing for the Web.&lt;/p&gt;
&lt;p&gt;Let’s take a Tabs component again as an example. In a tabbed component, you have a series of tabs that control their respective content panels. The user can navigate between these panels by clicking on the tab they want. Tabs require JavaScript to be operable and accessible. But what if JavaScript does not work? If the Tabs were not progressively enhanced — if they were built with the assumption that JavaScript would always be there, then the component will fail to function and the content in all the hidden panels will be completely inaccessible.&lt;/p&gt;
&lt;p&gt;But if think about Tabs from a progressive enhancement point of view, you’ll want to consider what the content inside of it would look like had it been only created using HTML — without the CSS that adds the Tabbed UI affordances, and without the JavaScript that makes it behave like typical tabs.&lt;/p&gt;
&lt;p&gt;In this case, you may think of the tabs and panels as a series of sections, each with a title and content. These sections may or may not have a table of contents at the top. This would be the default “view”, and is what the user gets by default when the JavaScript doesn’t work.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/tabs-1.png&quot; alt=&quot;Illustration of a series of sections enhanced to a tabbed interface.&quot; /&gt;
	&lt;figcaption&gt;A tabs component may be enhanced from a series of sections, each with a title and some related content.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/tabs-2.png&quot; alt=&quot;Illustration of a series of sections preceded by a table of contents enhanced to a tabbed interface.&quot; /&gt;
	&lt;figcaption&gt;A tabs component may also be enhanced from a series of sections, each with a title and some related content, with a table of contents preceding these sections.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Then, when the JavaScript runs, you can enhance those sections by changing their layout and display, and adding the required interactivity. The way I would do it is I would probably add a style hook I want in the markup, and then I’d use that to change the layout of my sections knowing that the JavaScript has run and the Tabs will be operable and interactive.&lt;/p&gt;
&lt;p&gt;When you &lt;a href=&quot;https://www.deque.com/shift-left/&quot;&gt;shift accessibility to the left&lt;/a&gt; of your process, using progressive enhancement as a development strategy makes even more sense. Pretty much every single non-native interactive component I have built over the past year has been enhanced from a basic non-interactive component.
Start with HTMl first. Utilize everything it has to offer to provide an accessible basic experience. Then enhance with CSS and JavaScript when they are available.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Progressive enhancement. Because sometimes your JavaScript just won’t work.&lt;/p&gt;
&lt;p&gt;Be prepared.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;— &lt;a href=&quot;http://www.kryogenix.org/&quot;&gt;@sil&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;design-does-not-always-dictate-implementation.&quot; tabindex=&quot;-1&quot;&gt;Design does not always dictate implementation.&lt;/h3&gt;
&lt;p&gt;One of the most common ways I see semantics broken is when they are derived from the visual design. Because the visual design does not always describe the &lt;em&gt;type&lt;/em&gt; of content it is representing.&lt;/p&gt;
&lt;p&gt;Headings are a perfect example here. In &lt;a href=&quot;https://www.youtube.com/watch?v=are7ZZgA86I&amp;amp;list=PLe9psSNJBf74yYiVXDXz8UnRnWf3NHzS-&amp;amp;index=5&quot;&gt;a recent talk I gave&lt;/a&gt;, I showed an example from one of my latest client projects, where the page was designed in a way that a main heading for the page was seemingly non-existent,  when in fact it wasn’t. It was just not styled like a large level one heading normally would.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/codrops-heading.png&quot; alt=&quot;screenshot of the page demonstrating how the page&#39;s main heading is not visually styled like a main heading.&quot; /&gt;
	&lt;figcaption&gt;
        The main title of the page that describes the content in the page&#39;s main section is positioned and styled in a way that (undeliberately) disguises the fact that it is a main heading. Even though it is styled like a level 6 heading, it is implemented as a level 1 heading in the markup to represent what it really is.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Thinking about the document structure and screen reader user expectations, I knew the page needed to have a main heading. While I had to provide a heading for screen reader users only for some other pages where one was visually absent, in this particular case the heading was already there, it was just styled to look different. So it &lt;em&gt;looked&lt;/em&gt; like the page didn’t have a main heading, but in reality it did.&lt;/p&gt;
&lt;p&gt;Looking at the page through the lens of accessibility and keeping the HTML layer — semantics and structure — in mind, changed the way I &lt;em&gt;saw&lt;/em&gt; the page, and fundamentally changed how I ended up coding it.&lt;/p&gt;
&lt;p&gt;So just because a component or element looks a certain way doesn’t mean that it is. And just because it doesn’t look a certain way, doesn’t mean that it isn’t.&lt;/p&gt;
&lt;p&gt;The same is true for interactive UI patterns. The same pattern may create a different experience depending on the context it is in. And often times the context defines how a pattern should behave, what the user experience should be like, and that, in turn, determines what the underlying semantics should be, and that drives implementation.&lt;/p&gt;
&lt;p&gt;In the same project I just mentioned, there was a seemingly simple UI pattern that turned out to be quite an interesting UX and accessibility challenge. The following image is a screenshot of that component:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/codrops-video-player.png&quot; alt=&quot;Screenshot of the Video Player component.&quot; /&gt;
	&lt;figcaption&gt;The featured videos component in my recent client project shows a video on the left with a playlist of videos on the right. Clicking on any of the video titles on the right would load the video on the left; but it would not autoplay it. (Note that the content in this screenshot is dummy.)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In order to implement this video player, I needed to know how it worked, so I can mark it up in a way that conveys its semantics and functionality to screen readers properly.&lt;/p&gt;
&lt;p&gt;Even though the list of video titles on the right looks like a list of links, it is not &lt;em&gt;really&lt;/em&gt; a list of &lt;em&gt;links&lt;/em&gt;, because a link is supposed to take you somewhere, but these “links” don’t. Clicking on a video title would load that title in the player on the left. So it is an interactive element that performs an action and that is not a link. Therefore, and even though their appearance doesn’t show it, these titles are actually &lt;em&gt;buttons&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Then there was the question of what happens when a title is clicked? does the video autoplay? If it does, then the button should probably also pause the video, making it a type of a toggle button. But if you play/pause a video from the title button, you’d want to associate that button to the play/pause buttons inside the video itself, which can be a challenge given that the video could be a Youtube video, or a Vimeo video, or self-hosted. And if you don’t autoplay the video, should you move focus to the iframe after the button is clicked?&lt;/p&gt;
&lt;p&gt;After reviewing the intended UX and testing with screen readers, I ended up implementing it as a tabs component, with all tabs controlling the one panel containing the video.&lt;/p&gt;
&lt;p&gt;I had never thought about a tabbed interface with multiple tabs controlling the same one panel before. But the context of this component and the UX of it triggered a train of thought and UX considerations that drove the final implementation.&lt;/p&gt;
&lt;p&gt;So one of the things that I learned from this component was that the UX drives the implementation. ARIA comes with a lot of attributes that enable us to create different UI patterns in different contexts, and sometimes all we need to do is modify the pattern a little bit to work in the context it is in.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s weird that we still derive the semantics from a visual design instead of the other way around.&lt;/p&gt;
&lt;p&gt;The visual design is different per context while the core semantics are not.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;— &lt;a href=&quot;https://twitter.com/rikschennink/status/1166771758684356608&quot;&gt;Rik Schennink&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;just-because-it-is-technically-accessible%2C-doesn%E2%80%99t-mean-it-is-inclusive.&quot; tabindex=&quot;-1&quot;&gt;Just because it is technically accessible, doesn’t mean it is inclusive.&lt;/h3&gt;
&lt;p&gt;You can build something that is technically accessible but isn’t inclusive. That element or component may have all the buttons you want and you may be able to navigate it using a keyboard and use it with a screen reader, but did you really take your user’s needs and expectations into consideration when you made the decisions about how and what of that element should be exposed and interacted with?&lt;/p&gt;
&lt;p&gt;In his talk “&lt;a href=&quot;http://feather.ca/inclusion/aea2019&quot;&gt;Inclusive by Design&lt;/a&gt;”, Derek Featherstone, accessibility advocate and designer, talks about how he and his team built an accessible video player for an organization that they were contracted by. The video player had lots of buttons and was tested for technical accessibility over many phases.&lt;/p&gt;
&lt;p&gt;But then when the time came and the component needed to be used by users with different disabilities, they realized that, even though they had built the perfect accessible video player, that video player was not truly inclusive — it was missing certain functionality that made using the player easier for a group of users, such as a Rewind or Fast Forward button. Derek and his team had also made assumptions about how all users would be using the video player, and forgot about the users that were using an older version of a screen reader and who were therefore missing important announcements that were supposed to help them operate the video player. So after several iterations and tests with various users, they ended up adding features to the video player that would take many more disabilities into account, and expectations that those users would have of the player, and that made it far more inclusive and tremendously improved its user experience.&lt;/p&gt;
&lt;p&gt;Derek’s talk is full of such good examples that emphasize the importance of &lt;strong&gt;including your users early in the design process&lt;/strong&gt;, and making sure that you embrace diversity by default. The idea is that if you’re designing something for me, I should have a reasonably meaningful way of participating in that thing. I should be represented in that somehow.&lt;/p&gt;
&lt;blockquote&gt;
“Nothing about us, without us.” 
&lt;p&gt;&lt;cite&gt;- Michael Masutha&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;at-the-end-of-the-day%2C-it-is-always-about-the-user.&quot; tabindex=&quot;-1&quot;&gt;At the end of the day, it is &lt;em&gt;always&lt;/em&gt; about the user.&lt;/h4&gt;
&lt;p&gt;As you develop with real user experiences and inclusivity in mind, you’ll soon realize that a design pattern can be built in more than just one way. And there are &lt;em&gt;quite&lt;/em&gt; a few things in accessible design that are opinionated.&lt;/p&gt;
&lt;p&gt;Modal overlays are a great example. Regardless of being an annoying UI pattern, there are quite a few discussions around how they should be implemented and how they should behave once they are opened: Should you focus the first focusable element inside the modal? What if there is no focusable element? What if the first focusable element is the close button? Would you want the modal overlay to prompt a closing action as soon as it’s opened? (Of course not.) What if the first focusable element is an input field asking the user for their email address? Is it appropriate to prompt the user for their personal information without context first? (Also of course not.)&lt;/p&gt;
&lt;p&gt;At the end of the day, no matter what decision you end up making, it should always be about the user. So getting the user and/or a more diverse team involved in the design and development process is crucial in building truly inclusive Web interfaces.&lt;/p&gt;
&lt;p&gt;But what if you can’t? What if you don’t have access to such an environment or team? What if, like me, you’re a solo developer who often joins teams that usually don’t have users or disabled people involved?&lt;/p&gt;
&lt;h3 id=&quot;when-in-doubt%2C-ask-for-help.&quot; tabindex=&quot;-1&quot;&gt;When in doubt, ask for help.&lt;/h3&gt;
&lt;p&gt;If you can’t do it yourself, you can seek the experience and advice of other people who can. And it is very important for you to be open to constructive feedback.&lt;/p&gt;
&lt;p&gt;There are quite a bunch of wonderful (and sometimes understandably grumpy) accessibility experts in our field who &lt;em&gt;want&lt;/em&gt; the Web to be and become more accessible. Most of them have been doing free work like giving free advice and sharing their valuable knowledge in various forms — writing articles and books, making video courses, giving talks and workshops, etc. And there is a lot that we can learn from them. And most of them welcome questions and inquiries (paid and free).&lt;/p&gt;
&lt;p&gt;Some of my go-to experts are (in no particular order):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://tink.uk/&quot;&gt;Leonie Watson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://feather.ca/&quot;&gt;Derek Featherstone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://scottohara.me/&quot;&gt;Scott O’Hara&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marcysutton.com/&quot;&gt;Marcy Sutton&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/channel/UCJAtIv92EJqzG2EOzo92sdQ&quot;&gt;Rob Dodson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/sundress&quot;&gt;Alice Boxhall&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://marcozehe.de/&quot;&gt;Marco Zehe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://ericwbailey.design/&quot;&gt;Eric Bailey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/stevefaulkner&quot;&gt;Steve Faulkner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.paciellogroup.com/&quot;&gt;The Paciello Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You’d do well to spend some time reading the ARIA specifications and guidelines, and trying to get acquainted with as much about accessibility as you can, before asking for help. After all, these kind people may be able to help us, but they shouldn’t have to do our work for us — at least not for free.&lt;/p&gt;
&lt;h3 id=&quot;final-words&quot; tabindex=&quot;-1&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;Accessibility isn’t easy. And often times it is downright hard. But that comes with the territory. Designing for humans is hard. And accessibility is, at the end of the day, all about and all &lt;em&gt;for&lt;/em&gt; humans.&lt;/p&gt;
&lt;p&gt;We may not get it completely right, and there may always be room for improvement — especially as more users use our products and consume our content, but one thing I know is that that should never discourage us. Almost everything can be improved in one way or another. The most important thing is to be open to feedback and to be empathetic enough to &lt;em&gt;care&lt;/em&gt; about our users and try our best to make their lives easier with the (powerful) tools we have at our disposal.&lt;/p&gt;
&lt;p&gt;Use HTML. Enhance with CSS. Leverage the power of JavaScript. And include your users in your design process as early as possible. And always look at your work through the lens of inclusion. This will take you far ahead. Then learn more, iterate, and improve. And don’t forget, we’re all &lt;a href=&quot;https://uxmag.com/articles/we-re-just-temporarily-abled&quot;&gt;just temporarily abled&lt;/a&gt;. --&amp;gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Case Study: Implementing Accessible Data Charts for the Khan Academy 2018 Annual Report</title>
    <link href="https://sarasoueidan.com/blog/accessible-data-charts-for-khan-academy-2018-annual-report/"/>
    <updated>2019-10-10T09:54:41Z</updated>
    <id>https://sarasoueidan.com/blog/accessible-data-charts-for-khan-academy-2018-annual-report/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
    A few months ago I teamed up with &lt;a href=&quot;https://superfriend.ly/&quot;&gt;SuperFriendly&lt;/a&gt; to &lt;a href=&quot;https://sarasoueidan.com/work/khan-academy-2018-annual-report&quot;&gt;create an accessible micro-site&lt;/a&gt; for the &lt;a href=&quot;https://khanacademyannualreport.org/&quot;&gt;Khan Academy 2018 Annual Report&lt;/a&gt;. The site is a very beautiful visual representation of Khan’s real-life impact on world education, their end-of-year financial reports, and more. By nature, the annual report contains a &lt;em&gt;lot&lt;/em&gt; of data and visualizations and charts to represent it. My mission was to make sure that the way this data is presented and implemented is as accessible to site’s visitors as possible, regardless of how they explore the site.
&lt;/p&gt;
&lt;p&gt;
    Data visualizations are a great way to make information stand out and sometimes a lot easier to parse and understand. But they also come with their own accessibility challenges that you need to be aware of. 
&lt;/p&gt;
&lt;figure role=&quot;figure&quot; aria-label=&quot;The Khan Academy annual report represented all of the main data showcasing the impact they had on world education using different kinds of charts — simple and complex.&quot; class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/work/khan-academy/khan-academy-chart.png&quot; alt=&quot;An example of a chart from the Khan Academy 2018 Annual Report. Screenshot.&quot; /&gt;
	&lt;figcaption&gt;
        &lt;a href=&quot;https://khanacademyannualreport.org/&quot;&gt;The Khan Academy annual report&lt;/a&gt; represented all of the main data showcasing the impact they had on world education using different kinds of charts — simple and complex.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When it comes to visualizing data on the Web, SVG is the most used format. It is perfect for creating data visualizations because it comes with all the elements needed to create the shapes used to represent information. Because SVG is an XML format, similar to HTML, it comes with a lot of tags to represent different kinds of elements, mostly shapes. We have &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Basic_Shapes&quot;&gt;elements for creating basic shapes&lt;/a&gt; such as &lt;code&gt;circle&lt;/code&gt; s, &lt;code&gt;ellipse&lt;/code&gt; s, &lt;code&gt;rect&lt;/code&gt; angles, &lt;code&gt;polygon&lt;/code&gt; s, &lt;code&gt;polyline&lt;/code&gt; s, &lt;code&gt;line&lt;/code&gt; s, and more complex &lt;code&gt;path&lt;/code&gt; s, all of which are used to draw all kinds of data charts and visualizations.&lt;/p&gt;
&lt;p&gt;And often times, these charts and visualizations are also animated and interactive; and SVG provides us with the ability to animate and interact with the images we create with it — using CSS and JavaScript.&lt;/p&gt;
&lt;p&gt;But SVG data visualizations are, at the end of the day, SVG &lt;em&gt;images&lt;/em&gt;. This means that when a screen reader comes across one, it is likely going to announce it the same way it would announce any image: as an image, with an accessible name (because I’m assuming that the image &lt;em&gt;does&lt;/em&gt; have an accessible name provided in the &lt;code&gt;alt&lt;/code&gt; attribute). This, in turn, means that the screen reader is not going to announce the content presented &lt;em&gt;inside&lt;/em&gt; the chart to the user by default. It is only going to announce whatever accessible name we provide it with. Making sure it announces the content inside the image is something that requires a little more work on our side.&lt;/p&gt;
&lt;h3 id=&quot;how-accessible-are-svg-data-visualizations-%26-charts%3F&quot; tabindex=&quot;-1&quot;&gt;How accessible &lt;em&gt;are&lt;/em&gt; SVG data visualizations &amp;amp; charts?&lt;/h3&gt;
&lt;p&gt;Albeit being a perfect candidate for &lt;em&gt;visually&lt;/em&gt; representing information, SVG is not equipped with the semantics needed to convey &lt;em&gt;the content&lt;/em&gt; of that information to the user.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://tink.uk/accessible-svg-line-graphs/&quot;&gt;her article about creating accessible line graphs with SVG&lt;/a&gt;, Léonie Watson says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“SVG is often used for data visualisation, but because SVG lacks the semantics to express structures like bar charts, line graphs, and scatter plots, the content is difficult for screen reader users to interpret.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Léonie wrote a few articles about making content inside SVG accessible that I will link to at the bottom of this article. The concept in all of them is the same: use some of the available ARIA roles to modify the semantics of SVG elements to be announced to screen readers as something other than what they are.&lt;/p&gt;
&lt;blockquote&gt;
SVG has no native semantics for representing structures like tables, but ARIA1.1 introduces a number of roles that can be used to polyfill the necessary semantic information.
&lt;cite&gt;— Léonie Watson, &lt;a href=&quot;https://tink.uk/accessible-svg-tables/&quot;&gt;Accessible SVG Tables&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, in her article, she uses the ARIA table attributes to announce a visual line graph as a table to screen reader users, which makes it possible for them to announce the data inside those tables to their users as well. This is possible because a table is often times an appropriate alternative way to represent the information in a line graph.&lt;/p&gt;
&lt;p&gt;But Léonie finally notes (and emphasis is mine here) that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The state of SVG accessibility support in browsers and screen readers is still highly inconsistent, even when ARIA is used to polyfill semantic information.&lt;/p&gt;
&lt;p&gt;The upshot is that this technique is enough to make the primary SVG content more screen reader accessible […] but it isn’t enough to make it completely so. For this (and many other good reasons), &lt;strong&gt;it’s a good idea to provide an alternative view of the information&lt;/strong&gt;, for example by providing both a graphical and a tabular view of the content”&lt;/p&gt; 
&lt;/blockquote&gt;
&lt;p&gt;Personally, I’d avoid hacking my way around making an SVG chart accessible using ARIA roles. Most of the charts in the Khan Academy annual report were more complex, so using ARIA roles to change their semantics would not only prove to be counter-productive, but also risky, especially given how inconsistent screen reader and browser support is, and how important those charts are for the site’s visitors.&lt;/p&gt;
&lt;p&gt;So, I chose the alternative view of the information route. And with all the different SVG embedding techniques available to use, SVG makes all kinds of fallbacks easy to implement.&lt;/p&gt;
&lt;h3 id=&quot;choosing-the-most-appropriate-svg-embedding-technique&quot; tabindex=&quot;-1&quot;&gt;Choosing the most appropriate SVG embedding technique&lt;/h3&gt;
&lt;p&gt;There are 6 ways to embed an SVG on a Web page. Choosing the most appropriate one highly depends on your requirements and what you need the SVG to be capable of &lt;em&gt;and&lt;/em&gt; the kind of fallback that you need.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For data visualizations and infographics, it’s usually best to provide the plain text (or table) version of the content of the image as fallback. Since that text fallback is likely to be more than one or two sentences long, we need to embed the SVG using an embedding technique that caters for that.&lt;/li&gt;
&lt;li&gt;We were also planning on animating the charts had the project timeframe allowed it. This means that the embedding technique also needs to allow that.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;And&lt;/em&gt; I know that we will need JavaScript for the animation, which also narrows down my embedding options further.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; and inline &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; all tick all of the above boxes.&lt;/p&gt;
&lt;p&gt;I’m not a big fan of &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; s, and &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; already gives me everything I need that &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; does, so, out of these two, I always choose &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;In addition to the above requirements, I had a couple of other considerations in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;we have a &lt;em&gt;lot&lt;/em&gt; of charts, especially on the &lt;a href=&quot;https://khanacademyannualreport.org/leveling-the-playing-field/#introduction&quot;&gt;leveling the playing field&lt;/a&gt; page,&lt;/li&gt;
&lt;li&gt;and some of those charts are quite larger than the others. So I’ll want to keep page load and performance in mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I were to embed the charts inline, they would “pollute” my HTML, and would not be cached unless the whole page is. That’s not ideal. Whereas an &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; would reference an external SVG image which, after the first request, would then be cached, making subsequent visits faster.&lt;/p&gt;
&lt;p&gt;Also, on a more design-related note: I was working with SVG images exported from Adobe Illustrator, which tends to repeatedly create and use the same IDs and CSS class names for the images it exports. If I were to embed all of the images inline, the IDs and class names would clash and I would need to spend time I didn’t have to go over each SVG and provide it with unique class names to avoid the style inheritance nightmare, because, by default:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Styles within an inline &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; are not scoped to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means that if you have two inline &lt;code&gt;svg&lt;/code&gt; s on the page, the styles from the second SVG in the DOM order will override the styles in the first one for elements with shared class names.&lt;/p&gt;
&lt;p&gt;And last but not least, I love the clean and uncluttered way that &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; enables me to provide text fallback for my SVG images: simply place the text fallback in between the opening and closing &lt;code&gt;object&lt;/code&gt; tags, and that text will be displayed wherever SVG is not supported and/or whenever the SVG fails to load.&lt;/p&gt;
&lt;p&gt;So, &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; it is.&lt;/p&gt;
&lt;h3 id=&quot;embedding-the-charts&quot; tabindex=&quot;-1&quot;&gt;Embedding the charts&lt;/h3&gt;
&lt;p&gt;The initial base code for one of the simple charts would then look like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;object&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/images/long_beach.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Khan Academy math usage for 30 minutes per week proved to &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;           improve more than 5,000 Long Beach students scores by 2 times &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;           in the Smarter Balanced Assessment.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This was just the base markup, but I was curious enough to check how it would be announced by a screen reader. I’m on macOS so I usually test my work with VoiceOver (VO) on Safari.&lt;/p&gt;
&lt;p&gt;VO announced the chart as a frame, and used the file name of the SVG (in this case &lt;code&gt;long_beach.svg&lt;/code&gt; ) as the accessible name for it. Ouch.&lt;/p&gt;
&lt;p&gt;I was expecting the random name situation since my markup doesn’t yet include a label for the image, but I didn’t know how an &lt;code&gt;object&lt;/code&gt; is usually announced. I was also curious if VO would &lt;em&gt;somehow&lt;/em&gt; recognize or find the fallback text and announce it. It didn’t. Now, it was time to start “fixing” the situation.&lt;/p&gt;
&lt;p&gt;I want my chart to be announced as an image to start, so I needed to modify its semantics using ARIA &lt;code&gt;role&lt;/code&gt; . To give it an accessible name, I used &lt;code&gt;aria-label&lt;/code&gt; :&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;object&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token attr-name&quot;&gt;aria-label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;“Khan&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Academy&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Math&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;usage&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Beach.&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Chart.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/images/long_beach.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Khan Academy math usage for 30 minutes per week proved to &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;           improve more than 5,000 Long Beach students scores by 2 times &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;           in the Smarter Balanced Assessment.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these two attributes added, VO communicated my chart as an image, and used the label I gave it as its accessible name. Great.&lt;/p&gt;
&lt;p&gt;But a visitor using VO would now know that there is a chart showing Math usage levels in Long Beach, but they would not be able to access the data inside that chart.&lt;/p&gt;
&lt;p&gt;Since I already have a text fallback clearly describing the data in the chart right there in my markup, I thought I could use that instead of try to communicate the same content in a second way. That text fallback was not being exposed to my screen reader. In other words, it was &lt;em&gt;hidden&lt;/em&gt; from screen readers.&lt;/p&gt;
&lt;p&gt;But I already know that I can expose hidden content to my screen reader to announce if I reference that content inside of &lt;code&gt;aria-labelledby&lt;/code&gt; . I’ve used this in &lt;a href=&quot;https://sarasoueidan.com/blog/accessible-icon-buttons&quot;&gt;my previous article&lt;/a&gt; to provide a visually-hidden accessible label to an icon-only button. So it makes sense that I’d be able to do the same using &lt;code&gt;aria-describedby&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;There are several reasons why I’d want the image’s text content exposed using &lt;code&gt;aria-describedby&lt;/code&gt;
not &lt;code&gt;aria-labelledby&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;aria-labelledby&lt;/code&gt; is used to provide an accessible label to an element. My image already has one that I have provided in &lt;code&gt;aria-label&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;The text content is used to &lt;em&gt;describe&lt;/em&gt; the (content of) the image.&lt;/li&gt;
&lt;li&gt;An accessible name (label) should be short and succinct. A description is usually longer, especially (and particularly) in the case of text (or table!) provided for charts and visualizations.&lt;/li&gt;
&lt;li&gt;And, last but not least, I want the text content to be announced after the image and its accessible name are. That’s exactly what &lt;code&gt;aria-describedby&lt;/code&gt; does.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
There is a major difference between the way the content referenced in &lt;code&gt;aria-labelledby&lt;/code&gt; is announced versus that referenced in &lt;code&gt;aria-describedby&lt;/code&gt;. The accessible name is announced &lt;em&gt;before&lt;/em&gt; the image’s role is announced (in VO, at least); the description is announced &lt;em&gt;after&lt;/em&gt; the image’s role, &lt;strong&gt;with a short pause preceding it&lt;/strong&gt;.
&lt;/blockquote&gt;
&lt;p&gt;That’s exactly how I want my text to be announced. So, with all that taken into account, the final code for my chart looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;lt; object&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    role=&quot;img&quot; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    aria-label=“Khan Academy Math usage level in Long Beach. Chart.&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    aria-describedby=&quot;long_beach_desc&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    type=&quot;image/svg+xml&quot; data=&quot;/images/long_beach.svg&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;long_beach_desc&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Khan Academy math usage for 30 minutes per week proved to &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;           improve more than 5,000 Long Beach students scores by 2 times &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;           in the Smarter Balanced Assessment.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;lt; /object&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works very well, including for images that have longer descriptions. Of course, we made sure (thanks, Jessi) that the descriptions were as concise and succinct as possible, so the user is not overwhelmed with long announcements but would still get a very clear and accurate text version of the information provided in each chart.&lt;/p&gt;
&lt;h3 id=&quot;%E2%80%9Ccan%E2%80%99t-you-just-use-%3Cfigure%3E-for-the-charts%3F%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;“Can’t you just use &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; for the charts?”&lt;/h3&gt;
&lt;p&gt;I got this question a couple of times after speaking about my implementation choice above — once during a workshop, and once after a talk.&lt;/p&gt;
&lt;p&gt;I’m guessing that the idea here is that you would implement the SVG chart in an &lt;code&gt;img&lt;/code&gt; inside a &lt;code&gt;figure&lt;/code&gt; and use the &lt;code&gt;figure&lt;/code&gt; ’s &lt;code&gt;figcaption&lt;/code&gt; to provide the text alternative of the chart’s content to screen reader users. I assume the suggestion would be to hide the figcaption in this case visually (because we don’t show it visually, of course) and make it available to screen readers only, using a utility class such as &lt;code&gt;sr-only&lt;/code&gt; .&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;lt; !-- This is what you should NOT do.--&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;lt; figure&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/path/to/chart.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ACCESSIBLE_CHART_TITLE&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;figcaption&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;sr-only&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Here goes the text that describes the information inside the chart.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Note that this text could be a couple of a few paragprahs long.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;It might even be appropriate to represent the data using a table!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;figcaption&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;lt; /figure&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* &lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; * Utility class to hide content visually while keeping it screen reader-accessible.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; * Source: https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html &lt;/span&gt;&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.sr-only:not(:focus):not(:active)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;clip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0 0 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;inset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;white-space&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nowrap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This approach has more than one issue.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I didn’t choose &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; because I excluded all SVG embedding options that don’t allow the SVG charts to be animated. &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; is static — meaning that it won’t allow the would-be SVG &lt;code&gt;img&lt;/code&gt; inside of it to be animated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I also didn’t consider &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; as an option because a &lt;code&gt;figure&lt;/code&gt; is, by definition, meant to be a meaningful wrapper for a piece of content that is relevant to the current document, but not vital to its understanding.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[The &lt;code&gt;figure&lt;/code&gt; element] can thus be used to annotate illustrations, diagrams, photos, code listings, etc, that are referred to from the main content of the document, but that could, without affecting the flow of the document, be moved away from that primary content, ... &lt;/p&gt;
&lt;cite&gt;— &lt;a href=&quot;https://www.w3.org/TR/2011/WD-html5-author-20110809/the-figure-element.html&quot;&gt;HTML5: Edition for Web Authors&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;p&gt;Khan Academy’s annual report charts &lt;em&gt;are&lt;/em&gt; vital to the understanding of the page they’re in, and &lt;em&gt;cannot&lt;/em&gt; be removed from the primary document without affecting it. The data inside these charts &lt;em&gt;is&lt;/em&gt; the meat of the annual report.&lt;/p&gt;
&lt;p&gt;So, as far as semantics are concerned, &lt;code&gt;figure&lt;/code&gt; is not an element suitable to represent these charts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;figure&lt;/code&gt; ’s &lt;code&gt;figcaption&lt;/code&gt; is used by screen readers as &lt;strong&gt;the accessible name&lt;/strong&gt; of the _ &lt;code&gt;figure&lt;/code&gt; _. As I mentioned earlier, the text fallback for the charts is &lt;em&gt;not&lt;/em&gt; meant to be used as a name (label), and it should be announced as a &lt;em&gt;description&lt;/em&gt;, not a name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, the markup for the figure would have to be very dirty even if using it &lt;em&gt;were&lt;/em&gt; possible, because the text that goes in the &lt;code&gt;figcaption&lt;/code&gt; needs to be provided inside an &lt;code&gt;aria-label&lt;/code&gt; on the &lt;code&gt;figure&lt;/code&gt; alongside a &lt;code&gt;role&lt;/code&gt; attribute for certain browser-screen-reader combinations to even announce &lt;code&gt;figure&lt;/code&gt; as it is intended to be announced; and this brings us again to the “but the text inside &lt;code&gt;figcaption&lt;/code&gt; is not even a label for the &lt;code&gt;figure&lt;/code&gt; element” argument…&lt;/p&gt;
&lt;p&gt;My friend &lt;a href=&quot;https://twitter.com/scottohara&quot;&gt;Scott O’Hara&lt;/a&gt; has &lt;a href=&quot;https://www.scottohara.me/blog/2019/01/21/how-do-you-figure.html&quot;&gt;a wonderful article&lt;/a&gt; about &lt;code&gt;figure&lt;/code&gt; and &lt;code&gt;figcaption&lt;/code&gt; detailing how to use and &lt;em&gt;not&lt;/em&gt; use them, and how to ensure the best cross-browser and screen reader compatibility. I highly recommend checking it out.&lt;/p&gt;
&lt;p&gt;When it comes to accessibility, semantics matter &lt;em&gt;a lot&lt;/em&gt;. Learning about an element’s semantics and proper usage helps us make better informed decisions as to which element to use when.&lt;/p&gt;
&lt;h3 id=&quot;final-words&quot; tabindex=&quot;-1&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;I had great fun working on the Khan Academy annual report, and I learned quite a bit in the process. Khan Academy’s mission is to provide free education for everyone everywhere. In other words, they are working to make world-class education &lt;em&gt;accessible&lt;/em&gt; by everyone. The least I could do is to make sure the product I helped build for them was just as accessible by everyone, regardless of their context and abilities. I’m quite proud of the work we did. And if you could use my help building better, more accessible products, &lt;a href=&quot;https://sarasoueidan.com/contact/&quot;&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And if you want to be the first to know when the next article comes out (hint: there will be more like this one), you can &lt;a href=&quot;http://sarasoueidan.com/blog/index.xml&quot;&gt;subscribe to my blog’s RSS feed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
&lt;h3 id=&quot;further-reading&quot; tabindex=&quot;-1&quot;&gt;Further Reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html&quot;&gt;Inclusively Hidden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scottohara.me/blog/2019/01/21/how-do-you-figure.html&quot;&gt;How do you figure?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tink.uk/accessible-svg-tables/&quot;&gt;Accessible SVG Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tink.uk/accessible-svg-line-graphs/&quot;&gt;Accessible SVG Line Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tink.uk/accessible-svg-flowcharts/&quot;&gt;Accessible SVG Flowcharts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Accessible Icon Buttons</title>
    <link href="https://sarasoueidan.com/blog/accessible-icon-buttons/"/>
    <updated>2019-05-22T12:59:17Z</updated>
    <id>https://sarasoueidan.com/blog/accessible-icon-buttons/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
    An icon button is an icon that triggers some sort of action on the page. More accurately, technically speaking, an icon button is a &lt;em&gt;button&lt;/em&gt; that contains an icon and no (visible) accompanying text. These buttons can be found in the majority of app and user interfaces today. The infamous hamburger menu button is a great example of such buttons when not visually labelled “Menu”.
&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/twitter-icon-buttons.png&quot; alt=&quot;Twitter icon buttons&quot; /&gt;
&lt;figcaption&gt;Twitter’s Compose Tweet icons are an example of icon-only buttons in the wild.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;Putting aside the UX side of the coin and whether or not an icon alone is enough to convey meaning and functionality to users, many implementations of these buttons today lack the proper accessibility that makes them meaningful to users of assistive technologies.&lt;/p&gt;
&lt;p&gt;While the seemingly popular &lt;code&gt;aria-label&lt;/code&gt; is a perfectly valid way to add an accessible name to a button (and/or other components), it is certainly not the only way, let alone the best. You could always &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/1124974330864181253&quot;&gt;just put text in it&lt;/a&gt;, for example. But what if the designer or the UI enforces the absence of visual text next to an icon?&lt;/p&gt;
&lt;p&gt;There is a handful of ways that an icon button can be implemented accessibly. This article is an overview of them all.&lt;/p&gt;
&lt;h3 id=&quot;accessible-button-names&quot; tabindex=&quot;-1&quot;&gt;Accessible Button Names&lt;/h3&gt;
&lt;p&gt;A button is announced to screen readers as a button when the proper element — the almighty &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; is used, or when an element has a &lt;code&gt;role = &amp;quot;button&amp;quot;&lt;/code&gt; on it. Either way, when a button is announced as one, users expect to be able to interact with it in a certain way, which includes being able to activate the button using either the &lt;kbd&gt;ENTER&lt;/kbd&gt; or &lt;kbd&gt;SPACE&lt;/kbd&gt; keys.&lt;/p&gt;
&lt;p&gt;This means that if you choose not to use the native &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element, you’ll need to reimplement that native behavior and functionality yourself using JavaScript. But who would want to create a brittle implementation of features that are provided to them by default by the browser when they can save both time and effort using a simple &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; , right? ; )&lt;/p&gt;
&lt;style&gt;
.visually-hidden:not(:focus):not(:active) {
  clip: rect(0 0 0 0); 
  clip-path: inset(100%); 
  height: 1px; 
  overflow: hidden; 
  position: absolute; 
  white-space: nowrap; 
  width: 1px; 
}

button.icon-button {
  background: #fff; 
  color: inherit; 
  border: 1px solid #000; 
  border-radius: 0.3em; 
  padding: 0.5em; 
  transition: all 0.2s linear; 
  display: flex; 
  align-items: center; 
}
button.icon-button svg {

    display: inline-block;
    width: 1em;
    height: 1em;
    fill: #000;
    transition: all 0.2s linear;

}
button.icon-button:focus {

    outline: 2px solid #3bc9ff;

}
button.icon-button:hover {

    background: #000;
    color: #fff;

}
button.icon-button:hover svg {

      fill: #fff;

}
&lt;/style&gt;
&lt;h4 id=&quot;inspecting-the-button-name-in-chrome-devtools&quot; tabindex=&quot;-1&quot;&gt;Inspecting the Button Name in Chrome Devtools&lt;/h4&gt;
&lt;p&gt;To inspect what the accessible name of a button is and, therefore, how it will be announced by a screen reader, you can use the Chrome devtools. Next to the Style tab, you’ll find an “Accessibility“ tab, inside which you will find something that looks like this:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/accessible-name-devtools.png&quot; alt=&quot;The accessible button name as shown in the accessibility chrome devtools tab&quot; /&gt;
&lt;p&gt;The accessible name for the button can be defined in several ways, as you can see in the image above. When you put plain text inside the button, that text content can then be used as a name for the button, which is then announced: &lt;q&gt;Send Message, Button&lt;/q&gt; by VoiceOver.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/vo-button-announcement.png&quot; alt=&quot;What the button is announced like in VoiceOver on Mac&quot; /&gt;
&lt;figcaption&gt;The popup shows what VoiceOver on Mac announces a button that has “Send Message” text in it.&lt;strong&gt;The button is announced by its name first and then its role (button).&lt;/strong&gt;&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;You can inspect the button below yourself and check the accessible name in the devtools, and fire up your screen reader of choice to see how it is announced.&lt;/p&gt;
&lt;p&gt;&lt;button&gt;Send Message&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;Now, what happens when we have an icon inside the button?&lt;/p&gt;
&lt;h3 id=&quot;icon-sitting-next-to-text&quot; tabindex=&quot;-1&quot;&gt;Icon Sitting Next to Text&lt;/h3&gt;
&lt;p&gt;This post is about icon-only buttons. But it’s worth starting with buttons that contain an icon sitting next to some text.&lt;/p&gt;
&lt;p&gt;When a button contains text, that text is going to be used to create an accessible name for the button. That text should usually be enough to convey what the button does to screen readers.&lt;/p&gt;
&lt;p&gt;As such, the icon itself (an &lt;code&gt;svg&lt;/code&gt; image) could become irrelevant to screen reader users, as it does not clarify or add to the accessible name of the button. As such, the common practice is to hide it from screen readers using &lt;code&gt;aria-hidden&lt;/code&gt; :&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-expanded&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;menu-trigger&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 32 32&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;32px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;32px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-hidden&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;focusable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- svg content here --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    Menu&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;aria-hidden&lt;/code&gt; attribute is used to indicate whether an element is exposed to screen readers or not. When set to “true”, the element and its contents are hidden from the accessibility API, regardless of whether or not it is visually displayed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;svg&lt;/code&gt; also has a &lt;code&gt;focusable&lt;/code&gt; attribute set to &lt;code&gt;false&lt;/code&gt; which prevents the icon itself from receiving focus in IE, because otherwise the button will have two Tab stops, which is not the expected or desired behavior.&lt;/p&gt;
&lt;h5 id=&quot;further-reading%3A&quot; tabindex=&quot;-1&quot;&gt;Further Reading:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.paciellogroup.com/blog/2012/05/html5-accessibility-chops-hidden-and-aria-hidden/&quot;&gt;HTML5 Accessibility Chops: hidden and aria-hidden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.accessibility-developer-guide.com/examples/sensible-aria-usage/hidden/&quot;&gt;Hiding elements from screen readers using aria-hidden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scottohara.me/blog/2018/05/05/hidden-vs-none.html&quot;&gt;Know your ARIA: ‘Hidden’ vs ‘None’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;Now, if the button does not have any visible text, you’ll still need to provide an accessible name for it somehow. There are a few different ways to do that.&lt;/p&gt;
&lt;h3 id=&quot;technique-%231%3A-accessible-visually-hidden-text&quot; tabindex=&quot;-1&quot;&gt;Technique #1: Accessible Visually Hidden Text&lt;/h3&gt;
&lt;p&gt;If your button isn’t supposed to visually contain any text, you can still provide the text inside the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; so that it’s picked up and used by screen readers, while hiding it visually using CSS.&lt;/p&gt;
&lt;p&gt;There are a few ways to hide content visually. You’ll want to make sure you hide the text but also keep it accessible to screen readers. My friend Scott O’Hara has written &lt;a href=&quot;https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html&quot;&gt;a fantastic article&lt;/a&gt; that covers how to hide content accessibly that is definitely worth bookmarking and checking out to learn more about the topic.&lt;/p&gt;
&lt;p&gt;Our icon button markup might now look like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 32 32&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;32px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;32px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;           &lt;span class=&quot;token attr-name&quot;&gt;aria-hidden&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;focusable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- svg content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;visually-hidden&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Menu&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Note that we’ll still want to always prevent the &lt;code&gt;svg&lt;/code&gt; from receiving focus in IE using the &lt;code&gt;focusable&lt;/code&gt; attribute.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Using a utility CSS class that I usually call &lt;code&gt;visually-hidden&lt;/code&gt; &lt;small&gt;(short for “screen reader only”)&lt;/small&gt;, we hide the text visually while making sure it can still be picked up and used by screen readers:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* &lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; * Utility class to hide content visually while keeping it screen reader-accessible.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt; * Source: https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html &lt;/span&gt;&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.visually-hidden:not(:focus):not(:active)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;clip&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0 0 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;inset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;white-space&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nowrap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I borrowed this class from Scott’s article:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The above “sr-only” class is utilizing various declarations to shrink an element into a 1px square, hiding any overflow, and absolutely positioning the element to remove any trace of it from the normal document flow.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;:not&lt;/code&gt; portions of the selector are allowing a means for any focusable element to become visible when focused/active by a user. So elements that normally can’t receive focus, like paragraphs, will not become visible if a user navigates through content via screen reader controls or the &lt;kbd&gt;Tab&lt;/kbd&gt; key, but natively focusable elements, or elements with a non-negative &lt;code&gt;tabindex&lt;/code&gt; will have these elements appear in the DOM on focus.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;VoiceOver will announce &lt;q&gt;Menu, Button&lt;/q&gt;, and the devtools will confirm that the text inside the button is used to provide an accessible name to it:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/visually-hidden-text-button.png&quot; alt=&quot;&quot; /&gt;
&lt;p&gt;You can try it yourself by inspecting the following button:&lt;/p&gt;
&lt;button class=&quot;icon-button&quot;&gt;
    &lt;svg width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; focusable=&quot;false&quot;&gt;
        &lt;path d=&quot;M21 11h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M3 7h18c0.6 0 1-0.4 1-1s-0.4-1-1-1h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1z&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M21 17h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z&quot;&gt;&lt;/path&gt;
    &lt;/svg&gt;
    &lt;span class=&quot;visually-hidden&quot;&gt;Menu&lt;/span&gt;
&lt;/button&gt;
&lt;h5 id=&quot;further-reading%3A-1&quot; tabindex=&quot;-1&quot;&gt;Further Reading:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scottohara.me/blog/2017/04/14/inclusively-hidden.html&quot;&gt;Inclusively Hidden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/ARIA14.html&quot;&gt;ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;technique-%232%3A-accessible-visually-hidden-text-with-hidden-and-aria-labelledby&quot; tabindex=&quot;-1&quot;&gt;Technique #2: Accessible Visually Hidden Text with &lt;code&gt;hidden&lt;/code&gt; and &lt;code&gt;aria-labelledby&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;This technique is similar to Technique #1 with one advantage over it: you don’t need to use a CSS utility class to hide the text visually. This technique uses the &lt;code&gt;hidden&lt;/code&gt; attribute to hide the button text:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;menu-trigger&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-labelledby&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button-label&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button-label&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Menu&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-hidden&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;true&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;focusable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;24&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;28&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 24 28&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- svg content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;hidden&lt;/code&gt; attribute is a boolean attribute. When specified on an element, it hides that element both visually and from assistive tech. It is the HTML5 markup equivalent of the CSS &lt;code&gt;display: none&lt;/code&gt; and &lt;code&gt;visibility: hidden&lt;/code&gt; declarations, both of which also hide elements inaccessibly.&lt;/p&gt;
&lt;p&gt;That said, the ARIA specification allows the &lt;code&gt;aria-describedby&lt;/code&gt; and &lt;code&gt;aria-labelledby&lt;/code&gt; attributes to reference hidden elements. This means that those hidden elements can and will then be discoverable and used by screen readers. Great!&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;aria-labelledby&lt;/code&gt; , we can use our hidden piece of text as a label for our button.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;aria-labelledby&lt;/code&gt; attribute establishes relationships between an element and its label(s). It takes one (or more) ID as a value, which refers to the element that will be used as a label to the element it is used &lt;em&gt;on&lt;/em&gt;. This idea is similar to how the &lt;code&gt;for&lt;/code&gt; attribute is used to link a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; to an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Using this markup, VoiceOver will announce &lt;q&gt;Menu, Button&lt;/q&gt;, and the devtools will now indicate that the accessible name of the button was provided by a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; containing a piece of text that is referenced via an &lt;code&gt;aria-labelled&lt;/code&gt; attribute:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/hidden-text-button.png&quot; alt=&quot;&quot; /&gt;
&lt;p&gt;You can try it yourself by inspecting the following button:&lt;/p&gt;
&lt;button class=&quot;icon-button&quot; aria-labelledby=&quot;button-label&quot;&gt;
&lt;span id=&quot;button-label&quot; hidden=&quot;&quot;&gt;Menu&lt;/span&gt;
    &lt;svg width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; focusable=&quot;false&quot;&gt;
        &lt;path d=&quot;M21 11h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M3 7h18c0.6 0 1-0.4 1-1s-0.4-1-1-1h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1z&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M21 17h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z&quot;&gt;&lt;/path&gt;
    &lt;/svg&gt;
&lt;/button&gt;
&lt;p&gt;One final note: the &lt;code&gt;hidden&lt;/code&gt; attribute has very, very good cross-broswer support. But if you still need to support older IEs (I am so, so sorry!), you’ll want to “polyfill” it in the CSS by explicitly hiding any and all elements that have a &lt;code&gt;hidden&lt;/code&gt; attribute set on them:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;[hidden]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;further-reading%3A-2&quot; tabindex=&quot;-1&quot;&gt;Further Reading:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.paciellogroup.com/blog/2012/05/html5-accessibility-chops-hidden-and-aria-hidden/&quot;&gt;HTML5 Accessibility Chops: hidden and aria-hidden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute&quot;&gt;Using the aria-labelledby attribute&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;technique-%233%3A-using-aria-label&quot; tabindex=&quot;-1&quot;&gt;Technique #3: Using &lt;code&gt;aria-label&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;aria-label&lt;/code&gt; is another attribute which can be used to provide an accessible label to an element. Unlike &lt;code&gt;aria-labelledby&lt;/code&gt; which references another element to use as a label, &lt;code&gt;aria-label&lt;/code&gt; takes a string of text as a value, and that string will be used as the accessible name for the element it is used on.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;menu-trigger&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Menu&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;focusable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;24&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;28&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 24 28&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- svg content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When &lt;code&gt;aria-label&lt;/code&gt; is used on a button, the contents of the attribute will override the contents inside the button as the accessible name. This means that, if you have an icon or even other text content inside your &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; , that content will no longer be announced as part of the button’s name. VoiceOver will announce &lt;q&gt;Menu, Button&lt;/q&gt;, and the devtools will now indicate that the accessible name of the button was provided by the &lt;code&gt;aria-label&lt;/code&gt; attribute:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/aria-label-button-name.png&quot; alt=&quot;&quot; /&gt;
&lt;p&gt;The devtools will also show when the inner text content of the button was overridden by another accessible name:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/aria-label-button-name-overridden.png&quot; alt=&quot;&quot; /&gt;
&lt;p&gt;You can try it yourself by inspecting the following button:&lt;/p&gt;
&lt;button class=&quot;icon-button&quot; aria-label=&quot;Menu&quot;&gt;
    &lt;svg width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; focusable=&quot;false&quot;&gt;
        &lt;path d=&quot;M21 11h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M3 7h18c0.6 0 1-0.4 1-1s-0.4-1-1-1h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1z&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M21 17h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z&quot;&gt;&lt;/path&gt;
    &lt;/svg&gt;
    &lt;span style=&quot;color: inherit; margin-left: .5em; &quot;&gt;Bananas&lt;/span&gt;
&lt;/button&gt;
&lt;p&gt;It is important to note here that &lt;strong&gt;you do &lt;em&gt;not&lt;/em&gt; want to have an accessible label in &lt;code&gt;aria-label&lt;/code&gt; that is different from the visual text label.&lt;/strong&gt; I’ve used different labels here for demonstration purposes only. Always make sure the visual text matches what screen reader users will hear; this is &lt;a href=&quot;https://www.w3.org/WAI/WCAG21/quickref/#label-in-name&quot;&gt;a WCAG 2.1 requirement&lt;/a&gt;. Also worth noting here is that not all screen reader users are blind, so you’ll want to make sure that what they see matches what the screen reader is announcing to them.&lt;/p&gt;
&lt;h5 id=&quot;further-reading&quot; tabindex=&quot;-1&quot;&gt;Further Reading&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/WCAG20-TECHS/ARIA14.html&quot;&gt;ARIA14: Using aria-label to provide an invisible label where a visible label cannot be used&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;technique-%234%3A-aria-label-on-the-%3Csvg%3E-icon&quot; tabindex=&quot;-1&quot;&gt;Technique #4: &lt;code&gt;aria-label&lt;/code&gt; on the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; Icon&lt;/h3&gt;
&lt;p&gt;In all of the previous techniques, we avoided using the icon to provide an accessible name to the button. But we don’t have to do that. The icon itself can be used to create a label to the button, by making sure that the icon itself has an accessible label.&lt;/p&gt;
&lt;p&gt;The quickest way to add a label to an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; icon is by, once again, using &lt;code&gt;aria-label&lt;/code&gt; .&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;menu-trigger&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;focusable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;24&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;28&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 24 28&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;aria-label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Menu&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- svg content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since the button doesn’t have any text content in it, nor does it have a label defined using any ARIA attributes, the icon itself will now be used as a name. Since the icon has a clear label, that label will be used as the accessible name for the button. This is why it’s important to keep in mind that the name you provide to the icon should describe what the button does, not what the icon is. For example, you wouldn’t want to label it ”hamburger icon”.&lt;/p&gt;
&lt;p&gt;Note that since we are making use of the icon in this technique, we are no longer hiding it using &lt;code&gt;aria-hidden&lt;/code&gt; , but we do want to prevent it from receiving unwanted focus with &lt;code&gt;focusable = &amp;quot;false&amp;quot;&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;VoiceOver will announce &lt;q&gt;Menu, Button&lt;/q&gt;, and the devtools will now indicate that the accessible name of the button was provided by its content (the icon’s label):&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/icon-label-name.png&quot; alt=&quot;&quot; /&gt;
&lt;p&gt;You can try it yourself by inspecting the following button:&lt;/p&gt;
&lt;button class=&quot;icon-button&quot;&gt;
    &lt;svg width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; focusable=&quot;false&quot; aria-label=&quot;Menu&quot;&gt;
        &lt;path d=&quot;M21 11h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M3 7h18c0.6 0 1-0.4 1-1s-0.4-1-1-1h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1z&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M21 17h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z&quot;&gt;&lt;/path&gt;
    &lt;/svg&gt;
&lt;/button&gt;
&lt;p&gt;&lt;em&gt;Please note that I do not recommend using this technique as it fails in some browser / screen reader combinations. Consult the &lt;a href=&quot;https://sarasoueidan.com/blog/accessible-icon-buttons/#there-is-no-one-way-to-rule-them-all&quot;&gt;“There is No One Way to Rule Them All”&lt;/a&gt; section below for details.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;technique-%235%3A-aria-labelledby-on-the-%3Csvg%3E-icon&quot; tabindex=&quot;-1&quot;&gt;Technique #5: &lt;code&gt;aria-labelledby&lt;/code&gt; on the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; Icon&lt;/h3&gt;
&lt;p&gt;This technique is conceptually similar to Technique #4 above. But instead of using &lt;code&gt;aria-label&lt;/code&gt; to provide a label to our svg icon, we will use &lt;code&gt;aria-labelledby&lt;/code&gt; . It is worth noting that this is also is one of the best ways to make an inline svg image(s) accessible.&lt;/p&gt;
&lt;p&gt;In this technique, &lt;code&gt;aria-labelledby&lt;/code&gt; will reference the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; of the SVG as the accessible label:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;menu-trigger&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;focusable&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;24&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;28&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 24 28&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-labelledby&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;svg-title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;svg-title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Menu &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- svg content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;VoiceOver will announce &lt;q&gt;Menu, Button&lt;/q&gt;, and the devtools will once again indicate that the accessible name of the button was provided by its content (the icon’s label inside the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element):&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/icon-labelledby-name.png&quot; alt=&quot;&quot; /&gt;
&lt;p&gt;You can try it yourself by inspecting the following button:&lt;/p&gt;
&lt;button class=&quot;icon-button&quot;&gt;
    &lt;svg width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; focusable=&quot;false&quot; role=&quot;img&quot; aria-labelledby=&quot;svg-title&quot;&gt;
    &lt;title id=&quot;svg-title&quot;&gt; Menu &lt;/title&gt;
        &lt;path d=&quot;M21 11h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M3 7h18c0.6 0 1-0.4 1-1s-0.4-1-1-1h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1z&quot;&gt;&lt;/path&gt;
        &lt;path d=&quot;M21 17h-18c-0.6 0-1 0.4-1 1s0.4 1 1 1h18c0.6 0 1-0.4 1-1s-0.4-1-1-1z&quot;&gt;&lt;/path&gt;
    &lt;/svg&gt;
&lt;/button&gt;
&lt;h5 id=&quot;further-reading%3A-3&quot; tabindex=&quot;-1&quot;&gt;Further Reading:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/tips-accessible-svg/&quot;&gt;Tips for Creating Accessible SVG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/&quot;&gt;Using ARIA to enhance SVG accessibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Please note that I do not recommend using this technique as it fails in some browser / screen reader combinations. Consult the &lt;a href=&quot;https://sarasoueidan.com/blog/accessible-icon-buttons/#there-is-no-one-way-to-rule-them-all&quot;&gt;“There is No One Way to Rule Them All”&lt;/a&gt; section below for details.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;use-svg&quot; tabindex=&quot;-1&quot;&gt;Use SVG&lt;/h3&gt;
&lt;p&gt;You’ve already noticed that I used SVG to embed the icon in the buttons in this article. It is my personal belief that using SVG should be the first requirement to making icons accessible. There are there &lt;a href=&quot;https://css-tricks.com/icon-fonts-vs-svg/&quot;&gt;a myriad of reasons why SVG is better suited for icons than icon fonts&lt;/a&gt;. If you’re using icon fonts and are not sure what it takes or how to make the switch, I have &lt;a href=&quot;https://sarasoueidan.com/blog/icon-fonts-to-svg/&quot;&gt;an article&lt;/a&gt; that covers that, and that will help you make the switch in no time.&lt;/p&gt;
&lt;p&gt;Making an element accessible does not only mean making it accessible to screen readers. It means making it &lt;em&gt;universally&lt;/em&gt; accessible, regardless of what the user is using to interact with that element or what environment they’re in.&lt;/p&gt;
&lt;p&gt;In addition to the many benefits you get from using SVG, doing so makes it easier to make your icons accessible in user-controlled environments, such as Windows High Contrast Mode. I’ll be sharing more about that in a separate article.&lt;/p&gt;
&lt;h3 id=&quot;there-is-no-one-way-to-rule-them-all&quot; tabindex=&quot;-1&quot;&gt;There is no One Way to Rule Them All&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.scottohara.me/&quot;&gt;Scott O’Hara&lt;/a&gt; and I synced together to publish two complementary articles today that hopefully provide you with everything you need to know about this topic.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&quot;https://www.scottohara.me/blog/2019/05/22/contextual-images-svgs-and-a11y.html&quot;&gt;his article&lt;/a&gt;, Scott dives into the technical intricacies of the markup patterns used to implement accessible images and svgs, and (generously) shares his extensive tests and findings on how those patterns work in different browser / screen reader pairings, or if they’re used within a button or a link. If you’ve made it this far, &lt;a href=&quot;https://www.scottohara.me/blog/2019/05/22/contextual-images-svgs-and-a11y.html&quot;&gt;Scott’s article&lt;/a&gt; is the next logical stop.&lt;/p&gt;
&lt;p&gt;Scott’s test findings are extremely important as you will learn that treating the icon as decorative and providing an accessible name to the button using one of the first three techniques is often the better way to go. Either that or you will need to pick the svg pattern that has the test with the least amount of failures, and use that. In other words, &lt;strong&gt;both Technique #4 and Technique #5 come with their failures in some browser / screen reader combinations.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Personally, I’d not use the SVG icon itself to provide a label for the button when I can provide one on the button itself directly. As Scott states, &lt;q&gt;there’s just no good way to use an SVG as the sole means to provide an accessible name to a link or button. Every test had failures.&lt;/q&gt; Thankfully, Scott has saved us &lt;em&gt;hours&lt;/em&gt; of testing, so if you &lt;em&gt;need&lt;/em&gt; to provide a label to the button using the svg itsef, you can choose the pattern you need based on his findings.&lt;/p&gt;
&lt;h3 id=&quot;final-words&quot; tabindex=&quot;-1&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;I hope this article has given you a clear overview of many possible ways to provide an accessible label to an icon button.&lt;/p&gt;
&lt;p&gt;It is important to note, though, that we &lt;em&gt;only&lt;/em&gt; covered providing an accessible &lt;em&gt;label&lt;/em&gt; to the buttons. There are many more things to take into consideration when combining labels with additional descriptions (using &lt;code&gt;aria-describedby&lt;/code&gt; , for example), so please beware of those, and make sure you properly test your buttons before pushing them to production.&lt;/p&gt;
&lt;p&gt;If you’d like to learn more about creating accessible UI patterns, I’ve got a full-day workshop that you can sign up for. I’m running this workshop:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;at the Frozen Rockets academy in The Hague, The Netherlands, on June 10th, and&lt;/li&gt;
&lt;li&gt;at SmashingConf in Freiburg, Germany, next September.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can &lt;a href=&quot;https://academy.frozenrockets.nl/workshop/accessible-ui-patterns-10-june&quot;&gt;register for the Frozen Rockets workshop&lt;/a&gt; in The Hague today. Tickets are also on sale for &lt;a href=&quot;https://smashingconf.com/freiburg-2019/workshops/sara-soueidan/&quot;&gt;the SmashingConf workshop&lt;/a&gt; in September.&lt;strong&gt;I would love for you to come join me!&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;Many thanks to my friend Scott O’Hara for proofreading this article, his feedback, and for following up with his own findings and test results.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The SVG Filters Series</title>
    <link href="https://sarasoueidan.com/blog/svg-filters-series/"/>
    <updated>2019-01-15T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/svg-filters-series/</id>
    <content type="html">&lt;ul class=&quot;series&quot; data-series=&quot;&quot;&gt;
    &lt;li class=&quot;series__item&quot;&gt; 
        &lt;span class=&quot;series__item__title&quot;&gt;&lt;a href=&quot;https://tympanus.net/codrops/2019/01/15/svg-filters-101/&quot;&gt;SVG Filters 101&lt;/a&gt;&lt;/span&gt;
        &lt;div class=&quot;series__item__description&quot;&gt;
            The first article in a series on SVG filters. This guide will help you understand what they are and show you how to use them to create your own visual effects.
        &lt;/div&gt;
    &lt;/li&gt;
    &lt;li class=&quot;series__item&quot;&gt;
        &lt;span class=&quot;series__item__title&quot;&gt;&lt;a href=&quot;https://tympanus.net/codrops/2019/01/22/svg-filter-effects-outline-text-with-femorphology/&quot;&gt;SVG Filter Effects – Outline Text with &lt;code&gt;&amp;lt;feMorphology&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;
        &lt;div class=&quot;series__item__description&quot;&gt;
            In this second part of the SVG Filter series you&#39;ll learn all about the &lt;code&gt;feMorphology&lt;/code&gt; filter, how it works and how you can use it to create paint-like image effects and proper text outlines.
        &lt;/div&gt;
    &lt;/li&gt;
    &lt;li class=&quot;series__item&quot;&gt;
        &lt;span class=&quot;series__item__title&quot;&gt;&lt;a href=&quot;https://tympanus.net/codrops/2019/01/29/svg-filter-effects-poster-image-effect-with-fecomponenttransfer/&quot;&gt;SVG Filter Effects – Poster Image Effect with &lt;code&gt;&amp;lt;feComponentTransfer&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;
        &lt;div class=&quot;series__item__description&quot;&gt;
            In this third article in the series of articles about SVG Filters you&#39;ll learn all about the powerful &lt;code&gt;feComponentTransfer&lt;/code&gt; operation and how it can be used to control the individual R/G/B/A components on a pixel level independently. As a practical example, we will be creating a poster image effect by using this primitive to limit the number of colors in an image.
        &lt;/div&gt;
    &lt;/li&gt;
    &lt;li class=&quot;series__item&quot;&gt;
        &lt;span class=&quot;series__item__title&quot;&gt;&lt;a href=&quot;https://tympanus.net/codrops/2019/02/05/svg-filter-effects-duotone-images-with-fecomponenttransfer/&quot;&gt;SVG Filter Effects – Duotone Images with &lt;code&gt;&amp;lt;feComponentTransfer&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;
        &lt;div class=&quot;series__item__description&quot;&gt;
            In this fourth article in the series of articles about SVG Filters you&#39;ll learn how to use &lt;code&gt;feComponentTransfer&lt;/code&gt; to recreate Photoshop’s duotone image effect and control an image&#39;s luminance and color contrast.
        &lt;/div&gt;
    &lt;/li&gt;
    &lt;li class=&quot;series__item&quot;&gt;
        &lt;span class=&quot;series__item__title&quot;&gt;&lt;a href=&quot;https://tympanus.net/codrops/2019/02/12/svg-filter-effects-conforming-text-to-surface-texture-with-fedisplacementmap/&quot;&gt;SVG Filter Effects – Conforming Text to Surface Texture with &lt;code&gt;&amp;lt;feDisplacementMap&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;
        &lt;div class=&quot;series__item__description&quot;&gt;
            In this fifth article in the series of articles about SVG Filters you&#39;ll learn how to conform text to surface texture using an SVG displacement map similar to how you would do in graphics editors like Photoshop.
        &lt;/div&gt;
    &lt;/li&gt;
    &lt;li class=&quot;series__item&quot;&gt;
        &lt;span class=&quot;series__item__title&quot;&gt;&lt;a href=&quot;https://tympanus.net/codrops/2019/02/26/svg-filter-effects-moving-forward/&quot;&gt;SVG Filter Effects — Moving Forward&lt;/a&gt;&lt;/span&gt;
        &lt;div class=&quot;series__item__description&quot;&gt;
            In this last article of the SVG Filter Effects series, I’ll share a list of useful resources and experiments to learn more about SVG Filters to start creating your own effects.
        &lt;/div&gt;
    &lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>The Refactoring UI Book</title>
    <link href="https://sarasoueidan.com/blog/refactoring-ui/"/>
    <updated>2019-01-02T07:36:45Z</updated>
    <id>https://sarasoueidan.com/blog/refactoring-ui/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;I’ve never taken or had any design classes in school or university. Most of my (humble) design knowledge I’ve picked up online from random articles here and there, and from breaking down and building designs that I liked. So, when I found &lt;a href=&quot;https://twitter.com/steveschoger&quot;&gt;Steve&lt;/a&gt; on Twitter and saw how he was sharing design tips targeted at developers with no design background, I followed him in the blink of an eye. I&#39;m not exaggerating when I say that he was one of my best follows in 2018.&lt;/p&gt;
&lt;p&gt;I remember the day &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/981612024177287168&quot;&gt;I asked him to make a book&lt;/a&gt; out of all the tips he’d been sharing. I told him I’d give him my money in a heart beat. A book that contained all the useful tips he was sharing, &lt;em&gt;the way&lt;/em&gt; he was sharing them, would have been a box full of gems.&lt;/p&gt;
&lt;p&gt;Fast forward a few months, Steve and &lt;a href=&quot;https://twitter.com/adamwathan&quot;&gt;Adam&lt;/a&gt; have published their &lt;a href=&quot;https://refactoringui.com/book/&quot;&gt;Refactoring UI book&lt;/a&gt;, based on all the tips Steve was sharing, plus many more. And I’m not surprised to say that the book is just as good as I expected it would be.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/refactoring-ui-book.png&quot; alt=&quot;The Refactoring UI Book cover&quot; /&gt;
&lt;p&gt;Just like his tweets, the book is &lt;em&gt;chock full&lt;/em&gt; of design tips — brief, short tips written very well, straight to the point, and accompanied with visual respresentations of how to apply them and how &lt;em&gt;not&lt;/em&gt; to. One tip is followed by another, without any extra talk or gibberish in between. &lt;em&gt;Just&lt;/em&gt; my kind of content. &lt;em&gt;Just&lt;/em&gt; my kind of book. As I was reading it, I couldn’t help but think that this is how I would write my own book, which is why I enjoyed reading it so much. And I read it &lt;em&gt;fast&lt;/em&gt; because, again, there was no long or unnecessary talk — just the tips distilled down and lots of pretty visual eye candy.&lt;/p&gt;
&lt;p&gt;I learned a &lt;em&gt;lot&lt;/em&gt; reading the book. And my favorite part is that now I &lt;em&gt;understand&lt;/em&gt; design decisions made when I see them. I look at Dribbble shots and I think “Ah yeah I see what the designer did there!” and why they did it.&lt;/p&gt;
&lt;p&gt;If you’re a developer looking to improve your design skills to build more professionally-looking projects, or  if you’re looking to understand more about design decisions made by designers on your team, then this book is a great piece to add to your library.&lt;/p&gt;
&lt;p&gt;I got the full bundle (thanks, Steve 💜), which also comes with PDF files containing color swatches (I love these!), UI component design samples, icons, and font recommendations. There are also a couple of videos where Steve shows you how to design or refactor a UI and make it look better using the tips from the book. A choice of either the full package or the essentials (book + videos only) is available to purchase on &lt;a href=&quot;https://refactoringui.com/book/&quot;&gt;the site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, this is what I think of the book. Would I recommend it? &lt;em&gt;Of course!&lt;/em&gt;  So if you do purchase it, I hope you find it just as useful as I did.&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Nested Links Without Nesting Links</title>
    <link href="https://sarasoueidan.com/blog/nested-links/"/>
    <updated>2018-09-07T09:51:51Z</updated>
    <id>https://sarasoueidan.com/blog/nested-links/</id>
    <content type="html">&lt;p&gt;Chris Coyier started &lt;a href=&quot;https://spectrum.chat/thread/e45da96d-cd4d-4bd5-b785-44cee6b60e74&quot;&gt;a thought exercise thread&lt;/a&gt; last week asking the community how they would approach building nested links. I had the same requirement a couple of years ago when I was building the front-end foundation for &lt;a href=&quot;https://smashingmagazine.com/&quot;&gt;Smashing Magazine&lt;/a&gt;. So I thought I’d write my response to Chris’s thread out in the form of a blog post.&lt;/p&gt;
&lt;h3 id=&quot;the-challenge&quot; tabindex=&quot;-1&quot;&gt;The Challenge&lt;/h3&gt;
&lt;p&gt;The following video shows what an article on the home page’s list of Latest Articles behaves like. Take note of how the URL of the links change at the bottom left of the video recording as I hover over different areas of the clickable blog post. You’ll notice that each of the internal links in the post links to a different page than that of the post itself, while clicking anywhere else on the post item links to the full article.&lt;/p&gt;
&lt;figure class=&quot;video wide&quot;&gt;&lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/assets/videos/smashingmag-nested-links.mp4&quot; width=&quot;auto&quot; style=&quot;max-width: 100%;&quot;&gt;
Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;&lt;/figure&gt;
&lt;p&gt;Each article is clickable as a whole entity and would link to the article page. But we still wanted the links within the article item, such as the author name and any links inside the excerpt, to also work as regular links.&lt;/p&gt;
&lt;h3 id=&quot;native-markup-limitations&quot; tabindex=&quot;-1&quot;&gt;Native Markup Limitations&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/html5/text-level-semantics.html#the-a-element&quot;&gt;According to the specification&lt;/a&gt;, an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element’s content model specifically states that an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; cannot contain any interactive descendants. An &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element &lt;em&gt;is&lt;/em&gt; interactive, and so therefore you cannot nest an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; inside another &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This means that this markup is invalid:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    Link content that references&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; another link &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    within the main one.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fact, if you &lt;em&gt;do&lt;/em&gt; use that markup, your main link is going to break into two separate links, with some of its text content being left out in the process.&lt;/p&gt;
&lt;p&gt;The following image shows what the DOM looks like after the browser parses my nested links from the above example:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/nested-links.png&quot; alt=&quot;Screenshot of what the markup for our nested links looks like after being parsed by the browser.&quot; /&gt;
&lt;p&gt;The browser “breaks” when it finds an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; before it finds the closing tag for the preceding &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, to it takes it up on itself to close the previous &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-object-hack&quot; tabindex=&quot;-1&quot;&gt;The &lt;code&gt;object&lt;/code&gt; Hack&lt;/h3&gt;
&lt;p&gt;Upon searching for ways to nest links — if any existed, I came across &lt;a href=&quot;http://kizu.ru/en/fun/nested-links/&quot;&gt;this article&lt;/a&gt; by Roman Komarov, in which he explains his workaround for nesting links that he found when he was trying to nest links in one of his own projects.&lt;/p&gt;
&lt;p&gt;Roman came up with a brilliant way to make nesting links possible by working around the browser’s restrictions, taking advantage of how it parses HTML, and fooling it into allowing the nested link inside the first one using the &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; element: the inner link is wrapped in an &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; and this &lt;code&gt;object&lt;/code&gt; is given a random, invalid mime type.&lt;/p&gt;
&lt;p&gt;Because of the way browsers handle &lt;code&gt;object&lt;/code&gt; elements, the &lt;code&gt;object&lt;/code&gt; element is going to be completely ignored, allowing the content inside of it to be displayed in its stead. In fact, the contents of the &lt;code&gt;object&lt;/code&gt; are only there to be displayed as a fallback for when the &lt;code&gt;object&lt;/code&gt; itself fails to display. So we &lt;em&gt;make&lt;/em&gt; it fail, by providing an invalid type, and the browser then displays the content inside of it — our nested &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; — in its place, thus rendering the inner link inside the outer one. Note that this is only possible because:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;…after wrapping any HTML with such attributeless &lt;code&gt;object&lt;/code&gt; we would get just a wrapper element for this content. But a wrapper with an unusual trait: any content inside of it would be treated by browser’s parser without looking at the object’s context. So, using this trait we can, finally, nest one link into another, separating them for a parser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Albeit being a &lt;em&gt;very&lt;/em&gt; clever hack, this is still &lt;strong&gt;a hack&lt;/strong&gt;. It comes with its own limitations, including browser support that you’d have to work around. (Check Roman’s article out for more details.)&lt;/p&gt;
&lt;p&gt;This hack also wasn’t very practical for the Smashing Magazine use case. We shouldn’t have to set up a script to wrap every single inner link with an &lt;code&gt;object&lt;/code&gt;. Aside from being a hassle, in my very lazy developer opinion, this — I assume — might also have performance implications. So I continued looking for other — hopefully less hacky — options.&lt;/p&gt;
&lt;h3 id=&quot;the-css-only-layered-links&quot; tabindex=&quot;-1&quot;&gt;The CSS-only Layered Links&lt;/h3&gt;
&lt;p&gt;There’s a reason I say “layered” link, not “nested” link here. This technique fakes the behavior of nested links by overlaying one link on top of the whole item (article post in our case), and then elevating the remaining links on top of it.&lt;/p&gt;
&lt;p&gt;This results in the whole item area linking to the URL of that link overlay. The remaining links are elevated so their pointer events are not blocked by the overlay, thus allowing them to be independently clickable.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/csswizardry&quot;&gt;Harry Roberts&lt;/a&gt; has &lt;a href=&quot;http://jsfiddle.net/csswizardry/rxsna&quot;&gt;a JSFiddle&lt;/a&gt; demo of this technique.&lt;/p&gt;
&lt;p&gt;For the following markup:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post-link&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://www.google.com&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;feugiat vitae&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;, ultricies eget, tempor sit amet, ante. &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.apple.com/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Aenean fermentum&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Ut felis. Praesent dapibus, neque &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://www.facebook.com/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;id cursus faucibus&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://csswizardry.com/2013/02/introducing-csswizardry-grids/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post-link__read-more&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Read more&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;hellip;&quot;&gt;&amp;amp;hellip;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The styles (SCSS) look like this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.post-link&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* Position any links in the post excerpt at the top of the `z-index` stack. */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;/* Stretch the ‘read more’ link over the whole of the post.&lt;br /&gt;     * Hide the ‘read more’ link’s text. */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;.post-link__read-more&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;    0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;  0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;   0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;text-indent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;white-space&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; nowrap&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token comment&quot;&gt;/* Needs a heightened specificity to trump `.post-link a`.&lt;br /&gt;         * Stack it under all other links in the post text. */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token selector&quot;&gt;a&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following image shows a very rough visual representation of this technique:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/layered-links.png&quot; alt=&quot;A rough illustration of the layered links&quot; /&gt;
&lt;p&gt;Albeit brilliant, this technique had another issue that I wasn’t okay with: the keyboard tabbing order was, well, &lt;em&gt;out&lt;/em&gt; of order. Here is a video showing what tabbing through the links Harry’s demo looks like:&lt;/p&gt;
&lt;figure class=&quot;video wide&quot;&gt;&lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/assets/videos/bad-layered-links.mp4&quot; width=&quot;100%&quot;&gt;
Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;&lt;/figure&gt;
&lt;p&gt;Because we have a Read More link that overlays the whole post, the tabbing order goes like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tab to child link&lt;/li&gt;
&lt;li&gt;Tab to child link&lt;/li&gt;
&lt;li&gt;Tab to child link&lt;/li&gt;
&lt;li&gt;Tab (whole) post&lt;/li&gt;
&lt;li&gt;[tab to move to next post:]&lt;/li&gt;
&lt;li&gt;Tab next post’s child link&lt;/li&gt;
&lt;li&gt;Tab next post’s links&lt;/li&gt;
&lt;li&gt;Tab next post’s link&lt;/li&gt;
&lt;li&gt;Tab (whole) next post&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tabbing order felt very unnatural to me, so I knew I would have to adjust this technique to fix that.&lt;/p&gt;
&lt;h3 id=&quot;my-implementation&quot; tabindex=&quot;-1&quot;&gt;My Implementation&lt;/h3&gt;
&lt;p&gt;Harry’s technique provides everything I need for the Smashing use case, except for my expected tab order, especially given the markup on the magazine differed slightly from the markup Harry was working with:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;time&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;7 days ago&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- our first link 👇🏻 --&gt;&lt;/span&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/2018/08/desktop-wallpaper-calendars-september-2018/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;This is our post title&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;by &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/author/cosima-mielke&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Author Name&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            This is the post excerpt which very well contains &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;links&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; to places.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;visually-hidden&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Read More&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first link in the post markup is the title of the post which, naturally, links to the post itself.&lt;/p&gt;
&lt;p&gt;So I thought: what if, instead of overlaying the last link in the post — the Read More link — over the post, I would overlay the first link instead?&lt;/p&gt;
&lt;p&gt;Getting &lt;em&gt;the title of the post&lt;/em&gt; to expand and cover the entire post area would mean that that area would also link to the post, which is exactly what we want to do in the first place!&lt;/p&gt;
&lt;p&gt;And since we’re not overlaying the last link on top of the links prior to it, this fixes the tab order and we end up with tabbing that works like this:&lt;/p&gt;
&lt;figure class=&quot;video wide&quot;&gt;&lt;video controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/assets/videos/good-layered-links.mp4&quot; width=&quot;100%&quot;&gt;
Sorry, your browser doesn&#39;t support embedded videos.
&lt;/video&gt;&lt;/figure&gt;
&lt;p&gt;The user tabs through the posts by going through the title, its following “child” links, then the Read More link, then moves on to the title of the following post, its child links, its Read More link, and so on. We’ve surpassed the backwards jump where the entire post was re-focused after focusing its contents. (Usually, tabbing would happen the other way around: focus the container, then tab through its content.)&lt;/p&gt;
&lt;p&gt;Technically, the post title will be expanded to cover the post by expanding a &lt;code&gt;::before&lt;/code&gt; pseudo-element inside of, which practically expand the entire title’s box with it:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.the-post&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* elevate the links up */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.the-post-title&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; static&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;/* expand the pseudo-element to cover the post area */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token selector&quot;&gt;&amp;amp;::before&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ...&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ...&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ...&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ...&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ux-%26-usability-considerations&quot; tabindex=&quot;-1&quot;&gt;UX &amp;amp; Usability Considerations&lt;/h3&gt;
&lt;p&gt;You may have already noticed the major limitation to this technique: the post excerpt’s text is covered by the pseudo-element, which makes that text unselectable. If you try to select the text to copy it, you won’t be able to.&lt;/p&gt;
&lt;p&gt;This was a compromise the Smashing team were okay with after testing the design with their users. The inability to select the text wasn’t an issue, as not many users attempted to make that selection.&lt;/p&gt;
&lt;h3 id=&quot;final-words&quot; tabindex=&quot;-1&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;Calling these links “layered links” is a lot more appropriate and descriptive than “nested links”, given how they are implemented/styled.&lt;/p&gt;
&lt;p&gt;I would consider this technique “hacky” for sure, but if it works, and &lt;strong&gt;as long as it does not compromise the overall accessibility of the design&lt;/strong&gt;, then I see no reason not to use it.&lt;/p&gt;
&lt;p&gt;The most important takeaway from this is to remember to always test the usability and accessibility of your design, especially if you use unconventional CSS tricks to create it.&lt;/p&gt;
&lt;p&gt;If you’re interested in some of the other tricks I used during the Smashing magazine development, &lt;a href=&quot;https://vimeo.com/223433196&quot;&gt;check out the video of my talk&lt;/a&gt;, or &lt;a href=&quot;https://sarasoueidan.com/case-studies/smashing-magazine&quot;&gt;read the case study&lt;/a&gt; which includes a link to the talk slides.&lt;/p&gt;
&lt;p&gt;I hope you found this article useful.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br /&gt;
Sara&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How do you mark up an accordion?</title>
    <link href="https://sarasoueidan.com/blog/accordion-markup/"/>
    <updated>2018-09-03T10:54:24Z</updated>
    <id>https://sarasoueidan.com/blog/accordion-markup/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	I made &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/1035476406334054400&quot;&gt;a poll on Twitter&lt;/a&gt; the other day asking the #lazyweb how they would mark up an FAQ section — or a list of questions and their corresponding answers. I specifically asked for &lt;em&gt;markup&lt;/em&gt; suggestions. Turns out, people mark questions and answers up differently. I got some interesting insight from the responses I got that partly changed the way I would approach building an FAQ section, and some validation for the way I always have built them. The discussion was too interesting to not summarize in an article. The different possible markup approaches as well as useful resources are discussed below.
&lt;/p&gt;
&lt;h3 id=&quot;no-javascript&quot; tabindex=&quot;-1&quot;&gt;No JavaScript&lt;/h3&gt;
&lt;p&gt;The requirement for answering this question was to think of the answer in a no-JavaScript case.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Hey &lt;a href=&quot;https://twitter.com/hashtag/lazyweb?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#lazyweb&lt;/a&gt;, I got a small Friday poll for you:&lt;br /&gt;&lt;br /&gt;How do you mark up a list of questions and answers? (Think: FAQ)&lt;br /&gt;&lt;br /&gt;I’m talking about semantic markup, so forget about accordions for a second and assume there is no JS for that.&lt;br /&gt;&lt;br /&gt;Would you use:&lt;/p&gt;&amp;mdash; Sara Soueidan (@SaraSoueidan) &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/1035476406334054400?ref_src=twsrc%5Etfw&quot;&gt;August 31, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;Usually, FAQs are eventually turned into an accordion. Accordions require JavaScript to work (with the exception of the native &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; element which I’ll talk about shortly), and that JavaScript, if designed well, can be applied to almost any kind of proper markup — regardless of what elements are used to mark the questions and answers up. That’s why I specifically asked people to think about HTML semantics, not interactive behavior; otherwise, the one answer I would have probably gotten would have been “accordion”.&lt;/p&gt;
&lt;p&gt;I believe that it is imperative to think about how a component would render if no JavaScript behavior was available if you want that component to be truly accessible. Semantic HTML is the foundation of truly inclusive content. Start with the bare bones — the markup, and think about how it would render if no CSS or JS were enabled. &lt;em&gt;Then&lt;/em&gt;, enhance the component by adding interactive behavior to it using JavaScript, making sure that you don’t sacrifice the accessibility of it in the process. This usually means applying and using proper ARIA roles and attributes, &lt;a href=&quot;https://developer.paciellogroup.com/blog/2018/06/short-note-on-progressive-aria/&quot;&gt;progressively applied&lt;/a&gt;, via Javascript.&lt;/p&gt;
&lt;p&gt;An FAQ can be thought of as a &lt;em&gt;list&lt;/em&gt; of questions with answers, or a &lt;em&gt;series&lt;/em&gt; of questions and answers.&lt;/p&gt;
&lt;h3 id=&quot;a-series-of-questions-and-answers%3A-hx-%2B-div&quot; tabindex=&quot;-1&quot;&gt;A series of questions and answers: hx + div&lt;/h3&gt;
&lt;p&gt;A series of questions and answers can be marked up by using a series of headings for the questions, and paragraphs (probably wrapped in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;) for each answer. This is one of the most commonly used code patterns.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;How would you mark up a series of questions and answers?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	I would probably use headings, each followed by an answers most likely wrapped in a semantic-less wrapper.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;How would you mark up a series of questions and answers?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	I would probably use headings, each followed by an answers most likely wrapped in a semantic-less wrapper.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;How would you mark up a series of questions and answers?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	I would probably use headings, each followed by an answers most likely wrapped in a semantic-less wrapper.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The whole series of questions and answers would then also be wrapped in a container, or each pair of question and answer can be wrapped in an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;, and they can easily be scripted to add accordion behavior by potentially replacing the heading text content with a toggle &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; which controls the expanded/collapsed answer “panel”. ARIA attributes would be used to establish the relationship between the question’s toggle button and the associated answer, and icons can also be added to the button inline using JavaScript as well.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
	The enhancement of the markup to an interactive accordion is outside the scope of this article. Refer to the Further Resources section below for links to learn more about adding accordion interactivity to basic markup. 
&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-controls&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myID-1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-expanded&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;How would you mark up a series of questions and answers?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- svg icon here, styled and positioned using CSS --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myID-1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	I would probably use headings, each followed by an answers most likely wrapped in a semantic-less wrapper.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;	&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The way you might approach turning it into an accordion might be slightly different, but the requirements for making an accordion accessible should still be applied, so, in essence, the final result wouldn’t be too different.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages of this approach:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The markup is simple and can be easily converted into an interactive accordion. ✔&lt;/li&gt;
&lt;li&gt;Assistive technology users are able to navigate the FAQ using the headings. ✔&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;a-list-of-questions-with-answers%3A-ul-or-dl&quot; tabindex=&quot;-1&quot;&gt;A list of questions with answers: ul or dl&lt;/h3&gt;
&lt;p&gt;If you think about FAQs as &lt;em&gt;a list of questions with answers&lt;/em&gt;, you’ll probably want to use HTML lists to mark them up.&lt;/p&gt;
&lt;p&gt;I’d probably not use an ordered list (&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;) because the order of the questions is usually irrelevant. That leaves us with unordered lists (&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;) and definition lists (&lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;What both lists have in common is the semantics of a list — meaning that the questions and answers would be conveyed to assistive technologies as a list of items.&lt;/p&gt;
&lt;h4 id=&quot;an-unordered-list-of-questions-with-answers%3A-ul-li-%2B-hx-div&quot; tabindex=&quot;-1&quot;&gt;An unordered list of questions with answers: ul li + hx div&lt;/h4&gt;
&lt;p&gt;If you use an unordered list, each list item would contain both the question and the question’s corresponding answer.&lt;/p&gt;
&lt;p&gt;The semantics of an unordered list item &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; would not be enough to represent and distinguish the question and/from the answer. So I’d consider wrapping the question in a heading. This does feel odd, as I’ve never thought that an &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; as a container to a heading, but this code has some important benefits.&lt;/p&gt;
&lt;p&gt;I’d next wrap the content of the answer in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; so that I can easily toggle it when I want to add accordion functionality to the FAQ.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;What is a bird’s favorite sleeping spot?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Their owner’s shoulders and foreheads. They like to get warmth from a hooman’s neck and face.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; They also like always reminding you that they’re the boss.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Advantages of this approach:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assistive technologies (ATs) will announce the number of items, so their users will get an overview of how many questions there are. ✔&lt;/li&gt;
&lt;li&gt;AT users will be able to navigate the FAQ list using the headings. ✔&lt;/li&gt;
&lt;li&gt;It is also fairly easy to turn into an accordion using JavaScript and ARIA, similar to what we saw in the previous section. ✔&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;a-definition-list&quot; tabindex=&quot;-1&quot;&gt;A definition list&lt;/h4&gt;
&lt;p&gt;A definition list is similar to ordered and unordered lists. What distinguishes it from other lists is that it is made up of key/value pairs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The HTML &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt; element represents a description list. The element encloses a list of groups of terms (specified using the &lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt; element) and descriptions (provided by &lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt; elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs).&lt;/p&gt;
&lt;p&gt;—MDN&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have always used definition lists (&lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;) to mark up FAQs. I like the fact that a &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt; has a series of terms (&lt;code&gt;&amp;lt;dt&amp;gt;&lt;/code&gt;) and descriptions (&lt;code&gt;&amp;lt;dd&amp;gt;&lt;/code&gt;). A question would be a term. The answer would be its description.&lt;/p&gt;
&lt;p&gt;This approach got the most votes in my poll. This may partially be due to the fact that &lt;a href=&quot;http://w3c.github.io/html/grouping-content.html#the-dl-element&quot;&gt;the specification mentions&lt;/a&gt; questions and answers as an example usage for definition lists:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Term-description groups may be names and definitions, &lt;strong&gt;questions and answers&lt;/strong&gt;, categories and topics, or any other groups of term-description pairs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;(Emphasis mine)&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;Markup for a &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;-based FAQ would look like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Your question here?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;You answer here. It can be anything and as long as you want, and contain any type of content.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Your question here?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;You answer here. It can be anything and as long as you want, and contain any type of content.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Converted to an interactive accordion, and similar to what we’ve seen before, it would look like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-controls&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myID-1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-expanded&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Your question here?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dd&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myId-1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;You answer here. It can be anything and as long as you want, and contain any type of content.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-controls&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myID-2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-expanded&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;false&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Your question here?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;dd&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myId-2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;You answer here. It can be anything and as long as you want, and contain any type of content.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;dl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ve never hit any road blocks styling definition lists, but that’s probably because none of my projects required any styles that were not possible using the default markup. But many developers have, as the Twitter thread shows.&lt;/p&gt;
&lt;p&gt;Most styling limitations were due to the fact that it was invalid HTML to have a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; as a child of the &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;. This, in turn, meant that it would be difficult to group and style pairs of terms and descriptions.&lt;/p&gt;
&lt;p&gt;Today, it is perfectly &lt;a href=&quot;http://w3c.github.io/html/grouping-content.html#the-dl-element&quot;&gt;valid&lt;/a&gt; to add a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; as a child to a &lt;code&gt;&amp;lt;dl&amp;gt;&lt;/code&gt;. That said, &lt;a href=&quot;https://twitter.com/stevefaulkner&quot;&gt;Steve Faulkner&lt;/a&gt; points out that “this can cause issues for screen readers as the pattern changes the way the semantics are represented in some browsers.” Check out &lt;a href=&quot;https://s.codepen.io/stevef/debug/GxwaoP&quot;&gt;his test cases and results&lt;/a&gt; for more context and details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notes about this approach:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Some&lt;/em&gt; assistive technologies (ATs) will announce the number of items, so users of those technologies get an overview of how many questions there are. This, however, is unfortunately &lt;a href=&quot;https://codepen.io/aardrian/full/NzGaKP/&quot;&gt;not consistent across all tech&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;AT users will &lt;em&gt;not&lt;/em&gt; be able to navigate the questions like they could with headings.&lt;/li&gt;
&lt;li&gt;It is fairly easy to turn into an accordion using JavaScript and ARIA. ✔&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even though I will not be using them for marking up FAQs from now on after the discussions I had as a result of this poll, I would still use definition lists for other, more proper use cases. For example, I’ve used them before within articles where I list a set of available attributes or properties and then elaborate on each one and describe what it does.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/dl-example.png&quot; alt=&quot;Screenshot of an example usage of a definition list from one of my articles.&quot; /&gt;
	&lt;figcaption&gt;
		My &lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;SVG Coordinate Systems guide&lt;/a&gt; contains a perfect use case for definition lists.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;the-native-html-accordion%3A-details-%2B-summary&quot; tabindex=&quot;-1&quot;&gt;The native HTML accordion: details + summary&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; element represents a disclosure widget from which the user can obtain additional information or controls.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;– &lt;a href=&quot;https://www.w3.org/TR/html51/interactive-elements.html#the-details-element&quot;&gt;W3C HTML specification&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Inside &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt;, we can put any sort of content we want.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; has a friend called &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt;. When present inside &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt;, the first &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; element child represents the summary or legend of the &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Essentially, we can use &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; to create an accordion-like widget that the user can toggle open and closed. The &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; element, when present, acts as the content of the toggle for the accordion.&lt;/p&gt;
&lt;p&gt;Before doing the Twitter poll, I’d never considered using &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; to mark up FAQs. I’ve always thought of the semantics of these elements too literally: a summary is, well, a summary of the content of the details. Since the summary of an answer is derived from that answer itself then it is also an answer; and then a question could not be a &lt;summary&gt; because the question is not an answer. Confused yet?&lt;/summary&gt;&lt;/p&gt;
&lt;p&gt;I had a discussion about this with my friend &lt;a href=&quot;https://twitter.com/scottohara&quot;&gt;Scott O’Hara&lt;/a&gt; after tweeting the poll. We both made valid points, but the main reason we were confused and were disagreeing is that I was talking about &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; as a “summary” whereas Scott was referring to the &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; element as, well, a generic “toggle” element.&lt;/p&gt;
&lt;p&gt;Turns out, and I‘ve finally made my peace with the fact, that &lt;code&gt;&amp;lt;details&lt;/code&gt;&amp;gt; and &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; don’t literally represent content and summary of that content. The spec editors settled for these names out of a bunch of other options they had. Because naming things is hard.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Because expressing perfect meaning in a single small, easy-to-spell word is hard, so we approximate.&lt;br /&gt;&lt;br /&gt;I remember there being a lot of possibilities when naming that - &lt;spoiler&gt; was my favorite. 😀&lt;/spoiler&gt;&lt;/p&gt;&amp;mdash; 🌺Taudry Hepburn🌺 (@tabatkins) &lt;a href=&quot;https://twitter.com/tabatkins/status/1035560054768857089?ref_src=twsrc%5Etfw&quot;&gt;August 31, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;I would have preferred &lt;code&gt;&amp;lt;toggle&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;panel&amp;gt;&lt;/code&gt; as truly generic names. But if &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; are just meant to be generic names, then using them to mark up FAQs starts to make a tiny bit more sense.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I think of it as: the &amp;quot;summary&amp;quot; is a short description of what you will see if you expand the details. A question in a FAQ is a summary of what the answer will cover.&lt;br /&gt;&lt;br /&gt;But yeah, I like toggle/panel more. Someone should have got you on the committee. But it&amp;#39;s too late now.&lt;/p&gt;&amp;mdash; Amelia Bellamy-Royds (@AmeliasBrain) &lt;a href=&quot;https://twitter.com/AmeliasBrain/status/1035584167327621120?ref_src=twsrc%5Etfw&quot;&gt;August 31, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;So, marking an FAQ up using &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; is pretty simple:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;summary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Why is naming things so hard?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;summary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Because it just is.&amp;lt;/&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;summary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Why is naming things so hard?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;summary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Because it just is.&amp;lt;/&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;details&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;… and it comes with &lt;strong&gt;some nice advantages, and some limitations:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You get the accordion behavior (collapsible panels) baked in by default. ✔&lt;/li&gt;
&lt;li&gt;The accordion is mostly fully accessible (ATs and keyboard) by default. Scott O’Hara wrote and shared &lt;a href=&quot;https://www.scottohara.me/blog/2018/09/03/details-and-summary.html&quot;&gt;the results of his tests&lt;/a&gt; with popular screen readers. Make sure to read his post before deciding to use &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; as an accordion, as there are some things you’ll need to be aware of:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;For general use within the context of a larger section of content, details and summary are well supported. However, if you want to treat them as a more complex accordion component, or need to support Internet Explorer and Edge, you’re going to need some JavaScript (and ARIA attributes for IE/Edge).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; element and its &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; are fairly easily styled. (Some specific browser handling is required but nothing too complex.) ✔&lt;/li&gt;
&lt;li&gt;You &lt;em&gt;can’t&lt;/em&gt; currently animate the opening and closing of the details panel. But you can &lt;a href=&quot;https://codepen.io/brianhaferkamp/pen/jywbVZ&quot;&gt;work around&lt;/a&gt; it by animating the content inside the &lt;code&gt;details&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Opera Mini, IE and Edge currently don’t &lt;a href=&quot;https://caniuse.com/#feat=details&quot;&gt;support&lt;/a&gt; &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt;. But,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; degrade gracefully to show their content by default, without the interactive behavior, which, in my opinion, is a perfectly acceptable fallback experience.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;so%2C-why-does-this-all-even-matter%3F&quot; tabindex=&quot;-1&quot;&gt;So, why does this all even matter?&lt;/h3&gt;
&lt;p&gt;Because &lt;a href=&quot;https://twitter.com/Mandy_Kerr/status/1027561153138896897&quot;&gt;semantic HTML matters&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@mandy.michael/building-websites-for-safari-reader-mode-and-other-reading-apps-1562913c86c9&quot;&gt;is essential for creating truly inclusive and functional Web sites&lt;/a&gt; that work across the widest range of apps possible.&lt;/p&gt;
&lt;p&gt;Sure, there are different ways for doing one thing, but as long as all these different ways offer true accessibility, then we have the freedom to choose whichever technique we like.&lt;/p&gt;
&lt;p&gt;It’s always necessary, in my opinion, to consider what content would render and look like in foreign environments, or in environments that are not controlled by our own styles and scripts. Writing semantic HTML is the first step in achieving truly resilient Web sites and applications.&lt;/p&gt;
&lt;h3 id=&quot;further-resources&quot; tabindex=&quot;-1&quot;&gt;Further Resources&lt;/h3&gt;
&lt;p&gt;If you need to learn more about creating accordions that are accessible, I recommend checking these resources out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.scottohara.me/blog/2017/10/25/accordion-release.html&quot;&gt;Accessible ARIA Accordions&lt;/a&gt; by Scott O’Hara.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://inclusive-components.design/tabbed-interfaces/&quot;&gt;Collapsible Sections&lt;/a&gt; by Heydon Pickering.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://davatron5000.github.io/a11y-nutrition-cards/components/accordion&quot;&gt;Accordion&lt;/a&gt; accessibility expectations by Dave RUpert.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#accordion&quot;&gt;Accordion WAI-ARIA Authoring Practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
&lt;p&gt;—Sara&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
	Huge thanks to everyone who contributed to the Twitter thread with insightful content, as well as to my friend Scott O’Hara, who has taught me, and still teaches me, so much about accessibility.
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
</content>
  </entry>
  
  <entry>
    <title>On Switching from HEX &amp; RGB to HSL</title>
    <link href="https://sarasoueidan.com/blog/hex-rgb-to-hsl/"/>
    <updated>2018-08-12T11:31:26Z</updated>
    <id>https://sarasoueidan.com/blog/hex-rgb-to-hsl/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;A couple of weeks ago I tweeted about a feature that I didn’t know existed in VS Code: the visual color editor that pops up when you hover over color values in a style sheet.&lt;/p&gt;
&lt;figure&gt;
    &lt;video class=&quot;video-gif&quot; controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/videos/hsl-editor.mp4&quot; width=&quot;100%&quot;&gt;
        Sorry, your browser doesn&#39;t support embedded videos.
    &lt;/video&gt;
    &lt;figcaption&gt;The VS Code color editor that pops up when you hover over a color value. The editor allows you to visually choose and edit colors, and to switch from one color format to another.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the context of the tweet I mentioned that I had converted all the colors on my site from the Hexadecimal and RGB(A) formats to the HSL format. A bunch of folks asked me why I made this switch. This article is my response.&lt;/p&gt;
&lt;p&gt;I’ve been using the Hexadecimal and RGB(A) color formats in my CSS for as long as I can remember. But I’ve never found these formats intuitive or easy to read, let alone tweak. I’ve always felt crippled whenever I needed to tweak the colors for contrast, or create colors that work well with other colors. I always resorted to GUIs, which made my workflow less than optimal. Until a while back when I came across &lt;a href=&quot;https://medium.com/@mwichary/dark-theme-in-a-day-3518dde2955a&quot;&gt;a great article&lt;/a&gt; in which Marcin Wichary shows how he took advantage of the &lt;code&gt;hsl()&lt;/code&gt; function in CSS to create different shades of colors for a dark theme for an app he was working on. That’s when I had an epic facepalm moment: how did I forget about HSL?!&lt;/p&gt;
&lt;p&gt;I knew the &lt;code&gt;hsl()&lt;/code&gt; function existed in CSS — heck, I even wrote &lt;a href=&quot;https://codrops.com/&quot;&gt;an entry about it in the Codrops CSS Reference&lt;/a&gt;, but I don’t know why I never took advantage of it before now.&lt;/p&gt;
&lt;p&gt;When I think about it, I guess it all goes back to my &lt;em&gt;“Use it only when you need it”&lt;/em&gt; principle. &lt;strong&gt;I only introduce tools into my workflow when they offer great value for my projects.&lt;/strong&gt; I’ve never given too much thought for the color scheme on my site — especially since I love black and white and have been sticking to them since forever, with one or two highlight colors for links and buttons here and there. So I never really needed a more powerful color system, despite the frustration I had whenever I tweaked the few colors I use on the site.&lt;/p&gt;
&lt;p&gt;But with more sections added to the site during the last couple of years, and a few more sections I’m going to add later, and that will have their own set of colors, it became clear to me that color management in the CSS was going to get out of hand, and that I needed a more intuitive and sensible way to choose and tweak colors, this was particularly true because I also want to offer a couple of themes to make my site’s UI friendlier. Enter HSL.&lt;/p&gt;
&lt;h3 id=&quot;hsl-%3D%3D-hue%2C-saturation%2C-lightness&quot; tabindex=&quot;-1&quot;&gt;HSL == Hue, Saturation, Lightness&lt;/h3&gt;
&lt;p&gt;In CSS, an HSL color can be expressed using the &lt;code&gt;hsl()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;33&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 80%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first parameter is the hue value, the second parameter is the saturation value, and the third is the lightness value. The function also has another variation: &lt;code&gt;hsla()&lt;/code&gt;, which takes the same parameters, with an addition fourth parameter that controls the opacity of the color.&lt;/p&gt;
&lt;p&gt;The best way to understand HSL if you’re not familiar with it is to consult a color wheel.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/color-wheel.png&quot; alt=&quot;Hue angles on a color wheel&quot; style=&quot;display: block; max-width: 400px; margin: 0 auto;&quot; /&gt;
&lt;br /&gt;
&lt;h5 id=&quot;hue&quot; tabindex=&quot;-1&quot;&gt;Hue&lt;/h5&gt;
&lt;p&gt;The Hue determines what color of the rainbow something is. &lt;strong&gt;The value of the hue is the angle of that color on the color wheel.&lt;/strong&gt; Red starts at 0 degrees, and the rest of the colors follow along the 360 degrees. (You don’t need to specify the unit of the angle in the &lt;code&gt;hsl()&lt;/code&gt; function because it is the default.)&lt;/p&gt;
&lt;p&gt;&lt;video class=&quot;video-gif&quot; controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/videos/hue.mp4&quot; width=&quot;100%&quot; style=&quot;max-width: 300px; margin: 1em auto 2em;&quot;&gt;
Sorry, your browser doesn’t support embedded videos.
&lt;/video&gt;&lt;/p&gt;
&lt;h5 id=&quot;saturation&quot; tabindex=&quot;-1&quot;&gt;Saturation&lt;/h5&gt;
&lt;p&gt;Colors can be vivid (rich) or dull. The less of the color there is, the more is turns into a shade of grey, depending on the hue and lightness you start with. Somewhere along the line — between the 100% pure hue and the shade of grey, you can see tinted grey, or, if you look at it the other way around, you see a dull hue. &lt;strong&gt;Saturation controls how vivid or dull a color is.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;video class=&quot;video-gif&quot; controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/videos/saturation.mp4&quot; width=&quot;100%&quot; style=&quot;max-width: 300px; margin: 1em auto 2em;&quot;&gt;
Sorry, your browser doesn’t support embedded videos.
&lt;/video&gt;&lt;/p&gt;
&lt;h5 id=&quot;lightness&quot; tabindex=&quot;-1&quot;&gt;Lightness&lt;/h5&gt;
&lt;p&gt;HSL works by tinting colors with white, which is also similar to how I used to deal with colors back in my days of watercolor painting. If I wanted to make a color lighter, I’d add white. If I wanted to make it darker, I’d add black. This is how the Lightness parameter works, where going below 50% means you’re starting to add black to the hue and creating a new &lt;em&gt;shade&lt;/em&gt; of the color, and going above 50% means you’re adding white, creating a &lt;em&gt;tint&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;video class=&quot;video-gif&quot; controls=&quot;&quot; autoplay=&quot;&quot; loop=&quot;&quot; muted=&quot;&quot; playsinline=&quot;&quot; src=&quot;https://sarasoueidan.com/videos/lightness.mp4&quot; width=&quot;100%&quot; style=&quot;max-width: 300px; margin: 1em auto 2em;&quot;&gt;
Sorry, your browser doesn’t support embedded videos.
&lt;/video&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;
        In color theory, a tint is the mixture of a color with white, which increases lightness, while a shade with black, which reduces lightness. A tone is produced either by the mixture of a color with grey, or by both tinting and shading.[1] Mixing a color with any neutral color (including black, gray and white) reduces the chroma, or colorfulness, while the hue remains unchanged.
    &lt;/p&gt;
    &lt;cite&gt;— &lt;a href=&quot;https://en.wikipedia.org/wiki/Tints_and_shades&quot;&gt;Wikipedia&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;p&gt;When you define a color in the HSL format, you pick a color in the form of an angle between 0 and 360. Setting the saturation to 100% and the lightness to 50% you get the purest form of that color. Tweaking the color from there on becomes very intuitive.&lt;/p&gt;
&lt;h3 id=&quot;hsl-and-color-harmonies&quot; tabindex=&quot;-1&quot;&gt;HSL and Color Harmonies&lt;/h3&gt;
&lt;p&gt;Using the color wheel to pick colors has many benefits. One of the main advantages of HSL is that creating color harmonies becomes a piece of cake.&lt;/p&gt;
&lt;p&gt;Complementary colors are located across from one another on the wheel. So if you start with a color and you want to get its complimentary one, all you need to do in CSS is to add 180° to the value of the Hue:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token property&quot;&gt;--primary-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;token function&quot;&gt;hsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;257&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 42%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token property&quot;&gt;--complementary-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;437&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 42%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; // 257 + 180 === 257 - 180&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing you’ll probably notice in this example is that my complementary hue angle is greater than 360. Guess what? That’s okay, because HSL is smart enough to loop around the color wheel again. You could also have deducted 180 degrees from the primary hue if you didn’t want to add them.&lt;/p&gt;
&lt;!-- &lt;figure&gt; --&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/color-harmonies-2.png&quot; alt=&quot;Color Harmonies&quot; /&gt;
    &lt;!-- &lt;figcaption style=&quot;text-align: center; margin-top: 1em&quot;&gt;Color Harmonies.&lt;/figcaption&gt; --&gt;
&lt;!-- &lt;/figure&gt; --&gt;
&lt;p&gt;There are many color harmonies (or &lt;em&gt;schemes&lt;/em&gt;) as the image above shows. Similar to what we did above with the complimentary scheme, triadic color schemes can be created by adding (or subtracting) 120°. You can also create analogous color combinations with 30° separating the hues. You can also create monochromatic harmonies easily, with one main hue and then tweaking the lightness to get different tints and shades of that hue. The sky is the limit.&lt;/p&gt;
&lt;h3 id=&quot;the-switch&quot; tabindex=&quot;-1&quot;&gt;The Switch&lt;/h3&gt;
&lt;p&gt;The switch itself was super quick. I installed a Sublime Text plugin that converts all of my colors to HSL format in a fraction of a second. That’s all it took. Yay 🙌🏻 to useful tools (and to the brilliant people who make them).&lt;/p&gt;
&lt;h3 id=&quot;hsl-%2B-css-custom-properties-%3D-%F0%9F%92%9C&quot; tabindex=&quot;-1&quot;&gt;HSL + CSS Custom Properties = 💜&lt;/h3&gt;
&lt;p&gt;CSS Custom Properties (a.k.a CSS Variables) are the &lt;em&gt;best&lt;/em&gt; when it comes to creating multiple themes that can be applied on the fly. They:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;are live variables, available at run time. This makes it possible to change and update the values of these variables on the fly, and the changes will be reflected on the page without refreshing it.&lt;/li&gt;
&lt;li&gt;can be inlined in a style attribute, in a style tag, or updated within a style sheet — all live, just like any other CSS property. This means that you don’t need to request a separate style sheet for the different themes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can define a set of colors for each theme and then “activate” the theme by updating the value of a data attribute on the root element. Or you could use class names, if you prefer. The value of the theme data attribute is updated upon user’s interaction with a set of inputs specifically created for changing the theme.&lt;/p&gt;
&lt;p&gt;You can use a CSS Variables as a value inside another variable. And you can use CSS Variables in combination with the calc() function. This, combined with hsl(), wields a lot of power when it comes to creating, maintaining and tweaking site-wide color themes.&lt;/p&gt;
&lt;p&gt;Marcin already showed a great example in his article that I recommend checking out if you haven’t already. I imagine creating different themes leveraging CSS Variables and HSL &lt;em&gt;could&lt;/em&gt; look something like this:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* ...some styles... */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--hue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 257&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--complimentary-hue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--hue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; - 180&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* The styles here are mostly random. Don’t judge. */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--hue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 42%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--background-dark&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--hue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 28%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;--button-background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--complimentary-hue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 26%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 55%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* etc. */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;html[data-theme=&#39;green&#39;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--hue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 128&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;html[data-theme=&#39;pink&#39;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;--hue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 313&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can organize the code in &lt;em&gt;any&lt;/em&gt; and &lt;em&gt;many&lt;/em&gt; different ways, all depending on your own project and needs. This is just a simple example showing how HSL can be used to create more maintainable and readable color swatches and relationships, especially when combined with CSS Variables. I’ll come back with another article and a real life example another time. 😌&lt;/p&gt;
&lt;h3 id=&quot;useful-resources&quot; tabindex=&quot;-1&quot;&gt;Useful Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://tympanus.net/codrops/css_reference/hsl/&quot;&gt;hsl() Codrops CSS Entry&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://chromatichq.com/blog/understanding-and-using-hsl-your-css&quot;&gt;Understanding and Using HSL in your CSS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Marcin Wichary’s &lt;a href=&quot;https://medium.com/@mwichary/dark-theme-in-a-day-3518dde2955a&quot;&gt;Dark Theme in a Day&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;final-words&quot; tabindex=&quot;-1&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;I’ve been meaning to create a living style guide for my site for over a year now. But most of us know that our own Web sites usually sit on the shelf with a lower priority compared to client projects, and this is particularly true for freelancers. We’d rather be spending the time working on client projects and making a living. But what we tend to neglect is the fact that our sites are our online home, the place clients visit to enquire about work, and it’s important that they reflect the kind of quality and organization that we promise to offer our clients.&lt;/p&gt;
&lt;p&gt;I’m currently working on cleaning up the code and styles of my site, organizing the CSS files by creating componentized styles, and, eventually, working my way into creating a living style guide.&lt;/p&gt;
&lt;p&gt;With HSL, I now feel like I have real control over color management — every aspect of it, from choosing colors to controlling how they relate to and work with each other. Creating color relationships and swatches for theming has never been more intuitive or as easy for me.&lt;/p&gt;
&lt;p&gt;I’ve recently &lt;a href=&quot;https://www.youtube.com/watch?v=VYWPH8QGuGE&amp;amp;list=PL4CMETp4gcvMWLqdQlz5gl2GerF2WH7RU&amp;amp;index=2&amp;amp;t=0s&quot;&gt;learned that Github also uses HSL&lt;/a&gt; as their color format. I really like the tip of how they moved from a dull, grey-grey into a more blue-tinted grey, which is made possible by choosing the blue hue you want and then desaturating it enough to get to the level of grey you want out of it, and decreasing its lightness to darken it as needed.&lt;/p&gt;
&lt;p&gt;HSL is a very powerful color format, especially when combined with other CSS features like CSS Variables. And I intend to take full advantage of it from now on. I’ll share any special tips or tricks that I learn or come up with in my process as I go.&lt;/p&gt;
&lt;p&gt;Cheers, &lt;br /&gt;
Sara&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>SVG Filters: The Crash Course</title>
    <link href="https://sarasoueidan.com/blog/svg-filters/"/>
    <updated>2018-08-11T00:47:34Z</updated>
    <id>https://sarasoueidan.com/blog/svg-filters/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;I always try to customize in-house client &lt;a href=&quot;https://sarasoueidan.com/workshops/&quot;&gt;workshops&lt;/a&gt; to my client’s needs. That sometimes also means that if my client’s design and dev team is interested in learning something that is not covered in my workshop, I will tweak the content of the workshop to make sure they learn what they need to make their work better.&lt;/p&gt;
&lt;p&gt;One such example is when &lt;a href=&quot;http://localhost:1313/blog/netflix-workshop/&quot;&gt;I ran my SVG Workshop for the design and engineering team at Netflix&lt;/a&gt; last year. &lt;a href=&quot;https://twitter.com/Elijah_Meeks&quot;&gt;Elijah&lt;/a&gt; told me he’d be interested in learning more about SVG Filters. I hadn’t dug into SVG filters before that, so I took his request as an opportunity to finally do it, so that I could customize the workshop for them.&lt;/p&gt;
&lt;p&gt;I learned all the basics of SVG filters in time for the workshop, and then spent the following two months learning more. The material I gathered, learned and created turned out to be useful enough to share with others, so I thought I’d write a series of articles on the topic, maybe even give them their own URL somewhere. I also thought they’d be good material for an interesting talk, so I created a talk and gave that talk twice this year: the debut was at &lt;a href=&quot;https://beyondtellerrand.com/&quot;&gt;Beyond Tellerrand&lt;/a&gt; Munich in January, and the second one was at &lt;a href=&quot;https://cssday.nl/&quot;&gt;CSS Day&lt;/a&gt; in Amsterdam last month.&lt;/p&gt;
&lt;p&gt;If you know me, you know that my talks tend to be fast, packed with practical and technical goodies and tips. This talk was no exception. And the feedback to both talks was mind-blowing.&lt;/p&gt;
&lt;p&gt;I had not shared the slides for the talk before today. The main reason was that I wanted to create that series of articles that I’d been meaning to write on the topic. But that plan never saw the day of light, and, to be quite frank, I don’t think that it will any time soon because I don’t feel as excited to write long, deep dives about SVG as I used to. My interest and excitement is shifting to other aspects of the front-end. I’m still very much into SVG but only as one of the many tools in our front-end arsenal, and my future articles are going to reflect that.&lt;/p&gt;
&lt;p&gt;So I decided to write this article to share the video(s) of the talk(s), the slides, and some links for if you’re interested in learning more about SVG Filters from further resources.&lt;/p&gt;
&lt;h3 id=&quot;the-video-recording&quot; tabindex=&quot;-1&quot;&gt;The Video Recording&lt;/h3&gt;
&lt;p&gt;The following is the video recording of my talk at btconf:&lt;/p&gt;
&lt;div class=&quot;l-aspect-ratio wide&quot;&gt;
    &lt;iframe src=&quot;https://player.vimeo.com/video/251312501&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/251312501&quot;&gt;SVG Filters: The Crash Course - Sara Soueidan - btconfMUC2018&lt;/a&gt; from &lt;a href=&quot;https://vimeo.com/beyondtellerrand&quot;&gt;beyond tellerrand&lt;/a&gt; on &lt;a href=&quot;https://vimeo.com/&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don’t want to slow this page down too much by embedding two videos, so here’s &lt;a href=&quot;https://vimeo.com/283654933&quot;&gt;a link to the CSS Day talk recording&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;may&lt;/em&gt; want to watch the videos at a slower pace than the default. 🙈&lt;/p&gt;
&lt;p class=&quot;note update&quot;&gt;
    If you run an event and would like me to give this talk at it, please feel free to &lt;a href=&quot;mailto:soueidan.sara@gmail.com&quot;&gt;drop me a line&lt;/a&gt; and request it.
&lt;/p&gt;
&lt;h3 id=&quot;the-talk-slides&quot; tabindex=&quot;-1&quot;&gt;The Talk Slides&lt;/h3&gt;
&lt;p&gt;You can find the slides online &lt;a href=&quot;https://sarasoueidan.com/slides/SVG-Filters-Crash-Course.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; 
&lt;div class=&quot;l-aspect-ratio wide&quot;&gt;
  &lt;object width=&quot;100%&quot; height=&quot;100%&quot; type=&quot;application/pdf&quot; data=&quot;https://sarasoueidan.com/slides/SVG-Filters-Crash-Course.pdf?#zoom=27&amp;scrollbar=0&amp;toolbar=0&amp;navpanes=0&quot; id=&quot;pdf_content&quot;&gt;
  &lt;/object&gt;
&lt;/div&gt;
&lt;h3 id=&quot;further-resources&quot; tabindex=&quot;-1&quot;&gt;Further Resources&lt;/h3&gt;
&lt;p&gt;I Googled a &lt;em&gt;lot&lt;/em&gt; while learning about filters. I jumped between the &lt;a href=&quot;https://www.w3.org/TR/filter-effects/&quot;&gt;official specification&lt;/a&gt; and a bunch of articles that were not specifically about SVG filters, but more about the concepts that you need to know about in order to understand SVG filters. So I learned about noise generation, turbulence, random math functions, color matrices, color functions, Gaussian and other blur operations, and so, so much more. But there were a few resources that I found myself coming back to, and those include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://webplatform.github.io/docs/svg/tutorials/smarter_svg_filters/&quot;&gt;The Web Platform SVG Filter docs&lt;/a&gt; were an indispensable resource.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I learned so much from &lt;a href=&quot;https://twitter.com/mmullany&quot;&gt;Michael Mullany&lt;/a&gt;’s work. He wrote some of the content of the Web Platform docs, and has written &lt;a href=&quot;https://www.creativebloq.com/netmag/how-go-beyond-basics-svg-filters-71412280&quot;&gt;a wonderful introduction to SVG filters for net magazine&lt;/a&gt; that I learned a tonne from.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Michael also has &lt;a href=&quot;https://codepen.io/mullany/&quot;&gt;a bunch of SVG filter experiments on Codepen&lt;/a&gt; that I highy recommend checking out. I also broke down most of his pens and one of the demos in my talk was inspired by / borrowed from his examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2015/05/why-the-svg-filter-is-awesome/&quot;&gt;Dirk Weber’s wonderful experiments on Smashing Magazine&lt;/a&gt;. The article doesn’t dive into the concepts needed or used in SVG filter primitives, but I broke down some of his demos as a way of learning more about the filters used.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I learned everything else by picking up small tips and pieces of information from here and there and sewing them together.&lt;/p&gt;
&lt;h3 id=&quot;so-many-possibilities&quot; tabindex=&quot;-1&quot;&gt;So Many Possibilities&lt;/h3&gt;
&lt;p&gt;I only scratched the surface of what is possible with SVG Filters. You can do &lt;em&gt;so&lt;/em&gt; much with SVG Filters. As I showed in my talk, you can recreate many graphic editor capabilities using almost exactly the same steps in SVG using filter primitives. But there are also limitations. I was particularly interested in recreating &lt;a href=&quot;https://www.youtube.com/watch?v=6BWA5pAATKQ&quot;&gt;one particular Photoshop color glitch effect&lt;/a&gt; when I was working on the demos for the talk, but I don’t think there’s a way to do that using SVG’s filter primitives. I could be wrong, though. After all, I only scratched the surface and stopped halfway through my research because I had to focus on client work. So if you know a way to do this, please feel free to share and &lt;a href=&quot;https://twitter.com/SaraSoueidan&quot;&gt;tweet at me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After my talk, many people expressed their interest in experimenting with SVG filters, and many of them already started sharing great demos on Codepen. &lt;a href=&quot;https://twitter.com/yoksel_en&quot;&gt;Yoksel&lt;/a&gt; has been tweeting about her SVG filter experiments lately that I highly recommend checking out. Others have requested more resources after my talk, which prompted me to write this article today. So, I hope you too find it useful and are excited enough to experiment with SVG filters today.&lt;/p&gt;
&lt;p&gt;Cheers,&lt;br /&gt;
Sara&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Interview: net Magazine September 2018 Issue #310</title>
    <link href="https://sarasoueidan.com/blog/net-interview-2018/"/>
    <updated>2018-08-09T11:09:53Z</updated>
    <id>https://sarasoueidan.com/blog/net-interview-2018/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
    The September 2018 issue of &lt;a href=&quot;https://www.creativebloq.com/net-magazine&quot;&gt;net Magazine&lt;/a&gt; came out today, featuring a six-page interview with yours truly, discussing all things front-end development and UX ahead of my upcoming &lt;a href=&quot;https://sarasoueidan.com/workshops/universal-components/&quot;&gt;workshop&lt;/a&gt; at &lt;a href=&quot;https://www.generateconf.com/london/&quot;&gt;Generate Conference&lt;/a&gt; in London.
&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/me/netmag-2018.jpg&quot; alt=&quot;Screenshot of the netmag interview&quot; /&gt;
    &lt;figcaption&gt;
        The interview features photos taken by me, in and outside of my home office.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This isn’t my first interview feature in net magazine. My first feature was in 2015, a short while after I was &lt;a href=&quot;https://sarasoueidan.com/blog/developer-of-the-year-2-15-net-award/&quot;&gt;awarded the Developer of the Year award&lt;/a&gt; in the 2015 &lt;a href=&quot;https://thenetawards.com/&quot;&gt;net awards&lt;/a&gt;. But this interview is different, and I prefer it over the previous one for a a couple of reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The previous interview didn’t focus much on my work as a front-end developer, even though I would have liked it to. This interview, on the other hand, is &lt;em&gt;all about&lt;/em&gt; my work at the intersection of front-end development and UX. I enjoyed talking about what I do, including ways I stay productive and healthy during my work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This interview features photos that I took myself, as opposed to having a professional photographer take them. With the exception of a photo of me speaking at &lt;a href=&quot;http://cssday.nl/&quot;&gt;CSS Day&lt;/a&gt; last June — which was taken by &lt;a href=&quot;https://twitter.com/drewm&quot;&gt;Drew McLellan&lt;/a&gt; — all the photos were taken by me, using my camera, with the help of my faithful tripod and remote control combination. It was fun doing these self portrait photoshoots over the last few months.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/me/netmag-2018-1.jpg&quot; alt=&quot;Screenshots from the netmag interview&quot; /&gt;
&lt;p&gt;The issue is now out, and you can buy a physical copy of the magazine or a digital copy if you use the net magazine mobile app.&lt;/p&gt;
&lt;p&gt;—Sara&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>On Designing and Building Toggle Switches</title>
    <link href="https://sarasoueidan.com/blog/toggle-switch-design/"/>
    <updated>2018-07-23T01:51:50Z</updated>
    <id>https://sarasoueidan.com/blog/toggle-switch-design/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;Yesterday I was working on creating the slides and accompanying demos for my upcoming &lt;a href=&quot;http://www.webdirections.org/code/speakers/sara-soueidan.php&quot;&gt;Web Directions Code talk&lt;/a&gt; next week. One of the demos I’m creating is a basic proof of concept for a simple switch that is used to switch the theme of a UI from light to dark and vice versa. I liked, and was inspired, by the theme switch in the Medium app, shown below.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/Medium-theme-switch.jpg&quot; alt=&quot;Screenshot of the Medium Theme Switcher&quot; style=&quot;width: 100%&quot; /&gt;
	&lt;figcaption&gt;
		The Medium app’s theme customizer is a simple popup panel that includes a simple switch for switching from light to dark mode and vice versa.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The only difference is that I wanted my switch to explicitly state which theme is currently enabled, so instead of just enabling and disabling a dark theme like the Medium switch, I wanted the user to explicitly switch between Light and Dark options. There’s no particular reason for that other than personal preference. There are &lt;a href=&quot;https://inclusive-components.design/a-theme-switcher/&quot;&gt;other ways&lt;/a&gt; to do this as well. How you design it is a personal preference, as long as it works and is easily understandable by users.&lt;/p&gt;
&lt;p&gt;As always, I started thinking about how to mark this simple element up, ensuring accessibility is baked right into it from the start. So I started doing my homework and reading and learning all I can about this topic.&lt;/p&gt;
&lt;p&gt;It was important for me to make sure this demo is accessible even if it’s just a quick proof of concept for a talk. First of all, because the code for the demo will be public, so I have a bigger responsibility for making sure it’s accessible, because I wouldn’t want to spread any inaccessible code around, especially if there’s a chance people might be using it somewhere else.&lt;/p&gt;
&lt;p&gt;Another reason I wanted this to be good is that I’ll probably want to reuse it for other components for my upcoming &lt;a href=&quot;https://sarasoueidan.com/workshops/universal-components/&quot;&gt;front-end components workshop&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;start-with-the-markup&quot; tabindex=&quot;-1&quot;&gt;Start with the markup&lt;/h2&gt;
&lt;p&gt;As I mentioned above, I started thinking about how to mark this element up ensuring it is accessible to screen readers. That’s when I realized (and it was a “D’oh!” kinda moment) that function and markup depend on how I want the toggle to behave, &lt;em&gt;and&lt;/em&gt; on how I want it to look.&lt;/p&gt;
&lt;p&gt;It was pretty clear to me: the switch would allow a user to choose between a light theme and a dark theme, with the light theme being the default. It was at this moment that radio buttons came to my mind: two options with one of them checked, and only one option can be checked at a time; that makes a great use case for good old radio buttons.&lt;/p&gt;
&lt;p&gt;I knew I would have to choose something different if I wanted the UI to look and behave differently. For example, if I wanted the UI to say “Enable/Disable Dark Mode”, then I wouldn’t need or want to use radio buttons, because I’d only have one option to deal with that could be &lt;strong&gt;switched on and off&lt;/strong&gt; — &lt;em&gt;that&lt;/em&gt; would be a great use case for a checkbox or a good old toggle &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Takeaways:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Style and function are interrelated; so it helps to think about these two simultaneously when designing for accessibility (and designing anything in general, really).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Always, always start thinking about the markup and accessibility when building components&lt;/strong&gt;, regardless of how small or simple they seem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;research&quot; tabindex=&quot;-1&quot;&gt;Research&lt;/h2&gt;
&lt;p&gt;As always, I needed to back my theory and practice up with good research. So I started reading. My first go-to references are Heydon Pickering’s &lt;a href=&quot;https://inclusive-components.design/&quot;&gt;Inclusive Components&lt;/a&gt; and &lt;a href=&quot;https://a11yproject.com/&quot;&gt;The A11y Project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As it turns out, Heydon had &lt;a href=&quot;https://inclusive-components.design/toggle-button/&quot;&gt;a fantastic article just about Toggle Buttons&lt;/a&gt; which I learned a lot from, and my friend &lt;a href=&quot;https://www.scottohara.me/&quot;&gt;Scott O’Hara&lt;/a&gt; had &lt;a href=&quot;https://scottaohara.github.io/aria-switch-button/&quot;&gt;an ARIA switch button&lt;/a&gt; included in &lt;a href=&quot;https://a11yproject.com/patterns&quot;&gt;the Patterns section&lt;/a&gt; of the A11y Project. So, naturally, I inspected the code for that button and read Heydon’s article to confirm if I’m on the right path. Thankfully, it turns out I was.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Before I move on it’s worth mentioning that this is &lt;strong&gt;not&lt;/strong&gt; an article about how to create accessible toggle switches. Heydon’s article does a fantastic job covering that.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The main points I personally concluded from the above research are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are different types of switches that seem to do similar things but are fundamentally different when it comes to markup and accessibility. Just because they are styled to look the same, doesn’t mean they &lt;em&gt;are&lt;/em&gt; necessarily the same.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I need to think about how I want the UI to behave, look &lt;em&gt;and sound&lt;/em&gt; when marking the switch up. Design and UX first, then code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A toggle switch can be used to switch between two separate options, or it can be used to switch one option on and off (or like enabling/disabling an option).&lt;/strong&gt; This is where the implementation differences start to manifest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you’re switching between two separate options, using standard radio buttons makes sense. &lt;strong&gt;Radio buttons are used when you need your users to choose one of two or more options, so this is a perfect use case for them.&lt;/strong&gt; They also have basic accessibility and keyboard tabbing baked right in. Just make sure you don’t break the accessibility of either of these in the HTML or using CSS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the purpose of the switch is to enable/disable a feature (or turn it on/off), there are other approaches for it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using a checkbox to check/uncheck (enable/disable) that option.&lt;/li&gt;
&lt;li&gt;Using a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; that can have two states: pressed and not pressed. This approach requires the use of ARIA which in turn will require JavaScript to function properly for assistive technologies (the ARIA attribute values are updated on click with JavaScript). Read Heydon’t article for more details on this approach.&lt;/li&gt;
&lt;li&gt;This approach means that you have only one option, which in turn means that the switch button has only one associated label, and would probably not look like a “double-switch” button anymore, &lt;em&gt;unless&lt;/em&gt;:
&lt;ul&gt;
&lt;li&gt;The double-switch button (indicating on/off) states would have clear text indicating what the current active state is; so it would look like this example from Scott’s demo mentioned in the A11y project : &lt;img src=&quot;https://sarasoueidan.com/assets/images/on-off-switch.png&quot; alt=&quot;the On/OFF switch pattern by Scott O’Hara&quot; style=&quot;vertical-align: top;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For my use theme switcher, it was a clear choice: since the user has two options (dark and light), I was going to use radio buttons. &lt;strong&gt;I didn’t want it to say “turn dark mode on/off” — I wanted it to say “Enable light mode or enable dark mode”.&lt;/strong&gt; The solution will be CSS and HTML only, require no JavaScript, and accessibility would be baked right in by default.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Takeaway:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a clear vision of what the design of the component is supposed to do and not do. Base your markup and styles on that.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;note update&quot;&gt;
	&lt;p&gt;
		If you like this article you may love my Universal Components Workshop. I’m running this workshop at a couple of events in the Fall, so you may like to sign up for one of them.
	&lt;/p&gt;
	&lt;p&gt;
		I also run in-house workshops, so you can request this workshop (or another one) for your team.
	&lt;/p&gt;
	&lt;a href=&quot;https://sarasoueidan.com/workshops/&quot;&gt;Learn More&lt;/a&gt;
&lt;/div&gt;
&lt;h2 id=&quot;inspecting-code&quot; tabindex=&quot;-1&quot;&gt;Inspecting Code&lt;/h2&gt;
&lt;p&gt;Now, after reading and inspecting in the above resources, I decided to see how other people are marking such a switch up. After all, I knew I’d find tonnes of examples of toggle switches that look and behave like this visually on &lt;a href=&quot;https://codepen.io/&quot;&gt;Codepen&lt;/a&gt;, and it’s always great to see how others are doing it — maybe I’m missing on some cool techniques for styling that I can learn, or maybe I’m missing some important piece of information when it comes to the markup and accessibility.&lt;/p&gt;
&lt;p&gt;Since I was working &lt;em&gt;in&lt;/em&gt; Codepen on my own version of this switch (demo shared below), I thought I’d inspect Codepen’s own toggle switch: the switch that you use to choose whether you want the pen to be public or private.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quick takeaway:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is always helpful and interesting to learn from other people’s work by inspecting their code (be that via the devtools or on Codepen).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;the-codepen-privacy-switch&quot; tabindex=&quot;-1&quot;&gt;The Codepen Privacy Switch&lt;/h2&gt;
&lt;p&gt;The Codepen switch exhibited some weird behavior that I had also noticed before but never felt curious enough to “debug”. The following video shows this behavior:&lt;/p&gt;
&lt;video width=&quot;320&quot; height=&quot;240&quot; controls=&quot;&quot; style=&quot;width: 100%;&quot;&gt;
  &lt;source src=&quot;https://sarasoueidan.com/videos/codepen-switch-bug.mp4&quot; type=&quot;video/mp4&quot; /&gt;
	Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;First, it’s worth mentioning that I was always confused by this switch. The red color vs green always gave out a weird feedback loop. If I make the pen private, the color turns green, and making it public makes it red. In my head, green meant more like “this pen is accessible by people, it’s open” and red was more like “this pen is closed, people are NOT allowed access”. But in Codepen terms, the colors symbolized other things. More specifically, the red stands for “PUBLIC ZONE = DANGER ZONE” or “BEWARE this pen is now PUBLIC which is NOT GOOD”. (Sorry, I’m being too dramatic, but purposefully.)&lt;/p&gt;
&lt;p&gt;Then there was the buggy behavior demonstrated in the video above (where clicking on the same label changes the value of the switch to the other label’s value). I was curious to see what was causing it so, again, I fired up devtools and inspected the code.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/codepen-switch-code.png&quot; alt=&quot;Screenshot of the devtools inspecting code for the Codepen switch&quot; /&gt;
	&lt;figcaption&gt;
		The Codepen switch is marked up as a checkbox that has two labels.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I found that the Codepen switch is one checkbox that appears to have two labels. That’s why clicking on both “Public” and “Private” multiple times would cause the switch to be turned on and off. In other words, this is why the visual feedback/behavior of the switch did not match the purpose of the switch or what it seemed to do.&lt;/p&gt;
&lt;p&gt;I &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/1021068702110887937&quot;&gt;tweeted about this bug&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/1021068905652121600&quot;&gt;its possible cause&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/1021069590628044800&quot;&gt;suggested an alternative solution&lt;/a&gt; that could fix it.&lt;/p&gt;
&lt;p&gt;I started getting responses and opinions from other developers, which led to a very good and enlightening discussion that I thoroughly enjoyed (one of the few positive aspects of Twitter!).&lt;/p&gt;
&lt;p&gt;The general consensus was that the switch needed fixing, of course. But how it would be fixed depends largely on what the Codepen team wants it to do:&lt;/p&gt;
&lt;h3 id=&quot;if-the-switch-toggle-is-supposed-to-be-an-enable%2Fdisable-button-for-the-%E2%80%9Cprivate%E2%80%9D-option&quot; tabindex=&quot;-1&quot;&gt;If the switch toggle is supposed to be an enable/disable button for the “Private” option&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Then:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;That would mean that the ON/OFF switch pattern mentioned in the previous section above would be the ideal solution.&lt;/li&gt;
&lt;li&gt;This means that the “Public” label would be discarded, and only the “Private” label would be preserved, with a clear indication that the switch next to it turns this option on or off. Which brings me to another point:&lt;/li&gt;
&lt;li&gt;The visual representation of the switch would either have to change completely or it should be tweaked:&lt;/li&gt;
&lt;li&gt;If the switch button were to remain visually the same (i.e. preserve the double-swicth “move this toggle left and right” behavior), I’d suggest adding “On/Off” labels to it akin to what Scott did in his A11y project demo, because according to WCAG, you should not use color alone to convery information. The colors also need to have enough contrast if you were to use them. And, again, I’d reconsider the red and green colors as they may confuse someone else like they confused me for a while. (&lt;a href=&quot;https://twitter.com/geare_d/status/1021253054165762048&quot;&gt;Someone suggested&lt;/a&gt; grey and green, because “The addition of color would more closely connotate the enabled state (no color vs has color as opposed to two separate colors)”.)&lt;/li&gt;
&lt;li&gt;The underlying structure and markup for this case (one label only) could be:
&lt;ul&gt;
&lt;li&gt;checkbox, that can be checked or unchecked. I would suggest just using simple (fancy, maybe) checkbox styles for this behavior and ditching the whole double-switch style altogether.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; with &lt;code&gt;aria-pressed&lt;/code&gt; (and &lt;code&gt;aria-checked&lt;/code&gt; if needed), where the pressed state would indicate the pen is private, and the unpressed state indicates it’s not private; i.e. it’s public. The style of the button would also change in this case, and the behavior would requir JavaScript to modify the value of the ARIA attributes on click.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;if-the-switch-toggle-is-supposed-to-explicitly-offer-and-enable-two-separate-options%3A-public-and-private&quot; tabindex=&quot;-1&quot;&gt;If the switch toggle is supposed to explicitly offer and enable two separate options: Public and Private&lt;/h3&gt;
&lt;p&gt;Then using a couple of radio buttons would make much sense, in my opinion. Two radio buttons, each with its own label, announced to assisitive technologies as a couple of separate options of which the user should choose one, and perfectly accessible via keyboards, &lt;em&gt;and&lt;/em&gt; has no additional ARIA or JS requirements to function. And sprinkle some CSS on it to create the “double-switch” button style if you want (seriously I don’t know what else to call it) and you’re all done. The markup and styles for such a solution might differ slightly between developers, but the essence of the code would be the same.&lt;/p&gt;
&lt;p&gt;Which brings me to the live demo…&lt;/p&gt;
&lt;h2 id=&quot;live-example&quot; tabindex=&quot;-1&quot;&gt;Live Example&lt;/h2&gt;
&lt;p&gt;This is my implementation of a two-options toggle switch. I created this &lt;em&gt;not&lt;/em&gt; as a solution to the Codepen switch, but simply as a switch for my light/dark theme switcher that I’m using in my talk:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;jpBbrq&quot; data-default-tab=&quot;result&quot; data-user=&quot;SaraSoueidan&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Accessible Option(/Toggle) Switch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/SaraSoueidan/pen/jpBbrq/&quot;&gt;Accessible Option(/Toggle) Switch&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;https://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;My switch is going to live in the context of a larger set of form elements, that’s why I don’t have any fieldset or legend in the demo. And yes I know, I know… you could also tweak the code to &lt;em&gt;not&lt;/em&gt; need the extra &lt;code&gt;span&lt;/code&gt;s in the markup and use pseudo-elements instead, but I chose this approach anyway, just because I wanted to. Try to play with the code and uncomment some of the styles (especially try removing the spans to see how my switch looks like without them) to dissect the code and have a better idea of my choices and what I was trying to achieve.&lt;/p&gt;
&lt;p&gt;I also added focus styles to ensure keyboard users can see where the focus is since I’ve covered my default radio buttons with the spans, and labels don’t get highlighted on focus by default. I used &lt;code&gt;:focus-visible&lt;/code&gt; only at first (with polyfill) but it didn’t work as expected in Firefox and Safari, so I ended up adding &lt;code&gt;:focus&lt;/code&gt; back again and using that instead. Also, the focus styles aren’t very pretty, I know, but this demo is just a proof of concept so it doesn’t need to be strikingly beautiful.&lt;/p&gt;
&lt;p&gt;If you’d like to see another demo that also uses radio buttons but implements them differently, without spans and using pseudo-elements, check this Codepen by my friend Scott O’hara out:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;zLZwNv&quot; data-default-tab=&quot;result&quot; data-user=&quot;scottohara&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Radio Toggle Switch&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/scottohara/pen/zLZwNv/&quot;&gt;Radio Toggle Switch&lt;/a&gt; by Scott (&lt;a href=&quot;https://codepen.io/scottohara&quot;&gt;@scottohara&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;final-words.&quot; tabindex=&quot;-1&quot;&gt;Final Words.&lt;/h2&gt;
&lt;p&gt;OK let me start by saying that I could be wrong. I know that the Codepen folks may want something completely different, or think of something completely different. So this article is not meant to redesign the Codepen switch button, but rather serve as a documentation of my research and train of thought while working on creating my own switch button for my talk. I’ll need to do even &lt;em&gt;more&lt;/em&gt; research when it’s time to continue working on my new workshop, and things may change, and I know I’ll learn and know more by the time I create my next switch. But, until then, I know I’ve got this blog post to reference for some of the thoughts and ideas that crossed my mind when I took the first step into this.&lt;/p&gt;
&lt;p&gt;I hope you find something useful reading this article. An if you’ve made it this far already: thank you for reading.&lt;/p&gt;
&lt;p&gt;Cheers.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A new Smashing talk. A smashing new experience.</title>
    <link href="https://sarasoueidan.com/blog/smashing-talk/"/>
    <updated>2018-06-27T21:15:03Z</updated>
    <id>https://sarasoueidan.com/blog/smashing-talk/</id>
    <content type="html">&lt;p&gt;I’m currently in Toronto, Canada, where I ran a workshop two days ago and gave a talk today at yet another &lt;a href=&quot;https://smashingconf.com/&quot;&gt;SmashingConf&lt;/a&gt; event. Like all previous SmashingConfs, it was… well… smashing! But this one stood out for me so much that, for the first time ever, I found myself firing my code editor up to write this short and sweet conference review. I felt like I needed to save a part of this experience in written format. I’ve never written conference reviews before, so this goes to say a lot about how much I’ve enjoyed this event.&lt;/p&gt;
&lt;h2 id=&quot;no-slides!&quot; tabindex=&quot;-1&quot;&gt;No Slides!&lt;/h2&gt;
&lt;p&gt;This was the first SmashingConf event with a new twist: all talks are performed live, with no slides allowed. All speakers (myself included, of course) shared a small part of their everyday workflow in what I would consider the most engaging talk format so far.&lt;/p&gt;
&lt;h3 id=&quot;from-an-attendance-point-of-view%3A-i-think-this-was-the-best-conference-learning-experience.&quot; tabindex=&quot;-1&quot;&gt;From an attendance point of view: I think this was the best conference learning experience.&lt;/h3&gt;
&lt;p&gt;I have a very, very short attention span when it comes to conference talks. I usually lose my focus and get distracted about 5 to 10 minutes sitting and listening through a talk. It’s something I’ve tried to “fix” about my brain, but never could. Sitting there and watching people just talk and move through tonnes of slides with images and text on them has never been appealing enough for my brain.&lt;/p&gt;
&lt;p&gt;But seeing people &lt;em&gt;do&lt;/em&gt; things is a whole other thing. It’s like getting a glimpse into their real everyday work lives, and learning from them first-hand, without any barriers. &lt;strong&gt;I personally learn more from watching people than I do from listening to them.&lt;/strong&gt; And this is why I absolutely loved this conference experience.&lt;/p&gt;
&lt;h3 id=&quot;from-a-speaking-point-of-view%3A-this-was-the-most-fun%2C-least-stressful-of-all-my-talks-so-far.&quot; tabindex=&quot;-1&quot;&gt;From a speaking point of view: this was the most fun, least stressful of all my talks so far.&lt;/h3&gt;
&lt;p&gt;I’ve done a bit of live-coding in my talks before, and I’ve felt more “at home” during those live coding sessions than all the rest of my speaking. There’s something about getting my hands busy on stage that distracts my brain enough to not even have a chance to wreck my nerves like it usually does.&lt;/p&gt;
&lt;p&gt;I usually get very, very nervous before my talks. And no, it never got easier over time. If anything, it felt more like it was getting worse every time. Actually, ”nervous” is a very understated way to describe my situation before I speak. I get heart palpitations; I feel extremely dehydrated; and I feel very dizzy (sometimes I worry I might actually faint).&lt;/p&gt;
&lt;p&gt;Maybe it’s because expectations start building up the more you speak, and you find yourself competing with your past self to do better every time. This is generally good for self growth, but expectations are very nerve-wrecking.&lt;/p&gt;
&lt;p&gt;But this time… this time it was different! I think it may be because this talk format was, in essence, very similar to a workshop format. And having given many workshops in the last few years, it’s become kind of a second nature for me to do things live in front of people. Maybe? I don’t know.&lt;/p&gt;
&lt;p&gt;I felt almost zero nervousness. I was too busy getting things done to feel nervous.&lt;/p&gt;
&lt;p&gt;For me, showing people how to do things is so much easier than talking about it. Even though I sound like I got it all together, speaking in English is not as effortless as it may sound to me, and translating ideas that are runnig through your brain at the speed of light live is not easy. So working through concepts and techniques instead of talking about them was much more liberating for me.&lt;/p&gt;
&lt;p&gt;I love the fact that this talk format also kind of rid me of the expectation that it needed to be flawless. Every speaker knows that doing things live on stage comes with a risk of failure. But since all speakers were in this together, it kind of helped relieve some of the pressure, and so instead of fretting over moments were they get stuck on stage, I saw speakers like Harry Roberts embrace these moments as a natural part of this talk format and even make fun of those moments, again adding more humor to an already interesting and engaging talk.&lt;/p&gt;
&lt;h2 id=&quot;but-it-isn%E2%80%99t-for-everyone%E2%80%A6&quot; tabindex=&quot;-1&quot;&gt;But it isn’t for everyone…&lt;/h2&gt;
&lt;p&gt;I believe some attendees and some speakers were not very fond of this format. And that’s okay. Everyone learns and teaches in different ways, and I think it’s good to try new things out and learn more about what works for us and what doesn’t.&lt;/p&gt;
&lt;h2 id=&quot;there-were-great-people.-and-i-had-enlightening-conversations.&quot; tabindex=&quot;-1&quot;&gt;There were great people. And I had enlightening conversations.&lt;/h2&gt;
&lt;p&gt;I met some friends I’d only known over the internet for the last few years. I’ve re-met and had formidable conversations with wonderful friends and acquaintances, many of which were truly, truly life-changingly inspiring! (Believe me, this is not something I would say lightly.)&lt;/p&gt;
&lt;p&gt;I saw some of my previous workshop attendees, who shared updates on how what they learnt in the workshop is currently helping them in their everyday work. It was very rewarding to hear this.&lt;/p&gt;
&lt;p&gt;And then there’s the humbling fact that I shared the stage with some of my favorite people in the industry. It was truly great.&lt;/p&gt;
&lt;h2 id=&quot;toronto-is-beautiful!&quot; tabindex=&quot;-1&quot;&gt;Toronto is beautiful!&lt;/h2&gt;
&lt;p&gt;Toronto is like a downsized, saner and more liveable version of NYC. And I &lt;em&gt;love&lt;/em&gt; NYC. Toronto is kind of like the better version of it. I’m very much enjoying the city so far, and I look forward to a few more days here and more updates I’m going to share in another post next week.&lt;/p&gt;
&lt;p&gt;While I’m here, I’m sharing my view of the city on &lt;a href=&quot;https://instagram.com/SaraSoueidan&quot;&gt;my Instagram&lt;/a&gt;, where I’ve already posted quite a bunch of photos, if you’re into that kinda thing.&lt;/p&gt;
&lt;h2 id=&quot;i-would-definitely-do-it-again.&quot; tabindex=&quot;-1&quot;&gt;I would definitely do it again.&lt;/h2&gt;
&lt;p&gt;I do want to give slideless talks again. It could be at another SmashingConf, and it could be anywhere else. I think that, for my kind of talks, there’s much more value in demonstrating things live than there is in theoretical talks that don’t include practice. So I see this format as an improvement to the “normal” format for my talks.  Of course, the live format wouldn’t be ideal for &lt;em&gt;all&lt;/em&gt; my upcoming talks, and that’s also okay.&lt;/p&gt;
&lt;h2 id=&quot;smashing-is-smashing.&quot; tabindex=&quot;-1&quot;&gt;Smashing is smashing.&lt;/h2&gt;
&lt;p&gt;SmashingConf is one my favorite events, and the SmashingConf team and crew have become more like family over the years. I’m really happy I got to be a part of this particular event. Kudos and many thanks to Vitaly, Markus, Amanda and everybody else in the team that made this event possible, and for pushing the boundaries once again and challenging us to get out of our comfort zones. If you ever get a chance to attend a SmashingConf, I would recommend not missing it.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Going Offline</title>
    <link href="https://sarasoueidan.com/blog/going-offline/"/>
    <updated>2018-04-23T15:37:23Z</updated>
    <id>https://sarasoueidan.com/blog/going-offline/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;Earlier this month I rolled out a new and long overdue feature on this Web site: offline viewing. In other words, from now on, after your first visit, you can re-visit my Web site even when you’re not connected to the Internet. Furthermore, depending on the device and application you’re using to visit this site, you may also be able to add the site to your mobile homescreen, similar to other native applications.&lt;/p&gt;
&lt;h3 id=&quot;offline-with-service-workers&quot;&gt;Offline with Service Workers&lt;/h3&gt;
&lt;p&gt;Most of the main pages of the site (those linked in the menu in the header and links in the footer) will be saved for offline viewing by default on your first visit. Posts published in the Articles section (like this one) or in the Desk section will be available for offline reading on demand.&lt;/p&gt;
&lt;p&gt;All this is possible thanks to the power of Service Workers.&lt;/p&gt;
&lt;h4 id=&quot;progressively-enhanced-experience&quot; tabindex=&quot;-1&quot;&gt;Progressively Enhanced Experience&lt;/h4&gt;
&lt;p&gt;If you visit my site using a modern &lt;a href=&quot;https://caniuse.com/#feat=serviceworkers&quot;&gt;browser that supports Service Workers&lt;/a&gt;, you will get an enhanced experience, with a colorful &lt;i&gt;“Save this page for offline reading”&lt;/i&gt; button at the top of each post, that does exactly what it says: it caches the page offline so that you can view and read it again when you’re offline.&lt;/p&gt;
&lt;p&gt;Using a Service Worker to save pages offline also enhances the overall experience of the site by making it load even faster than it already did before.&lt;/p&gt;
&lt;p&gt;If a browser does not support Service workers, it will miss on these new features, but the general experience of the site will remain unchanged from what is was before — nothing will break. This is because all the features that Service Worker offers are only enabled when support for Service Workers is detected and the Worker is registered and installed.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// a Service Worker is registered only when it is supported&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;serviceWorker&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; navigator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;    &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    navigator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serviceWorker&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../../serviceworker.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E2%80%9Cgoing-offline%E2%80%9D&quot; tabindex=&quot;-1&quot;&gt;“Going Offline”&lt;/h3&gt;
&lt;p&gt;I wrote my first Service Worker script about 3 or 4 years ago — the year Workers were announced and started getting implemented. But my Worker never saw the day of light. I remember getting caught up with client work and adding the script to my todo list for this Web site. I never got to finish it.&lt;/p&gt;
&lt;p&gt;This month, &lt;a href=&quot;https://abookapart.com/&quot;&gt;A Book Apart&lt;/a&gt; announced (and released early previews of) a new book titled “Going Offline”, written by none other than &lt;a href=&quot;https://adactio.com/&quot;&gt;Jeremy Keith (“adactio”)&lt;/a&gt; himself. Like any book written by one of my favorite people in the industry, I leaped on the chance to read the early preview.&lt;/p&gt;
&lt;p&gt;Over the course of two days, I read the book and followed along with it as I rewrote my old Service Worker script for the site. By the time I reached the end of the book, I had a Service Worker installed and working on the site, &lt;em&gt;and&lt;/em&gt; I had added a Web App Manifest file — the file that enables your Web site or Web application to behave and look similar to a native application on your mobile device(s).&lt;/p&gt;
&lt;p&gt;Jeremy covers literally everything you need to know to write and install your first Service Worker, tweak it to your site’s needs, and then write the Web App Manifest file to complete the offline experience, all in a ridiculously easy to follow style. It doesn’t matter if you’re a designer, a junior developer or an experienced engineer — this book is perfect for &lt;em&gt;anyone&lt;/em&gt; who wants to learn about Service Workers and take their Web application to a whole new level.&lt;/p&gt;
&lt;p&gt;If you care about the user experience of your site / application, making sure it loads blazing fast and works offline might be one of the best steps you could take to improve that experience for your users. And this book is a vital one if you’re not sure where to start doing that. I highly recommend it. I read the book over the course of two days, but it can easily be read in half a day. And as someone who rarely ever reads a book cover to cover (I tend to quit halfway through most books), this says a lot about how good it is. The book is now available for (pre)order &lt;a href=&quot;https://abookapart.com/products/going-offline&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;final-words&quot; tabindex=&quot;-1&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;If you’re interested, you can take a look at my script &lt;a href=&quot;https://sarasoueidan.com/serviceworker.js&quot;&gt;here&lt;/a&gt;. It is a basic script, and you can write an exact same script if you follow along Jeremy’s book. But of course it’s important, in my opinion, that you know, understand and customize what the script does to your own needs. Jeremy’s book helps tremendously with that. The book also contains a list of extra resources for further learning about Service Workers. So have a look at those if you need more information.&lt;/p&gt;
&lt;p&gt;I have more work to be done on this site, and I’ll be writing about new features as they roll out. I’m quite excited about what’s coming next!&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Case Study: Optimizing SVG Text &amp; Image Delivery with Inline SVG</title>
    <link href="https://sarasoueidan.com/blog/optimizing-svg-delivery-with-svg/"/>
    <updated>2018-01-10T16:55:20Z</updated>
    <id>https://sarasoueidan.com/blog/optimizing-svg-delivery-with-svg/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	I love when I’m pushed to think of creative techniques when tackling design and dev challenges on my client projects. And it so happens that &lt;a href=&quot;https://smashingmagazine.com/&quot;&gt;the new Smashing Magazine design&lt;/a&gt; released this year was one of the more (fun and) challenging projects I’ve worked on. And one of the challenges I had to tackle was delivering three fairly complex SVG images in a performant, accessible way.
&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;I was the front-end developer (and, at times, the designer) on the project. I’ve written &lt;a href=&quot;https://sarasoueidan.com/case-studies/smashing-magazine/&quot;&gt;a case study&lt;/a&gt; about the project earlier this year. But the case study was more about the design aspect of the project than it was about the development of it. I’ve talked about the development part &lt;a href=&quot;https://sarasoueidan.com/blog/optimizing-svg-delivery-with-svg/#smashing-case-study-videos&quot; id=&quot;smashing-case-study-videos-ref&quot; aria-describedby=&quot;footnote-label&quot;&gt;at a few conferences during the last year&lt;/a&gt;. This is the first in a series of articles going over some of the tips and tricks I mentioned in those talks.&lt;/p&gt;
&lt;h3 id=&quot;the-challenge&quot; tabindex=&quot;-1&quot;&gt;The Challenge&lt;/h3&gt;
&lt;p&gt;The new Smashing Magazine offers, as a replacement to ads on the site, three new types of memberships. &lt;a href=&quot;https://www.smashingmagazine.com/membership&quot;&gt;The Membership signup page&lt;/a&gt; shows these three membership options, with a fairly complex SVG illustration for each one.&lt;/p&gt;
&lt;p&gt;The following image shows the three illustrations I worked on. Even though the content of these illustrations has changed since I worked on the project, the complexity of the images as well as the technique used to embed them remained unchanged.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/smashing-membership-illustrations.png&quot; alt=&quot;The (old) Smashing membership illustrations.&quot; /&gt;
	&lt;figcaption&gt;
		The (old) Smashing membership illustrations.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Each of these illustrations contains the title/name of a membership. There are no actual titles in the HTML to represent these memberships otherwise, which means that the text in each image &lt;em&gt;is&lt;/em&gt; the title of that particular membership. This, in turn, means that &lt;strong&gt;this text needs to be as searchable, selectable and accessible as real (HTML) text&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In other words, the text inside the images needs to remain real text and not be converted to outlines, for starters. SVG text — wrapped in &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; elements within an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; — is searchable, selectable and accessible by default. So we have a great start there.&lt;/p&gt;
&lt;p&gt;And since the text inside each image is real text, it needed to be styled like the rest of the text — more specifically, the headlines — on the site.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;font-family&lt;/code&gt;, you can apply a font face to SVG text the same way you would apply a font face to text in HTML. And I wanted the font styles to be applied in the main style sheet, not in a seperate style sheet referenced within each SVG image.&lt;/p&gt;
&lt;p&gt;So, ideally, these three images would be embedded inline in the page. This would give us both the styling from the main style sheet as well as flexibility to do pretty much anything else we may want to do with the text otherwise.&lt;/p&gt;
&lt;p&gt;But inlining the illustrations was not as simple as it sounded. Each illustration was complex enough to make the size of it so large that adding it inline to the HTML was simply not an option. The following recording shows the size of &lt;em&gt;one&lt;/em&gt; of these illustrations.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/smashing-membership-illustration.gif&quot; alt=&quot;&quot; /&gt;
&lt;p&gt;Inlining three times the amount of code shown in the above image was definitely not an option. But I still wanted the text inside those images to be inlined. So, what’s the best way to get the best out of SVG: searchable, selectable and accessible text, a cacheable illustration (hence better performance), and clean code?&lt;/p&gt;
&lt;h3 id=&quot;the-solution&quot; tabindex=&quot;-1&quot;&gt;The Solution&lt;/h3&gt;
&lt;p&gt;There are seven different ways to embed an SVG on a Web page. Choosing which one to use depends largely on the case at hand and what your project requirements are. But something that I frequently mention when talking about embedding techniques is that you may not have to choose &lt;em&gt;one&lt;/em&gt; technique. In other words, &lt;strong&gt;you can choose to embed an SVG using more than one embedding technique at the same time!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SVG is a document format, not just an image format. Thus, referencing external images inside an &lt;code&gt;svg&lt;/code&gt; document is possible just like it is in HTML. So, why not take this a step further and reference &lt;em&gt;an SVG&lt;/em&gt; image from within an SVG document?&lt;/p&gt;
&lt;p&gt;Since I wanted the text to be inlined and the rest of the image to be external and cacheable, and since the nature of SVG allows me to do pretty much anything with its contents, I thought “Why not split each of these images into separate parts: text and illustration?”, and then use an inline &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; to wrap and stitch these two parts together?&lt;/p&gt;
&lt;p&gt;In other words, an inline &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; in the page would contain the &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; of the illustration, and then I’d reference the rest of the the illustration using an &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt; element, within the same inline &lt;code&gt;svg&lt;/code&gt;. So, in essence, I’d be working with SVG content in a similar way to HTML text and images. We use an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; document to embed an SVG image plus its accompanying text. Then, using some tweaking, I’d position the inline text on top of the illustration so that the end result would look like the original image.&lt;/p&gt;
&lt;p&gt;So, I took each of the three images and removed the text content from them. That left me with three illustrations with no titles.&lt;/p&gt;
&lt;p&gt;Then, for each illustration, I embedded that illustration within an inline &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; that also contained the text for that illustration. The code looked something like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;318.029&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;267.921&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 318.029 267.921&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-describedby&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Supporter Plan&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;image&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;xlink&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/1999/xlink&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/images/plan--supporter--no-text.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&amp;lt;text x=173&quot; y=&quot;50&quot; font-size=&quot;.8em&quot;&gt;Supporter&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using this solution, I achieved all three main goals I needed:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;The complex illustration is no longer embedded in the HTML. This means &lt;strong&gt;the HTML code remains clean and uncluttered.&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;The illustration is cached upon subsequent requests&lt;/strong&gt;, which is a win for performance.&lt;/li&gt;
	&lt;li&gt;The title for each plan is real, inline text, and is therefore &lt;strong&gt;searchable, selectable and accessible&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, to finish this off, the text inside the SVG representing the title for the respective plan was styled further in CSS:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;svg text&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bold&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;text-transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; uppercase&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; $mija&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And… that’s pretty much it.&lt;/p&gt;
&lt;h3 id=&quot;final-words&quot; tabindex=&quot;-1&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;Replacing the old illustrations with new ones was easy and fast. I got three new illustrations without text in them, and referenced those by simply changing the path to the images in the inline &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;s, and then tweaked the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; for the &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; of each one to position it correctly in the new images. The styles for the text and everything else was left untouched.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sometimes you don’t have to choose just &lt;em&gt;one&lt;/em&gt; embedding technique to embed an SVG.&lt;/strong&gt; Keeping the document nature of SVG in mind opens doors to creative solutions that might otherwise not come to mind at first glance. SVG is, after all, both a document and an image, and that’s where most of its power really comes from.&lt;/p&gt;
&lt;p&gt;I hope you found this tip useful. Don’t forget to subscribe to the RSS (link in footer below) to receive the latest and new articles in your RSS reader as soon as they’re out.&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
	&lt;h4 id=&quot;footnotes__title&quot;&gt;Footnotes&lt;/h4&gt;
	&lt;ol class=&quot;footnotes__list&quot;&gt;
		&lt;li class=&quot;footnotes__item&quot; id=&quot;smashing-case-study-videos&quot;&gt;
			&lt;p&gt;
				 There is &lt;a href=&quot;https://vimeo.com/214427831&quot;&gt;a video recording&lt;/a&gt;  of me going over ths particular trick if you&#39;re more into listening than reading. 
				&lt;a href=&quot;https://sarasoueidan.com/blog/optimizing-svg-delivery-with-svg/#smashing-case-study-videos-ref&quot; aria-label=&quot;Back to content&quot;&gt;↵&lt;/a&gt;
			&lt;/p&gt;
		&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>Cropping &amp; Scaling Images Using SVG Documents</title>
    <link href="https://sarasoueidan.com/blog/svg-object-fit/"/>
    <updated>2018-01-02T04:07:56Z</updated>
    <id>https://sarasoueidan.com/blog/svg-object-fit/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	I’m always interested in and thinking about ways to use SVG in my client projects to solve common UI challenges — uses that go beyond simple icon display and animated illustrations. I’m also always researching and looking for practical uses of SVG to add to my &lt;a href=&quot;https://sarasoueidan.com/speaking/&quot;&gt;talk&lt;/a&gt; and &lt;a href=&quot;https://sarasoueidan.com/workshops/&quot;&gt;workshop material&lt;/a&gt; that go beyond SVG the image format, and more into the document nature of it. After all, SVG on the Web isn’t just about displaying pretty and animated illustrations.
&lt;/p&gt;
&lt;p&gt;
	I’m also particularly interested in CSS and SVG as a combination (that I like to call “The Power Combo”) to solve common real-world challenges. These two work &lt;em&gt;really&lt;/em&gt; well together. And it so happens than some of what’s possible in CSS is also possible in SVG, either because the CSS functionlity was imported from SVG to begin with, or simply because SVG documents also happen to offer tools that achieve the same functionality. And since SVG goes way back and has much better support than newer CSS features, it is possible to use SVG either as a fallback or as a replacement to some CSS functionalities. It all depends on the browser support you’re after.
&lt;/p&gt;
&lt;p&gt;SVG comes with a pair of attributes — namely &lt;code&gt;viewBox&lt;/code&gt; and &lt;code&gt;preserveAspectRatio&lt;/code&gt; — that allow us to manipulate the contents of an SVG (whether vector content or raster images) in a myriad of ways to achieve a myriad of things. One thing we can do with these attributes is control the scaling and position of the contents of the SVG. In this article, we’ll use these attributes to crop, scale and position images, as a fallback or alternative to the CSS &lt;code&gt;object-fit&lt;/code&gt; and &lt;code&gt;object-position&lt;/code&gt; properties.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
	If you’re not familiar with the SVG &lt;code&gt;viewBox&lt;/code&gt;, viewport and &lt;code&gt;preserveAspectRatio&lt;/code&gt;, I highly recommend reading &lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;my extensive guide&lt;/a&gt; on the subject. Although this article does not require a deep understanding of these attributes, I highly recommend you get comfortable using these attributes.
&lt;/div&gt;
&lt;h3 id=&quot;cropping%2C-scaling-and-positioning-in-css-with-object-fit-and-object-position&quot; tabindex=&quot;-1&quot;&gt;Cropping, Scaling and Positioning in CSS with &lt;code&gt;object-fit&lt;/code&gt; and &lt;code&gt;object-position&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Say you’re using a CMS, and you’re allowing your users or authors to upload photos of themselves to use as an avatar next to their biography on the site. And you want to make it possible for them to upload any image of any size and aspect ratio, and then you’d handle the cropping of that image before you display it on the page in a box that might very well have a different aspect ratio than the image the author uploaded.&lt;/p&gt;
&lt;p&gt;There are many ways you could handle this. For example, you can handle the image cropping on the server-side using PHP or some JavaScript script, and then serve the cropped image on the site. You may even be in a different scenario, where you just want to be able to quickly crop and display the images on a page, without using a CMS and back-end script.&lt;/p&gt;
&lt;p&gt;Fortunately, today, CSS has two properties that make cropping and scaling images within a fitted box a breeze. These properties are &lt;code&gt;object-fit&lt;/code&gt; and &lt;code&gt;object-position&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;object-fit&lt;/code&gt; property specifies how the contents of a &lt;a aria-describedby=&quot;footnote-label&quot; href=&quot;https://sarasoueidan.com/blog/svg-object-fit/#replaced-element&quot; id=&quot;replaced-element-ref&quot;&gt;replaced element&lt;/a&gt; should be fitted to the box established by its used height and width.&lt;/p&gt;
&lt;p&gt;Even though a bitmap image has its own intrinsic dimensions and aspect ratio, you can size it to fit into any box of any size as defined in your CSS. And you can choose whether you want to preserve the aspect ratio of the image or not, all using one property (&lt;code&gt;object-fit&lt;/code&gt;) and one line of CSS.&lt;/p&gt;
&lt;p&gt;The following image shows the effect of each of the possible values for &lt;code&gt;object-fit&lt;/code&gt;:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/object-fit-values.png&quot; alt=&quot;object-fit values&quot; /&gt;
	&lt;figcaption&gt;
		The result of applying the different &lt;code&gt;object-fit&lt;/code&gt; values to an image to be fitted in a box with a different aspect ratio.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;By default, the image is centered within its containing box (the square, in our example). You can change that default position using &lt;code&gt;object-position&lt;/code&gt;, which takes values similar to the values of &lt;code&gt;background-position&lt;/code&gt;. For example, &lt;code&gt;object-position: top left&lt;/code&gt; will align the top edge of the image to the top border of the box, and the left edge of the image to the left border of the box. Here’s a live Codepen for you to try the effect of changing &lt;code&gt;object-position&lt;/code&gt; on the images:&lt;/p&gt;
&lt;p data-height=&quot;1000&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;31c6225244914f3967b3f7c773394c6c&quot; data-default-tab=&quot;result&quot; data-user=&quot;SaraSoueidan&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;CSS `object-fit` Values&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/SaraSoueidan/pen/31c6225244914f3967b3f7c773394c6c/&quot;&gt;CSS `object-fit` Values&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;https://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Browser support for &lt;code&gt;object-fit&lt;/code&gt; and &lt;code&gt;object-position&lt;/code&gt; is very good: it is supported in all the latest browsers, including MS Edge 16+ and Opera Mini, though it requires the &lt;code&gt;-o-&lt;/code&gt; prefix in the latter. You can see the latest updated browser support &lt;a href=&quot;https://caniuse.com/#feat=object-fit&quot;&gt;on CanIUse.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you, like me, want to be able to provide a similar experience to Internet Explorer, you’re going to need an alternative solution, or at least a fallback. And, ideally, the alternative solution needs to provide support at least back to IE9, maybe? This is where SVG can fill in.&lt;/p&gt;
&lt;h3 id=&quot;cropping-%26-scaling-images-with-svg&quot; tabindex=&quot;-1&quot;&gt;Cropping &amp;amp; Scaling Images with SVG&lt;/h3&gt;
&lt;p&gt;If you’ve ever played with the SVG &lt;code&gt;viewBox&lt;/code&gt;, then you know that the coordinate system defined by the &lt;code&gt;viewBox&lt;/code&gt; does not necessarily need to have the same aspect ratio as &lt;a href=&quot;https://sarasoueidan.com/blog/svg-object-fit/#viewport-coordinate-system&quot; id=&quot;viewport-coordinate-system-ref&quot; aria-describedby=&quot;footnote-label&quot;&gt;that of the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; viewport&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And when the aspect ratio of the &lt;code&gt;viewBox&lt;/code&gt; is not the same as that of the viewport, the browser needs to position the former in the latter similar to the way the photo was being positioned inside the box in the previous section.&lt;/p&gt;
&lt;p&gt;By default, just like with &lt;code&gt;object-fit&lt;/code&gt;, the browser will fit the &lt;code&gt;viewBox&lt;/code&gt; inside of the SVG viewport (or “box”) by &lt;em&gt;containing&lt;/em&gt; it inside of it, such that the entire &lt;code&gt;viewBox&lt;/code&gt; — and, thus, all the contents of the SVG — are visible inside the viewport.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute, you can change the position and scale of the &lt;code&gt;viewBox&lt;/code&gt; — and, thus, all the contents of the SVG — similar to the way &lt;code&gt;object-position&lt;/code&gt; changes the position and scale of the image inside the box when using &lt;code&gt;object-fit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, suppose we have a square svg (aspect ratio 1:1) and a &lt;code&gt;viewBox&lt;/code&gt; that has a different aspect ratio (2:1). The easiest and fastest way to visualize the &lt;code&gt;viewBox&lt;/code&gt; coordinate system in the svg is to create a &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; that &lt;a href=&quot;https://sarasoueidan.com/blog/svg-object-fit/#viewbox-origin&quot; id=&quot;viewbox-origin-ref&quot; aria-describedby=&quot;footnote-label&quot;&gt;starts at the coordinate system’s origin&lt;/a&gt; and has a width and height value of &lt;code&gt;100%&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 500 250&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- This rect is the same size of the viewBox --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#FEDA00&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;rect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of the above code is shown in the image below. The yellow rectangle represent the size and position of the &lt;code&gt;viewBox&lt;/code&gt; within the svg viewport.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-vs-viewport-aspect-ratio.png&quot; alt=&quot;Screenshot of an SVG containing a viewBox and rect with different aspect ratio.&quot; /&gt;
	&lt;figcaption&gt;
		The result of applying the different &lt;code&gt;object-fit&lt;/code&gt; values to an image to be fitted in a box with a different aspect ratio.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now, using &lt;code&gt;preserveAspectRatio&lt;/code&gt;, you can change the position of the viewBox as well as its size (or scale) within the viewport similar to the same way we could change the position and scale of our image in the previous section using &lt;code&gt;object-fit&lt;/code&gt; and &lt;code&gt;object-position&lt;/code&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A &lt;code&gt;preserveAspectRatio&lt;/code&gt; value is made up of two keywords, one of them represents the scale &lt;code&gt;viewBox&lt;/code&gt; and has one of two values: &lt;code&gt;meet&lt;/code&gt; or &lt;code&gt;slice&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;meet&lt;/code&gt; has the same effect as &lt;code&gt;object-fit: contain;&lt;/code&gt; (or &lt;code&gt;background-size: contain;&lt;/code&gt;) and &lt;code&gt;slice&lt;/code&gt; has the same effect as &lt;code&gt;object-fit: cover;&lt;/code&gt; (or &lt;code&gt;background-size: cover;&lt;/code&gt;). The former will preserve the aspect ratio of the viewBox and fit it inside the viewport so that it’s entirely visible. This is the default behavior. Whereas &lt;code&gt;slice&lt;/code&gt; will scale the viewBox up, while preserving its aspect ratio, so that it covers the entire viewport area, even if it means cutting some of the content off (hence the “slicing” effect).&lt;/p&gt;
&lt;p&gt;The other keyword in &lt;code&gt;preserveAspectRatio&lt;/code&gt; represents and controls the position of the &lt;code&gt;viewBox&lt;/code&gt; within the viewport. It has 19 values, including &lt;code&gt;none&lt;/code&gt; which tells the browser to scale the &lt;code&gt;viewBox&lt;/code&gt; to fill the viewport area without preserving its aspect ratio, and is similar in effect to &lt;code&gt;object-fit: fill;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The default value for the &lt;code&gt;preserveAspectRatio&lt;/code&gt; is &lt;code&gt;xMidYMid meet&lt;/code&gt;, which is the value the browser uses even if you completely omit the attribute from the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following snippet using &lt;code&gt;preserveAspectRatio=&amp;quot;xMinYMin meet&lt;/code&gt; will change the position of the &lt;code&gt;viewBox&lt;/code&gt; in the previous example such that the yellow rectangle’s top edge is aligned with the viewport’s top edge, and its left edge is aligned with the left edge of the viewport, while keeping the whole rectangle contained within the viewport and preserving its aspect ratio. &lt;code&gt;xMinYMin&lt;/code&gt; is equivalent to &lt;code&gt;0% 0%&lt;/code&gt; or &lt;code&gt;left top&lt;/code&gt; values in &lt;code&gt;background-position&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 500 250&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;xMinYMin meet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- This rect is the same size of the viewBox --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#FEDA00&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;rect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;note&quot;&gt;
	I’ve created &lt;a href=&quot;http://www.sarasoueidan.com/demos/interactive-svg-coordinate-system/&quot;&gt;an interactive demo&lt;/a&gt; that includes a cheatsheet that maps each of the &lt;code&gt;preserveAspectRatio&lt;/code&gt; values to one of &lt;code&gt;background-position&lt;/code&gt; values. I highly recommend checking it out.
&lt;/div&gt;
&lt;p&gt;Now, to get back to the objective of this article. If you replace the &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; element with an image (such as a photograph) and you match the aspect ratio of that image with that of the &lt;code&gt;viewBox&lt;/code&gt;, the browser’s default behavior will be to position the &lt;code&gt;viewBox&lt;/code&gt; (and consequently also the image) so that it is fully contained and centered within the viewport (assuming again that the viewport’s aspect ratio is different from that of the &lt;code&gt;viewBox&lt;/code&gt; and the image).&lt;/p&gt;
&lt;p&gt;The following Codepen shows that in action. We have a 1:1 aspect ratio SVG, and an image with dimensions 579px by 375px. I’m using the same as the one I used in the CSS demo in the previous section again, and I’m keeping the default &lt;code&gt;preserveAspectRatio&lt;/code&gt;. Try changing the value of &lt;code&gt;preserveAspectRatio&lt;/code&gt; to see how the changes affect the position and scale of the image within the SVG.&lt;/p&gt;
&lt;p&gt;To get the effect of &lt;code&gt;object-fit: cover;&lt;/code&gt;, for example, you need only change &lt;code&gt;meet&lt;/code&gt; into &lt;code&gt;slice&lt;/code&gt; — the image will remain centered by default with &lt;code&gt;xMidYMid&lt;/code&gt;.&lt;/p&gt;
&lt;p data-height=&quot;450&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;b47336d56a318d056218aa57e8889f3a&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;SaraSoueidan&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;b47336d56a318d056218aa57e8889f3a&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/SaraSoueidan/pen/b47336d56a318d056218aa57e8889f3a/&quot;&gt;b47336d56a318d056218aa57e8889f3a&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;https://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Pretty much any combination of values of &lt;code&gt;object-fit&lt;/code&gt; and &lt;code&gt;object-position&lt;/code&gt; can be replicated using &lt;code&gt;preserveAspectRatio&lt;/code&gt; on &lt;code&gt;viewBox&lt;/code&gt;. And what’s best is that this technique will work in any and all browsers that support SVG, which means that it will work in Internet Explorer all the way back to IE9. IE8 does not support SVG so you’d have to provide a different solution for it if you need to support it.&lt;/p&gt;
&lt;h3 id=&quot;one-more-thing%3A-making-the-svg-solution-more-accessible.&quot; tabindex=&quot;-1&quot;&gt;One more thing: making the SVG solution more accessible.&lt;/h3&gt;
&lt;p&gt;One thing that the SVG solution is missing at this point is an alternative to the &lt;code&gt;alt&lt;/code&gt; attribute, because an image should &lt;em&gt;always&lt;/em&gt; have that. If the image is just decoration, the &lt;code&gt;alt&lt;/code&gt; attribute can be left empty, but it should never be omitted.&lt;/p&gt;
&lt;p&gt;To make the SVG snippet accessible, you can add the SVG alternative to &lt;code&gt;alt&lt;/code&gt;: the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element, first thing in the SVG, before your &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt; declaration. So, doing that in the example above, the code would look like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 579 375&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;xMidYMid meet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Painter’s Hands&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;image&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://s3-us-west-2.amazonaws.com/s.cdpn.io/9674/photo-1501366062246-723b4d3e4eb6.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Last but not least, to &lt;a href=&quot;https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/&quot;&gt;enhance the accessibility of SVG&lt;/a&gt; further, add a couple of attributes on the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element to describe the role of the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; as well as re-enforce the relationship between the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; and the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element, so that the latter is recognised by screen readers as the accessible name for the SVG content (—our image, in this case).&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 579 375&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; 	&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;xMidYMid meet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token attr-name&quot;&gt;aria-labelledby&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Painter’s Hands&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;image&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://s3-us-west-2.amazonaws.com/s.cdpn.io/9674/photo-1501366062246-723b4d3e4eb6.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And just like that, you now have a perfectly accessible SVG alternative to a CSS &lt;code&gt;object-fit&lt;/code&gt; declaration.&lt;/p&gt;
&lt;h3 id=&quot;summary-%26-recap&quot; tabindex=&quot;-1&quot;&gt;Summary &amp;amp; Recap&lt;/h3&gt;
&lt;p&gt;You can crop and scale any image using CSS &lt;code&gt;object-fit&lt;/code&gt; and &lt;code&gt;object-position&lt;/code&gt;. However, these properties are only supported in the latest version of ME Edge as well as all other modern browsers.&lt;/p&gt;
&lt;p&gt;If you need to crop and scale an image in Internet Explorer and provide support back to IE9, you can do that by wrapping the image in an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;, and using the &lt;code&gt;viewBox&lt;/code&gt; and &lt;code&gt;preserveAspectRatio&lt;/code&gt; attributes to do what &lt;code&gt;object-fit&lt;/code&gt; and &lt;code&gt;object-position&lt;/code&gt; do.&lt;/p&gt;
&lt;p&gt;The snippet can replace an &lt;code&gt;object-fit&lt;/code&gt; declaration:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 imgX imgY&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&amp;lt;align&gt; &amp;lt;meetOrSlice&gt;”&lt;br /&gt;     aria-labelledby=&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token attr-name&quot;&gt;title&quot;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;img&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; img alt here &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;ly;&quot;&gt;&amp;amp;ly;&lt;/span&gt;/title&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;image&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;“100%”&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;imgX&lt;/code&gt; and &lt;code&gt;imgY&lt;/code&gt; are the dimensions of the image you want to crop and scale, and &lt;code&gt;&amp;lt;align&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;meetOrslice&amp;gt;&lt;/code&gt; are the two keywords that determine the scale and position of the image within the SVG wrapper.&lt;/p&gt;
&lt;p&gt;And that’s it. A simple SVG tip to provide better cross-browser support for a less-supported CSS feature.&lt;/p&gt;
&lt;p&gt;I hope you like this tip and find it useful. Thank you for reading!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
	&lt;h4 id=&quot;footnotes__title&quot;&gt;Footnotes&lt;/h4&gt;
	&lt;ol class=&quot;footnotes__list&quot;&gt;
		&lt;li class=&quot;footnotes__item&quot; id=&quot;replaced-element&quot;&gt;
			&lt;p&gt;
				A replaced element is an element whose dimensions and content are defined outside the scope of CSS. For example, a bitmap image has an intrinsic width and an intrinsic height specified in absolute units, and from which the intrinsic ratio can be determined. Dudley Storey puts it nicely when he says that ‘another way of thinking of replaced elements is “any tag that has its content replaced by an outside source”. &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; are obvious examples’. 
				&lt;a href=&quot;https://sarasoueidan.com/blog/svg-object-fit/#replaced-element-ref&quot; aria-label=&quot;Back to content&quot;&gt;↵&lt;/a&gt;
			&lt;/p&gt;
		&lt;/li&gt;
		&lt;li class=&quot;footnotes__item&quot; id=&quot;viewport-coordinate-system&quot;&gt;
			&lt;p&gt;
				&lt;a href=&quot;https://sarasoueidan.com/blog/svg-object-fit/#viewport-coordinate-system-ref&quot; aria-label=&quot;Back to content&quot;&gt;↵&lt;/a&gt;
			&lt;/p&gt;
		&lt;/li&gt;
		&lt;li class=&quot;footnotes__item&quot; id=&quot;viewbox-origin&quot;&gt;
			&lt;p&gt;
				If the origin of the &lt;code&gt;viewBox&lt;/code&gt; is changed, the origin of the &lt;code&gt;rect&lt;/code&gt; should be changed to match that, otherwise the rectangle can no longer be used as a visualization of the current user coordinate system in use.
				&lt;a href=&quot;https://sarasoueidan.com/blog/svg-object-fit/#viewbox-origin-ref&quot; aria-label=&quot;Back to content&quot;&gt;↵&lt;/a&gt;
			&lt;/p&gt;
		&lt;/li&gt;
	&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>Auto-Sizing Columns in CSS Grid: auto-fill vs auto-fit</title>
    <link href="https://sarasoueidan.com/blog/auto-fill-auto-fit/"/>
    <updated>2017-12-29T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/auto-fill-auto-fit/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	In this article I explain the subtle but important difference between &lt;code&gt;auto-fill&lt;/code&gt; and &lt;code&gt;auto-fit&lt;/code&gt; for sizing columns in CSS Grid. Each of them exhibits a responsive behavior once compbined with &lt;code&gt;repeat()&lt;/code&gt; that you may or may not want for your responsive layout.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Migrating from Jekyll+Github Pages to Hugo+Netlify</title>
    <link href="https://sarasoueidan.com/blog/jekyll-ghpages-to-hugo-netlify/"/>
    <updated>2017-06-06T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/jekyll-ghpages-to-hugo-netlify/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	During the last 18 months, working on my Web site became a daunting task—be that for developing, redesigning it, writing a blog post, or making updates to my speaking and workshop pages. My then static site generator, &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, is why. And a change has long been overdue...
&lt;/p&gt;
&lt;p&gt;Jekyll became unbearably slow at compiling my Web site after every change I made. Until, at one point, &lt;strong&gt;waiting for the site to compile became a torturous, life-sucking process that I wanted to avoid at all costs.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This may sound exaggerated, but I promise you it’s not. Jekyll became way, way too slow. “Too slow” is actually an understatement. Recently, every time I changed a CSS property or made any change in the HTML &lt;strong&gt;I had to wait up to five minutes for that change to be picked up and compiled by Jekyll&lt;/strong&gt;. I am, once more, &lt;em&gt;not&lt;/em&gt; exaggerating. Jekyll used to literally just… freeze. I’d have to ctrl+C my way out of the freeze and then run it again for it to pick up the changes and finally compile. And if I made many changes in a row, my Macbook would heat up so much and the fan would go so crazy that it sounded like an airplane about to take off.&lt;/p&gt;
&lt;p&gt;My site is relatively small, I’d say. I have less than 100 blog posts. Less than 60 at the time of writing of this article, actually. And only a few static pages. I don’t use heavy JavaScript. In fact, I barely need to use &lt;em&gt;any&lt;/em&gt; JavaScript. And yet, Jekyll still choked every time it had to compile it.&lt;/p&gt;
&lt;p&gt;Yes, I did use Jekyll flags such as &lt;code&gt;--incremental&lt;/code&gt; and every single other flag and setting that I found or that someone recommended to speed up the compiling process. But no, it did not help.&lt;/p&gt;
&lt;p&gt;I can’t even emphasize how bad it got during the last year. I would literally feel the stress hormones increase in my blood stream every time I so much as thought about making a change to my Web site. I knew I would be about to give myself one hell of a bad time doing so.&lt;/p&gt;
&lt;p&gt;But I knew that this couldn’t go on forever. I knew I’d have to ditch Jekyll and migrate to a new generator at &lt;em&gt;some&lt;/em&gt; point. I just never found the time to do so. Actually, to be more honest here, I never &lt;em&gt;made&lt;/em&gt; the time for it because every time I had time off a project I wanted to make the most out of that time by staying &lt;em&gt;away&lt;/em&gt; from my computer. My site was just not a priority, especially since I’d been very much still undecided about &lt;em&gt;what&lt;/em&gt; to use as an alternative. So I kept stalling.&lt;/p&gt;
&lt;p&gt;But recently, knowing I had a couple of weeks off to do practically anything, and since I’ve been having a &lt;em&gt;lot&lt;/em&gt; of ideas for my blog that started piling up and that I really want to get out there, such as a setting up a newsletter, tweaking the design, improving the code (which is still WIP), adding a new type of content section (coming soon) and a few more ideas, I finally managed to put my head into it and do it, because I &lt;em&gt;want&lt;/em&gt; to get my ideas out, and write a few blog posts. &lt;strong&gt;But I needed to start enjoying working on my Web site again, first.&lt;/strong&gt; So I finally thought to myself: &lt;em&gt;“That’s it. I’m just gonna have to put my head down for a few days this week and dedicate my time to moving to the new static generator”.&lt;/em&gt; I knew this was a necessary and extremely useful time investment that I just had to finally make. I put my mind to it, and just did it. (This is the most effective way to be productive, really: Just do it.)&lt;/p&gt;
&lt;h3 id=&quot;choosing-a-static-site-generator&quot; tabindex=&quot;-1&quot;&gt;Choosing a static site generator&lt;/h3&gt;
&lt;p&gt;As I mentioned earlier, one of the reasons I didn’t make the switch earlier to another generator was because I didn’t know which one I wanted to use. Several Twitter friends suggested a few of the many available options. But I never felt comfortable with any of them. You see, everyone has some way that their brains work, and some way they like to organize their files, directories, and work, that works for them. None of the static generators I saw gave me everything I wanted and needed for my site. Until someone once suggested having a look at &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I took a few minutes to read &lt;a href=&quot;http://gohugo.io/overview/introduction/&quot;&gt;the docs&lt;/a&gt;, just to get an idea of what to expect and what Hugo had to offer—to get a first impression of it, so to speak. After reading a little into &lt;a href=&quot;http://gohugo.io/content/organization/&quot;&gt;the content structure and organization&lt;/a&gt; section and learning how Hugo offers the ability to create many different content categories and sections, plus all the general flexibility it provides, I thought that this was the static site generator I’d always wanted and needed. The organization and structure looked exactly like what I had imagined my own site to have.&lt;/p&gt;
&lt;p&gt;But what made me settle for Hugo out of all other options was seeing &lt;a href=&quot;https://novelist.xyz/tech/hugo-vs-jekyll-static-site-generator/&quot;&gt;how incredibly fast it is&lt;/a&gt; compared to Jekyll. Not only has every single blog post I read online &lt;a href=&quot;https://novelist.xyz/tech/hugo-vs-jekyll-static-site-generator/&quot;&gt;made a comparison&lt;/a&gt; and proved this, but I also got to experience this speed first hand while working on &lt;a href=&quot;https://sarasoueidan.com/case-studies/smashing-magazine/&quot;&gt;the Smashing Magazine redesign&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The new Smashing Magazine (currently at &lt;a href=&quot;https://next.smashingmagazine.com/&quot;&gt;next.smashingmagazine.com&lt;/a&gt;) uses Hugo as a static site generator. The setup that I got to use while building the front-end of the magazine was so blazingly fast that I had absolutely no doubt that the results I was reading about were true. And since my site is much smaller than Smashing Magazine, I knew I had nothing more to worry about. I mean, if Smashing Magazine can be compiled so ridiculously fast, how could my blog not be?&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
	Please note that this is in no way meant to be a comprehensive guide to Hugo. There are still some bits and pieces that I am figuring out myself, so I&#39;m in no position to write a comprehensive guide yet. You will find that you will also need to read through the Hugo docs for more details on the topics I’m going to be talking about. Think of this post as a helper that can help guide you where to start (and sometimes what to do) for certain particular Hugo topics. And finally, this is not a comparison post between Hugo and Jekyll. This is more of a Hugo starter tips kind of article. If you’re considering Hugo as your new static site generator, I hope you find some useful tidbits in here to help you get it up and running.
&lt;/p&gt;
&lt;h3 id=&quot;setting-hugo-up&quot; tabindex=&quot;-1&quot;&gt;Setting Hugo up&lt;/h3&gt;
&lt;p&gt;Setting up Hugo isn’t complicated. The docs include two guides: &lt;a href=&quot;https://gohugo.io/tutorials/installing-on-mac/&quot;&gt; one for installing Hugo on a Mac&lt;/a&gt;, and &lt;a href=&quot;https://gohugo.io/tutorials/installing-on-windows/&quot;&gt;one for installing it on Windows&lt;/a&gt;. From here on forwards I’ll be referring to a Mac setup since a Mac is my main work machine.&lt;/p&gt;
&lt;p&gt;I used brew to install Hugo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;$ brew install hugo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I followed the instructions in the installation page and updated brew and ran a few other commands to ensure everything was installed and working as expected. That’s all you need to get Hugo to work and run on your machine. It can’t get any simpler than that. With Jekyll, installation didn’t go as smoothly as I remember spending quite a lot of time to get it set up and running back then.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I tend to be a lazy developer sometimes. But that can be good because it pushes me to find the fastest and simplest way to accomplish a task. So the first thing I wanted to do in making the switch to Hugo was a way to automatically migrate all my blog posts without me having to go over each and every one of them to change the front matter in each one. (Seriously, I would have aborted this whole operation if I had to do that. 😅)&lt;/p&gt;
&lt;p&gt;Fortunately, as of version 0.15, Hugo provides &lt;a href=&quot;https://gohugo.io/commands/hugo_import_jekyll/&quot;&gt;a one-liner to migrate from Jekyll&lt;/a&gt;. You type the following line into the terminal—replacing &lt;code&gt;jekyll_root_path&lt;/code&gt; and &lt;code&gt;target_path&lt;/code&gt; with the paths to your current Jekyll directory and the directory you want to set up your new site in, and Hugo will import your current Jekyll site’s files into a new Hugo site directory for you:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;hugo &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; jekyll jekyll_root_path target_path&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’re not importing a Jekyll site, you may want to check &lt;a href=&quot;https://gohugo.io/tutorials/migrate-from-jekyll/&quot;&gt;the corresponding docs&lt;/a&gt; out, detailing what you need to know about folder structure in Hugo, such as where static assets go, where content and layout templates go, and more.&lt;/p&gt;
&lt;p&gt;The next step is to convert your Jekyll templates into Hugo templates, and this is where the bulk of the work is, and where I ended up bumping my head into the walls &lt;em&gt;quite&lt;/em&gt; a few times. (But believe me, the end result I have now is &lt;em&gt;very&lt;/em&gt; much worth it. Plus, I’ve learned a lot. I’ll be sharing some of what I learned in the next section.)&lt;/p&gt;
&lt;p class=&quot;note tip&quot;&gt;
	You may be a different kind of lazy developer. For example, you may prefer to start with a boilerplate that provides you with the setup you need, and that is ready for you to start adding content to right away, especially if you&#39;re starting a blog from scratch. In that case, I highly recommend Netlify’s &lt;a href=&quot;https://github.com/netlify/victor-hugo&quot;&gt;Victor Hugo boilerplate&lt;/a&gt;, which comes equipped with everything you need to even get Webpack and Gulp up and running in your site’s Workflow as well. The structure the boilerplate provides is slightly different from what I have below, but not too much.
&lt;/p&gt;
&lt;h3 id=&quot;diving-into-hugo%3A-technical-details&quot; tabindex=&quot;-1&quot;&gt;Diving into Hugo: Technical details&lt;/h3&gt;
&lt;p&gt;Let me start by saying this: at some point during the migration, I was just tweaking stuff, changing values, names, file names, structure, etc. in the hopes of something magically working and when it does I would go like: “I have no idea how or why this worked.” And as someone else mentioned on Twitter, apparently I’m not the only one who’s had such moments with Hugo. So I’m hoping this (fairly long) post will help some of you thinking about making the switch to Hugo, hopefully saving you some headaches along the way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; There’s a lot about Hugo that I &lt;em&gt;still&lt;/em&gt; don’t know how to do and find myself Googling sometimes. But I’ve got all the basics and everything I need &lt;em&gt;for now&lt;/em&gt; all up and running, and yes, I do know how and why everything I have working now is working the way it is. So, let me share some of that stuff with you. I’ll also share some of the extremely useful articles I found that helped me as well. So think of this article as an idea dump, and a set of reminders for my future self to get back to if I ever get confused again about the basics.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
	Please note that not you may end up not using the same process or directory structure I am using. In fact, I am sure that you won’t, unless you have the exact same content types as I do—which is highly unlikely. Also note that yo may find a better way of doing some of the things I am doing now, which is also good. And if you’re already a Hugo pro and find that some things could be done in a better way, please do feel free to share your ways for the rest of us to learn from.
&lt;/p&gt;
&lt;h4 id=&quot;hugo-folder-structure&quot; tabindex=&quot;-1&quot;&gt;Hugo Folder Structure&lt;/h4&gt;
&lt;p&gt;My site’s local directory structure currently looks like this:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/article-assets/hugo-netlify/hugo-folder-structure.png&quot; alt=&quot;Hugo Folder Structure&quot; /&gt;
	&lt;figcaption&gt;
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The folders you see in the image above, apart from &lt;code&gt;node_modules&lt;/code&gt;, are the ones that Hugo generates for you when you import your site from Jekyll, and these are also the ones you would normally create and set up for a Hugo site. The files at the bottom are the files needed or used by Github and Gulp. The only file that is also used by Hugo is the &lt;code&gt;config.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt; contains the site’s configuration variables such as &lt;code&gt;baseURL&lt;/code&gt; among many other variables that you may or may not decide to use. It is similar to Jekyll’s yaml configuration file. The Hugo docs provide a long list of available variables and everything you need to know to set up a config file that works for you in &lt;a href=&quot;https://gohugo.io/overview/configuration/&quot;&gt;this page&lt;/a&gt;. My config file contains very few variables for now.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/public/&lt;/code&gt; is the directory your compiled site will live in. This directory is similar to the the &lt;code&gt;dist&lt;/code&gt; directory used in most apps’ directory structure. The rest of the directories are where the dev process happens.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;static&lt;/code&gt; directory is where static content such as images, css and js files, audio, video, talk slides, etc. live. It is where I find I spend most of my time working.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;After working on the Smashing Magazine redesign I also learned that your structure can be different from the above. The basics are the same, but if you use something like Netlify’s &lt;a href=&quot;https://github.com/netlify/victor-hugo&quot;&gt;Victor Hugo boilerplate&lt;/a&gt;, your setup would be a little different, but the main concepts of what is compiled to where remains almost the same. Also note that the Victor Hugo boilerplate is a fantastic place to start if you want to move to Hugo and use Webpack and Gulp in your workflow. I found Webpack to be overkill for my site given how little JS I have here, but if you do need it, I highly recommend using the boilerplate. I also prefer building from scratch so I can learn the ins and outs of how things work. Whatever works for you, go for it.&lt;/p&gt;
&lt;h4 id=&quot;creating-and-laying-out-content&quot; tabindex=&quot;-1&quot;&gt;Creating and laying out content&lt;/h4&gt;
&lt;p&gt;For any kind of content you want, be that a static page, a blog post, an index page (for articles, case studies, etc.), you need to create an &lt;code&gt;.md&lt;/code&gt; (markdown) file in the &lt;code&gt;/content/&lt;/code&gt; directory. This is where &lt;em&gt;all&lt;/em&gt; the content is “defined”. After creating the content in its specified directory, you then create (or re-use) a layout template from the &lt;code&gt;/layouts/&lt;/code&gt; directory to lay that content out.&lt;/p&gt;
&lt;p&gt;Every &lt;code&gt;.md&lt;/code&gt; file in the &lt;code&gt;/content/&lt;/code&gt; directory corresponds to a page and starts with the page’s front matter, which can be written in either &lt;code&gt;yaml&lt;/code&gt; or &lt;code&gt;toml&lt;/code&gt; format. Since I wanted to get the feel of a whole new environment, and since most Hugo docs and resources use it too, I decided to use &lt;code&gt;toml&lt;/code&gt;. Jekyll uses &lt;code&gt;yaml&lt;/code&gt;.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;I won’t go into the details of the difference between the syntax used by Hugo versus that used by Jekyll. The Hugo docs as well as, well, Google, do a great job at explaining the differences, so feel free to research further and get back to this article once the differences are clear. I personally did have to spend quite some time learning the new syntaxes (toml, Go templating, etc.) before I felt comfortable using them. But they don’t have a steep learning curve, so don’t let the new syntax intimidate you if you’re not already familiar with it.&lt;/p&gt;
&lt;h5 id=&quot;defining-content-types-(or-declaring-types-of-content)&quot; tabindex=&quot;-1&quot;&gt;Defining Content Types (or Declaring types of content)&lt;/h5&gt;
&lt;p&gt;Every page’s front matter defines the type of the page/content, which in turn defines what template will be used to lay it out. The type of the page is defined using the &lt;code&gt;type&lt;/code&gt; variable. For example, the front matter of an article in the blog section on my site looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;+++&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;type = &quot;blog&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;description = &quot;...&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;title = &quot;...&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;date = ...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;+++&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;highlight&quot;&gt;The &lt;code&gt;type&lt;/code&gt; value an be practically anything&lt;/span&gt;, and this is where one of Hugo’s powers truly shines. You can define as many content types as you want. For example, I currently have five types of content on my site: static (pages such as About and Hire), blog (articles like the one you’re reading now), workshops, case studies, and desk (which is a new kind of posts that will be coming soon). I can create as many more content types as I want in the future.&lt;/p&gt;
&lt;!-- (This is the first thing I loved about Hugo compared to Jekyll, which does not offer a similar functionality as far as I know. Some devs work around this by using tags to replace types in Jekyll, but in the end, they are all seen as only one type by Jekyll, and so will eventually be less flexible than Hugo’s.) --&gt;
&lt;p class=&quot;note update&quot;&gt;
 	A new feature &lt;a href=&quot;https://discuss.gohugo.io/t/just-merged-nested-sections-help-take-it-for-a-spin/6909?u=maiki&quot;&gt;is being rolled into Hugo now&lt;/a&gt; that allows you to create subsections of content, too! This would allow you to, say, create design and development subsections in the articles section, and much, much more. It’s an exciting new addition to the CMS.
&lt;/p&gt;
&lt;p&gt;The following screenshot shows what the &lt;code&gt;/content/&lt;/code&gt; directory of my site currently looks like:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/article-assets/hugo-netlify/content-types.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;The content of the &lt;code&gt;content&lt;/code&gt; directory on my Web site.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Static pages are created as individual &lt;code&gt;.md&lt;/code&gt; files in the root of the &lt;code&gt;/content/&lt;/code&gt; directory. Other kinds of content that would need an index page (such as articles, workshops, case studies, etc.) are created inside directories that are named after the content type. For example, workshops are created inside a &lt;code&gt;/content/workshops/&lt;/code&gt; directory. My articles live inside the &lt;code&gt;/content/blog/&lt;/code&gt; directory. &lt;span class=&quot;highlight&quot;&gt;Directories like these are also referred to as &lt;em&gt;sections&lt;/em&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;For every piece of content, you need to define the type of that content. And that can be done in two ways.&lt;/p&gt;
&lt;p&gt;The type of the static pages is defined using the &lt;code&gt;type&lt;/code&gt; variable, which is in the page’s front matter. The type for the four sections (blog, workshops, case studies and desk), however, is defined using directory structure. When you use directory structure to define a type, you don’t have to define the type in the front matter anymore. For example, a blog post lives inside the &lt;code&gt;blog&lt;/code&gt; directory, so its type is automatically set to &lt;code&gt;blog&lt;/code&gt;. You don’t need to redefine that type in the front matter of each post.&lt;/p&gt;
&lt;p&gt;You can use either the &lt;code&gt;type&lt;/code&gt; variable in the front matter or the directory structure way to define content type. Generally, you would use the &lt;code&gt;type&lt;/code&gt; variable to define and create static pages; and use the directory structure to define content that requires an index page, such as blog posts.&lt;/p&gt;
&lt;p&gt;An important and useful thing to know here is that &lt;span class=&quot;highlight&quot;&gt;when you define the type of the page using the &lt;code&gt;type&lt;/code&gt; variable, the page can be placed anywhere inside &lt;code&gt;/content/&lt;/code&gt; directory and the directory structure will be irrelevant&lt;/span&gt;. Meaning that you could define a page of type &lt;code&gt;static&lt;/code&gt; and place it inside the &lt;code&gt;blog&lt;/code&gt; directory, and Hugo will still see it as a static page, and consider its location in the blog folder irrelevant.&lt;/p&gt;
&lt;p&gt;But… irrelevant for what? The answer is: to choosing which layout template to use.&lt;/p&gt;
&lt;p&gt;You see, each content type will be “mapped” to a certain layout template. You can have different types use the same template, too. I’ll talk more about layout in the next section. But first, let’s create a couple of content pages: two static pages (Homepage and About, for example) and an index page for the blog posts.&lt;/p&gt;
&lt;p&gt;But before we do that, I want to point out a note about creating index pages for different sections or types.&lt;/p&gt;
&lt;p&gt;The blog section needs to contain an &lt;code&gt;_index.md&lt;/code&gt; file inside the &lt;code&gt;/content/blog/&lt;/code&gt; directory. This file is the index page for this section (where we will display a list of all the posts). The &lt;code&gt;/content/blog/&lt;/code&gt; directory will also host the individual blog posts as well. Check the following screenshot out for a more visual example:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/article-assets/hugo-netlify/section-type.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		Each content type created using directory structure (or, each content &lt;em&gt;section&lt;/em&gt;) includes an index page (starts with an underscore), in addition to the individual posts in that section.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Similarly, any and every other content type (or section) will have an index page as well as the individual posts in that section.&lt;/p&gt;
&lt;p&gt;So, let’s start creating some pages.&lt;/p&gt;
&lt;h6 id=&quot;the-homepage&quot; tabindex=&quot;-1&quot;&gt;The homepage&lt;/h6&gt;
&lt;p&gt;The homepage is created by creating an &lt;code&gt;_index.md&lt;/code&gt; file inside &lt;code&gt;/content/&lt;/code&gt;. You can see it at the top of all static pages in the folder structure of the screenshot above.&lt;/p&gt;
&lt;p&gt;The homepage is the only exception to the other pages when it comes to layout in that it will require its own layout in the &lt;code&gt;/layouts/&lt;/code&gt; folder (we’ll talk more about layout in an upcoming section) and that layout template has the same name: &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the front matter of the &lt;code&gt;/content/_index.md&lt;/code&gt; you define the type of the page as well as give it a title and description.&lt;/p&gt;
&lt;p&gt;The front matter of my homepage looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;+++&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;type = &quot;page&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;title = &quot;Home&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;description = &quot;Sara Soueidan — Front-end web developer, author and speaker&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;+++&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The description is used in the header partial of the site as a &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; value like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; {{ .Page.Description }} &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason I’m not using the &lt;code&gt;title&lt;/code&gt; value as the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; in the HTML is that, in other pages, the &lt;code&gt;title&lt;/code&gt; of the page is used as the name the page will get in the main menu. More on this later.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;.md&lt;/code&gt; file in the &lt;code&gt;/content/&lt;/code&gt; directory can contain both markdown and HTML. So for the homepage, and since I have no dynamic content such as post listings, I only have the HTML of the page in there. But how does this markdown/HTML content get laid out, and how do we include the header and footer of the page? That all happens in the layout template.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;/layouts/index.html&lt;/code&gt; file is the layout used for the homepage. And this is what it looks like:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ partial &quot;homepage-header.html&quot; . }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ .Content }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ partial &quot;footer.html&quot; . }}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;{{ .Content }}&lt;/code&gt; pulls the content from the corresponding page in the &lt;code&gt;/content/&lt;/code&gt; folder.&lt;/span&gt; So, for the homepage here, it pulls the content of the homepage from the &lt;code&gt;/contents/_index.md&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Additionally, I’m calling the homepage header as well as the site footer in here using partials.&lt;/p&gt;
&lt;p&gt;By default, when you require &lt;code&gt;partial &amp;quot;footer.html&amp;quot; .&lt;/code&gt;, &lt;span class=&quot;highlight&quot;&gt;Hugo will look for the partials—any partial—inside a &lt;code&gt;partials&lt;/code&gt; directory which in turn is located inside the &lt;code&gt;layouts&lt;/code&gt; directory.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
Refer to &lt;a href=&quot;http://gohugo.io/templates/partials/&quot;&gt;the Hugo docs on partials&lt;/a&gt; for details on what the dot at the end of the statemenet refers to and what it does, and how you can customize partial calls. 
&lt;/p&gt; 
&lt;p&gt;And that is how you create the homepage for your site: a &lt;code&gt;/content/_index.md&lt;/code&gt; file that contains the homepage content, which is then called and laid out using &lt;code&gt;/layouts/index.html&lt;/code&gt;.&lt;/p&gt;
&lt;h6 id=&quot;adding-a-static-page&quot; tabindex=&quot;-1&quot;&gt;Adding a static page&lt;/h6&gt;
&lt;p&gt;After I got the homepage set up, I wanted to set the rest of the static pages up before moving on to the more dynamic content. So I set out to build the About page.&lt;/p&gt;
&lt;p&gt;I had to do a lot of Googling and reading help threads in the Hugo forums and elsewhere to figure this one out. So I hope this post will be most beneficial when it comes to creating static pages—which, surprisingly, turned out to be quite simple.&lt;/p&gt;
&lt;p&gt;Static pages are created in the root of the &lt;code&gt;/content/&lt;/code&gt; folder, just like the homepage. However, unlike the homepage, the file names will not start with an underscore.&lt;/p&gt;
&lt;p&gt;Also unlike the homepage is the fact that you will need to specify the type of the page as well as tell Hugo to include it in the site’s main menu, give it a title and a description.&lt;/p&gt;
&lt;p&gt;For the About page of my site, I created a &lt;code&gt;/content/about.md&lt;/code&gt; file. The front matter of the page looks like the following:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;+++&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;type = &quot;static&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;page = &quot;static/single.html&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;title = &quot;About &amp;amp; Interviews&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;description = &quot;About Sara Soueidan — Front-end web developer, author and speaker&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;menu = &quot;main&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;weight = &quot;1&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;+++&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the &lt;code&gt;type&lt;/code&gt; value. As I mentioned before, you can specify any type in there. I used &lt;code&gt;static&lt;/code&gt; because it literally describes the type of this page. (You’ll also find a lot of online resources using this type for static pages, too.)&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;page&lt;/code&gt; variable is telling Hugo which template in the &lt;code&gt;/layouts/&lt;/code&gt; directory to use.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;It is worth noting here that Hugo will automatically use this template even if I don&#39;t tell it to. But I remember banging my head against the wall a lot at first when I was trying to figure out how to use the layouts for the pages. I didn&#39;t know which layout was going to be used. Despite reading the docs, I still found myself doing and undoing a lot of things and then seeing things work and not work like some sort of magic. Hugo felt like a black box at first that took me a few days to figure out enough to feel comfortable writing about it. When it finally worked, I decided not to touch the front matter anymore because I was afraid I may end up breaking the layouts again. But now that I know better, it&#39;s useful to note that you don’t really need the &lt;code&gt;page&lt;/code&gt; variable in there.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; will be used as the title of the link in the menu. (If you look at the menu at the top of this page, you’ll see it as “About &amp;amp; Interviews”).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;description&lt;/code&gt; is used in the header partial as mentioned before as a &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; for the page (which you can see in your browser‘s tab description.)&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;highlight&quot;&gt;The &lt;code&gt;menu&lt;/code&gt; variable tells Hugo that this page should have its own link in the main menu.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;highlight&quot;&gt;The &lt;code&gt;weight&lt;/code&gt; variable is very useful because it allows you to control the order in which your items appear in the menu.&lt;/span&gt; If you don’t use it, Hugo will use its own default order, which is not the order I wanted on my site. You can set weights in negative values as well.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
I will leave the details about using and setting up the main menu for you to research and read about in the Hugo docs for brevity’s sake and because, whether I like to admit it or not, I’m still a little confused about some aspects of the menu; but I got to a point where I had it working the way I wanted it to and then decided not to touch it anymore because I was afraid I would end up breaking it. Again. 😂
&lt;/p&gt;
&lt;p&gt;All other static pages are created similarly. The only thing that’s different for each of them is the title and description as well as the order in the menu. The layout used is the same for all of them.&lt;/p&gt;
&lt;p&gt;I’d like to note something here that we will get back to later:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hugo has a specific order in which it chooses which layout to use for every page you create in &lt;code&gt;/content/&lt;/code&gt;. We will talk about this more in the layouts section below. So had we not specified a &lt;code&gt;/layouts/static/single.html&lt;/code&gt; as a layout template, it would have used a different template from a default folder inside &lt;code&gt;/layouts/&lt;/code&gt;. More on this later.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Last but not least, and just like the homepage, the HTML content of the about page is placed in the &lt;code&gt;about.md&lt;/code&gt; file, and then pulled into the &lt;code&gt;/layouts/static/single.html&lt;/code&gt; template using &lt;code&gt;{{ .Content }}&lt;/code&gt;, with a call to the header and footer partials as well. Note how the &lt;code&gt;static&lt;/code&gt; type has a corresponding &lt;code&gt;static&lt;/code&gt; folder in the &lt;code&gt;/layouts/&lt;/code&gt; directory that contains its layout template.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
You don&#39;t have to place all the HTML in the markdown file. You can always place the layout HTML such as container elements et al in the layout template, and only have the text content inside the markdown file. I only do it this way because I like it this way.
&lt;/p&gt;
&lt;h5 id=&quot;content-archetypes&quot; tabindex=&quot;-1&quot;&gt;Content Archetypes&lt;/h5&gt;
&lt;p&gt;You may have noticed in the screenshot above that I also have a folder called &lt;code&gt;/archetypes/&lt;/code&gt; at the root of my site. This directory is also related to the content types you create. But it has a specific and very useful purpose.&lt;/p&gt;
&lt;p&gt;To explain the purpose of this directory, I’m going to first quote &lt;a href=&quot;https://gohugo.io/content/archetypes/&quot;&gt;the corresponding page in the Hugo docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In Hugo v0.11, we introduced the concept of a content builder. Using the CLI command &lt;code&gt;hugo new [path/to/my/content]&lt;/code&gt;, an author could create an empty content file, with the date and title automatically defined in the front matter of the post. While this was a welcome feature, active writers need more flexibility.
When defining a custom content type, you can use an archetype as a way to define the default metadata for a new post of that type.
Archetypes are quite literally archetypal content files with pre-configured front matter. An archetype will populate each new content file of a given type with any default metadata you’ve defined whenever you run the hugo new command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, defining an archetype allows you to speed up your content creation process, because it will populate the front matter of your new page with all the variables you want it to.&lt;/p&gt;
&lt;p&gt;For example, suppose I want to create a new case study (which would go in &lt;code&gt;/content/case-studies/&lt;/code&gt;). Instead of going into the directory and creating a new &lt;code&gt;.md&lt;/code&gt; file for the new page, I can type this one-liner into the terminal and Hugo will create the new file for me:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;hugo new case-studies/my-new-case-study.md&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the new case study (&lt;code&gt;my-new-case-study.md&lt;/code&gt;) will automatically be populated with variables for: client name, client logo (path to the image), client description, project description, project date, … and many more. The values for these variables will be empty by default, ready for me to fill them up with their values.&lt;/p&gt;
&lt;p&gt;The following image shows the variables I have defined in front matter of the &lt;code&gt;case-studies&lt;/code&gt; archetype:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/article-assets/hugo-netlify/archetype.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The variables defined for the case studies archetype. Every time I command hugo to create a new case study for me, it will automatically populate the front matter of the new case study with these variables. These variables are then called in the HTML template of the case study page. 
		&lt;br /&gt;
		Also note the other archetypes I have defined in the &lt;code&gt;archetypes&lt;/code&gt; directory that correspond to the other four type sections I have on my site.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;That’s pretty much all there is to know about archetypes. You can read more about them in the Hugo docs page. They’re pretty handy. You don’t absolutely &lt;em&gt;need&lt;/em&gt; to define them, but I reckon you’ll want to.&lt;/p&gt;
&lt;h5 id=&quot;laying-content-out-with-page-layouts-and-creating-an-index-page-for-posts&quot; tabindex=&quot;-1&quot;&gt;Laying content out with page layouts and creating an index page for posts&lt;/h5&gt;
&lt;p&gt;This is the part that got me the most confused at first. How do I know which layout will be used for this section? How do I know how many templates needs to be in each one or whether I need any at all?&lt;/p&gt;
&lt;p&gt;I did a lot of fiddling around, Googling, and, mostly, just trial and error until I managed to make the layouts work. Then I started breaking them so I could understand how and why they worked. I can now finally confidently say that I’ve got the hang of them.&lt;/p&gt;
&lt;p&gt;Generally speaking, if you’re creating a very simple blog, you will only need two default templates: &lt;code&gt;list.html&lt;/code&gt; and &lt;code&gt;single.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;list.html&lt;/code&gt; would be used for the pages whose role is to display a list of items, such as the blog’s index page where you see the list of all blog posts you have.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;single.html&lt;/code&gt;, as you may have already guessed, is used to lay out the single pages such as the individual blog posts.&lt;/p&gt;
&lt;p&gt;These two templates would go in a &lt;code&gt;/_defaults/&lt;/code&gt; directory inside &lt;code&gt;/layouts/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, if you create a blog with a few posts and don’t give Hugo any special instructions about how to lay their content out, it will go looking in &lt;code&gt;/layouts/_defaults/&lt;/code&gt; for templates to use.&lt;/p&gt;
&lt;p&gt;I have these layouts in place as a fallback. But I &lt;em&gt;override&lt;/em&gt; them.&lt;/p&gt;
&lt;p&gt;You can override the default templates by providing templates that fall under the same section name or content type as your content.&lt;/p&gt;
&lt;p&gt;In other words, you can create a similar directory structure in the &lt;code&gt;/layouts/&lt;/code&gt; directory to the one you have in the &lt;code&gt;/content/&lt;/code&gt; directory, and Hugo will follow that structure to determine which template to use.&lt;/p&gt;
&lt;p&gt;Or, you can create a directory that has the same name as a &lt;code&gt;type&lt;/code&gt; you’ve defined in the content directory, such as the &lt;code&gt;static&lt;/code&gt; type we defined for the static images. Hugo will then use the template inside &lt;code&gt;/layouts/static/&lt;/code&gt; as a template for all the pages that have &lt;code&gt;type = static&lt;/code&gt;, instead of using the default templates.&lt;/p&gt;
&lt;p&gt;For example, I created a &lt;code&gt;/layouts/static/&lt;/code&gt; directory, and inside that directory I created a &lt;code&gt;single.html&lt;/code&gt; file, which Hugo will use to override &lt;code&gt;/layouts/_default/single.html&lt;/code&gt; to lay out the static pages.&lt;/p&gt;
&lt;p&gt;Once again, the &lt;code&gt;/layouts/static/single.html&lt;/code&gt; page is just a template containing the following:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ partial &quot;header.html&quot; . }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ .Content }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ partial &quot;footer.html&quot; . }}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where the content of the template is pulled from the respective markdown. So, the generated &lt;code&gt;about.html&lt;/code&gt; page is in fact the above &lt;code&gt;/layouts/static/single.html&lt;/code&gt; page, with the &lt;code&gt;{{ .Content }}&lt;/code&gt; pulled from &lt;code&gt;/content/about.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, to create an index page for a list of posts as well as the posts I want to list, such as the blog page and the articles it lists, or the workshops page and the workshop details pages, we do something very similar.&lt;/p&gt;
&lt;p&gt;Just like we created a directory for the content type defined using &lt;code&gt;type&lt;/code&gt; that has the same name as the type itself, we create a directory for each of the other content types that were initially defined using directory structure, and we give that directory the same name as the directory name it has in the content folder.&lt;/p&gt;
&lt;p&gt;Or: just like we created a folder in &lt;code&gt;/layouts/&lt;/code&gt; named after the content &lt;code&gt;type&lt;/code&gt;, we create a folder for each of the content sections (&lt;code&gt;blog&lt;/code&gt;, &lt;code&gt;workshops&lt;/code&gt;, etc.) and name the folder after the section, so we end up with the same directory structure inside &lt;code&gt;/layouts/&lt;/code&gt; as the one we have in &lt;code&gt;/content/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Confused yet? Don’t be. Here is what it looks like for my site:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/article-assets/hugo-netlify/layouts.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The structure of the content and layouts directories of my site.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Let’s take a look at the blog section again. The &lt;code&gt;/content/blog/&lt;/code&gt; directory has a corresponding &lt;code&gt;/layouts/blog/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Inside the &lt;code&gt;/content/blog/&lt;/code&gt; directory I have an index page: &lt;code&gt;_index.md&lt;/code&gt; and the blog posts.&lt;/p&gt;
&lt;p&gt;Inside &lt;code&gt;/layouts/blog/&lt;/code&gt; I have a &lt;code&gt;list.html&lt;/code&gt; template as well as a &lt;code&gt;single.html&lt;/code&gt; page.&lt;/p&gt;
&lt;p&gt;Hugo will use the &lt;code&gt;list.html&lt;/code&gt; template for the &lt;code&gt;_index.md&lt;/code&gt; page and the &lt;code&gt;single.html&lt;/code&gt; template for each of the individual blog posts.&lt;/p&gt;
&lt;p&gt;Similarly, each of the other sections also gets its own layout directory containing a &lt;code&gt;list.html&lt;/code&gt; and &lt;code&gt;single.html&lt;/code&gt; template.&lt;/p&gt;
&lt;p&gt;As I mentioned before, you don’t really need all these layouts. And you may have noticed that a few layout pages I have are exactly the same except for their names. The reason I’m doing this is for future flexibility. If I ever want to change the layout for one type or section, I’ll just have to modify its corresponding layout template. If your site is simpler than mine and does not have as many content types, you’ll probably not need to do as much as I did here.&lt;/p&gt;
&lt;p&gt;The only exception to the layouts directory structure rule is the homepage, whose layout template is placed in the root of the &lt;code&gt;/layouts/&lt;/code&gt; template, named &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Please note that it is important that you check out the default order in which Hugo chooses the template for each page. I highly recommend you do so.&lt;/p&gt;
&lt;p&gt;To quote the docs:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hugo uses a set of rules to figure out which template to use when rendering a specific page.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Hugo will use the following prioritized list. If a file isn’t present, then the next one in the list will be used. This enables you to craft specific layouts when you want to without creating more templates than necessary. For most sites, only the &lt;code&gt;_default&lt;/code&gt; file at the end of the list will be needed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Users can specify the type and layout in the front-matter. Section is determined based on the content file’s location. If type is provided, it will be used instead of section.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can learn more about this order prioritization in &lt;a href=&quot;https://gohugo.io/templates/content/&quot;&gt;the corresponding page in the docs&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;looping-through-section-lists&quot; tabindex=&quot;-1&quot;&gt;Looping through section lists&lt;/h4&gt;
&lt;p&gt;The last point I want to talk about in the technical Hugo section is listing the posts of a section in that section’s index page.&lt;/p&gt;
&lt;p&gt;Again, let’s take the blog in &lt;code&gt;/content/blog/&lt;/code&gt; as an example.&lt;/p&gt;
&lt;p&gt;Markdown files will, of course, not include any templating logic. So, to list all the posts of the blog, we’ll need to do that in the layout template corresponding for that index page, which is located in  &lt;code&gt;/layouts/blog/list.html&lt;/code&gt;. The loop and all other templating logic is written in Go.&lt;/p&gt;
&lt;p&gt;Now, the loop itself can and will probably be different for a lot of you. After Googling around a lot, I managed to end up with the following loop, which shows the latest five posts and then calls the pagination partial after the loop:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;articles-list&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Ranges through content/blog/*.md --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    {{ range (.Paginator 5).Pages }}  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post-title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{.RelPermalink}}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ .Title }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post-meta&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ .Date.Format &quot;January 2, 2006&quot; }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; {{ if .Params.External }} &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;mdash;&quot;&gt;&amp;amp;mdash;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post-host&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;for {{ .Params.External.Host }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; {{ end }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                        &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post-summary&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            {{ .Summary }} &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- automatically takes the first paragraph in the .md article --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;small&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{.RelPermalink}}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;read-more-link&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Read more ››&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;small&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    {{ end }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ partial &quot;pagination.html&quot; . }}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;note&quot;&gt;
	Don’t judge the HTML in that loop yet. I haven’t worked on my site in a long time. It needs and could use some improvement. The markup will change soon.
&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;{{ range .Paginator.Pages }}&lt;/code&gt; part is the key here. &lt;span class=&quot;highlight&quot;&gt;Each &lt;code&gt;.Paginator&lt;/code&gt; you use in any section’s index page will loop through and display the posts &lt;em&gt;in that section&lt;/em&gt;.&lt;/span&gt; The &lt;code&gt;(.Paginator 5).Pages&lt;/code&gt; tells Hugo to only list five posts. The loop in the code above will go over the posts in the &lt;code&gt;blog&lt;/code&gt; section, listing only the most recent five. A similar loop in the &lt;code&gt;layouts/workshops/index.html&lt;/code&gt; file would loop over the workshops inside &lt;code&gt;/content/workshops/&lt;/code&gt; and display a list of the posts in there.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
	I&#39;m still confused by some of the global site and page variables in Hugo. I&#39;m currently good with what I have and am using, but if I ever need more flexibility, options, functionality, I will need to dig more into the docs and get a lot more out of Hugo’s logic than just a simple loop. You should too.
&lt;/p&gt;
&lt;p&gt;As for the &lt;code&gt;pagination.html&lt;/code&gt; partial, mine currently looks like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ $baseurl := .Site.BaseURL }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ $pag := .Paginator }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ if gt $pag.TotalPages 1 }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;nav&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;center pagination&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    {{ range $pag.Pagers }}{{ if eq . $pag }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pagination__button button--disabled&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ .PageNumber }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ else }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pagination__button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;{{ $baseurl }}{{ .URL }}&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ .PageNumber }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ end }}{{ end }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;clearfix&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        {{ if .Paginator.HasPrev }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pagination__button pagination__button--previous&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Previous Page&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{ .Paginator.Prev.URL }}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            Newer Articles&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        {{ else }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pagination__button pagination__button--previous button--disabled&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Newer Articles&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        {{ end }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        {{ if .Paginator.HasNext }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pagination__button pagination__button--next&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Next Page&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{ .Paginator.Next.URL }}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            Older Articles&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        {{ else }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pagination__button pagination__button--next button--disabled&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Older Articles&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        {{ end }}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;../article-archives/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button button--full&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;See a list of all articles&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;nav&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ end }}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Feel free to dig into the variables more and learn more about them. I find that the code above is understandable as it is, but, again, if you need more functionality, the docs and forums would probably be able to help more.&lt;/p&gt;
&lt;h4 id=&quot;creating-an-archive-page&quot; tabindex=&quot;-1&quot;&gt;Creating an Archive page&lt;/h4&gt;
&lt;p&gt;In addition to the default blog page, I wanted to add an archive page that lists all of my articles in one pagination-less page. This was not as straightforward as I’d hoped it would be. The docs didn‘t help me much and I again found myself Googling. I came across &lt;a href=&quot;https://parsiya.net/blog/2016-02-14-archive-page-in-hugo/&quot;&gt;this extremely useful article&lt;/a&gt;, and pretty much used the same technique the author is using.&lt;/p&gt;
&lt;p&gt;For the archive page, I created a static page inside &lt;code&gt;/content/&lt;/code&gt; and gave it a new &lt;code&gt;type&lt;/code&gt;: &lt;code&gt;archive&lt;/code&gt;. The page will use the layout inside &lt;code&gt;/layouts/archive/single.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Inside the layout template, I loop through the articles using a loop similar to the blog’s loop, but with an important modification:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- /layouts.archive/single.html --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ range where .Site.Pages &quot;Type&quot; &quot;blog&quot; }}  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post-title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{.RelPermalink}}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ .Title }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post-meta&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ .Date.Format &quot;January 2, 2006&quot; }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; {{ if .Params.External }} &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;mdash;&quot;&gt;&amp;amp;mdash;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post-host&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;for {{ .Params.External.Host }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; {{ end }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                        &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;post-summary&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        {{ .Summary }} &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- automatically takes the first paragraph in the .md article --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;small&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{.RelPermalink}}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;read-more-link&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Read more ››&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;small&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;{{ end }}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Heads up:&lt;/strong&gt; &lt;span class=&quot;highlight&quot;&gt;&lt;code&gt;.Site.Pages&lt;/code&gt; will loop through &lt;em&gt;all&lt;/em&gt; pages you have on your site. In other words, it will list every single &lt;code&gt;.md&lt;/code&gt; file you have inside &lt;code&gt;/content/&lt;/code&gt;.&lt;/span&gt; In order to tell Hugo to only display posts inside the &lt;code&gt;/content/blog/&lt;/code&gt; section, you “filter” the pages using &lt;code&gt;&amp;quot;Type&amp;quot; &amp;quot;blog&amp;quot;&lt;/code&gt;. Similarly, if you want to create an archive page for a different section, use that section’s type name as a filter.&lt;/p&gt;
&lt;p&gt;And that’s it.&lt;/p&gt;
&lt;h3 id=&quot;hosting-on-netlify&quot; tabindex=&quot;-1&quot;&gt;Hosting on Netlify&lt;/h3&gt;
&lt;p&gt;Github pages was my choice for hosting this Web site over the last couple of years. At some point, it started coming short. There also seemed to be some weird caching issue happening all the time where I found myself having to push changes to the repository &lt;em&gt;twice&lt;/em&gt; in order for the latest change to show up (I guess the cache may not have been invalidated whenever it needed to). So I’d start creating “dummy commits” only to clear the cache and be able to see the changes I’d made live.&lt;/p&gt;
&lt;p&gt;Now, I’m not sure if this was indeed a cache problem, although that’s exactly what it seemed like it was. I also don’t know if anyone can replicate this issue. No, I haven’t asked Github support about it. I’ve hated my Web site so much that I kinda thought “I’ve got a lot worse happening locally to even worry about this online issue”, so I just ignored it all along.&lt;/p&gt;
&lt;p&gt;I also saw how blazing fast &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; was when I worked on Smashing Magazine. Netlify also offers to “make your site or web-app many times faster by bringing it closer to your users. Instead of a single server, push to a global network of intelligent CDN nodes that also handle asset fingerprinting, automatic caching headers, and smart redirect &amp;amp; rewrite rules.”&lt;/p&gt;
&lt;p&gt;And to top that off, if you’re a developer and/or you’re doing open-source work, Netlify offers you a free Pro subscription for life. All they ask for in return is a mention of Netlify on your site or application. For me, this was no issue at all as I always mention where my site is hosted in the footer. So, I signed up for the free Pro subscription. Free, fast hosting! Woohoo!&lt;/p&gt;
&lt;p&gt;It only takes a few clicks to get your site up.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an account on &lt;a href=&quot;http://netlify.com/&quot;&gt;netlify.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Link your Netlify account to your code repository. Mine is hosted on Github so I just connected it (you do all this from the Netlify dashboard).&lt;/li&gt;
&lt;li&gt;Specify the build destination folder as well as a build command. &lt;code&gt;hugo&lt;/code&gt; is the build command I used, and &lt;code&gt;public&lt;/code&gt; is the build directory. (See screenshot below.)&lt;/li&gt;
&lt;li&gt;Set up a custom domain. This also includes making some DNS changes.&lt;/li&gt;
&lt;li&gt;It took literally only 3 clicks to get an SSL certificate and HTTPS running for the site.&lt;/li&gt;
&lt;li&gt;And… well… you’re done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I should probably mention that I did face a couple of annoyances while I was making the switch but it was not Netlify’s fault. And the Netlify team was super helpful and swiftly debugging the issues I was having. After making some DNS changes in my domain registrar’s dashbard, it took a few hours for my site to be online on my custom domain.&lt;/p&gt;
&lt;p&gt;A couple of tips worth mentioning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add your local &lt;code&gt;/public/&lt;/code&gt; folder to your &lt;code&gt;.gitignore&lt;/code&gt; file. Netlify will build your site for you on their servers. In order to avoid any possible conflicts, don’t push your public directory to the repo. I keep mine local now. I had an issue with some templates rendering when I was committing it before.&lt;/li&gt;
&lt;li&gt;Check the Hugo version you’re using (&lt;code&gt;hugo version&lt;/code&gt;) against the version that Netlify uses. I had some build errors preventing the deploy at first which were a result of my version being ahead of that of Netlify’s. Let the team know if you face any similar issues so they can add a build environment variable to your site to match your local version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s what a part of my Netlify dashboard looks like:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/article-assets/hugo-netlify/netlify-dashboard.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		Deploy settings, build environment variables as seen on my Netlify dashboard.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I also love that Netlify provides options to optimize and bundle assets for you, improving your site’s overall performance sometimes as well.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/article-assets/hugo-netlify/netlify-dashboard-2.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		Asset optimization options as seen on my Netlify dashboard.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I saw quite a few performance improvements and more green A’s in the &lt;a href=&quot;https://webpagetest.org/&quot;&gt;webpagetest.org&lt;/a&gt; results that used to be red before. I still have a few more improvements to make.&lt;/p&gt;
&lt;h3 id=&quot;summary-of-current-set-up&quot; tabindex=&quot;-1&quot;&gt;Summary of current set up&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This Web site’s source code is hosted on Github.&lt;/li&gt;
&lt;li&gt;I use Hugo as a static site generator.&lt;/li&gt;
&lt;li&gt;Pushing to repo automatically deploys using Netlify.&lt;/li&gt;
&lt;li&gt;Hosting with Netlify for free with the developer’s Pro plan.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s worth mentioning at this point that compiling my entire site now after every change, without having to filter out old articles or anything like that, takes Hugo no more than 40 seconds every time. To be more accurate, &lt;span class=&quot;highlight&quot;&gt;it takes Hugo around 39ms to compile my entire site now, compared to the &lt;em&gt;minutes&lt;/em&gt; needed by Jekyll before&lt;/span&gt;, even after using flags like &lt;code&gt;--incremental&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;future-plans&quot; tabindex=&quot;-1&quot;&gt;Future Plans&lt;/h3&gt;
&lt;p&gt;These include some but not all of the things that have been on my to-do list for the last couple of years that I have been postponing, partially because of the previous Jekyll situation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Starting a mailing list.&lt;/strong&gt; This will be coming later this month.&lt;/li&gt;
&lt;li&gt;A new section on the site for articles that don’t fit into the technical articles section.&lt;/li&gt;
&lt;li&gt;Improving the site code enough to not be embarrassed by it anymore and make the repo public on Github.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make the site available offline.&lt;/strong&gt; And make it even &lt;em&gt;faster&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;There will be &lt;strong&gt;an AMA&lt;/strong&gt; but not the traditional Github-hosted AMA. There are aspects of the Github-based format that I don’t like. More info and details will also be out as soon as the newsletter is.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Write more frequently.&lt;/strong&gt; I’m letting way too many ideas slip that I should honestly be turning into blog posts. I promised myself to write more even if the article ideas are not as deep-dive as my usual articles are. And this post is a start.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;final-words%3F&quot; tabindex=&quot;-1&quot;&gt;Final Words?&lt;/h3&gt;
&lt;p&gt;I’ll let Agnes express how I feel about my current setup, even though I know I can and will be improving some details more in the future:&lt;/p&gt;
&lt;div style=&quot;width:100%;height:0;padding-bottom:55%;position:relative;&quot;&gt;&lt;iframe src=&quot;https://giphy.com/embed/uHSbNh58qwIwM&quot; width=&quot;100%&quot; height=&quot;100%&quot; style=&quot;position:absolute&quot; frameBorder=&quot;0&quot; class=&quot;giphy-embed&quot; allowFullScreen=&quot;&quot;&gt;&lt;p&gt;An animated image of Agnes from Despicable Me grabbing her friend and most excitedly saying “I’m so happy”.&lt;/p&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://giphy.com/gifs/despicable-me-excited-friday-uHSbNh58qwIwM&quot;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At least for now I know I have a setup that won’t give me any headaches whenever I want to make any new changes to my Web site. I’m also enjoying writing articles for the blog again, which means that you can expect more to come in the next few weeks.&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Building a fully-accessible help tooltip</title>
    <link href="https://sarasoueidan.com/blog/accessible-tooltips/"/>
    <updated>2017-01-24T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/accessible-tooltips/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	Today is one of those days that started out with a Google search for yet another accessibility question/concern. I’m working on a new project for my client &lt;a href=&quot;https://sarasoueidan.com/case-studies/provata/&quot;&gt;Provata&lt;/a&gt; and part of that project is to build a sweet and seemingly simple help tooltip which explains to the reader/user what the &lt;a href=&quot;https://www.cvdriskchecksecure.com/framinghamriskscore.aspx&quot;&gt;Framingham calculator&lt;/a&gt; is.
&lt;/p&gt;
&lt;p&gt;The tooltip is triggered by a small help icon like the one shown in the top right corner of this screenshot:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/provata-tooltip.png&quot; alt=&quot;The tooltip trigger as provided in the project mockup&quot; /&gt;
&lt;p&gt;As with every project, starting out by thinking about what HTML element to use to mark up a component was the first thing I did. But it turned out there is no HTML element to mark up a tooltip like this. And when we have no semantic elements to mark up our components, we are faced with the challenge to make sure that assistive technologies (ATs)—which are usually capable of understanding and conveying meaning via semantics—are able to understand what our elements really are and what they do.&lt;/p&gt;
&lt;h3 id=&quot;aria-attributes-to-the-rescue%3F&quot; tabindex=&quot;-1&quot;&gt;ARIA attributes to the rescue?&lt;/h3&gt;
&lt;p&gt;Making elements more readable by ATs when HTML isn’t enough is possible using ARIA attributes. For example, you can get by creating a progress bar without actually using the not-too-well-supported HTML &lt;code&gt;&amp;lt;progess&amp;gt;&lt;/code&gt; element. Making that bar look and behave like a bar is straightforward using some CSS, but if you’re using &lt;code&gt;div&lt;/code&gt;s and &lt;code&gt;span&lt;/code&gt;s to build it, you need to give ATs something more to make something of those non-semantic elements. This is where ARIA attributes like &lt;code&gt;role=&amp;quot;progressbar&amp;quot;&lt;/code&gt; and its companions, the helpful &lt;code&gt;aria-valuenow&lt;/code&gt;, &lt;code&gt;aria-valuemin&lt;/code&gt; and &lt;code&gt;aria-valuemax&lt;/code&gt; (among others), come in handy. Sprinkling in some simple JavaScript, you upate the value inside &lt;code&gt;aria-valuenow&lt;/code&gt; as the user progresses through whatever steps you provided them with and you’re generally good to go. You can read more about this &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_progressbar_role&quot;&gt;on MDN&lt;/a&gt; if you’re curious or unfamilir with this.&lt;/p&gt;
&lt;p&gt;Great.&lt;/p&gt;
&lt;p&gt;We have an ARIA attribute value to help us indicate that a certain element is a tooltip: &lt;code&gt;tooltip&lt;/code&gt;. Using &lt;code&gt;role=&amp;quot;tooltip&amp;quot;&lt;/code&gt; ATs know that this element is indeed a tooltip.&lt;/p&gt;
&lt;p&gt;But tooltips are usually triggered by an action performed on another element.&lt;/p&gt;
&lt;p&gt;Let’s first get back to the basics. According to Wikipedia:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The tooltip or infotip or a hint is a common graphical user interface element. It is used in conjunction with a cursor, usually a pointer. The user hovers the pointer over an item, without clicking it, and a tooltip may appear—a small “hover box” with information about the item being hovered over. Tooltips do not usually appear on mobile operating systems, because there is no cursor (though tooltips may be displayed when using a mouse).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have a problem with the “Tooltips do not usually appear on mobile operating systems, because there is no cursor” part because mobile users have just as much right to get information on a page as non-mobile users. Whether you’re using a mouse or your finger, you should be able to understand what the Framingham score is, so this tooltip should be accessible in all contexts. And this is exactly where the fun starts.&lt;/p&gt;
&lt;h3 id=&quot;triggering-the-opening%2Fclosing-of-the-tooltip&quot; tabindex=&quot;-1&quot;&gt;Triggering the opening/closing of the tooltip&lt;/h3&gt;
&lt;p&gt;I knew I couldn’t rely on hover alone (even though my client only requested hover) because, unless you have a touch screen with a fancy digital pen which allows for hover to be triggered, you won’t be able to see the hint inside the tooltip, and that is unacceptable.&lt;/p&gt;
&lt;p&gt;I set out to make the tooltip show when the help icon is both hovered and clicked.&lt;/p&gt;
&lt;p&gt;It is worth noting at this point that sometimes tooltips work on both touch and pointer screens without having to do any extra work, such as those that are shown as help labels on &lt;code&gt;input&lt;/code&gt; fields, like &lt;a href=&quot;http://heydonworks.com/practical_aria_examples/#input-tooltip&quot;&gt;this example&lt;/a&gt; by Heydon Pickering. In scenarios like this one, &lt;code&gt;role=&amp;quot;tooltip&amp;quot;&lt;/code&gt; in combination with &lt;code&gt;aria-describedby&lt;/code&gt; are enough to indicate to ATs that this piece of text is indeed a tooltip which describes the content or functionality of the input field. Marking the tooltip up in this case is very easy because it’s already clear enough what it is. All that remains is for you to show/hide the text when the &lt;code&gt;input&lt;/code&gt; field is focused, and this can be done using a couple of lines of CSS alone. The experience is great on mouse and touch screens, and everyone gets to experience it the same way.&lt;/p&gt;
&lt;p&gt;However, things aren’t so straightforward when you have an example like the one in my project. And apparently I’m not the only one who’s been here and has been just as confused as to how to approach this.&lt;/p&gt;
&lt;p&gt;Here are a few of the ideas that crossed my mind as I was thinking about the implementation of this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; to trigger the opening and closing of the tooltip. Tooltip would initially be hidden so that ATs won’t read it out loud as the user moves down the page. The tooltip interrupts the flow of the content in our project’s case and so should only be shown on demand.&lt;/li&gt;
&lt;li&gt;“on demand” means when the user hovers/clicks/taps/focuses the trigger.&lt;/li&gt;
&lt;li&gt;The tooltip would initially be hidden using &lt;code&gt;display: none&lt;/code&gt; and only shown on demand.&lt;/li&gt;
&lt;li&gt;Since semantics and “how machines would read this” is how I start all of my HTML code, I thought:
&lt;ul&gt;
&lt;li&gt;if I use &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; I’ll have to use &lt;code&gt;aria-controls&lt;/code&gt; to indicate what that button controls and that it will show/hide some element when it is clicked. All good.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Speaking of semantics, I could also use a link (&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) that links to a specific section on the page, which in my case is the element containing the hint.&lt;/li&gt;
&lt;li&gt;When using a link, the user will &lt;em&gt;jump&lt;/em&gt; to the section on the page to which they’re being taken. I hate page jumps. I avoid them like the plague unless the decision to jump is intentional. (For example, a “Back to top” link on a very long page.)&lt;/li&gt;
&lt;li&gt;In order to avoid the jump when using &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, &lt;em&gt;and&lt;/em&gt; in order to make the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; open &lt;em&gt;and&lt;/em&gt; close the tooltip, I need JavaScript.&lt;/li&gt;
&lt;li&gt;For some holistic reason, I wanna avoid JavaScript and use it only when necessary. What if the user is a senior using some very old machine that has JS disabled?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usually, when I’m torn between two solutions and when the JS-no-JS thoughts start floating in my mind, I look for second opinions. My first source of a second opinion is Google. I thought: “someone else must have built one of these before, and so must have somebody else too, so let’s see how they approached it and solved these issues”.&lt;/p&gt;
&lt;p&gt;At this point I was still on the “I want to do this without JS if possible” boat, but believe it or not I love JS and was completely open to using it if the JS-based solution is better than all of the others.&lt;/p&gt;
&lt;p&gt;Googling got me to land on a question that was exactly the same as mine. I found a lot of similar questions but all of them were more like the tooltip-on-input example. I found &lt;a href=&quot;http://webaim.org/discussion/mail_thread?thread=5041&quot;&gt;a very old thread&lt;/a&gt; started by &lt;a href=&quot;http://twitter.com/zomigi&quot;&gt;Zoe Gillenwater&lt;/a&gt; who had the same question back in 2011 that I had today. I am aware that some technical details in there would/could be invalid today but the general principles are still valid. I highly recommend you read through that thread before continuing to read this article because everything else in here is based on some of the insights I got from that thread. Main points mentioned in the thread included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid using &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and stick to &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; because links can be used to practically anything whereas buttons should be left for using in forms. I have to say &lt;strong&gt;I disagree here&lt;/strong&gt;. If you know a very good reason to avoid using &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, please &lt;a href=&quot;https://twitter.com/SaraSoueidan&quot;&gt;let me know&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; you have to consider/remember:
&lt;ul&gt;
&lt;li&gt;If you use &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and have the hint be included inside of it:
&lt;ul&gt;
&lt;li&gt;The code looks like this:&lt;pre&gt;&lt;code&gt;	&amp;lt;a href=&amp;quot;#&amp;quot; aria-describedby=&amp;quot;#tip&amp;quot;&amp;gt;
		&amp;lt;!-- your icon here, img or svg --&amp;gt;
		&amp;lt;span id=&amp;quot;tip&amp;quot;&amp;gt; Your hint text here &amp;lt;/span&amp;gt;
	&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;The text will be readable with the flow (which is &lt;em&gt;not&lt;/em&gt; favorable in my case) because the content of the hint interrupts the flow of the information and data displayed in the main content.&lt;/li&gt;
&lt;li&gt;Using CSS only, you can hide and show the text with &lt;code&gt;display: none&lt;/code&gt; and &lt;code&gt;display: block&lt;/code&gt; respectively when the link is hovered. This is good for sighted users using a mouse. However,…&lt;/li&gt;
&lt;li&gt;If you hide the text using &lt;code&gt;display: none&lt;/code&gt; inside the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and show it on focus, ATs won’t be able to read the shown text because the contents of the link are announced on initial &lt;code&gt;focus&lt;/code&gt; only and won’t be re-announced when the text is displayed inside the link with &lt;code&gt;display: block&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Testing this out I noticed that since the link doesn’t really link to anywhere, the user will jump to the top of the page when they tap the link on a touch screen. This is particularly horrible in our case because we have a long page and jumping up will only confuse the users. &lt;strong&gt;This can be solved using JavaScript to &lt;code&gt;preventDefault&lt;/code&gt; on click.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;(My opinion: I really dislike the fact that the link doesn’t really link anywhere. It’s a self-containing link, if that makes any sense, which negates the role of the link to begin with, in my opinion. So even though I tested it out of curiosity, I knew I didn’t want to use this.)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you use &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and have it link to a separate piece of text (not a descendant of the link itself):
&lt;ul&gt;
&lt;li&gt;The code would be along the lines of: &lt;code&gt;&amp;lt;a href=&amp;quot;#tip&amp;quot;&amp;gt;&amp;lt;!-- icon here --&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;div id=&amp;quot;tip&amp;quot;&amp;gt; &amp;lt;!-- tooltip text here --&amp;gt; &amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The link still causes a page jump unless using JavaScript.&lt;/li&gt;
&lt;li&gt;On touch screens, tapping the link focuses it which in turn opens the tooltip, but the link image remains the same and there is no way to close the tooltip unless the user clicks anywhere outside it to remove its focus, which is not intuitive because there’s a lot of cognitive effort and guesswork and “how do I close this” guesswork and frustration involved, especially since the tooltip covers the content when open.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every single no-JS solution came with a very bad downside that negatively affected the user experience. JavaScript is the way to make this work properly for every user in every context. It solves every one of those problems mentioned, except for the “this link doesn’t link anywhere” problem which can only be solved by, well, not using a link that links nowhere. :D (Some may disagree that a link not linking anywhere is not particularly wrong or invalid, but it’s not something I’d personally do.) I ended up choosing a solution that works, using JavaScript, and has a not-too-bad fallback as well. This pretty much covers the main thoughts and considerations I had throughout this.&lt;/p&gt;
&lt;h3 id=&quot;conclusion(s)%3F&quot; tabindex=&quot;-1&quot;&gt;Conclusion(s)?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;JavaScript is imperative to make fully-accessible interactive components.&lt;/strong&gt; Sure, you can get away without using it in some cases, but a lot of accessibility requires JavaScript. Some ARIA roles and attributes are absolutely necessary to make components accessible, and many of those will simply not behave as they need to unless you make them work with JavaScript. Since my client is a health company, it is more likely that their users have one form of disability or the other than it is that they have JS disabled, so it’s safe to worry about not implementing JavaScript than about it not running.&lt;/p&gt;
&lt;p&gt;If you’re interested in learning more about which attributes require what, I highly recommend checking out the &lt;a href=&quot;http://whatsock.com/training/matrices/&quot;&gt;ARIA Role Matrices&lt;/a&gt; from WhatSock. It provides and easy-to-scan and read overview.&lt;/p&gt;
&lt;p&gt;Paul J Adam has also created &lt;a href=&quot;http://pauljadam.com/demos/aria-role-tooltip.html&quot;&gt;a demo&lt;/a&gt; to show the different ways to show tooltips on hover. His examples still use JavaScript to make the components more accessible by toggling ARIA attributes as the tooltips open/close. This one is also definitely worth checking out.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Did I miss something? &lt;a href=&quot;https://twitter.com/SaraSoueidan&quot;&gt;Let me know on in a tweet&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Mimic Relative Positioning Inside an SVG with Nested SVGs</title>
    <link href="https://sarasoueidan.com/blog/mimic-relative-positioning-in-svg/"/>
    <updated>2016-06-27T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/mimic-relative-positioning-in-svg/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;Positioning elements inside an SVG image is very similar—if not identical—to positioning elements absolutely in HTML. Every element in SVG is positioned &quot;absolutely&quot; relative to the SVG viewport, and the position inside the viewport is governed by the &lt;i&gt;current coordinate system in use&lt;/i&gt;. But this similarity in positioning elements should not conceal the fact that there is a fundamental difference between SVG elements and HTML elements: &lt;strong&gt;SVG elements do not have a box model like HTML elements do in CSS&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Before we move on, let’s quickly review what a box model is in CSS and how it affects positioning things.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;box-model&quot;&gt;Quick Review of The Box Model in CSS&lt;/h3&gt;
&lt;p&gt;Every HTML element has a box model in CSS that is composed of four boxes: the &lt;em&gt;content box&lt;/em&gt;, the &lt;em&gt;padding box&lt;/em&gt;, the &lt;em&gt;border box&lt;/em&gt;, and the &lt;em&gt;margin box&lt;/em&gt;.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/box-model.png&quot; alt=&quot;A visual representation of the CSS Box Model&quot; /&gt;
	&lt;figcaption&gt;
		The box model of an element in CSS—includes the content, padding, border, and margin areas. Image borrowed from the &lt;a href=&quot;http://tympanus.net/codrops/css_reference/box-sizing/&quot;&gt;&lt;code&gt;box-sizing&lt;/code&gt; entry&lt;/a&gt; in the &lt;a href=&quot;http://tympanus.net/codrops/css_reference/&quot;&gt;Codrops CSS Reference&lt;/a&gt;.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Normally, when an element’s size is set, the width and height properties determine the width and height of the element’s content box. Any padding added to the element will increase the total computed width and/or height of the element—this is how the default box model works in regards to sizing the element. The &lt;code&gt;box-sizing&lt;/code&gt; property allows you to control how the sizing of an element’s dimensions works. More specifically, using the box-sizing property, you can tell the browser to include the padding width and/or border width in the width of the element, without increasing that width. This is useful for many use cases, but mostly so for when you’re building grid systems in CSS, for example. You can learn all about this property and its values in &lt;a href=&quot;http://tympanus.net/codrops/css_reference/box-sizing/&quot;&gt;this entry&lt;/a&gt; over on Codrops.&lt;/p&gt;
&lt;p&gt;An element’s box model is also &lt;strong&gt;used to create a positioning context for the contents of the element&lt;/strong&gt;, where applicable, or for the element itself.&lt;/p&gt;
&lt;p&gt;When the value of an element’s &lt;code&gt;position&lt;/code&gt; changes from the default &lt;code&gt;static&lt;/code&gt; value, it either creates a positioning context for its descendants or for itself. Whenever the default position changes, a positioning context is needed to specify where and how an element is going to be positioned outside the default page’s content flow. (You can learn more about this subject &lt;a href=&quot;http://tympanus.net/codrops/css_reference/position/&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;If you want to remove an element from the page’s content flow, you can do that by positioning it absolutely. Positioning an element absolutely means it will be positioned relative to one of its ascendants, using that ascendant’s box as a positioning context.&lt;/p&gt;
&lt;p&gt;Each positioning context, however, requires a coordinate system. The cooridnate system is established by the dimensions (width and height) of the element’s box model. Any descendant of the element will then be positioned inside and relative to the element using this coordinate system.&lt;/p&gt;
&lt;p&gt;In SVG, however, there is only one coordinate system by default used to position elements inside the viewport: the &lt;i&gt;current coordinate system in use&lt;/i&gt;, established by the SVG &lt;code&gt;viewBox&lt;/code&gt;. And so when an element needs to be positioned inside an SVG, it is positioned relative to the entire SVG viewport. &lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;Technically, there are &lt;strong&gt;two&lt;/strong&gt; default coordinate systems in an SVG. But only one of those is relevant when dealing with positioning SVGs unless you explicitly change the values of both. If you&#39;re not familiar with SVG coordinate systems and how they&#39;re established and used, I highly recommend reading &lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;this article&lt;/a&gt; before continuing through this one. In this article, we&#39;ll be dealing with the ‘normal’ case where we only need to deal with one.&lt;/p&gt;
&lt;p&gt;Individual elements don’t have a box model and therefore don’t have their own coordinate systems that can be used as positioning contexts for other elements. So, what if you do want to position an SVG element relative to another SVG element or group of elements?&lt;/p&gt;
&lt;p&gt;The answer is: nested &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;s.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;nesting-svgs&quot;&gt;Nesting SVGs&lt;/h3&gt;
&lt;p&gt;One of my favourite things about SVG is that it’s an image defined by markup. And that markup is what gives us a lot of power over the contents of that image and how they are displayed.&lt;/p&gt;
&lt;p&gt;You can nest &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;s. That is, you can put an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; inside another &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;. And then you can put another &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; inside that &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;. And then you can put yet another &lt;code&gt;svg&lt;/code&gt; inside that &lt;code&gt;svg&lt;/code&gt;. And you can go on and on.&lt;/p&gt;
&lt;p&gt;You can nest SVGs as deeply as you want. How many levels deep you want to go depends on what you want to do and whether or not you need to, of course. I’ve personally never needed to nest SVGs more than two levels deep.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- some SVG content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- some inner SVG content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- other inner SVG content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Some notes about nested &lt;code&gt;&lt;svg&gt;s&lt;/svg&gt;&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The inner &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element does not require specifying a namespace (&lt;code&gt;xmlns&lt;/code&gt;) on it because it is assumed to be the same namespace as the outer &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;’s namespace. Even the outer (root) &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; does not require a namespace if it is embedded inline in an HTML5 document.&lt;/li&gt;
&lt;li&gt;You can use a nested SVG to group elements together and then position them inside the parent SVG. Of course, you can group elements inside an SVG using the group tag &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;, but using an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; instead has a few advantages, such as being able to specify the group’s &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;, and positioning it using absolute values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; instead of having to use transforms (for &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;). By specifying a width and height to the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;, you restrict the content inside it to the bounds of the viewport that is defined by the &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; attributes. Any content that lies beyond these bounds will be clipped.&lt;/li&gt;
&lt;li&gt;Percentage values specified for elements inside an inner &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; will be calculated relative to that &lt;code&gt;svg&lt;/code&gt;, not relative to the root &lt;code&gt;svg&lt;/code&gt;. Percentage values specified on the inner &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; itself will be calculated relative to the root &lt;code&gt;svg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;So, Why Nest &lt;code&gt;&lt;svg&gt;s&lt;/svg&gt;&lt;/code&gt;?&lt;/h3&gt;
&lt;p&gt;One use case for nesting SVGs is creating interesting responsive effects where the contents of the SVG would hide or reveal other portions of content at different viewport sizes.&lt;/p&gt;
&lt;p&gt;Such an example is the following SVG illustration of a small bird inside an egg:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-nesting-example-1.png&quot; style=&quot;max-width: 400px; display: block; margin: 0 auto;&quot; alt=&quot;The SVG image we will be using contains a bird covered by an egg made of two shells.&quot; /&gt;
&lt;p&gt;Normally, if the &lt;a href=&quot;http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/&quot;&gt;SVG is responsive&lt;/a&gt;, resizing the screen would make the entire SVG smaller while maintaining the positions of the content inside of it and the spatial relationships between them:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-nesting-example-1-resized.png&quot; alt=&quot;The SVG as it looks when the viewport shrinks. It looks the same, but smaller.&quot; /&gt;
	&lt;figcaption&gt;Resizing the responsive SVG in the browser makes the SVG shrink in size, without affecting the position and spatial relationships of the content inside of it.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;By nesting &lt;code&gt;svg&lt;/code&gt; elements, we can create separate “layers” inside the root &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; that we can then control so that the contents of these layers would change position inside the root &lt;code&gt;svg&lt;/code&gt; as the viewport size changes. By doing that, we can show and hide different portions of content inside the SVG as desired.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	By nesting &lt;code&gt;svg&lt;/code&gt; elements, we can create separate “layers” inside the main &lt;code&gt;&lt;svg&gt;&lt;/svg&gt;&lt;/code&gt;
&lt;/blockquote&gt;
&lt;p&gt;For example, we can separate the above illustration into 3 layers that would reveal the small bird on smaller sizes:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-nesting-example-1-2.png&quot; alt=&quot;The bird illustration with the two egg shells changing position on smaller sizes, revealing the bird underneath.&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;This effect is achieved by using different &lt;code&gt;preserveAspectRatio&lt;/code&gt; values on each of the inner &lt;code&gt;svg&lt;/code&gt;s. This ensures that the contents of each &lt;code&gt;svg&lt;/code&gt;—i.e. the contents of each ‘layer’, ‘sticks’ to either edge of the root SVG, thus revealing the content in between.&lt;/p&gt;
&lt;p&gt;I’ve written a detailed article about how to achieve this; so, if you’re interested, do &lt;a href=&quot;https://sarasoueidan.com/blog/nesting-svgs/&quot;&gt;check it out&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;relative-position-in-svg&quot;&gt;‘Relative’ Positioning in SVG Using a Nested &lt;code&gt;svg&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The fact that contents of an inner &lt;code&gt;svg&lt;/code&gt; are positioned relative to that &lt;code&gt;svg&lt;/code&gt; itself gets us one step closer to positioning elements relative to other elements as opposed to being relative to the root &lt;code&gt;svg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But how exactly does a nested &lt;code&gt;svg&lt;/code&gt; enable us to position one element &lt;em&gt;relative to another non-&lt;code&gt;svg&lt;/code&gt; element&lt;/em&gt;?&lt;/p&gt;
&lt;!-- The answer is: by combining it with an element’s __bounding box__. --&gt;
&lt;p&gt;Before we answer that question, we need to understand what an SVG element’s &lt;strong&gt;Bounding Box&lt;/strong&gt; is.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;svg-bounding-box&quot;&gt;What is a Bounding Box?&lt;/h4&gt;
&lt;p&gt;Not all SVG elements are created equal. The powerful thing about SVG is that its basic shapes allow us to create all kinds of non-rectangular shapes: from arbitrary paths, to open or closed polylines and polygons, to circles and ellipses.&lt;/p&gt;
&lt;p&gt;Because of the nature of these elements and their lack of a CSS box model, the SVG specification compensates for the lack of a box model by &lt;a href=&quot;https://www.w3.org/TR/SVGTiny12/coords.html#BoundingBox&quot;&gt;introducing the concept of a &lt;strong&gt;bounding box&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
The bounding box (or &quot;bbox&quot;) of an element is the tightest fitting rectangle aligned with the axes of that element&#39;s user coordinate system that entirely encloses it and its descendants.
&lt;/blockquote&gt;
&lt;p&gt;In simpler words, a bounding box is the smallest rectangle that you can draw around an element, that encloses the entire element—all its points and edges.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/bounding-box-ai.png&quot; alt=&quot;The bounding box of a spiral object drawn in Adobe Illustrator.&quot; /&gt;
	&lt;figcaption&gt;
		The light blue rectangle represents the smallest rectangle around the spiral shape, and thus is a visual representation of the shape’s bounding box. By selecting an element in the graphics editor, you can retrieve the properties of the element’s bounding box. In the above screenshot, these properties are available in Adobe Illstrator’s &lt;i&gt;Transform&lt;/i&gt; panel.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Three kinds of bounding boxes can be computed for an element:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The object bounding box&lt;/strong&gt; is the bounding box that contains only an element’s geometric shape.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The stroke bounding box&lt;/strong&gt; is the bounding box that contains an element’s geometric shape and its stroke shape.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The decorated bounding box&lt;/strong&gt; is the bounding box that contains an element’s geometric shape, its stroke shape and its markers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;An element’s bounding box is characterized by properties that can be retrieved using the &lt;code&gt;getBBox()&lt;/code&gt; method—the SVG equivalent of &lt;code&gt;getBoundingClientRect()&lt;/code&gt;: &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; svgElement &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;el&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;bbox &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; svgElement&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getBBox&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; bbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; bbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; bbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;width &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; bbox&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Using the element’s bounding box, we can fake the presence of a coordinate system around that element, which we can then use to position other elements.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
Using the element’s bounding box, we can fake the creation of a coordinate system around that element, which we can then use to position other elements.
&lt;/blockquote&gt;
&lt;p&gt;More specifically, we will be creating and using an inner &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; to establish a new cooridnate system around an element. The properties of the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; will be defined by the properties of the element’s bounding box: the x, y, width, and height properties.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;element-coordinate-system&quot;&gt;Creating a new coordinate system around an SVG element&lt;/h4&gt;
&lt;p&gt;Suppose we have the following SVG image (&lt;a href=&quot;http://www.vecteezy.com/vector-art/82694-birds-in-nest-vector&quot;&gt;courtesy of Vecteezy&lt;/a&gt;) with the bird and the nest:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/bird-nest.svg&quot; style=&quot;border: 2px solid #eee;&quot; alt=&quot;An SVG containing a bird and a nest, with the bird positioned far from the nest.&quot; /&gt;
&lt;p&gt;Let’s have some fun. The bird in the above image is trying to get back to its nest. (My idea of fun is, admittedly, not than fun.)&lt;/p&gt;
&lt;p&gt;Normally, we are able to position the bird above the nest by specifying its position inside the SVG using the entire SVG canvas’s coordinate system.&lt;/p&gt;
&lt;p&gt;We can certainly do that.&lt;/p&gt;
&lt;p&gt;But, ideally, we’d be able to position it by using percentage values that would be calculated relative to the nest’s “box”. We can mimic that by creating a coordinate system around the nest using our new &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element. The &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element has its own coordinate system established by its width and height. We will use &lt;em&gt;that&lt;/em&gt; coordinate system to make up for the missing coordinate system on the nest.&lt;/p&gt;
&lt;p&gt;Then, we move the bird (the actual bird content) into that &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; tag. By being contained by the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;, the bird‘s position will be calculated relative to the coordinate system established on that &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But to create the relative connection between the bird and the nest elements, we need the positioning context of the bird—which is our &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;—to resemble a coordinate system around the nest.&lt;/p&gt;
&lt;p&gt;In order to do that, we will position the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; on top of the nest, &lt;em&gt;visually&lt;/em&gt;. It’s important to note here that the inner SVG does not actually wrap the nest—the nest elements are not contained inside the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; tag. We’re only positioning the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; &lt;em&gt;on top&lt;/em&gt; of the nest, visually, so that it seems as though &lt;strong&gt;the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; is the &lt;em&gt;visual representation&lt;/em&gt; of the nest’s coordinate system&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In order to determine the exat position of the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; (its &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; position inside the root &lt;code&gt;svg&lt;/code&gt;) and its dimensions, we will be using the nest’s bounding box properties.&lt;/p&gt;
&lt;p&gt;The position of the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;—the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values—will be equal to the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values of the nest’s bounding box. That is, the bounding box of the group of elements forming the nest. (Groups can have bounding boxes, just like single elements can.) The inner &lt;code&gt;svg&lt;/code&gt; will also have explicit height and width values which are equal to the height and width of the nest’s bounding box.&lt;/p&gt;
&lt;p&gt;Here is what it looks like visually:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/nest-bbox.png&quot; style=&quot;border: 2px solid #eee;&quot; alt=&quot;A visual respresentation of the nested svg element positioned on top of (or around) the nest looks like the bounding box of the nest itself.&quot; /&gt;
&lt;p&gt;What the above image is missing is the fact that the bird is now contained inside of it. So this is what it really looks like:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/bird-nest-svg.png&quot; style=&quot;border: 2px solid #eee;&quot; alt=&quot;A visual respresentation of the nested svg element positioned on top of (or around) the nest, with the bird positioned inside of it.&quot; /&gt;
&lt;p&gt;&lt;strong&gt;The grey border is the border representing the bounding box, and also the new coordinate system around the nest established by the &lt;code&gt;svg&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It’s important to note here that the bird is now positioned relative to the coordinate system of the inner &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;. Notice how it is offset by some amount of pixels from both the top and left edges of the inner &lt;code&gt;svg&lt;/code&gt;, just like it was positioned relative to the root &lt;code&gt;svg&lt;/code&gt;. That is fine for now. We will need to get rid of that space to get a finer control over the position of the bird. But we’ll get to that shortly.&lt;/p&gt;
&lt;p&gt;Another thing to note is that since the inner &lt;code&gt;svg&lt;/code&gt; has an explicit height and width which are equal to the height and width of the nest’s bounding box, the bird’s feet get cut off at the bottom due to the way it is positioned. If you have other, more or different elements in your own projects, those might get cut off too. You definitely don’t want that. So to work around that, you need to explicitly set the &lt;code&gt;overflow&lt;/code&gt; value to &lt;code&gt;visible&lt;/code&gt; on the inner &lt;code&gt;svg&lt;/code&gt;. This will ensure that the inner &lt;code&gt;svg&lt;/code&gt; behaves only like a positioning context, not like a container that restricts its contents to a specific area visually.&lt;/p&gt;
&lt;p&gt;Here is what the code looks like:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;birds&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 3945.8 2400&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Bird &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;amp;&quot;&gt;&amp;amp;amp;&lt;/span&gt; Nest&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;nest&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- The ID I&#39;m giving this SVG is just for demonstration purposes --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;698&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1219&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1055&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;641&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 1055 641&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; visible&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;coord-sys&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	      &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just like with the root &lt;code&gt;svg&lt;/code&gt;, the &lt;code&gt;viewBox&lt;/code&gt; value of the inner SVG &lt;code&gt;svg#coord-sys&lt;/code&gt; is determined by its dimensions.&lt;/p&gt;
&lt;p&gt;Next up, we need to position the bird inside the new coordinate system. I won’t refer to the inner &lt;code&gt;svg&lt;/code&gt; as “inner svg” anymore—I’ll be referring to it as &lt;code&gt;svg#coord-sys&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since we will be positioning the bird inside the &lt;code&gt;svg#coord-sys&lt;/code&gt;, we need to be able to specify a position for &lt;em&gt;the group of elements forming this bird&lt;/em&gt;. After all, the bird is not made up of one element only—it is a group of shapes. And so we need to position &lt;em&gt;a group of elements&lt;/em&gt;, not just one element. The group of elements forming the bird is wrapped in a group (&lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;) element.&lt;/p&gt;
&lt;p&gt;But the problem is: the &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element does not have &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; attributes. So we can’t simply move it to a specific position like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usually, to move a group of elements around inside an SVG, we use SVG or CSS transform functions (translation transformation, most of the time). You can use transforms to move the group around, sure. But that would negate the whole idea we’re trying to achieve and would make the new coordinate system useless. After all, we could have used transforms to position the bird close to the nest inside the root &lt;code&gt;svg&lt;/code&gt; without having to create a new coordinate system.&lt;/p&gt;
&lt;p&gt;What we want is to mimic the way elements are positioned in CSS, &lt;em&gt;relative to each other&lt;/em&gt;. So to say “move this group of elements to the position (x, y) inside this particular positioning context”.&lt;/p&gt;
&lt;p&gt;Since &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; does not have &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; attributes, we’re going to substitute it with &lt;i&gt;another&lt;/i&gt; &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;birds&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 3945.8 2400&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Bird &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;amp;&quot;&gt;&amp;amp;amp;&lt;/span&gt; Nest&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;698&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1219&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1055&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;641&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 1055 641&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; visible&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	      &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;svg&lt;/code&gt; wrapping the bird has an ID &lt;code&gt;bird&lt;/code&gt;. This SVG, as opposed to its ancestor, will only serve as a container and, even though it does create a new coordinate system, we won’t be using that system. Using this &lt;code&gt;svg&lt;/code&gt;, we can now move the bird around inside the new coordinate system established around (on top of) the nest.&lt;/p&gt;
&lt;p&gt;At this point, it is best to get rid of the white offset space around the bird. The innermost &lt;code&gt;svg#bird&lt;/code&gt; has the same dimensions and &lt;code&gt;viewBox&lt;/code&gt; as its wrapping &lt;code&gt;svg#coord-sys&lt;/code&gt;; which means that in order to move the bird around, we need to take this white space into account. So if we want to move the bird to position it at the top left corner of the system, we won’t be able to simply say set x and y to zero—we will need to use a negative offset in both directions to achieve it. That’s not practical. We would also need to take this offset into account wherever and however we want to position the bird later.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;At this point, you need to be not only familiar but also comfortable with how the &lt;code&gt;viewBox&lt;/code&gt; works. I’m going to assume you are. If you’re not, pause here and go read &lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;this article&lt;/a&gt; first.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;We will change the value of the &lt;code&gt;viewBox&lt;/code&gt; of &lt;code&gt;svg#bird&lt;/code&gt; to crop the white space out. (So we &lt;em&gt;are&lt;/em&gt; going to use its coordinate system, but only a little bit.)&lt;/p&gt;
&lt;p&gt;By default, a nested &lt;code&gt;svg&lt;/code&gt; will occupy 100% the width and height of its container, unless you tell it otherwise.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;svg``#bird&lt;/code&gt; now has the exact same dimensions as that of the &lt;code&gt;svg``#coord-sys&lt;/code&gt;. It’s the one with the pink border in the following image:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/bird-nest-viewbox-shift.png&quot; style=&quot;border: 2px solid #eee;&quot; alt=&quot;A visual representation of the innermost svg showing its dimensions compared to its containing svg.&quot; /&gt;
&lt;p&gt;We don’t need the dimensions to be different in this example so we will leave them as they are.&lt;/p&gt;
&lt;p&gt;The image above also shows the amount of white space by which the bird is shifted inside that &lt;code&gt;svg&lt;/code&gt;. So in order to “unshift” it, we will change the value of the &lt;code&gt;viewBox&lt;/code&gt; of the &lt;code&gt;svg#bird&lt;/code&gt; to crop that white space out.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;birds&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 3945.8 2400&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;698&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1219&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1055&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;641&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; visible&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;150 230 1055 641&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	      &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will shift the bird so that it is positioned at the top left of the coordinate system. I’m unfocusing &lt;code&gt;svg#bird&lt;/code&gt; in the following image, so only the nest’s coordinate system is still shown, and the new position of the bird inside of it:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/bird-nest-cropped.png&quot; style=&quot;border: 2px solid #eee;&quot; alt=&quot;The bird is now positioned at the top left corner of the newly established coordinate system.&quot; /&gt;
&lt;p&gt;So now that the bird is positioned at the top left of its wrapper, we can move it around and get the expected result every time. For example, if we were to move the bird by 50% in both directions:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; visible&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;150 230 1055 641&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We would get the following result:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/bird-nest-position.png&quot; style=&quot;border: 2px solid #eee;&quot; alt=&quot;The bird positioned at 50% by 50% across the newly created cooridnate system.&quot; /&gt;
&lt;p&gt;With this setup, we can now move the bird around inside the nest’s coordinate system just like we would move an HTML element inside another one in CSS. Both relative and absolute position values work here too.&lt;/p&gt;
&lt;p&gt;Pretty nice, huh? This is possibly the closest we can (currently) get to relative positioning in SVG today.&lt;/p&gt;
&lt;p&gt;Granted, to get here is not the simplest process, but once you’ve got a good grasp of how SVG coordinate systems and the &lt;code&gt;viewBox&lt;/code&gt; work, it’s hopefully not so complicated.&lt;/p&gt;
&lt;p&gt;Here is a live demo of the above bird and nest, with the position of the bird set so that it stands at the edge of its nest:&lt;/p&gt;
&lt;p data-height=&quot;300&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;6f00a9b23653395afdd1c009d8ad6961&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;SaraSoueidan&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/6f00a9b23653395afdd1c009d8ad6961/&quot;&gt;[Article Demo] Relative Positioning in SVG&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;http://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h4&gt; Final Words &lt;/h4&gt;
&lt;p&gt;The example used in this article is a very specific example and is, admittedly, not the most practical use case of all times. Your use case(s) are likely to be entirely different. You might be working with a very different SVG where you may not even need to do any viewBox cropping at all. If you create your SVG yourself, you can position your element (e.g. the bird in our case) at the top left of the SVG canvas, so that when you wrap it in another &lt;code&gt;svg&lt;/code&gt;, it would also be positioned at the top left, and you wouldn’t have to do any cropping at all. I left this example slightly more complex just so we can cover more scenarios. (And because I was a little lazy to edit the SVG in Illustrator after having written half of this article. But I keep wanting to deny that.)&lt;/p&gt;
&lt;p&gt;But the takeaway is &lt;em&gt;how&lt;/em&gt; to mimic relative positioning using nested &lt;code&gt;svg&lt;/code&gt;s. Whether you use one level, two levels, or more, the concepts are the same.&lt;/p&gt;
&lt;p&gt;You might find this technique useful for positioning SVG UI elements relative to each other. Or maybe relative positioning in dynamically created SVGs. Your imagination is the limit.&lt;/p&gt;
&lt;p&gt;I hope you found this article useful. Thank you for reading!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Making the Switch Away from Icon Fonts to SVG: Converting Font Icons to SVG</title>
    <link href="https://sarasoueidan.com/blog/icon-fonts-to-svg/"/>
    <updated>2016-04-25T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/icon-fonts-to-svg/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	If you’re reading this article, then I can probably assume you’ve already decided to switch from using fonts for icons to an SVG icon system. Or maybe you&#39;re pondering the idea and want to get an overview of how that would be done and whether or not it&#39;s worth it. Either way, this post is here to help you with that.
&lt;/p&gt;
&lt;p&gt;If you’re not already convinced as to why SVG is a better icon system, then I highly recommend reading &lt;a href=&quot;https://css-tricks.com/icon-fonts-vs-svg/&quot;&gt;this article&lt;/a&gt;—a cagematch-style comparison between icon fonts and inline SVG for icon systems. Many companies and organizations including Github have already made the switch to SVG, and have written great articles explaining why they found SVG to be a better alternative. I’ve listed some articles at the end of this post for further reading.&lt;/p&gt;
&lt;h4 id=&quot;making-the-switch&quot; tabindex=&quot;-1&quot;&gt;Making the Switch&lt;/h4&gt;
&lt;h5 id=&quot;1.-grab-your-icon-fonts-files.&quot; tabindex=&quot;-1&quot;&gt;1. Grab your icon fonts files.&lt;/h5&gt;
&lt;p&gt;Font icons are font glyphs. They’re part of a web font and are thus defined in web font files and formats.&lt;/p&gt;
&lt;p&gt;I don’t usually use icon fonts, so for the sake of demonstration, I headed to &lt;a href=&quot;http://fontello.com/&quot;&gt;Fontello.com&lt;/a&gt;—an online icon font generator—to create an icon font that I can work with for this blog post. I picked a few icons and then generated an icon font and downloaded it.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/fontello-icons.gif&quot; /&gt;
&lt;p&gt;Fontello generates a folder containing a demo page showing you how to display the icons on your own page and what class names to use.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/fontello-files.png&quot; /&gt;
	&lt;figcaption&gt;The files generated by Fontello.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Among the generated files is the actual font used to define the icons. The font files are available inside a &lt;code&gt;font&lt;/code&gt; folder.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/fontello-fonts.png&quot; /&gt;
	&lt;figcaption&gt;The font file formats generated by Fontello.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These are the files you need to proceed. We’re going to be using these files to “extract” the icons and convert them to SVG.&lt;/p&gt;
&lt;h5 id=&quot;2.-choose-your-tool.&quot; tabindex=&quot;-1&quot;&gt;2. Choose your tool.&lt;/h5&gt;
&lt;p&gt;To convert the icons to SVG, we can use one of the following tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/bpierre/fontello-svg&quot;&gt;fontello-svg&lt;/a&gt;&lt;/strong&gt;: “a command-line tool to generate the SVG versions of a Fontello icon set, with a corresponding CSS file.”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.npmjs.com/package/font-blast&quot;&gt;font-blast&lt;/a&gt;&lt;/strong&gt;: “You can use font-blast to extract icons from any icon font - Font Awesome, Foundation, anything from Fontello etc.”&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://icomoon.io/app/&quot;&gt;Icomoon app&lt;/a&gt;&lt;/strong&gt;: a web app for generating and creating icon sets in both SVG and icon font formats.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m sure there might be more tools to do this, but these are the ones I know about.&lt;/p&gt;
&lt;p&gt;I’m going to be using &lt;strong&gt;Icomoon&lt;/strong&gt; and &lt;strong&gt;font-blast&lt;/strong&gt; in this article because they’re general tools that can be used with any font and are not restricted to just one. Both &lt;strong&gt;fontello-svg&lt;/strong&gt; and &lt;strong&gt;font-blast&lt;/strong&gt; are used pretty much the same way, and you can find extra information about &lt;strong&gt;fontello-svg&lt;/strong&gt; in the Github repository’s Readme.&lt;/p&gt;
&lt;h5 id=&quot;3.-convert-the-font-icons-to-svg-icons.&quot; tabindex=&quot;-1&quot;&gt;3. Convert the font icons to SVG icons.&lt;/h5&gt;
&lt;h6 id=&quot;3.1.-using-icomoon&quot; tabindex=&quot;-1&quot;&gt;3.1. Using Icomoon&lt;/h6&gt;
&lt;p&gt;To convert the font icons to SVG icons using Icomoon, we first need to upload them.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/icomoon-upload.gif&quot; /&gt;
&lt;p&gt;Your font icons will be available as an icon set in the app. The next steps are the same steps you would take if you were choosing from the set of already-available icons on the page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Select the icons you want to download as SVG.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;&lt;em&gt;Generate SVG &amp;amp; More&lt;/em&gt;&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/icomoon-download.gif&quot; /&gt;
&lt;p&gt;Like Fontello, Icomoon generates a folder containing the icons you generated, along with a demo page showing you how they can be used on your own pages.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/icomoon-files.png&quot; /&gt;
&lt;p&gt;The icons you’ve converted to SVG are available in the &lt;strong&gt;&lt;em&gt;SVG&lt;/em&gt;&lt;/strong&gt; folder.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/icomoon-svg-icons.png&quot; /&gt;
&lt;p&gt;There is one SVG file for every icon. The set is ready to be embedded in your page.&lt;/p&gt;
&lt;p&gt;But before embedding the icons, you might want to sprite them. That is, create one SVG sprite that contains all of the icons, and then use that sprite to display each icon at a time, wherever needed on the page. Icomoon conveniently generates an SVG sprite (&lt;em&gt;&lt;strong&gt;symbol-defs.svg&lt;/strong&gt;&lt;/em&gt;) for you along with a polyfill (&lt;em&gt;&lt;strong&gt;svgxuse.js&lt;/strong&gt;&lt;/em&gt;) for older browsers that don’t support external sprite references.&lt;/p&gt;
&lt;h6 id=&quot;3.2.-using-font-blast&quot; tabindex=&quot;-1&quot;&gt;3.2. Using font-blast&lt;/h6&gt;
&lt;p&gt;To convert the font icons to SVG icons using &lt;strong&gt;font-blast&lt;/strong&gt; you need to first install font-blast using npm via your terminal.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;$ npm install font&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;blast &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;g&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;-g&lt;/code&gt; flag (short for &lt;code&gt;global&lt;/code&gt;) ensures that you can run the script anywhere on your computer, regardless of the installation root.&lt;/p&gt;
&lt;p&gt;As mentioned in the font-blast documentation, “You can generate icons from the command line by called the script with two parameters: the SVG file of the font, and the directory where inidivual icons should be placed”:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;$ font&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;blast &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;svg&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;font&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;file&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;destination&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;dir&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My command looked like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;font&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;blast &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Users&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Sara&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Downloads&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;fontello&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;08cdd41f&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;font&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;fontello&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;svg  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Users&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Sara&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Downloads&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;fontello&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;08cdd41f&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;svg&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;icons&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;small&gt;Tip: You can drag your folder into the terminal, which will sort of drop the path to that folder into the terminal, so you don’t have to manually write it or grab it and then copy-paste it.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Running the above command, font-blast retrieves the icons from the font files and creates an SVG icon for each one, and saves the result to the folder you specify in the command line. My terminal then looks like this:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/font-blast-command-result.png&quot; /&gt;
	&lt;figcaption&gt;The result of running the font-blast command in the terminal, letting us know how many icons were found and converted to SVG.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;strong&gt;&lt;em&gt;svg-icons&lt;/em&gt;&lt;/strong&gt; folder I chose for the generated files looks like this:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/font-blast-files.png&quot; /&gt;
	&lt;figcaption&gt;The files generated by font-blast show the source font file used to extract the icons and include a folder containing the generated SVG icons.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you have guessed, the &lt;strong&gt;&lt;em&gt;SVG&lt;/em&gt;&lt;/strong&gt; folder contains the generated SVG icons:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/font-blast-svg-icons.png&quot; /&gt;
	&lt;figcaption&gt;The font-blast-generated SVG icons.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The icons are then ready to be embedded on your page.&lt;/p&gt;
&lt;h5 id=&quot;4.-sprite%2C-embed%2C-style%2C-animate%2C-have-fun!&quot; tabindex=&quot;-1&quot;&gt;4. Sprite, Embed, Style, Animate, Have fun!&lt;/h5&gt;
&lt;p&gt;There are &lt;strong&gt;three&lt;/strong&gt; main ways to create and use SVG sprites. I wrote an overview of these techniques &lt;a href=&quot;https://24ways.org/2014/an-overview-of-svg-sprite-creation-techniques/&quot;&gt;here&lt;/a&gt;. We will explore each of these techniques in more detail in an upcoming article (or a series of articles), show the pros and cons of each one, and how to create and use the SVG sprites, so stay tuned.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;You can &lt;a href=&quot;https://sarasoueidan.com/rss.xml&quot;&gt;subscribe to the RSS feed&lt;/a&gt; of my blog to stay up-to-date with new articles. An e-mail newsletter is in the works too!&lt;/small&gt;&lt;/p&gt;
&lt;h5 id=&quot;recommended-reading%3A&quot; tabindex=&quot;-1&quot;&gt;Recommended Reading:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/icon-fonts-vs-svg/&quot;&gt;Inline SVG vs Icon Fonts [CAGEMATCH]&lt;/a&gt; — a &lt;strong&gt;must-read&lt;/strong&gt; that clearly highlights the advantages of SVG and why it’s a superior icon system format.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.cloudfour.com/seriously-dont-use-icon-fonts/&quot;&gt;Seriously, Don’t Use Icon Fonts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://benfrain.com/seriously-use-icon-fonts/&quot;&gt;Seriously, Use Icon Fonts&lt;/a&gt; — I still recommend using SVG for icon systems, but it’s always good to read a different point of view.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/blog/2112-delivering-octicons-with-svg&quot;&gt;Delivering Octicons with SVG&lt;/a&gt; on the Github blog&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ianfeather.co.uk/ten-reasons-we-switched-from-an-icon-font-to-svg/&quot;&gt;Ten reasons we switched from an icon font to SVG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>SVG Style Inheritance and the ‘Flash Of Unstyled SVG’</title>
    <link href="https://sarasoueidan.com/blog/svg-style-inheritance-and-FOUSVG/"/>
    <updated>2016-03-01T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/svg-style-inheritance-and-FOUSVG/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;There are too few things not to like about SVG, and I don’t mean the things that browsers cause by incomplete or lack of certain features or buggy implementations. Yet you might sometimes get some unpredictable results that might frustrate you when working with SVG, if you don’t know the details of &lt;em&gt;how&lt;/em&gt; certain features &lt;em&gt;should&lt;/em&gt; behave and what to expect from them, as per the specifications. SVG presentation attributes come with a bit of their own behavior which might sometimes surprise you.&lt;/p&gt;
&lt;p&gt;I’ve written and spoken quite a bit about styling and animating SVGs with CSS, and have included a list of resources to dive into the details at the end of the article. I’ve also touched on the subject of style inheritance and the CSS Cascade in SVG in both speaking and writing. However, the topic is worth its own blog post.&lt;/p&gt;
&lt;p&gt;I’ve been meaning to write this article for a while now but have been kept preoccupied. But what prompted me to finally write it today is this tweet I saw yesterday:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Issue: Oversized SVG icons when the page’s CSS fails to load &lt;a href=&quot;https://t.co/FwkaBAzrAT&quot;&gt;https://t.co/FwkaBAzrAT&lt;/a&gt;&lt;/p&gt;&amp;mdash; Web Platform Daily (@openwebdaily) &lt;a href=&quot;https://twitter.com/openwebdaily/status/704380922892820481&quot;&gt;February 29, 2016&lt;/a&gt;
&lt;/blockquote&gt;
&lt;p&gt;And I remembered that I have already mentioned the cause and solution to this issue in one of my talks as well as in the Smashing Book 5 chapter on SVG, but never in one of my articles, not even the article focused on making SVGs responsive with CSS. (See links at the bottom of the article.)&lt;/p&gt;
&lt;h3 id=&quot;so%2C-what%E2%80%99s-the-problem-again%3F&quot; tabindex=&quot;-1&quot;&gt;So, what’s the problem again?&lt;/h3&gt;
&lt;p&gt;When CSS is disabled or fails to load for any reason—such as when you’re on lo-fi, most SVG images, especially inline ones, will scale and take up the entire viewport width, thus making the unstyled page look even more ‘broken’ than it already does.&lt;/p&gt;
&lt;p&gt;I’ve come across this scaling issue quite a few times in the past when I visited &lt;a href=&quot;http://codepen.io/&quot;&gt;Codepen&lt;/a&gt; on my fairly slow connection (which sometimes gets more than just ‘fairly’ slow). The responsive Codepen logo would take up the entire viewport area, thus blocking the content underneath it and forcing you to scroll down to read whatever comes after it.&lt;/p&gt;
&lt;p class=&quot;size-2x&quot;&gt;This—allow me to call it—&lt;em&gt;Flash of Unstyled SVGs (FOUSVG)&lt;/em&gt; is caused by the lack of &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes on the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element. &lt;/p&gt;
&lt;h3 id=&quot;but-the-svgs-are-meant-to-be-responsive%E2%80%A6&quot; tabindex=&quot;-1&quot;&gt;But the SVGs are meant to be responsive…&lt;/h3&gt;
&lt;p&gt;So why would you want to set explicit dimensions on your &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;when what you’re really trying to do is make the SVG fluid, right?&lt;/p&gt;
&lt;p&gt;Right.&lt;/p&gt;
&lt;p&gt;Ideally, we should make our SVGs responsive while also catering for any worst case scenarios where our styles are ignored or simply not applied for any reason.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;By taking advantage of the SVG style inheritance tree&lt;/strong&gt;, we &lt;em&gt;can&lt;/em&gt; make our SVGs responsive while simultaneously planning for worst case scenarios, and providing a decent, less broken, fallback.&lt;/p&gt;
&lt;h3 id=&quot;the-how&quot; tabindex=&quot;-1&quot;&gt;The How&lt;/h3&gt;
&lt;p&gt;In order to avoid the no-CSS scaling issue, all you need to do is &lt;em&gt;not&lt;/em&gt; remove the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes from the SVG.&lt;/p&gt;
&lt;h4 id=&quot;1.-keep-the-width-and-height-attributes&quot; tabindex=&quot;-1&quot;&gt;1. Keep the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes&lt;/h4&gt;
&lt;p&gt;This means that, if you’re creating the SVG yourself in, say, Adobe Illustrator, you should &lt;strong&gt;avoid checking the ‘Responsive’ option in the Export panel(s)&lt;/strong&gt;.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/ai-new-export-panel.jpg&quot; /&gt;
	&lt;figcaption&gt;
		The ‘Responsive’ option in the new Illustrator SVG Export Options panel.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/export-options-responsive.jpg&quot; /&gt;
	&lt;figcaption&gt;
		The ‘Responsive’ option in the older Illustrator SVG Export Options panel.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;It’s very tempting to check that option, because you do want your SVGs to be responsive, after all, but you shouldn’t check it unless what you need is for the SVG to simply occupy the entire width on the screen—like when it’s &lt;em&gt;supposed&lt;/em&gt; to be viewport-width, for example. &lt;small&gt;(I’ve embedded an SVG in my current client project and I &lt;em&gt;wanted it&lt;/em&gt; to occupy the full page width, so I safely removed the attributes.)&lt;/small&gt;&lt;/p&gt;
&lt;p class=&quot;size-2x&quot;&gt;Unchecking the ‘Responsive’ option will ensure that Illustrator will export the SVG and preserve the dimensions it has.&lt;/p&gt;
&lt;h4 id=&quot;2.-specify-your-desired-width-and-height-values-in-the-css&quot; tabindex=&quot;-1&quot;&gt;2. Specify your desired &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; values in the CSS&lt;/h4&gt;
&lt;p&gt;You want your SVG to scale—be fluid—and fill out its container’s width?&lt;/p&gt;
&lt;p&gt;No problem. Tell the browser you want that to happen by specifying the dimensions specified in the attributes above, using CSS properties:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or maybe something like&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;/* maybe even... */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; currentColor&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which will restrict the dimensions of an SVG icon, for example, and &lt;strong&gt;scale it in proportion to the text&lt;/strong&gt; it is inline with.&lt;/p&gt;
&lt;p&gt;Specifying your desired width and height in the CSS will make sure the width and height attributes no longer restrict the dimensions of the SVG when the CSS is successfully loaded and applied.&lt;/p&gt;
&lt;p class=&quot;size-2x&quot;&gt;If the CSS &lt;em&gt;does&lt;/em&gt; fail to load, the browser will use the values provided in the attributes as fallback, thus preventing the excessive scaling of the SVG.&lt;/p&gt;
&lt;h3 id=&quot;the-why%3A-why-does-the-above-technique-work%3F&quot; tabindex=&quot;-1&quot;&gt;The Why: Why does the above technique work?&lt;/h3&gt;
&lt;p&gt;SVG presentation attributes are special style properties—a shorthand for setting a CSS property on an SVG node. For this reason, it only makes sense that SVG presentation attributes would contribute to the style cascade.&lt;/p&gt;
&lt;p&gt;When I got started with SVG, I expected presentation attributes to be more specific than any other style declaration. It made sense to me that the “closer” a style is to a node, the more specific it is. For example, inline &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;s are more specific than external styles, an inline &lt;code&gt;style&lt;/code&gt; attribute is more specific than &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; ‘islands’, so I thought it made sense for presentation attributes to be the most specific form of styles. But I was wrong.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/tabatkins/status/704392579895263233&quot;&gt;Just like HTML presentational attributes&lt;/a&gt;, SVG attributes count as low-level author style sheets and are overridden by any other style definitions: external style sheets, document style sheets and inline styles.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	SVG attributes count as low-level “author style sheets” and are overridden by any other style definitions: external style sheets, document style sheets and inline styles.
&lt;/blockquote&gt;
&lt;p&gt;This makes it possible to provide a fallback for when the CSS styles are not available, so the SVGs still look good in their ‘worst’ case.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-preso-attrs-cascade.jpg&quot; alt=&quot;Table showing the position of presentation attributes in the CSS Cascade&quot; /&gt;
	&lt;figcaption&gt;
		The order of styles in the cascade. Styles lower in the diagram override those above them. Presentation attribute styles are overridden by all other styles except for those specific to the user agent.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id=&quot;tip%3A-you-can-use-presentation-attributes-to-provide-fallback-for-more-than-svg-scaling&quot; tabindex=&quot;-1&quot;&gt;Tip: You can use presentation attributes to provide fallback for more than SVG scaling&lt;/h4&gt;
&lt;p&gt;If you have an SVG you’re styling and animating using CSS properties, you may start by ditching the presentation attributes altogether—we do have an option to do just that in Illustrator’s Export panel, by choosing CSS Properties over Presentation Attributes. That will lead to all attributes being exported as CSS properties, if they &lt;em&gt;can&lt;/em&gt; be set as CSS properties.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;You see, only a subset of all CSS properties may be set by SVG attributes, and vice versa. The SVG specification lists the &lt;a href=&quot;https://www.w3.org/TR/SVG/propidx.html&quot;&gt;SVG attributes that may be set as CSS properties&lt;/a&gt;. Some of these attributes are shared with CSS, such as &lt;code&gt;opacity&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt;, among others, while some are not, such as &lt;code&gt;fill&lt;/code&gt;, stroke and &lt;code&gt;stroke-width&lt;/code&gt;, among others.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;In SVG 2, this list will include &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;cx&lt;/code&gt;, &lt;code&gt;cy&lt;/code&gt; and a few other presentation attributes that were not possible to set via CSS in SVG 1.1. The new list of attributes &lt;a href=&quot;https://www.w3.org/TR/SVG2/styling.html#SVGStylingProperties&quot;&gt;can be found in the SVG 2 specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Some of the ‘new’ CSS properties for SVG are already implemented and available in Chrome today!&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;There is a benefit to keeping the presentation attributes inside the SVG as well, not just on the root element. These benefits are highlighted the most when you attempt to style the contents of &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt;d elements in SVG.&lt;/p&gt;
&lt;p&gt;When you re-&lt;code&gt;use&lt;/code&gt; an element, the contents of that element are copied, as is, into wherever you place the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; in the page. But you may want to re-use an element mutliple times and style each occurance differently. You can do that by leveraging CSS Custom Properties (a.k.a. CSS Variables).&lt;/p&gt;
&lt;p&gt;When ‘theming’ multiple &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; elements with CSS custom properties, it is recommended to always keep the presentation attributes that provide the default styles for the reused SVG, so that the image is styled both when the CSS fails to load and/or when the SVG is viewed in browsers that don’t yet support custom properties. Without the presentation attributes, most styles—such as &lt;code&gt;fill&lt;/code&gt; and &lt;code&gt;stroke&lt;/code&gt;—will default to black, which is probably not what you want.&lt;/p&gt;
&lt;h3 id=&quot;weird-svg-scaling-gotchas-to-be-aware-of&quot; tabindex=&quot;-1&quot;&gt;Weird SVG scaling gotchas to be aware of&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Depending on how you embed your SVG&lt;/strong&gt;, browsers will generally default to a 300px by 150px size, which is &lt;a href=&quot;https://www.w3.org/TR/CSS2/visudet.html#inline-replaced-width&quot;&gt;the default size for replaced elements in CSS&lt;/a&gt;. This is the default size you get for &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;s as well, for example.&lt;/p&gt;
&lt;p&gt;If the dimensions of the SVG are not specified, or if they are explicitly set to &lt;code&gt;auto&lt;/code&gt;, the browsers will default to the 300 by 150 pixels dimension. If either dimension is set to &lt;code&gt;auto&lt;/code&gt; (instead of 100% as mentioned earlier), the browser will cancel out the value set in the presentation attributes and will default to one of the default height and width values.&lt;/p&gt;
&lt;p&gt;Well, kind of…&lt;/p&gt;
&lt;p&gt;Again, It Depends™.&lt;/p&gt;
&lt;p&gt;You see, the browser behavior depends on how you embed your SVG. If you embed the SVG using &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, you get the 300x150 as a default. If you embed the SVG inline in the document (using &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;), most browsers will scale it to the width of its container and will scale the height proportionally to preserve the SVG’s aspect ratio, while Internet Explorer will scale the width &lt;strong&gt;but not the height&lt;/strong&gt;, so you need to explicitly tell it to scale the height as well.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Fun fact: IE will scale the height of the SVG if you give it an explicit &lt;em&gt;width&lt;/em&gt; value of 100%. Crazy, but true.&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;I’ve written more about the rendering of different SVG embed techniques in the ‘Making SVGs Responsive with CSS’ article linked at the bottom of the article, along with ways to ensure the SVG is ‘responsified’ across all browsers.&lt;/p&gt;
&lt;p&gt;Amelia Bellamy-Royds has also gotten into more detail about the browser scaling techniques in her article ‘How to Scale SVG’ on CSS-Tricks.&lt;/p&gt;
&lt;h3 id=&quot;scaling-tip%3A-never-drop-the-viewbox&quot; tabindex=&quot;-1&quot;&gt;Scaling Tip: Never drop the &lt;code&gt;viewBox&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Ever.&lt;/p&gt;
&lt;p&gt;This is possibly the most important thing you need to be aware of when attempting to scale SVG: you &lt;strong&gt;&lt;em&gt;need&lt;/em&gt;&lt;/strong&gt; the SVG &lt;code&gt;viewBox&lt;/code&gt; to properly scale SVG images.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	you &lt;em&gt;&lt;strong&gt;need&lt;/strong&gt;&lt;/em&gt; the SVG &lt;code&gt;viewBox&lt;/code&gt; to properly scale SVG images. 
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Do &lt;em&gt;not&lt;/em&gt; remove it.&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
	After reading this artilce, developer David Bushell shared his own experience highlighting the importance of the &lt;code&gt;viewBox&lt;/code&gt; to make sure SVG images are rendered as expected. You can check his post out &lt;a href=&quot;http://dbushell.com/2016/03/01/be-careful-with-your-viewbox/&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;/small&gt;&lt;/p&gt;
&lt;h3 id=&quot;wrapping-up&quot; tabindex=&quot;-1&quot;&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;Having explicit, non-percentage &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; values set on an SVG not only helps with fixing FOUSVG issues, but it also helps with other scaling problems, especially when the SVG is used as a background image in CSS. Internet Explorer sometimes refuses to scale the image properly if it doesn’t have its aspect ratio specified with the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes. I’ve had this happen even with non-background images recently as well. Quite honestly, I don’t know the details of why or when exactly this happens, but I do know that we can avoid it by having these attributes available anyway.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;viewBox&lt;/code&gt; is even more important than the width and height, so always make sure you keep it there. You can learn all there is to know about how the &lt;code&gt;viewBox&lt;/code&gt; works in &lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems/&quot;&gt;this article&lt;/a&gt;. It is a very powerful attribute that is definitely worth taking the time to master.&lt;/p&gt;
&lt;h3 id=&quot;further-reading&quot; tabindex=&quot;-1&quot;&gt;Further Reading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[Slides] &lt;a href=&quot;http://slides.com/sarasoueidan/styling-animating-svgs-with-css#/&quot;&gt;Styling and Animating SVGs with CSS&lt;/a&gt; – my talk from 2014, given at CSSConf and CSSConf EU.&lt;/li&gt;
&lt;li&gt;[Article] &lt;a href=&quot;https://www.smashingmagazine.com/2014/11/styling-and-animating-svgs-with-css/&quot;&gt;Styling and Animating SVGs with CSS&lt;/a&gt; — sort of a talk transcript, published on Smashing Magazine&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/&quot;&gt;Making SVGs Responsive with CSS&lt;/a&gt; — article published on Codrops&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/scale-svg/&quot;&gt;How to Scale SVG&lt;/a&gt; — by Amelia Bellamy-Royds&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Scaling_of_SVG_backgrounds&quot;&gt;Scaling of SVG Backgrounds&lt;/a&gt; on MDN&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tympanus.net/codrops/2015/07/16/styling-svg-use-content-css/&quot;&gt;Styling the Contents of SVG &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; with CSS&lt;/a&gt; on Codrops&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems/&quot;&gt;Understanding SVG Coordinate Systems and Transformations (Part 1): The viewport, &lt;code&gt;viewBox&lt;/code&gt; and &lt;code&gt;preserveAspectRatio&lt;/code&gt; Attributes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;I hope you found this article useful. Thank you for reading!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2015 In Review</title>
    <link href="https://sarasoueidan.com/blog/2015-in-review/"/>
    <updated>2016-01-06T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/2015-in-review/</id>
    <content type="html">&lt;p&gt;&lt;i&gt;Happy new year!&lt;/i&gt; 🌟&lt;br /&gt; OK, I felt awkward starting a blog post that way—I confess. ☺️ But this is also an unusual post—not an article about CSS or SVG, and not a lengthy tutorial about web development. It is also the quickest post I ever wrote.&lt;/p&gt;
&lt;p&gt;This is my first time writing a year in review kind of post. A lot of great stuff has happened in 2015 that I thought are worth documenting and have a look back at a few years from now. I’m grateful and thank God for every one of these things and everything else that has happened. And since a photo is worth a thousand words, I’ll start with a preview of the highlights in a few pictures, followed by sort of an alt text for each one, and then a little more:&lt;/p&gt;
&lt;style&gt;
    img {
        width: 100%;
        display: block;
        float: left;
        -webkit-filter: grayscale(1);
        filter: grayscale(1);
    }
    img.nofilter {
        -webkit-filter: none;
        filter: none;
    }
    img.half {
        width: 50%;
    }
    img.third{
        width: 33.33%;
    }
&lt;/style&gt;
&lt;figure class=&quot;wider&quot;&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/2015-02.jpg&quot; class=&quot;half&quot; /&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/2015-08.jpg&quot; class=&quot;half nofilter&quot; /&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/2015-01.jpg&quot; class=&quot;third nofilter&quot; /&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/2015-04.jpg&quot; class=&quot;third&quot; /&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/2015-05.jpg&quot; class=&quot;third&quot; /&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/2015-07.png&quot; class=&quot;half nofilter&quot; /&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/2015-06.jpg&quot; class=&quot;half&quot; /&gt;
&lt;figcaption style=&quot;text-align: left; clear: both; padding: 2em 1em;&quot;&gt;
    Some of my favourite work-related highlights of 2015. From the top left:
    &lt;ol&gt;
        &lt;li&gt;Delivering the opening keynote at CSSDevConf 2015. Photo by Chris Casciano.&lt;/li&gt;
        &lt;li&gt;My 2015 speaker badges for the conferences: CSSConf AU, Smashing Conf LA, btconf Duesseldorf, Microsoft Edge Summit, Generate London, Velocity NY, CSSDevConf, View Source conf, ffconf.&lt;/li&gt;
        &lt;li&gt;Me accepting the Developer of the Year award at the &lt;i&gt;net&lt;/i&gt; awards ceremony. Photo by and copyright of &lt;i&gt;net&lt;/i&gt; magazine. (I think I look  sleep deprived in that photo, but it was already two hours past my bed time, so, there’s that.)&lt;/li&gt;
        &lt;li&gt;Photo of the net award. (These things are very difficult to take proper photos of! ☝)&lt;/li&gt;
        &lt;li&gt;Photo of the O’Reilly Web Platform Award I received in April. (I took like ten photos till I finally got a decent one. 😅)&lt;/li&gt;
        &lt;li&gt;Photo of the first page of the “Mastering SVG for Responsive Web Design” chapter in the Smashing Book 5.&lt;/li&gt;
        &lt;li&gt;Me giving a workshop at Smashing conf LA. Photo by Marc Thiele.&lt;/li&gt;
    &lt;/ol&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;In 2014, Manoela Ilic asked me to write &lt;strong&gt;a CSS Reference for Codrops&lt;/strong&gt;. In February 2015, we finally &lt;a href=&quot;https://sarasoueidan.com/blog/codrops-css-reference&quot;&gt;released the 8–months worth of work &amp;amp; writing&lt;/a&gt; to the world.&lt;/li&gt;
&lt;li&gt;This year, I also &lt;strong&gt;got published for the first time in a real book&lt;/strong&gt;—&lt;a href=&quot;http://www.smashingmagazine.com/2015/03/31/real-life-responsive-web-design-smashing-book-5/&quot;&gt;the Smashing Book 5&lt;/a&gt;, which I contributed to with a very extensive article about using SVG in a RWD workflow.&lt;/li&gt;
&lt;li&gt;Back in April, I &lt;strong&gt;won an O’Reilly Web Platform award&lt;/strong&gt;. I had never heard of the award before I was informed about winning it, and so I had no clue that I was even nominated. That &lt;a href=&quot;https://sarasoueidan.com/blog/oreilly-web-platform-award/&quot;&gt;came as such a beautiful surprise&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;Back in June, I was &lt;strong&gt;nominated and shortlisted for two &lt;em&gt;net&lt;/em&gt; awards&lt;/strong&gt;: &lt;i&gt;Developer of the Year&lt;/i&gt; and &lt;i&gt;Outstanding Contribution&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;In September, I &lt;strong&gt;won the &lt;em&gt;Developer of the Year&lt;/em&gt; &lt;em&gt;net&lt;/em&gt; award&lt;/strong&gt;. This was one of the most awesome things that have happened since I started doing what I do on the web, so thank you &lt;em&gt;so much&lt;/em&gt; for each and every one of you who nominated me and voted for me. I am humbled and extremely proud! &lt;em&gt;You are awesome!&lt;/em&gt; 💜&lt;/li&gt;
&lt;li&gt;I published 23 articles. That’s an average of 2 articles per month, which I think is good. I like to take my time with the articles I write, as opposed to try to publish as much as possible during a specific period of time.&lt;/li&gt;
&lt;li&gt;I &lt;strong&gt;spoke at 9 conferences worldwide&lt;/strong&gt;—in the US, UK, EU and AU, including the first &lt;a href=&quot;https://channel9.msdn.com/events/WebPlatformSummit/2015&quot;&gt;Microsoft Edge Summit&lt;/a&gt;, and &lt;strong&gt;gave my first workshop&lt;/strong&gt; about SVG at Smashing Conf in LA.
&lt;small&gt;(A lot of people ask me for videos of these talks sometimes. You can find a list of them—in chronological order— on my &lt;a href=&quot;https://sarasoueidan.com/speaking&quot;&gt;speaking page&lt;/a&gt;.)&lt;/small&gt;&lt;/li&gt;
&lt;li&gt;I &lt;strong&gt;gave two conference keynotes&lt;/strong&gt;, one of which was the first day opening keynote—at &lt;em&gt;CSSDevConf&lt;/em&gt; on board the Queen Mary (a boat!!) in California.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These points pretty much sum up the biggest highlights of the year, and the ones like to remember it with.&lt;/p&gt;
&lt;p&gt;Of course, many things happened on a personal life level, but those don’t belong here, so I will spare you the list of them.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This one is on the weirder kind of highlights side, but definitely one of the things I remember 2015 with: I finally got a British visa! Those of you who have been following me in the last couple of years are already familiar with my visa &lt;a href=&quot;http://beyondtellerrand.com/blog/why-you-never-should-give-up&quot;&gt;stories&lt;/a&gt;. I apply for visas a lot, given the passport I hold (Lebanese) and then the places I speak in. I need to apply for a visa for most conferences I want to speak at, which sucks but is unfortunately necessary.&lt;/p&gt;
&lt;p&gt;But one visa application that was particularly painful for me was the British visa, given how unfair the result was, simply because the person responsible for granting the visas was “not satisfied with my intentions in the UK”. 😒🙄
I decided to give it another shot last year for Generate London and ffconf, as well as to attend the &lt;em&gt;net&lt;/em&gt; awards ceremony. After having showed evidence of my 10 previous speaking appearances at that time, the UK Visa &amp;amp; Immigration was &lt;i&gt;finally&lt;/i&gt; convinced, and they granted me the visa. Woo.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Of course, 2015 wasn’t all rainbows and unicorns. I failed to do some of the things I was hoping to do, too.&lt;/p&gt;
&lt;p&gt;Possibly the number one thing I regret to say that I didn’t do was to keep maintaining and updating the Codrops CSS Reference with new entries as I intended to.&lt;/p&gt;
&lt;p&gt;With client development projects taking priority over all other work, and then the many speaking and writing commitments I had, it was very hard to find enough time to do this. Maintaining the reference requires way more time than I could possibly devote for it.&lt;/p&gt;
&lt;p&gt;As such, I think it’s an appropriate time to officially announce that I am no longer the maintainer of the reference. (More news and updates about this will be shared on and by Codrops some time in the near future, so no elaboration is necessary at this point.) The reference is one those things I’m most proud of, and I know it will be well taken care of.&lt;/p&gt;
&lt;p&gt;In 2015, I also managed to strain my wrist which is still not healed today. I can’t exercise like I used to, I don’t have enough strength in my left hand to do things that I would normally do with ease, and, well, it’s just frustrating. The pain comes and goes but it’s &lt;i&gt;just not healed yet&lt;/i&gt;, which means I still have to see a doctor (again) and keep away from any form of physical activity that adds to the strain of it.&lt;/p&gt;
&lt;p&gt;On the bright side: this means that I take longer breaks from work, which is something to add to the list of things I failed to do. I overworked and pushed myself to the limits, and reached the boundaries of a burnout mutliple times last year. This is one of those things I am currently working on and making sure it doesn’t happen again. Saying ‘No’ to stuff helps a lot, by the way. &lt;em&gt;#protip&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;To keep this post short, &lt;strong&gt;I will skip the 2016 resolutions list&lt;/strong&gt;. Partly because it’s not finalized yet, mainly because my goals aren’t really year-specific, so I’m not sure they count as “2016 resolutions”, and additionally because &lt;strong&gt;I’ve got a couple more announcements and updates coming&lt;/strong&gt; that deserve their own blog posts. So, stay tuned!&lt;/p&gt;
&lt;p&gt;I want my web site to be home for most (not all) of my articles and tutorials in the future, so make sure to subscribe to the RSS feed to stay updated with what comes next.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, that was my look back at 2015. I’m really excited to see what 2016 will bring. I don’t expect it to be all good, because I’m a realistic person, but I do always keep a positive eye on the future… or at least I try to.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What was &lt;i&gt;your&lt;/i&gt; 2015 like? What have you accomplished and what are you most proud of? And what have you got planned for 2016?&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Animated SVG vs GIF [CAGEMATCH]</title>
    <link href="https://sarasoueidan.com/blog/svg-vs-gif/"/>
    <updated>2015-11-24T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/svg-vs-gif/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;SVG can do much more than display static images. Its animation capabilities are one of its most powerful features, giving it a distinctive advantage over all other image formats. They are one of many reasons that make SVG images better than raster images, including GIFs. But this, of course, only applies to images that are good candidates for SVG, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logos&lt;/li&gt;
&lt;li&gt;non-complex, vector-based illustrations,&lt;/li&gt;
&lt;li&gt;user interface controls,&lt;/li&gt;
&lt;li&gt;infographics,&lt;/li&gt;
&lt;li&gt;and icons.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, if you have an image that is better suited for the raster format—such as a photograph or a very complex vector illustration (that would normally have a very big size as an SVG), then you should use a raster image format instead. Not only should the image be a good candidate for SVG, but SVG should also be a good candidate for the image. If the image size is much less as a PNG, for example, then you should use PNG, and serve different versions/resolutions of that image using &lt;code&gt;srcset&lt;/code&gt;, or &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;, depending on what you’re working on and trying to achieve.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	Not only should the image be a good candidate for SVG, but SVG should also be a good candidate for the image.
&lt;/blockquote&gt;
&lt;p&gt;Generally speaking, the images listed above are usually perfect candidates for SVG. And if you’re going to animate any of those, creating your animations by animating the SVG code is the sensible way to go.&lt;/p&gt;
&lt;p&gt;However, last week, a link popped up in my Twitter timeline that linked to a set of icons that are animated as GIFs.&lt;/p&gt;
&lt;p&gt;The first thing that crossed my mind when I saw them was that they were perfect candidates for SVG and should be created as SVG images, not GIFs.&lt;/p&gt;
&lt;p&gt;SVGs can indeed replace GIFs in many places, just like they can replace other raster image formats for candidates like those mentioned above. The ability to animate SVG images is what gives it this advantage and ability. And this applies to more than just animated icons.&lt;/p&gt;
&lt;p&gt;So, here is why I think you should use SVG instead of GIFs whenever you can.&lt;/p&gt;
&lt;h3 id=&quot;image-quality&quot; tabindex=&quot;-1&quot;&gt;Image Quality&lt;/h3&gt;
&lt;p&gt;The first advantage to using SVG over GIFs—or any image format, for that matter—is, unsurprisingly, SVG’s number one feature: resolution-independence. An SVG image will look super crisp on any screen resolution, no matter how much you scale it up. Whereas GIFs—a raster image format—do not. Try zooming in a page that contains a GIF image and watch the GIF become pixelated and its contents blurred.&lt;/p&gt;
&lt;p&gt;For example, the following GIF recording of an SVG animation looks fine at this small size:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-vs-gif--animation-example.gif&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		A GIF recording of the &lt;a href=&quot;http://codepen.io/chrisgannon/pen/myZzJv&quot;&gt;SVG Motion Trails demo&lt;/a&gt; by Chris Gannon.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Zooming into the page a few times will cause the image to be pixelated and the edges and curves of the elements inside to become jagged, as you can see in the image below:&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-vs-gif--animation-example-zoomed-in.png&quot; alt=&quot;&quot; /&gt;
&lt;p&gt;Whereas if you &lt;a href=&quot;http://codepen.io/chrisgannon/pen/myZzJv&quot;&gt;check the SVG demo out&lt;/a&gt; and zoom into the page, the SVG content will remain crisp and clear no matter how much you zoom in.&lt;/p&gt;
&lt;p&gt;To provide crisp images for high-resolution displays when you’re using a bitmap image format like GIF, you need to use &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; or &lt;code&gt;srcset&lt;/code&gt; and switch the images up for different contexts.&lt;/p&gt;
&lt;p&gt;Of course, the higher the image resolution, the bigger the file size will be. With GIFs, the file size will end up ridiculously large; but we’ll get to that in a minute. Also, using a high-resolution GIF and serving it at a smaller size for mobiles is bad for performance. &lt;strong&gt;Don’t do it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When you create GIF-animated icons or images, their dimensions are fixed. Change the dimensions or zoom in and out of the page, and they’ll get pixelated. With SVG, size is free, and clarity is a constant. You can create a small SVG and have it scale up as much as needed without sacrificing image clarity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&quot;cagematch&quot;&gt;
	&lt;tr class=&quot;th&quot;&gt;
		&lt;td&gt;GIF&lt;/td&gt; &lt;td&gt;Animated SVG&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class=&quot;lose&quot;&gt;GIF, just like other image formats, are not resolution-independent, and will therefore look pixelated when scaled up or viewed on higher resolutions.&lt;/td&gt;
		&lt;td class=&quot;win&quot;&gt;
			SVG is scalable and resolution-independent, and will look crisp clear on any screen resolution.
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&quot;colors-and-transparency&quot; tabindex=&quot;-1&quot;&gt;Colors and Transparency&lt;/h3&gt;
&lt;p&gt;Perhaps the number one deal-breaker with GIFs is the way transparency is handled, especially when the image is displayed on a background other than a white background.&lt;/p&gt;
&lt;p&gt;This is an issue that is most likely to emerge when using GIF icons (whether animated or not), since icons are usually created with transparent backgrounds.&lt;/p&gt;
&lt;p&gt;For example, take the following circle with a stroke, created as both an SVG image (left) and a GIF with a transparent background (right). The problem is evident as soon as you look at the two images: the GIF circle has grey fringes around its stroke.&lt;/p&gt;
&lt;figure class=&quot;double&quot; style=&quot;background-color: #003366;&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-vs-gif--circle-on-transparent-background.svg&quot; alt=&quot;&quot; width=&quot;350px&quot; /&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-vs-gif--circle-on-transparent-background.gif&quot; alt=&quot;&quot; width=&quot;350px&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;If you’re not reading this in the browser, the effect might not be visible to you because the figure styles might not be applied. Here is a screenshot showing the problem (on the right):&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-vs-gif--artefact.png&quot; alt=&quot;&quot; /&gt;
&lt;p&gt;This happens because transparency in GIF images is binary. This means that each pixel is either &lt;em&gt;on&lt;/em&gt; or &lt;em&gt;off&lt;/em&gt;; a pixel is either transparent or fully opaque. This, in turn, means that the transition between the foreground color and the background color is not as smooth, and results in artefacts caused by inadequate sampling frequency, commonly known as &lt;em&gt;aliasing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When a line is not completely straight, it causes some pixels (around the edges) to be partially transparent and partially opaque, so the software needs to figure out what color to use for those pixels. The halo effect “is caused by all the pixels which would have been &amp;gt; 50% opaque being fully opaque and carrying the bg color against which they were rasterized” (&lt;a href=&quot;http://twitter.com/svgeesus/&quot;&gt;Chris Lilley&lt;/a&gt;). So this effect is usually a result of pixel contamination from the color of the background against which the image was composited against upon creation/saving in a graphics editor.&lt;/p&gt;
&lt;p&gt;Aliasing is usually countered with &lt;em&gt;anti-aliasing&lt;/em&gt;, but that is not as simple when transparency is binary:&lt;/p&gt;
&lt;blockquote&gt;
	&lt;p&gt;There is a &lt;strong&gt;severe interaction between anti-aliasing and binary transparency&lt;/strong&gt;. Because the background colour of the image is mixed in with the foreground colours, simply replacing a single background colour with another is not enough to simulate transparency. There will be a whole host of shades which are &lt;em&gt;mixtures&lt;/em&gt; of background and foreground colours [...]. The effect in this case is a white halo around objects, because the original image was anti-aliased to a white background colour.&lt;/p&gt;
	&lt;cite&gt;— &lt;a href=&quot;http://twitter.com/svgeesus/&quot;&gt;Chris Lilley&lt;/a&gt; (&lt;a href=&quot;http://www.w3.org/Conferences/WWW4/Papers/53/gq-trans.html&quot;&gt;Source&lt;/a&gt;)&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;p&gt;The solution to this problem is variable transparency, commonly known as the alpha channel, which allows for varying degrees of transparency and hence a smoother transition between the foreground and background color, which is not what is available in GIF; thus, the halo effect problem. Images with the halo effect usually look best when used with white backgrounds; any other high-contrast background color will make the artefact visible.&lt;/p&gt;
&lt;p&gt;I’m not quite sure if there is a way to work around this issue, but I’ve not yet come across a GIF with a transparent background and curved edges that did not have this problem. I’ve even seen rectangular shapes suffer from it as well.&lt;/p&gt;
&lt;p&gt;If you want to use your image/icon on a non-white background—say, on a dark footer background, this alone could be a deal-breaker. But there are other reasons SVG is better than GIFs too, that we’ll cover in the next sections.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you’re reading this article in a browser but still don’t see the fringes in the first image on a smaller screen, try zooming the page in to see the effect.&lt;/p&gt;
&lt;p&gt;Why might you not be able to see the fringes on smaller sizes? The answer is: the browser smoothes the edges as a part of the image resize process.
Does this mean that you can utilize this to get rid of the fringes and still use a GIF? Yes, you can. But to do that, you have to use a GIF that is much bigger than the size you want to render it at, and then resize it. This also means that you will be serving your users images that are much bigger than they need, therefore taking up more of their bandwidth on mobile, as well as hurting the overall page size and performance. Please don’t do that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&quot;cagematch&quot;&gt;
	&lt;tr class=&quot;th&quot;&gt;
		&lt;td&gt;GIF&lt;/td&gt; &lt;td&gt;Animated SVG&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class=&quot;lose&quot;&gt;GIF images are capable of only binary transparency. This causes artefacts, known as the &lt;em&gt;halo effect&lt;/em&gt; to show up whenever the image or icon is used on a non-white background. The higher the background color contrast with the image, the more visible the halo effect, which makes the icons practically unusable.&lt;/td&gt;
		&lt;td class=&quot;win&quot;&gt;
			SVG images come with an alpha channel and do not suffer from any problems when they are used on different background colors.
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&quot;animation-techniques-%26-animation-performance&quot; tabindex=&quot;-1&quot;&gt;Animation Techniques &amp;amp; Animation Performance&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;You can animate SVGs using CSS, javaScript or SMIL&lt;/strong&gt;, and each of them gives you a different level of control that you can take advantage of to create all kinds of animations on SVG elements.&lt;/p&gt;
&lt;p&gt;There are no “techniques” to animate GIF images. They are animated by showing a series of images—one for each frame—sequentially, in a fixed manner, at a fixed pace. You know, the way GIFs just work. Granted, you can get creative with your icons before you turn them into GIFs and then “record” the animation and convert it into a GIF, but how good will it look? And how much control over the animation timing will you get afterwards? None.&lt;/p&gt;
&lt;p&gt;Unless you make sure you have at least 60 frames—that is, 60 images—&lt;em&gt;&lt;strong&gt;per second&lt;/strong&gt;&lt;/em&gt; to create your GIF, the animation will not look smooth. Whereas with SVG, achieving smooth animations is much easier and simpler by taking advantage of browser optimizations.&lt;/p&gt;
&lt;p&gt;A GIF has a bigger file size than PNG or JPEGs, and the longer the animation duration, the bigger the size will be. Now, what if your animation plays for at least 5 ot 6 seconds? What if it plays for much longer?&lt;/p&gt;
&lt;p&gt;You get the picture.&lt;/p&gt;
&lt;p&gt;Let’s look at a more specific yet minimal example. Below are two images: an animated SVG on the left, and an animated GIF on the right. The rectangle in both images changes color over the course of six seconds.&lt;/p&gt;
&lt;figure class=&quot;double&quot;&gt;
	&lt;svg width=&quot;300&quot; height=&quot;150&quot; viewBox=&quot;0 0 300 150&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;style&gt;svg {width: 48%;}path { animation: loop 6s linear infinite; } @keyframes loop { to { fill: #009966; } }&lt;/style&gt;&lt;path fill=&quot;#ff1493&quot; d=&quot;M0 0h300v150h-300z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-vs-gif--rectangle-animation.gif&quot; alt=&quot;&quot; width=&quot;300px&quot; height=&quot;150px&quot; /&gt;
	&lt;figcaption&gt;The SVG image on the left and the GIF on the right.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;There are a couple of things to note here:&lt;/p&gt;
&lt;ul style=&quot;text-align: left;&quot;&gt;
	&lt;li&gt;The GIF animation looks smooth but if you look closely you will notice that the SVG rectangle is going through a wider range of colors as it transitions from the initial to the final color. &lt;strong&gt;The number of colors the GIF goes through is limited by its number of frames.&lt;/strong&gt; In the above image, the GIF goes through 60 frames, i.e. 60 colors, whereas the SVG goes through the entire spectrum between the shade of pink used and the final green color.&lt;/li&gt;
	&lt;li&gt;For looping animations like this one, it is generally best to avoid the color jump shown in the above animation, and create the animation so that it reverses once it reaches the green color; that way, it will transition smoothly back to pink and then start the second round of animation from there too, avoiding that unsightly color jump.
	&lt;p&gt; With CSS, you can reverse the animation using the &lt;code&gt;alternate&lt;/code&gt; animation direction value. But with GIF, you will need to work on your number of frames and probably end up doubling it to make this happen; this will, of course, also increase the size of the image as well.
	&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sizes of the two images shown above are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GIF image size: &lt;strong&gt;21.23KB&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SVG image size: &lt;strong&gt;0.355KB&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is no trivial difference. But we all know we can optimize our images. So let’s do that.&lt;/p&gt;
&lt;p&gt;Optimizing the SVG using the SVGO Drag-and-Drop GUI brings the SVG’s file size down to &lt;strong&gt;0.249KB&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To optimize the GIF, you can use one of the several GIF optimization tools online. I used &lt;a href=&quot;http://ezgif.com/&quot;&gt;ezgif.com&lt;/a&gt; to optimize the above image. (Other tools also exist; &lt;a href=&quot;http://www.lcdf.org/gifsicle/&quot;&gt;gifsicle&lt;/a&gt; is one of them.) The file size dropped down to &lt;strong&gt;19.91KB&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are many options you can choose from when optimizing GIF images. I optimized the above image so that the number of frames remains intact, using Lossy GIF compression, which &lt;q&gt;can reduce animated GIF file size by 30%—50% at a cost of some dithering/noise.&lt;/q&gt;&lt;/p&gt;
&lt;p&gt;You can also optimize it by removing every nth frame; that can reduce the file size even further, but at the cost of the animation not being smooth anymore. And in the case of an animation like the case at hand, removing frames will make the change in color be “jumpy” and noticeable.&lt;/p&gt;
&lt;p&gt;Other optimization options are also available such as color reduction (which wouldn’t be suitable for our color-dependent animation here) and transparency reduction. You can learn more about these options on the &lt;a href=&quot;http://ezgif.com/&quot;&gt;ezgif.com&lt;/a&gt; optimization page.&lt;/p&gt;
&lt;p&gt;To recap: If you want your GIF animation to be smooth, you’re going to need more frames per second, and that will consequently increase the file size by a lot. Whereas with SVG, you’re likely to maintain a much smaller file size. The above example is minimal, and I’m sure there are better ones out there, but I wanted the most minimal example to show the difference between the two formats.&lt;/p&gt;
&lt;p&gt;Even if you were animating the above rectangle using JavaScript or even a JavaScript framework—since animations on SVG don’t work in IE, for example, the file size of that framework combined with that of the SVG is still likely to be smaller or at least equal to the size of the GIF image size. For example, using &lt;a href=&quot;http://greensock.com/&quot;&gt;GreenSock&lt;/a&gt;’s TweenLite, the size of the SVG with the library combined would be less than 13KB (which is still less than the size of the GIF), since TweenLite is 12KB minified. If you do end up with a size equal to that of the GIF, the other benefits of SVG will tip the scale and you will be getting more out of it.&lt;/p&gt;
&lt;p&gt;Some other JavaScript libraries exist that focus on certain animation tasks at a time, and come in impressivly small file sizes (&amp;lt;5KB), such as &lt;a href=&quot;https://github.com/lmgonzalves/segment/blob/gh-pages/dist/segment.min.js&quot;&gt;Segment&lt;/a&gt; which is used to animate SVG paths to create line drawing effects. Segment is 2.72KB minified. That’s not too shabby, is it?&lt;/p&gt;
&lt;p&gt;There can be exceptions, so you should always test. But given the nature of GIFs and how they work, you will likely find that SVG is a better option in most cases.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;Note: SVG Performance is not at its absolute best today, but this will hopefully change in the future. IE/MS Edge offer the best SVG rendering performance among all browsers today. Despite that, SVG animations will still look better than GIF animations, especially when you&#39;re tackling long animations, because the file size of the GIF—assuming it’s recorded at 60fps—will have a negative impact on the overall page performance. Libraries like GreenSock also offer impressive performance as well. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&quot;cagematch&quot;&gt;
	&lt;tr class=&quot;th&quot;&gt;
		&lt;td&gt;GIF&lt;/td&gt; &lt;td&gt;Animated SVG&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class=&quot;lose&quot;&gt;
			&lt;ol&gt;
				&lt;li&gt;GIF images are generally larger than SVG images. The more complex and longer the animation, the more frames are required to create it and therefore the bigger the file size and the more the negative impact on performance.&lt;/li&gt;
				&lt;li&gt;Unless GIF animation plays at 60fps, the animation is going to be jagged and not smooth. Also, the more the number of frames per second, the bigger the file size, especially for longer animations.&lt;/li&gt;
			&lt;/ol&gt;
			&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt; There will be a compromise that needs to be made. Either the GIF animation is smooth and the overall file and page size and performance is negatively affected, or the GIF animation will suffer with less frames. One form of performance is risked in both scenarios.&lt;/p&gt;
		&lt;/td&gt;
		&lt;td class=&quot;average&quot;&gt;
			&lt;p&gt;SVG images take advantage of the browser optimizations when animating elements. Even though browser performance on SVG elements is still not at its best, animation will still perform better without having to make page performance compromises.&lt;/p&gt;
			&lt;p&gt;
				SVG file size is still very reasonable, if not very small, compared to GIFs, even when certain animation libraries might be required to create cross-browser animations.
			&lt;/p&gt;
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h4 id=&quot;maintaining-%26-modifying-animations&quot; tabindex=&quot;-1&quot;&gt;Maintaining &amp;amp; Modifying Animations&lt;/h4&gt;
&lt;p&gt;…is a pain if you are using GIFs. You will need to use a graphics editor such as Photoshop or Illustrator or After Effects, to name a few. And if you’re like me, then graphics editors are not where your skills shine, and you feel more at home when you make modifications in code, not in graphics editors.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-vs-gif--photoshop-frames.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;Screenshot of the animation timeline as created in Photoshop. The lower part shows a fraction of the frames created for the animation. Fore more complex animations, more frames are required. Also notice the layers panel.
		&lt;p&gt;&lt;small&gt;Thanks to my designer friend &lt;a href=&quot;http://twitter.com/WalterStephanie&quot;&gt;Stephanie Walter&lt;/a&gt; for the PS animation tips.&lt;/small&gt;&lt;/p&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;What happens if you want to change your animation timing? or if you want to change the timing functions for one or multiple elements inside your image? or if you want to change the direction in which an element moves? What if you want to change the entire effect and have the elements in your image do something completely different?&lt;/p&gt;
&lt;p&gt;You will need to recreate the image or icon all over again. Any change requires you to jump into the graphics editor and work with frames and a frame-based UI. That would be like torture to developers, and a Mission Impossible for those of us who don’t know our way around those editors enough to make these changes.&lt;/p&gt;
&lt;p&gt;With SVG, making any kind of change to the animation(s) is only a few lines of code away.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion (developer’s perspective)&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&quot;cagematch&quot;&gt;
	&lt;tr class=&quot;th&quot;&gt;
		&lt;td&gt;GIF&lt;/td&gt; &lt;td&gt;Animated SVG&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class=&quot;lose&quot;&gt;Maintaining and modifying GIF animations requires re-creating the image or resorting to a frame-based graphics editor’s UI to do so, which is a problem for design-challenged developers.&lt;/td&gt;
		&lt;td class=&quot;win&quot;&gt;
			SVG animations can be changed and controlled right inside the SVG code—or anywhere the animations are defined, usually using a few lines of code.
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&quot;file-size%2C-page-load-time-%26-performance&quot; tabindex=&quot;-1&quot;&gt;File Size, Page Load Time &amp;amp; Performance&lt;/h3&gt;
&lt;p&gt;In the previous section, we focused on the performance of the animation itself. In this one, I want to shed some light on the page performance as a whole and how it is affected by the image format choice you make.&lt;/p&gt;
&lt;p&gt;Fact: The bigger the file size, the more the negative impact on page load time and performance. With that in mind, let’s see how using SVG instead of GIFs can help improve the overall page load time by looking at a more practical, real-world example.&lt;/p&gt;
&lt;p&gt;At my first SVG talk, 18 months ago, I mentioned how SVG can be used to replace animated GIFs and result in overall better page performance. In that talk, I provided a real-world example of a real-world web page that took advantage of what SVG has to offer and reaped the benefits: the &lt;a href=&quot;http://sprout.is/&quot;&gt;Sprout&lt;/a&gt; homepage.&lt;/p&gt;
&lt;p&gt;The Sprout homepage has two animated images that were initially created and displayed as GIFs. Two years ago, &lt;a href=&quot;https://twitter.com/mfortress&quot;&gt;Mike Fortress&lt;/a&gt; wrote &lt;a href=&quot;http://oak.is/thinking/animated-svgs/&quot;&gt;an article on the Oak blog&lt;/a&gt;, in which he explains how they recreated the animated GIFs, particularly the chart GIF (see image below) as an animated SVG image.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-vs-gif--sprout-chart.svg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The SVG version of the chart used on the Sprout homepage and written about on the Oak article. &lt;small&gt;(All rights reserved by their owners.)&lt;/small&gt;
		&lt;p&gt;Note that the animation is created using SMIL so it will not be animating if you’re viewing it in Internet Explorer.&lt;/p&gt;
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In his article, Mike shares some interesting insights on their new page performance as a result of making the switch to SVG:&lt;/p&gt;
&lt;blockquote&gt;
	&lt;p&gt;This chart, and one other animation on Sprout, were initially GIFs. By using animated SVGs instead of GIFs we were able to reduce our page size &lt;strong&gt;from 1.6 mb to 389 kb&lt;/strong&gt;, and reduce our page load time &lt;strong&gt;from 8.75 s to 412 ms&lt;/strong&gt;. That’s a huge difference.&lt;/p&gt;
	&lt;cite&gt;—Mike Fortress, &lt;a href=&quot;http://oak.is/thinking/animated-svgs/&quot;&gt;“Animated SVGs: Custom Easing and Timing”&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;p&gt;A huge difference indeed.&lt;/p&gt;
&lt;p&gt;The Sprout chart is a perfect candidate for SVG. There is no reason to animate it by converting the animation into a GIF recording, when SVG can bring so much more benefits.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jakearchibald.com/&quot;&gt;Jake Archibald&lt;/a&gt; realizes the power of SVG animations too, and uses them to create and animate interactive illustrations to complement his articles. His &lt;a href=&quot;https://jakearchibald.com/2014/offline-cookbook/&quot;&gt;Offline Cookbook&lt;/a&gt; article is an excellent example (and an excellent article, by the way). Could he have used GIFs to do that? Of course. But given the number of images he used, the GIFs could have easily increased the overall page size to a couple or few megabytes, with each GIF being at least hundreds of kilobytes in size; whereas &lt;strong&gt;the entire web page currently weighs at 128KB only with &lt;em&gt;all&lt;/em&gt; the SVG images embedded inline&lt;/strong&gt;, because &lt;a href=&quot;https://sarasoueidan.com/blog/structuring-grouping-referencing-in-svg&quot;&gt;you can reuse elements in SVG&lt;/a&gt;, so any repetitive elements will not only cause the entire page to &lt;a href=&quot;http://calendar.perfplanet.com/2014/tips-for-optimising-svg-delivery-for-the-web/&quot;&gt;gzip much, much better&lt;/a&gt;, but for each page, the overall size of the SVGs becomes smaller.&lt;/p&gt;
&lt;p&gt;Now &lt;em&gt;that&lt;/em&gt; is impressive.&lt;/p&gt;
&lt;p&gt;I will rest my case about page load and performance here. But it is still important to note that there &lt;em&gt;can&lt;/em&gt; be exceptions. Again, in most cases, you’re likely going to find that SVG is better than a GIF, but you’ll always need to test anyway.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&quot;cagematch&quot;&gt;
	&lt;tr class=&quot;th&quot;&gt;
		&lt;td&gt;GIF&lt;/td&gt; &lt;td&gt;Animated SVG&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class=&quot;lose&quot;&gt;GIF images are generally bigger in size than SVG images are with animations added to them. This negatively affects the overall page size, load times and performance.&lt;/td&gt;
		&lt;td class=&quot;win&quot;&gt;
			SVG images can be used and reused, as well as gzipped better, making their file sizes generally smaller than those of GIFs, thus improving page load times and performance.
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&quot;browser-support&quot; tabindex=&quot;-1&quot;&gt;Browser Support&lt;/h3&gt;
&lt;p&gt;Probably the only absolute advantage to GIFs over SVGs is browser support. GIFs work pretty much everywhere, while SVG support is less global. Even though we have many &lt;a href=&quot;https://css-tricks.com/a-complete-guide-to-svg-fallbacks/&quot;&gt;ways to provide fallback for non-supporting browsers&lt;/a&gt;—and current browser support should not be hindering anyone from using SVG, the fallback images, if provided as PNG or JPG, are going to be static, animation-less.&lt;/p&gt;
&lt;p&gt;Of course, you can always provide a GIF as a fallback to SVG, but the previously-mentioned considerations and disadvantages should be kept in mind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&quot;cagematch&quot;&gt;
	&lt;tr class=&quot;th&quot;&gt;
		&lt;td&gt;GIF&lt;/td&gt; &lt;td&gt;Animated SVG&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class=&quot;win&quot;&gt;GIF images work pretty much everywhere.&lt;/td&gt;
		&lt;td class=&quot;average&quot;&gt;
			SVG images have less global browser support, but they come with a lot of ways to provide fallback for non-supporting browsers.
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&quot;accessibility-concerns-(%23a11y)&quot; tabindex=&quot;-1&quot;&gt;Accessibility Concerns (#a11y)&lt;/h3&gt;
&lt;p&gt;Move something on a page, or anywhere, for that matter, and you’ve instantly added a distraction—something that is sure to grab a user’s attention as soon as it starts moving. This is simply how the human brain works. This is also one of the reasons ad banners are so focused on—and built with—a strong focus on animation. This is also why animated ad banners are &lt;strong&gt;extremely annoying&lt;/strong&gt;. They are distracting, especially when you’re trying to perform a task on a page that requires your entire attention, such as reading an article.&lt;/p&gt;
&lt;p&gt;Now imagine a page with a set of animated icons (or images) that just won’t stop animating no matter what you do. We’re no longer talking about one or two images on a homepage or within an article here; we’re talking about UI elements and controls, and smaller icons that are likely to be present in multiple places on a page, and on multiple pages. Unless your icon is &lt;em&gt;supposed&lt;/em&gt; to be inifnitely animation—for example, if it is a spinner animating during a user-inactive waiting phase, then it is likely to introduce a problem, and become more of an annoyance, than a “nice thing”.&lt;/p&gt;
&lt;p&gt;As a matter of fact, for some people it can become more of an annoyance, as continuous motion can literally make some people feel ill.&lt;/p&gt;
&lt;p&gt;In her article &lt;a href=&quot;http://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity&quot;&gt;“Designing Safer Web Animation For Motion Sensitivity”&lt;/a&gt;, designer and web animation consultant Val Head discusses the effects of overused animation on the web on people with visually-triggered vestibular disorders (emphasis mine):&lt;/p&gt;
&lt;blockquote&gt;
	&lt;p&gt;It’s no secret that a lot of people consider scrolljacking and parallax effects annoying and overused. But what if motion does more than just annoy you? What if it also makes you ill?&lt;/p&gt;
	&lt;p&gt;That’s a reality that people with visually-triggered vestibular disorders have to deal with. As animated interfaces increasingly become the norm, more people have begun to notice that &lt;strong&gt;large-scale motion on screen can cause them dizziness, nausea, headaches, or worse. For some, the symptoms can last long after the animation is over.&lt;/strong&gt; Yikes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now imagine if the animation does &lt;em&gt;not&lt;/em&gt; end… Double Yikes.&lt;/p&gt;
&lt;p&gt;Val’s article explains the problem in more detail, as she gathers feedback from two people who actually have these problems and share their experience with animation in different examples.&lt;/p&gt;
&lt;p&gt;One of the solutions that can help avoid these problems is to &lt;a href=&quot;http://alistapart.com/article/designing-safer-web-animation-for-motion-sensitivity#section10&quot;&gt;provide the user with the ability to control the animation&lt;/a&gt; so that they can stop it when it gets disturbing.&lt;/p&gt;
&lt;p&gt;With SVG, you can do that. You can fully control the animation and play it once or twice on page load—if you really need to have it play as soon as the user “enters” your page, and then fire it on hover for subsequent tweens, using nothing but a few lines of CSS or JavaScript. &lt;strong&gt;You do not need hundreds or thousands of lines of CSS or JavaScript to create an icon animation&lt;/strong&gt;, unless your icon is a really complex scene with a lot of components that are animated inside of it. But I think that in that case, it does not count as an “icon” anymore, but more of a regular image.&lt;/p&gt;
&lt;p&gt;You can go even as far as control playback, speed for each consequent tween, and much more, assuming, of course, you are using JavaScript to gain this level of control.&lt;/p&gt;
&lt;p&gt;Or you can add a toggle to give the user the ability to stop an infinitely playing animation. You can’t do that with GIFs… unless you opt for replacing the GIF with a static image upon a certain toggle action.&lt;/p&gt;
&lt;p&gt;Some might even argue that you could display a static version of the image—as a PNG for example, and then provide the GIF version on hover. But this comes with a few problems of its own:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If the images are inline, you’ll need to replace these images using JavaScript. That action does not require any JavaScript if you are using SVG.&lt;/li&gt;
	&lt;li&gt;If the images are foreground images (embedded in the HTML using &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;), and you need to replace these images, you will end up with double the amount of HTTP requests for every image. And if they are background images inlined in the style sheet (which is not recommended), the images (especially the GIFs) will add to the size of the style sheet and therefore to the overall render-blocking time of the page.&lt;/li&gt;
	&lt;li&gt;If/when you switch image sources on hover, there is a noticable flash between the first and the second image on slower connections. My connection is slow; sometimes 3G-slow, and I have yet to remember a time when an image was replaced with another one on hover, viewport resize, or whatever, and not have seen that flash. This situation gets even worse when the second image (GIF loaded on hover) is fairly big in size—there will be a flash, followed by a slow, janky animation of the GIF while it loads completely. That’s never attractive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, yes, you can switch image sources to control if or when the GIF animation plays, but you’re losing the finer control over the GIF and affecting the user’s experience with the UI.&lt;/p&gt;
&lt;p&gt;You are also able to control how many times the animation plays in the GIF—which is pretty cool, but that means that the animation will play only &lt;strong&gt;&lt;em&gt;n&lt;/em&gt;&lt;/strong&gt; number of times. And then to re-fire the animation upon a user interaction, you will need to resort to the above technique with multiple images.&lt;/p&gt;
&lt;p&gt;Multiple images to maintain, multiple HTTP requests, and an overall hacky, non-optimal solution to what could have been easily achieved with one SVG image.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Embed the &lt;strong&gt;one&lt;/strong&gt; SVG image on the page.&lt;/li&gt;
	&lt;li&gt;Create the animation any way you want/need. (Or create the animation before you embed the image.)&lt;/li&gt;
	&lt;li&gt;Play, pause, control the animation; and give the user the ability to control it as well.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No extra HTTP requests for every image, no complicated animation timeline maintenance in graphics editors, and no accessibility concerns or woes that cannot be avoided with a few lines of code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&quot;cagematch&quot;&gt;
	&lt;tr class=&quot;th&quot;&gt;
		&lt;td&gt;GIF&lt;/td&gt; &lt;td&gt;Animated SVG&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class=&quot;average&quot;&gt;GIF images cannot be stopped by the user without requiring extra images and extra HTTP requests. Even then, the control is not full.&lt;/td&gt;
		&lt;td class=&quot;win&quot;&gt;
			SVG animations can be fully customized so that they are enabled, disabled and controlled by the user without requiring any hacky approaches.
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h4 id=&quot;content-accessibility&quot; tabindex=&quot;-1&quot;&gt;Content Accessibility&lt;/h4&gt;
&lt;table class=&quot;cagematch&quot;&gt;
	&lt;tr class=&quot;th&quot;&gt;
		&lt;td&gt;GIF&lt;/td&gt; &lt;td&gt;Animated SVG&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class=&quot;average&quot;&gt;GIF images are only as accessible as PNG and JPEG images are—using an appropriate &lt;code&gt;alt&lt;/code&gt; attribue value to describe them.
			&lt;p&gt;The content inside the image cannot be discerned or made directly accessible to screen readers beyond what the overall image description does.&lt;/p&gt;&lt;/td&gt;
		&lt;td class=&quot;win&quot;&gt;
			SVG images are accessible as well as semantic. The content inside the image that is being animated can also be described and made accessible to screen readers using SVG’s built-in accessibility elements, and enhanced using ARIA roles and attributes as well. (You can read all about making SVGs accessible &lt;a href=&quot;http://www.sitepoint.com/tips-accessible-svg/&quot;&gt;here&lt;/a&gt;.)
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&quot;interactivity&quot; tabindex=&quot;-1&quot;&gt;Interactivity&lt;/h3&gt;
&lt;p&gt;There’s not much to add here but the fact that you can interact with individual elements inside an SVG, during, before or after an animation, but that is not possible with a GIF. So, if you use a GIF, you will lose the ability to do anything beyond triggering or stopping the animation, and even those are not really done inside the SVG, as we’ve seen, but are achieved by swapping the GIF out with a static replacement. Even changing the colors of elements inside the GIF would require additional images to do so. That is yet another advantage to using SVG over GIFs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&quot;cagematch&quot;&gt;
	&lt;tr class=&quot;th&quot;&gt;
		&lt;td&gt;GIF&lt;/td&gt; &lt;td&gt;Animated SVG&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class=&quot;lose&quot;&gt;Animations defined in GIF images cannot be interactive. You cannot interact with individual elements inside a GIF element, nor create links out of individual elements either.&lt;/td&gt;
		&lt;td class=&quot;win&quot;&gt;
			SVG content is fully interactive. You can create hover and click interactions (and more) to which individual elements inside the SVG image can respond.
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&quot;responsive-%26-adaptive-animations&quot; tabindex=&quot;-1&quot;&gt;Responsive &amp;amp; Adaptive Animations&lt;/h3&gt;
&lt;p&gt;The ability to animate SVG directly from the code, as well as manipulate its many, many attributes, results in and adds yet another advantage over GIF-based animations: the ability to create responsive, adaptive and performant animations, without adding any extra HTTP requests, using a few lines of code, and with quite smaller file sizes.&lt;/p&gt;
&lt;p&gt;Sarah Drasner wrote &lt;a href=&quot;http://www.smashingmagazine.com/2015/03/different-ways-to-use-svg-sprites-in-animation/&quot;&gt;an article on Smashing Magazine&lt;/a&gt; showing different ways to animate SVG sprites. One of these ways is having multiple “scenes” inside an SVG, animating them with CSS, and then changing the SVG “view”—by changing the value of &lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;the &lt;code&gt;viewBox&lt;/code&gt; attribute&lt;/a&gt;—to show one scene at a time, depending on the current viewport size and available screen estate.&lt;/p&gt;
&lt;p&gt;If you wanted to create the same animation using GIF images, you would lose the animation control capabilities as well as require multiple images which are probably going to be bigger (in file size) than the one SVG image.&lt;/p&gt;
&lt;p&gt;But if you don’t want to go with animating SVG code, you could always create an SVG sprite and animate it the way you would animate any other image format—using &lt;code&gt;steps()&lt;/code&gt; and a few lines of CSS. Sarah also talks about this technique in her article. Animating SVG images does not need to be complicated, and is generally performant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;:&lt;/p&gt;
&lt;table class=&quot;cagematch&quot;&gt;
	&lt;tr class=&quot;th&quot;&gt;
		&lt;td&gt;GIF&lt;/td&gt; &lt;td&gt;Animated SVG&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td class=&quot;average&quot;&gt;Given that content inside a GIF cannot be controlled with code, it is not possible to make the animations adapt or respond to viewport or context changes without resorting to seperate images.&lt;/td&gt;
		&lt;td class=&quot;win&quot;&gt;
			Given that SVG content is directly animatable using code, the content as well as its animations can be modified so that they respond and/or adapt to different viewport sizes and contexts, without having to resort to any additional assets.
		&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&quot;final-words&quot; tabindex=&quot;-1&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;GIFs have pretty good browser support, yes, but the advantages of SVGs outweigh theirs in almost every aspect. There might be exceptions, and in those cases do, by all means, use GIFs or any other image format that does a better job than SVG would. You might even use Video or HTML5 Canvas or whatever.&lt;/p&gt;
&lt;p&gt;SVG can bring a lot of performance benefits to the table when compared to other image formats, especially GIFs.&lt;/p&gt;
&lt;p&gt;Thus, given all of the above, I recommend that anywhere SVG could be used for animation, GIFs should be avoided. You’re free to ignore my recommendation, of course, but you’d be giving up on the many benefits that SVG animations offer.&lt;/p&gt;
&lt;p&gt;Unless GIFs show a lot of advantages over SVGs that go beyond browser support for IE8 and below, then I believe SVGs should be the way to go.&lt;/p&gt;
&lt;p&gt;A few resources to help you get started with SVG animations:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://blogs.adobe.com/dreamweaver/2015/06/the-state-of-svg-animation.html&quot;&gt;The State of SVG Animation&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2015/03/different-ways-to-use-svg-sprites-in-animation/&quot;&gt;A Few Different Ways to Use SVG Sprites in Animation&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2015/09/creating-cel-animations-with-svg/&quot;&gt;Creating Cel Animations with SVG&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://greensock.com/&quot;&gt;GreenSock&lt;/a&gt; has a bunch of very useful articles on animating SVGs&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://snapsvg.io/start/&quot;&gt;Snap.svg&lt;/a&gt;, also known as “The jQuery of SVG”&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://davidwalsh.name/svg-animations-snap&quot;&gt;SVG Animations Using CSS and Snap.SVG&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2014/11/styling-and-animating-svgs-with-css/&quot;&gt;Styling and Animating SVGs with CSS&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://jakearchibald.com/2013/animated-line-drawing-svg/&quot;&gt;Animated Line Drawing in SVG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class=&quot;line&quot; /&gt;
I hope you found this article useful.
&lt;p&gt;Thank you for reading.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;Many thanks to Jake Archibald for reviewing and giving feedback to the article, and to Chris Lilley for his feedback re transparency in GIF images. It wouldn’t have been so comprehensive (read: ridiculously long) without their feedback. ^^&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Tips for Creating and Exporting Better SVGs for the Web</title>
    <link href="https://sarasoueidan.com/blog/svg-tips-for-designers/"/>
    <updated>2015-11-16T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/svg-tips-for-designers/</id>
    <content type="html">&lt;p&gt;Working with SVG in a RWD workflow usually involves a design phase and a development phase. The design phase is usually handled by designers who may or may not know how to code. And because of the nature of SVG as both an image format &lt;em&gt;and&lt;/em&gt; a document format, every step taken in the graphics editor in the process of creating the SVG directly affects the resulting code and hence the work of the developer in charge of embedding, scripting or animating the SVG. In my day-to-day work, I am usually the developer whom designers hand the design assets over to, and SVG images are part of those assets.&lt;/p&gt;
&lt;p&gt;Most of the assets I’ve been handed in my past projects needed a do-over and/or a second round of editing in the graphics editor before I could script them, because the resulting SVG code was not optimized enough for the kind of work—especially animation—that I was hired to do. The reason for that is that many of the designers I’ve worked with knew very little—if anything—about SVG &lt;em&gt;code&lt;/em&gt;. They create vector graphics and UI assets all the time, but, for them, SVG is no more than an image format and they don’t know much about the code generated when their assets are exported as SVG documents.&lt;/p&gt;
&lt;p&gt;There are some steps that designers can take or avoid—a set of “dos and don’ts”—that can help make the generated code cleaner. In this article, I want to share some of these. If you know any more, please do share them in the comments at the end of the article.&lt;/p&gt;
&lt;p&gt;The tips we’re going to go over are applicable in Adobe Illustrator (Ai)—my graphics editor of choice—as well as other graphics editors. But since I personally use Ai, it is what I will be focusing on throughout this article.&lt;/p&gt;
&lt;p&gt;We’re also going to go over the &lt;strong&gt;current&lt;/strong&gt; SVG export options available in Ai and which ones to choose and why. But note that &lt;strong&gt;these options will change in the future&lt;/strong&gt;, and this article will then be updated to reflect those changes.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
	That this article is based on my talk “SVG For Web Designers (and Developers)”—a talk I gave at CSSDevConf 2015 last month.
&lt;/p&gt;
&lt;p&gt;So, let’s start.&lt;/p&gt;
&lt;p class=&quot;note update&quot;&gt;
	If you’re using Sketch to create SVGs, there are some things you can do to export cleaner code as well. Sean Kesterson has shared some tips in &lt;a href=&quot;https://medium.com/sketch-app-sources/exploring-ways-to-export-clean-svg-icons-with-sketch-the-correct-way-752e73ec4694#.gbtebz7ex&quot;&gt;this article&lt;/a&gt;.
&lt;/p&gt;
&lt;h3 id=&quot;1&quot; class=&quot;deeplink&quot;&gt;1. Create Simple Shapes Using Simple Shape Elements, Not &lt;code&gt;&lt;path&gt;&lt;/path&gt;&lt;/code&gt;s.&lt;/h3&gt;
&lt;p&gt;There is a reason we have different basic shapes in SVG for creating, well, basic shapes. One could create practically any shape using a &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; element, right?&lt;/p&gt;
&lt;p&gt;Simple shape elements (&lt;code&gt;&amp;lt;line&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ellipse&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;polygon&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;polyline&amp;gt;&lt;/code&gt;) are there for many reasons, and one of these reasons is that they are more readable and more maintainable and editable by hand than their &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; alternatives.&lt;/p&gt;
&lt;p&gt;Basic shapes come with a set of attributes that allow you to control the shape features, such as position (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;cx&lt;/code&gt;, &lt;code&gt;cy&lt;/code&gt;) and dimensions (&lt;code&gt;width&lt;/code&gt; &amp;amp; &lt;code&gt;height&lt;/code&gt;), while paths don’t come with these attributes.&lt;/p&gt;
&lt;p&gt;For example, the following snippet shows the difference between a circle created and exported as a simple shape, versus one created and exported as a &lt;code&gt;path&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#FFFFFF&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;28.1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;28.1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;27.6&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- versus --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#FFFFFF&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M55.7,28.1&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;         c0,15.2-12.4,27.6-27.6,27.6&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;         S0.5,43.3,0.5,28.1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	     S12.9,0.5,28.1,0.5&lt;/span&gt;&lt;br /&gt;	     S55.7,12.9,55.7,28.1z&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to animate your shape by, say, moving the position of the circle or making it bigger, you can do that by animating the position of the center via the x and y coordinates (&lt;code&gt;cx&lt;/code&gt; &amp;amp; &lt;code&gt;cy&lt;/code&gt;) and the radius of the circle (&lt;code&gt;r&lt;/code&gt;). Whereas if you are working with a circle generated as a path, you will have to resort to CSS/SVG transformations (translation and scaling) to do that. And then suppose you want to animate that path and the animation requires you to apply further transformations to it? It can easily become a transformation mess.&lt;/p&gt;
&lt;p&gt;Another advantage to using simple shapes is that, in the majority of cases, the code required to create a shape using simple shape elements is less than that required to create the same shape using a &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; element (see above snippet for a comparison), so using simple shapes will also result in a smaller file size, which is always better.&lt;/p&gt;
&lt;h3 id=&quot;2&quot; class=&quot;deeplink&quot;&gt; 2. Convert Text to Outlines.. Or Don’t.&lt;/h3&gt;
&lt;p&gt;To convert text to outlines:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Select the text you want to convert.&lt;/li&gt;
	&lt;li&gt;Choose &lt;strong&gt;Type → Create Outlines&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/convert-to-outlines.png&quot; alt=&quot;&quot; /&gt;
&lt;dl&gt;
	&lt;dt&gt;Pros:&lt;/dt&gt;
	&lt;dd&gt;
		&lt;ul&gt;
			&lt;li&gt;Text converted to outlines will preserve the font face used, without having to use a web font to display it. This means you save a few extra HTTP requests and don’t risk displaying your text with a fallback font that generally doesn&#39;t look good enough to substitute the beautiful font of your choice.
				&lt;p&gt;
					Outlining the text and preserving the font face used is good for preserving a brand’s identity when the latter is defined by the font face used, for example: in a logo. I almost always turn logo text to outlines. Outlining is also good for preserving the font face of certain scripts when used for headlines.
				&lt;/p&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/dd&gt;
	&lt;dt&gt;Cons:&lt;/dt&gt;
	&lt;dd&gt;
		&lt;ul&gt;
			&lt;li&gt;Text converted to outlines is not real text: it is a set of paths that form the outline (shape) of the text. Consequently, the text becomes unreal and inaccessible, not searchable and not selectable.
				&lt;p&gt;
					In the case of a script headline or even a logo where the text is outlined, using an &lt;code&gt;alt&lt;/code&gt; text (if the logo is embedded as an image) or SVG’s accessibility elements (&lt;code&gt;&lt;title&gt;&lt;/code&gt; &amp; &lt;code&gt;&amp;&gt;&lt;/code&gt;) is a good idea for providing alternative text for screen readers.
				&lt;/p&gt;
				&lt;p&gt;I highly recommend reading all about making SVGs accessible in these two articles by Léonie Watson:&lt;/p&gt;
				&lt;ul&gt;
					&lt;li&gt;&lt;a href=&quot;http://www.sitepoint.com/tips-accessible-svg/&quot;&gt;Tips for Creating Accessible SVG&lt;/a&gt;&lt;/li&gt;
					&lt;li&gt;&lt;a href=&quot;https://www.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/&quot;&gt;Using ARIA to Enhance SVG Accessibility&lt;/a&gt;&lt;/li&gt;
				&lt;/ul&gt;&lt;/li&gt;
			&lt;li&gt;Converting text to outlines can significantly increase your SVG file size, depending on the complexity of the font face used. The image below shows the difference in the size (and readability) of an SVG with text converted to outlines (left) and text exported as SVG &lt;code&gt;&lt;text&gt;&lt;/code&gt; (right).&lt;/li&gt;
			&lt;figure&gt;
	&lt;img src=&quot;../../assets/images/text-output.jpg&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
			&lt;li&gt;Paths are not easily controlled and animated as &lt;code&gt;&lt;text&gt;&lt;/code&gt; elements (including &lt;code&gt;&lt;tspan&gt;&lt;/code&gt;s) are. The latter have a set of attributes that give you more control over your animations, while path data is limited in that sense.&lt;/li&gt;
		&lt;/ul&gt;
	&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&quot;3&quot; class=&quot;deeplink&quot;&gt; 3. Simplify Paths.&lt;/h3&gt;
&lt;p&gt;A path is defined by a set of points which in turn are defined by a couple of coordinates each.&lt;/p&gt;
&lt;p&gt;The less the number of points, the less the path data (&lt;code&gt;d&lt;/code&gt; attribute), and, consequently, the less the overall SVG file size. This is always a good step to take because a smaller file size is better for performance.&lt;/p&gt;
&lt;p&gt;To simplify a path:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Select the path&lt;/li&gt;
	&lt;li&gt;Go to &lt;strong&gt;Object → Path → Simplify&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;Tweak the number of points. Make sure you have the &lt;strong&gt;Preview&lt;/strong&gt; checked so can see how the path changes as you change the number of points. Tweak the number to get to the minimum number of points while preserving (or sacrificing) as much of the path’s visual appearance as you need.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;../../assets/images/simplify-paths.png&quot; alt=&quot;&quot;&gt;
&lt;img src=&quot;../../assets/images/path-points.png&quot; alt=&quot;&quot;&gt;
&lt;p&gt;There is a video tutorial created by Adobe to explain the process; so if you are more into videos, you can check it out &lt;a href=&quot;http://tv.adobe.com/watch/companion-videos-for-inspire/svg-for-the-web-using-the-simplify-panel-in-illustrator-cc/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can also simplify paths using the &lt;strong&gt;Warp Tool&lt;/strong&gt;. I’m not a designer and I usually use Ai’s Simplify algorithm to simplify my paths, so, if you’re a seasoned designer, you probably already know much more about the Warp tool than I do. There is &lt;a href=&quot;http://www.smashingmagazine.com/2011/07/examples-and-tips-for-using-illustrator-s-warp-tools/&quot;&gt;an article over at Smashing Magazine&lt;/a&gt; all about this tool, in case you want to check it out.&lt;/p&gt;
&lt;h3 id=&quot;4&quot; class=&quot;deeplink&quot;&gt; 4. Avoid Merging Paths Unless You Don’t Need Control Over Individual Paths.&lt;/h3&gt;
&lt;p&gt;Many designers tend to combine or merge paths whenever possible. To merge paths:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Select the paths you want to merge.&lt;/li&gt;
	&lt;li&gt;Go to &lt;strong&gt;Window → Pathfinder&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;Click the &lt;strong&gt;Merge&lt;/strong&gt; option among the list of options at the bottom of the panel (third icon from the left, shown in the screenshot below).&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
	&lt;img src=&quot;../../assets/images/merge-paths.png&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Combining paths may have its benefits, but avoid it when you or the developer needs to control and/or animate paths separately. Some animations are designed so that multiple elements are animated seperately, or sometimes you just want to style the paths using different fill colors. If you combine the paths, that will no longer be possible.&lt;/p&gt;
&lt;p&gt;You need to make sure you know what the developer (or yourself, if you’ll be handling the development phase as well) needs and wants to do with the shapes you’re working on, and make the decision to merge or not to merge accordingly. This will save both of you a lot of time and friction.&lt;/p&gt;
&lt;h3 id=&quot;5&quot; class=&quot;deeplink&quot;&gt; 5. Create Filters Using &lt;em&gt;SVG Filters&lt;/em&gt;, Not &lt;em&gt;Photoshop Effects&lt;/em&gt;.&lt;/h3&gt;
&lt;p&gt;If you use the filters in the &lt;strong&gt;Photoshop Effects&lt;/strong&gt; section under the &lt;strong&gt;Effect&lt;/strong&gt; option, Illustrator is going to export the effects you create as raster images. For example, if you create a drop shadow using the &lt;strong&gt;Blur&lt;/strong&gt; Photoshop effect, the drop shadow generated will be a raster image embedded inside the SVG either inline or externally, using &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;. You definitely don’t want that when you work with SVG.&lt;/p&gt;
&lt;p&gt;To generate your effects as SVG code, you need to use the SVG Filters available:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Go to &lt;strong&gt;Effect → SVG Filters&lt;/strong&gt;&lt;/li&gt;
	&lt;li&gt;Choose and use one of the filters available in that panel.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;../../assets/images/svg-filters-in-ai.png&quot; alt=&quot;&quot;&gt;
&lt;h3 id=&quot;6&quot; class=&quot;deeplink&quot;&gt; 6. Fit Artboard to Drawing.&lt;/h3&gt;
&lt;p&gt;Have you ever embedded an SVG on a page, gave it a specific height and width and then found that it was being displayed at a size smaller than what you specified?&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;most&lt;/em&gt; cases, this is caused by an amount of white space &lt;em&gt;inside&lt;/em&gt; &lt;a href=&quot;/blog/svg-coordinate-systems&quot;&gt;the SVG viewport&lt;/a&gt;. The viewport is displayed at the size you are specifying in your style sheet, but the extra space inside of it—around the graphic—causes your image to “shrink”, because that white space is taking an amount of, well, space, inside the viewport.&lt;/p&gt;
&lt;p&gt;To avoid this, you need to make sure your artboard is &lt;em&gt;just big enough&lt;/em&gt; to fit the drawing inside of it, but not any bigger.&lt;/p&gt;
&lt;p&gt;The artboard dimensions are the dimensions of the exported SVG viewport, and any white space in the artboard will be generated as white space inside the viewport.&lt;/p&gt;
&lt;p&gt;To fit your artboard to your drawing:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Select the entire graphic. (I use &lt;strong&gt;cmd/ctrl + A&lt;/strong&gt;.)&lt;/li&gt;
	&lt;li&gt;Go to &lt;strong&gt;Object → Artboards&lt;/strong&gt; and choose the &lt;strong&gt;Fit to Artwork Bounds&lt;/strong&gt; option.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;../../assets/images/fit-artboard.png&quot; alt=&quot;&quot;&gt;
&lt;h3 id=&quot;7&quot; class=&quot;deeplink&quot;&gt; 7. Use Good Naming, Grouping and Layering Conventions.&lt;/h3&gt;
&lt;p&gt;I know this sounds like a no-brainer, but it needs to be emphasized for a few reasons:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;The IDs and class names you use in the graphics editor are going to be translated to IDs and class names in the generated code.&lt;/strong&gt; The more these names make sense and the clearer they label their respective elements, the less friction there will be when the developer works with the code.
	&lt;p&gt;Now, I&#39;m not saying you have to think up the perfect names—I&#39;m sure we all have different ways of naming things and naming can be one of the hardest tasks, but labelling groups appropriately goes a long way. For example, if you are drawing a car, then using an ID of &lt;code&gt;wheel&lt;/code&gt; to name the layer or group wrapping the shapes making up the wheel would be appropriate. If you are grouping all wheels in one group, you might give it an ID &lt;code&gt;wheels&lt;/code&gt;. Simple names to tell elements and groups apart go a long way and save a lot of time, especially if the developer will be editing and manipulating the code by hand.&lt;/p&gt;
		&lt;p&gt;Illustrator does not do the best job at naming things, so specifying names helps reduce the amount of junk it produces. Granted, there will be some extra editing required to get rid of the annoying underscores that Ai insists on generating, but using proper names helps make this process a bit easier.&lt;/p&gt;
		&lt;p class=&quot;note&quot;&gt;As mentioned before, the next verison of Illustrator will show a big improvement in the way SVGs are generated, including generated IDs.&lt;/p&gt;&lt;/li&gt;
&lt;p&gt;&lt;li&gt;&lt;strong&gt;Use layers to group related elements.&lt;/strong&gt; Layers are translated into groups in code, so name these well too. Create layers/groups to wrap related elements together, especially those that might be animated as a whole. A lot of time could be spent reordering and grouping elements by hand by the developer if this is not already done in the design phase. To save time, make sure you group appropriately. Talking to the developer in the design phase and designing how the animation will be executed together is a big time saver.&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;&lt;li&gt;If the images you’re creating are going to be used to create an SVG sprite, &lt;strong&gt;the names you use can and will be used by most automation tools to generate new files.&lt;/strong&gt; So using clear and proper names will result in cleaner file names.
&lt;/li&gt;&lt;/p&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;8&quot; class=&quot;deeplink&quot;&gt; 8. Choose The Best Suitable Export Options for the Web.&lt;/h3&gt;
&lt;p class=&quot;note update&quot;&gt;
	Starting with Illustrator CC 2015.2 released in November 2015, a new SVG Export workflow (File &gt; Export &gt; SVG) is available to export web-optimized SVG files for your web and screen design workflows. You can also choose to export individual objects versus the entire artboard. Refer to &lt;a href=&quot;https://helpx.adobe.com/illustrator/how-to/export-svg.html&quot;&gt;this article&lt;/a&gt; for details.
&lt;/p&gt;
&lt;p&gt;At the time of writing of this article, Illustrator comes with a bunch of export options that allow you to generate a generally better SVG code.&lt;/p&gt;
&lt;p&gt;To export your SVG:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Choose &lt;strong&gt;File → Save As&lt;/strong&gt;
		&lt;img src=&quot;../../assets/images/file-save.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
	&lt;li&gt;Choose &lt;strong&gt;SVG&lt;/strong&gt; from the dropdown menu
		&lt;img src=&quot;../../assets/images/save-as.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
	&lt;li&gt;Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you click save, a dialog will show up that contains a set of options that you can customize, and that will affect the generated SVG code:&lt;/p&gt;
&lt;img src=&quot;../../assets/images/export-options.png&quot; alt=&quot;&quot;&gt;
&lt;p&gt;The options shown in the image above are the ones recommended for generating SVG for the web.&lt;/p&gt;
&lt;p&gt;Of course, you can choose to Outline text if you don’t want to use a web font; Illustrator provides you with an option to do it upon export, as you can see, as well.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Image Location&lt;/strong&gt; option specifies whether any raster images will be embedded inline in your SVG or will be external with a link inside the SVG. This, again, depends on what you need. Inlining images inside the SVG can increase its file size dramatically. Last time a designer sent me an SVG with an image inlined in it, the file size was more than 1MB! After removing that image (which was caused by the Photoshop Effects used, that we mentioned earlier), the file size dropped to less than 100KB! So, choose wisely.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;CSS Properties&lt;/strong&gt; option gives you the option to choose how you want the styles inside the SVG to be created: using presentation attributes, inline styles, or in a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag. This is also a matter of preference and depends on how you intend to manipulate the SVG once you’ve embedded it. If you’re not the one who’s going to do that, make sure you consult with the developer to choose the option that suits their needs best.&lt;/p&gt;
&lt;p&gt;The less the number of &lt;strong&gt;Decimal Places&lt;/strong&gt;, the less the file size of the SVG. One decimal place should generally be enough, so I’d go with that.&lt;/p&gt;
&lt;p&gt;Note that if you choose 3 or 4 decimal places, for example, and then use an optimization tool to optimize the SVG and bring that number down back to 1, the SVG might end up visually broken; so it is best to choose this option early on.&lt;/p&gt;
&lt;p&gt;There is more to the options panel than what I have covered. Adobe’s Michaël Chaize has written an excellent article about the export panel that explains what each option does exactly. I highly recommend checking his article out:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://creativedroplets.com/export-svg-for-the-web-with-illustrator-cc/&quot;&gt;Export SVG for the web with Illustrator CC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, at the time of writing of this article, Illustrator will still generate unnecessary code such as editor metadata, empty groups, among others, so you will need to optimize the SVG further after you’ve exported it, be it by hand, or using a standalone SVG optimization tool.&lt;/p&gt;
&lt;p&gt;But before we jump into the Optimization section, I want to note that you may or may not want to check an extra option as you save the SVG: the “&lt;strong&gt;Use Artboards&lt;/strong&gt;” option, in the Save panel:&lt;/p&gt;
&lt;img src=&quot;../../assets/images/use-artboards.png&quot; alt=&quot;&quot;&gt;
&lt;p&gt;This option is useful for when you are working with multiple SVG images (for example: icons) and you are using an artboard for every icon.&lt;/p&gt;
&lt;p&gt;Exporting multiple artboards will generate multiple &lt;code&gt;.svg&lt;/code&gt; files, one for each artboard (one for each icon).&lt;/p&gt;
&lt;p&gt;If you are working with only one artboard, this option will be disabled by default.&lt;/p&gt;
&lt;p&gt;Choosing to export one or multiple SVG files depends on how the SVG is going to be embedded.&lt;/p&gt;
&lt;p&gt;For example, if you are going to create an SVG sprite for an SVG icon system, there are several ways you can create and use the sprite, and each one would require a different approach: one technique requires the icons to be separate at first, and another requires them to be part of one image.&lt;/p&gt;
&lt;p&gt;I will be writing a separate post about spriting SVGs and the artboard options, but until then, you can get an overview of the different spriting techniques in the following article I wrote for &lt;a href=&quot;http://24Ways.org&quot;&gt;24Ways.org&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://24ways.org/2014/an-overview-of-svg-sprite-creation-techniques/&quot;&gt;An Overview of SVG Sprite Creation Techniques&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;optimize&quot; class=&quot;deeplink&quot;&gt; To Optimize or Not to Optimize...&lt;/h4&gt;
&lt;p&gt;It is usually recommended to optimize the SVG after exporting it from a graphics editor using a standalone optimization tool. The current most popular optimization tool is the NodeJS-based tool called SVGO. But it may not always be a good idea to optimize your SVG, especially if you intend to animate it.&lt;/p&gt;
&lt;p&gt;If you intend to script and/or animate the SVG, you’re likely to set up a certain document structure—wrapper groups, ID names that you are not using/referencing inside the SVG but intend to use in your JavaScript, etc. This structure is going to change if you optimize your SVG using SVGO (or any other optimization tool).&lt;/p&gt;
&lt;p&gt;Optimization tools usually remove any unused groupd and IDs, as well as apply many changes to the SVG to make sure it is optimized well.&lt;/p&gt;
&lt;p&gt;I’ve once optimized an SVG after applying an animation to it using &lt;code&gt;&amp;lt;animate&amp;gt;&lt;/code&gt;. The SVG was broken and so was the animation inside of it, because the entire structure was changed. So that is something to keep in mind before optimizing SVGs.&lt;/p&gt;
&lt;p&gt;If you’ve manually edited and/or generated an SVG with a certain structure that you need, avoid optimizing using an optimization tool, and optimize by hand as much as possible. Some editor junk at the beginning and end of the SVG can be easily removed by hand. Other junk, such as metadata and classes generated by editors like Sketch—which has no SVG optmization options, can be harder to optimize by hand.&lt;/p&gt;
&lt;p&gt;I generally never use Sketch to generate complex SVGs. I use Illustrator or Inkscape; the latter comes with a default export panel which gives you a lot of options to optimize your SVG before exporting it (see image below). Inkscape generates the cleanest SVG code at the time of writing of this article—that is, if you choose the &lt;strong&gt;Optimized SVG&lt;/strong&gt; option, but the blurriness of the UI on a retina screen as well as its dependency on X11 on OS X make it a pain to use, so I am currently sticking with Illustrator.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;../../assets/images/inkscape-export.png&quot; alt=&quot;&quot;&gt;
	&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you do need/want to optimize your SVG, SVGO is the tool I would recommend.&lt;/p&gt;
&lt;p&gt;SVGO comes with a bunch of plugins that you can fit into practically any kind of workflow. You can find more information about those tools in the following article I wrote a few months ago:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;/blog/svgo-tools&quot;&gt;Useful SVGO[ptimization] Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9&quot; class=&quot;deeplink&quot;&gt; 9. Communicate. Communicate early.&lt;/h3&gt;
&lt;p&gt;Possibly the most important tip I can give is to communicate, and to do it early in the design process.&lt;/p&gt;
&lt;p&gt;I’m now assuming that you—the designer creating the SVG—are not the same person responsible for developing the SVG (scripting, animating, embedding, etc.).&lt;/p&gt;
&lt;p&gt;Almost every one of the above tips requires knowledge of the development phase and what the developer intends to do with the SVG—how they intend to embed, script, style and animate it. So, unless you’re the same person making decisions for both phases, and unless you want to waste a lot of time reiterating and editing the SVGs, you need to make sure you know what the developer needs to do with the SVG and what approach(es) they will be taking. If you’re working on a project that has a tight deadline, you probably can’t afford to waste a big amount of time making changes and revisions to image assets, when you can avoid that by communicating early.&lt;/p&gt;
&lt;p&gt;Designers and developers can be each other’s best friends. The very nature of SVG requires both design and development phases to be open to one another, and this, in turn, requires the designer(s) and developer(s) to talk, &lt;em&gt;before&lt;/em&gt; the design process begins, and throughout the process as well.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
&lt;/title&gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/dd&gt;&lt;/dl&gt;</content>
  </entry>
  
  <entry>
    <title>Developer of the Year 2015 net Award</title>
    <link href="https://sarasoueidan.com/blog/developer-of-the-year-2-15-net-award/"/>
    <updated>2015-09-22T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/developer-of-the-year-2-15-net-award/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	Last Friday, I gave my first keynote in the UK at Generate Conf. That same day, the &lt;a href=&quot;http://thenetawards.com/&quot;&gt;&lt;em&gt;net&lt;/em&gt; awards&lt;/a&gt; were announced. On Saturday, I came back home with an award: the &lt;strong&gt;Developer of the Year&lt;/strong&gt; award. This is a short thank you post to everyone involved.
&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/netaward-me.png&quot; alt=&quot;Developer of the Year net award&quot; /&gt;
	&lt;figcaption&gt;
		Photo by &lt;em&gt;net&lt;/em&gt; magazine. All rights reserved. (&lt;a href=&quot;https://www.flickr.com/photos/netmag/21647815869/in/faves-136619150@N04/&quot;&gt;Original Photo&lt;/a&gt;)
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A few months ago, many fellow designers and developers nominated me for two &lt;em&gt;net&lt;/em&gt; awards: Outstanding Contribution and Developer of the Year.&lt;/p&gt;
&lt;p&gt;Last Friday, the winners of the different categories were announced, and I’m thrilled to have won the Developer of the Year award.&lt;/p&gt;
&lt;p&gt;I can’t even begin to explain how happy and humbled that makes me. To be recognized and appreciated by your fellow colleagues is a great privilege, and a badge I wear with pride.&lt;/p&gt;
&lt;p&gt;I haven’t gotten a chance to say thanks to &lt;a href=&quot;https://storify.com/SaraSoueidan/netawards-2015-developer-of-the-year&quot;&gt;each and every one who congratulated me over Twitter&lt;/a&gt; after the award announcements—the feedback was so overwhelming (and fast!) that I just couldn’t keep up, so I thought I’d wait till I’m back home to write a thank you post instead.&lt;/p&gt;
&lt;p&gt;So: &lt;strong&gt;thank you&lt;/strong&gt;! Thank you to every one who nominated me and deemed me worthy of this title, and thank you to every one who voted and supported me. Two and a half years ago, when I started working in this field, I didn’t expect to be here today. I had different plans, most of which were unclear, and I never thought when I wrote &lt;a href=&quot;http://sarasoueidan.com/blog/windows8-animations&quot;&gt;my first blog post&lt;/a&gt; (on a really ugly blog design :P) that I’d end up shifting my overall path and doing all the writing and speaking that I am doing today. I am thankful to God and grateful for each and every step and opportunity I got along the way, and for all your wonderful support.&lt;/p&gt;
&lt;p&gt;And now, since I’m really bad at coming up with proper ‘speeches’, I’ll keep it short and end with a huge Thank You one more time. You are awesome! ^_^&lt;/p&gt;
&lt;p&gt;–S&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CSS vs. SVG: The Final Round(up)</title>
    <link href="https://sarasoueidan.com/blog/css-vs-svg-the-final-roundup/"/>
    <updated>2015-09-16T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-vs-svg-the-final-roundup/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	This is the last article in the series of article comparing common CSS techniques to their SVG counterparts. This article is a roundup of several CSS and SVG solutions, as opposed to being an article comparing one solution that can be achieved using either CSS and SVG. There are already a bunch of excellent articles out there that cover the details for each of these solutions, so we will get an overview of each solution and link to those articles for each section as we go. I highly recommend you check them all out.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CSS vs. SVG: Shapes and Arbitrarily-Shaped UI Components</title>
    <link href="https://sarasoueidan.com/blog/css-vs-svg-arbitrarily-shaped-ui-components/"/>
    <updated>2015-09-01T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-vs-svg-arbitrarily-shaped-ui-components/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	This post is the third in the series of posts exploring techniques and examples that can be achieved using both CSS and SVG, and compares them both.In this article, we are going to go over techniques for creating arbitrarily-shaped UI components using CSS properties and SVG’s capabilities, and a mix of both! Specifically, we will be talking about how to create circular menus, as these are the perfect example of usable non-rectangular UI elements.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CSS vs SVG: Styling Checkboxes and Radio Buttons</title>
    <link href="https://sarasoueidan.com/blog/css-vs-svg-styling-checkboxes-and-radio-buttons/"/>
    <updated>2015-08-26T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-vs-svg-styling-checkboxes-and-radio-buttons/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	This post is the second in the series of posts exploring techniques and examples that can be achieved using both CSS and SVG, and compares them both. 
	In this article, we’re going to look into ways to style checkboxes and radio buttons using both CSS and SVG. You will learn how you can create animated checkboxes using SVG&#39;s line drawing capabilities. 
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Building A Circular Navigation with CSS Clip Paths</title>
    <link href="https://sarasoueidan.com/blog/building-a-circular-navigation-with-css-clip-paths/"/>
    <updated>2015-08-17T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/building-a-circular-navigation-with-css-clip-paths/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	The CSS &lt;code&gt;clip-path&lt;/code&gt; property is one of the most underused and yet most interesting properties in CSS. It can be used in conjunction with CSS Shapes to create interesting layouts, and can be taken to the extreme to create some incredibly impressive layouts and animations like the Species in Pieces project. While exploring the creation of arbitrarily-shaped UI components using CSS and SVG, it occurred to me that the clip-path property, when combined with SVG paths, can be used to create circular menus fairly easily, especially considering the (expected) browser behaviour when handling pointer events on clipped regions as per the specification. In this article, we&#39;ll explore this idea further and learn how it&#39;s done.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CSS vs. SVG: Graphical Text Effects</title>
    <link href="https://sarasoueidan.com/blog/css-vs-svg-graphical-text/"/>
    <updated>2015-07-31T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-vs-svg-graphical-text/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	This post is the first in a series of posts exploring techniques and examples that can be achieved using both CSS and SVG, and compares them both. Since I am biased to SVG, this series is really intended to prove that SVG — because of its nature as both an image and a document format — is simply better than CSS when it comes to solving certain design problems on the web. But to keep an objective point of view, we will be weighing the pros and cons of each technique and find out where and when CSS or SVG can serve as a better tool to the design goals at hand.
	In this article, we’re going to look into the CSS &lt;code&gt;background-clip&lt;/code&gt; and &lt;code&gt;mask-image&lt;/code&gt; properties, as well as SVG pattern fills and masks.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Chapter 4, Smashing Book 5</title>
    <link href="https://sarasoueidan.com/blog/smashing-book-5/"/>
    <updated>2015-07-21T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/smashing-book-5/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
The new Smashing Book is out! It’s packed with a &lt;em&gt;lot&lt;/em&gt; of time-saving, practical techniques for crafting fast, maintainable and scalable responsive websites. I wrote a chapter in the book—&lt;strong&gt;Chapter 4: Mastering SVG For Responsive Web Design&lt;/strong&gt;. Here is an overview of what that chapter covers, and why I think you should buy the book.
&lt;/p&gt;
&lt;figure style=&quot;position: static; width: 100%;&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/smashing-book-5-1.jpg&quot; alt=&quot;Image of the Smashing Book 5.&quot; /&gt;
	&lt;figcaption&gt;Photo credit: &lt;a href=&quot;https://twitter.com/MatCompagnucci/status/622441177795723264/photo/1&quot;&gt;Mattia Compagnucci&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I always get questions from my followers about a good place to start learning SVG. I &lt;a href=&quot;https://sarasoueidan.com/tags/svg/index.html&quot;&gt;write about SVG a lot&lt;/a&gt;, but I realize that it’s always better to have one place where you can jump start whatever you’re learning and then take it from there. I believe the SVG chapter in the book is a great place to do just that.&lt;/p&gt;
&lt;p&gt;Chapter four of the Smashing Book 5 is &lt;strong&gt;80 pages&lt;/strong&gt; of SVG, covering everything you need to know to start implementing SVG in your responsive web designs today.&lt;/p&gt;
&lt;br /&gt;
&lt;blockquote class=&quot;testimonial testimonial--right grey&quot;&gt;
	There is a chapter on SVG for RWD by Sara Soueidan that kind of made me feel stupid, not because of how it was written, that was great, but because it introduced me to so many new things about SVG. What the heck have I been learning all of these years?
	&lt;cite&gt;—&lt;a href=&quot;https://www.makerscabin.com/mag/smashing-book-5-a-review/&quot;&gt;Paul Scrivens, “Smashing Book #5, A Review”&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;chapter-contents&quot;&gt;So, What Can You Expect To Learn About?&lt;/h3&gt;
&lt;figure style=&quot;position: static; width: 100%;&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/smashing-book-5-2.jpg&quot; alt=&quot;Image of the Smashing Book 5, chapter 4.&quot; /&gt;
	&lt;figcaption&gt;Photo credit (and thanks to): &lt;a href=&quot;https://twitter.com/MatCompagnucci&quot;&gt;Mattia Compagnucci&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The answer to this question in my head is always a list of what is &lt;em&gt;not&lt;/em&gt; covered in the chapter, because the topics covered include so much! Here is an overview of the contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is SVG?&lt;/strong&gt;: a brief overview of the image format and its history.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vector vs. Raster&lt;/strong&gt;: a comparison between vector and raster image formats such as JPEG, PNG, etc., characteristics of each, and what makes the SVG format stand out.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Advantages of SVG&lt;/strong&gt;: the many, many features that makes SVG a better image format for responsive web design, including but not exclusive to: scalability and resolution-independence, performance, accessibility, animation, and more.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vector vs Raster: Which is the Better Format?&lt;/strong&gt;: a set of guideliness and things to consider when choosing the image format for your graphic, including why and when SVG might or might not be a good choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quick Overview of SVG Syntax and Code&lt;/strong&gt; including…
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Understanding the SVG Viewport and viewBox&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Creating and Exporting SVGs in Vector Authoring Tools&lt;/strong&gt;: tips, dos and don’ts for the right workflow when designing SVG images that ensure the resulting code is as optimal as possible. This section includes:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Exporting SVG for the Web From Adobe Illustrator&lt;/strong&gt;: overview of the export options and which ones to pick to make sure you end up with better code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optimizing SVGs Using Standalone Optimization Tools&lt;/strong&gt;: there are a lot of tools, each can fit into a different workflow. We go over a list of some of the best tools.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Embedding SVGs&lt;/strong&gt;: the different ways to embed SVGs on a page, and the pros and cons of each, tips on improving performance when choosing some of them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using SVGs as an Icon Font Replacement
(or, How to Create SVG Sprites and Use Them as an Icon System)&lt;/strong&gt;: what the tite says. Sections covered in this master section include:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SVGs vs Icon Fonts&lt;/strong&gt;: SVGs are a far more superior icon system, and this section covers all the reasons why, as in intriduction to…&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spriting SVGs&lt;/strong&gt;: introduction to the concept, followed up:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SVG icon system with icons as background images&lt;/strong&gt;: the how-to of creating an SVG sprite for icons used as background images on the page, including tools to simplify the process.
&lt;ul&gt;
&lt;li&gt;Covered is also a section about SVG data URIs, including any performance considerations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SVG Icon System with Icons as Foreground Images&lt;/strong&gt;: how-to and workflow automation tools.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Styling the icons and applying transitions to them&lt;/strong&gt;: including styling the contents of &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Providing and Automating Fallback for HTML-Inline SVGs&lt;/strong&gt;: some known and some lesser known techniques for:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SVG fallback as foreground images&lt;/strong&gt;: how to provide fallback for SVG images that are embedded as foreground images. There are several options, all covered.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SVG fallback as background images&lt;/strong&gt;: also a few options to choose from leveraging different CSS technqiues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SVG Fallback Using SVG Conditional Processing (SVG Fallback as Background Image)&lt;/strong&gt;: SVG’s built-in fallback mechanism.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other Fallback Techniques&lt;/strong&gt; for different embedding techniques.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better SVG Spriting Using Native Fragment Identifiers&lt;/strong&gt;: this is my personally-favourite SVG spriting tchnique and one of the lesser used ones, and the one closest to the way PNG image spriting works.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Making SVG’s Cross-Browser Responsive with CSS&lt;/strong&gt; including:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Making SVGs Fluid with CSS&lt;/strong&gt;: everything including browser bugs and workarounds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Making SVGs Adaptive with CSS&lt;/strong&gt; using CSS Media Queries to show and hide (or even animate) parts of the SVG depending on viewport size.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Making SVGs Accessible&lt;/strong&gt;: the least you can do to provide even the most basic accessibility to your SVG images today.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using SVGS to Optimize the Delivery of Other Image Formats&lt;/strong&gt;: use cases that go beyond simply displaying or animating vector images. It includes:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Using SVG Masks to Optimize Raster Graphics&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using SVG As a Container for Serving Responsive Images&lt;/strong&gt; a.k.a the Clown Car Technique.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Where To Go From Here&lt;/strong&gt;: pointers to more ideas and resources to look into.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see the chapter covers &lt;em&gt;a lot&lt;/em&gt;. The topics it does not cover (otherwise it would have turned into a book) are: graphical effects (such as filters) and animation. I’m pretty sure there is even more about SVG to get into that the chapter does not cover, but hey, it’s only a chapter of a book!&lt;/p&gt;
&lt;br /&gt;
&lt;blockquote class=&quot;testimonial testimonial--right grey&quot;&gt;
	Reading the new Smashing book, which is timely as I&#39;m spritifying some SVGs, and it&#39;s easier than flying @SaraSoueidan over to do it for me.
	&lt;cite&gt;—&lt;a href=&quot;https://twitter.com/brucel/status/623169965189918720&quot;&gt;Bruce Lawson&lt;/a&gt;&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;the-reviewers&quot;&gt;The Reviewers&lt;/h3&gt;
&lt;p&gt;The chapter was reviewed by &lt;a href=&quot;http://twitter.com/DmitryBaranovsk&quot;&gt;Dmitry Baranovskiy&lt;/a&gt; (creator of the &lt;a href=&quot;http://raphaeljs.com/&quot;&gt;Raphael&lt;/a&gt; library and its modern &lt;a href=&quot;http://snapsvg.io/&quot;&gt;Snap.svg&lt;/a&gt; alternative) and &lt;a href=&quot;http://twitter.com/jaffathecake&quot;&gt;Jake Archibald&lt;/a&gt; (Google), both experienced SVG developers.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;designers-complete-reference&quot;&gt;A Designer’s Complete Reference&lt;/h3&gt; 
&lt;p&gt;The chapters of the book are complimentary to each other, so the entire book is a collection of topics that go extremely well together, giving you a set of diverse topics that are sure to come in handy for any responsive design project you work on.&lt;/p&gt;
&lt;p&gt;While writing the SVG chapter, I mentioned the problems that non-vector images might bring up, and how the new &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element emerged as the almost-perfect solution for that problem. (SVG still has its benefits over these formats, of course, but raster images still have their place and importance where SVGs just can’t fill in.) And since my chapter was focused on SVG, I couldn’t get into the details of how to serve responsive raster images. Yoav Weiss’ chapter fills in that spot and covers everything you need to know about using responsive images. Not only that, but Yoav’s chapter also includes tips that you can apply to SVG images as well, making these two chapters the ultimate reference for images used in responsive design.&lt;/p&gt;
&lt;p&gt;You can’t expect an SVG chapter to not mention SVG fonts, too. But then again, since that topic is outside the scope of what could be covered in the chapter, Bram Stein’s chapter on web font performance fills in that spot in his chapter that covers everything you need to know about web font formats, performance, fallback, and more.&lt;/p&gt;
&lt;p&gt;The book was written by some of the brightest people in our industry, all experts in their fields, smarter than me, and known for their expertise in specific topics—all of which they covered in lengthy, very informative articles. You will find topics ranging from design workflows, patterns, to content choreography, images, advanced layout with Flexbox, responsive process, performance optimization, all the way to optimizing for offline experiences.&lt;/p&gt;
&lt;p&gt;I hope you find the chapter on SVG useful, and I’m confident you will find the remaining chapters insightful as well. I promise you will not regret it.&lt;/p&gt;
&lt;p&gt;So, what are you waiting for? &lt;a href=&quot;http://www.smashingmagazine.com/2015/03/31/real-life-responsive-web-design-smashing-book-5/&quot;&gt;Go grab your copy&lt;/a&gt; and feel free to &lt;a href=&quot;http://twitter.com/SaraSoueidan&quot;&gt;tweet at us&lt;/a&gt; with any feedback or comments (or even pretty pictures)!&lt;/p&gt;
&lt;div class=&quot;button-wrapper&quot;&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2015/03/31/real-life-responsive-web-design-smashing-book-5/&quot; class=&quot;button ghost&quot;&gt;Buy the Book&lt;/a&gt;&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title>Styling the Contents of SVG&lt;use&gt; with CSS</title>
    <link href="https://sarasoueidan.com/blog/styling-svg-use-with-css/"/>
    <updated>2015-07-16T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/styling-svg-use-with-css/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	An in-depth article on how to style the contents of the SVG &amp;lt;use&amp;gt; element and overcome some challenges it brings. We get into where the contents are cloned (the shadow DOM!), what limitations that brings up and how to work around them by taking advantage of the CSS cascade and using CSS Variables to get full control over the content while providing fallback for non-supporting browsers.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Art-Directing an SVG Embedded Using &lt;object&gt;</title>
    <link href="https://sarasoueidan.com/blog/art-directing-svg-object/"/>
    <updated>2015-07-08T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/art-directing-svg-object/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;I have recently finished a front-end development project for &lt;em&gt;Provata Health&lt;/em&gt; — a US-based health and wellness company specializing in health promotion and behavior change science. As part of their &lt;a href=&quot;http://provatahealth.com/&quot;&gt;marketing website&lt;/a&gt;, I worked on an infographic that showcases the three major health results one can achieve by following their health program. The graphic is a perfect candidate for SVG and you’ll see why throughout this article. But even though almost all of the graphics on the site were vector (which made the entire project exciting to me), I want to focus on this particular graphic and how and why I made the development choices I made while embedding it.&lt;/p&gt;
&lt;p&gt;I had to make a few “unusual” decisions to make sure I provide the best performance and accessibility possible, including inlining a piece of JavaScript in the middle of the page. So I wanted to share why I made those decisions, and at the same time shed the light on yet another case where SVG could be improved to adapt to our development needs.&lt;/p&gt;
&lt;p&gt;Also, after &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/611163768811323392&quot;&gt;tweeting&lt;/a&gt; about inlining the JavaScript in the middle of the document, I asked my go-to performance specialist—the nice Mr. &lt;a href=&quot;http://twitter.com/aerotwist&quot;&gt;Paul Lewis&lt;/a&gt;—about any performance implications, he too thought I should write about this and share why I made that decision. So here I am.&lt;/p&gt;
&lt;p&gt;First, let’s have a look at that graphic and see why it is a perfect SVG candidate, before we get into embedding, art-directing and fallback.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;theresults-svg-graphic&quot;&gt;The Results SVG Graphic&lt;/h3&gt;
&lt;p class=&quot;note&quot;&gt;
Disclaimer: I am writing this case study and sharing this image after having gotten a written approval from my client to do so. You can check the graphic out live &lt;a href=&quot;http://provatahealth.com/results.html&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;This is the SVG graphic I worked on in the website’s &lt;em&gt;Results&lt;/em&gt; page, and how it was supposed to look on mobile and desktop, respectively.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/provata-results-graphic.jpg&quot; alt=&quot;The Provata Results Graphic as displayed on mobile (left) and desktop (right).&quot; /&gt;
	&lt;figcaption&gt;The Provata Results Graphic as displayed on mobile (left) and desktop (right). You can check the graphic out live &lt;a href=&quot;http://provatahealth.com/results.html&quot;&gt;here&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The text inside of the graphic is just as important as the rest of the HTML text on the page, with the addition of the positioning that illustrates what category each result belongs to in a nice visual manner. When you have text like this, SVG should be the first thing to think about. This kind of graphic (similar to an infographic) is a perfect candidate for SVG and one that makes SVG’s accessibility and visual features shine.&lt;/p&gt;
&lt;p&gt;Imagine having to absolute-position each and every piece of text and image inside that graphic in an HTML document, taking into account and document flow (or lack thereof); doing this using SVG not only makes more sense but also comes with the advantage of being able to use a graphics editor to achieve all of the positioning visually, instead of hand-coding the positions using pixels or &lt;code&gt;em&lt;/code&gt;s (or whatever unit you prefer).&lt;/p&gt;
&lt;p&gt;Not only that, but you also get the fluidity and responsiveness of SVG images and text by default, so you won’t have to worry about adapting any text and image sizes to different viewport sizes. Not to mention text accessibility inside of the image. Win win win!&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;choosing-the-embedding-technique&quot;&gt;Choosing The Embedding Technique&lt;/h3&gt;
&lt;p&gt;Since the contents of the SVG are not animated (they were at first, but the UX team decided to drop the animations later for better UX), then the first logical embedding technique that comes to my mind is &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, or its cool cousin &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;; either way, it would be embedded as-an-image—as a foreground image, to be specific, because 1) there is no reason to embed it as a background image and 2) because &lt;a href=&quot;http://www.stevesouders.com/blog/2015/05/12/hero-image-custom-metrics/&quot;&gt;foreground images have better performance metrics than background images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, there is one important reason why embedding it as-an-image is not an option: not only does the text inside of the image need to be as “real” (read: readable, selectable and searchable) as any other piece of text on the page, but &lt;strong&gt;we also need to be able to provide this same text as a raw text fallback&lt;/strong&gt; in case the SVG fails to load for any reason.&lt;/p&gt;
&lt;p&gt;So, to recap:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The text inside of the image needs to be accessible to screen readers.&lt;/li&gt;
&lt;li&gt;The text inside of the image needs to be selectable and searchable by the reader.&lt;/li&gt;
&lt;li&gt;The text inside of the image &lt;strong&gt;should be the fallback provided for non-supporting browsers&lt;/strong&gt;. That is, if the image fails to load for any reason, the text content of the image should be the content to replace it, &lt;em&gt;not&lt;/em&gt; a PNG or JPEG version of the graphic. This decision was one of high importance to me because the entire section of that page depended on that text to convey a message, so should the user not be able to read the SVG text, I wanted them to be able to simply &lt;em&gt;read&lt;/em&gt; the text content.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given all of the above, &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; was the perfect candidate and the element I eventually used to embed the graphic.&lt;/p&gt;
&lt;p&gt;To make sure the text inside the SVG is accessible, searchable and selectable, make sure you don’t turn it into outlines. Keep it as default SVG &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt;. With this, you also get the ability to apply the page’s font face to the SVG text as well, using &lt;code&gt;@font-face&lt;/code&gt;. So you get the text rendered and working just like you expect it to.&lt;/p&gt;
&lt;p&gt;Between the opening and closing &lt;code&gt;object&lt;/code&gt; tags, instead of providing a PNG version of the image for non-supporting browsers—which is what most developers would normally opt for, I provided a raw text alternative to the graphic, and the content of that text was the exact same as the content inside of the SVG graphic.&lt;/p&gt;
&lt;p&gt;This works pretty well. While testing the graphic on mobile, and before finalizing the JavaScript (see next section), the graphic failed to load in one of the tests because the URL of the image I had specified was incorrect, so I got the text content in that section of the page instead, and it looked and worked perfect for the purpose of that section, as opposed to having loaded a PNG version that could have been unreadable.&lt;/p&gt;
&lt;p&gt;Having chosen the embedding element, decided for an accessible fallback, and knowing that we need to provide two seperate images for desktop and mobile, it’s time to handle the image swapping…&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;art-direction&quot;&gt;Art Direction&lt;/h3&gt;
&lt;p&gt;I’m a huge proponent of the &lt;code&gt;viewBox&lt;/code&gt; clipping technique. The attribute is extremely powerful and art-directing an image using this attribute is always the first thing that comes to my mind. If you’re not familiar with how this works, you should read my &lt;a href=&quot;https://sarasoueidan.com/blog/svg-art-direction-using-viewbox/&quot;&gt;previous blog post&lt;/a&gt; explaining exactly how that’s done.&lt;/p&gt;
&lt;p&gt;However, this is one use case where the &lt;code&gt;viewBox&lt;/code&gt; clipping technique would not suffice because clipping would not be enough to hide the parts we do not need on smaller screens, because the &lt;code&gt;viewBox&lt;/code&gt; can only clip to rectangular areas, so we would either have to use a custom clip path to clip out the excess content, or we could hide them by making them invisible (using &lt;code&gt;opacity&lt;/code&gt;, &lt;code&gt;visibility&lt;/code&gt;, &lt;code&gt;display&lt;/code&gt;, etc.), and the latter can be &lt;a href=&quot;http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/&quot;&gt;easily achieved using CSS media queries&lt;/a&gt;. So the way it would work would be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hide the branched parts (text and small illustrations) on small screens using &lt;code&gt;opacity: 0;&lt;/code&gt; or &lt;code&gt;display: none&lt;/code&gt;, for example&lt;/li&gt;
&lt;li&gt;Then clip the canvas to the remaining graphic (the three overlapping colored circles) to get rid of unwanted excess white space resulting from hiding the rest of the graphic.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Changing the viewBox using CSS is currently not possible, so that would require JavaScript. Hiding the unwanted parts on small screens is possible in CSS, though. So this makes it possible to do half of the job using JS and the other half using CSS. I don’t like the sound of this, but this is the only way it’s possible now. Ideally, we would be able to change the &lt;code&gt;viewBox&lt;/code&gt; using nothing but CSS, thus croppig and hiding the content using a few lines of CSS, but that’s currently not possible. (See previous article for details.)&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	art-directing SVG using the `viewBox` attribute is a powerful technique but one you should not pursue if the graphic you are embedding is too big to serve in full composition on mobile.
&lt;/blockquote&gt;
&lt;p&gt;So, we can use one SVG image and art-direct it using CSS and a few lines of JavaScript. Great.&lt;/p&gt;
&lt;p&gt;However, something else must be kept in mind here: &lt;strong&gt;performance&lt;/strong&gt;. In my previous article on this subject, I mentioned that art-directing SVG using the &lt;code&gt;viewBox&lt;/code&gt; attribute is a powerful technique but one you should not pursue if the graphic you are embedding is too big to serve in full composition on mobile. And in the case of the Provata graphic, the hidden parts were indeed non-trivial in contributing to the overall file size, making it significantly bigger, so using the same full image and hiding parts of it on mobile was definitely not a suitable approach in this case.&lt;/p&gt;
&lt;p&gt;Which brings us to the next section…&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;art-directing-the-svg-object&quot;&gt;Art-Directing The SVG &lt;code&gt;&lt;object&gt;&lt;/object&gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Instead of serving the same graphic for desktop and mobile, we opted for two different graphics. Both of them were embedded using an &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Had we embedded the SVG as an image, we would have been able to easily switch the source of the image using the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element and its &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; descendant. I wrote all about this in a previous article as well, so you might want to &lt;a href=&quot;https://sarasoueidan.com/blog/svg-picture&quot;&gt;check it out&lt;/a&gt;. The code for that would look something like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(max-width: 640px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;results-graphic--small.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;results-graphic--full.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;results-graphic--default-fallback.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Header description..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But since we need the text fallback and are using &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;, we need to swap out the source of the &lt;code&gt;object&lt;/code&gt; using JavaScript because it’s not possible to do so using markup…&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;using-js-to-switch-object-source&quot;&gt;Using JavaScript to Switch &lt;code&gt;&lt;object&gt;&lt;/object&gt;&lt;/code&gt; Source&lt;/h3&gt;
&lt;p&gt;To detect viewport size, I like using &lt;a href=&quot;http://modernizr.com/&quot;&gt;Modernizr&lt;/a&gt;. So the function swapping the &lt;code&gt;object&lt;/code&gt; source looks something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// after getting a reference to the graphic...&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;changeSource&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; graphic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Modernizr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;(max-width: 767px)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;path/to/results-graphic--mobile.svg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            graphic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;path/to/results-graphic--mobile.svg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token comment&quot;&gt;// maybe show/hide something else related to it here&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;path/to/results-graphic--desktop.svg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            graphic&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;path/to/results-graphic--desktop.svg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token comment&quot;&gt;// maybe show/hide something else related to it here&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, make you sure sure you trigger this function and re-trigger on window resize, and since the function already checks for whether or not the source is the one required at a specific screen size, it won’t keep swapping the source every time (that would otherwise cause a horrible flash making the image unusable). The rest is self-explanatory.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;inline-or-external-js&quot;&gt;Inline or External JS? Sync or Async?&lt;/h3&gt;
&lt;p&gt;I inlined the script right after the &lt;code&gt;&amp;lt;/object&amp;gt;&lt;/code&gt; tag in the markup, and did &lt;em&gt;not&lt;/em&gt; make it &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;“&lt;em&gt;Why?&lt;/em&gt; 😳”&lt;/p&gt;
&lt;p&gt;I needed the browser to parse the JS and specify the &lt;code&gt;object&lt;/code&gt; source &lt;strong&gt;as soon as possible&lt;/strong&gt;, I did &lt;em&gt;not&lt;/em&gt; want it to parse the entire document before it displayed the graphic, because it’s the most important graphic on the page and I wanted it to show up as soon as possible. So, I did not async the inline script.&lt;/p&gt;
&lt;p&gt;(We devs can turn any word into a verb and it’s totally legit.)&lt;/p&gt;
&lt;p&gt;(Yes it is.)&lt;/p&gt;
&lt;p&gt;At first, I was relying on the JS to set the &lt;code&gt;object&lt;/code&gt; source on both mobile and desktop. That caused some issues on mobile—loading- and performance-wise, so I ended up setting the &lt;code&gt;data&lt;/code&gt; to point to the mobile version of the graphic by default, and have the script do the swapping to the desktop version when on desktop. That got rid the mobile loading issue, and, expectedly, works pretty well on desktop.&lt;/p&gt;
&lt;p&gt;Now, this works, perf is pretty good on both desktop on mobile &lt;em&gt;and&lt;/em&gt; I even got a “&lt;em&gt;looks good to me&lt;/em&gt;” from Paul, so I took that as my “good to go” sign.&lt;/p&gt;
&lt;p&gt;The takeaway here is: &lt;strong&gt;always test your pages&lt;/strong&gt;, no matter what technique you use to achieve something. It turned out that inining small pieces of JavaScript is sometimes even recommended to improve load times, &lt;a href=&quot;https://developers.google.com/speed/docs/insights/BlockingJS#InlineJS&quot;&gt;says Google&lt;/a&gt;, and that’s exactly what I achieved by inlining the JS in this case.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;an-object-extension&quot;&gt;An &lt;code&gt;&lt;object&gt;&lt;/object&gt;&lt;/code&gt; Extension?&lt;/h3&gt;
&lt;p&gt;As I worked on this project, I &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/611142858221973504&quot;&gt;tweeted&lt;/a&gt; about how nice it would be if we have a &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; cousin that did the same thing as &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; does for &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, but something more &lt;code&gt;object&lt;/code&gt;-oriented. (Pun not intended.)&lt;/p&gt;
&lt;p&gt;Art-directing an SVG embedded as an &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; is something I’ve done more than once, and all in real-life, practical use cases as part of client projects. So this is something that is useful and would make a lot more sense if we could do it &lt;strong&gt;using markup&lt;/strong&gt; &lt;em&gt;without&lt;/em&gt; having to resort to (inline) JavaScript.&lt;/p&gt;
&lt;p&gt;After second thoughts, I think that maybe, instead of coming up with a new element to do this, &lt;em&gt;extending&lt;/em&gt; the &lt;code&gt;object&lt;/code&gt; element with a &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;data&amp;gt;&lt;/code&gt; element that is similar to &lt;code&gt;source&lt;/code&gt; might be quite handy.&lt;/p&gt;
&lt;p&gt;So we could do something like:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;object&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;data&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is just an idea, and probably not even close to something implementable—it is just meant as an idea that might be shaped into something usable/implementable or maybe a similar idea that achieves the same functonality could spawn from it.&lt;/p&gt;
&lt;p&gt;This is yet another thing added to my SVG wishlist. Until we get anything like that, JavaScript is the way to go to swap &lt;code&gt;object&lt;/code&gt; sources.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
&lt;em&gt;UPDATE: After reading the article, &lt;a href=&quot;http://twitter.com/tigt_&quot;&gt;Taylor Hunt&lt;/a&gt; pointed me to &lt;a href=&quot;http://www.w3.org/TR/SVGParamPrimer/&quot;&gt;this specification&lt;/a&gt;, which defines a &lt;code&gt;&lt;param /&gt;&lt;/code&gt; element to extend the options for some SVG elements. Maybe this element or something very similar in concept could achieve the URL-swapping without resorting to script. Just something to keep in mind.&lt;/em&gt;
&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;happy-cuser-client-dev&quot;&gt;Happy User, Happy Client, Happy Dev&lt;/h3&gt;
&lt;p&gt;In that order. The image used was important in conveying a message and was a vital part of the site’s content, so we made sure it was as accessible and good-looking as it could possibly be, using the awesome that SVG is.&lt;/p&gt;
&lt;blockquote&gt;
   &lt;p&gt; At Provata, we focus on creating dynamic, interactive, and engaging digital health experiences. So we wanted our marketing website to reflect that. Sara expertly incorporated SVG techniques to deliver a final product beyond our expectations. She is an incredibly knowledgeable and diligent developer. She captured the spirit of our company brilliantly. &lt;/p&gt;
   &lt;cite&gt;—Alex Goldberg, CEO Provata Health&lt;/cite&gt;
&lt;/blockquote&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;Working on this site has been great, and my client was one of the best I’ve worked with. Not only do I love the branding and design, but I also love the spirit behind the health program. (You can learn more about it &lt;a href=&quot;http://provatahealth.com/&quot;&gt;here&lt;/a&gt;.) And my absolute favourite part was getting to work with lots of SVG animations using &lt;a href=&quot;http://greensock.com/&quot;&gt;my favourite animation library&lt;/a&gt;. &lt;small&gt;(Thank you, Jack.)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;The SVG decision-making process is also one I enjoy a lot, even though the amount of options we have can sometimes be overwhelming, and in spite of the fact that we sometimes may need to make certain compromises when choosing one option over the other, &lt;em&gt;and&lt;/em&gt; in spite of the lack of full-fledged tools and techniques we got at hand today. I love SVG and enjoy going through the entire process every time.&lt;/p&gt;
&lt;p&gt;Hopefully things will get better in the future. The more we use SVG, the more practical, real-life use cases come up with, the more features we need, the more features we should request, and hopefully the more features make it to specs and implementation.&lt;/p&gt;
&lt;p&gt;I also learned quite a few designer-y things while working on this project, and plan on sharing more of those in future articles and talks, so stay tuned!&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>The State of SVG Animation</title>
    <link href="https://sarasoueidan.com/blog/state-of-svg-animation/"/>
    <updated>2015-06-05T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/state-of-svg-animation/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	The state of SVG animation is changing. CSS, SMIL and JavaScript can be used to animate SVGs. However, SMIL is soon to be deprecated and was never supported in Internet Explorer. CSS animations on SVG elements don’t have the best browser support (yet), not to mention are quite buggy in some browsers. JavaScript is currently the best SVG animation tool. In this article, we&#39;ll go over the current and future state of SVG animation, giving you an overview of what you can and can&#39;t do, and some advice on what to choose for your specific animation needs.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Art-Directing SVG Images With The viewBox Attribute: How-To, Notes, Tips and Why We Need A viewBox Property in CSS</title>
    <link href="https://sarasoueidan.com/blog/svg-art-direction-using-viewbox/"/>
    <updated>2015-05-21T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/svg-art-direction-using-viewbox/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	The SVG &lt;code&gt;viewBox&lt;/code&gt; attribute is easily one of SVG&#39;s most powerful features. Mastering this attribute can take your SVG skills to the next level, especially considering that a couple of the main SVG spriting techniques rely on this attribute to work. Because the &lt;code&gt;viewBox&lt;/code&gt; attribute can be used to crop and extend the SVG canvas, it can be used for art-directing SVGs—by using it to crop the SVG to the area that you want to display at a time. In this article, I want to go over how to do this, mention some tips that can save you some time doing it, and show the importance of having a &lt;code&gt;viewBox&lt;/code&gt; property in CSS, in hopes that this article would serve as a practical use case that helps push &lt;a href=&quot;https://lists.w3.org/Archives/Public/www-svg/2013Dec/0080.html&quot;&gt;this old SVGWG proposal&lt;/a&gt; forward.
&lt;/p&gt;
&lt;p&gt;Since I’ve already covered everything you need to know about the &lt;code&gt;viewBox&lt;/code&gt; attribute in a &lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;previous post&lt;/a&gt;, I will assume that you have a basic understanding of how the attribute works and what each of its values stands for. I will be mentioning some of the basics along the way, but I highly recommend you head to my &lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;other article&lt;/a&gt; and scan it before you move on with this article if you’re not familiar with the attribute.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;overview-of-viewbox-parameters&quot;&gt;Quick Overview Of the &lt;code&gt;viewBox&lt;/code&gt; Parameters&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;viewBox&lt;/code&gt; attribute is used to specify the origin and dimensions of the user coordinate system of an SVG image. All the drawing inside of the SVG is done relative to this system. And since the SVG canvas is conceptually infinite in all directions, you can even draw shapes outside the boundaries of this coordinate system; but the position of those shapes relative to the SVG viewport can also be controlled by the position of the user coordinate system.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;viewBox&lt;/code&gt; attribute takes four parameters that specify the position of the origin of the system and its dimensions: &lt;code&gt;x y width height&lt;/code&gt;. Initially, this system is identical to the initial viewport coordinate system established by the width and height of the SVG image, and its origin is at (0, 0)—the top left corner of the SVG.&lt;/p&gt;
&lt;p&gt;By changing the value of the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; parameters you change the position of the origin. By changing the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;, you change the dimensions of the system. This eventually allows you to extend and crop the SVG canvas using nothing but the &lt;code&gt;viewBox&lt;/code&gt; attribute. Read along for examples.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;IMPORTANT NOTE: Throughout this article I won&#39;t be changing the default behavior (scale and position) of the &lt;code&gt;viewBox&lt;/code&gt; inside the SVG viewport. Therefore, as per the default behavior of the attribute, the &lt;code&gt;viewBox&lt;/code&gt; will scale as much as possible while still be entirely contained inside the viewport, and positioned at its center. Using the &lt;code&gt;preserveAspectratio&lt;/code&gt; attribute, you can change the scale and position of the &lt;code&gt;viewBox&lt;/code&gt; to your liking, but that is not required for the technique in this article to work, and therefore we won&#39;t be getting into that in this article.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;cropping-svg-using-viewbox&quot;&gt;Cropping the SVG Using &lt;code&gt;viewBox&lt;/code&gt; a.k.a SVG Art Direction Using the &lt;code&gt;viewBox&lt;/code&gt; Attribute&lt;/h3&gt; 
&lt;p&gt;A while back, a client of mine requested that the SVG header photo of his website change on different screen sizes, so that only one portion of the full composition is visible on small screens, a bigger portion is visible on medium screens, and the full composition be visible on large screens. The first idea that crossed my mind when he requested that was to use the &lt;code&gt;viewBox&lt;/code&gt; attribute to crop the SVG and only show the portions of the image he wanted on different screen sizes.&lt;/p&gt;
&lt;p&gt;By changing the dimensions of the SVG coordinate system and the position of its origin, we can crop an SVG to only show the parts that we want inside the viewport.&lt;/p&gt;
&lt;p&gt;Let’s see how that’s done.&lt;/p&gt;
&lt;p&gt;Suppose we have the following SVG image in full composition, that we want to crop on smaller screen sizes. The image is a freebie &lt;a href=&quot;http://www.freepik.com/free-photos-vectors/house&quot;&gt;House vector designed by Freepik&lt;/a&gt; and is licensed under Creative Commons Attribution 3.0 Unported License. For the sake of simplicity, we will assume that the image is going to be cropped only once to show one portion on small–medium screens, and the full composition on larger screens, as shown in the image below.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/house-landscape.png&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt;The full composition we are going to crop using the &lt;code&gt;viewBox&lt;/code&gt; attribute. The image on the right shows the area of the image that we want to show on smaller screens.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now, there are a few considerations when cropping an SVG by changing the value of the &lt;code&gt;viewBox&lt;/code&gt; attribute. We’ll get to these shortly. But first, in order to change the coordinate system so that it matches the dashed rectangular area in the above image, we need to change the value from its initial &lt;code&gt;0 0 800 800&lt;/code&gt; parameters by translating the system’s origin and changing the width and height.&lt;/p&gt;
&lt;p&gt;But how do you know the new position and dimensions without having to go through a lot of trial and error?&lt;/p&gt;
&lt;p&gt;There are a couple of ways. Since we’re already in the graphics editor (Ai, in my example), we can use the editor’s panels to retrieve the positions and dimensions of elements.&lt;/p&gt;
&lt;p&gt;There is a reason why I drew that dashed rectangle to wrap the area I want to show on smaller screens: we can retrieve the position and dimensions of this rectangle and use them as values for the &lt;code&gt;viewBox&lt;/code&gt;. Using Ai’s Transform panel (see image below), we retrieve these values. By selecting the rectangle and then clicking the Transform link at the top right corner, we get the panel shown in the image below, with the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; values that we are going to use.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/illustrator-transform-values.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;The Transform panel in Ai can be used to retrieve the values of the selected rectangle&#39;s position and dimensions. &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you have probably noticed, the values are not rounded, so we can do that ourselves. Using the above information, we change the &lt;code&gt;viewBox&lt;/code&gt; value to: &lt;code&gt;0 200 512 512&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Since the aspect ratio of the new &lt;code&gt;viewBox&lt;/code&gt; is the same as the aspect ratio of the SVG viewport (both are square)&lt;/strong&gt;, the &lt;code&gt;viewBox&lt;/code&gt; is going to scale up and only the selected area will be visible inside of the viewport. The result of changing the &lt;code&gt;viewBox&lt;/code&gt; value is:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/new-svg-viewbox.png&quot; alt=&quot;&quot; style=&quot;max-width: 600px;&quot; /&gt;
	&lt;figcaption&gt;The new cropped SVG. Only the portion we specified using the &lt;code&gt;viewBox&lt;/code&gt; attribute is visible inside of the viewport. The blue border represents the SVG viewport.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We need to ask a question here at this point:&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;case-of-different-aspect-ratios&quot;&gt;What if the aspect ratio of the cropped area (thus, the viewBox) is not the same as the aspect ratio of the SVG viewport?&lt;/h4&gt; 
&lt;p&gt;Well, in this case, there will be visible overflow. By visible overflow I don’t mean overflow extending beyond the boundaries of the SVG viewport, but overflow relative to the  new user coordinate system defined by the &lt;code&gt;viewBox&lt;/code&gt;. The following image illustrates the problem.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/diff-aspect-ratio-viewbox.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;If the aspect ratio of the &lt;code&gt;viewBox&lt;/code&gt; is different from that of the viewport, and there is content inside the SVG that overflows the user coordinate system, you could end up with something like this.
		&lt;p&gt;The black border represents the new user coordinate system, and the blue border is the SVG viewport.&lt;/p&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The black border in the above image on the right is the area defined by the &lt;code&gt;viewBox&lt;/code&gt;. As per the default behavior of the &lt;code&gt;viewBox&lt;/code&gt; inside the viewport, it has been centered and scaled up as much as possible while remaining fully contained inside the viewport (blue border).&lt;/p&gt;
&lt;p&gt;Since the SVG canvas is conceptually infinite in all directions, you can draw outside the boundaries of the user coordinate system, and the content would simply overflow the system as shown in the above image.&lt;/p&gt;
&lt;p&gt;If you change the aspect ratio of the SVG viewport (the SVG width and height) so they match those of the &lt;code&gt;viewBox&lt;/code&gt;&#39;s, you won’t see that overflow anymore, since the &lt;code&gt;viewBox&lt;/code&gt; will scale to fit the viewport as in the previous example.&lt;/p&gt;
&lt;p&gt;But, in some scenarios, you may not be able or simply not want to change the aspect ratio of the Svg. An example is if you are using an SVG sprite to display images of a set of avatars on the page. In most cases, the avatars all have a fixed aspect ratio—you won’t be changing the size of each avatar to match the content of the image inside it. Or maybe you’re embedding an icon system and want/need all icons to have the same dimensions all the time.&lt;/p&gt;
&lt;p&gt;To clip off any excess (for example, part of another icon in the sprite that is showing inside the viewport), you can use a &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; to clip that excess out. The clip path would be a &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; element that covers the entire &lt;code&gt;viewBox&lt;/code&gt; area, and is then applied to the root SVG.&lt;/p&gt;
&lt;p&gt;There is, however, one thing to keep in mind here: make sure the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; attributes of the &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt; are identical to those of the &lt;code&gt;viewBox&lt;/code&gt;, otherwise the &lt;code&gt;rect&lt;/code&gt; will be positioned relative to the old/initial system’s origin and you will end up cropping and clipping an unexpected part of the SVG.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;vx vy width height&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#clipper)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- SVG content here --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;clipPath&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;clipper&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;vx&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;vy&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;rect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;clipPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, clipping the excess out will mean that you’re still using different aspect ratios and are thus going to end with that extra white space on either side of the content. If the SVG is a continuous scene as in our previous example, this will be unwanted and you will need to adjust the aspect ratio of the viewport. If the SVG is a bunch of icons that you’re showing one at a time inside different viewports, this might not be an issue.&lt;/p&gt;
&lt;p&gt;The important thing here to keep in mind that the aspect ratio of the &lt;code&gt;viewBox&lt;/code&gt; is best kept the same as that of the viewport; else, you will have to apply a fix to avoid any excess unwanted space inside the SVG.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, the &lt;code&gt;viewBox&lt;/code&gt; can be used to crop the SVG and only show parts of it when needed. But how would that be done in a practical example?&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;art-directing-svg-for-rwd&quot;&gt;Art-Directing An SVG For Responsive Web Design&lt;/h4&gt; 
&lt;p&gt;Nothing new to add in this section, except the actual process with code. So, suppose you have the above SVG and you want to use it as a header image, for example, and you only want to show the cropped part on small–medium screen sizes and the full composition on bigger screens.&lt;/p&gt;
&lt;p&gt;In order to change the value of the SVG viewport’s width and height, we can use CSS. Simple. But to change the value of the &lt;code&gt;viewBox&lt;/code&gt;, we currently need to use JavaScript.&lt;/p&gt;
&lt;p&gt;Not all SVG presentation attributes are available as CSS properties; only the set of attributes that have CSS property equivalents can be set in CSS. You can see an overview of the set of attributes available as CSS properties in &lt;a href=&quot;http://slides.com/sarasoueidan/styling-animating-svgs-with-css#/10&quot;&gt;this table&lt;/a&gt;. In SVG2, more attributes (like &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;cx&lt;/code&gt;, &lt;code&gt;cy&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;, etc.) will be added to the list; but those are the properties we can work with today.&lt;/p&gt;
&lt;p&gt;In order to show different parts of the SVG by changing the &lt;code&gt;viewBox&lt;/code&gt; value based on different media queries, you can, for example, use Modernizr, check for media query conditions, and then change the &lt;code&gt;viewBox&lt;/code&gt; accordingly, in JavaScript. An example of that might look like so:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// get a reference to the root &amp;lt;svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; svgRoot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// depends on how you embed and retrieve your SVG&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// define your viewBox value(s) to be used&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; vbValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;0 200 512 512&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// use Modernizr&#39;s media query detection to change the viewBox value&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Modernizr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;(max-width: 700px)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;   svgRoot&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;viewBox&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; vbValue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// else if ... etc.&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works. But wouldn’t it be much more optimal if we could use CSS to do this?&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;css-viewbox-property&quot;&gt;Using a CSS &lt;code&gt;viewBox&lt;/code&gt; Property To Art-Direct SVGs&lt;/h4&gt; 
&lt;p class=&quot;note&quot;&gt;DISCLAIMER: &lt;strong&gt;At the time of writing of this article, there is no CSS &lt;code&gt;viewBox&lt;/code&gt; property&lt;/strong&gt;. This is just an example to demonstrate why such a property would be useful and an example of how I imagine it would be used.&lt;/p&gt;
&lt;p&gt;Ideally, we would be able to do something like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 700px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;       &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token property&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 200 512 512&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* etc. */&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These styles would go inside (or outside) an SVG, and the SVG will then adapt its &lt;code&gt;viewBox&lt;/code&gt; according to the viewport size—be it the viewport of the page (in case of inline &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;), or the viewport established by the dimensions of whichever element is used to reference the SVG (which would lend us something practically identical to element queries).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is currently not possible because we don’t have a &lt;code&gt;viewBox&lt;/code&gt; property in CSS.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A while back, I asked an SVG spec editor about this, and he said that I could propose it to the SVGWG with a practical use case and example. After some discussion on Twitter, I learned that there already is a fairly old &lt;a href=&quot;https://lists.w3.org/Archives/Public/www-svg/2013Dec/0080.html&quot;&gt;SVGWG proposal thread&lt;/a&gt; that goes a few years back. The initial proposal is still there today, and my hope is that, with a practical use case like this, this proposal could be pushed forward and the property implementation specced at some point in the near future.
If you would like to see the &lt;code&gt;viewBox&lt;/code&gt; property in CSS, please help make this happen by pushing this thread forward and commenting on it.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;notes&quot;&gt;Things To Keep In Mind When Approaching SVG Art-Direction with &lt;code&gt;viewBox&lt;/code&gt;&lt;/h4&gt; 
&lt;p&gt;While working on my client project, it took me literally less than a minute to art-direct the header image the way he wanted. However, we ended up going for three separate SVGs instead of using the same SVG with different viewBoxes on different screen sizes.&lt;/p&gt;
&lt;p&gt;The reason we chose to go with three SVGs is that the size of the full composition was too big to serve on mobile—reaching a whopping 100kb+ in size. The initial SVG was around 200kb, and I was able to slash the file size down to half by &lt;a href=&quot;https://sarasoueidan.com/blog/svgo-tools&quot;&gt;optimizing the SVG&lt;/a&gt;, but the resulting size was still too big to serve on mobile, so we ended up using three different images. This is something to keep in mind when art-directing SVGs: performance matters. A lot. So, if your SVG is too big, don’t art-direct it using &lt;code&gt;viewBox&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, if you choose to serve three different SVG images, you can do so in one of many possible ways—depending on the way you embed your SVG, and this also depends on what you want or don’t want to do with it.&lt;/p&gt;
&lt;p&gt;The ideal way to serve different SVG images would be to use the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element. Not only does it allow us to provide different SVGs for the browser to choose from without needing JavaScript, but it also enables us to provide &lt;strong&gt;multiple&lt;/strong&gt; optimized fallback images for non-supporting browsers (think IE8 and below) as well. &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; is great when used with SVG, and you can read all about providing SVG fallback using &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; in &lt;a href=&quot;https://sarasoueidan.com/blog/svg-picture&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All this being said, &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; will not be your best choice if you want to animate or interact with your SVG. Just like an SVG embedded using &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, the SVG cannot be styled and animated unless the styles and animations are defined inside the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; file, the SVG cannot be scripted (for security reasons), and any interactions (CSS or JS) — like hover, for example — will not work.&lt;/p&gt;
&lt;p&gt;So, as I always say: SVG provides us with a lot of options to do almost everything; you need to weigh things, prioritize, sometimes maybe even make compromizes, and pick your best route based on that. But never compromise performance in favor of development convenience.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Before we finish up, and since we’re on the subject of changing the SVG canvas’ size using the &lt;code&gt;viewBox&lt;/code&gt; attribute, let’s take a look at another example where we can leverage the power of this attribute to save us some time and effort when working with SVG.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;extending-svg-canvas-using-viewbox&quot;&gt;Extending the SVG Canvas using &lt;code&gt;viewBox&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;Just like the &lt;code&gt;viewBox&lt;/code&gt; attribute can be used to crop an SVG, it can be used to extend the SVG canvas as well.&lt;/p&gt;
&lt;p&gt;A few weeks ago I created &lt;a href=&quot;https://sarasoueidan.com/tools/circulus/&quot;&gt;a tool that allows you to generate circular menus in SVG&lt;/a&gt;. I created a few examples to show how a generated menu could be animated using JavaScript. The demos are embedded on the app page using the &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; element. The boundaries of the &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; define the boundaries of the SVG viewport, and anything that lies outside these boundaries is considered overflow and will be hidden by default.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;Note that the phrase &quot;outside these boundaries&quot; refers to content inside the SVG that is still drawn on the infinite SVG canvas, but that extends beyond the finite rectangle defined by the viewport.&lt;/p&gt;
&lt;p&gt;The menus are created such that the size of the SVG is just big enough to contain the menu, not more, to avoid any excess and unwanted white space around the menu.&lt;/p&gt;
&lt;p&gt;I applied a staggering, bouncing animation to one of the menus as an example of how the menu can be animated. The bouncing effect “stretched” the menu items, and this led to the items being cut off while they animated.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/items-overflow-recording.gif&quot; alt=&quot;Screen recording showing how the menu items get cut off when they are animated with a bouncing animation.&quot; /&gt;
&lt;figcaption&gt;
Initially, and since the SVG viewport defined by the &lt;code&gt;&lt;object&gt;&lt;/object&gt;&lt;/code&gt; element is just as big as the menu itself, the bouncing effect on the menu items results in these items being cut off when animated.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The staggering bouncing animation is applied to the items such that it will scale an item from zero (items are initially not visible, scaled down) to 100% using a bouncing timing function, the effect of which will be scaling the item &lt;em&gt;beyond&lt;/em&gt; 100% right before it is scaled back to 100%. This effect causes the item to scale up beyond the boundaries of the SVG and hence get cut off.&lt;/p&gt;
&lt;p&gt;The following image shows the result of scaling the menu item up beyond the boundaries of the &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; used to embed it (grey border).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/circular-menu-overflow-illustration.png&quot; alt=&quot;Image showing the result of applying a bouncing scale animation to the menu item, resulting in the item being cut off.&quot; style=&quot;max-width: 600px;&quot; /&gt;
&lt;figcaption&gt;
Illustration showing the menu item overflowing the boundaries of the SVG viewport when it is scaled up. The grey border represents the border of the SVG viewport (the &lt;code&gt;&lt;object&gt;&lt;/object&gt;&lt;/code&gt;).
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Setting &lt;code&gt;overflow: visible&lt;/code&gt; on the &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; fix this, because &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; is practically similar to an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; in behavior. What we need to do is &lt;em&gt;extend&lt;/em&gt; the SVG canvas &lt;em&gt;inside&lt;/em&gt; the viewport created by the &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; so that the scaled items have enough space to “bounce” without exceeding its boundaries. We can do this using the &lt;code&gt;viewBox&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;To extend the SVG canvas, you simply increase its dimensions. So, instead of 500px by 250px—the original dimensions of the SVG menu, we use 700px by 350px; this will increase &lt;strong&gt;the height of the canvas visible inside of the viewport&lt;/strong&gt; by 100px, and its width inside of the viewport by 200px. I chose these values based on how much the menu item is being scaled up in the bounce effect. Depending on your SVG and what you’re working on, these values might be different.&lt;/p&gt;
&lt;p&gt;Now, to make sure the menu remains centered inside of the viewport, we’re going to shift the position of the coordinate system by 100 pixels in the negative direction (upwards and to the left). Applying this shift to the origin of the coordinate system is practically the same as applying a translation transformation to the menu inside of the system. The result will be that the menu remains centered inside of the viewport.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/circular-menu-overflow-fix-illustration.png&quot; alt=&quot;Image showing the result of extending the SVG canvas to provide more space for the menu items to be animated without being cut off.&quot; style=&quot;max-width: 700px;&quot; /&gt;
&lt;figcaption&gt;
In this illustration, the blue borders represent the border of the SVG viewport (the &lt;code&gt;&lt;object&gt;&lt;/object&gt;&lt;/code&gt;). The grey borders in this image show the initial dimensions of the user coordinate system. The blue numbers and arrows represent the extension of the coordinate system inside of the viewport.
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;By extending the dimensions of the user coordinate system, you are increasing the area of the canvas visible inside of the viewport. The result of doing this will also be that the contents of the canvas will look slightly smaller—depending on how much you increase the canvas. In the case of the menu, the result was perfectly acceptable.&lt;/p&gt;
&lt;p&gt;The following screen recording shows the result of extending the SVG canvas and how the animation now looks inside the buondaries of the SVG.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/items-overflow-fix-recording.gif&quot; alt=&quot;Screen recording showing the result of extending the SVG canvas using the viewBox attribute, thus preventing the menu items from being cut off once animated.&quot; /&gt;
&lt;figcaption&gt;
Once the SVG canvas has been extended and the menu items have enough space to scale up, they are no longer cut off when the bouncing effect is applied. 
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Changing four values inside the &lt;code&gt;viewBox&lt;/code&gt; attribute to extend the SVG canvas was all that was needed to troubleshoot and solve the issue of the items being cut off. Now that’s pretty powerful, isn’t it?&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;viewBox&lt;/code&gt; attribute is awesome. It is literally SVG on steroids. By using this attribute, you can save a lot of time when working with SVG, troubleshoot SVG quickly without having to resort to a graphics editor, and, all in all, feel more comfortable editing SVG by hand.&lt;/p&gt;
&lt;p&gt;I highly recommend you learn all about this attribute if you haven’t already, &lt;a href=&quot;http://sarasoueidan.com/demos/interactive-svg-coordinate-system/index.html&quot;&gt;play with its values&lt;/a&gt;, and then leverage its power in your work. And if you do decide to use it to art-direct SVGs, don’t forget to keep performance in mind.&lt;/p&gt;
&lt;p&gt;One of the main objectives of this article was to also shed some light on the importance of having a &lt;code&gt;viewBox&lt;/code&gt; property in CSS, so if you’re convinced that this property is needed, please take the time to vote on / respond to the SVGWG thread and support the request.&lt;/p&gt;
&lt;p&gt;Thank you very much for reading! :)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An Introduction To Graphical Effects in CSS</title>
    <link href="https://sarasoueidan.com/blog/css-graphics/"/>
    <updated>2015-04-29T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-graphics/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	In this article, we will take a deep introduction into CSS’s graphical effects—specifically, CSS Filters and Compositing and Blending capabilities. We will go over the properties for each, their different values, and usage examples and some of the graphial effects that can be created using nothing but a few lines of CSS.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>I Won A Web Platform Award</title>
    <link href="https://sarasoueidan.com/blog/oreilly-web-platform-award/"/>
    <updated>2015-04-22T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/oreilly-web-platform-award/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;Today, O&#39;Reilly&#39;s Fluent Conf is taking place in San Francisco, California. And as part of the conference, the O&#39;Reilly Web Platform Awards were announced. Apparently, I was nominated for an award and, according to the co-chairs of the conference, I got the most amount of nominations and eventually won an award.
&lt;/p&gt;&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/web-platform-award.jpg&quot; alt=&quot;The Web Platform award.&quot; /&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
	O’Reilly Web Platform Awards recognize individual contributors who have demonstrated exceptional leadership, creativity, and collaboration in the development of JavaScript, HTML, CSS, and the supporting Web ecosystem. The nomination process is open to the entire web community and all entries will be judged by the Fluent program committee.
&lt;/blockquote&gt;
&lt;p&gt;This is my first time ever winning a web award, and I feel privileged to have won it from such a prestigious company.&lt;/p&gt;
&lt;p&gt;Simon sent me the “Congratulations, you won a web platform award!” email a couple of weeks before the awards were announced. My first reaction when I read the email was: “Okay this must have gotten into my inbox by mistake.” So I ended up responding to his message asking him if the email was really intended for &lt;em&gt;me&lt;/em&gt;. He said that it was. I couldn’t believe it for a while and it took me some time to let the idea sink in that I had actually won an award.&lt;/p&gt;
&lt;p&gt;I had &lt;em&gt;no clue&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I love doing what I do and sharing what I know. I find great pleasure in helping others with what I know and always have—ever since I can remember. I really don’t know what to say except &lt;strong&gt;Thank You&lt;/strong&gt; to each and every one who nominated me, and to the committee who voted, and to O’Reilly Fluent for this great award. It is such a wonderful and overwhelming feeling to realize that your work has been recognized by the very community you’re part of and have been contributing to. To know that the community appreciates your work and finds it useful is one of the best feelings ever.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Primer To Background Positioning In CSS</title>
    <link href="https://sarasoueidan.com/blog/css-background-positioning/"/>
    <updated>2015-03-24T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-background-positioning/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	An article in which we take a deep dive into CSS’s background positioning properties with visual explanations and examples. Did you know that the CSS &lt;code&gt;background-position&lt;/code&gt; property accepts edge offset values? That is, you can position a background image relative to &lt;em&gt;any&lt;/em&gt; edge—not just top and left—and specify the offset relative to that edge using a length value. In this article, we will learn all about that, and more.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Building a Circular Navigation with SVG</title>
    <link href="https://sarasoueidan.com/blog/building-a-circular-navigation-with-svg/"/>
    <updated>2015-03-09T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/building-a-circular-navigation-with-svg/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	Last week, I released &lt;a href=&quot;https://sarasoueidan.com/tools/circulus&quot;&gt;CIRCULUS.SVG&lt;/a&gt;—the SVG circular menu generator. In this article I want to go over why SVG is better suited for creating this kind of UI element, and give you and overview of the SVG code for creating the menu items using SVG elements and transformations. 
&lt;/p&gt;
&lt;p&gt;Note that, unlike my usual tutorials, we will not be going over a detailed how-to, but only an overview of the concepts behind this. Creating the menu in detail would require lots of maths and digging into the SVG path data syntax which deserves an article of its own; so, for the sake of brevity, I will &lt;em&gt;not&lt;/em&gt; be digging into either of these, but will go quickly over the concepts.&lt;/p&gt;
&lt;p&gt;Now, to draw the sectors, you can, of course, literally &lt;em&gt;draw&lt;/em&gt; them in a graphics editor like Illustrator, Inkscape or Sketch, and then export your graphic as SVG, make it interactive, and embed it. However, since the title says “building”, we’re going to go over how to draw these items with code.&lt;/p&gt;
&lt;p&gt;If you’re only interested in the end result—a usable circular menu, you can head to the generator and create your own menu there. Otherwise, let’s start with why SVG is better than CSS for creating circular menus.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;svg-vs-css&quot;&gt;SVG vs. CSS&lt;/h3&gt;
&lt;p&gt;Over a year ago, I wrote &lt;a href=&quot;http://tympanus.net/codrops/2013/08/09/building-a-circular-navigation-with-css-transforms/&quot;&gt;an article&lt;/a&gt; over at Codrops about using CSS Transforms to create a circular navigation. Even though the technique works, it comes with a couple of browser bugs &amp;amp; inconsistencies, not to mention that it’s practially hacky—we’re bending the rectangular box model to create the menu items by skewing and rotating the list items and cutting them off by hiding the overflow on their container. The innards of the list items need to be “un-skewed”, and everything is positioned absolutely.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/css-circular-nav-demo.gif&quot; alt=&quot;Screen recording showing the steps needed to create a circular menu in CSS&quot; /&gt;
	&lt;figcaption&gt;
		Screen recording showing the steps needed to create a circular menu in CSS. The interactive demo can be found in the Codrops article.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Placing content other than icons inside the menu can get difficult depending on the type of content. And finally, to make the menu repsonsive, you’re gonna need to use media queries and adjust the different sizes used for different viewport widths (and/or heights!).&lt;/p&gt;
&lt;p&gt;With SVG, on the other hand, it’s very different.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Shapes in SVG are marked up as semantic, fully-accessible XML elements like &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ellipse&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;. And with the different drawing elements available, SVG makes for the perfect candidate for drawing non-rectangular shapes and elements. And to top it off, SVG items can be styled and scripted and hence are completely interactive. That’s exactly what we need for our circular menu.&lt;/p&gt;
&lt;p&gt;Since we are creating circular slices — a.k.a &lt;strong&gt;sectors&lt;/strong&gt; (symbol: ⌔) — as menu items, we will use the &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; element to mark each slice up, since SVG’s path commands will allow us to draw the slices in a more straightforward manner using the line and arc commands available.&lt;/p&gt;
&lt;p&gt;Drawing the menu items in SVG is much, much more straightforward. Here is an interactive demonstration showing how the items are drawn and positioned inside the menu. Play the animation to see the demonstration.&lt;/p&gt;
&lt;p data-height=&quot;500&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;2e56afeaa278c90141853ff805da1a06&quot; data-default-tab=&quot;result&quot; data-user=&quot;SaraSoueidan&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/2e56afeaa278c90141853ff805da1a06/&quot;&gt;Building A Circular Menu With SVG #2&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;http://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Now &lt;em&gt;that&lt;/em&gt; is definitely better than the steps taken in CSS, isn’t it? The SVG &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; comes with a bunch of commands for drawing lines and arcs. Let’s take a closer look at the commands and parameters used to draw our menu items.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;drawing-items-using-svg-path&quot;&gt;Drawing A Menu Item Using SVG &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We’re going to need some data to draw our sectors. We will then pass this data to the &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; commands as parameters that define the shapes we’re drawing.&lt;/p&gt;
&lt;p&gt;A sector is defined by three points, a radius, and an angle. In order to draw a sector using the SVG &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; element, you need to know the coordinates for the three points. Then, using the path commands, we are going to &lt;strong&gt;move to&lt;/strong&gt; the center of the circle (the first point), draw a &lt;strong&gt;line to&lt;/strong&gt; the circle’s circumference (second point), then draw an &lt;strong&gt;elliptical arc&lt;/strong&gt; from the second point to the position of the third point, and then &lt;strong&gt;close the path&lt;/strong&gt; by drawing a line back to the center.&lt;/p&gt;
&lt;p&gt;The following is an interactive illustration showing how the path will be drawn. Click the button to start the demonstration.&lt;/p&gt;
&lt;p data-height=&quot;700&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;24de844274fb139d7eb1702783c9076d&quot; data-default-tab=&quot;result&quot; data-user=&quot;SaraSoueidan&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/24de844274fb139d7eb1702783c9076d/&quot;&gt;24de844274fb139d7eb1702783c9076d&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;http://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The three colored points are the points required to draw the sector. So let’s do some simple calculations to determine the coordinates of these points.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;determining-point-coordinates&quot;&gt;Determining Point Coordinates&lt;/h3&gt;
&lt;p&gt;In order to build the circular menu, we are going to start with a square SVG canvas that has &lt;strong&gt;500px by 500px&lt;/strong&gt; dimensions. So, the menu will be centered inside it. The center of the circle will be at the center of the square. The radius will be &lt;strong&gt;250px&lt;/strong&gt;. So the blue dot in the above demo (point A) will have the coordinates (250px, 250px), and the orange one (point B) will be positioned at (500px, 250px).&lt;/p&gt;
&lt;p&gt;To determine the coordinates of the third point ©, we need the value of the angle (that is determined based on the number of menu items); then, using the given data and the values of the angle’s sine and cosine, we can get &lt;strong&gt;the polar coordinates&lt;/strong&gt; of the third point. The &lt;strong&gt;y&lt;/strong&gt; value of the pink dot in the polar coordinate system is equal to &lt;strong&gt;sin(angle)&lt;/strong&gt; multiplied by the radius &lt;strong&gt;r&lt;/strong&gt;. The &lt;strong&gt;x&lt;/strong&gt; value is equal to the &lt;strong&gt;cos(angle)&lt;/strong&gt; mutiplied by the radius &lt;strong&gt;r&lt;/strong&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-circ-menu-points.svg&quot; alt=&quot;&quot; /&gt;
    &lt;figcaption&gt;
        The &lt;strong&gt;y&lt;/strong&gt; polar coordinate value of the pink dot in the polar coordinate system is equal to &lt;strong&gt;sin(a)&lt;/strong&gt; (h/r) multiplied by the radius &lt;strong&gt;r&lt;/strong&gt;. The &lt;strong&gt;x&lt;/strong&gt; polar coordinate value is equal to the &lt;strong&gt;cos(a)&lt;/strong&gt; (w/r) mutiplied by the radius &lt;strong&gt;r&lt;/strong&gt;. 
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For the path data, we need the &lt;strong&gt;cartesian coordinates&lt;/strong&gt; of the point, which means that we now need to convert the polar x and y coordinates we have to cartesian coordinates. Using a simple math conversion we can transform those coordinates into cartesian coordinates &lt;strong&gt;which will represent the coordinates of the pink dot in the SVG canvas&lt;/strong&gt;. The conversion formula looks something like this (speaking in JS):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//polar to cartesian coordinates conversion&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//knowing the value of your angle in degrees..&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//get value of the angle in radians&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;angleInRadians &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;angleInDegrees &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PI&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;180.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//get the cartesian x coordinate (centerX = x coordinate of the center of the circle == 250px in our case)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerX &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; radius &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;angleInRadians&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//get the cartesian y coordinate (centerY = y coordinate of the center of the circle == 250px in our case)&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; centerY &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; radius &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;angleInRadians&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once you have all coordinates, you are ready to draw the sector.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;drawing-the-sector&quot;&gt;Drawing The Sector&#39;s Lines And Arc&lt;/h3&gt;
&lt;p&gt;Using the SVG &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; element, each sector can be drawn using one line of SVG:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;path fill=&quot;transparent&quot; stroke=&quot;#111&quot; stroke-width=&quot;2&quot; d=&quot;M250,250 l250,0 A250,250 0 0,0 466.5063509461097,125 z&quot; /&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The part we’re interested in is the content of the &lt;code&gt;d&lt;/code&gt; (= data) attribute; it is where our coodinates will come in use. Here is a colored breakdown of the path data:&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;
&lt;strong&gt;M&lt;/strong&gt;&lt;span style=&quot;color: #32BAFC&quot;&gt;250,250&lt;/span&gt; &lt;strong&gt;l&lt;/strong&gt;&lt;span style=&quot;color: orange&quot;&gt;250,0&lt;/span&gt; &lt;strong&gt;A&lt;/strong&gt;&lt;span style=&quot;color: #aaa&quot;&gt;250,250 0 0,0&lt;/span&gt; &lt;span style=&quot;color: deepPink&quot;&gt;466.5063509461097,125&lt;/span&gt; &lt;strong&gt;z&lt;/strong&gt;
&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;We’re using four path commands here: &lt;strong&gt;M&lt;/strong&gt;, &lt;strong&gt;l&lt;/strong&gt; (small L), &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;z&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;First, &lt;strong&gt;move to (M)&lt;/strong&gt; the point of coordinates 250,250—the center of the circle.&lt;/p&gt;
&lt;p&gt;Next, draw a &lt;strong&gt;line to (l)&lt;/strong&gt; the point that is at 250,0 &lt;strong&gt;&lt;em&gt;relative to the current position&lt;/em&gt;&lt;/strong&gt;. In other words, when we move to the orange dot, we are not using that point’s coordinates. We are calculating the horizontal and vertical distance of this point relative to the current position—which in this case is the center of the circle. You can, however, use the point’s coordinates if you use the &lt;strong&gt;L&lt;/strong&gt; command (capital letter), which draws a line using absolute coordinates instead of relative ones.&lt;/p&gt;
&lt;p&gt;Okay so, move from the center 250 units to the right, drawing a line in that direction.&lt;/p&gt;
&lt;p&gt;Next, draw an &lt;strong&gt;elliptical arc (A)&lt;/strong&gt; defined by: &lt;strong&gt;250,250 0 0,0&lt;/strong&gt; (we’ll get back to these shortly), from the current position to the point at 466.5063509461097,125—which are the cartesian coordinates of the pink dot. The capital letter &lt;strong&gt;A&lt;/strong&gt; command will draw an arc using absolute values; that is, it will draw an arc from the current position to the position you specify in the coordinates, and these coordiates will be absolute, &lt;em&gt;not&lt;/em&gt; relative to the current position.&lt;/p&gt;
&lt;p&gt;Then, &lt;strong&gt;close the path (z)&lt;/strong&gt;: a line is drawn from the pink dot back to the center, and the sector is complete.&lt;/p&gt;
&lt;p&gt;But what is that &lt;strong&gt;250,250 0 0,0&lt;/strong&gt; part all about?&lt;/p&gt;
&lt;p&gt;The elliptical arc command takes in a few parameters: &lt;strong&gt;(rx ry x-axis-rotation large-arc-flag sweep-flag x y)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For our circular menu, the &lt;strong&gt;250,250&lt;/strong&gt; part determines the horizontal and vertical radii (&lt;strong&gt;rx ry&lt;/strong&gt;). Both values are equal since we are drawing a &lt;em&gt;circular&lt;/em&gt; sector, not an elliptical one. You set these to be equal to the radius of the circle you are working on.&lt;/p&gt;
&lt;p&gt;For the sake of brevity, I’ll skip the next three parameters for now. What you need to know is that, for our circular menu, you need to set these three parameters to zero since we are drawing small circular arcs.&lt;/p&gt;
&lt;p&gt;Finally, the coordinates of the point to which the arc will be drawn are provided (&lt;strong&gt;x y&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;With one sector drawn, the others follow the same way. Draw as many sectors as you need. Then, the remaining sectors are rotated by the necessary angle to position them along the circle as we saw in demonstration from the previous section.&lt;/p&gt;
&lt;p&gt;Since CSS transforms on SVG elements are not supported in IE, I’ve used &lt;a href=&quot;https://sarasoueidan.com/blog/svg-transformations&quot;&gt;SVG’s native transformations&lt;/a&gt; to rotate the items. The &lt;code&gt;transform&lt;/code&gt; attribute takes three parameters: the angle of rotation, and the x and y position of the center of rotation. The center of rotation is the center of the circle at (250px, 250px), and the angle of rotation is calculated based on the number of menu items you choose in the GUI and whether the menu is a full circle or a semi circle.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;adding-icons&quot;&gt;Adding Icons To The Menu Items&lt;/h3&gt;
&lt;p&gt;Since each icon could be more than just an icon—for example, an icon and a label, or just a label, it is best if we had a “wrapper” for whatever the contents of each item’s icon will be. The first thing that comes to mind in this case is using a group element: &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;. However, &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; has its limitations as it does not come with a &lt;code&gt;viewBox&lt;/code&gt; attribute, nor does it create a coordinate system for its content to be positioned inside. The next logical option is using an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element as a wrapper.&lt;/p&gt;
&lt;p&gt;The icons &lt;em&gt;could&lt;/em&gt; be wrapped in &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; elements which will create a coordinate system for the icon’s content. That being said, I chose not to go with this option because it would have required you to get your hands dirtier with the code whenever you wanted to modify or change the icons. I wanted to make it as simple as possible. For that reason, I chose the next best option: &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; accepts a &lt;code&gt;viewBox&lt;/code&gt; attribute, and &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; accepts &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes that serve as the viewport for the &lt;code&gt;viewBox&lt;/code&gt; specified on the &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt;. Thus, combined, &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; provide us with what &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; would have provided us, plus a way to separate icon definitions from their actual use throughout the menu. Perfect.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;positioning-the-icons&quot;&gt;Positioning The Icons&lt;/h3&gt;
&lt;p&gt;We don’t have relative positioning in SVG that allows us to position an element relative to another element, but we can use &lt;a href=&quot;https://sarasoueidan.com/blog/nesting-svgs&quot;&gt;nested SVGs&lt;/a&gt; to work around that. That being said, nesting SVGs to position the icons “relative” to the sectors (or: relative to a common container, to be more accurate) would have been overkill given that we I could do it another way.&lt;/p&gt;
&lt;p&gt;My objective was to position the icons at the center of the sections and rotate them by an angle so that they look as if they are rotated &lt;em&gt;with&lt;/em&gt; the sector. Visually speaking, the icons would be positioned along a virtual line that bisects the sector’s angle, and does not extend beyond the chord joining the orange and pink dots from the previous section’s illustration.&lt;/p&gt;
&lt;p&gt;Using the SVG DOM API, we can translate the above logic into code by first determining the virtual alignment line for the icon in the middle of the sector, the maximum length of that line which we can specify after getting the point on the chord where the virtual line and the chord would intersect, and then using the SVG &lt;code&gt;getPointAtLength()&lt;/code&gt; method to specify where on that line the icon should be positioned. Then, what is left after that is simply rotating the icon by half the angle of the sector and nudging it a little bit so that its center is positioned at the point on the line that we want.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-menu-icons-alignment.svg&quot; alt=&quot;&quot; style=&quot;max-width: 600px&quot; /&gt;
	&lt;figcaption&gt;Illustration showing icons positioned along a virtual line inside each menu item&#39;s sector.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The two black dots in the above illustration show the position of the icon along the line (that we can get using &lt;code&gt;getPointAtLength()&lt;/code&gt;) and the point of intersection of the line with the sector’s chord. The range control in the app’s GUI that allows you to change the position of the icon inside each item actually changes the result of &lt;code&gt;getPointAtLength()&lt;/code&gt;, making sure it does not exceed the point of intersection with the chord.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;linking&quot;&gt;Linking In The Menu&lt;/h3&gt;
&lt;p&gt;Each menu item is made up of the path representing the sector shape and a &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element referencing a &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt;. These two elements are wrapped in an anchor element: &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; to make an item clickable.&lt;/p&gt;
&lt;p&gt;Just like HTML &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements, an SVG anchor also has &lt;code&gt;href&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; attributes, with one important difference: namespacing. Before the &lt;code&gt;href&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt; parts, you need to add the &lt;code&gt;xlink&lt;/code&gt; namespace such that the link would be marked up like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;a xlink:href=&quot;..&quot; xlink:title=&quot;..&quot;&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;!-- item contents --&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt; &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;/a&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, the menu generator adds the &lt;code&gt;role&lt;/code&gt; and &lt;code&gt;tabindex&lt;/code&gt; attributes for accessibility. And that’s pretty much all you need for the items.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;styling-and-interactivity&quot;&gt;About Styling And Interactivity&lt;/h3&gt;
&lt;p&gt;In the CSS version of this menu, pointer events were buggy in some browsers and &lt;code&gt;z-index&lt;/code&gt; was needed to handle stacking the elements on top of each other. With SVG, and because of the nature of elements in SVG, the pointer events are restricted to each shape without having to do anything extra. Since each shape is independent from the other and they do not overlap, no stack handling is required. Everything just works as you’d expect it to.&lt;/p&gt;
&lt;p&gt;Moreover, the SVG elements can be selected and styled in CSS. In order to make styling the elements and icons easier, I avoided adding any unnecessary presentation attributes.&lt;/p&gt;
&lt;p&gt;You can interact with the menu items and animate them independently using CSS or JavaScript. The app comes with a guide that includes a few animated examples using JavaScript. I chose the latter over CSS for browser compatibility because, again, IE does not support CSS transformations on SVG elements yet.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;SVG is very powerful, and SVG paths are one of the most powerful of its features. The very nature of SVG elements gives us more flexibility for creating and animating non-rectangular UI elements. And the fact that these elements can be drawn while remaining semantic and fully accessible gives SVG an edge for creating visually and functionally superior interfaces.&lt;/p&gt;
&lt;p&gt;I hope you found this article useful. Thank you for reading.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Extending the Color Cascade with the CSS currentColor Variable</title>
    <link href="https://sarasoueidan.com/blog/currentcolor/"/>
    <updated>2015-02-24T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/currentcolor/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	If you use Sass or LESS, then you probably already use variables in your style sheets and know how useful they are. If you don’t use a preprocessor, then you might be curious what the fuss is all about and why variables are so popular and how they can be useful. In this article, we’re going to get an overview of why variables are useful, and get acquainted with one particular variable: currentColor.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Better SVG Fallback and Art Direction With The &lt;picture&gt; Element</title>
    <link href="https://sarasoueidan.com/blog/svg-picture/"/>
    <updated>2015-02-15T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/svg-picture/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;Besides using an SVG as a background image in CSS, you can serve SVG foreground images in HTML using  one of several embedding techniques, each of which has its advantages and use cases. Unless you’re in need of interactivity or external styling, &lt;code&gt;&lt;img /&gt;&lt;/code&gt; is the standard way for loading an SVG image, but it has one disadvantage: you currently need JavaScript to provide fallback and/or change the image source for art direction. In this post, I’ll talk about a better way to do that, using the &lt;code&gt;&lt;picture&gt;&lt;/picture&gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;This is not a primer to using &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;. There are a lot of great resources in the wild that contain everything you need to know about the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element, so if you’re not familiar with it, refer to the last section of the article for a list of resources to learn all about it. That being said, the article does not require any special or strong &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; skills, as the examples are mostly self-explanatory as you will see.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
  This article is also &lt;a href=&quot;http://css-live.ru/articles/obespechenie-luchshej-rezervnoj-podderzhki-svg-i-upravlenie-oformleniem-s-pomoshhyu-elementa-picture.html&quot;&gt;available in Russian&lt;/a&gt;.
&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;the-current-img&quot;&gt;The Current &lt;code&gt;&lt;img /&gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Before getting into why &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; is a great option for SVG, let’s lay down (an overview of) the limitations and disadvantages of using &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; for responsive SVG work.&lt;/p&gt;
&lt;p&gt;Normally, if you load an SVG using an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag, you can provide fallback and change the source of the image on different viewport sizes using feature detection and media queries in JavaScript. My choice for both would be to use &lt;a href=&quot;http://modernizr.com/&quot;&gt;Modernizr&lt;/a&gt; for both; that is, unless you’re only serving one image, in which case adding Modernizr might be overwork, and something like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;logo.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;onerror&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value javascript language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;src&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;logo&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;fallback&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;png&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;onerror&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;…would be simpler and faster.&lt;/p&gt;
&lt;p&gt;Using Modernizr, you can detect browser support for SVG, and provide an alternative image &lt;code&gt;src&lt;/code&gt; for when SVG is not supported. The alternative image URL can be stored in a custom data attribute. This approach is particularly useful for when you have multiple images on the page whose &lt;code&gt;src&lt;/code&gt; you need to switch.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;logo.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data-fallback&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;logo.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using Modernizr, you can detect whether or not the browser supports SVG and then take necessary steps to provide the fallback based on the test result:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;Modernizr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;svg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// fetch fallback and replace img src with it&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also use Modernizr’s media query detection to change the img src on based on viewport width for when you want to do art direction and not load the same big SVG on smaller screens:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Modernizr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mq&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;(max-width: 640px)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// replace image source with the smaller SVG source&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You don’t need to store any URLs in data attributes in this case if you are following a specific naming convention for your images. For example, if your images are named &lt;code&gt;view-small.svg&lt;/code&gt;, &lt;code&gt;view-big.svg&lt;/code&gt;, you can just replace the &lt;code&gt;view-*&lt;/code&gt; part with the appropriate one in the JavaScript and be done with it.&lt;/p&gt;
&lt;p&gt;Now, if you want to provide a PNG or JPEG fallback for your SVG &lt;em&gt;and&lt;/em&gt; also provide different sizes of that fallback image to match the viewport size, Modernizr will also do, but it will get slightly more complicated. And the most important part is: you need JavaScript to do it.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element, we can do all that and more, without JavaScript. Well, kind of. Read on.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;the-bigger-picture&quot;&gt;The Bigger &lt;code&gt;&lt;picture&gt;&lt;/picture&gt;&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element provides us with a better JavaScript-less way to change the image we are serving based on different media queries &lt;em&gt;and&lt;/em&gt; a for providing fallback for non-supporting browsers (or browsers that can’t load the SVG for any reason).&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;loading-and-providing-fallback&quot;&gt;Loading An SVG and Providing Fallback For Non-Supporting Browsers&lt;/h4&gt;
&lt;p&gt;Let’s start with fallback first. Providing fallback for browsers that can’t load the SVG is as simple as wrapping your &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; fallback in a &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element, and referencing your SVG in a &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;path/to/image.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;path/to/fallback.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Image description&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element is just a wrapper for the elements used to load the image(s) you want and for the fallback provided with the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element. The &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element is &lt;em&gt;required&lt;/em&gt; for &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; to work and is used to provide backwards compatibility for browsers that don’t support &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; or, like our case here, browsers that can’t load or don’t support the the image(s) [type] you load in the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element is where we specify the image(s) we want. We’re specifying the type of the image we want (SVG) in the &lt;code&gt;type&lt;/code&gt; attribute, and providing the URL to that image in the &lt;code&gt;srcset&lt;/code&gt; attribute.
And that’s all there really is to it; this is how simple it is to provide fallback for an SVG image using &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;—no JavaScript is needed.&lt;/p&gt;
&lt;p&gt;You can take this even further and provide multiple fallback images that take screen resolution into account; to do that you can specify those images using the &lt;code&gt;srcset&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;path/to/logo.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;path/to/logo-1x.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;path/to/logo-2x.png 2x, path/to/logo-3x.png 3x&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Logo description&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The browser can then choose the image it finds appropriate based on the screen resolution. This is useful for when you are serving the same image size (for example, a one-size logo) but want to provide 2x and 3x versions for higher resolutions.&lt;/p&gt;
&lt;p&gt;But if you want you can take it even &lt;em&gt;further&lt;/em&gt;. With the help of the &lt;code&gt;sizes&lt;/code&gt; attribute, you can use media queries on the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; to change the fallback image size on different screen sizes, providing a bigger image for bigger screens and a smaller one for small screens.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;path/to/banner.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token attr-name&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(min-width: 640px) 80vw, 100vw&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;banner-300.jpg 300w,&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              banner-400.jpg 400w,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              banner-700.jpg 700w,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              banner-1200.jpg 1200w,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              banner-1600.jpg 1600w,&lt;/span&gt;&lt;br /&gt;              banner-2000.jpg 2000w&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;banner-default-fallback.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Banner description&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we’ve done here is we told the browser in the &lt;code&gt;sizes&lt;/code&gt; attribute what size our image will occupy on the page. In this case, if the width of the viewport is 640px or more, the image will be 80% the width of the viewport, and 100% the width otherwise.&lt;/p&gt;
&lt;p&gt;Then, in the &lt;code&gt;srcset&lt;/code&gt; attribute, we provided the browser with a list of images—they are all the same image, but in different sizes. Based on the sizes specified in &lt;code&gt;sizes&lt;/code&gt;, the browser will pick the best fit among these images and display it.&lt;/p&gt;
&lt;p&gt;If a browser does not support &lt;code&gt;srcset&lt;/code&gt; on &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, it will simply display the fallback specified in the &lt;code&gt;src&lt;/code&gt; attribute. For a detailed explanation of how this works, refer to &lt;a href=&quot;http://alistapart.com/article/responsive-images-in-practice&quot;&gt;this article&lt;/a&gt; over at A List Apart.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;art-direction&quot;&gt;Art Direction: Loading a Different SVG on Different Screen Sizes&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element we use to specify the image(s) we want comes with another attribute: &lt;code&gt;media&lt;/code&gt;. This attribute provides us with the same flexibility we have for changing background images in CSS using CSS media queries, by allowing us to pair image sources with layout conditions (the media queries) right in the source code.&lt;/p&gt;
&lt;p&gt;Since we’re serving an SVG image, we don’t need to serve multiple versions of the image for different screen resolutions because of the infinitely scalable nature of SVG which makes it look great on any resolution. (Yay!)&lt;/p&gt;
&lt;p&gt;But if we have an SVG that we’re serving on desktop—for example, a wide header image, this image could be hundreds of kilobytes in size. Serving the same big image for small screens might not be the best idea if you look at it from a performance angle. Moreover, maybe you just &lt;em&gt;don’t want&lt;/em&gt; to serve the same image on smaller sizes, but a “cropped” version of that image. I recently worked on a client project that required just that. Not only did my client want different images on smaller sizes, but the full composition was more than 100KB in size, which is obviously too much to serve on mobile devices, so we served cropped versions of that image.&lt;/p&gt;
&lt;p&gt;In such a case, you can specify different SVGs to load on different media conditions using the &lt;code&gt;media&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt;. In the &lt;code&gt;media&lt;/code&gt; attribute, you specify the media conditions similar to how you do it in CSS media queries.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(max-width: 640px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;header--small.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;(max-width: 1024px)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;header--medium.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;header--full.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;header--default-fallback.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Header description..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, you can specify different fallback images for different resolutions and sizes, similar to what we did in the previous section. For the sake of brevity, I’m going to skip that step in this section, but you get the picture. (See what I did there?)&lt;/p&gt;
&lt;p&gt;You can also specify multiple sizes of each SVG image and let the browser pick the one it finds best, like we did for the fallback image before. However, due to the scalable nature of SVG, this might not be necessary.&lt;/p&gt;
&lt;p&gt;As a matter of fact, the options the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element comes with cover practically any scenario. &lt;a href=&quot;https://dev.opera.com/articles/responsive-images/&quot;&gt;This article&lt;/a&gt; on the dev.opera blog covers a lot of these use cases with practical examples and snippets to help you get started.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So, you see, with the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element, we no longer need to use JavaScript to provide fallback and/or change the image based on different media conditions. Well, kind of…&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;browser-support-and-polyfilling&quot;&gt;Browser Support and Polyfilling&lt;/h3&gt;
&lt;p&gt;At the time of writing of this article, browser support for &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; isn’t at its best, but it is getting better. A lot of smart people are working on &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; implementation across browsers. Keep an eye on &lt;a href=&quot;http://caniuse.com/#feat=picture&quot;&gt;the compatibility table over at CanIUse.com&lt;/a&gt; to stay up-to-date on browser support in the future.&lt;/p&gt;
&lt;p&gt;In the meantime, and until browser support becomes more decent, you can use a JavaScript polyfill for non-supporting browsers. So yes, we do need JavaScript at the moment, but the code you write will be future-proof and all you need to do in the future when support gets better is to remove the polyfill, and your code will work without it as expected. Using &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; you’d need to do much more, or, at least, just keep using Javacript.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://scottjehl.github.io/picturefill/&quot;&gt;Picturefill&lt;/a&gt; polyfill by the folks at the Filament Group is the current de facto for cross-browser &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; support today. The polyfill homepage contains extensive documentation on how to use the polyfill and tips on using &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; in general along with general patterns.&lt;/p&gt;
&lt;p&gt;Using the polyfill is as simple as including the script in your page’s &lt;code&gt;head&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;picturefill.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; attribute tells the browser that it can load picturefill asynchronously, without waiting for it to finish before loading the rest of the document. According to the Picturefill documentation, If you add this attribute, you’ll need to add a line of script before the script tag as well to allow older browsers to recognize &lt;code&gt;picture&lt;/code&gt; elements if it encounters them in the page before Picturefill has finished loading.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Picture element HTML5 shiv&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;picture&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;picturefill.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are &lt;a href=&quot;http://www.paulirish.com/2011/the-history-of-the-html5-shiv/&quot;&gt;familiar with HTML5 Shiv&lt;/a&gt;, then you already know what this line is needed for. As a matter of fact, if you are already including a recent version of the HTML5 Shiv (sometimes packaged with Modernizr), you may not need this line as it is included there as well.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;fixing-ie9&quot;&gt;Fixing IE9&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;While most versions of IE (even older ones!) are supported [by Picturefill] well, IE9 has a little conflict to work around. To support IE9, you will need to wrap a &lt;code&gt;video&lt;/code&gt; element wrapper around the &lt;code&gt;source&lt;/code&gt; elements in your &lt;code&gt;picture&lt;/code&gt; tag. You can do this using conditional comments.
— &lt;a href=&quot;http://scottjehl.github.io/picturefill/&quot;&gt;Picturefill homepage&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As the documentation says, the polyfill provides support for &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; across browsers, but IE9 requires that you wrap your &lt;code&gt;source&lt;/code&gt; elements in a &lt;code&gt;video&lt;/code&gt; tag. And since this fix is only required for IE9, you can place it in IE9-targeting conditional comments:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!--[if IE 9]&gt;&amp;lt;video style=&quot;display: none;&quot;&gt;&amp;lt;![endif]--&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;source&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;srcset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!--[if IE 9]&gt;&amp;lt;/video&gt;&amp;lt;![endif]--&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;picture&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;foreground-svg-images&quot;&gt;Foreground SVG Images with Interactivity and Styleability&lt;/h3&gt;
&lt;p&gt;As mentioned at the beginning of the article, the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element, and naturally the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element, only allow you to load a static SVG image, or an SVG with animations defined internally. If you need to load a foreground image and you want that image to be interactive and styleable, you can use one of four available ways: &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt; and inline &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Both the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; come with a default fallback mechanism.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;object&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image/svg+xml&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- fallback here --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;iframe&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;image.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- fallback here --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;iframe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An inline &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; requires a different approach to provide fallbacks; one such approach uses the &lt;code&gt;&amp;lt;foreignObject&amp;gt;&lt;/code&gt; element. You can read all about it &lt;a href=&quot;http://www.kaizou.org/2009/03/inline-svg-fallback/&quot;&gt;here&lt;/a&gt;. Chris has also written about providing fallback for SVG &lt;a href=&quot;http://css-tricks.com/svg-fallbacks/#the-fallbacks&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;While using &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; currently does require adding a JavaScript polyfill, using standard HTML5 markup and getting the flexibility of switching images using native elements is extremely powerful, and plugging the polyfill in is as easy as 1. download it, 2. add script to page, 3. you’re done. It’s absolutely worth it if you are doing art direction or providing fallback for multiple foreground SVG images.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; is more likely to become the standard way for art-directing SVG and providing &lt;code&gt;img&lt;/code&gt; fallback in the future, so why start using it today? Both &lt;code&gt;img&lt;/code&gt; way and the new &lt;code&gt;picture&lt;/code&gt; require some JavaScript—for now, but the latter is definitely cleaner and more future-proof. Yes, &lt;code&gt;img&lt;/code&gt; is also future-proof, but at some point, you get to ditch the polyfill and keep your code unchanged if you use &lt;code&gt;picture&lt;/code&gt;, while &lt;code&gt;img&lt;/code&gt; will either require you to keep using JavaScript &lt;em&gt;or&lt;/em&gt; refactor your markup to make the switch to JavaScript-less &lt;code&gt;picture&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Whether you decide to start using &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; for SVG today or not, it is definitely worth getting to know better and using it for serving other responsive image formats. So here is a list of recommended articles to get you up and running:&lt;/p&gt;
&lt;h3 id=&quot;recommended-reading-on-%3Cpicture%3E&quot; tabindex=&quot;-1&quot;&gt;Recommended Reading on &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/responsive/picture-element/&quot;&gt;Introducing the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.opera.com/articles/native-responsive-images/&quot;&gt;Native Responsive Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://alistapart.com/article/responsive-images-in-practice&quot;&gt;Responsive Images in Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.opera.com/articles/responsive-images/&quot;&gt;Responsive Images: Use Cases and Documented Code Snippets to Get You Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://demosthenes.info/blog/936/Responsive-Images-For-Designers-The-HTML5-picture-element&quot;&gt;Responsive Images For Designers: The HTML5 picture element&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>I Wrote A CSS Reference.</title>
    <link href="https://sarasoueidan.com/blog/codrops-css-reference/"/>
    <updated>2015-02-04T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/codrops-css-reference/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;Yesterday, we finally released a long-awaited project over at Codrops: &lt;a href=&quot;http://tympanus.net/codrops/css_reference/&quot;&gt;Codrops&#39; new &lt;strong&gt;CSS Reference&lt;/strong&gt;&lt;/a&gt;, authored by yours truly. Even though
I wrote &lt;a href=&quot;https://sarasoueidan.com/blog/codrops-css-reference/&quot;&gt;a post over at Codrops&lt;/a&gt; introducing the reference and its features, I want to share a little bit more about my experience writing it.&lt;/p&gt;
&lt;p class=&quot;note update--neutral&quot;&gt;
    Please note that as of January 2016, I am no longer the maintainer of the Codrops CSS Reference.
&lt;/p&gt;
&lt;p&gt;Thus, unlike my usual highly-technical blog posts, this is a (possibly-boring, but short!) post sharing a little more about the CSS Reference and how it came to be, and answering a couple of questions I got via Twitter since the release.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;how-it-started&quot;&gt;How It All Started&lt;/h3&gt;
&lt;p&gt;I started writing for Codrops in 2013. Some time at the end of the year, I was thinking to myself: “Codrops would be an ultimate CSS reference if it had a CSS reference” (no pun intended). I thought that it would be fantastic if we had a CSS reference at hand for when someone needs to learn more about a specific CSS property used in one of the many creative demos found there. This idea came to my mind since I used to google for some of the properties I saw in the Codrops demos when I first started learning CSS and checking Codrops out regularly.&lt;/p&gt;
&lt;p&gt;Around the same time that year, Manoela approached me with the same idea. It was an idea in my head, and part of a vision that Manoela and Pedro have for Codrops. It was only a few days later that I started digging into CSS specifications and writing the reference entries.&lt;/p&gt;
&lt;p&gt;It took around 7–8 months to finish all of the entries. During that time, I had little time for side projects, but I did keep writing—albeit sporadically—on my blog and other blogs such as A List Apart, among others.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;writing-the-entries&quot;&gt;Writing The Reference Entries&lt;/h3&gt;
&lt;p&gt;One of the main reasons I looked forward to starting the journey of writing the reference was knowing how much I will learn in the process. For me, that was enough of a reason to instantly say yes when Manoela approached me with the idea.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
One of the main reasons I looked forward to starting the journey of writing the reference was knowing how much I will learn in the process.
&lt;/blockquote&gt;
&lt;p&gt;I knew it was a chance for me to know much more about CSS than I would otherwise know in such a short period of time. In order to write the description and information about a specific CSS feature, I had to dig deeper than I usually do into the specification where that CSS feature is defined.&lt;/p&gt;
&lt;p&gt;As many of you may know, the specifications don’t &lt;em&gt;always&lt;/em&gt; contain everything you need to know about a property, and the writing style is not always the clearest (which is one of the reasons we wrote the reference, too!), so I had to do a lot of research for many of the entries, reading great resources here and there, picking up a lot of knowledge and getting a lot of “ah-ha” moments in the process. There was &lt;em&gt;a lot&lt;/em&gt; about CSS that I didn’t know, and that I &lt;em&gt;still&lt;/em&gt; don’t know.&lt;/p&gt;
&lt;p&gt;I wrote the CSS entries the same way and same style I usually write my articles. Now, some entries are exceptions because they don’t require a lot of elaboration. For example, properties like &lt;code&gt;border-color&lt;/code&gt; are self-explanatory, so the tone of those entries is more “official” and less “me”.
&lt;br /&gt;So, if you happen to enjoy my writing style, I can tell will enjoy reading the reference entries too.&lt;/p&gt;
&lt;p&gt;Manoela and Pedro gave me a lot of freedom and flexibility to write the reference at my own pace and my own schedule and time, making sure I still had the time to work on other things as well so that writing the reference does not limit my creativity, my other client work, my blog, and, of course, my life!&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;releasing-the-reference&quot;&gt;Releasing The Reference&lt;/h3&gt;
&lt;p&gt;I can’t even begin to describe how excited I was to finally get to the point of releasing the reference! I usually get super nervous (read: almost get a heart attack) before publishing a blog post on my own low-profile blog, so publishing &lt;strong&gt;more than 300&lt;/strong&gt; short to long articles on Codrops was extremely overwhelming and nerve-wrecking. I can always hear my heart beat when I tweet about a new blog post, and I certainly did when we finally got the word out about the reference.&lt;/p&gt;
&lt;p&gt;It took us a little over a year to release the reference because of the amount of work each of us at Codrops had, besides the reference. 2014 was the year I started speaking at conferences, and in the second half of it (i.e. after having finished writing the entries) I got my hands full with conference work, writing, and other stuff that took my attention away from the reference for some time. But we finally made it.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;questions&quot;&gt;Questions&lt;/h3&gt;
&lt;p&gt;I got a few of questions from followers and commenters, and two of these questions kept popping up.&lt;/p&gt;
&lt;h4 id=&quot;is-it-%E2%80%9Cthe-new-mdn%E2%80%9D%3F&quot; tabindex=&quot;-1&quot;&gt;Is it “the new MDN”?&lt;/h4&gt;
&lt;p&gt;No, it’s not. At least it wasn’t our goal to make it so. It’s not even meant as competition to any other CSS Reference out there. It is simply another knowledge base added to what Codrops already offers on a regular basis.&lt;/p&gt;
&lt;p&gt;I write about CSS (and SVG) a lot—be it on my blog, on Codrops, or one of the several other places I write at. The CSS Reference is, for me, simply an archive where I collected &lt;strong&gt;blog posts&lt;/strong&gt; about a specific topic (CSS, in this case), and organized them in a way that is easier to browse and simpler for my readers to find what they are looking for.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
The CSS Reference is, for me, simply an archive where I collected &lt;strong&gt;blog posts&lt;/strong&gt; about a specific topic (CSS, in this case), and organized them in a way that is easier to browse and simpler for my readers to find what they are looking for.
&lt;/blockquote&gt;
&lt;p&gt;I sometimes even think of it as a book! Instead of writing a printed CSS book, I wrote an online book, that is open to your contributions and suggestions via a Github repo that we shared on Codrops. So it has an advantage over a regular book in that you, my dear readers, get to pinpoint any miskates, errors, ask for additions and suggestions, etc.&lt;/p&gt;
&lt;h4 id=&quot;why-didn%E2%80%99t-you-contribute-to-mdn-instead%3F&quot; tabindex=&quot;-1&quot;&gt;Why didn’t you contribute to MDN instead?&lt;/h4&gt;
&lt;p&gt;I honestly don’t understand the reasoning behind this question. I mean, why would I &lt;em&gt;not&lt;/em&gt; write the reference and choose to contribute to MDN &lt;em&gt;instead&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;That being said, I did mention a few reasons earlier why I chose to write the reference. Add to those that I love Codrops, and Manoela and Pedro gave me a lot of freedom and flexibility to give the reference its own character and style. They asked me to write it &lt;em&gt;because&lt;/em&gt; they liked my writing style, and thus gave me the freedom to structure the entries the way I wanted. We did have some specifics—for example, the sections for the official syntax, browser support, etc. that we needed to have in every entry, and the rest was all up to me to write my own way.&lt;/p&gt;
&lt;p&gt;Now, I don’t know if MDN would have allowed me to do the same, but Manoela knows how much I value the freedom and flexibility of work in my work, and she gave me just that, making the experience much more enjoyable, and feeling a lot less as a task or job.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;Writing the CSS reference has been a wonderful experience, and I am happy to have gotten the chance to do it. I know I haven’t literally written a book here (as in: a &lt;em&gt;printed&lt;/em&gt; book), but I like to think that I have—maybe because it makes me feel a &lt;em&gt;liiiitle bit&lt;/em&gt; less guilty for not having started writing my SVG book yet!&lt;/p&gt;
&lt;p&gt;I wholeheartedly hope you like it, find it useful, and learn from it as much as I have learned from writing it. Your feedback on Twitter, in the comments and your contributions in the Github repo have been amazing—thank you so much for your support!&lt;/p&gt;
&lt;p&gt;And thank you for reading this post, &lt;em&gt;and&lt;/em&gt; reading the reference entries in the future.&lt;/p&gt;
&lt;p&gt;–S&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Compositing And Blending In CSS</title>
    <link href="https://sarasoueidan.com/blog/compositing-and-blending-in-css/"/>
    <updated>2015-01-27T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/compositing-and-blending-in-css/</id>
    <content type="html">&lt;p&gt;If you’re a designer, then you’ve probably already come across blending effects some time or the other. Blending is one of the most frequently used effects in graphic and print design. You can add texture to text by blending it with its textured backdrop, create an illusion of &lt;em&gt;merged&lt;/em&gt; images by blending these images together, and create a wide range of colorful effects that would not be possible without that fine level of color blending control.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/blending-examples.png&quot; /&gt;
	&lt;figcaption&gt;Examples of typographic and image effects created using CSS blend modes. See following sections for live demos.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Graphics editors such as Photoshop or Illustrator come with a set of blending &lt;em&gt;modes&lt;/em&gt;. &lt;strong&gt;Blend modes&lt;/strong&gt; allow you to specify &lt;em&gt;how&lt;/em&gt; you want your elements to blend together, thus changing the colors of the area where these elements intersect. Each mode uses a specific color formula to mix the colors of the &lt;em&gt;source&lt;/em&gt; and the &lt;em&gt;destination&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Different modes give different end results. Before we talk about the different blend modes, and since we mentioned the &lt;strong&gt;source&lt;/strong&gt; and &lt;strong&gt;destination&lt;/strong&gt; elements, let’s have a quick look at the concept of compositing, and how it is related to blending in CSS.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;compositing&quot;&gt;What Is Compositing?&lt;/h3&gt; 
&lt;p&gt;Compositing is the combining of a graphic element with its &lt;em&gt;backdrop&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;backdrop&lt;/strong&gt; is &lt;strong&gt;the content behind the element&lt;/strong&gt; and is what the element is composited with.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/backdrop.png&quot; alt=&quot;Backdrop Visual Illustration&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Compositing defines how what you want to draw will be blended with what is already drawn on the canvas. The &lt;strong&gt;source&lt;/strong&gt; is what you want to draw, and the &lt;strong&gt;destination&lt;/strong&gt; is what is already drawn (the backdrop).&lt;/p&gt;
&lt;p&gt;So, if you have two elements, and these elements overlap, you can think of the element on top as being the source, and the parts of the element behind that lie beneath it, will be the destination.&lt;/p&gt;
&lt;p&gt;Using different composite operations (there are 16 operations), you can specify which parts of the two overlapping elements will be drawn, and which will not.&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/porter-duff.png&quot; alt=&quot;Porter Duff Compositing Operations Visual&quot; /&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;These composite operations are known as &lt;strong&gt;Porter Duff compositing operations&lt;/strong&gt;. These operations specify what portions of the source and destination will be drawn, and blend modes specify how how the colors from the graphic element (source) and the backdrop (destination) interact. The illustrations in the above image are from the Compositing and Blending spec.
In HTML5 Canvas context, these oprations are specified using the &lt;code&gt;globalCompositeOperation&lt;/code&gt; property, and can be used to clip backgrounds to specific shapes, such as text, thus creating the effect of texture-filled text in Canvas. I have written about this process in &lt;a href=&quot;http://tympanus.net/codrops/2013/12/02/techniques-for-creating-textured-text/&quot;&gt;this article&lt;/a&gt; over at Codrops.&lt;/p&gt;
&lt;p&gt;Together, Porter Duff Compositing and blending form the overall compositing operation for intersecting elements. According to the specification, “typically, the blending step is performed first, followed by the Porter-Duff compositing step. In the blending step, the resultant color from the mix of the element and the the backdrop is calculated. The graphic element’s color is replaced with this resultant color. The graphic element is then composited with the backdrop using the specified compositing operator.”&lt;/p&gt;
&lt;p&gt;Therefore, the way two intersecting or overlapping elements are handled is by blending their colors based on a blend mode, and then drawing only the parts specified by the composite operation.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In CSS, we have no way to specify a composite operation. The default composite operation used is &lt;code&gt;source-over&lt;/code&gt;. Both the source and the destination elements remain, and the area where they intersect is blended using the blend mode specified.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Before the &lt;a href=&quot;http://www.w3.org/TR/compositing-1/&quot;&gt;Compositing and Blending specification&lt;/a&gt; was introduced, CSS allowed one type of composite operations: simple alpha compositing. This is what the &lt;code&gt;opacity&lt;/code&gt; property is for. By changing an element’s opacity, the browser makes it translucent so that the colors of its backdrop can show through.&lt;/p&gt;
&lt;p&gt;Today, two main properties exist that allow us to blend elements and backround images by specifying one of 16 available blend modes. These two properties are &lt;code&gt;background-blend-mode&lt;/code&gt; and &lt;code&gt;mix-blend-mode&lt;/code&gt;. Let’s get to know each.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;background-blend-mode&quot;&gt;Blending Background Layers: The &lt;code&gt;background-blend-mode&lt;/code&gt; Property&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;background-blend-mode&lt;/code&gt; property, as its name suggests, is used to specify a blend mode for an element’s background layer. A background layer can be an image, or the background color.&lt;/p&gt;
&lt;p&gt;In other words, &lt;code&gt;background-blend-mode&lt;/code&gt; allows you to blend together an element’s background image with the images and/or background color behind it.&lt;/p&gt;
&lt;p&gt;If the element has more than one background image, you can specify multiple blend modes—each blend mode will be used for a background image such that the first blend mode in the list corresponds to the first background image in the list of background images, and so on.&lt;/p&gt;
&lt;p&gt;Then, each background layer is blended with the element’s background layer that is below it and the element’s background color. Which means that, if you have two background images and a background color:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;first-image.png&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;second-image.png&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; orange&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token property&quot;&gt;background-blend-mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; screen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; multiply&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;second-image.png&lt;/code&gt; background will blend with the background color using the &lt;code&gt;multiply&lt;/code&gt; mode, and then the &lt;code&gt;first-image.png&lt;/code&gt; background will blend with the second image and the background color using the &lt;code&gt;screen&lt;/code&gt; blend mode. (Reminder: the first background image in the list is the one on top, and the ones following it are beneath it.)&lt;/p&gt;
&lt;p&gt;Note that an element’s background layers must not blend with the content that is behind the element, instead they must act as if they are rendered into an &lt;strong&gt;isolated group&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Also note that if the &lt;code&gt;background&lt;/code&gt; shorthand is used, the &lt;code&gt;background-blend-mode&lt;/code&gt; property for that element must be reset to its initial value.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;blend-modes&quot;&gt;The Blend Modes&lt;/h3&gt; 
&lt;p&gt;Okay so we’ve established that each background layer can get its own blend mode which specifies how it blends with the layers beneath it. But what blend mode options do we have?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are 16 blend modes available in CSS&lt;/strong&gt;: &lt;code&gt;normal&lt;/code&gt; (which is the default blend mode and means that no blending is applied), &lt;code&gt;multiply&lt;/code&gt;, &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;overlay&lt;/code&gt;, &lt;code&gt;darken&lt;/code&gt;, &lt;code&gt;lighten&lt;/code&gt;, &lt;code&gt;color-dodge&lt;/code&gt;, &lt;code&gt;color-burn&lt;/code&gt;, &lt;code&gt;hard-light&lt;/code&gt;, &lt;code&gt;soft-light&lt;/code&gt;, &lt;code&gt;difference&lt;/code&gt;, &lt;code&gt;exclusion&lt;/code&gt;, &lt;code&gt;hue&lt;/code&gt;, &lt;code&gt;saturation&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt; and &lt;code&gt;luminosity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each filter, when applied to an image, for example, will give a different end result—the colors of the image are going to be changed based on the mode you choose.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;normal&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;This is the default mode which specifies no blending. The blending formula simply selects the source color.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;multiply&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;The source color is multiplied by the destination color and replaces the destination. The resultant color is always at least as dark as either the source or destination color. &lt;strong&gt;Multiplying any color with black results in black. Multiplying any color with white preserves the original color.&lt;/strong&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;screen&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Multiplies the complements of the backdrop and source color values, then complements the result. The result color is always at least as light as either of the two constituent colors. &lt;strong&gt;Screening any color with white produces white; screening with black leaves the original color unchanged.&lt;/strong&gt; The effect is similar to projecting multiple photographic slides simultaneously onto a single screen.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;overlay&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Multiplies or screens the colors, depending on the backdrop color value. Source colors overlay the backdrop while preserving its highlights and shadows. The backdrop color is not replaced but is mixed with the source color to reflect the lightness or darkness of the backdrop.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;darken&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Selects the darker of the backdrop and source colors. The backdrop is replaced with the source where the source is darker; otherwise, it is left unchanged.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;lighten&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Selects the lighter of the backdrop and source colors. The backdrop is replaced with the source where the source is lighter; otherwise, it is left unchanged.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;color-dodge&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Brightens the backdrop color to reflect the source color. Painting with black produces no changes.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;color-burn&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Darkens the backdrop color to reflect the source color. Painting with white produces no change.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;hard-light&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Multiplies or screens the colors, depending on the source color value. The effect is similar to shining a harsh spotlight on the backdrop.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;soft-light&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Darkens or lightens the colors, depending on the source color value. The effect is similar to shining a diffused spotlight on the backdrop.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;difference&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Subtracts the darker of the two constituent colors from the lighter color. Painting with white inverts the backdrop color; painting with black produces no change.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;exclusion&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Produces an effect similar to that of the Difference mode but lower in contrast. Painting with white &lt;strong&gt;inverts the backdrop color&lt;/strong&gt;; painting with black produces no change.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;hue&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;saturation&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color. Painting with this mode in an area of the backdrop that is a pure gray (no saturation) produces no change.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;color&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color. This preserves the gray levels of the backdrop and is useful for coloring monochrome images or tinting color images.
&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;luminosity&lt;/code&gt;&lt;/dt&gt; 
&lt;dd&gt;Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color. This produces an inverse effect to that of the Color mode.
This mode is the one you can use to create monchrome &quot;tinted&quot; image effects like the ones you can see in different website headers.
&lt;/dd&gt;&lt;/dl&gt;
&lt;p&gt;The following image shows the result of applying the different blend modes to an image, in the same order mentioned above, starting from the top left corner.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/background-blend-mode-examples.png&quot; alt=&quot;The result of applying 16 blend modes applied to an image.&quot; /&gt;
&lt;p&gt;For more information about these blend modes, I refer you to &lt;a href=&quot;http://www.slrlounge.com/school/photoshop-blend-modes/&quot;&gt;this article&lt;/a&gt; on the SLR Lounge blog. It claims to be the ultimate visual guide to blend modes, and does include some nice explanations of the blend modes.&lt;/p&gt;
&lt;p&gt;Personally, I think that even with the definition for each mode at hand, it can be really hard (if not impossible) to predict the result of applying these modes to an image.&lt;/p&gt;
&lt;p&gt;Picking a suitable blend mode will be—in most cases—a case of trial and error. If you use Instagram you know that sometimes you just go over each of the available filters, applying them one after the other, till you get the effect you’re after. (I know I do that!)
With CSS blend modes, it’s practically the same.&lt;/p&gt;
&lt;p&gt;For that reason, I’ve created a simple interactive demo that you can use to pick the right blend mode for your effects.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/css-blender-demo-screenshot.png&quot; alt=&quot;Screenshot of the CSS Blender demo.&quot; /&gt;
&lt;figcaption&gt;Screenshot of the CSS Blender demo.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You can upload an image, and choose a background color to blend it with. The background color of the live preview (thumbnails) will live-update as you make your way around the color picker. &lt;strong&gt;Clicking on a thumbnail will preview the selected blend mode in the larger preview area.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://sarasoueidan.com/demos/css-blender&quot; class=&quot;button&quot;&gt;Try the blend modes in the demo out.&lt;/a&gt;&lt;/p&gt;
&lt;br /&gt;
&lt;p&gt;Of course, the effects will be visible only in browsers that support the &lt;code&gt;background-blend-mode&lt;/code&gt; property. &lt;strong&gt;For more information about browser support, refer to &lt;a href=&quot;http://caniuse.com/#feat=css-backgroundblendmode&quot;&gt;the compatibility table over at CanIUse.com&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;In addition to blending a background image with a background color in the interactive demo, you can also blend a piece of text with the element that has this background.&lt;/p&gt;
&lt;p&gt;But blending separate elements together requires a property other than the &lt;code&gt;background-blend-mode&lt;/code&gt; property. Let’s have a look at that next.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;mix-blend-mode&quot;&gt;Blending An Element With Elements In Its Backdrop: The &lt;code&gt;mix-blend-mode&lt;/code&gt; Property&lt;/h3&gt; 
&lt;p&gt;As we mentioned earlier, a &lt;strong&gt;backdrop&lt;/strong&gt; is &lt;strong&gt;the content behind the element&lt;/strong&gt; and is what the element is composited with.&lt;/p&gt;
&lt;p&gt;The content behind the element can be anything—including other elements. And this is where the interesting effects come in. Think fixed headers blending with the content as the page scrolls down, or text blended with an image in the background, or text blending with other text, etc.&lt;/p&gt;
&lt;p&gt;Blending elements together is done using the &lt;code&gt;mix-blend-mode&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;mix-blend-mode&lt;/code&gt; property is similar to the &lt;code&gt;background-blend-mode&lt;/code&gt; property, and takes the same blend mode values. So, you can specify any blend mode to get different blending effects.&lt;/p&gt;
&lt;p&gt;For example, the text in the following image blends with the image behind it using &lt;code&gt;mix-blend-mode: difference&lt;/code&gt;, giving the illusion of the water bubbles passing through and in front of the text. The reason this effect is established is the color inversion process of the &lt;code&gt;difference&lt;/code&gt; mode.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/mix-blend-mode-example-1.png&quot; alt=&quot;Example of text blending with an image.&quot; /&gt;
&lt;p&gt;The area of the image where it overlaps with the text is the text’s backdrop, and that is where the blending happens. You can check the live demo out &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/e90334f6ffdbb2a2cdd5604e769054e4?editors=110&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;mix-blend-mode&lt;/code&gt;, you can create many creative effects—far more than I could list in this post. One particularly interesting effect you can create is see-through text. Without CSS blend modes, you would need CSS masking and/or background clipping, along with some CSS hackery to create this effect and make it work.&lt;/p&gt;
&lt;p&gt;With blend modes, and using the &lt;code&gt;difference&lt;/code&gt; blend mode again, you can create this effect by—again—leveraging the color inversion process.&lt;/p&gt;
&lt;p&gt;The following image shows this effect in action. It is merely a piece of text, positioned on top of an image, and blended with it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://sarasoueidan.com/assets/images/see-through-text-mix-blend-mode.png&quot; alt=&quot;Example of see-through text effect created using CSS blending.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;That’s pretty cool, isn’t it? You can check the live demo out &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/887433527fac4e926e84b613be483bfc?editors=110&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is worth noting here that the colors you choose strongly affect the end result. That being said, the interactive demo can make picking the right colors for such an effect easier and faster.&lt;/p&gt;
&lt;p&gt;In the interactive demo, you have an option to add editable text to the preview area, and then style that text and blend it with the preview image using &lt;code&gt;mix-blend-mode&lt;/code&gt;. The following is a screenshot showing an example.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/css-blender-demo-screenshot-with-text.png&quot; alt=&quot;Screenshot of the CSS Blender demo.&quot; /&gt;
&lt;figcaption&gt;Screenshot of the CSS Blender demo, with a piece of text blended into the preview image.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://sarasoueidan.com/demos/css-blender&quot; class=&quot;button&quot;&gt;Check the demo out.&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Since we’re talking about blending elements together, it only makes sense that we mention stacking contexts, especially considering that they affect how and what elements can be blended together.&lt;/p&gt;
&lt;p&gt;According to the specification, applying a blend mode other than &lt;code&gt;normal&lt;/code&gt; to the element must establish a new stacking context on that element, forming a &lt;em&gt;group&lt;/em&gt;. This group must then be blended and composited with the stacking context that contains the element.&lt;/p&gt;
&lt;p&gt;Also, an element that has blending applied, must blend with all the underlying content &lt;strong&gt;&lt;em&gt;of the stacking context that that element belongs to&lt;/em&gt;&lt;/strong&gt;. It will not blend with contents outside that context.&lt;/p&gt;
&lt;p&gt;For example, the following image shows the result of mix-blending two images with the &lt;code&gt;overlay&lt;/code&gt; mode. (&lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/09efabde7114d37a736525b5ab616bc5?editors=110&quot;&gt;Live demo&lt;/a&gt;)&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/mix-blend-mode-example-2.png&quot; alt=&quot;Example of text blending with an image.&quot; /&gt;
&lt;p&gt;The code for the above simple example looks like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;div class=&quot;container&quot;&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;img src=&quot;path/to/destination.png&quot; alt=&quot;&quot; /&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;div class=&quot;img-wrapper&quot;&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;img src=&quot;path/to/source.png&quot; alt=&quot;&quot; class=&quot;source&quot;/&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;/div&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;lt;&quot;&gt;&amp;amp;lt;&lt;/span&gt;/div&lt;span class=&quot;token entity named-entity&quot; title=&quot;&amp;gt;&quot;&gt;&amp;amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ve wrapped the image on top (the &lt;code&gt;.source&lt;/code&gt;) in a &lt;code&gt;div&lt;/code&gt; that I’m going to create a stacking context on. Since the &lt;code&gt;opacity&lt;/code&gt; property leads to the creation of a new stacking context when given a value other than th default (&lt;code&gt;1&lt;/code&gt;), I’m going to use that.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.img-wrapper&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .99&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Try it in the &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/09efabde7114d37a736525b5ab616bc5?editors=110&quot;&gt;live demo&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;By creating a stacking context, the &lt;code&gt;.source&lt;/code&gt; image no longer blends with the bottom image, because the latter lies outside the stacking context containing the former.&lt;/p&gt;
&lt;p&gt;This is because we have &lt;strong&gt;&lt;em&gt;isolated&lt;/em&gt;&lt;/strong&gt; the image (and any other contents of the &lt;code&gt;.img-wrapper&lt;/code&gt; context) from the rest of the elements, and thus they don’t blend with their backdrops anymore.&lt;/p&gt;
&lt;p&gt;This brings us to the &lt;code&gt;isolation&lt;/code&gt; property. But before we move on, note that the &lt;code&gt;mix-blend-mode&lt;/code&gt; property also applies to SVG elements, and can be used to blend overlapping SVG elements together as well. As a matter of fact, the logo for the CSS Blender demo is a result of applying a &lt;code&gt;mix-blend-mode&lt;/code&gt; to the three squares that make the demo up. You can see how the areas where these squares overlap have different colors due to the color blending applied.&lt;/p&gt;
&lt;p&gt;Browser support for the &lt;code&gt;mix-blend-mode&lt;/code&gt; property is not as wide as that of the &lt;code&gt;background-blend-mode&lt;/code&gt; property. For details, refer to &lt;a href=&quot;http://caniuse.com/#feat=css-mixblendmode&quot;&gt;the browser compatibility table over at CanIUse.com&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;isolation&quot;&gt;Isolating Elements: The &lt;code&gt;isolation&lt;/code&gt; Property&lt;/h3&gt; 
&lt;p&gt;When a property that leads to the creation of a stacking context is applied to an element, that element is said to be &lt;strong&gt;isolated&lt;/strong&gt;. The last example in the previous section is an example of this happening.&lt;/p&gt;
&lt;p&gt;On the other hand, you can use the &lt;code&gt;isolation&lt;/code&gt; property to isolate elements.&lt;/p&gt;
&lt;p&gt;In SVG, this property defines whether an element is isolated or not. For CSS, setting &lt;code&gt;isolation&lt;/code&gt; to &lt;code&gt;isolate&lt;/code&gt; will turn the element into a stacking context, and thus affect whether or not the element’s contents can blend with their backdrop lying outside this context. By default, the &lt;code&gt;isolation&lt;/code&gt; property is set to &lt;code&gt;auto&lt;/code&gt;—which implies that they are not isolated.&lt;/p&gt;
&lt;p&gt;If we were to go back to the previous example with the two blended images, we can prevent the image on top from blending with the image behind it by using the &lt;code&gt;isolation&lt;/code&gt; property instead of the &lt;code&gt;opacity&lt;/code&gt; property.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.img-wrapper&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;isolation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; isolate&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has the same effect as using &lt;code&gt;opacity&lt;/code&gt; in the previous example. If you use this rule instead of &lt;code&gt;opacity&lt;/code&gt; in the live demo, you will get the same result.&lt;/p&gt;
&lt;p&gt;Note that by creating a stacking context on an element, you are isolating the content of that element and preventing them from blending with the backdrop of that element. However, you can still apply a blend mode to the entire context to blend it with its backdrop.&lt;/p&gt;
&lt;p&gt;Moreover, If you are using the&lt;code&gt;background-blend-mode&lt;/code&gt; property, the &lt;code&gt;isolation&lt;/code&gt; property is not needed since background layers must not blend with the content that is behind the element, instead they must act as if they are rendered into an isolated group (the element itself), as specified in the specification. This is why the &lt;code&gt;isolation&lt;/code&gt; property will have an effect when used with the &lt;code&gt;mix-blend-mode&lt;/code&gt; property, but not with the &lt;code&gt;background-blend-mode&lt;/code&gt; property.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;order-of-operations&quot;&gt;Note: Order Of Graphical Operations&lt;/h3&gt; 
&lt;p&gt;CSS blending modes, &lt;a href=&quot;http://www.w3.org/TR/filter-effects-1/&quot;&gt;filters&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/css-masking-1/&quot;&gt;masks&lt;/a&gt;, can all be applied to the same element. But which effect is applied first?&lt;/p&gt;
&lt;p&gt;According to the specification, first any filter effect is applied, then any clipping, masking, blending and compositing.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt; 
&lt;p&gt;With all the graphical operations available to us via CSS, we are getting more possibilities for designing in the browsers—this is particularly interesting if you—like me—are not into graphics editors and don’t know your way around them well.&lt;/p&gt;
&lt;p&gt;The web platform team at Adobe have been doing a tremendous job bringing many of their tools’ graphical capabilities to the web. From filters, to blend modes, clipping and masking, and even &lt;a href=&quot;http://sarasoueidan.com/blog/css-shapes&quot;&gt;CSS Shapes&lt;/a&gt;, we are gaining more control over layout and graphics on the web.&lt;/p&gt;
&lt;p&gt;Many creative effects can be created using CSS blend modes, and when combined with other technologies, they open a door to endless creative possibilities.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I hope you liked this article and found it useful.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Useful SVGO[ptimization] Tools</title>
    <link href="https://sarasoueidan.com/blog/svgo-tools/"/>
    <updated>2015-01-26T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/svgo-tools/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;One of the steps you need to do when working with SVG is optimizing the SVG code after exporting it from the editor and before embedding in on your web page. For that, several standalone optimization tools exits. The two tools I usually mention in my &lt;a href=&quot;http://www.smashingmagazine.com/2014/11/03/styling-and-animating-svgs-with-css/&quot;&gt;articles&lt;/a&gt; and &lt;a href=&quot;http://slides.com/sarasoueidan/working-with-svg-a-primer#/&quot;&gt;talks&lt;/a&gt; are &lt;a href=&quot;http://petercollingridge.appspot.com/svg-editor&quot;&gt;Peter Collingridge&#39;s online editor&lt;/a&gt;, and &lt;a href=&quot;https://github.com/svg/svgo&quot;&gt;SVGO&lt;/a&gt;. In this article, I&#39;m going to introduce you to a new SVGO Tool that provides us with everything Peter&#39;s tool does, and a bit more.&lt;/p&gt;
&lt;p&gt;This is not to say that peter’s tool is no longer useful—it certainly is. But if you use SVGO, then you know how convenient it is with all the available tools it comes with.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;what-is-svgo&quot;&gt;What is SVGO?&lt;/h3&gt;
&lt;p&gt;For those of you who are not familiar with SVGO: it is a node-js based SVG optimization tool. (SVGO is an abbreviation for &lt;strong&gt;SVG Optimization&lt;/strong&gt;). It comes with a set of tools and plugins that make it a great tool that you can integrate into almost any kind of workflow. (We’ll go over these tools shortly.)&lt;/p&gt;
&lt;p&gt;However, SVGO has one disadvantage: it can easily break your SVG—especially if it is animated or scripted, the document structure will change and eventually break any animations or scripting applied.&lt;/p&gt;
&lt;p&gt;Even with the many SVGO tools and plugins available, unfortunately, we had no way to preview the result of applying SVGO optimizations to an SVG, to tell whether they will break it or not… until now.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;introducing-svgomg&quot;&gt;Introducing SVGOMG&lt;/h3&gt;
&lt;p&gt;Last month, when I wrote the &lt;a href=&quot;http://calendar.perfplanet.com/2014/tips-for-optimising-svg-delivery-for-the-web/&quot;&gt;SVG performance article&lt;/a&gt; for Perf Calendar, Google’s &lt;a href=&quot;http://twitter.com/jaffathecake&quot;&gt;Jake Archibald&lt;/a&gt; tech-reviewed the article. And while discussing the code optimization section, I mentioned how SVGO lacks a GUI that allows us to preview the result of running the optimizations on our SVGs, and  how it should be used with caution because of that.&lt;/p&gt;
&lt;p&gt;A week or two later, Jake made the &lt;a href=&quot;http://jakearchibald.github.io/svgomg/&quot;&gt;SVGOMG GUI&lt;/a&gt;—an interface that allows you to optimize SVGs by selecting your optimizations, and getting a live preview of how your SVG looks with these optimizations applied.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/svgomg.png&quot; alt=&quot;Screenshot of the SVGOMG GUI.&quot; /&gt;
&lt;figcaption&gt;Screenshot of the SVGOMG GUI.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you’ve used Peter’s tool before, you can expect the same from SVGOMG, and &lt;em&gt;more&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You can upload an SVG file, paste SVG code in, or load the default demo SVG—if you’re just trying the app out. A set of options will then be revealed on the right side of the screen (see screenshot above). These options represent the optimizations built into SVGO. The SVGO optimizations are plugins that you can enable and disable as needed, and SVGOMG offers you a visual way of doing so.&lt;/p&gt;
&lt;p&gt;The live preview section will update as you choose your optimizations, allowing you to detect and disable any optimizations that would break your SVG.&lt;/p&gt;
&lt;p&gt;In the top right corner, you can see the current file size and the optimization percentage. You also have an option to show the original SVG—which will also display the original file size, to compare your it to your optimized version.&lt;/p&gt;
&lt;p&gt;SVGOMG is an online tool. But if you know Jake then you’ll probably expect it to also work offline, considering that he might just be the biggest proponent of ServiceWorker and offline-first out there. He has written about it a lot &lt;a href=&quot;http://jakearchibald.com/&quot;&gt;on his blog&lt;/a&gt;. Thus—expectedly—&lt;strong&gt;the GUI works offline too&lt;/strong&gt; in any browser that’s got ServiceWorker. (For an overview of the state of ServiceWorker, refer to &lt;a href=&quot;https://jakearchibald.github.io/isserviceworkerready/&quot;&gt;this browser compatibility page&lt;/a&gt;.) Once you’ve opened the app (try it in Chrome, for example), you will get a notification a couple of seconds later telling you that the GUI is ready to work offline.&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/svgomg-offline.png&quot; alt=&quot;Screenshot of SVGOMG showing the notification that the GUI works offline.&quot; /&gt;
&lt;figcaption&gt;Screenshot of SVGOMG showing the notification that the GUI works offline.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Very&lt;/em&gt; useful, isn’t it?&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;other-svgo-tools&quot;&gt;Other SVGO Tools&lt;/h3&gt;
&lt;p&gt;There are quite a few SVGO plugins available that can be used in a variety of ways, depending on your preferred workflow:&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;adobe-illustrator-plugin&quot;&gt;Adobe Illustrator Plugin&lt;/h4&gt;
&lt;p&gt;A GUI allowing you to select the optimizations you want to apply also exists in another SVGO tool called &lt;a href=&quot;https://github.com/davidderaedt/SVG-NOW&quot;&gt;&lt;strong&gt;SVG NOW&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/svgnow.png&quot; alt=&quot;SVG NOW plugin logo.&quot; /&gt;
&lt;p&gt;SVG NOW is an Illustrator plugin that brings SVGO’s optimizations into Illustrator. It is an alternative SVG exporter for AI, aimed at optimizing SVG files by post-processing the generated SVG code using SVGO. This is useful for sure, &lt;strong&gt;but SVG NOW does not show you a live preview of how the SVG is affected by the optimizations you choose&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;inkscape-plugin&quot;&gt;Inkscape Plugin&lt;/h4&gt;
&lt;p&gt;Similar to SVG NOW, &lt;a href=&quot;https://github.com/juanfran/svgo-inkscape&quot;&gt;&lt;strong&gt;SVGO-Inkscape&lt;/strong&gt;&lt;/a&gt; is an Inkscape plugin that allows you to remove a lot of redundant and useless information such as editor metadata, comments, hidden elements, default or non-optimal values and other stuff generated by Inkscape and that can be safely removed or converted without affecting SVG rendering result.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;sketch-plugin&quot;&gt;Sketch Plugin&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/BohemianCoding/svgo-compressor&quot;&gt;SVGO Compressor&lt;/a&gt; is the Sketch version of the SVGO plugin, which compresses SVG assets using SVGO, right when you export them. As with other SVGO tools, there’s no way of telling how the exported SVG will be affected by the optimizations applied.&lt;/p&gt;
&lt;p&gt;From my personal experience I’ve found that SVGs exported using Sketch were more likely to break when optimized with SVGO, because of how Sketch exports certain SVG shapes using clip paths and masks. So it’s useful to remember that you might need to re-export and re-optimize the SVG another way if and when this happens.&lt;/p&gt;
&lt;p&gt;Note that the plugin &lt;em&gt;requires&lt;/em&gt; Sketch 3.8, and so it won’t work with older versions of the application.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;drag-n-drop-gui&quot;&gt;Drag&#39;n&#39;Drop GUI&lt;/h4&gt;
&lt;p&gt;Another kind of GUI for SVGO exists — called &lt;a href=&quot;https://github.com/svg/svgo-gui&quot;&gt;&lt;strong&gt;SVGO GUI&lt;/strong&gt;&lt;/a&gt; — that allows you to drag-and-drop your SVGs and then optimizes those SVG on-the-fly, replacing your original ones with the optimized versions.&lt;/p&gt;
&lt;img src=&quot;https://sarasoueidan.com/assets/images/svgogui.png&quot; alt=&quot;Screenshot of the SVGO GUI.&quot; /&gt;
&lt;p&gt;This GUI is useful for quick bulk optimizations, but it risky considering that 1) you cannot preview the optimized SVG 2) your original SVGs are instantly replaced by the optimized versions, which means that your SVGs might break, and the broken ones will replace the original ones. If you’re going to use this GUI, make sure you have a backup before you optmize.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;grunt-and-gulp-plugins&quot;&gt;Grunt and Gulp Plugins&lt;/h4&gt; 
&lt;p&gt;SVGO is probably mostly known for its &lt;a href=&quot;https://github.com/sindresorhus/grunt-svgmin&quot;&gt;&lt;strong&gt;Grunt plugin&lt;/strong&gt;&lt;/a&gt;, and its sister the &lt;a href=&quot;https://github.com/ben-eb/gulp-svgmin&quot;&gt;&lt;strong&gt;Gulp plugin&lt;/strong&gt;&lt;/a&gt;. Both of these plugins allow you to enable and disable SVGO optimizations as needed.
For example, a default SVGO optimization will remove the &lt;code&gt;viewBox&lt;/code&gt; attribute from your SVG. This is something you should completely avoid, because, without the &lt;code&gt;viewBox&lt;/code&gt; attribute, the SVG cannot be &lt;a href=&quot;http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/&quot;&gt;made responsive&lt;/a&gt;. (For more information about the &lt;code&gt;viewBox&lt;/code&gt; attribute, refer to my tutorial &lt;a href=&quot;http://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;When you set up SVGO in Grunt, for example, you can disable any plugins you want. For example, to disable removing the &lt;code&gt;viewBox&lt;/code&gt;, add &lt;code&gt;removeViewBox: false&lt;/code&gt; to the &lt;code&gt;Plugins&lt;/code&gt; object in your configuration file.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Source: https://github.com/sindresorhus/grunt-svgmin&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;grunt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;initConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;svgmin&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token literal-property property&quot;&gt;removeViewBox&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token literal-property property&quot;&gt;removeUselessStrokeAndFill&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token literal-property property&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token string-property property&quot;&gt;&#39;dist/unicorn.svg&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app/unicorn.svg&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can refer to the plugin’s Github repo for more information.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;osx-folder-action&quot;&gt;OS X Folder Action&lt;/h4&gt; 
&lt;p&gt;SVGO also comes with an &lt;a href=&quot;https://github.com/svg/svgo-osx-folder-action&quot;&gt;&lt;strong&gt;OS X folder action&lt;/strong&gt;&lt;/a&gt; that you can attach to any folder, and then have your SVGs optimized on-the-fly as soon as you place them in that folder. Again, optmized versions will replace the original ones, so be careful.&lt;/p&gt;
&lt;h2 id=&quot;final-words&quot; tabindex=&quot;-1&quot;&gt;Final Words&lt;/h2&gt;
&lt;p&gt;No matter what your workflow is, SVGO can probably fit into it, one way or another.&lt;/p&gt;
&lt;p&gt;I’m sure other SVG optimization tools exits, but with all the options SVGO comes with, if you ask me, this is the tool I would recommend.&lt;/p&gt;
&lt;p&gt;Optimize those SVGs, build something beautiful, and share it with the world.&lt;/p&gt;
&lt;p&gt;Thank you for reading.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using The CSS :target Selector To Create JavaScript-less UI Effects</title>
    <link href="https://sarasoueidan.com/blog/css-target-uses/"/>
    <updated>2015-01-24T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-target-uses/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	 You may or may not have used the :target selector before; and you may or may not have used it to show and hide elements without having to resort to JavaScript to handle this event for you. This article I wrote for the Adobe Dreamweaver team blog, serves as a short introduction to the :target selector, showing how you can use it to create JavaScript-less UI effects—for example, overlays, modals, etc.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Tips For Optimizing SVG Delivery For The Web</title>
    <link href="https://sarasoueidan.com/blog/svg-optimization/"/>
    <updated>2014-12-19T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/svg-optimization/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	SVGs are a great asset in our responsive web design toolkit. But just like any other image format, there are certain steps you should take to make sure you’re delivering optimised resources that don’t have a negative impact on your page’s performance. Here are some things that you can do to make sure you’re delivering better SVGs for the web.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>An Overview Of SVG Sprite Creation Techniques</title>
    <link href="https://sarasoueidan.com/blog/overview-of-svg-sprite-creation-techniques/"/>
    <updated>2014-12-16T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/overview-of-svg-sprite-creation-techniques/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	SVG can be used as an icon system to replace icon fonts, and there are several ways to create SVG sprites. This article I wrote for this year&#39;s 24Ways will give you an overview of three of them. While we’re at it, we’re going to take a look at some of the available tools used to automate sprite creation and fallback for us.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Styling and Animating SVGs with CSS</title>
    <link href="https://sarasoueidan.com/blog/styling-and-animating-svgs-with-css/"/>
    <updated>2014-11-03T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/styling-and-animating-svgs-with-css/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	CSS can be used to style and animate scalable vector graphics, much like it is used to style and animate HTML elements. In this article I wrote for Smashing Magazine, which is a modified transcript of a talk I recently gave at CSSconf EU and From the Front, I’ll go over the prerequisites and techniques for working with CSS in SVG.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>A Guide to SVG Animations (SMIL)</title>
    <link href="https://sarasoueidan.com/blog/guide-svg-animations-smil/"/>
    <updated>2014-10-13T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/guide-svg-animations-smil/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	What the title says: a complete guide to SVG animations derived from the SMIl specification. The extensive guide features a lot of demos and goes over the animations syntax, covering almost everything you need to know to get started with SVG Animations today.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Making SVGs Responsive With CSS</title>
    <link href="https://sarasoueidan.com/blog/responsive-svgs/"/>
    <updated>2014-08-19T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/responsive-svgs/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	An article on how to make embedded SVGs cross-browser responsive. We&#39;re going to cover embedding techniques, how to apply the &quot;Padding Hack&quot; and how to use inline media queries to make SVGs adaptive.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding SVG Coordinate Systems and Transformations (Part 3) — Establishing New Viewports</title>
    <link href="https://sarasoueidan.com/blog/nesting-svgs/"/>
    <updated>2014-08-05T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/nesting-svgs/</id>
    <content type="html">&lt;p&gt;At any point in an SVG drawing, you can establish new viewports and user coordinate systems by either nesting &lt;code&gt;svg&lt;/code&gt;s or using elements such as the &lt;code&gt;symbol&lt;/code&gt; element, among others. In this article we’re going to have a look at how we can do that and how this can be useful for controlling SVG elements and making them more flexible (and/or fluid).&lt;/p&gt;
&lt;p&gt;This is the third and last article in a series of articles about SVG coordinate systems and transformations. In the first article, I covered everything you need to know to understand the basics of SVG coordinate systems; more specifically, the SVG viewport, and the &lt;code&gt;viewBox&lt;/code&gt; and &lt;code&gt;preserveAspectRatio&lt;/code&gt; attributes. In the second article, you can find everything you need to know about how SVG system transformations work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;Understanding SVG Coordinate Systems &amp;amp; Transformations (Part 1) – The viewport, &lt;code&gt;viewBox&lt;/code&gt;, and &lt;code&gt;preserveAspectRatio&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sarasoueidan.com/blog/svg-transformations&quot;&gt;Understanding SVG Coordinate Systems &amp;amp; Transformations (Part 2) – The &lt;code&gt;transform&lt;/code&gt; Attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Understanding SVG Coordinate Systems &amp;amp; Transformations (Part 3) – Establishing New Viewports&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Throughout this article, &lt;strong&gt;I’m going to assume that you read the &lt;u&gt;first&lt;/u&gt; part of this series about SVG viewports and the &lt;code&gt;viewBox&lt;/code&gt; and &lt;code&gt;preserveAspectRatio&lt;/code&gt; attributes&lt;/strong&gt;. You don’t need to have read the second one about coordinate system transformations to follow along this article.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;nesting-svgs&quot;&gt; Nesting svg Elements&lt;/h3&gt;
&lt;p&gt;In the &lt;a href=&quot;https://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;first part&lt;/a&gt; we talked about how the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element establishes a viewport for the content of the SVG canvas. At any point in an SVG drawing, you can establish a new viewport into which all contained graphics is drawn by including an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element inside another &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;. By establishing a new viewport, you also implicitly establish a new viewport coordinate system and a new user coordinate system.&lt;/p&gt;
&lt;p&gt;For example, suppose you have an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; and some content inside it:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;xlink&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/1999/xlink&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- some SVG content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- some inner SVG content --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing to note here is that the inner &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element does not require specifying a namespace &lt;code&gt;xmlns&lt;/code&gt; on it because it is assumed to be the same namespace as the outer &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;&#39;s namespace. Of course, even the outer &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; does not require a namespace if it is embedded inline in an HTML5 document.&lt;/p&gt;
&lt;p&gt;You can use a nested SVG to group elements together and then position them inside the parent SVG. Now, you can also group elements together and position them using the &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; group—by wrapping elements inside a &lt;a href=&quot;https://sarasoueidan.com/blog/structuring-grouping-referencing-in-svg&quot;&gt;group &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element&lt;/a&gt;, you can position them on the canvas by &lt;a href=&quot;https://sarasoueidan.com/blog/svg-transformations&quot;&gt;using the &lt;code&gt;transform&lt;/code&gt; attribute&lt;/a&gt;. However, an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element has certain advantages over using &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;. Positioning using &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates is, in most cases, more convenient than using transforms. Moreover, an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element accepts &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes, which the &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element doesn’t. That said, the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; may not always be needed or necessary, because it leads to the creation of a new viewport and coordinate systems, which you may not need or want.&lt;/p&gt;
&lt;p&gt;By specifying a width and height to the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;, you restrict the content inside it to the bounds of the viewport that is defined by the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; attributes. Any content that lies beyond these bounds will be clipped.&lt;/p&gt;
&lt;p&gt;If you don’t specify &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; attributes, they’re assumed to be zero. If you don’t specify &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; attributes, the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; will be 100% the width and height of its parent SVG.&lt;/p&gt;
&lt;p&gt;Moreover, specifying a user coordinate system other than the default one will also affect the content inside the inner &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;, too.&lt;/p&gt;
&lt;p&gt;Percentage values specified for elements inside the inner &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; will be calculated relative to it, not relative to the outer &lt;code&gt;svg&lt;/code&gt;. Percentage values specified on the inner itself &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; will be calculated relative to the outer &lt;code&gt;svg&lt;/code&gt;. For example, the following will result in the inner SVG being equal to 400 units, and the rectangle inside it will be 200 units:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the width of the outermost &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; is set to 100% (for example, if it is embedded inline in a document and you want it to be fluid), then the inner SVG will expand and shrink as necessary to maintain a width that is half of that of the outer SVG – this is powerful.&lt;/p&gt;
&lt;p&gt;Nested SVGs are particularly useful for adding flexibility and fluidness to elements on the SVG canvas. We know that, using &lt;code&gt;viewBox&lt;/code&gt; values and &lt;code&gt;preserveAspectRatio&lt;/code&gt;, we can already create responsive SVGs. The outermost &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;&#39;s with can be set to 100% to make sure it expands and shrinks as its container (or the page) grows or shrinks. Then, by using &lt;code&gt;viewBox&lt;/code&gt; values and &lt;code&gt;preserveAspectRatio&lt;/code&gt;, we can make sure that the SVG canvas also responds to the changes in the viewport (outermost &lt;code&gt;svg&lt;/code&gt;). I’ve written about responsifying SVGs in my &lt;a href=&quot;https://docs.google.com/presentation/d/1Iuvf3saPCJepVJBDNNDSmSsA0_rwtRYehSmmSSLYFVQ/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000#slide=id.p&quot;&gt;CSSConf talk slides&lt;/a&gt;. You can check the technique out &lt;a href=&quot;https://docs.google.com/presentation/d/1Iuvf3saPCJepVJBDNNDSmSsA0_rwtRYehSmmSSLYFVQ/pub?start=false&amp;amp;loop=false&amp;amp;delayms=3000#slide=id.g180585666_036&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, when we do responsify an SVG like that, the entire canvas with &lt;em&gt;all&lt;/em&gt; the elements drawn on it will respond and change simultaneously. But sometimes, you may want to have only one element inside the graphic to be flexible, while keeping others “fixed” in position and/or size. This is where nested &lt;code&gt;svg&lt;/code&gt;s can be useful.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;svg&lt;/code&gt; element can have its own coordinate system independent of its parent, and it can have its own &lt;code&gt;viewBox&lt;/code&gt; and &lt;code&gt;preserveAspectRatio&lt;/code&gt; attributes that allow you to size and position the content inside it any way you want.&lt;/p&gt;
&lt;p&gt;So, in order to make one element flexible, we can wrap it in an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element, and give that &lt;code&gt;svg&lt;/code&gt; a flexible width so that it adjusts to the width of the outermost SVG, and then specify &lt;code&gt;preserveAspectRatio=&amp;quot;none&amp;quot;&lt;/code&gt; so that the graphic inside it also stretches and shrinks with the container width. (Note that &lt;code&gt;svg&lt;/code&gt;s can be nested to many levels, but in order to keep things simple, I’m nesting only one level deep in this article.)&lt;/p&gt;
&lt;p&gt;To demonstrate how nested &lt;code&gt;svg&lt;/code&gt;s can be useful, let’s look at some examples.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;example&quot;&gt;Example&lt;/h4&gt;
&lt;p&gt;Suppose we have the following SVG:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-nesting-example-1.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The above SVG is responsive. Resizing the screen will result in the entire SVG graphic responding as necessary. The following screenshot shows the result of shrinking the page, and how the SVG becomes smaller. Notice how &lt;strong&gt;the contents of the SVG maintain all their initial positions with respect to the SVG viewport and with respect to each other&lt;/strong&gt;.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-nesting-example-1-resized.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Using nested SVGs, we’re going to change that. We can specify a position for individual elements inside the SVG relative to the SVG’s viewport, so that as the SVG viewport size changes (i.e the size of the outermost &lt;code&gt;svg&lt;/code&gt; changes), the elements respond independently of each other.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
    Note that, at this point, it is necessary that you be familiar with how the SVG viewport, `viewBox`, and `preserveAspectRatio` work.
&lt;/p&gt;
&lt;p&gt;We’re going to create an effect such that, when the screen is resized, the upper part of the egg is going to be moved so that the cute chicken inside it peeks out, as shown in the following image:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-nesting-example-1-new.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;In order to get that effect, the egg’s upper part has to be separated from the rest by wrapping it inside an &lt;code&gt;svg&lt;/code&gt; of its own. This &lt;code&gt;svg&lt;/code&gt; wrapper will get an ID &lt;code&gt;upper-shell&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then, we’re going to make sure the new &lt;code&gt;svg#upper-shell&lt;/code&gt; has the same height and width as the outer SVG. This can be achieved by either specifying &lt;code&gt;width=&amp;quot;100%&amp;quot; height=&amp;quot;100%&amp;quot;&lt;/code&gt; on the &lt;code&gt;svg&lt;/code&gt;, or by not specifying any height and width at all. If no width and height are specified on the inner SVG, it automatically expands to 100% the width and height of the outer SVG.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
    If no width and height are specified on the inner SVG, it automatically expands to 100% the width and height of the outer SVG.
&lt;/blockquote&gt;
&lt;p&gt;And finally, to make sure the upper shell is “lifted” up or positioned at the top center of the &lt;code&gt;svg#upper-shell&lt;/code&gt;, we’re going to use the appropriate &lt;code&gt;preserveAspectRatio&lt;/code&gt; value which makes sure the viewBox is positioned at the top center of the viewport—the value is &lt;code&gt;xMidYMin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The code for the SVG graphic becomes:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;xlink&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/1999/xlink&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 315 385&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;xMidYMid meet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- the chicken illustration --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;chicken&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- path forming the lower shell --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lower-shell&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#gradient)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.5003&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;upper-shell&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 315 385&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;xMidYMin meet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- path forming the upper shell --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;the-upper-shell&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#gradient)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.5003&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;note&quot;&gt;I&#39;ve stripped out the parts that relevant to the article like the gradient used to color the egg shells and the paths forming the shapes, just for the sake of brevity in the example code.&lt;/p&gt;
&lt;p&gt;At this point, note that the &lt;code&gt;viewBox&lt;/code&gt; specified on the nested &lt;code&gt;svg#upper-shell&lt;/code&gt; has the same value as that of the outermost &lt;code&gt;svg&lt;/code&gt; (before it was removed). The reason we used the same &lt;code&gt;viewBox&lt;/code&gt; value is so that, the SVG maintains its original look on big screens.&lt;/p&gt;
&lt;p&gt;So, the way this goes is: we start with an SVG—in our case, it’s the image of a cracked egg with a chicken hidden inside it.
Then, we create another “layer” and promote the upper shell to it—this layer is created by using a nested &lt;code&gt;svg&lt;/code&gt;.
The nested &lt;code&gt;svg&lt;/code&gt; has the same dimensions as the outer &lt;code&gt;svg&lt;/code&gt; and the same &lt;code&gt;viewBox&lt;/code&gt;.
And finally, the viewBox of the inner SVG is set to “stick” to the top of the viewport no matter what the screen size is—this makes sure that, when the screen size is narrow and the SVG is elongated, the upper shell will be lifted upwards, thus showing the chicken “behind” it on the canvas.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-nesting-example-1-layered.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Once the screen size shrinks, the SVG is elongated, and the viewBox containing the upper shell is positioned at the top of the viewport using &lt;code&gt;preserveAspectratio=&amp;quot;xMidYMin meet&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-nesting-example-1-viewbox.png&quot; alt=&quot;&quot; /&gt;
    &lt;figcaption&gt;
        The translucent purple layer shows the viewport established by the nested &lt;code&gt;svg&lt;/code&gt;. The translucent orange box shows the &lt;code&gt;viewBox&lt;/code&gt; inside the &lt;code&gt;svg&lt;/code&gt;&amp;mdash;it is positioned at the top center of the viewport using &lt;code&gt;preserveAspectratio=&quot;xMidYMin meet&quot;&lt;/code&gt;.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Click on the following button to see the live SVG. Remember to resize your browser to see the SVG adapt.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sarasoueidan.com/assets/images/svg-nesting-chick.svg&quot; class=&quot;button&quot;&gt;View Live Example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nesting or “layering” SVGs allows you to position parts of the SVG relative to the changing viewport, while maintaining the elements’ aspect ratio. So the image adapts without distorting the elements inside it.&lt;/p&gt;
&lt;p&gt;If we wanted the entire egg to come off the chicken, we could always wrap the lower shell in an &lt;code&gt;svg&lt;/code&gt; layer of its own, having the same &lt;code&gt;viewBox&lt;/code&gt;, too. Then, to make sure the lower shell moves down and sticks to the bottom center of the viewport, we position it using &lt;code&gt;preserveAspectRatio=&amp;quot;xMidYMax meet&amp;quot;&lt;/code&gt;. The code would look like this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;xmlns&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/2000/svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xmlns:&lt;/span&gt;xlink&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;http://www.w3.org/1999/xlink&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;chick&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 315 385&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;xMidYMid meet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- the chicken illustration --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;chick&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;upper-shell&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 315 385&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;xMidYMid meet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- path forming the upper shell --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;the-upper-shell&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#gradient)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.5003&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lower-shell&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 315 385&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;xMidYMax meet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- path forming the lower shell --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;the-lower-shell&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#gradient)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.5003&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each of the &lt;code&gt;svg&lt;/code&gt; layers/viewports is equal to 100% the width and height of the outermost &lt;code&gt;svg&lt;/code&gt;. So we basically have three clones. Each layer contains an element—the upper shell, the lower shell, or the chick. The &lt;code&gt;viewBox&lt;/code&gt; for the three layers is the same, with only the &lt;code&gt;preserveAspectRatio&lt;/code&gt; being different.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-nesting-example-1-2.png&quot; alt=&quot;&quot; /&gt;
    &lt;figcaption&gt;
        The three &lt;code&gt;svg&lt;/code&gt;s have a 100% height and width value covering the entire outermost viewport. Their &lt;code&gt;viewBox&lt;/code&gt;es are also equal as you can see in the image. Only the position of these &lt;code&gt;viewBox&lt;/code&gt;es is different (specified using &lt;code&gt;preserveAspectRatio&lt;/code&gt;).
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Of course, in this example I started with a graphic of a chicken hiding inside an egg, and that is revealed when the screen becomes smaller. However, you could do something different: you could start with a graphic on a small screen, that then reveals something new as the screen becomes bigger; i.e as the &lt;code&gt;svg&lt;/code&gt; becomes wider and there is more horizontal space to show elements.&lt;/p&gt;
&lt;p&gt;You could get a lot more creative, and show and hide elements according to different screen sizes—using media queries—and have the new elements be positioned in a certain way to achieve a certain effect. The sky is the limit here.&lt;/p&gt;
&lt;p&gt;Also note that the nested &lt;code&gt;svg&lt;/code&gt;s don’t need to have the same height and width as their containing &lt;code&gt;svg&lt;/code&gt;; you can specify a height and width and have the content of the &lt;code&gt;svg&lt;/code&gt; be limited to and clipped by the boundaries specified by that height and width—it all boils down to what you’re trying to achieve.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;making-elements-fluid&quot;&gt;Making Elements Fluid Using Nested SVGs&lt;/h4&gt;
&lt;p&gt;In addition to positioning elements while preserving their aspect ratios, we can use nested &lt;code&gt;svg&lt;/code&gt;s allow only certain elements to be fluid—this can be done by &lt;em&gt;not&lt;/em&gt; preserving the aspect ratio of these particular elements.&lt;/p&gt;
&lt;p&gt;For example, if you want only one element in the SVG to be fluid, you can wrap it in an &lt;code&gt;svg&lt;/code&gt;, and use &lt;code&gt;preserveAspectRatio=&amp;quot;none&amp;quot;&lt;/code&gt; to have that element expand to fill the entire width of the viewport at all times, while maintaining the aspect ratio and positioning of other elements like we did in the previous example.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;none&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- this content will be fluid --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;..&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- content positioned somewhere in the viewport --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://jakearchibald.com/&quot;&gt;Jake Archibald&lt;/a&gt; created a simple and practical use case for nested SVGs that does exactly that: a simple UI that contains elements positioned at the corners of the outermost &lt;code&gt;svg&lt;/code&gt;, maintaining their aspect ratios, and a middle part of the UI is fluid and responds to the change in the &lt;code&gt;svg&lt;/code&gt; width by shrinking and expanding with it. You can check his demo out &lt;a href=&quot;https://jsbin.com/loceqo/1&quot;&gt;here&lt;/a&gt;. Make sure you inspect the code in the dev tools to select and visualize the different &lt;code&gt;viewbox&lt;/code&gt;es and &lt;code&gt;svg&lt;/code&gt;s used.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;establishing-viewports&quot;&gt;Other ways to establish new viewports&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;svg&lt;/code&gt; elements are not the only elements that establish new viewports in SVG. In the following sections, we’re going to go over the other ways to establish new viewports using other SVG elements.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;using-symbol&quot;&gt;Establishing a new viewport by `use`ing `symbol` &lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;symbol&lt;/code&gt; element defines a new viewport whenever it is instantiated by the &lt;code&gt;use&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;symbol&lt;/code&gt; element can be &lt;code&gt;use&lt;/code&gt;d by referencing it in the &lt;code&gt;xlink:href&lt;/code&gt; attribute of the &lt;code&gt;use&lt;/code&gt; element:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;symbol&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;my-symbol&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 300 200&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- contents of the symbol --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- this content is only rendered when `use`d --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;use&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#my-symbol&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The question marks used as values above are used only to indicate that these values may or  may not be specified—if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are not specified, they default to zero, and you don’t need to specify a height and width either.&lt;/p&gt;
&lt;p&gt;You see, when you &lt;code&gt;use&lt;/code&gt; a &lt;code&gt;symbol&lt;/code&gt; element, and then inspect the DOM using the dev tools, you will not see the contents of the &lt;code&gt;symbol&lt;/code&gt; inside the &lt;code&gt;use&lt;/code&gt; tag. The reason for this is that the contents of &lt;code&gt;use&lt;/code&gt; are rendered into a shadow tree, which you can inspect if you enable inspecting the shadow DOM in the dev tools.&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;symbol&lt;/code&gt; is used, it is deeply cloned into the generated shadow tree, with the exception that the &lt;code&gt;symbol&lt;/code&gt; is replaced by an &lt;code&gt;svg&lt;/code&gt;. This generated &lt;code&gt;svg&lt;/code&gt; will always have explicit values for attributes &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;. If attributes &lt;code&gt;width&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt; are provided on the &lt;code&gt;use&lt;/code&gt; element, then these attributes will be transferred to the generated &lt;code&gt;svg&lt;/code&gt;. If attributes &lt;code&gt;width&lt;/code&gt; and/or &lt;code&gt;height&lt;/code&gt; are not specified, the generated &lt;code&gt;svg&lt;/code&gt; element will use values of 100% for these attributes.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
    When the &lt;code&gt;symbol&lt;/code&gt; is used, it is deeply cloned into the generated shadow tree, with the exception that the &lt;code&gt;symbol&lt;/code&gt; is replaced by an &lt;code&gt;svg&lt;/code&gt;.
&lt;/blockquote&gt;   
&lt;p&gt;Because we end up with an &lt;code&gt;svg&lt;/code&gt; in the DOM, and because this &lt;code&gt;svg&lt;/code&gt; is practically contained in the outer &lt;code&gt;svg&lt;/code&gt; where &lt;code&gt;use&lt;/code&gt; is used, we’re left with a nested &lt;code&gt;svg&lt;/code&gt; situation not very different from the one we talked about in the previous section—the nested &lt;code&gt;svg&lt;/code&gt; forms a new viewport. The &lt;code&gt;viewBox&lt;/code&gt; for the nested &lt;code&gt;svg&lt;/code&gt; is the &lt;code&gt;viewBox&lt;/code&gt; specified on the &lt;code&gt;symbol&lt;/code&gt; element. (The &lt;code&gt;symbol&lt;/code&gt; element accepts a &lt;code&gt;viewBox&lt;/code&gt; attribute value. For more information, refer to the article: &lt;a href=&quot;https://sarasoueidan.com/blog/structuring-grouping-referencing-in-svg/&quot;&gt;Structuring, Grouping, and Referencing in SVG – The &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; Elements&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So we now have a new viewport whose dimensions and position can be specified in the &lt;code&gt;use&lt;/code&gt; element (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;), and whose &lt;code&gt;viewBox&lt;/code&gt; value can also be specified in the &lt;code&gt;symbol&lt;/code&gt; element. The content of the &lt;code&gt;symbol&lt;/code&gt; is then rendered and positioned inside this viewport and viewBox.&lt;/p&gt;
&lt;p&gt;And last but not least, the &lt;code&gt;symbol&lt;/code&gt; element also accepts a &lt;code&gt;preserveAspectratio&lt;/code&gt; attribute value, that allows you to position the &lt;code&gt;viewBox&lt;/code&gt; inside the new viewport established by &lt;code&gt;use&lt;/code&gt;. Pretty neat, right? You can control the newly created nested &lt;code&gt;svg&lt;/code&gt; just like we did in the previous sections.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eleqtriq.com/&quot;&gt;Dirk Weber&lt;/a&gt; has also created a demo that uses nested SVGs and &lt;code&gt;symbol&lt;/code&gt; elements to mimic the behavior of CSS border images. You can check his article out &lt;a href=&quot;http://w3.eleqtriq.com/2014/02/the-4-slice-scaling-technique-for-svg/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;referencing-svg-using-image&quot;&gt;Establishing a new viewport by referencing an SVG image in `image`&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;image&lt;/code&gt; element indicates that the contents of a complete file are to be rendered into a given rectangle within the current user coordinate system. The &lt;code&gt;image&lt;/code&gt; element can refer to raster image files such as PNG or JPEG or to files with MIME type of “image/svg+xml”.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;image&lt;/code&gt; element that references an SVG file will result in the establishment of a temporary new viewport since the referenced resource by definition will have an &lt;code&gt;svg&lt;/code&gt; element.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;image&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myGraphic.svg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;preserveAspectRatio&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;?&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt; element accepts many attributes, some of these attributes—the ones that are relevant to this article—are &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; position attributes, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes, and &lt;code&gt;preserveAspectratio&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Normally, an SVG file will contain a root &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element; this element may or may not have position and dimensions specified, in addition to a &lt;code&gt;viewBox&lt;/code&gt; and a &lt;code&gt;preserveAspectratio&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;When an &lt;code&gt;image&lt;/code&gt; element references an SVG image file, the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes on the root &lt;code&gt;svg&lt;/code&gt; are ignored. Unless the value of &lt;code&gt;preserveAspectRatio&lt;/code&gt; on the &lt;code&gt;image&lt;/code&gt; element starts with ‘defer’, the &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute on the root element in the referenced SVG image is also ignored. Instead, the &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute on the referencing &lt;code&gt;image&lt;/code&gt; element defines how the SVG image content is fitted into the viewport.&lt;/p&gt;
&lt;p&gt;The value of the &lt;code&gt;viewBox&lt;/code&gt; attribute to use when evaluating the &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute is defined by the referenced content. For content that clearly identifies a viewBox (e.g. an SVG file with the &lt;code&gt;viewBox&lt;/code&gt; attribute on the outermost svg element) that value should be used. For most raster content (PNG, JPEG) the bounds of the image should be used (i.e. the &lt;code&gt;image&lt;/code&gt; element has an implicit &lt;code&gt;viewBox&lt;/code&gt; of ‘0 0 raster-image-width raster-image-height’). Where no value is readily available (e.g. an SVG file with no &lt;code&gt;viewBox&lt;/code&gt; attribute on the outermost svg element) the &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute is ignored, and only the translation due to the &lt;code&gt;x&lt;/code&gt; &amp;amp; &lt;code&gt;y&lt;/code&gt; attributes of the viewport is used to display the content.&lt;/p&gt;
&lt;p&gt;For example, if the image element referenced a PNG or JPEG and &lt;code&gt;preserveAspectRatio=&amp;quot;xMinYMin meet&amp;quot;&lt;/code&gt;, then the aspect ratio of the raster would be preserved, the raster would be sized as large as possible while ensuring that the entire raster fits within the viewport, and the top/left of the raster would be aligned with the top/left of the viewport as defined by the attributes &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; on the &lt;code&gt;image&lt;/code&gt; element.&lt;br /&gt;
If the value of &lt;code&gt;preserveAspectRatio&lt;/code&gt; was ‘none’ then aspect ratio of the image would not be preserved. The image would be fitted such that the top/left corner of the raster exactly aligns with coordinate (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) and the bottom/right corner of the raster exactly aligns with coordinate (&lt;code&gt;x&lt;/code&gt;+&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;+&lt;code&gt;height&lt;/code&gt;).&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;using-iframe&quot;&gt;Establishing a new viewport using `iframe`&lt;/h4&gt;
&lt;p&gt;An &lt;code&gt;iframe&lt;/code&gt; element that references an SVG file establishes new viewport similar to the situation of &lt;code&gt;image&lt;/code&gt; element explained above. An &lt;code&gt;iframe&lt;/code&gt; element can also have &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; attributes, in addition to its own &lt;code&gt;preserveAspectratio&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;using-foreignobject&quot;&gt;Establishing a new viewport using `foreignObject` &lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;foreignObject&lt;/code&gt; element creates a new viewport for rendering the content that is within the element.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;foreignObject&lt;/code&gt; tag allows you to add non-SVG content into an SVG file. Usually, the contents of foreignObject are assumed to be from a different namespace. For example, you could drop some HTML in the middle of an SVG element.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;foreignObject&lt;/code&gt; element accepts attributes, among which are &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;width&lt;/code&gt;, which are used to position the object and size it, creating the bounds used to render the contents referenced inside it.&lt;/p&gt;
&lt;p&gt;There is a lot to say about the &lt;code&gt;foreignObject&lt;/code&gt; element besides its creation of a new viewport for its content. If you’re interested, you can check the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject&quot;&gt;MDN entry&lt;/a&gt; or check &lt;a href=&quot;http://thenittygritty.co/css-masking&quot;&gt;this practical use case&lt;/a&gt; by &lt;a href=&quot;http://twitter.com/derschepp&quot;&gt;Christian Schaeffer&lt;/a&gt; on &lt;a href=&quot;http://thenittygritty.co/&quot;&gt;The Nitty Gritty Blog&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;Establishing new viewports and coordinate systems—be that by nesting &lt;code&gt;svg&lt;/code&gt;s or another element from the ones mentioned above—allows you to control parts of the SVG that you would otherwise not be able to control the same way.&lt;/p&gt;
&lt;p&gt;The entire time that I was working on this article and thinking of demos and use cases, all I kept thinking of is how nesting SVGs can give us finer control and flexibility for when we’re dealing with SVGs. Adaptive SVGs can be created with neat effects, fluid elements inside SVGs that are independent of the other elements on the page are possible, mimicing CSS border images for crispier backgrounds on high-resolution screens, and so much more.&lt;/p&gt;
&lt;p&gt;Have you created any interesting examples using nested viewports in SVG? Can you think of more creative examples?&lt;/p&gt;
&lt;p&gt;This article concludes the series of “Understanding SVG Coordinate Systems &amp;amp; Transformations”. Next up, we’ll be diving into animations, and more! Stay tuned, and thank you for reading!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding SVG Coordinate Systems and Transformations (Part 2) — The transform Attribute</title>
    <link href="https://sarasoueidan.com/blog/svg-transformations/"/>
    <updated>2014-07-30T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/svg-transformations/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
SVG elements can be transformed by scaling, translating, skewing, and rotating&amp;mdash;much like HTML elements can be transformed using CSS Transforms. However, there are certain inevitable differences when it comes to the coordinate systems used and affected by these transformations. In this article we&#39;ll go over the SVG &lt;code&gt;transform&lt;/code&gt; attribute and CSS property, covering how to use it, and things you should know about SVG coordinate system transformations.
&lt;/p&gt;
&lt;p&gt;This is the second article in a series I’m writing about SVG coordinate systems and transformations. In the first article, I covered everything you need to know to understand the basics of SVG coordinate systems; more specifically, the SVG viewport, and the &lt;code&gt;viewBox&lt;/code&gt; and &lt;code&gt;preserveAspectRatio&lt;/code&gt; attributes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;Understanding SVG Coordinate Systems &amp;amp; Transformations (Part 1) – The viewport, &lt;code&gt;viewBox&lt;/code&gt;, and &lt;code&gt;preserveAspectRatio&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Understanding SVG Coordinate Systems &amp;amp; Transformations (Part 2) – The &lt;code&gt;transform&lt;/code&gt; Attribute&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sarasoueidan.com/blog/nesting-svgs&quot;&gt;Understanding SVG Coordinate Systems &amp;amp; Transformations (Part 3) – Establishing New Viewports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this part I’m going to assume you read the first one, so, if you haven’t, make sure you do before you continue reading this article.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;transform-attribute-values&quot;&gt;The &lt;code&gt;transform&lt;/code&gt; Attribute Values&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;transform&lt;/code&gt; attribute is used to specify one or more transformations on an element. It takes a &lt;code&gt;&amp;lt;transform-list&amp;gt;&lt;/code&gt; as a value which is defined as a list of transform definitions, which are applied in the order provided. The individual transform definitions are separated by whitespace and/or a comma. An example of applying a transformation to an element may look like the following:&lt;/p&gt;
&lt;p&gt;The possible SVG transformations are: &lt;strong&gt;rotation&lt;/strong&gt;, &lt;strong&gt;scaling&lt;/strong&gt;, &lt;strong&gt;translation&lt;/strong&gt;, and &lt;strong&gt;skewing&lt;/strong&gt;. The transformation functions used in the &lt;code&gt;transform&lt;/code&gt; attribute work similar to the way CSS transform functions work in the &lt;code&gt;transform&lt;/code&gt; property, except that they take different arguments.&lt;/p&gt;
&lt;p class=&quot;note update&quot;&gt;
	Note that the function syntax defined below only works in the &lt;code&gt;transform&lt;/code&gt; attribute. See the &lt;a href=&quot;https://sarasoueidan.com/blog/svg-transformations/#css-transformation-properties&quot;&gt;section about transforming SVGs with CSS properties&lt;/a&gt; for information on the syntax used in the CSS transform properties.
&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;matrix&quot;&gt;Matrix&lt;/h4&gt; 
&lt;p&gt;You can apply one or more transformations to an SVG element using the &lt;code&gt;matrix()&lt;/code&gt; function. The syntax for the matrix transformation is:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;matrix(&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;e&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above declaration specifies a transformation in the form of a transformation matrix of six values. &lt;code&gt;matrix(a,b,c,d,e,f)&lt;/code&gt; is equivalent to applying the transformation &lt;strong&gt;matrix [a b c d e f]&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;For those of you who are not math-savvy, you’re probably not going to be using this function. Those of you who are, you can read more about the math behind it &lt;a href=&quot;http://www.w3.org/TR/SVG/coords.html#TransformMatrixDefined&quot;&gt;here&lt;/a&gt;. Since this function is rarely used—if ever—I’m just going to skip to the other transformation functions.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;translation&quot;&gt;Translation&lt;/h4&gt; 
&lt;p&gt;To translate an SVG element, you can use the &lt;code&gt;translate()&lt;/code&gt; function. The syntax for the translation function is:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;translate(&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;tx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; [&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;translate()&lt;/code&gt; function takes one or two values which specify the horizontal and vertical translation values, respectively. &lt;code&gt;tx&lt;/code&gt; represents the translation value along the x-axis; &lt;code&gt;ty&lt;/code&gt; represents the translation value along the y-axis.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ty&lt;/code&gt; value is optional; and, if omitted, it defaults to zero. The &lt;code&gt;tx&lt;/code&gt; and &lt;code&gt;ty&lt;/code&gt; values can be either space-separated or comma-separated, and they don’t take any units inside the function—they default to the current user coordinate system units.&lt;/p&gt;
&lt;p&gt;The following example translates an element by 100 user units to the right, and 300 user units to the bottom:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;translate(100 300)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example is still valid if the transformation was applied using &lt;code&gt;translate(100, 300)&lt;/code&gt; where the values are comma-separated.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;scaling&quot;&gt;Scaling&lt;/h4&gt; 
&lt;p&gt;You can resize an SVG element by scaling it up or down using the &lt;code&gt;scale()&lt;/code&gt; function transformation. The syntax for the scale transformation is:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;scale(&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; [&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;scale()&lt;/code&gt; function takes one or two values which specify the horizontal and vertical scaling values, respectively. &lt;code&gt;sx&lt;/code&gt; represents the scaling value along the x-axis, used to stretch or shrink the element horizontally; &lt;code&gt;sy&lt;/code&gt; represents the scaling value along the y-axis, used to stretch or shrink the element vertically.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sy&lt;/code&gt; value is optional; and, if omitted, it is assumed to be equal to &lt;code&gt;sx&lt;/code&gt;. The &lt;code&gt;sx&lt;/code&gt; and &lt;code&gt;sy&lt;/code&gt; values can be either space-separated or comma-separated, and they are unitless numbers.&lt;/p&gt;
&lt;p&gt;The following example doubles the size of an element by scaling it to twice its original size:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;150&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;scale(2)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following stretches an element horizontally to 1.5 its original width, and shrinks it vertically to half its original height:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;150&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;scale(2 0.5)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example is still valid if the transformation was applied using &lt;code&gt;scale(2, .5)&lt;/code&gt; where the values are comma-separated.&lt;/p&gt;
&lt;p&gt;It is important to note here that &lt;strong&gt;when an SVG element is scaled, its entire current coordinate system is scaled, resulting in the element also being repositioned inside the viewport&lt;/strong&gt;. Don’t worry about this now, we’ll get into it in more detail in the next section.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;skewing&quot;&gt;Skew&lt;/h4&gt; 
&lt;p&gt;An SVG element can also be skewed. To skew it, you can use one or both of the two skew transformation functions: &lt;code&gt;skewX&lt;/code&gt; and &lt;code&gt;skewY&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;skewX(&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;skew-angle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;skewY(&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;skew-angle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;skewX&lt;/code&gt; function specifies a skew transformation along the x-axis; and the &lt;code&gt;skewY&lt;/code&gt; function specifies a skew transformation along the y-axis.&lt;/p&gt;
&lt;p&gt;The skew angle specified is a &lt;strong&gt;unitless&lt;/strong&gt; angle that defaults to degrees.&lt;/p&gt;
&lt;p&gt;Note that skewing an element may result in the element being repositioned inside the viewport. More about this in the next section.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;rotation&quot;&gt;Rotation&lt;/h4&gt; 
&lt;p&gt;You can rotate an SVG element using the &lt;code&gt;rotate()&lt;/code&gt; function. The syntax for the function is:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;rotate(&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rotate-angle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; [&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;cx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;cy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;rotate()&lt;/code&gt; function specifies a rotation by &lt;code&gt;rotate-angle&lt;/code&gt; &lt;strong&gt;degrees&lt;/strong&gt; about a given point. Unlike rotation transformations in CSS, you cannot specify an angle unit other than degrees. The angle value is specified &lt;strong&gt;unitless&lt;/strong&gt;, and is considered a degrees value by default.&lt;/p&gt;
&lt;p&gt;The optional &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; values represent the &lt;strong&gt;unitless&lt;/strong&gt; coordinates of the point used as a center of rotation. If &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;cy&lt;/code&gt; are not provided, the rotation is about &lt;strong&gt;the origin of the current user coordinate system&lt;/strong&gt;. (See &lt;a href=&quot;http://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;Part 1&lt;/a&gt; if you’re not sure what a user coordinate system is.)&lt;/p&gt;
&lt;p&gt;Specifying a center of rotation inside the &lt;code&gt;rotate()&lt;/code&gt; function is like a shorthand way for setting &lt;code&gt;transform: rotate()&lt;/code&gt; and &lt;code&gt;transform-origin&lt;/code&gt; in CSS. Since the default center of rotation in SVG is the upper left corner of the current user coordinate system in use, and since that may not allow you to create the rotation effect you want, you will probably end up specifying a new center inside &lt;code&gt;rotate()&lt;/code&gt;. If you know your element’s dimensions and position in the SVG canvas, you can easily specify its center as the center of rotation.&lt;/p&gt;
&lt;p&gt;The following example rotates a group of elements around a specified center of rotation positioned at (50, 50) in the current user coordinate system:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;parrot&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rotate(45 50 50)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- elements making up a parrot shape --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, if you want an element to rotate around its center, you’d probably rather specify the center as &lt;code&gt;50% 50%&lt;/code&gt; like you would do in CSS; but unfortunately doing that inside the &lt;code&gt;rotate()&lt;/code&gt; function is not possible—you need to use absolute coordinates. However, you &lt;em&gt;can&lt;/em&gt; do this using the CSS &lt;code&gt;transform-origin&lt;/code&gt; property in conjunction with the CSS &lt;code&gt;transform&lt;/code&gt; property. More about this later in the article.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;coordinate-system-transformations&quot;&gt;Coordinate System Transformations&lt;/h3&gt; 
&lt;p&gt;Now that we’ve covered all possible SVG transformation functions, we’ll dig into the visual part and the effect of applying each transformation to an SVG element. This is the most important aspect of SVG transformations. And they are called “coordinate system transformations” not just “element transformations” for a reason.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&quot;http://www.w3.org/TR/SVG/coords.html&quot;&gt;specification&lt;/a&gt;, the &lt;code&gt;transform&lt;/code&gt; attribute is defined as being one of the two attributes that &lt;strong&gt;establish a new user space (current coordinate system)&lt;/strong&gt; on the element it is applied to — the &lt;code&gt;viewBox&lt;/code&gt; attribute is the second of the two attributes that create a new user space. So what exactly does this mean?&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	The &lt;code&gt;transform&lt;/code&gt; attribute establishes a new user space (current coordinate system) on the element it is applied to.
&lt;/blockquote&gt;
&lt;p&gt;This behavior is similar to the behavior of CSS transformations applied to an HTML element—the HTML element’s coordinate system is transformed, and this is usually most obvious when you’re chaining tranformations (we’ll get to this later). Despite being similar in many aspects, HTML and SVG transformations have some differences.&lt;/p&gt;
&lt;p&gt;The main difference is the coordinate system. The coordinate system of an HTML element is established on the element itself. Meanwhile, in SVG, the coordinate system of an element is, initially, the current coordinate system or user space in use.&lt;/p&gt;
&lt;p&gt;When you apply the &lt;code&gt;transform&lt;/code&gt; attribute to an SVG element, that element gets a “copy” of the current user coordinate system in use. You can think of it as just creating a new “layer” for the transformed element, where the new layer has its own copy of the current user coordinate system (the &lt;code&gt;viewBox&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Then, &lt;strong&gt;the element’s new current coordinate system is transformed by the transformation functions specified inside the &lt;code&gt;transform&lt;/code&gt; attribute&lt;/strong&gt;, thus resulting in the transformation of the element itself. It is as if the elements are drawn onto the canvas in the transformed coordinate system.&lt;/p&gt;
&lt;p&gt;To understand how SVG transformations are applied, let’s start with the visual part. The following image shows the SVG canvas we’re going to be working with.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transforms-canvas.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The parrot and the dog are the elements (groups &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;) that we’re going to be transforming.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 800 600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;parrot&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- shapes and paths forming the parrot --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dog&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- shapes and paths forming the dog --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The grey coordinate system is the initial coordinate system of the canvas established by the &lt;code&gt;viewBox&lt;/code&gt;. For simplicity’s sake, I’m going to not change the initial coordinate system—I’m using a &lt;code&gt;viewBox&lt;/code&gt; that is the same size as the viewport, as you see in the above code.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	When you apply the &lt;code&gt;transform&lt;/code&gt; attribute to an SVG element, that element gets a &quot;copy&quot; of the current user coordinate system in use.
&lt;/blockquote&gt;
&lt;p&gt;Now that we’ve established our canvas and an initial user space, we’re going to start transforming elements. Let’s start by translating the parrot by 150 units to the left and 200 units downwards.&lt;/p&gt;
&lt;p&gt;The parrot is, of course, made of several paths and shapes. It’s enough to apply the &lt;code&gt;transform&lt;/code&gt; attribute to the group wrapping these shapes &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;; this will in turn apply the transformation to the entire set of shapes and paths, and the parrot will be translated as one whole item. See the &lt;a href=&quot;http://sarasoueidan.com/blog/structuring-grouping-referencing-in-svg&quot;&gt;article on structuring and grouping SVGs&lt;/a&gt; for more information.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 800 600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;parrot&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;translate(150 200)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- shapes and paths forming the parrot --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following image shows the result of translating the parrot by the above translation. The translucent version of the parrot shows the initial position before the transformation was applied.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-translate.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The translation transformation in SVG is as simple and straightforward as it is in CSS when applied on an HTML element. We mentioned earlier that applying the &lt;code&gt;transform&lt;/code&gt; attribute to an element establishes a new current user coordinate system on it. The following image shows the “copy” of the initial coordinate system, that is established on the parrot element when it was transformed. Notice how the parrot’s current coordinate system is translated.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-translate-system.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;It’s important to notice here that &lt;strong&gt;the new current coordinate system established on the element is a replicate of the initial user space, with the position of the element preserved inside it. This means that it is &lt;em&gt;not&lt;/em&gt; established on the element’s bounding box, nor is the size of the new current coordinate system restricted to the size of the element&lt;/strong&gt;. This is where the difference between HTML and SVG coordinate system shines.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	The new current coordinate system established on a transformed element is &lt;code&gt;not&lt;/code&gt; established on the element&#39;s bounding box, nor is its size restricted to the size of the element.
&lt;/blockquote&gt;
&lt;p&gt;This is more evident if we are to transform the dog at the bottom right of the canvas. Suppose we want to translate the dog by 50 units to the right and then 50 units downwards. This is how the dog, its initial position, and the new current coordinate system (that is also translated with the dog) will look. Notice how the origin of the dog’s new current coordinate system is not positioned at the top left cornder of the dog’s bounding box. Also notice how the dog and its new coordinate system seem as if they were moved to a new “layer” on top of the canvas.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-translate-dog.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Now let’s try something else. Instead of translating the parrot, let’s try scaling it. We’re going to scale the parrot to double its size:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 800 600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;parrot&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;scale(2)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- shapes and paths forming the parrot --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of scaling an SVG element differs from that of scaling an HTML element. The scaled SVG’s element’s position changes inside the viewport when it is scaled. The following image shows the result of doubling the size of the parrot. Notice the initial position and size, and the final size and position.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-scale.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;What we can notice from the above image is that not only the size (width and height) of the parrot were doubled, but the coordinates (x and y) were also multiplied by the scaling factor (which is two, here).&lt;/p&gt;
&lt;p&gt;The reason we ended up with this result is something we’ve mentioned earlier: the element’s  current coordinate system is transformed, and then the parrot is drawn into the new system. So, in this example, the current coordinate system was scaled. This effect is similar to the effect of using &lt;code&gt;viewBox = &amp;quot;0 0 400 300&amp;quot;&lt;/code&gt;, which “zooms in” to the coordinate system, thus doubling the size of the content inside it (see &lt;a href=&quot;http://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;part 1&lt;/a&gt; of the series if you haven’t already).&lt;/p&gt;
&lt;p&gt;So, if we were to visualize the coordinate system transformation showing the current transformed system of the parrot, we’d get the following result:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-scale-system.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The new current coordinate system of the parrot is scaled up, “zooming in” to the parrot at the same time. Notice that, inside its current coordinate system, the parrot is not repositioned—it is only the effect of scaling the coordinate system that repositions it inside the viewport. The parrot is simply drawn at its original x and y coordinates inside the new scaled up system.&lt;/p&gt;
&lt;p&gt;Let’s trying scaling the parrot in both directions using different scaling factors. If we scale the parrot by applying &lt;code&gt;transform=&amp;quot;scale(2 0.5)&lt;/code&gt;, we’re doubling its width while making it half its original height. The effect will be similar to applying &lt;code&gt;viewBox=&amp;quot;0 0 400 1200&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-scale-2.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Notice the position of the parrot inside the scaled coordinate system, and compare it to the position in the initial system (translucent parrot): the x and y position coordinates are preserved.&lt;/p&gt;
&lt;p&gt;Skewing an element in SVG also results in the element being “moved” as a result of its current coordinate system being skewed.&lt;/p&gt;
&lt;p&gt;Suppose we apply a skew transformation to the dog along the x-axis using the &lt;code&gt;skewX&lt;/code&gt; function. We’re going to skew the dog by 25 degrees horizontally.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 800 600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dog&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;skewX(25)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- shapes and paths forming the dog --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following image shows the result of applying the skewing transformation to the dog. Its coordinate system is skewed, and so is the dog itself.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-skew-system.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Note that the position of the dog with respect to its original position also changes, as a result of skewing its coordinate system.&lt;/p&gt;
&lt;p&gt;The following image shows the result of skewing the dog by the same angle using &lt;code&gt;skewY()&lt;/code&gt; instead of &lt;code&gt;skewX&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-skew-system-2.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;And last but not least, let’s try rotating the parrot. The default center of rotation is the upper left corner of the current user coordinate system. The new current system established on the rotated element will also be rotated. In the following example, we’re going to rotate the parrot by 45 degrees. The positive direction of rotation is clockwise.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 800 600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;parrot&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rotate(45)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- shapes and paths forming the parrot --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of applying the above transformation looks like this:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-rotate.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;You are probably going to want to rotate an element around a point other than the default origin of the coordinate system. Using the &lt;code&gt;rotate()&lt;/code&gt; function in the &lt;code&gt;transform&lt;/code&gt; attribute, you can specify that point explicitly. Suppose we want to rotate the parrot in this example around its own center. According to the width, height, and position of the parrot, I can determine its center to be at approximately (150, 170). The parrot can then be rotated around this point:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 800 600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;parrot&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rotate(45 150 170)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- shapes and paths forming the parrot --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, the parrot is rotated and will look like so:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-rotate-center.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;We said that the transformations are applied to the coordinate system, and because of that, the element is eventually affected and transformed. So how exactly does changing the center of rotation work on the coordinate system whose origin is at the point (0, 0)?&lt;/p&gt;
&lt;p&gt;When you change the center or rotation, the coordinate system is translated, rotated by the specified angle, and then translated again by specific values depending on the center of rotation you specify. In this example, this:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;parrot&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rotate(45 150 170)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;	&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;is performed by the browser as a series of translation and rotation operations equivalent to:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;parrot&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;translate(150 170) rotate(45) translate(-150 -170)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;	&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The current coordinate system is translated to the point you want to be the center. It is then rotated by the angle you specify. And then finally the system is translated by the negation of the values. The above transformation applied on the system looks like this:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-rotate-center-system.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Before we move on to the next section where we’re going to nest and chain transformations, I want to note that the current user coordinate system established on a transformed element is independent from other coordinate systems established on other transformed elements. The following image shows the two coordinate systems established on the dog and the parrot, and how they are independent from each other.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-multiple.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The new current user coordinate systems established on the parrot and the dog when they are transformed.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Also note that each current coordinate system still lies inside the main coordinate system of the canvas established using the &lt;code&gt;viewBox&lt;/code&gt; attribute on the containing &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;. Any transformations applied to the &lt;code&gt;viewBox&lt;/code&gt; will affect the entire canvas and all elements inside it as well, whether they have their own established coordinate systems or not.&lt;/p&gt;
&lt;p&gt;For example, the following is the result of changing the user space of the entire canvas from &lt;code&gt;viewBox=&amp;quot;0 0 800 600&amp;quot;&lt;/code&gt; to &lt;code&gt;viewBox=&amp;quot;0 0 600 450&amp;quot;&lt;/code&gt;. The entire canvas is scaled up, preserving any transformations applied to the individual elements.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-multiple-2.png&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The result of changing the user coordinate system on the entire canvas.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;nested-and-chained-transformations&quot;&gt;Nested and Chained Transformations&lt;/h4&gt; 
&lt;p&gt;A lot of times you may want to apply several transformations to an element. Applying multiple transformations in a raw is what is referred to as “chaining” transformations.&lt;/p&gt;
&lt;p&gt;When transformations are chained, the most important thing to be aware of is that, just like with HTML element transformations, each transformation is applied to the coordinate system after that system is transformed by the previous transformations.&lt;/p&gt;
&lt;p&gt;For example, if you’re going to apply a rotation to an element, followed by a translation, the translation happens according to the new coordinate system, not the inital non-rotated one.&lt;/p&gt;
&lt;p&gt;The following example does just that. We’re applying the previous rotation, and then translating the parrot using by 200 units along the positive x-axis&lt;code&gt;transform=&amp;quot;rotate(45 150 170) translate(200)&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/svg-transformations-rotate-translate.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Depending on the final position and transformation you’re after, you need to chain your transformations accordingly. Always keep the coordinate system in mind.&lt;/p&gt;
&lt;p&gt;Note that when you skew an element—and its coordinate system with it—the coordinate system will no longer be an orthogonal one, and the coordinates will no longer be calculated as orthogonal ones—they will be &lt;a href=&quot;http://en.wikipedia.org/wiki/Skew_coordinates&quot;&gt;skew coordinates&lt;/a&gt;. Simply put, this just means that the coordinate system’s origin is no longer a 90 degrees angle, and hence the new coordinates will be computed based on this new angle.&lt;/p&gt;
&lt;p&gt;Nested transformations occur when a child of a transformed element is also transformed. The transformation applied to the child element will be an accumulation of the transformations applied on its ancestors and the transformation applied on it.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	[For nested transformations,] the transformation applied to the child element will be an accumulation of the transformations applied on its ancestors and the transformation applied on it. 
&lt;/blockquote&gt;
&lt;p&gt;So, in effect, nesting transforms is similar to chaining them; only difference is that instead of applying a series of transformations on one element, it automatically gets the transformations applied on its acestors, and then finally its own transformations are applied to it, just like we applied transformations in the chain above—one after the other.&lt;/p&gt;
&lt;p&gt;This is particularly useful for when you want to transform one element relative to another. For example, suppose you want to animate the tail of the dog. The tail is a descendant of the &lt;code&gt;#dog&lt;/code&gt; group.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 800 600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dog&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;translate(..)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- shapes and paths forming the dog --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- .. --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rotate(.. .. ..)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tail&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;rotate(..)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;				&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- animateTransform here --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;legs&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;				&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suppose we translate the dog group; then rotate its body by some angle around some point, and then we want to animate the tail by rotating it and animating that rotation.&lt;/p&gt;
&lt;p&gt;When the tail is to be rotated, it “inherits” the transformed coordinate system of its ancestor (&lt;code&gt;#body&lt;/code&gt;), which in turn inherits the transformed coordinate system of its transformed ancestor (&lt;code&gt;#dog&lt;/code&gt;) as well. So, in effect, when the taill is rotated, it is as though it has been translated (by the same translation of the &lt;code&gt;#dog&lt;/code&gt; group), then rotated (by the same rotation of the &lt;code&gt;#body&lt;/code&gt; group), and &lt;em&gt;then&lt;/em&gt; rotated by its own rotation. And the effect of applying a series of transformations here is the same as we explained in the chaining example above.&lt;/p&gt;
&lt;p&gt;So, you see, nesting transformations has practically the same effect as chaining them on the &lt;code&gt;#tail&lt;/code&gt;.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;transforming-svgs-with-css&quot;&gt; Transforming SVGs using CSS Properties&lt;/h3&gt;
&lt;p&gt;In SVG 2, the &lt;code&gt;transform&lt;/code&gt; attribute is referred to as the &lt;code&gt;transform&lt;/code&gt; property; this is because SVG transformations have been “exported” into the &lt;a href=&quot;http://dev.w3.org/csswg/css-transforms/&quot;&gt;CSS3 Transforms specification&lt;/a&gt;. The latter combines the SVG Transforms, CSS 2D Transforms, and CSS 3D Transforms specifications, and introduces features like &lt;code&gt;transform-origin&lt;/code&gt; and 3D transformations into SVG.&lt;/p&gt;
&lt;p&gt;The CSS transform properties specified in the CSS Transforms specifications can be applied to SVG elements. However, the values for the &lt;code&gt;transform&lt;/code&gt; property functions need to follow the syntax specified in the CSS spec: function arguments must be separated with commas — space-separation alone isn’t valid, but you can include one or more white space before and/or after the comma; and the &lt;code&gt;rotate()&lt;/code&gt; function does not take &lt;code&gt;&amp;lt;cx&amp;gt; &amp;lt;cy&amp;gt;&lt;/code&gt; values anymore — the center of rotation is specified using the &lt;code&gt;transform-origin&lt;/code&gt; property. Also, the CSS transformatio functions do accept units for angles and coordinates, such as &lt;code&gt;rad&lt;/code&gt; (radians) for angles (among others) and &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, etc. for coordinate values.&lt;/p&gt;
&lt;p&gt;An example of rotating an SVG element using CSS may look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#parrot&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;transform-origin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50% 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* center of rotation is set to the center of the element */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;45deg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And SVG element can also be transformed in three-dimensional space using CSS 3D Transforms. Note that the coordinate systems are still, however, different from the coordinate systems established on HTML elements. This means that 3D rotations will also look different unless you change the center of rotation.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#SVGel&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;perspective&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;800px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rotate3d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 45deg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because transforming SVG elements with CSS is pretty much the same as transforming HTML elements with CSS—syntax-wise—I’m going to skip elaborating on this topic in this article.&lt;/p&gt;
&lt;p&gt;That said, at the time of writing of this article, implementations are still incomplete in some browsers and for some features. Because of how fast browser support changes, I recommend you experiment with the properties to determine what currently works and what doesn’t, and decide on what you can start using today and what not.&lt;/p&gt;
&lt;p&gt;Note that once CSS Transforms are fully implemented for SVG elements, it is recommended that you use the CSS transforms function syntax even when you apply the transformation in the form of a &lt;code&gt;transform&lt;/code&gt; attribute. That said, the above mentioned syntax of the &lt;code&gt;transform&lt;/code&gt; attribute functions will still be valid.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;animating-transform&quot;&gt;Animating &lt;code&gt;transform&lt;/code&gt;&lt;/h3&gt; 
&lt;p&gt;SVG transformations can be animated, just like CSS transforms can be. If you’re using the CSS &lt;code&gt;transform&lt;/code&gt; property to transform the SVG, you can animate the transformation using CSS animations and transitions just like you would animate CSS transforms on HTML elements.&lt;/p&gt;
&lt;p&gt;The SVG &lt;code&gt;transform&lt;/code&gt; attribute can be animated using the SVG &lt;code&gt;&amp;lt;animateTransform&amp;gt;&lt;/code&gt; element. The &lt;code&gt;&amp;lt;animateTransform&amp;gt;&lt;/code&gt; element is one of three elements in SVG that are used to animate different SVG attributes.&lt;/p&gt;
&lt;p&gt;Details of the &lt;code&gt;&amp;lt;animateTransform&amp;gt;&lt;/code&gt; element are outside the scope of this article. Stay tuned for an article I’ll be writing about the different SVG animation elements, including &lt;code&gt;&amp;lt;animateTransform&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt; 
&lt;p&gt;Working with SVGs can be really frustrating at first, if the concepts behind the coordinate system transformations aren’t very clear, especially if you’re coming from a CSS HTML transformations background, and naturally expect SVG elements to respond the same way to transformations as HTML elements do.&lt;/p&gt;
&lt;p&gt;However, once you get a grip of how they work, you gain a better control over your SVG canvas, and can manipulate elements more easily.&lt;/p&gt;
&lt;p&gt;In the last part of this series, I’m going to go over nesting SVGs and establishing new viewports and viewboxes. Stay tuned!&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
	The SVG parrot &amp;amp; dog illustrations used are freebies from &lt;a href=&quot;http://freepik.com/&quot;&gt;Freepik.com&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;I hope you liked this article and found it useful. Thank you for reading!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Understanding SVG Coordinate Systems and Transformations (Part 1) — The viewport, viewBox, and preserveAspectRatio</title>
    <link href="https://sarasoueidan.com/blog/svg-coordinate-systems/"/>
    <updated>2014-07-17T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/svg-coordinate-systems/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;SVG elements aren&#39;t governed by a CSS box model like HTML elements are. This makes positioning and transforming these elements trickier and may seem&amp;mdash;at first glance&amp;mdash;less intuitive. However, once you understand how SVG coordinate systems and transformations work, manipulating SVGs becomes a lot easier and makes a lot more sense. In this article we&#39;re going to go over three of the most important SVG attributes that control SVG coordinate systems: &lt;code&gt;viewport&lt;/code&gt;, &lt;code&gt;viewBox&lt;/code&gt;, and &lt;code&gt;preserveAspectRatio&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is the first in a series of three articles covering the topic of coordinate systems and transformations in SVG.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understanding SVG Coordinate Systems &amp;amp; Transformations (Part 1) – The viewport, &lt;code&gt;viewBox&lt;/code&gt;, &amp;amp; &lt;code&gt;preserveAspectRatio&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sarasoueidan.com/blog/svg-transformations&quot;&gt;Understanding SVG Coordinate Systems &amp;amp; Transformations (Part 2) – The &lt;code&gt;transform&lt;/code&gt; Attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sarasoueidan.com/blog/nesting-svgs&quot;&gt;Understanding SVG Coordinate Systems &amp;amp; Transformations (Part 3) – Establishing New Viewports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For the sake of visualizing the concepts and explanations in the article even further, I created an interactive demo that allows you to play with the values of the &lt;code&gt;viewBox&lt;/code&gt; and &lt;code&gt;preserveAspectRatio&lt;/code&gt; attributes.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;btn&quot; href=&quot;https://sarasoueidan.com/demos/interactive-svg-coordinate-system/index.html&quot;&gt;Check the interactive demo out.&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;The demo is the cherry on top of the cake, so do make sure you come back to read the article if you check it out before you do!&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;svg-canvas&quot;&gt;The SVG Canvas&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;canvas&lt;/strong&gt; is the space or area where the SVG content is drawn. Conceptually, this canvas is infinite in both dimensions. The SVG can therefore be of any size. However, it is rendered on the screen relative to a &lt;strong&gt;finite region&lt;/strong&gt; known as &lt;em&gt;the viewport&lt;/em&gt;. Areas of the SVG that lie beyond the boundaries of the viewport are clipped off and not visible.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;svg-viewport&quot;&gt;The viewport&lt;/h3&gt;
&lt;p&gt;The viewport is the viewing area where the SVG will be visible. You can think of the viewport as a window through which you can see a particular scene. The scene may be entirely or partially visible through that window.&lt;/p&gt;
&lt;p&gt;The SVG viewport is similar to the viewport of the browser you’re viewing this page through. A web page can be of any size; it can be wider than the viewport’s width, and is in most cases also longer than the viewport’s length. However, only portions of a web page are visible through the viewport at a time.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;Whether or not the entire SVG canvas or part of it is visible depends on the &lt;strong&gt;size of that canvas*&lt;/strong&gt; and &lt;strong&gt;the value of the &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute&lt;/strong&gt;. You don&#39;t have to worry about these now; we&#39;ll talk about them further in more detail.&lt;/p&gt;
&lt;p&gt;You specify the size of the viewport using the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes on the outermost &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- the viewport will be 800px by 600px --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- SVG content drawn onto the SVG canvas --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In SVG, values can be set with or without a unit identifier. A unitless value is said to be specified &lt;em&gt;in user space&lt;/em&gt; using &lt;em&gt;user units&lt;/em&gt;. If a value is specified in user units, then the value is assumed to be equivalent to the same number of “px” units. This means that the viewport in the above example will be rendered as a 800px by 600px viewport.&lt;/p&gt;
&lt;p&gt;You can also specify values using units. The supported length unit identifiers in SVG are: &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;ex&lt;/code&gt;, &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt;, &lt;code&gt;pc&lt;/code&gt;, &lt;code&gt;cm&lt;/code&gt;, &lt;code&gt;mm&lt;/code&gt;, &lt;code&gt;in&lt;/code&gt;, and percentages.&lt;/p&gt;
&lt;p&gt;Once the width and height of the outermost SVG element are set, the browser establishes an initial &lt;em&gt;viewport coordinate system&lt;/em&gt; and an initial &lt;em&gt;user coordinate system&lt;/em&gt;.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;initial-coordinate-system&quot;&gt;The initial coordinate system&lt;/h4&gt;
&lt;p&gt;The initial &lt;strong&gt;viewport coordinate system&lt;/strong&gt; is a coordinate system established on the viewport, with the origin at the top left corner of the viewport at point (0, 0), the positive x-axis pointing towards the right, the positive y-axis pointing down, and one unit in the initial coordinate system equals one “pixel” in the viewport. This coordinate system is similar to the coordinate system established on an HTML element with a CSS box model.&lt;/p&gt;
&lt;p&gt;The initial &lt;strong&gt;user coordinate system&lt;/strong&gt; is the coordinate system established on the SVG canvas. This coordinate system is initially identical to the viewport coordinate system—it has its origin at the top left corner of the viewport with the positive x-axis pointing towards the right, the positive y-axis pointing down. Using the &lt;code&gt;viewBox&lt;/code&gt; attribute, the initial user coordinate system—also known as &lt;strong&gt;the current coordinate system&lt;/strong&gt;, or &lt;strong&gt;user space in use&lt;/strong&gt;—can be modified so that it is not identical to the viewport coordinate system anymore. We’ll talk about modifying it in the next section.&lt;/p&gt;
&lt;p&gt;For now, we won’t specify a &lt;code&gt;viewBox&lt;/code&gt; attribute value. The user coordinate system of the SVG canvas is identical to that of the viewport.&lt;/p&gt;
&lt;p&gt;In the following image, the viewport coordinate system “ruler” is grey, and that of the user coordinate system (the &lt;code&gt;viewBox&lt;/code&gt;) is blue. Since they are both identical at this point, the two coordinate systems overlap.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/initial-coordinate-systems.jpg&quot; alt=&quot;Viewport Coordinate System&quot; /&gt;
	&lt;figcaption&gt;
		The initial coordinate systems established on the viewport and SVG canvas. Grey units represent the viewport coordinate system; blue units represent the user coordinate system. Both coordinate systems are identical and coincide.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The parrot in the above SVG has a bounding box that is 200 units (200 pixels in this case) in width and 300 units in height. The parrot is drawn on the canvas based on the initial coordinate system.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;A new user space (i.e., a new current coordinate system) can also be established by specifying &lt;strong&gt;transformations&lt;/strong&gt; using the &lt;code&gt;transform&lt;/code&gt; attribute on a container element or graphics element. We&#39;ll talk about transformations in the second part of this article, and then in more details in the third and last part.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;svg-viewbox&quot;&gt;The &lt;code&gt;viewBox&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;I like to think of the &lt;code&gt;viewBox&lt;/code&gt; as the “real” coordinate system. After all, it is &lt;em&gt;the&lt;/em&gt; coordinate system used to draw the SVG graphics onto the canvas. This coordinate system can be smaller or bigger than the viewport, and it can be fully or partially visible inside the viewport too.&lt;/p&gt;
&lt;p&gt;In the previous section, this coordinate system—the user coordinate system—was identical to the viewport coordinate system. The reason for that is that we did not specify it to be otherwise. That’s why all the positioning and drawing seemed to be done relative to the viewport coordinate system. Because once we created a viewport coordinate system (using &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;), the browser created a default user coordinate system that is identical to it.&lt;/p&gt;
&lt;p&gt;You specify your own user coordinate system using the &lt;code&gt;viewBox&lt;/code&gt; attribute. If the user coordinate system you choose has the same aspect ratio (ratio of height to width) as the viewport coordinate system, it will stretch to fill the viewport area (we’ll talk examples in a minute). However, if your user coordinate system does not have the same aspect ratio, you  can use the &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute to specify whether or not the entire system will be visible inside the viewport or not, and you can also use it to specify how it is positioned inside the viewport. We’ll get into details and lots of examples for this case in the next section. In this section, we’ll stick to examples where the aspect ratio of the &lt;code&gt;viewBox&lt;/code&gt; matches that of the viewport—in these examples, &lt;code&gt;preserveAspectRatio&lt;/code&gt; has no effect.&lt;/p&gt;
&lt;p&gt;Before we get into the examples, we’ll go over the syntax of &lt;code&gt;viewBox&lt;/code&gt;.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;viewbox-syntax&quot;&gt;The &lt;code&gt;viewBox&lt;/code&gt; syntax&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;viewBox attribute&lt;/code&gt; takes four parameters as a value: &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;viewBox = &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;min-x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;min-y&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt; values determine the upper left corner of the viewbox, and the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; determine the width and height of that viewBox. Note here that the width and height of the viewBox need not be the same as the width and height set on the parent &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element. A negative value for &lt;code&gt;&amp;lt;width&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;height&amp;gt;&lt;/code&gt; is invalid. A value of zero disables rendering of the element.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
Note that the width of the viewport can also be set in CSS to any value. For example, setting &lt;code&gt;width: 100%&lt;/code&gt; will make the SVG viewport fluid in a document. Whatever value of the &lt;code&gt;viewBox&lt;/code&gt;, it will then be mapped to the computed width of the outer SVG element.
&lt;/p&gt;
&lt;p&gt;An example of setting &lt;code&gt;viewBox&lt;/code&gt; would look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- The viewbox in this example is equal to the viewport, but it can be different --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewbox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 800 600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- SVG content drawn onto the SVG canvas --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you’ve read about the &lt;code&gt;viewBox&lt;/code&gt; somewhere before, you may have come across a few definitions saying that you can use the &lt;code&gt;viewBox&lt;/code&gt; attribute to transform the SVG graphic by scaling or translating it. This is true. I’m going to go further and say that you can even &lt;em&gt;crop&lt;/em&gt; the SVG graphic using &lt;code&gt;viewBox&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The best way to understand the &lt;code&gt;viewBox&lt;/code&gt; and differentiate it from the viewport is by visualizing it. So let’s start with some examples. We’ll start with examples where the aspect ratio of the viewbox is the same as the aspect ratio of the viewport, so we won’t need to dig into &lt;code&gt;preserveAspectRatio&lt;/code&gt; yet.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;viewbox-aspect-ratio&quot;&gt;&lt;code&gt;viewBox&lt;/code&gt; with aspect ratio equal to the viewport&#39;s aspect ratio&lt;/h4&gt;
&lt;p&gt;We’ll start with a simple example. The &lt;code&gt;viewbox&lt;/code&gt; in this example will be half the size of the viewport. We won’t change the origin of the viewbox in this one, so both &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt; will be set to zero. The width and height of the viewbox will be half the width and height of the viewport. This means that we’re preserving the aspect ratio.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewbox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 400 300&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- SVG content drawn onto the SVG canvas --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, what does &lt;code&gt;viewbox=&amp;quot;0 0 400 300&amp;quot;&lt;/code&gt; exactly do?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It specifies a specific region of the canvas spanning from a top left point at (0, 0) to a point at (400, 300).&lt;/li&gt;
&lt;li&gt;The SVG graphic is then &lt;strong&gt;cropped&lt;/strong&gt; to that region.&lt;/li&gt;
&lt;li&gt;The region is &lt;strong&gt;scaled up&lt;/strong&gt; (in a zoom-in-like effect) to fill the entire viewport.&lt;/li&gt;
&lt;li&gt;The user coordinate system is mapped to the viewport coordinate system so that—in this case—one user unit is equal to two viewport units.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following image shows the result of applying the above viewbox to the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; canvas in our example. The grey units represent the viewport coordinate system, and the blue coordinate system represents the user coordinate system established by the &lt;code&gt;viewBox&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-400-300-crop.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		Specifying a viewbox has a result similar to cropping the graphic to that viewbox and then zooming it in so that it fills the entire viewport area. Remember that we&#39;re still maintaining the same aspect ratio as the viewport in this case.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Anything you draw on the SVG canvas will be drawn relative to the new user coordinate system.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;I like to visualize the SVG canvas with a &lt;code&gt;viewBox&lt;/code&gt; the same way as Google maps. You can zoom in to a specific region or area in Google maps; that area will be the only area visible, scaled up, inside the viewport of the browser. However, you know that the rest of the map is still there, but it&#39;s not visible because it extends beyond the boundaries of the viewport&amp;mdash;it&#39;s being clipped out.&lt;/p&gt;
&lt;p&gt;Now let’s try changing the &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt; values. We’ll set both to &lt;code&gt;100&lt;/code&gt;. They can be any number you want. The width and height ratio will also be the same as width and height ratio of the viewport.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewbox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100 100 200 150&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- SVG content drawn onto the SVG canvas --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The effect of applying &lt;code&gt;viewBox=&amp;quot;100 100 200 150&amp;quot;&lt;/code&gt; is also a crop effect like the one in the previous example. The graphic is cropped and scaled up to fill the entire viewport area.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-200-150-crop.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The result of &quot;cropping&quot; the graphic to a viewbox with an origin at (100, 100) and width 200 and height 150.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Again, the user coordinate system is mapped to the viewport coordinate system—200 user units are mapped to 800 viewport units so that every user unit is equal to four viewport units. This results in a zoom-in effect like the one you can see in the above screenshot.&lt;/p&gt;
&lt;p&gt;Also note, at this point, that specifying non-zero values for the &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt; values has a transformation effect on the graphic; more specifically, it is as though the SVG canvas was translated by 100 units to the top and 100 units to the left (&lt;code&gt;transform=&amp;quot;translate(-100 -100)&amp;quot;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Indeed, as the specification states, &lt;q&gt;the effect of the &lt;code&gt;viewBox&lt;/code&gt; attribute is that the user agent automatically supplies the appropriate transformation matrix to map the specified rectangle in user space to the bounds of a designated region (often, the viewport)&lt;/q&gt;.&lt;/p&gt;
&lt;p&gt;This is just a fancy way of saying what we already mentioned before: the graphic is cropped and then &lt;strong&gt;scaled&lt;/strong&gt; to fit into the viewport. The spec then goes on to add a note: &lt;q&gt;in some cases the user agent will need to supply a &lt;strong&gt;translate transformation&lt;/strong&gt; in addition to a scale transformation. For example, on an outermost svg element, &lt;strong&gt;a translate transformation will be needed if the &lt;code&gt;viewBox&lt;/code&gt; attributes specifies values other than zero for &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt;&lt;/strong&gt;.)&lt;/q&gt;&lt;/p&gt;
&lt;p&gt;To demonstrate the translation transformation even better, let’s try applying negative values (-100) to &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt;. The translation effect would be then similar to &lt;code&gt;transform=&amp;quot;translate(100 100)&amp;quot;&lt;/code&gt;; meaning that the graphic will be translated to the bottom and to the right after being cropped and scaled. If were to revisit the second to last example with a crop size of 400 by 300, and then add the new negative &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt; values, this would be our new code:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewbox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;-100 -100 400 300&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- SVG content drawn onto the SVG canvas --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of applying the above &lt;code&gt;viewBox&lt;/code&gt; transformation to the graphic is shown in the following image:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-400-300-crop-translate.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
&lt;p&gt;&lt;/p&gt;&lt;/figcaption&gt;&lt;p&gt;&lt;/p&gt;
&lt;/figure&gt;
&lt;p&gt;Note that, unlike the &lt;code&gt;transform&lt;/code&gt; attribute, the automatic transformation that is created due to a &lt;code&gt;viewBox&lt;/code&gt; does not affect the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes on the element with the &lt;code&gt;viewBox&lt;/code&gt; attribute. Thus, in the example above which shows an &lt;code&gt;svg&lt;/code&gt; element which has attributes &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;viewBox&lt;/code&gt;, the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes represent values in the coordinate system that exists before the &lt;code&gt;viewBox&lt;/code&gt; transformation is applied. You can see this in the above examples as the initial (grey) viewport coordinate system remains unaffected even after using the &lt;code&gt;viewBox&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, like the &lt;code&gt;transform&lt;/code&gt; attribute, it does establish a new coordinate system for all other attributes and for descendant elements. You can also see that in the above examples as the user coordinate system established is a new one—it does not remain as the initial user coordinate system which was identical to the viewport coordinate system before the &lt;code&gt;viewBox&lt;/code&gt; was used. And any descendants of the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; will be positioned and sized in the &lt;strong&gt;new&lt;/strong&gt; user coordinate system, not the initial one.&lt;/p&gt;
&lt;p&gt;Our last &lt;code&gt;viewBox&lt;/code&gt; example is similar to the previous ones, but instead of cropping the canvas, we’re going to &lt;em&gt;extend&lt;/em&gt; it inside the viewport and see how it affects the graphic. We’re going to specify a viewbox with a width and height that are larger than those of the viewport, while also maintaining the aspect ratio of the viewport. We’ll deal with different aspect ratios in the next section.&lt;/p&gt;
&lt;p&gt;In this example, we’ll make the viewbox 1.5 times the size of the viewport.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewbox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 1200 900&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- SVG content drawn onto the SVG canvas --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What will happen now is that the user coordinate system is going to be scaled up to 1200x900. It will then be mapped to the viewport coordinate system so that every 1 unit in the user coordinate system is equal to &lt;code&gt;viewport-width / viewBox-width&lt;/code&gt; horizontally, and &lt;code&gt;viewport-height / viewBox-height&lt;/code&gt; units vertically in the viewport coordinate system. This means that, in this case, every one x-unit in the user coordinate system is equal to 0.66 x-units in the viewport coordinate system, and every one user y-unit is mapped to 0.66 viewport y-units.&lt;/p&gt;
&lt;p&gt;Of course, the best way to understand this is to visualize the result. The viewbox is scaled so that it fits inside the viewport as shown in the following image. And because the graphic is drawn on the canvas based on the new user coordinate system, not the viewport coordinate system, it will look smaller inside the viewport.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-1200-900.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		A 1200x900 user coordinate system mapped into the 800x600 viewport coordinate system. The grey units represent the viewport coordinate system; the blue units represent the system established from the &lt;code&gt;viewBox&lt;/code&gt;.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So far, all of our examples have been in conformity with the viewport’s height to width aspect ratio. But what happens if the height and width specified in the &lt;code&gt;viewBox&lt;/code&gt; have a different aspect ratio than that of the viewport’s? For example, suppose we set the dimensions of the viewbox to be 1000x500. The aspect ratio of height to width is no longer the same as that of the viewport. The result of using &lt;code&gt;viewBox = &amp;quot;0 0 1000 500&amp;quot;&lt;/code&gt; in our example looks like the following:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-1000-500.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The result of defining a 1000x500 user coordinate system in a 800x600 viewport.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The user coordinate system and hence the graphic is positioned inside the viewport so that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The entire viewbox fits inside the viewport.&lt;/li&gt;
&lt;li&gt;The aspect ratio of the viewbox is preserved. The viewbox was &lt;em&gt;not&lt;/em&gt; stretched to cover the viewport area.&lt;/li&gt;
&lt;li&gt;THe viewbox is centered inside the viewport both vertically and horizontally.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the default behavior. What controls this behavior? And what if we want to change the position of the viewbox inside the viewport? This is where the &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute comes in.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;preserveaspectratio&quot;&gt;The &lt;code&gt;preserveAspectRatio&lt;/code&gt; Attribute&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute is used to force a uniform scaling for the purposes of preserving the aspect ratio of a graphic.&lt;/p&gt;
&lt;p&gt;If you define a user coordinate system with an aspect ratio different from that of the viewport’s, and if the browser were to stretch the viewbox to fit into the viewport as we’ve seen in previous examples, the difference in aspect ratios will cause the graphic to be distorted in either direction. So if the viewbox in the last example were to be stretched to fill the viewport in both directions, the graphic would look like so:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-1000-500-stretched.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The result of mapping the user coordinate system to the viewport without preserving its aspect ratio. The graphic is distorted and looks shrunk horizontally while also being stretched vertically.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The distortion is also clearly visible (and unwanted, of course) when using a viewbox value of &lt;code&gt;0 0 200 300&lt;/code&gt;, which would be smaller than the dimensions of the viewport. I chose this value in particular so that the viewbox matches the size of the bounding box of the parrot. If the browser were to stretch the graphic to fill the entire viewport, it would look like the so:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-200-300-stretched.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The result of mapping the user coordinate system to the viewport without preserving its aspect ratio. The graphic is distorted.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute allows you to force uniform scaling of the viewbox, while maintaining the aspect ratio, and it allows you to specify how to position the viewbox inside the viewport if you don’t want it to be centered by default.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;preserveAspectRatio-syntax&quot;&gt;The &lt;code&gt;preserveAspectRatio&lt;/code&gt; syntax&lt;/h4&gt;
&lt;p&gt;The official syntax for &lt;code&gt;preserveAspectRatio&lt;/code&gt; is:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;preserveAspectRatio = defer? &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;meetOrSlice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is usable on any element that establishes a new viewport (we’ll get into these in the next parts of the series).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;defer&lt;/code&gt; argument is optional, and is used only when you’re applying &lt;code&gt;preserveAspectRatio&lt;/code&gt; to an &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;. It is ignored when used on any other element. Since &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt; it outside the scope of this article, we’ll skip the &lt;code&gt;defer&lt;/code&gt; option for now.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;align&lt;/code&gt; parameter indicates whether to force uniform scaling and, if so, the alignment method to use in case the aspect ratio of the &lt;code&gt;viewBox&lt;/code&gt; doesn’t match the aspect ratio of the viewport.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;align&lt;/code&gt; value is set to &lt;code&gt;none&lt;/code&gt;, for example:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;preserveAspectRatio = &quot;none&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The graphic will be scaled to fit inside the viewport without maintaining the aspect ratio, just like we saw in the last two examples.&lt;/p&gt;
&lt;p&gt;All other values of &lt;code&gt;preserveAspectRatio&lt;/code&gt; force uniform scaling while preserving the viewbox’s aspect ratio, and specify how to align the viewbox inside the viewport. We’ll get into the values of &lt;code&gt;align&lt;/code&gt; shortly.&lt;/p&gt;
&lt;p&gt;The last argument, &lt;code&gt;meetOrSlice&lt;/code&gt; is also optional, and it defaults to &lt;code&gt;meet&lt;/code&gt;. This argument specifies whether or not the entire &lt;code&gt;viewBox&lt;/code&gt; should be visible inside the viewport. If provided, it is separated from the &lt;code&gt;align&lt;/code&gt; parameter by one or more spaces. For example:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;preserveAspectRatio = &quot;xMinYMin slice&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These values may seem foreign at first. To make understanding them easier and make them more familiar, you can think of the &lt;code&gt;meetOrSlice&lt;/code&gt; value as being similar to the &lt;code&gt;background-size&lt;/code&gt; values &lt;code&gt;contain&lt;/code&gt; and &lt;code&gt;cover&lt;/code&gt;; they work pretty much the same. &lt;code&gt;meet&lt;/code&gt; is similar to &lt;code&gt;contain&lt;/code&gt;, and &lt;code&gt;slice&lt;/code&gt; is similar to &lt;code&gt;cover&lt;/code&gt;. Here are the definitions and meaning of each value:&lt;/p&gt;
&lt;dl&gt;
	&lt;dt&gt;meet (The default value)&lt;/dt&gt;
	&lt;dd&gt;
		Scale the graphic as much as possible while maintaining the following two criteria:
		&lt;ul&gt;
			&lt;li&gt;aspect ratio is preserved&lt;/li&gt;
			&lt;li&gt;the entire &lt;code&gt;viewBox&lt;/code&gt; is visible within the viewport&lt;/li&gt;
		&lt;/ul&gt;
		&lt;p&gt;
			In this case, if the aspect ratio of the graphic does not match the viewport, some of the viewport will extend beyond the bounds of the &lt;code&gt;viewBox&lt;/code&gt; (i.e., the area into which the &lt;code&gt;viewBox&lt;/code&gt; will draw will be smaller than the viewport). (See the last example of The viewBox section.) In this case, the boundaries of the `viewBox` are contained inside the viewport such that the boundaries *meet*.
		&lt;/p&gt;
		&lt;p class=&quot;note&quot;&gt;
			This value is similar to  &lt;code&gt;background-size: contain&lt;/code&gt;. The background image is scaled as much as possible while preserving its aspect ratio and making sure it fits entirely into the background painting area. If the aspect ratio of the background is not the same as that of the element it is being applied to, parts of the background painting area will not be covered by the background image.
		&lt;/p&gt;
	&lt;/dd&gt;
	&lt;dt&gt;slice&lt;/dt&gt;
	&lt;dd&gt;
		Scale the graphic so that the &lt;code&gt;viewBox&lt;/code&gt; covers the entire viewport area, while maintaining its aspect ratio. The &lt;code&gt;viewBox&lt;/code&gt; is scaled &lt;strong&gt;just enough&lt;/strong&gt; to cover the viewport area (in both dimensions), but it is not scaled any more than needed to achieve that. In other words, it is scaled to the smallest size such that the width and height of the &lt;code&gt;viewBox&lt;/code&gt; can completely cover the viewport.
		&lt;p&gt;
			In this case, if the aspect ratio of the &lt;code&gt;viewBox&lt;/code&gt; does not match the viewport, some of the &lt;code&gt;viewBox&lt;/code&gt; will extend beyond the bounds of the viewport (i.e., the area into which the &lt;code&gt;viewBox&lt;/code&gt; will draw is larger than the viewport). This will result in part of the `viewBox` being *sliced off*.
		&lt;/p&gt;
		&lt;p class=&quot;note&quot;&gt;
			You can think of this as being similar to &lt;code&gt;background-size: cover&lt;/code&gt;. In the case of a background image, the image is scaled while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area.
		&lt;/p&gt;
	&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;So, &lt;code&gt;meetOrSlice&lt;/code&gt; is used to specify whether or not the &lt;code&gt;viewBox&lt;/code&gt; will be completely contained inside the viewport, or if it should be scaled as much as needed to cover the entire viewport, even if this means that a part of the viewbox will be “sliced off”.&lt;/p&gt;
&lt;p&gt;For example, if we were to apply &lt;code&gt;viewBox&lt;/code&gt; size of 200x300, and using both the &lt;code&gt;meet&lt;/code&gt; and &lt;code&gt;slice&lt;/code&gt; values, keeping the &lt;code&gt;align&lt;/code&gt; value set to the default by the browser, the result for each value will look like the following:&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-200-300-meet-vs-slice.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The result of applying the &lt;code&gt;meet&lt;/code&gt; parameter vs the &lt;code&gt;slice&lt;/code&gt; parameter on a &lt;code&gt;viewBox&lt;/code&gt; with an aspect ratio different from that of the viewport&#39;s aspect ratio.
		&lt;br /&gt;
		&lt;br /&gt;
		The default value for &lt;code&gt;align&lt;/code&gt; is &lt;code&gt;xMidYMid&lt;/code&gt;, so, in both cases, the graphic is scaled so that its mid axes align with the mid axes of the viewport.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;align&lt;/code&gt; parameter takes one of nine values, or the &lt;code&gt;none&lt;/code&gt; value. Any value other than &lt;code&gt;none&lt;/code&gt; is used to uniformly scale the image preserving its aspect ratio, &lt;em&gt;&lt;strong&gt;and&lt;/strong&gt;&lt;/em&gt; it is also used to &lt;em&gt;align&lt;/em&gt; the &lt;code&gt;viewBox&lt;/code&gt; inside the viewport.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;align&lt;/code&gt; values works similar to the way &lt;code&gt;background-position&lt;/code&gt; works when used with percentage values. You can think of the &lt;code&gt;viewBox&lt;/code&gt; as being the background image. The way the positioning with &lt;code&gt;align&lt;/code&gt; differs from &lt;code&gt;background-position&lt;/code&gt; is that instead of positioning a specific point of the viewbox over a corresponding point of the viewport, it &lt;em&gt;aligns&lt;/em&gt; specific “axes” of the viewBox with corresponding “axes” of the viewport.&lt;/p&gt;
&lt;p&gt;In order to understand the meaning of each of the &lt;code&gt;align&lt;/code&gt; values, we’re going to first introduce each of the “axes”.&lt;/p&gt;
&lt;p&gt;Remember the &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt; values of the &lt;code&gt;viewBox&lt;/code&gt;? We’re going to use each of these to define the “min-x” axis and “min-y” axis on the &lt;code&gt;viewBox&lt;/code&gt;. Additionally, we’re going to define two axes “max-x” and “max-y”, which will be positioned at &lt;code&gt;&amp;lt;min-x&amp;gt; + &amp;lt;width&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt; + &amp;lt;height&amp;gt;&lt;/code&gt;, respectively. And last but not least, we’ll define two axes “mid-x” and “mid-y”, which are positioned at &lt;code&gt;&amp;lt;min-x&amp;gt; + (&amp;lt;width&amp;gt;/2)&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt; + (&amp;lt;height&amp;gt;/2)&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Did that make things more confusing? If so, have a look at the following image to see what each of those axes represents. In the image, both &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt; are set to their default &lt;code&gt;0&lt;/code&gt; values. The &lt;code&gt;viewBox&lt;/code&gt; is set to &lt;code&gt;viewBox = &amp;quot;0 0 300 300&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-x-y-axes.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The pink and orange solid lines represent the min-y and min-x values respectively. The dashed pink and orange lines represent the mid and max x and y values.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The dashed grey lines in the above image represent the mid-x and mid-y axes of the viewport. We’re going to use those to align the mid-x and mid-y of axes of the &lt;code&gt;viewBox&lt;/code&gt; for some values. For the viewport, the min-x value is equal to 0, the min-y value is also 0, the max-x value is equal to the width of the &lt;code&gt;viewBox&lt;/code&gt;, the max-y value is equal to its height, and the mid-x and mid-y represent the middle values of the width and height, respectively.&lt;/p&gt;
&lt;p&gt;The alignment values are:&lt;/p&gt;
&lt;dl&gt;
	&lt;dt&gt;none&lt;/dt&gt;
	&lt;dd&gt;
&lt;p&gt;Do not force uniform scaling. Scale the graphic content of the given element non-uniformly (without preserving aspect ratio) if necessary such that the element’s bounding box exactly matches the viewport rectangle.&lt;/p&gt;
&lt;p&gt;In other words, the &lt;code&gt;viewBox&lt;/code&gt; is stretched or shrunk as necssary so that it fills the entire viewport exactly, disregarding the aspect ratio. The graphic may be distorted.&lt;/p&gt;
&lt;p&gt;(Note: if &lt;code&gt;align&lt;/code&gt; is none, then the optional &lt;code&gt;meetOrSlice&lt;/code&gt; value is ignored.)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;xMinYMin&lt;/dt&gt;
&lt;dd&gt;
					Force uniform scaling.
&lt;p&gt;Align the &lt;code&gt;min-x&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the smallest X value of the viewport.&lt;/p&gt;
&lt;p&gt;Align the &lt;code&gt;min-y&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the smallest Y value of the viewport.&lt;/p&gt;
&lt;p&gt;Think of this as being similar to &lt;code&gt;background-position: 0% 0%;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;xMinYMid&lt;/dt&gt;
&lt;dd&gt;
					Force uniform scaling.
&lt;p&gt;Align the &lt;code&gt;min-x&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the smallest X value of the viewport.&lt;/p&gt;
&lt;p&gt;Align the midpoint Y value of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the midpoint Y value of the viewport.&lt;/p&gt;
&lt;p&gt;Think of this as being similar to &lt;code&gt;background-position: 0% 50%;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;xMinYMax&lt;/dt&gt;
&lt;dd&gt;
					Force uniform scaling.
&lt;p&gt;Align the &lt;code&gt;min-x&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the smallest X value of the viewport.&lt;/p&gt;
&lt;p&gt;Align the &lt;code&gt;min-y&lt;/code&gt;+&lt;code&gt;height&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the maximum Y value of the viewport.&lt;/p&gt;
&lt;p&gt;Think of this as being similar to &lt;code&gt;background-position: 0% 100%;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;xMidYMin&lt;/dt&gt;
&lt;dd&gt;
					Force uniform scaling.
&lt;p&gt;Align the midpoint X value of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the midpoint X value of the viewport.&lt;/p&gt;
&lt;p&gt;Align the &lt;code&gt;min-y&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the smallest Y value of the viewport.&lt;/p&gt;
&lt;p&gt;Think of this as being similar to &lt;code&gt;background-position: 50% 0%;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;xMidYMid (The default value)&lt;/dt&gt;
&lt;dd&gt;						
					Force uniform scaling.
&lt;p&gt;Align the midpoint X value of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the midpoint X value of the viewport.&lt;/p&gt;
&lt;p&gt;Align the midpoint Y value of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the midpoint Y value of the viewport.&lt;/p&gt;
&lt;p&gt;Think of this as being similar to &lt;code&gt;background-position: 50% 50%;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;xMidYMax&lt;/dt&gt;
&lt;dd&gt;
					Force uniform scaling.
&lt;p&gt;Align the midpoint X value of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the midpoint X value of the viewport.&lt;/p&gt;
&lt;p&gt;Align the &lt;code&gt;min-y&lt;/code&gt;+&lt;code&gt;height&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the maximum Y value of the viewport.&lt;/p&gt;
&lt;p&gt;Think of this as being similar to &lt;code&gt;background-position: 50% 100%;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;xMaxYMin&lt;/dt&gt;
&lt;dd&gt;
					Force uniform scaling.
&lt;p&gt;Align the &lt;code&gt;min-x&lt;/code&gt;+&lt;code&gt;width&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the maximum X value of the viewport.&lt;/p&gt;
&lt;p&gt;Align the &lt;code&gt;min-y&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the smallest Y value of the viewport.&lt;/p&gt;
&lt;p&gt;Think of this as being similar to &lt;code&gt;background-position: 100% 0%;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;xMaxYMid&lt;/dt&gt;
&lt;dd&gt;
					Force uniform scaling.
&lt;p&gt;Align the &lt;code&gt;min-x&lt;/code&gt;+&lt;code&gt;width&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the maximum X value of the viewport.&lt;/p&gt;
&lt;p&gt;Align the midpoint Y value of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the midpoint Y value of the viewport.&lt;/p&gt;
&lt;p&gt;Think of this as being similar to &lt;code&gt;background-position: 100% 50%;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;xMaxYMax&lt;/dt&gt;
&lt;dd&gt;
					Force uniform scaling.
&lt;p&gt;Align the &lt;code&gt;min-x&lt;/code&gt;+&lt;code&gt;width&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the maximum X value of the viewport.&lt;/p&gt;
&lt;p&gt;Align the &lt;code&gt;min-y&lt;/code&gt;+&lt;code&gt;height&lt;/code&gt; of the element’s &lt;code&gt;viewBox&lt;/code&gt; with the maximum Y value of the viewport.&lt;/p&gt;
&lt;p&gt;Think of this as being similar to &lt;code&gt;background-position: 100% 100%;&lt;/code&gt;.&lt;/p&gt;
&lt;/dd&gt;
			&lt;/dl&gt;
&lt;p&gt;So, using the &lt;code&gt;align&lt;/code&gt; and &lt;code&gt;meetOrSlice&lt;/code&gt; values of the &lt;code&gt;preserveAspectRatio&lt;/code&gt; attribute, you can specify whether or not to scale the &lt;code&gt;viewBox&lt;/code&gt; uniformly, how to align it inside the viewport, and whether or not it should be entirely visible inside the viewport.&lt;/p&gt;
&lt;p&gt;Sometimes, and depending on the size of the &lt;code&gt;viewBox&lt;/code&gt;, some values may have similar results. For example, in the &lt;code&gt;viewBox=&amp;quot;0 0 200 300&amp;quot;&lt;/code&gt; example from earlier, some alignments are identical using different &lt;code&gt;align&lt;/code&gt; values. The value of &lt;code&gt;meetOrSlice&lt;/code&gt; is set to &lt;code&gt;meet&lt;/code&gt; in this case so that the entire &lt;code&gt;viewBox&lt;/code&gt; is contained inside the viewport.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-meet-align-same.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The result of aligning the &lt;code&gt;viewBox&lt;/code&gt; using different align values. &lt;strong&gt;The &lt;code&gt;meetOrSlice&lt;/code&gt; value is set to &lt;code&gt;meet&lt;/code&gt;&lt;/strong&gt;.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If we were to change the &lt;code&gt;meetOrSlice&lt;/code&gt; value to &lt;code&gt;slice&lt;/code&gt;, we’d get different results for different values. Notice how the &lt;code&gt;viewBox&lt;/code&gt; is stretched so that it covers the entire viewport. The x-axis is stretched so that the 200 units cover the viewport’s 800 units. In order for this to happen, and to maintain the aspect ratio of the viewbox, the y-axis gets “sliced off” at the bottom, but you can image it extending below the viewport’s height.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-slice-align-same.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The result of aligning the &lt;code&gt;viewBox&lt;/code&gt; using different align values. &lt;strong&gt;The &lt;code&gt;meetOrSlice&lt;/code&gt; value is set to &lt;code&gt;slice&lt;/code&gt;&lt;/strong&gt;.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Of course, different &lt;code&gt;viewBox&lt;/code&gt; values will also look different from the 200x300 we’re using here. For the sake of brevity, I won’t get into more examples, and I’ll leave you to play with an interactive demo I created to help you better visualize how the &lt;code&gt;viewBox&lt;/code&gt; and different &lt;code&gt;preserveAspectRatio&lt;/code&gt; values work together when different values are used. You can check the interactive demo out by visiting the link in the next section.&lt;/p&gt;
&lt;p&gt;But before we move to that, I just want to note that the mid-x, mid-y, max-x, and max-y values &lt;em&gt;change if the values of the &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;min-y&amp;gt;&lt;/code&gt; change&lt;/em&gt;. You can play with the interactive demo and change these values to see how the axes and thus the alignment of the &lt;code&gt;viewBox&lt;/code&gt; changes accordingly.&lt;/p&gt;
&lt;p&gt;The following image shows the effect of using &lt;code&gt;viewBox = &amp;quot;100 0 200 300&amp;quot;&lt;/code&gt; on the position of the alignment axes. We’re using the same example as earlier, but instead of having the &lt;code&gt;&amp;lt;min-x&amp;gt;&lt;/code&gt; value be set to zero, we’re setting it to 100. You can set them to any number value you want. Notice how the min-x, mid-x, and max-x axes change. The &lt;code&gt;preserveAspectRatio&lt;/code&gt; used here is the default &lt;code&gt;xMidYMid meet&lt;/code&gt;, which means that the mid-* axes are aligned with the middle axes of the viewport.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-axes-changed-min-x-min-y.jpg&quot; alt=&quot;&quot; /&gt;
	&lt;figcaption&gt;
		The effect of changing the value of `min-x` on the position of the x-axes. &lt;strong&gt;The translucent blue area shows the area which is considered to be the &lt;code&gt;viewBox&lt;/code&gt; area after changing the value of `min-x`&lt;/strong&gt;.
	&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;interactive-demo&quot;&gt;The Interactive Demo&lt;/h3&gt;
&lt;p&gt;The best way to understand how the viewport, &lt;code&gt;viewBox&lt;/code&gt;, and different &lt;code&gt;preserveAspectRatio&lt;/code&gt; values work and interact together is by visualizing them.&lt;/p&gt;
&lt;p&gt;For that purpose, I created a simple interactive demo that allows you to change the values of these attributes and see the result of the new values live.&lt;/p&gt;
&lt;figure class=&quot;wide&quot;&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/viewbox-demo.gif&quot; alt=&quot;Screenshot of the interactive demo.&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a class=&quot;btn&quot; href=&quot;https://sarasoueidan.com/demos/interactive-svg-coordinate-system/index.html&quot;&gt;Check the interactive demo out.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope you found this article useful in understanding the SVG viewport, &lt;code&gt;viewBox&lt;/code&gt;, and &lt;code&gt;preserveAspectRatio&lt;/code&gt; concepts. If you’d like to learn more about SVG coordinate systems, like nesting coordinate systems, establishing new ones, and transformations in SVG, stay tuned for the remaining parts of this series. You can subscribe to the RSS (link below) or follow me on Twitter to stay updated. Thank you very much for reading!&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
	The SVG parrot illustration used is a freebie from &lt;a href=&quot;http://freepik.com/&quot;&gt;Freepik.com&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;If you enjoyed this article you may also be interested in:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://sarasoueidan.com/blog/structuring-grouping-referencing-in-svg/&quot;&gt;Structuring, Grouping, and Referencing in SVG – The `g`, `use`, `defs` and `symbol` Elements&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://sarasoueidan.com/blog/css-svg-clipping&quot;&gt;Clipping in CSS and SVG – The &lt;code&gt;clip-path&lt;/code&gt; Property and `clipPath` Element&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Clipping in CSS and SVG — The clip-path Property and &lt;clipPath&gt; Element</title>
    <link href="https://sarasoueidan.com/blog/css-svg-clipping/"/>
    <updated>2014-07-08T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-svg-clipping/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;CSS and SVG have a lot in common. A lot of the features that we have in CSS today were imported from SVG. One of these features is the &lt;em&gt;&lt;strong&gt;Clipping&lt;/strong&gt;&lt;/em&gt; operation. Both CSS and SVG allow us to &quot;clip&quot; elements into custom non-rectangular shapes. In this article we will go over the clipping techniques in both CSS and SVG, covering everything you need to know to get started.&lt;/p&gt;
&lt;p class=&quot;note warning&quot;&gt;
	Please note that the demos in this article may not work in your browser. You should check &lt;a href=&quot;https://github.com/awgreenblatt/css-graphics&quot;&gt;this compatibility table&lt;/a&gt; out for more information.&lt;strong&gt; You don&#39;t &lt;em&gt;need&lt;/em&gt; to view the live demos to follow up with the article.&lt;/strong&gt; Not all clipping features are implemented and some features may be buggy. The purpose of this article is to go over how clipping works in CSS and SVG, and serves as a reference for when these features are fully implemented.  I&#39;m  also not including any vendor prefixes in the code samples here, but they are included in the live demos.
&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;clipping&quot;&gt;What is clipping?&lt;/h3&gt;
&lt;p&gt;Clipping is a graphical operation that allows you to fully or partially hide portions of an element. &lt;strong&gt;The clipped element can be any container or graphics element.&lt;/strong&gt; The portions of the element that are shown or hidden are determined by a &lt;em&gt;clipping path&lt;/em&gt;.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/clipping-illustration.svg&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;A &lt;strong&gt;clipping path&lt;/strong&gt; defines a region where everything on the “inside” of this region is allowed to show through but everything on the outside is “clipped out” and does not appear on the canvas. This region is known as the &lt;em&gt;clipping region&lt;/em&gt;. Any parts of the element that lie outside of a clipping region are not drawn. This includes any content, background, borders, text decoration, outline and visible scrolling mechanism of the element to which the clipping path is applied, and those of its descendants.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
    The clipped element can be any container or graphics element.
&lt;/blockquote&gt;
&lt;p&gt;A clipping path is conceptually equivalent to a custom viewport for the element it applies to. It influences what parts of the element are rendered on the screen, but it does &lt;em&gt;not&lt;/em&gt; affect the element’s inherent geometry—the element will affect the flow around it as it normally would, and every other element on the page will still see and treat the element as if it were still rectangular, even if it’s clipped to a non-rectangular shape. If you want to change the way the content around the element flows and have it respond to the defined shape of the clip path, you can use the &lt;a href=&quot;http://www.w3.org/TR/css-shapes/&quot;&gt;CSS Shapes&lt;/a&gt; properties. If you want to learn more about how to do that, you can check &lt;a href=&quot;http://alistapart.com/article/css-shapes-101&quot;&gt;the&lt;/a&gt; &lt;a href=&quot;http://sarasoueidan.com/blog/css-shapes/&quot;&gt;articles&lt;/a&gt; I wrote about this topic.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;clip-path&quot;&gt;Clipping in CSS &amp;ndash; The &lt;code&gt;clip-path&lt;/code&gt; Property&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;clip-path&lt;/code&gt; property is part of the CSS &lt;a href=&quot;http://www.w3.org/TR/2014/WD-css-masking-1-20140213/&quot;&gt;Masking Module&lt;/a&gt;. The clipping operation has been a part of SVG since 2000, and has moved into the CSS Masking module so that it now allows clipping HTML elements as well as SVG elements.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;clip-path&lt;/code&gt; property is used to specify a clipping path that is to be applied to an element.  Using &lt;code&gt;clip-path&lt;/code&gt;, you can apply an SVG &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; to an element by referencing that path in the property value. You can also define a clipping path using one of the &lt;strong&gt;&lt;a href=&quot;http://dev.w3.org/csswg/css-shapes-2/#ltbasic-shapegt&quot;&gt;basic shapes&lt;/a&gt;&lt;/strong&gt; defined in the CSS Shapes module. These shapes can be created using &lt;strong&gt;shape functions&lt;/strong&gt;. The shape functions available are &lt;code&gt;polygon()&lt;/code&gt;, &lt;code&gt;circle()&lt;/code&gt;, &lt;code&gt;inset()&lt;/code&gt; (used to define inset rectangles), and &lt;code&gt;ellipse()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Applying a clipping path to an element using the &lt;code&gt;clip-path&lt;/code&gt; property is very simple and straightforward:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* Referencing an SVG clipPath */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.element&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#svgClipPathID&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* Using a CSS basic shape function */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.element&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* or one of the other shape functions */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, if we were to define a polygonal clipping path using the &lt;code&gt;polygon()&lt;/code&gt; function, and then apply it to an image, the code would look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;626px 463px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;765px 236px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;687px 31px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;271px 100px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;70px 10px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;49px 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;133px 406px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;374px 462px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;529px 393px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The result of applying the above line of CSS to an image would look like the following:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/clipping-example-1.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://sarasoueidan.com/demos/css-svg-clipping/html-img-clipped-with-css/index.html&quot; class=&quot;button&quot;&gt;View Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The basic shape functions allow us to create a limited number of shapes; the most complex of these shapes is a polygon. If you want to use a more complex shape that looks like more than just a group of connected straight lines, you can use the SVG &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; element. As the name &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; implies, you can clip to any arbitrary path. This means that you can use the &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; element to create any arbitrary path and use that as a clipping path.&lt;/p&gt;
&lt;p&gt;In our second example, we’re going to define and use an SVG &lt;code&gt;clipPath&lt;/code&gt;. The code for the clip path looks like the following:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;clipPath&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;svgPath&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#FFFFFF&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.5794&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M215,100.3c97.8-32.6,90.5-71.9,336-77.6&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        c92.4-2.1,98.1,81.6,121.8,116.4c101.7,149.9,53.5,155.9,14.7,178c-96.4,54.9,5.4,269-257,115.1c-57-33.5-203,46.3-263.7,20.1&lt;/span&gt;&lt;br /&gt;        c-33.5-14.5-132.5-45.5-95-111.1C125.9,246.6,98.6,139.1,215,100.3z&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;clipPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is how the clipping path looks like; it is just a simple path with no fill and a black stroke.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/the-svg-clippath.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;We’ll be talking more about SVG &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; in the next section. But for now, we’re just going to reference it and apply it to the image we have.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#svgPath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the result would look like the following:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/clipping-example-2.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://sarasoueidan.com/demos/css-svg-clipping/html-img-clipped-with-css-svg-clippath/index.html&quot; class=&quot;button&quot;&gt;View Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Indeed, the &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; element can contain any number of basic shapes (&lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;, etc.), &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; elements, or even &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;
&lt;p&gt;If you specify a piece of &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; inside a &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt;, that text will be used as a clipping path. Whatever’s under the text will be visible “through” it, and anything outside the text area will not be rendered.&lt;/p&gt;
&lt;p&gt;Note here that you can clip &lt;em&gt;anything&lt;/em&gt; to the text. This opens a door for a lot of possibilities and effects. You can use animated images (such as GIFs) or even videos, and then clip them to some text of your choice. The sky is the limit here.&lt;/p&gt;
&lt;p&gt;The following is an example of a piece of text used as a clipping path.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;clipPath&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;svgTextPath&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;text&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;textLength&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lengthAdjust&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;spacing&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Vollkorn&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;230px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;700&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;italic&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; Blossom &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;clipPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The cool thing about SVG &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; is that it can be displayed using a custom font, just like HTML text can. In this example I’m using the &lt;a href=&quot;http://www.google.com/fonts/specimen/Vollkorn&quot;&gt;Vollkorn font&lt;/a&gt; from Google Web Fonts. I’ve set the width of the text to be the same as the width of the image, using the &lt;code&gt;textLength&lt;/code&gt; attribute, and positioned the text using the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates. Note here that the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates determine the position of the bottom left corner of the text (where the bottom stands for the baseline of the text).&lt;/p&gt;
&lt;p&gt;The result of applying the above text clip path to the image looks like so:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/clipping-example-3.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://sarasoueidan.com/demos/css-svg-clipping/html-img-clipped-with-css-svg-clippath-text/index.html&quot; class=&quot;button&quot;&gt;View Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And as we mentioned, you can also use multiple basic shapes inside &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt;. We’ll dig into &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; and its contents in the next section, so, for now, we’ll keep it simple. In this example I’m using multiple &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;s, each with a different size and position.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;clipPath&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;svgPath&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;40&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;193.949&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;235&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;74.576&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;426.576&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;108.305&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;47.034&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;346.915&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;255.763&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;43.644&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;255.39&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;82.882&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;35.17&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- more circles... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;clipPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The image will show through these circles combined, but will not be rendered outside them.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/clipping-example-4.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://sarasoueidan.com/demos/css-svg-clipping/html-img-clipped-with-css-svg-clippath-multiple-shapes/index.html&quot; class=&quot;button&quot;&gt;View Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As we mentioned at the beginning of this article, you can apply clip paths using the &lt;code&gt;clip-path&lt;/code&gt; property to SVG elements too. In all of the above examples, the clipping paths were applied to an HTML &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;. In the following example, a clipping path is applied to the root &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element. The same cherry blossoms image we used above is now part of the SVG, referenced using the &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt; element in SVG is used to include a graphic that can be either an entire SVG or a raster image. If it’s an SVG you’re referencing in &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;, the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes will be used to establish the viewport of that SVG. If you’re referencing a raster image (which is what we’re doing here), the image will be scaled to fit in the specified &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;. So I made sure the aspect ratio of the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attribute match the aspect ratio of the image I’m using, to prevent it from being distorted.&lt;/p&gt;
&lt;p&gt;When you create an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; document, you establish its viewport by specifying the width
and height of the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element. Anything drawn outside the limits of the viewport will be clipped out and will not be displayed. You can establish a new custom viewport of your own with the &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;500&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;image&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flowers.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;800&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;500&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;clipPath&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;theSVGPath&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;108&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;500&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;121.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;25.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;55&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;455&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;192.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;9.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;60&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;484&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;271.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;44.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;63&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;416&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;349.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;25.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;208&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;447&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;574.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;44.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;60&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;446&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;644.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;9.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;68&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;471&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;736.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;18.5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;49&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;462&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;clipPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;clip-path&lt;/code&gt;, we’re going to apply the &lt;code&gt;clipPath&lt;/code&gt; to the &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;svg&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#theSVGPath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/clipping-example-5.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://sarasoueidan.com/demos/css-svg-clipping/svg-image-clipped-with-css/index.html&quot; class=&quot;button&quot;&gt;View Live Demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More examples applying a clipping path to an SVG element in the &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; section below.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;reference-box&quot;&gt;A Clipping Path&#39;s Reference Box&lt;/h4&gt;
&lt;p&gt;In addition to the clipping path itself, you can define a &lt;em&gt;reference box&lt;/em&gt; in the &lt;code&gt;clip-path&lt;/code&gt; property when the clipping path applied is a &lt;code&gt;&amp;lt;basic-shape&amp;gt;&lt;/code&gt;; that is, a clipping path created using one of the basic shape functions. The reference box is hence only specified for CSS shapes used as clip paths, not for SVG &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt;s. For an SVG &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt;, the reference box is the border box of an HTML element.&lt;/p&gt;
&lt;p&gt;So a reference box is specified for a &lt;code&gt;&amp;lt;basic-shape&amp;gt;&lt;/code&gt; clip path. If the element being clipped is an HTML element, the reference box can be one of the four basic box model boxes: &lt;code&gt;margin-box&lt;/code&gt;, &lt;code&gt;border-box&lt;/code&gt;, &lt;code&gt;padding-box&lt;/code&gt;, or &lt;code&gt;content-box&lt;/code&gt;. Each of these is self-explanatory.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;&amp;lt;basic-shape&amp;gt;&lt;/code&gt; clip path is applied to an SVG element, the reference box can be set to one of three keyword values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fill-box – uses the object bounding box as the reference.&lt;/li&gt;
&lt;li&gt;stroke-box – uses the stroke bounding box as the reference.&lt;/li&gt;
&lt;li&gt;view-box – uses the uses the nearest SVG viewport as the reference box if no &lt;code&gt;viewBox&lt;/code&gt; is specified. If a &lt;code&gt;viewBox&lt;/code&gt; is indeed specified, then the coordinate system is established by the origin and dimensions specified by the &lt;code&gt;viewBox&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you set any of the CSS box model boxes as a reference box for an SVG element, the &lt;code&gt;fill-box&lt;/code&gt; will be used. And if you use one of the SVG reference boxes on an HTML element, the &lt;code&gt;border-box&lt;/code&gt; will be used.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.element&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;...&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; padding-box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;em&gt;only&lt;/em&gt; a reference box is specified in the &lt;code&gt;clip-path&lt;/code&gt; property—that is, no basic shape is defined—the browser uses the edges of the specified box, including any corner shaping (e.g. defined by the &lt;code&gt;border-radius&lt;/code&gt; property), as clipping path.&lt;/p&gt;
&lt;p&gt;For example, using the following snippet, the element will be clipped to the rounded corners specified by &lt;code&gt;border-radius&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.el&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; border-box&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;note&quot;&gt;Note that at the time of writing of this article, specifying a reference box in the `clip-path` property doesn&#39;t work in Webkit because it&#39;s not yet implemented.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;clip-path-notes&quot;&gt;&lt;code&gt;clip-path&lt;/code&gt; Notes: Stacking Contexts, Pointer Events and Animations&lt;/h4&gt;
&lt;p&gt;It is important to know that any value other than the default &lt;code&gt;none&lt;/code&gt; for the &lt;code&gt;clip-path&lt;/code&gt; property results in the creation of a stacking context on the element the same way the &lt;code&gt;opacity&lt;/code&gt; property does.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
    Any value other than the default `none` for the `clip-path` property results in the creation of a stacking context on the element.
&lt;/blockquote&gt;
&lt;p&gt;Furthermore, according to the Masking specification, &lt;strong&gt;pointer events must not be dispatched on the clipped-out (non-visible) regions of a shape&lt;/strong&gt;. This means that the element should not respond to pointer events outside the remaining visible area.&lt;/p&gt;
&lt;p&gt;A clipping path can also be animated. If the clipping path used is an SVG &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt;, it can be animated by including an animation inside it (See next section for details). If the cipping path is a basic shape created using a basic shape function, it can be animated using CSS animations and transitions. For details on how to animate a shape created using a shape function, check out the &lt;a href=&quot;http://sarasoueidan.com/blog/animating-css-shapes&quot;&gt;Animating CSS Shapes with CSS Animations and Transitions&lt;/a&gt; article I wrote a while back.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;svg-clippath-element&quot;&gt;Clipping in SVG &amp;ndash; The &lt;code&gt;&lt;clipPath&gt;&lt;/clipPath&gt;&lt;/code&gt; Element&lt;/h3&gt;
&lt;p&gt;In SVG, the &lt;code&gt;clipPath&lt;/code&gt; element is used to define a clipping path to clip elements. If you don’t want to use CSS to apply the clipping path to an element, you can do it in SVG using the &lt;code&gt;clip-path&lt;/code&gt; presentation attribute.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
Have you seen/read my &quot;Styling and Animating Scalable Vector Graphics with CSS&quot; slides? If not, you may want to have a look at them for more information about SVG presentation attributes and CSS properties used to style SVG elements. You can check them out &lt;a href=&quot;https://docs.google.com/presentation/d/1Iuvf3saPCJepVJBDNNDSmSsA0_rwtRYehSmmSSLYFVQ/pub?start=false&amp;loop=false&amp;delayms=3000#slide=id.p&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;clipPath&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;myClippingPath&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;clipPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- the element you want to apply the clipPath to can be any SVG element --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;my-graphic&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#myClippingPath)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;contents-of-clippath&quot;&gt;Contents Of a &lt;code&gt;&lt;clipPath&gt;&lt;/clipPath&gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;We mentioned earlier that an SVG &lt;code&gt;clipPath&lt;/code&gt; can contain any number of basic shapes, arbitrary &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;s, and/or &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; elements. It can even contain more than that, and this is where it can get interesting.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; content can be descriptive (&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;desc&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;metadata&amp;gt;&lt;/code&gt;). It can also be a shape (&lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ellipse&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;line&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;polygon&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;polyline&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;rect&amp;gt;&lt;/code&gt;) or a &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt;. A &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; can also contain a &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element or a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;. Note that &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; in &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; can only reference the simple SVG shapes mentioned above—it cannot be used to reference groups inside &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt;, for example; that simply won’t work.&lt;/p&gt;
&lt;p&gt;And last but not least, a &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; can contain an &lt;strong&gt;animation&lt;/strong&gt; using &lt;code&gt;&amp;lt;animate&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;animateColor&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;animateMotion&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;animateTransform&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;. This opens a door for a lot of creativity, as you can imagine.&lt;/p&gt;
&lt;p&gt;To demonstrate, I’m just going to add a simple animation to the demo using multiple &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt;s as a clipping path. Every &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; will get an animation. Because I want to keep it simple, I’m just gonna use the same animation on all of the circles. You can create fancier effects using different effects and playing with animation delays, of course. But, since this is a 101 article, I’m gonna stay on the simple side. The code with the animations look like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;clipPath&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;svgPath&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;50&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;40&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;animate&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                            &lt;span class=&quot;token attr-name&quot;&gt;attributeName&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                            &lt;span class=&quot;token attr-name&quot;&gt;attributeType&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;XML&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                            &lt;span class=&quot;token attr-name&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;250&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                            &lt;span class=&quot;token attr-name&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0s&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;dur&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;3s&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                            &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;freeze&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                            &lt;span class=&quot;token attr-name&quot;&gt;repeatCount&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;indefinite&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;193.949&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;235&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;74.576&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;animate&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token attr-name&quot;&gt;attributeName&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;r&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token attr-name&quot;&gt;attributeType&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;XML&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token attr-name&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;250&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token attr-name&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0s&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;dur&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;3s&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;freeze&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token attr-name&quot;&gt;repeatCount&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;indefinite&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;clipPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The animation specified for each circle will animate the size of the circle—more specifically, its radius (&lt;code&gt;r&lt;/code&gt;)—over the course of three seconds, from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;250&lt;/code&gt; pixels. I’ve also set the animation to repeat indefinitely.&lt;/p&gt;
&lt;p&gt;Click on the following button to view the live demo. But before you do, note that there is a bug (see bug details &lt;a href=&quot;https://code.google.com/p/chromium/issues/detail?id=391604&quot;&gt;here&lt;/a&gt;), so the demo may not work for you if you’re on Chrome or Safari. For now, I recommend using Firefox to see the working live demo, until the bug has been fixed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://sarasoueidan.com/demos/css-svg-clipping/html-img-clipped-with-css-svg-clippath-animated/index.html&quot; class=&quot;button&quot;&gt;View Animated clipPath Demo Live&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note that the content of a &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; also cannot involve groups (&lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;s). For example, if we were to add a group element to the demo that uses multiple circles as a clipping path, the demo will no longer work—the clipping path will no longer be applied to the image.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;clipPath&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;svgPath&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- WILL NOT WORK --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- WILL NOT WORK --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;193.949&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;235&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;74.576&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;circle&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#000000&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-miterlimit&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cx&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;426.576&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;cy&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;108.305&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;47.034&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;clipPath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;clippathunits&quot;&gt;The &lt;code&gt;clipPathUnits&lt;/code&gt; Attribute&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; element can have several attributes, including &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;transform&lt;/code&gt;s, and &lt;a href=&quot;http://www.w3.org/TR/2011/REC-SVG11-20110816/intro.html#TermPresentationAttribute&quot;&gt;presentation attributes&lt;/a&gt; like &lt;code&gt;fill&lt;/code&gt; and &lt;code&gt;stroke&lt;/code&gt;, among &lt;a href=&quot;http://www.w3.org/TR/2011/REC-SVG11-20110816/styling.html#SVGStylingProperties&quot;&gt;many others&lt;/a&gt;. But the one attribute that stands out, and that is particularly useful, is the &lt;code&gt;clipPathUnits&lt;/code&gt; attribute.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
    The &lt;code&gt;clipPathUnits&lt;/code&gt; attribute is used to specify a coordinate system for the contents of the &lt;code&gt;&lt;clipPath&gt;&lt;/clipPath&gt;&lt;/code&gt;.
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;clipPathUnits&lt;/code&gt; attribute is used to specify a coordinate system for the contents of the &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt;. It takes one of two values: &lt;code&gt;objectBoundingBox&lt;/code&gt; or &lt;code&gt;userSpaceOnUse&lt;/code&gt;. The default value is &lt;code&gt;userSpaceOnUse&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;clipPathUnits = &quot;userSpaceOnUse | objectBoundingBox&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;dl&gt;
    &lt;dt&gt;userSpaceOnUse&lt;/dt&gt;
    &lt;dd&gt;
        The contents of the &lt;code&gt;clipPath&lt;/code&gt; represent values in the current &lt;em&gt;&lt;strong&gt;user coordinate system&lt;/strong&gt;&lt;/em&gt; in place at the time when the &lt;code&gt;clipPath&lt;/code&gt; element is referenced (i.e., the user coordinate system for the element referencing the &lt;code&gt;clipPath&lt;/code&gt; element via the &lt;code&gt;clip-path&lt;/code&gt; property).
        &lt;p&gt;
            The current &lt;strong&gt;user coordinate system&lt;/strong&gt; (a.k.a &lt;em&gt;&lt;strong&gt;local coordinate system&lt;/strong&gt;&lt;/em&gt;) is the coordinate system that is currently active and which is used to define how coordinates and lengths are located and computed. The user coordinate system for an HTML element with an associated CSS box model is different from that of an SVG element with no such box model.
        &lt;/p&gt;
        &lt;p&gt;
            For elements that have an associated CSS layout box, the current user coordinate system has its origin at the top left corner of a reference box and one unit equals one CSS pixel. The viewport for resolving percentage values is defined by the width and height of the reference box. I&#39;m sure you&#39;re already familiar with this. So if you have a &lt;code&gt;&lt;clipPath&gt;&lt;/clipPath&gt;&lt;/code&gt; containing a &lt;code&gt;&lt;circle&gt;&lt;/circle&gt;&lt;/code&gt; whose center is positioned at &lt;code&gt;cx = &quot;100&quot;&lt;/code&gt; and &lt;code&gt;cy = &quot;100&quot;&lt;/code&gt;, the center will be positioned 100 pixels to the left and 100 pixels down inside the boundaries of the reference box.
        &lt;/p&gt;
        &lt;p&gt;
            If the element is an SVG element and thus does not have an associated CSS layout box, the current user coordinate system has its origin at the top left corner of the element&#39;s &lt;strong&gt;nearest viewport&lt;/strong&gt;. In most cases, the nearest viewport is the viewport established by the width and height of the closest &lt;code&gt;&lt;svg&gt;&lt;/svg&gt;&lt;/code&gt; ancestor. If you&#39;re not nesting &lt;code&gt;&lt;svg&gt;&lt;/svg&gt;&lt;/code&gt;s, it&#39;s simply the viewport you establish on the root &lt;code&gt;&lt;svg&gt;&lt;/svg&gt;&lt;/code&gt;.
        &lt;/p&gt;
        &lt;p&gt;
            Note that the coordinate system on an SVG element can be modified using the &lt;code&gt;viewBox&lt;/code&gt; attribute, among other attributes which may contribute to changing the coordinate system. However, that&#39;s outside the scope of this article. So in this article I&#39;m going to work under the assumption that no &lt;code&gt;viewBox&lt;/code&gt; is modified, and hence the browser will use the default coordinate system with the origin at the top left corner, and dimensions equal to the dimensions of the &lt;code&gt;&lt;svg&gt;&lt;/svg&gt;&lt;/code&gt;.
        &lt;/p&gt;
    &lt;/dd&gt;
    &lt;dt&gt;objectBoundingBox&lt;/dt&gt;
    &lt;dd&gt;
        The coordinate system has its origin at the top left corner of the &lt;strong&gt;&lt;em&gt;bounding box&lt;/em&gt;&lt;/strong&gt; of the element to which the clipping path applies to and the same width and height of this bounding box. A bounding box is the object bounding box for all SVG elements (it contains only an element&#39;s geometric shape) and the border box for HTML elements with an associated box model.
        &lt;p&gt;
            This value is particularly useful for SVG elements because it allows you to apply the clip path to the boundaries of the element itself, not the coordinate system on use. To demonstrate, here is an image showing the result of applying the clip path to an image inside an SVG canvas using &lt;code&gt;userSpaceOnUse&lt;/code&gt; versus &lt;code&gt;objectBoundingBox&lt;/code&gt;. The grey border represents the border of the &lt;code&gt;&lt;svg&gt;&lt;/svg&gt;&lt;/code&gt; element where the viewport is set. For the image on the right, I&#39;ve added a grey border around the clipped image just to show the boundaries of the bounding box.
        &lt;/p&gt;
        &lt;figure&gt;
            &lt;img src=&quot;https://sarasoueidan.com/assets/images/clippathunits.png&quot; alt=&quot;&quot; /&gt;
            &lt;figcaption&gt;The result of applying the &lt;code&gt;clipPath&lt;/code&gt; to an image inside the SVG canvas using &lt;code&gt;userSpaceOnUse&lt;/code&gt; (left) and &lt;code&gt;objectBoundingBox&lt;/code&gt; (right). &lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;
            In the image on the left, the clipping path is positioned in the coordinate system established on the viewport of the SVG. When using &lt;code&gt;objectBoundingBox&lt;/code&gt;, the bounding box of the image itself is used as the coordinate system of the clipping path.
        &lt;/p&gt;
        &lt;p&gt;
            One important thing to note here is that &lt;strong&gt;when you use the &lt;code&gt;objectBoundingBox&lt;/code&gt; value, the coordinates specified for the contents of the &lt;code&gt;&lt;clipPath&gt;&lt;/clipPath&gt;&lt;/code&gt; must be in the range [0, 1]&lt;/strong&gt;&amp;mdash;the coordinate system becomes a unit system, and the coordinates of the shapes inside a &lt;code&gt;clipPath&lt;/code&gt; have to be fractions in that range.
        &lt;/p&gt;
        &lt;figure&gt;
            &lt;img src=&quot;https://sarasoueidan.com/assets/images/clippathunits-system.jpg&quot; alt=&quot;&quot; /&gt;
            &lt;figcaption&gt;
                The coordinate system used for the &lt;code&gt;objectBoundingBox&lt;/code&gt; value on the right, versus that used for the &lt;code&gt;userSpaceOnuse&lt;/code&gt; on the left.
            &lt;/figcaption&gt;
        &lt;/figure&gt;
        &lt;p&gt;
            For example, if the clip path being applied to an element contains a circle positioned so that its center lies at the center of the clipped element:
        &lt;/p&gt;
        ```html
            &lt;clipPath&gt;
                &lt;circle cx=&quot;350&quot; cy=&quot;350&quot; r=&quot;300&quot;&gt;&lt;/circle&gt;
            &lt;/clipPath&gt;
        ```
        &lt;p&gt;
            the circle position (and radius) would be expressed in fractions like so:
        &lt;/p&gt;
        ```html
            &lt;clipPath clipPathUnits=&quot;objectBoundingBox&quot;&gt;
                &lt;circle cx=&quot;.5&quot; cy=&quot;.5&quot; r=&quot;.45&quot;&gt;&lt;/circle&gt;
            &lt;/clipPath&gt;
        ```
        &lt;p&gt;
            The fractions are like percentage values in this case.
        &lt;/p&gt;
    &lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;-svg-clippath-notes&quot;&gt;&lt;code&gt;&lt;clipPath&gt;&lt;/clipPath&gt;&lt;/code&gt; Notes&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;clipPath&lt;/code&gt; elements are never rendered directly; their only usage is as something that can be referenced using the &lt;code&gt;clip-path&lt;/code&gt; property. The &lt;code&gt;display&lt;/code&gt; property does not apply to the &lt;code&gt;clipPath&lt;/code&gt; element; thus, &lt;code&gt;clipPath&lt;/code&gt; elements are not directly rendered even if the &lt;code&gt;display&lt;/code&gt; property is set to a value other than &lt;code&gt;none&lt;/code&gt;, and &lt;code&gt;clipPath&lt;/code&gt; elements are available for referencing even when the &lt;code&gt;display&lt;/code&gt; property on the &lt;code&gt;clipPath&lt;/code&gt; element or any of its ancestors is set to &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Remember what we said earlier about pointer events when an HTML element is clipped? The same standard behavior is defined in the SVG Clipping and Masking specification: By default, pointer-events must not be dispatched on the clipped (non-visible) regions of an SVG element. The spec then mentions that &lt;q&gt;later versions of SVG may define new properties to enable fine-grained control over the interactions between hit testing and clipping&lt;/q&gt;.&lt;/p&gt;
&lt;p&gt;Firefox implements the same non-standard behavior we mentioned before—areas outside the clipping regions do not respond to pointer events.&lt;/p&gt;
&lt;p&gt;Even though Chrome implements the standard behavior for the &lt;code&gt;clip-path&lt;/code&gt; property on HTML elements, when you apply a &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; to an SVG element, the behavior is the same as the one implemented in Firefox—only the visible areas respond to pointer events. I’m not sure if this is a feature or a bug.&lt;/p&gt;
&lt;p&gt;In the following example, an SVG &lt;code&gt;&amp;lt;clipPath&amp;gt;&lt;/code&gt; is applied to an SVG &lt;code&gt;&amp;lt;image&amp;gt;&lt;/code&gt;. The clip path is similar to the one we used before, where the image is clipped by a number of rectangles. The image becomes translucent when you hover over it.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#svgPath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;image:hover&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .5&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://sarasoueidan.com/demos/css-svg-clipping/svg-img-clipped-pointer-events/index.html&quot; class=&quot;button&quot;&gt;Try The Demo Out Live&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also, note that an empty clipping path will completely clip away the element that had the &lt;code&gt;clip-path&lt;/code&gt; property applied.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;Clipping is one of those graphical operations that allow us to create irregular shapes in an otherwise rectangular web page. Indeed, clipping is a perfect companion to CSS shapes. If you’ve read any of my &lt;a href=&quot;http://alistapart.com/article/css-shapes-101&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;http://sarasoueidan.com/blog/css-shapes/&quot;&gt;articles&lt;/a&gt; about CSS Shapes, then you already know that the &lt;code&gt;clip-path&lt;/code&gt; property can be an indispensable companion to CSS Shapes in some use cases. And once CSS Shapes properties can &lt;a href=&quot;http://dev.w3.org/csswg/css-shapes-2/#referencing-svg-shapes&quot;&gt;reference SVG paths&lt;/a&gt; (&lt;a href=&quot;http://dev.w3.org/csswg/css-shapes-2/&quot;&gt;CSS Shapes Module Level 2&lt;/a&gt;), in addition to the basic CSS shapes, the combination of Shapes and Clipping will allow us to create visually compelling designs that break the norms of the rectangle.&lt;/p&gt;
&lt;p&gt;I hope you found this article useful. Thank you for reading! --&amp;gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Structuring, Grouping, and Referencing in SVG — The&lt;g&gt;, &lt;use&gt;, &lt;defs&gt; and &lt;symbol&gt; Elements</title>
    <link href="https://sarasoueidan.com/blog/structuring-grouping-referencing-in-svg/"/>
    <updated>2014-07-03T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/structuring-grouping-referencing-in-svg/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;SVG comes with its own ways for structuring a document by means of certain SVG elements that allow us to define, group, and reference objects within the document. These elements make reusing elements easy, while maintaining clean and readable code. In this article we&#39;ll go over these elements, highlighting the difference between them and the advantages of each one.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;the-g-element&quot;&gt;Grouping with the &lt;code&gt;&lt;g&gt;&lt;/g&gt;&lt;/code&gt; element&lt;/h3&gt; 
&lt;p&gt;The ‘g’ in &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; stands for ‘group’. The group element is used for logically grouping together sets of related graphical elements. In terms of graphics editors, such as Adobe Illustrator, the &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element serves a similar functionality as the &lt;em&gt;Group Objects&lt;/em&gt; function. You can also think of a group as being similar to the concept of a &lt;em&gt;layer&lt;/em&gt; in a graphics editor, since a layer is also a grouping of elements.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	The group element is used for logically grouping together sets of related graphical elements.
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element groups all of its descendants into one group. It usually has an &lt;code&gt;id&lt;/code&gt; attribute to give that group a name. Any styles you apply to the &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element will also be applied to all of its descendants. This makes it easy to add styles, transformations, interactivity, and even animations to entire groups of objects.&lt;/p&gt;
&lt;p&gt;For example, the following is an SVG bird. The bird is made up of several shapes such as circles and paths.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/grouping-bird.svg&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;If you wanted to move the entire bird from one place to another in Illustrator, you will also want to group the elements together so that you wouldn’t have to select each and every one of them every time you wanted to do so.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/grouping-in-illustrator.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Grouping in SVG using the &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element works the same way. In this example we’ve grouped the elements of the body together, the elements of the head together, and then we grouped the two groups into one group with an &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;bird&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1144.12px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;400px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 572.06 200&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token selector&quot;&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;white&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token selector&quot;&gt;#wing&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#81CCAA&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token selector&quot;&gt;#body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#B8E4C2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token selector&quot;&gt;#pupil&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#1F2600&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token selector&quot;&gt;#beak&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#F69C0D&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token selector&quot;&gt;.eye-ball&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#F6FDC4&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M48.42,78.11c0-17.45,14.14-31.58,31.59-31.58s31.59,14.14,31.59,31.58c0,17.44-14.14,31.59-31.59,31.59&lt;br /&gt;			S48.42,95.56,48.42,78.11&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M109.19,69.88c0,0-8.5-27.33-42.51-18.53c-34.02,8.81-20.65,91.11,45.25,84.73&lt;br /&gt;			c40.39-3.65,48.59-24.6,48.59-24.6S124.68,106.02,109.19,69.88&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;wing&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M105.78,75.09c4.56,0,8.84,1.13,12.62,3.11c0,0,0.01-0.01,0.01-0.01l36.23,12.38c0,0-13.78,30.81-41.96,38.09&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			c-1.51,0.39-2.82,0.59-3.99,0.62c-0.96,0.1-1.92,0.16-2.9,0.16c-15.01,0-27.17-12.17-27.17-27.17&lt;/span&gt;&lt;br /&gt;			C78.61,87.26,90.78,75.09,105.78,75.09&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;beak&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M50.43,68.52c0,0-8.81,2.58-10.93,4.86l9.12,9.87C48.61,83.24,48.76,74.28,50.43,68.52&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;eye-ball&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M60.53,71.68c0-6.33,5.13-11.46,11.46-11.46c6.33,0,11.46,5.13,11.46,11.46c0,6.33-5.13,11.46-11.46,11.46&lt;br /&gt;				C65.66,83.14,60.53,78.01,60.53,71.68&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;pupil&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M64.45,71.68c0-4.16,3.38-7.53,7.54-7.53c4.16,0,7.53,3.37,7.53,7.53c0,4.16-3.37,7.53-7.53,7.53&lt;br /&gt;				C67.82,79.22,64.45,75.84,64.45,71.68&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;eye-ball&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M72.39,74.39c0-2.73,2.22-4.95,4.95-4.95c2.73,0,4.95,2.21,4.95,4.95c0,2.74-2.22,4.95-4.95,4.95&lt;br /&gt;				C74.6,79.34,72.39,77.13,72.39,74.39&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you were to change the fill color of the &lt;code&gt;#body&lt;/code&gt; group, the fill color of all the elements inside the group will change to the color you specify. This is very convenient.&lt;/p&gt;
&lt;p&gt;Grouping elements is very useful, not just for organizational and structural purposes. It’s particularly useful for when you want to add interactivity or transformations to an SVG graphic that is made up of several items. You can associate those items together in a group and then define transformations to move, scale, or rotate all the items together so that their spatial relations to one another are maintained.&lt;/p&gt;
&lt;p&gt;If you wanted to scale the entire bird up and make it twice its size, you will be able to do it with one line of CSS if all the elements are grouped together.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#bird&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Grouping makes interactivity, in particular, more convenient. You can attach mouse events to the entire bird and have it respond to the events as a whole group, instead of having to apply the same interactions and/or transformations to every element in that group.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element has one more important and great feature: it can have its own &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;desc&amp;gt;&lt;/code&gt; tags that help make it more accessible to screen readers, and overall make the code more readable to humans as well. For example:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Bird&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;An image of a cute little green bird with an orange beak.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;desc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;the-use-element&quot;&gt; Reusing elements with the &lt;code&gt;&lt;use&gt;&lt;/use&gt;&lt;/code&gt; element&lt;/h3&gt;
&lt;p&gt;Often times, there are elements that are repeated in a graphic. If you’re working in Illustrator and you want to repeat an element somewhere in the graphic, you would copy the element and then paste it and use it wherever it is you want to use it. Copying and then pasting an existing element is more convenient than having to recreate that element from scratch.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element lets you reuse existing elements, giving you a similar functionality to the copy-paste functionality in a graphics editor. It can be used to reuse a single element, or a group of element defined with the &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	The &lt;code&gt;&lt;use&gt;&lt;/use&gt;&lt;/code&gt; element lets you reuse existing elements, giving you a similar functionality to the copy-paste functionality in a graphics editor.
&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element takes &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, and &lt;code&gt;width&lt;/code&gt; attributes, and it references other content using the &lt;code&gt;xlink:href&lt;/code&gt; attribute. So if you have defined a group somewhere with a given &lt;code&gt;id&lt;/code&gt;, and you want to reuse it somewhere else, you give its URI in an &lt;code&gt;xlink:href&lt;/code&gt;
attribute, and specify the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; location where the group’s &lt;code&gt;(0, 0)&lt;/code&gt; point should be moved to.&lt;/p&gt;
&lt;p&gt;For example, if we were to create another bird in our SVG canvas, we could reuse the existing bird like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;use&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that you can reference any SVG element inside the &lt;code&gt;xlink:href&lt;/code&gt; attribute, even if that element is in an external file. The referenced element or group does not have to exist in the same file. This is great for organizing files (for example you could have a file for reusable components) and for caching the used files. If the bird in our example were created in a seperate file called &lt;code&gt;animals.svg&lt;/code&gt; for example, we could have referenced it like so:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;use&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;path/to/animals.svg#bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, referencing external SVG in &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; doesn’t work in most versions of IE (up to IE 11). I recommend you read &lt;a href=&quot;http://css-tricks.com/svg-use-external-source/&quot;&gt;this article&lt;/a&gt; by Chris Coyier for details and fallback mechanisms.&lt;/p&gt;
&lt;p&gt;Now, those of you with a sharp bird’s eye (pun not intended), may have noticed that I said that the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; attributes of &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; specify the location where the group’s upper left corner should be &lt;strong&gt;moved to&lt;/strong&gt;. Moving an element means that you’re starting from its current position and then changing it to another one. Had I said “should be positioned at”, it would have implied that the element will be positioned according to the coordinate system in use on the entire canvas, right?&lt;/p&gt;
&lt;p&gt;As it turns out, the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates are &lt;strong&gt;a shorthand for translating an element using the &lt;code&gt;transform&lt;/code&gt; attribute&lt;/strong&gt;. More specifically, the above &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; use is equivalent to:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;use&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;translate(100, 100)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/bird-reuse.jpg&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;This fact means that &lt;strong&gt;the position of the new reused element is relative to the position of the original element that we’re reusing&lt;/strong&gt;. This isn’t always optimal and can have some drawbacks.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	The &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates are a shorthand for translating an element using the &lt;code&gt;transform&lt;/code&gt; attribute.
&lt;/blockquote&gt;
&lt;p&gt;Another drawback of the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element is that the “copies” of the original element will have the exact same styles as the original element. Whenever you apply any style or transformation changes to the &lt;code&gt;#bird&lt;/code&gt; group in the above example, all the copies of the bird will get the same styles and transformations.&lt;/p&gt;
&lt;p&gt;You can &lt;code&gt;use&lt;/code&gt; an element and apply an independent transformation to it. For example, the following line will reuse the bird, but it will make it half its original size using a scale transformation:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;use&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;&lt;span class=&quot;token namespace&quot;&gt;xlink:&lt;/span&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#bird&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;scale(0.5)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, you &lt;strong&gt;cannot override the styles of the original element (such as fill and strokes) on the copy&lt;/strong&gt;. This means that if you want to create multiple birds or multiple icons (if you’re working with icons) and you want every icon to have a different color, this won’t be possible with the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element (unless the original element is defined inside a &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element without these styles applied to it. See next section for more information).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element allows you to reuse an element &lt;strong&gt;that is already rendered on the canvas&lt;/strong&gt;. But what if you want to define an element &lt;em&gt;without&lt;/em&gt; displaying it, and then draw it at specific positions when you need or want to? This is where the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element comes in.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;the-defs-element&quot;&gt;Reusing Stored elements with the &lt;code&gt;&lt;defs&gt;&lt;/defs&gt;&lt;/code&gt; element&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element can be used to &lt;strong&gt;store&lt;/strong&gt; content that will not be directly displayed. In other words, the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element is used to &lt;em&gt;define&lt;/em&gt; elements without directly rendering them. This stored hidden content can then be referenced and displayed by other SVG elements,
which makes it ideal for things such as patterns that contain reusable graphics.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	The &lt;code&gt;&lt;defs&gt;&lt;/defs&gt;&lt;/code&gt; element is used to &lt;em&gt;define&lt;/em&gt; elements without directly rendering them [..] and that element will serve as a &lt;strong&gt;template&lt;/strong&gt; for future use.
&lt;/blockquote&gt;
&lt;p&gt;So, using &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; we can define an element that we want to use. This element can be anything, ranging from a group of elements like the bird we saw earlier, to a clipping path, mask, or a linear gradient. Basically, anything that we want to define and store away for later use can be defined inside the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element, and that element will serve as a &lt;strong&gt;template&lt;/strong&gt; for future use, or as a tool that is available for use whenever needed. The template is never rendered, only instances of it are displayed.&lt;/p&gt;
&lt;p&gt;The following is an example defining an SVG gradient, and then uses it as a fill color for a simple SVG rectangle:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;linearGradient&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;gradient&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;stop&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;stop-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; deepPink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;stop&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;100%&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token value css language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;stop-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #009966&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;linearGradient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;rect&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#eee&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stroke-width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;url(#gradient)&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Defining the linear gradient inside the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element like that ensures that the gradient will not be rendered unless it is referenced somewhere it is needed.&lt;/p&gt;
&lt;p&gt;In the previous section we mentioned two drawbacks of the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The position of the new element is relative to the position of the original element.&lt;/li&gt;
&lt;li&gt;The styles of the original element cannot be overridden in the individual copies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That, in addition to the fact that the re&lt;code&gt;use&lt;/code&gt;d element will be rendered on the canvas.&lt;/p&gt;
&lt;p&gt;All of these drawbacks can be avoided using the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element. Not only is the original element not rendered, but when you want to reuse an element inside &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt;, the position you specify for each instance will be set relative to the origin of the user coordinate system, not relative to the position of the original element (which makes sense considering the original element is a template that’s not even rendered on the canvas).&lt;/p&gt;
&lt;p&gt;In this example we have a tree. The tree is made up of a bark and a group of leaves. The leaves are grouped into a group with &lt;code&gt;id=&amp;quot;leaves&amp;quot;&lt;/code&gt;, and then this group is grouped with the bark into the larger &lt;code&gt;tree&lt;/code&gt; group.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;500.79px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;200px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 500.79 200&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token selector&quot;&gt;#leaves&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#8CC63F&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token selector&quot;&gt;#bark&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#A27729&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bark&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M91.33,165.51c0,0,4.18-27.65,1.73-35.82l-18.55-25.03l3.01-2.74l17.45,19.87l1.91-37.6h4.44l1.83,24.53&lt;br /&gt;		l15.26-16.35l3.27,4.36l-16.07,19.34c0,0-2.72,0-1.09,19.34c1.63,19.34,3,29.7,3,29.7L91.33,165.51z&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;leaves&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;leaf&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M96.97,79.07c0,0-14.92,4.34-23.52-14.05c0,0,19.4-7.98,24.37,11.9c0,0-9.68-3.57-13.07-6.73&lt;br /&gt;				C84.75,70.2,91.82,77.99,96.97,79.07z&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;path&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;leaf&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;M74.07,100.91c0,0-15.94-1.51-17.2-22.39c0,0,21.62-0.27,18.83,20.66c0,0-7.92-7.1-9.97-11.41&lt;br /&gt;				C65.73,87.77,69.55,97.92,74.07,100.91z&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is how the tree looks like:&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/defined-tree.jpg&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;If we were to wrap the &lt;code&gt;#tree&lt;/code&gt; group in a &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element, the tree would no longer be rendered on the canvas.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;500.79px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;200px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;viewBox&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;0 0 500.79 200&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text/css&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token selector&quot;&gt;#leaves&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#8CC63F&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token selector&quot;&gt;#bark&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;#A27729&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;g&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;tree&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;			&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- ... --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;		&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;g&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;defs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the tree serves as a template for use. We can use it using the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element just like we would &lt;code&gt;use&lt;/code&gt; any other element. The only difference in this case is that the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; attributes are now set relative to the user coordinate system, not relative to the position of the used element.&lt;/p&gt;
&lt;p&gt;For example, if we were to create three copies of the tree and position them on the SVG canvas, and assuming in this case that the user coordinate system matches the viewport’s height and width with the origin being on the top left corner of the SVG viewport, we’d get the following code with the following result:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;lt;use &lt;span class=&quot;token property&quot;&gt;xlink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;href=&lt;span class=&quot;token string&quot;&gt;&quot;#tree&quot;&lt;/span&gt; x=&lt;span class=&quot;token string&quot;&gt;&quot;50&quot;&lt;/span&gt; y=&lt;span class=&quot;token string&quot;&gt;&quot;100&quot;&lt;/span&gt; /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;lt;use &lt;span class=&quot;token property&quot;&gt;xlink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;href=&lt;span class=&quot;token string&quot;&gt;&quot;#tree&quot;&lt;/span&gt; x=&lt;span class=&quot;token string&quot;&gt;&quot;200&quot;&lt;/span&gt; y=&lt;span class=&quot;token string&quot;&gt;&quot;100&quot;&lt;/span&gt; /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&amp;lt;use &lt;span class=&quot;token property&quot;&gt;xlink&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;href=&lt;span class=&quot;token string&quot;&gt;&quot;#tree&quot;&lt;/span&gt; x=&lt;span class=&quot;token string&quot;&gt;&quot;350&quot;&lt;/span&gt; y=&lt;span class=&quot;token string&quot;&gt;&quot;100&quot;&lt;/span&gt; /&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/tree.svg&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see in the image above, each of the trees was positioned relative to the origin of the coordinate system which in this case is the upper left corner of the SVG. So the upper left corner of each tree is positioned at its own (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;) position in the user coordinate system, independent of the other trees and independent of the tree template defined inside &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you use &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; to reuse an element, you can apply different styles and fill colors to each individual tree, &lt;strong&gt;as long as these styles are not defined on the original tree template&lt;/strong&gt;. If the tree inside &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; has styles applied to it, those styles still won’t be overridden by any new ones. So &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; is great for creating minimal templates and then styling the copies as needed. Without &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt;, this wouldn’t be possible with &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; alone.&lt;/p&gt;
&lt;p&gt;Note that elements inside the &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; element are prevented from becoming part of the rendering tree just as if the &lt;code&gt;defs&lt;/code&gt; element were a &lt;code&gt;g&lt;/code&gt; element and the &lt;code&gt;display&lt;/code&gt; property were set to &lt;code&gt;none&lt;/code&gt;. However, that the descendants of a &lt;code&gt;defs&lt;/code&gt; are always present in the source tree and thus can always be referenced by other elements; thus, the value of the &lt;code&gt;display&lt;/code&gt; property on the &lt;code&gt;defs&lt;/code&gt; element or any of its descendants does not prevent those elements from being referenced by other elements, even if it is set to &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;the-symbol-element&quot;&gt;Grouping elements with the &lt;code&gt;&lt;symbol&gt;&lt;/symbol&gt;&lt;/code&gt; element&lt;/h3&gt; 
&lt;p&gt;The &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; element is similar to the group element &lt;code&gt;&amp;lt;g&amp;gt;&lt;/code&gt;—it provides a way to group elements together. However, it differs from the group element in two main things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; element is not rendered. It is actually similar to &lt;code&gt;&amp;lt;defs&amp;gt;&lt;/code&gt; in this manner. It is only displayed when it is &lt;code&gt;use&lt;/code&gt;d.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; element can have its own &lt;code&gt;viewBox&lt;/code&gt; and &lt;code&gt;preserveAspectRatio&lt;/code&gt; attributes. This allows it to fit into the viewport it is rendered into any way you want it to, instead of fitting in the default way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; is then mostly suitable for &lt;strong&gt;defining&lt;/strong&gt; reusable elements (or &lt;em&gt;symbols&lt;/em&gt;). It also serves as a template that is &lt;strong&gt;instantiated&lt;/strong&gt; using the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element. And having &lt;code&gt;viewBox&lt;/code&gt; and &lt;code&gt;preserveAspectRatio&lt;/code&gt; attributes, it can scale-to-fit within a rectangular viewport defined by the referencing &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; element. Note that &lt;code&gt;symbol&lt;/code&gt; elements define new viewports whenever they are instanced by a &lt;code&gt;use&lt;/code&gt; element.&lt;/p&gt;
&lt;blockquote class=&quot;pull-quote&quot;&gt;
	`symbol` elements define new viewports whenever they are instanced by a `use` element.
&lt;/blockquote&gt;
&lt;p&gt;This feature is great because it allows you to define elements that are independent of the viewport they’re rendered into, hence allowing you to make sure the symbol you’re referencing will always display a certain way inside the viewport.&lt;/p&gt;
&lt;p&gt;You need to be familiar with the way the &lt;code&gt;viewBox&lt;/code&gt; works, and the values of the &lt;code&gt;preserveAspectratio&lt;/code&gt; attribute to make the best use of this feature. Chris Coyier wrote &lt;a href=&quot;http://css-tricks.com/svg-symbol-good-choice-icons/&quot;&gt;an article&lt;/a&gt; explaining why the &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; element can be a good choice for icons, and how to use it.&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;I will also be writing an extensive article about the `viewport`, `viewBox`, and `preserveAspectRatio` attributes that explains how these attributes work together and how they can be used to control and scale graphics in SVG, so stay tuned for that if you&#39;re interested.&lt;/p&gt;
&lt;div class=&quot;update note&quot;&gt;
	&lt;strong&gt;UPDATE:&lt;/strong&gt; Article is live here: &lt;a href=&quot;http://sarasoueidan.com/blog/svg-coordinate-systems&quot;&gt;Understanding SVG Coordinate Systems and Transformations (Part 1) &amp;ndash; The viewport, &lt;code&gt;viewBox&lt;/code&gt;, and &lt;code&gt;preserveAspectRatio&lt;/code&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;Note that the &lt;code&gt;display&lt;/code&gt; property does not apply to the &lt;code&gt;symbol&lt;/code&gt; element; thus, &lt;code&gt;symbol&lt;/code&gt; elements are not directly rendered even if the &lt;code&gt;display&lt;/code&gt; property is set to a value other than &lt;code&gt;none&lt;/code&gt;, and &lt;code&gt;symbol&lt;/code&gt; elements are available for referencing even when the &lt;code&gt;display&lt;/code&gt; property on the &lt;code&gt;symbol&lt;/code&gt; element or any of its ancestors is set to &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h3&gt; 
&lt;p&gt;All of these elements are container structural elements in SVG that helps make reusing elements easier while keeping the code cleaner and more readable. And each of the elements we went over in this article has its own use cases. Now that you know what each one does and how they differ, you can decide for your own which one to use, depending on your needs. That said, don’t forget to &lt;a href=&quot;https://www.sitepoint.com/tips-accessible-svg/&quot;&gt;keep your SVGs accessible&lt;/a&gt; at all times.&lt;/p&gt;
&lt;p&gt;I hope you liked this article and found it useful. Thank you for reading!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Everything You Need To Know About The CSS will-change Property</title>
    <link href="https://sarasoueidan.com/blog/css-will-change-property/"/>
    <updated>2014-06-10T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-will-change-property/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	What the title says! I wrote this article for the Opera Developers&#39; blog, and it literally contains everything you need to know about the new CSS &lt;code&gt;will-change&lt;/code&gt; property, including but not limited to: how to use it, when to use it, when &lt;em&gt;not&lt;/em&gt; to use it, performance considerations, and more.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Moving Forward With CSS Shapes</title>
    <link href="https://sarasoueidan.com/blog/moving-forward-with-css-shapes/"/>
    <updated>2014-05-05T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/moving-forward-with-css-shapes/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	Following up with the CSS Shapes 101 article, I share a list of great resources to learn more about CSS Shapes, including tutorials, examples, and developer tools.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CSS Shapes 101</title>
    <link href="https://sarasoueidan.com/blog/css-shapes-101/"/>
    <updated>2014-04-29T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-shapes-101/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	In this article, you&#39;ll learn everything you need to know to get started using CSS Shapes today. We will cover all the prerequisites: establishing a coordinate system, conditions for elements to be eligible for shapes, and more, then moving on to the properties used, their values and how each one affects the shape created, with lots of visual explanations and examples.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CSS Regions Matter</title>
    <link href="https://sarasoueidan.com/blog/css-regions-matter/"/>
    <updated>2014-02-15T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-regions-matter/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
  Whether or not CSS Regions can be used to create multi-column or responsive layouts, fact remains that, unlike Flexbox, Multi-Columns, and Grids, &lt;strong&gt;CSS Regions are not a layout feature&lt;/strong&gt;&amp;mdash;they&#39;re &lt;strong&gt;a fragmentation feature&lt;/strong&gt; that allows us to control or change the flow of content across containers in a page, or across pages.
&lt;/p&gt;
&lt;p&gt;Since CSS Regions are a &lt;strong&gt;fragmentation feature&lt;/strong&gt;, they define &lt;em&gt;where&lt;/em&gt; content &lt;em&gt;flows&lt;/em&gt; on the screen—unlike Flexbox, floats, Grids, and other positioning features that define &lt;em&gt;how&lt;/em&gt; content is &lt;em&gt;laid out&lt;/em&gt; on a screen. Layout features position elements and containers; Regions can alter the flow of content that shows up in them.&lt;/p&gt;
&lt;p&gt;In this article I want to go over some useful examples of use cases for CSS Regions, and highlight some of the challenges that we may face when using CSS Regions, and talk about possible solutions to common Regions problems.&lt;/p&gt;
&lt;div class=&quot;note&quot;&gt;
&lt;p&gt;&lt;em&gt;I wrote this article before &lt;a href=&quot;http://news.cnet.com/8301-1023_3-57617840-93/reversing-course-google-rejects-adobe-web-publishing-tech/&quot;&gt;the news&lt;/a&gt; came out that Google decided to pull Regions out of Blink, which, in my opinion, is a big loss for the web community. So, even though the content of the article may go in vain, I think it&#39;s still worth sharing why I think CSS Regions mattered, and wish they weren&#39;t ditched like that. I hope you guys like it anyway.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt; In no way is this article meant as an attack on Mr. Håkon Wium Lie’s &lt;a href=&quot;http://alistapart.com/blog/post/css-regions-considered-harmful&quot;&gt;article&lt;/a&gt; about CSS Regions. Mr. Håkon’s article served as an incentive for me to dig deeper into CSS Regions, and during the process, I learned a lot about them, and about other future CSS features, and this article is the result of what I found out and my personal opinion regarding the usefulness of CSS Regions.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;regions-problems-and-solutions&quot;&gt;CSS Regions Problems and Possible Solutions&lt;/h3&gt;
&lt;p&gt;CSS regions have two prominent “problems” today: non-semantic presentational elements, and the non-responsiveness of regions.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;non-semantic-markup&quot;&gt;The Problem Of Non-Semantic Markup, and Possible Solutions&lt;/h4&gt;
&lt;p&gt;The reason we are using non-semantic elements to create Regions today is that other layout features, such as Grids, for example, have not yet been finalized and are not yet ready to be used. So, instead of using portions or fragments of a CSS Grid layout, for example, as regions, we’re currently stuck with defining regions using “normal” elements such as &lt;code&gt;div&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;CSS Regions are designed so that they work &lt;em&gt;now&lt;/em&gt;, with normal elements, and also work with future features, instead of waiting for things to be perfect. It is only a matter of time before Regions can be used with other layout features, and then a lot of the current Regions problems can be solved.&lt;/p&gt;
&lt;p&gt;When Regions are used with other features, such as Grids and Flexbox, they allow us to use fragments of a layout as regions by simply applying the &lt;code&gt;flow-from&lt;/code&gt; property to them. No empty elements will be needed to define regions, whatsoever.&lt;/p&gt;
&lt;p&gt;To demonstrate how Regions can be defined without creating empty elements, I will show a code example provided to me by Adobe’s &lt;a href=&quot;https://twitter.com/cataling&quot;&gt;Catalin Grigoroscuta&lt;/a&gt;. In the demo, the pseudo-element &lt;code&gt;::after&lt;/code&gt; is used to define regions to flow content into. So we do not need to add any empty elements to the page to create our regions, and therefore the semantics of the content are not compromised.&lt;/p&gt;
&lt;p&gt;This demo is a variation of &lt;a href=&quot;http://css-tricks.com/content-folding/&quot;&gt;an excellent use case for Regions that Chris Coyier came up with&lt;/a&gt;: using regions to &lt;strong&gt;shuffle&lt;/strong&gt; contents on a page, allowing us to reposition ads that are placed inside a sidebar on big screens, and place them in between the text content of an article on small screens, so that they don’t stack up down at the bottom of the article.&lt;/p&gt;
&lt;p&gt;The layout would start with a sidebar having the ads inside it, much like most blogs and magazines do today.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://sarasoueidan.com/assets/images/layout-wide.png&quot; alt=&quot;Picture showing a typical layout with ads stacked in the sidebar&quot; /&gt;
    &lt;figcaption&gt;
      The layout would contain the ads in a sidebar on big screens. &lt;em&gt;&lt;a href=&quot;http://css-tricks.com/content-folding/&quot;&gt;Source&lt;/a&gt;&lt;/em&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And then using CSS Regions, the content is “folded” on smaller screens, allowing ads to be placed between the text content of the article. Without CSS Regions, the ads would appear at the bottom of the article, way down at the bottom.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://sarasoueidan.com/assets/images/folding.jpg&quot; alt=&quot;Picture showing the effect of using regions to place ads inside content on small screens&quot; /&gt;
    &lt;figcaption&gt;
      Without using CSS Regions, the ads would normally stack at the bottom of the content as in the left picture. Using CSS Regions, the content can be &quot;folded&quot; and ads placed in different spots inside the article. &lt;em&gt;&lt;a href=&quot;http://css-tricks.com/content-folding/&quot;&gt;Source&lt;/a&gt;&lt;/em&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Chris did it by introducing empty elements into the article where he wants the ads to appear on small screens. And then, using media queries, he flowed the ads from the sidebar into these elements using the CSS Regions properties &lt;code&gt;flow-from&lt;/code&gt; and &lt;code&gt;flow-into&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Source: http://css-tricks.com/content-folding/ --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;main-content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; ... &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ad-region-1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- empty, ads flow into here as needed --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; ... &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ad-region-2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- empty, ads flow into here as needed --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; ... &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ad-region-3&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- empty, ads flow into here as needed --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;aside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Fallback content in this flow region, probably clone #ad-source --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;aside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- Source of flowing content, essentially hidden as an element --&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ad-source&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ads/1.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ads/2.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ads/3.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ads/4.png&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CSS needed to define the flow of the ads into the regions is shown below.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* define the source and destination of the ads flow */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#ad-source&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-flow-into&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ads&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-ms-flow-into&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ads&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;aside, [class^=&#39;ad-region&#39;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-flow-from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ads&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-ms-flow-from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ads&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* initially hide the regions (empty elements)  */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;[class^=&#39;ad-region&#39;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 155px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* show regions on small screens and hide the sidebar where the ads were on big screens */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 800px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;[class^=&#39;ad-region&#39;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;[class^=&#39;ad-region&#39;]:last-child&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 300px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* I wish height auto worked */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;aside&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see that this use case for Regions is brilliant and very practical. But it has one problem: non-semantic empty elements.&lt;/p&gt;
&lt;p&gt;A way to avoid using empty elements to define our regions would be to use the &lt;code&gt;::after&lt;/code&gt; pseudo-element on each of the &lt;code&gt;&lt;article&gt;&lt;/article&gt;&lt;/code&gt; elements, and use the pseudo-element as the region we flow the ads into. The following code shows how this can be achieved using just a few lines of CSS. No code bloating, no non-semantic elements.&lt;/p&gt;
&lt;p&gt;First we create our markup, similar to the way Chris did it, but we leave out the empty elements.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Quos possimus tenetur aut natus error aperiam ipsam atque laboriosam quod accusamus velit deserunt non quo blanditiis officiis pariatur eveniet fugiat neque.&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Possimus reiciendis eveniet ex suscipit nam ad voluptas cumque beatae qui maxime repellat quos consequuntur sapiente esse animi ea accusantium dicta perspiciatis?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Autem numquam tenetur natus ad unde quisquam illo fuga deserunt quibusdam accusamus provident officiis laboriosam hic nihil dolorum aperiam reprehenderit adipisci eveniet?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;article&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;aside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ad&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Ad 1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;80px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ad&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Ad 2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;80px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ad&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Ad 3&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;300px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;80px&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;aside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then using Regions properties, we define our regions on the &lt;code&gt;::after&lt;/code&gt; pseudo-element of each article.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/*&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;* Regions Code that makes the Folding Work&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;* 1) remove ads from sidebar and put them into a flow&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;* 2) &quot;pour&quot; the ads into the pseudo-element&lt;/span&gt;&lt;br /&gt;*/&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 600px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;.ad&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-flow-into&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ads&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* 1 */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;article::after&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 5em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-flow-from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; ads&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* 2 */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a brilliant idea that solves the problem of non-semantic elements, and also shows how well Regions can work with other CSS features. You can see a fork of Catalin’s live demo &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/ca006aa143bd27380bf1d99375299506&quot;&gt;here&lt;/a&gt;. And what’s even more awesome is that this technique and the code used for it are 100% reusable.&lt;/p&gt;
&lt;p&gt;This example shows that the non-semantic elements that are now sometimes needed to define regions, will no longer be a problem when Regions are used in conjunction with other layouts features. Just like we defined regions on pseudo-elements, we would be able to define regions on fragments of the layout that are part of a Grid or Flexbox, for example, and the semantics wouldn’t be affected. Grids and other layout features would provide “slots” to use as regions, just like pseudo-elements can be used as regions.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;responsiveness&quot;&gt;The Responsiveness Of Regions Or Lack Thereof&lt;/h4&gt;
&lt;p&gt;CSS Regions are not responsive by themselves, they need media queries to change. But then again, Flexbox does too, and so do CSS Grids, and that does not mean these features are not useful. Relying on Regions alone to fully “responsify” a layout is not a good idea, but that’s not surprising, considering that it’s not what Regions are made for.&lt;/p&gt;
&lt;p&gt;The biggest challenge that we could face when making Regions responsive is fitting the content inside a Region that has a fixed height but different widths on different screen sizes. We all know how limiting that is. If we start mobile-first, the content will be too little for the element on bigger screens when it expands horizontally, and if we start desktop-first, the content will overflow the element on small screens. The thing about regions is that it does not define a way to generate new boxes to fit the overflowing content. This is a curse, but also a blessing, because it allows Regions to work well with any other specification that &lt;em&gt;can&lt;/em&gt; generate boxes.&lt;/p&gt;
&lt;p&gt;The repsonsiveness of CSS regions would no longer be a problem when they are combined with other features that can do what Regions can’t do, such as the &lt;a href=&quot;http://dev.w3.org/csswg/css-overflow-3/&quot;&gt;CSS Overflow Module&lt;/a&gt;. If these technologies were to combine, then we would be able to create responsive layouts that have regions defined in them, without having to worry about content overflowing the regions.&lt;/p&gt;
&lt;p&gt;The CSS Overflow Module is described in the specification as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This module contains the features of CSS relating to new mechanisms of overflow handling in visual media (e.g., screen or paper). In interactive media, it describes features that allow the overflow from a fixed size container to be handled by pagination (displaying one page at a time). It also describes features, applying to all visual media, &lt;span style=&quot;text-decoration: underline&quot;&gt;that allow the contents of an element to be spread across multiple fragments, allowing the contents to flow across multiple regions or to have different styles for different fragments&lt;/span&gt;. (bold emphasis added by me)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Considering how CSS Regions are meant to help us create and control fragments of a layout, this Overflow module looks like a great match for Regions. Together, they could allow us to make Regions responsive by “extending” a region. The Overflow module handles overflow into “fragments”—it duplicates the source element and flows content into it as many times as necessary to fit the whole content. So as the screen becomes smaller, the region can be “extended” to fit its content without having to overflow that content into another region or element. Extending a region would be as simple as defining &lt;code&gt;overflow: fragments;&lt;/code&gt; on it, and we would end up with a solution to the fixed region height problem. That sounds really great, doesn’t it?&lt;/p&gt;
&lt;p&gt;There is also another proposal from Adobe—&lt;a href=&quot;http://adobe.github.io/css-pseudo-elements/&quot;&gt;multiple pseudo-elements&lt;/a&gt;—which allows the creation of multiple &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements on an element. Similar to the Overflow module, it would allow us to extend an element and use its extension as a region, much like we did in the example in the previous section, where we used the pseudo-element as a region to flow the ads into. We could define as many pseudo-elements as we want to “extend” a region whenever needed, without having to add a single empty element to the DOM. Razvan Caliman has even created &lt;a href=&quot;http://adobe.github.io/css-pseudo-elements/&quot;&gt;a polyfill&lt;/a&gt; for pseudo-elements if you’re interested you can check that out.&lt;/p&gt;
&lt;p&gt;Another challenge we may face when creating regions is having text overflow a region when the text is scaled up (page zoomed in) by the user, or when the contents of a region change such as when the page is translated into another language, for example. A lot of times, we may want to keep the contents of a region inside that region, and &lt;em&gt;not&lt;/em&gt; have them flow into another region, even if that other region is an extension of the main region.&lt;/p&gt;
&lt;p&gt;For this, the CSS Regions specification extends break properties from the Multi-Column Layout specification. These properties can be used to specify whether content inside a region is allowed to overflow to another region or not. More specifically, they allow us to decide whether a region breaks or does not break relative to the content inside it. This technique is useful for keeping related elements grouped together and for preventing important elements from being split.&lt;/p&gt;
&lt;p&gt;The following image is borrowed from &lt;a href=&quot;https://twitter.com/cjgammon&quot;&gt;CJ Gammon&lt;/a&gt;&#39;s &lt;a href=&quot;http://coding.smashingmagazine.com/2013/11/05/killer-responsive-layouts-with-css-regions/&quot;&gt;article on Smashing Magazine&lt;/a&gt; and shows how the break properties can work when shuffling a layout to fit on small screens. They allow us to prevent the regions from breaking until after each image in the image flow. This is an excellent use case for CSS Regions. You can read more about the example in the article on Smashing Magazine.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/break-demo.gif&quot; alt=&quot;Image showing how regions break on small screens&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Brian Rinaldi has also touched on the topic of using CSS Regions in responsive layouts more then once. You can read more about creating simple and more complex layouts with CSS Regions in the following two articles he wrote:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;http://flippinawesome.org/2014/01/27/using-css-regions-in-responsive-designs/&quot;&gt;Using CSS Regions In Responsive Designs&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.adobe.com/inspire/2014/01/complex-layouts-reflow-css-regions.html&quot;&gt;Creating complex layouts for the web with CSS Regions and Adobe Edge Reflow CC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;use-cases-and-reusability&quot;&gt;CSS Regions Use Cases And Reusability Of Code&lt;/h3&gt;
&lt;p&gt;We can create reusable code using CSS Regions, similar to the way it is possible to create usable components using &lt;a href=&quot;http://w3c.github.io/webcomponents/explainer/&quot;&gt;Web Components&lt;/a&gt;. The following examples show some use cases for CSS Regions that would otherwise not be possible without them. The code used to create the functionality in these examples is reusable.&lt;/p&gt;
&lt;p&gt;I’m sure that once the new features like Grids and Flexbox are more widely supported, a lot more use cases for Regions may rise, so please do not take these examples as the &lt;em&gt;only&lt;/em&gt; use cases for CSS Regions.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;shuffling-layouts&quot;&gt;Using Regions To Shuffle Layouts On Different Screen Sizes&lt;/h4&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;Regions give you the possibility to freely reshuffle the whole layout at any breakpoint. Even better than flex &lt;/p&gt;&amp;mdash; Christian Schaefer (@derSchepp) &lt;a href=&quot;https://twitter.com/derSchepp/statuses/426282824002727936&quot;&gt;January 23, 2014&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;p&gt;The example we saw earlier about “folding” content and displaying ads in the middle of articles on small screens is a perfect example of the ability of CSS Regions to shuffle layouts, which makes them a fantastic tool to have in our responsive web design toolkit.&lt;/p&gt;
&lt;p&gt;The code used to create the ad-shuffling layout can be reused in any layout that needs the same functionality—you add the necessary regions where you want the ads to appear (flow into), and use the same couple of CSS lines shown earlier to flow the contents of the sidebar (or whichever container contains the ads) into these regions on smaller screens. And, of course, you could also avoid using those extra elements as regions and use the pseudo-element technique for adding the regions between the sections of the article.&lt;/p&gt;
&lt;p&gt;In addition to defining regions where you want the ads to flow into, you can also style these regions’ content using the &lt;code&gt;@region&lt;/code&gt; rule. A &lt;code&gt;@region&lt;/code&gt; rule contains style declarations specific to a particular region. This also allows for even more modular style sheets that are specific to certain regions. This way, you can add your regions into a page, and hook in their specific style sheet, and end up with contents flowing into those regions being styled the way you expect them to, based on the styles u specify using the &lt;code&gt;@region&lt;/code&gt; rule.&lt;/p&gt;
&lt;p&gt;For example, the following snippet will style all paragraphs that flow into a region by applying an italic font style to them.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@region&lt;/span&gt; #my-region&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;font-style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; italic&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to note here that, at the time of writing of this article, only a subset of styles are implemented for region styling. Only styles that don’t affect layout can now be applied to content inside regions using &lt;code&gt;@region&lt;/code&gt;, like, for example, text and background colors. Styles that do affect layout like display, float, and margin properties do not yet work inside regions. But once they do, we can style region-specific content better and use it to create modular and reusable code. Also, the &lt;strong&gt;styles inside the region are applied to the source element&lt;/strong&gt; which is going to be moved into the region, so you’ll need to remember to use the appropriate class names or IDs as the ones you’re using on your content.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;repositioning-menus&quot;&gt;Repositioning Menus On Small Screens&lt;/h4&gt;
&lt;p&gt;In this example I am going to use just a couple of lines of CSS to move a navigation from the header into a hidden off-canvas sidebar on small screens. For the sake of brevity and clarity of code, I kept the sidebar visible because I wanted to focus only on the code that accomplishes the responsive menu effect using Regions, and not the actual hiding and showing of that menu.&lt;/p&gt;
&lt;p&gt;The example is pretty basic, so I’ll just create a navigation menu in a header, and a sidebar to flow the menu into on small screens.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;logo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Logo&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;nav&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;navigation&lt;span class=&quot;token punctuation&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;my-nav&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Home&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;About&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Clients&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Contact Us&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;nav&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;aside&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;my-region&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;aside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Only two lines of CSS are needed to move the navigation from the header into the sidebar. And only a few lines of CSS inside an &lt;code&gt;@region&lt;/code&gt; rule are needed to apply styles to the contents inside our region. The navigation which is going to be moved into out region has new styles declared for it inside the &lt;code&gt;@region&lt;/code&gt; rule. You can reuse this piece of code anywhere. Just drop that sidebar in and hook those few lines of CSS. Of course make sure the class names and IDs match those of the elements on the page you’re using them for.&lt;/p&gt;
&lt;p&gt;Because, at this time, only a subset of styles are supported for region styling, I just changed the color of the links inside the sidebar for demonstration purposes, but when more styles are possible, we could have the navigation items stack on top of each other and be styled just like all off-canvas menus we see today.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* region-specific styles */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@-webkit-region&lt;/span&gt; #my-region&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;.my-nav a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; white&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* flow the menu from the header into the sidebar on small screens */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;32em&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;header nav&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-flow-into&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; navigation&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;#my-region&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-flow-from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; navigation&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see the live demo and check the code out &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/0be636b17d2cbdef26ce2e57c3624478&quot;&gt;here&lt;/a&gt;. Resize the screen to see the effect.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://twitter.com/razvancaliman&quot;&gt;Razvan Caliman&lt;/a&gt; has also created a slightly more complex responsive menu that uses CSS Regions to flow menu items into a drop-down menu when these items no longer fit on the menu bar. You can see Razvan’s demo &lt;a href=&quot;http://codepen.io/oslego/pen/tdHEg&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;regions-for-creating-columns&quot;&gt;Examples Of Where One Might Want To Use CSS Regions To Create Columns&lt;/h3&gt;
&lt;p&gt;There is no way in the CSS Multi-Columns module (that I know of) that gives designers the ability to style each column of text individually. The module allows content to be displayed in multiple columns, but it does not give us the power to treat each individual column separately, and give the columns different widths and heights, for example. And this is where CSS Regions have an advantage over Columns.&lt;/p&gt;
&lt;p&gt;Columns created using CSS Regions are stylable any way we want them to. Each column is a region and each region can have its own styling independently of the other columns. And by styling I mean all kinds of styling: from adding backgrounds to a column, to styling text inside a column, to positioning columns, changing column dimensions, and even transforming columns using CSS Transforms.&lt;/p&gt;
&lt;p&gt;Now, if creating a simple multi-column layout is the goal, and that layout can be achieved using Multi-Columns alone, then by all means we &lt;em&gt;should&lt;/em&gt; use CSS Columns to do it. &lt;strong&gt;CSS Regions could do a lot of things, but they should not be used to do everything&lt;/strong&gt;. Just because we can do something with Regions, does not mean that we should.&lt;/p&gt;
&lt;p&gt;The first example shows three columns on the right page of a magazine design, each with different heights. Giving different heights to columns is not possible with CSS Multi-Columns alone. But using CSS Regions, each column can be defined as a region and given any height we want.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/styled-columns-1.png&quot; alt=&quot;Picture showing a magazine layout with columns of different heights&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;And another example is one I recently created for &lt;a href=&quot;http://sarasoueidan.com/blog/css-regions-with-shapes-for-readability&quot;&gt;an article&lt;/a&gt; I wrote about combining CSS Regions with CSS Shapes to improve the readability of layouts created using CSS Shapes.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/styled-columns-3.png&quot; alt=&quot;Screenshot showing a magazine layout with columns styled using CSS Shapes&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Each column shown in the above picture is a region, and each region is shaped using CSS Shapes to get the above result. You can view the live demo &lt;a href=&quot;http://sarasoueidan.com/demos/fragmented-magazine-layout/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;None of these examples would be possible to create using just CSS Multi-Columns, so it is great to have such a tool at our disposal.&lt;/p&gt;
&lt;p&gt;And the final example I want to show is one created by Opera’s Chris Mills for an &lt;a href=&quot;http://dev.opera.com/articles/view/an-introduction-to-css-regions/&quot;&gt;introductory article&lt;/a&gt; he wrote about CSS Regions. The demo is an example of how CSS Regions can be used to create text containers that are separate from each other, transformed using CSS Transforms, and positioned on the screen, and then have the text content flow into these containers in the order they appear in the original source.&lt;/p&gt;
&lt;blockquote&gt;
    In effect, we are completely separating out our content from any kind of layout, bringing the original intention of CSS to a welcome extreme. The content can be flowed into your layout containers regardless of how they are sized and positioned, and will reflow when those containers change size.&amp;mdash;Chris Mills 
&lt;/blockquote&gt;
&lt;p&gt;This is a screenshot of the demo:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/opera-demo.png&quot; alt=&quot;Screenshot of a demo using CSS Regions to flow content into containers transformed using CSS Transforms&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;The demo is a nice demonstration of how CSS Regions offer us finer control over fragments of a page and how they allow us to flow content inside containers any way we want them to, while giving us the ability to completely separate content from layout concerns.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;regions-vs-future-layouts&quot;&gt;CSS Regions Versus Future Layout Features&lt;/h3&gt;
&lt;p&gt;CSS Regions can be used today to create and shuffle layouts in many ways. But what happens if a better solution is someday introduced that allows us to do what Regions allow us to do today in a better and more efficient way?&lt;/p&gt;
&lt;p&gt;Mr. Håkon Wium Lie has already shown some good solutions to certain layout problems he discussed in his article by using &lt;a href=&quot;http://figures.spec.whatwg.org/&quot;&gt;CSS Figures&lt;/a&gt; instead of CSS Regions. This is actually great, considering that the Figures and Multi-Columns specs are made to do what he used them to do. And when these specifications are implemented, we will probably use &lt;em&gt;them&lt;/em&gt; to do what he did too, as they offer a more flexible way to create those layouts than Regions do.&lt;/p&gt;
&lt;p&gt;As a matter of fact, &lt;a href=&quot;http://figures.spec.whatwg.org/&quot;&gt;the CSS Figures specification&lt;/a&gt; introduces some really cool and useful features, like vertical floating, where we get to float an element using &lt;code&gt;top&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; values, in addition to the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; values that we have today. I can imagine how these values can be useful already.&lt;/p&gt;
&lt;p&gt;We also get a &lt;a href=&quot;http://figures.spec.whatwg.org/#the-float-offset-property&quot;&gt;float offset property&lt;/a&gt; which allows us to offset a floated element, which is super useful considering how easy it makes to wrap content around a figure such as an image or a blockquote. We are now able to offset any element by applying a &lt;code&gt;position:relative&lt;/code&gt; to it and then using the offset properties (&lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, &lt;code&gt;top&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;) to “push” it in any direction we want, but that will not affect the flow of content around it, as the position it occupies on the page will be preserved and won’t be occupied by any surrounding element. Using float offsets introduced in the CSS Figures spec, we will be able to wrap content around an offsetted float with so much ease, and this is just brilliant!&lt;/p&gt;
&lt;p&gt;When new features such as CSS Figures are implemented, we will definitely use those for a lot of use cases where they would fit in better than CSS Regions, but CSS Regions also have other use cases that neither the Multi-Column specification, nor the Figures specification can do. So I believe that it would be great for the future of the web for all of these tools and features to coexist and offer us, designers and developers, a wider range of options that give us more control over our layouts.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;CSS Regions give us the ability to do a lot of things that are otherwise not possible without them. They can be a very useful and powerful tool in our responsive web design toolset, and when used in conjunction with other features, can provide us with great solutions to common design problems we are faced with.&lt;/p&gt;
&lt;p&gt;Just like any other feature, CSS Regions should be used in the right place, and it is our responsibility to use them that way. I believe that we are smart enough to know when and where to use a feature.&lt;/p&gt;
&lt;p&gt;Do you have any great use cases for CSS Regions? Do you think it will be a valuable tool in our web design toolset?&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
  I published this article originally on &lt;a href=&quot;http://flippinawesome.org/2014/01/27/css-regions-matter/&quot;&gt;flippinawesome.org&lt;/a&gt; on January 27&lt;sup&gt;th&lt;/sup&gt;, 2014.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Animating CSS Shapes with CSS Animations and Transitions</title>
    <link href="https://sarasoueidan.com/blog/animating-css-shapes/"/>
    <updated>2014-01-14T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/animating-css-shapes/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
  Today we&#39;re going to be talking about animating CSS shapes with CSS animations. 
  We&#39;ll be creating very basic &quot;shape-shifting&quot; layouts of sort. 
  There are also many considerations to take when animating CSS shapes, so we&#39;ll go over all points 
  in this article.
&lt;/p&gt;
&lt;p&gt;This is the third article in a series of articles I’m writing about CSS shapes,
so in this article I’m assuming you have a basic understanding of how CSS shapes are created.
You may want to check the first article: &lt;a href=&quot;http://sarasoueidan.com/blog/css-shapes/&quot;&gt;Creating Non-Rectangular Layouts with CSS Shapes&lt;/a&gt;, which covers all the basics to get you started creating CSS shapes in no time. The second article was about &lt;a href=&quot;http://sarasoueidan.com/blog/css-regions-with-shapes-for-readability/&quot;&gt;combining CSS shapes with CSS regions to create more readable layouts&lt;/a&gt;, tackling one face of the accessibility of non-rectangular shaped layouts.&lt;/p&gt;
&lt;div class=&quot;note warning&quot;&gt;
Notes: 
&lt;ul&gt;
&lt;li&gt;Most of this article&#39;s demos use the `shape-inside` property, which has been temporarily &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=130698&quot;&gt;removed from Webkit&lt;/a&gt; and &lt;a href=&quot;https://codereview.chromium.org/209443007/&quot;&gt;Blink&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The principles of animating shapes is applicable to both CSS Shapes *and* CSS Clipping masks. All the
demos in this article use clipping masks to visualize CSS Shapes. Hence, the shapes are animated as clipping paths as well. So, you will be able to see the shapes animate in webkit-based browsers at this time, but the content inside the shapes won&#39;t be affected by the shapes because of the current state of support for CSS Shapes.&lt;/li&gt;
&lt;li&gt;For a detailed suppprt table for CSS Clipping and Masking, see the &lt;a href=&quot;http://caniuse.com/css-masks&quot;&gt;CanIUse.com Support table&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
  Also, check the &lt;a href=&quot;http://caniuse.com/#feat=css-shapes&quot;&gt;current state of browser support for CSS Shapes&lt;/a&gt; out.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;animatable-shapes&quot;&gt;Animatable CSS Shapes&lt;/h3&gt; 
&lt;p&gt;There are two ways we can create a shape with CSS shapes: using an image URI which the browser uses to extract the shape from, and using one of the available CSS shapes functions, such as &lt;code&gt;polygon()&lt;/code&gt; and &lt;code&gt;circle()&lt;/code&gt;, among others.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shapes defined using an image are not animatable&lt;/strong&gt;. So, if you define a shape using an image, specify a transition, and then define another shape using another image when the element is hovered, for example, the shape applied to the shape will change but it will not animate or transition into the new shape; it will just “jump” from one shape into another in an abrupt manner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The only way a shape can be animated is when it is defined using a &lt;u&gt;shape function&lt;/u&gt;.&lt;/strong&gt; Even so, there is one condition: &lt;strong&gt;the number of points defining the final shape
must be the same as the number of points defining the initial shape&lt;/strong&gt;. When you think about it, makes perfect sense: you have a set of points that make up a shape, and then you move those points around and have them form another shape.&lt;/p&gt;
&lt;p&gt;So the &lt;strong&gt;transitions on CSS shapes are really transitions on the individual points making up a shape&lt;/strong&gt;. More specifically, &lt;strong&gt;transitions on the coordinates of each point&lt;/strong&gt;, where the coordinates are interpolated as real numbers to allow animations and transitions, just like any other animatable CSS values.&lt;/p&gt;
&lt;p&gt;When I first learned about this condition, I thought it would not be possible to change a simple shape into a more complex one that has more points defining it, but that’s actually not true, it is very doable: start by definining the points needed for the more complex shape, and then rearrange
those points to form the simple shape.&lt;/p&gt;
&lt;p&gt;For example, even if you have 20 points making up the final shape, and you want to start with a simple rectangle defined by 4 points, you can still place those 16 extra points on the rectangular shape by simply placing them on one of the rectangle’s sides, without them affecting the shape of the rectangle. We’ll get into the examples shortly.&lt;/p&gt;
&lt;p&gt;Now, thinking about the complex shape first does not at all mean that the initial shape must be more complex than the final shape, it just means that you will think ahead and prepare all the requirements before you start coding. You can easily animate a simple shape into a more complex one if you have all the necessary points defined.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;considerations&quot;&gt;Things To Consider Before Animating Your Shaped Layouts&lt;/h3&gt; 
&lt;h3 class=&quot;deeplink&quot; id=&quot;content-fitting&quot;&gt;Content Fitting Inside Different Shapes&lt;/h3&gt; 
&lt;p&gt;One thing to consider when animating CSS shapes in general is the fact that the content that fits into one shape may not perfectly fit into another. You may start out with a simple shape, and when you animate that shape into a new one, the content inside that shape may overflow the new shape, or may be too little for the new shape. So you may need to resize the element as you change its shape as well, so, again, the design process has to be thought through in detail. This also means that it wouldn’t be very simple to depend on animated CSS shapes for dynamic content, unless you create the shapes dynamically with Javascript. But that’s a topic for another blog post ;)&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;readability&quot;&gt;Animated Text Becomes Temporarily Unreadable&lt;/h3&gt; 
&lt;p&gt;Animating text composition in general, whether by animating Shapes or even a simple animation of width, will make the text temporarily unreadable. &lt;em&gt;(Thanks &lt;a href=&quot;https://twitter.com/alanstearns&quot;&gt;Alan&lt;/a&gt; for bringing that to my attention)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While it might be an interesting graphical effect for smooth layout changes, the process of text changing its layout blocks the ability of the reader to read your content, and it is only after the animation is over that they will again be able to read the text. That is, of course, assuming that the Shapes are readable to begin with, as we noted before.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;accessibility&quot;&gt;General Accessibility&lt;/h3&gt; 
&lt;p&gt;Be careful what shapes you choose, and consider how they affect the readability of your content. And think twice before integrating CSS animations with CSS Shapes.&lt;/p&gt;
&lt;p&gt;Also, shapes that are fine on big screens may not be fine on small screens. Personally, I would
stick with rectangular layouts on small screens, and progress to more complex (but still readable)
shaped layouts on big screens. But then again, this depends on the shapes you choose, and some
simple shapes are actually OK on small screens as well.&lt;/p&gt;
&lt;p&gt;The aim of this article is to discuss and &lt;strong&gt;experiment&lt;/strong&gt; with the different ways and options we have to animate CSS Shapes. &lt;strong&gt;Shapes animations should only be used in real projects when there is a practical use-case for these animations&lt;/strong&gt; (and of course when there is more acceptable browser support ^^). I’m sure someone will think of a nice use-case. So, for now, let’s dig into the actual animation process and have some CSS Shapes fun!&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;example-1&quot;&gt;1. Initial and Final Shapes Have Same Number Of Points&lt;/h3&gt; 
&lt;p&gt;We’ll start off with very simple examples and then progess to more complex ones. The examples in this section won’t deal with the number of points defining a shape. We’ll leave that for the second section.&lt;/p&gt;
&lt;p&gt;The best way to visualize a shape animation it to use the shape properties in conjunction with the &lt;code&gt;clip-path&lt;/code&gt; property, which will clip any excess parts of the element that are outside the defined shape. I’ve talked about using CSS clip paths with CSS Shapes in detail in my &lt;a href=&quot;http://sarasoueidan.com/blog/css-shapes/&quot;&gt; first article&lt;/a&gt;, so check that out if you still don’t know how they can relate.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;rearranging-points&quot;&gt;Rearranging Points To Create A New Shape&lt;/h3&gt; 
&lt;p&gt;So for our first example, we’re going to do just that. And for the sake of simplicity and demonstration purposes, we’re not going to be doing anything fancy. We’ll create a simple shape and animate it on hover using a simple CSS transition. The initial and final shapes will have the same number of points so we won’t have to worry about that for now. All we have to do, is move the points around (rearrange them) and see how the shape transitions smoothly.&lt;/p&gt;
&lt;p&gt;We’ll start with a simple inverted trapezoid shape, and when you hover over the element, its shape will animate but the final shape will also be a trapezoid. The only thing we’re going here is move the points defining the shape around by changing their coordinate values.&lt;/p&gt;
&lt;p&gt;We’ll be using the &lt;code&gt;clip-path&lt;/code&gt; property to make the shape and the animation clearer and more obvious.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.element&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;   &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  500px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 350px 300px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 150px 300px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 2s ease&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  500px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 350px 300px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 150px 300px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.element:hover&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;150px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 350px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 300px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0px 300px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;150px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 350px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 300px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0px 300px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The shape-* properties are supported unprefixed in Canary, but the &lt;code&gt;clip-path&lt;/code&gt; property still needs its prefix to work.&lt;/p&gt;
&lt;p data-height=&quot;500&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;6aa071b2202052b5fed38b1312f3878d&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/6aa071b2202052b5fed38b1312f3878d&quot;&gt;animating a css shape&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;http://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;And it’s as simple as that! Just change the coordinates of the points defining the shape define a transition on the element, and you’ve got yourself a smooth animating shape.&lt;/p&gt;
&lt;p&gt;You will be able to see how the text inside the shape is animated into the new shape as well. And you can also see that, during the animation process, that text is very unreadable.&lt;/p&gt;
&lt;p&gt;Now, if you change the shape on hover to another shape by using another shape function for example, or changing the number of points defining the shape, the shape &lt;em&gt;does&lt;/em&gt; change, but it will not transition or animate; it will jump from the initial shape to the final one abruptly. For example, the following code:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.demo:hover&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* blink needs old syntax at this time */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* new syntax for webkit */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;50% at 50% 50%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;50% at 50% 50%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ve added this snippet to the above demo. Click the “Edit on Codepen” link on the demo, and uncomment the snippet in the &lt;code&gt;.element:hover&lt;/code&gt; rule to see how it affects the animation.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;resizing-shapes-with-no-points&quot;&gt;Resizing Shapes With No Specific Number Of Points&lt;/h3&gt; 
&lt;p&gt;In our second example, we’re going to animate a circular shape by increasing its diameter. The number of points on a circle is undefined, and the only thing defining the circle in the &lt;code&gt;circle()&lt;/code&gt; function is its center and radius.&lt;/p&gt;
&lt;p&gt;We’re going to have the circle increase in size when we hover over it. This sounds a lot like resizing an element in CSS using CSS transforms and the &lt;code&gt;scale()&lt;/code&gt; function, but it’s not really the same. When you scale an element using CSS transforms, the entire element including its content will increase in size, and by increasing its size you’re not creating any extra room inside it for more content. But when you resize an element’s defined Shape, you &lt;em&gt;are&lt;/em&gt; making more room or taking away from it. So, you could, for example, increase the size of the element’s shape and then dynamically add some content to it and have that content fit inside it, but that’s not possible when you’re scaling the element up with CSS transforms.&lt;/p&gt;
&lt;p&gt;In this example we’ll first define a circular shape on our element using the &lt;code&gt;circle()&lt;/code&gt; shape function, and then animate the circle’s size when the element is hovered. You will be able to see how that will affect the room inside the element.&lt;/p&gt;
&lt;p&gt;First, we’re going to define the shape on the element and fire an animation on hover. We’ll define a circle of radius &lt;code&gt;210px&lt;/code&gt; whose center is positioned at the center of the element.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.element&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;   &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 15px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* blink */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* webkit */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;210px at 250px 250px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;210px at 250px 250px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.element:hover&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token property&quot;&gt;-webkit-animation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; scale 3s ease infinite&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we’re going to define the animation keyframes that will control the scaling of the shape. The final effect will be similar to a beating effect: the radius of the circle is going to increase and then decrease back to its initial size at the end of the animation. And we have set the animation to repeat infinitely as long as you’re hovering over the element.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@keyframes&lt;/span&gt; scale&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;0%&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;210px at 250px 250px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;50%&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px at 250px 250px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token selector&quot;&gt;0%&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 210px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;210px at 250px 250px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here is the resulting effect:&lt;/p&gt;
&lt;p data-height=&quot;600&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;acb88a202823fd107d1327f4b1a9c3c2&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/acb88a202823fd107d1327f4b1a9c3c2&quot;&gt;animating a css shape&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;http://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;You can see that the room for content inside the circle increases, and more text can fit inside the shape when it grows. So, you could, for example, use a growing CSS Shape to show more content information when an element is hovered.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;example-2&quot;&gt;2. Initial and Final Shape Have Different Number Of Points&lt;/h3&gt; 
&lt;p&gt;In this section we’re to animate from one shape to another, where the initial and final shapes are &lt;em&gt;visually&lt;/em&gt; defined by a different number of points. We’re going to use the &lt;code&gt;polygon()&lt;/code&gt; function to define our shapes.&lt;/p&gt;
&lt;p&gt;As I mentioned at the beginning of this article, only shapes with the same number of points can be animated into one another. So, in order to animate from a shape to another, we have to make sure that the number of points in the definition of these shapes is the same, even if they don’t visually appear to have the same number.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;animating-complex-to-simple&quot;&gt;Animating A Complex Shape Into a Simple Shape&lt;/h3&gt; 
&lt;p&gt;We’re going to start with a very simple demo, where we animate a star shape into a simple rectangle shape. (Not that the star shape is really complex, but it is more complex than the final shape it will be animating into.)&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://sarasoueidan.com/assets/images/star-to-rect.jpg&quot; alt=&quot;The two shapes&quot; /&gt;
    &lt;figcaption&gt;
      The two shapes we&#39;ll be animating. Blue discs show the number of points needed to define the shape.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The star is defined by 10 points (shown in blue), and the rectangle only needs 4 points to define it. It is true that the rectangle only &lt;strong&gt;needs&lt;/strong&gt; four points to define it, but it can also be defined by as many points as we want it to.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;polygon()&lt;/code&gt; function we’re going to use to define these two shapes &lt;strong&gt;needs to take in the same number of points for the two shapes&lt;/strong&gt; in order for the animation to be possible. This means that we need to use 10 points to draw the rectangle just like we will use 10 points to draw the star, and there is no problem with this. Why? Because we can simply place the extra points in a way that does not affect the resulting shape we want.&lt;/p&gt;
&lt;p&gt;So, the rectangle will be defined by 10 points, which we can place as shown in the image below:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://sarasoueidan.com/assets/images/rect-points.jpg&quot; alt=&quot;points placed on the rectangle&quot; /&gt;
    &lt;figcaption&gt;
      The rectangle can be defined by as many points as the star. This is needed to make the animation work.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Of course, we could have placed the extra 6 points anywhere on the rectangle’s edges, but that would change the animating effect. We’ll get to this in a minute.&lt;/p&gt;
&lt;p&gt;Now that we have the same number of points in both shapes, we can easily transition from one shape to another.&lt;/p&gt;
&lt;p&gt;We’ll first position the points so that they make up a star. The &lt;code&gt;polygon()&lt;/code&gt; function for the star shape looks like following; of course, we’re also going to clip the element to the shape using the &lt;code&gt;clip-path&lt;/code&gt; property as we did before.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.element&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 350px 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 380px 320px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 450px 500px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px 420px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50px 500px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 120px 320px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0px 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 150px 170px &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 3s ease&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 350px 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 380px 320px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 450px 500px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px 420px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50px 500px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 120px 320px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0px 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 150px 170px &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And when the element is hovered, the points will be rearranged to form a rectangle defined as follows:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.element:hover&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 320px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 500px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px 500px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 500px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 320px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;250px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 320px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 500px 500px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 250px 500px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 500px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 320px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see the points being rearranged to form a rectangle in this live demo:&lt;/p&gt;
&lt;p data-height=&quot;700&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;17dd591f451f4757366faf3c9246504b&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/17dd591f451f4757366faf3c9246504b&quot;&gt;animating a css shape&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;http://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Rearranging the points has a very big effect on the transition. The order of points in the initial shape is preserved when they are rearranged to form the second one, and you need to keep that in mind, otherwise you may end up with a not-so-beautiful transition/animation effect.&lt;/p&gt;
&lt;p&gt;The following is an example of what could happen if you randomly rearrange the points. You can see where each point will be placed, and you can tell that that is not the best way to do it.&lt;/p&gt;
&lt;p data-height=&quot;700&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;b49058b2d80de2c2463a42daf4d1c9aa&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/b49058b2d80de2c2463a42daf4d1c9aa&quot;&gt;animating a css shape&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;http://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;So be careful and always make sure you rearrange the points the best possible way that ensures a nice transitioning effect.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;animating-simple-to-complex&quot;&gt;Animating A Simple Shape Into a Complex Shape&lt;/h3&gt; 
&lt;p&gt;Our last example is the most complex one, but you’ll find that it’s not really complex at all.&lt;/p&gt;
&lt;p&gt;We’ll be applying the same concept we applied in the previous example, but instead of starting out with a higher number of points we’re going to start with a simple rectangular shape and have it animate into an irregular shape.&lt;/p&gt;
&lt;p&gt;We’ll have a look at what the final shape looks like, how many points it needs to define it, and then well define the initial rectangle shape using the same number of points. The points will be placed on the edges of the rectangle, and we’ll make sure we place them in a suitable way so that they animate to the final shape the way we’d expect them to.&lt;/p&gt;
&lt;p&gt;We want to start with a simple two-column layout. Each column is a separate rectangular element. And then when we hover over the columns’ container, a shape, a tree in our example, will show in the middle between the two columns, and the two columns will animate their shapes so that they kind of wrap the tree in the middle. This example is inspired by &lt;a href=&quot;http://codepen.io/adobe/pen/Cnvuf&quot;&gt;this pen&lt;/a&gt; by the Adobe Web Platform Team.&lt;/p&gt;
&lt;p&gt;So this is how the shapes in our our final demo will look like:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://sarasoueidan.com/assets/images/demo-shapes.png&quot; alt=&quot;The shapes of the columns in the final demo&quot; /&gt;
		&lt;figcaption&gt;
      The image shows the shapes that the two text columns will animate to when their container is hovered. The shape on the left shows the points needed to define it. The shape on the right will have a similar point structure.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I drew this in image Photoshop, even the example tree is actually a shape defined in Photoshop. Again, we’re not going to be doing anything fancy in this article, we’ll leave that to another one!&lt;/p&gt;
&lt;p&gt;The shapes in the image are &lt;em&gt;similar&lt;/em&gt; to the shapes in the final demo. Of course, there are no coordinates in the image above to the shapes will probably differ a bit when we plot their points on the elements’ coordinate systems. So, let’s get to it!&lt;/p&gt;
&lt;p&gt;We’ll start by creating two columns of text inside a container. We’ll use the tree shape as a background to the entire container. At first, the background will be invisible, and then when the container is hovered, the background image will scale up, making it appear as if the tree is scaling up in the middle between the two columns. And as the tree appears, the two columns will animate into their respective shapes shown in the above image.&lt;/p&gt;
&lt;p&gt;In order to know how many points are exactly needed, so that we can define them on the rectangle, I’m going to start by defining the &lt;strong&gt;final&lt;/strong&gt; shape of the columns, and then move backwards and use the same number of points to define the rectangle.&lt;/p&gt;
&lt;p&gt;The right column’s final shape can be defined by the following shape function:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30px 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 80px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 120px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 160px 350px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 120px 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  100px 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 160px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 60px 130px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 60px 110px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 60px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30px 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 80px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 120px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 160px 350px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 120px 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  100px 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 160px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 60px 130px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 60px 110px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 60px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the above shape, we can now define the initial rectangular shape, by using the same number of points but placing them on the rectangle’s edges. Because our shape changes only on the left side, we can place all the animating points on the left edge of the recangle, and then have them move horizontally into their places on hover. This means that it’s enough to use the same &lt;code&gt;polygon()&lt;/code&gt; function as above, but move those points on the left of the shape to the left edge of the rectangle, by giving them all zero abscissa.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 350px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 160px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 130px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 110px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 60px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 350px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 160px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 130px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 110px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 60px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;              &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So the final code to animate the shape of the right column when its container is hovered looks like the following:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.column-right&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 350px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 160px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 130px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 110px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 60px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 350px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 160px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 130px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 110px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 60px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container:hover .column-right&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30px 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 80px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 120px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 160px 350px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 120px 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  100px 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 160px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 60px 130px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 60px 110px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 60px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30px 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 80px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 120px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 160px 350px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 120px 250px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  100px 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100px 160px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 60px 130px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 60px 110px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 60px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, we can get the shape functions for the left column. First define the final (more complex) shape, to get the necssary number of points. Then rearragne those points into a rectangle.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.column-left&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 60px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 80px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 100px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 150px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 275px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 375px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 420px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 410px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 440px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 550px &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 60px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 80px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 100px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 150px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 275px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 375px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 420px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 410px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 440px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 550px &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container:hover .column-left&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 60px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 280px 80px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 240px 100px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 230px 150px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 200px 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 160px 275px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 130px 375px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 160px 420px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 240px 410px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 270px 440px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 290px 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 290px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 550px &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;-webkit-clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 300px 60px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 280px 80px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 240px 100px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 230px 150px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 200px 180px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 160px 275px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 130px 375px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 160px 420px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 240px 410px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 270px 440px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 290px 450px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 290px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 550px &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And of course in order to get a smooth shape transition, we need to define a transition on the two columns, and a transition on the container with the same speed and timing function, so that the background and column shapes can animate simultaneously.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 700px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 600px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 30px auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 25px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #eee &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;http://sarasoueidan.com/blog/animating-css-shapes/images/tree.png&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; 50% 50% no-repeat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 1s linear&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* scale the background up on hover */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container:hover&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50% auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.column&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* height and width must be explicitly set otherwise Shapes won&#39;t work */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 300px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 550px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; justify&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ddd&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;/* define same transition duration and timing function as the container&#39;s */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; all 1s linear&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;shape-padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And this is the final working demo:&lt;/p&gt;
&lt;p data-height=&quot;750&quot; data-theme-id=&quot;3617&quot; data-slug-hash=&quot;94e3c9210c418770206487ef8700a1c2&quot; data-default-tab=&quot;result&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/SaraSoueidan/pen/94e3c9210c418770206487ef8700a1c2&quot;&gt;94e3c9210c418770206487ef8700a1c2&lt;/a&gt; by Sara Soueidan (&lt;a href=&quot;http://codepen.io/SaraSoueidan&quot;&gt;@SaraSoueidan&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;It is worth noting here that if the two columns were completely filled with text before they are animated, that text will overflow the shape that it will animate to. This is one of those cases where you would want to take into account the text and shapes before you decide to animate your element’s shape.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt; 
&lt;p&gt;In this article we went over the basics of animating CSS shapes. All of the shapes we animated here were static, i.e defined in the CSS and animated there. But sometimes, in order to achieve more compelling visual effects, you may want to dynamically create shapes while some element moves on the page. That kind of shape animations can be achieved by creating and animating CSS shapes using Javascript, and is, for now, outside the scope of this article.&lt;/p&gt;
&lt;p&gt;The examples and demos I showed in this article are all for demonstration purposes only, and may not make for a practical use-case for animated CSS shapes. But combined with CSS clipping paths, some creative shape-shifting layouts can be created that don’t compromise readability of the content.&lt;/p&gt;
&lt;p&gt;I hope this article, along with the previous two, helped you get up and running with CSS shapes. Of course, at this time, support for CSS Shapes is still limited, but I highly encourage you to start experimenting with them now, as you could help find and fix bugs, and of course when the time comes and Shapes are widely supported, you’ll be Shapes masters by then. :)&lt;/p&gt;
&lt;p&gt;I hope you found this article useful. Thank you very much for reading!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Using CSS Regions With CSS Shapes For A Better Reading Experience</title>
    <link href="https://sarasoueidan.com/blog/css-regions-with-shapes-for-readability/"/>
    <updated>2013-12-05T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-regions-with-shapes-for-readability/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
Using &lt;a href=&quot;http://dev.w3.org/csswg/css-shapes/&quot;&gt;CSS shapes&lt;/a&gt; we can flow our content in non-rectangular areas. And sometimes we want to be able to flow our content into multiple custom-shaped areas inside an element. If you&#39;ve read my &lt;a href=&quot;http://sarasoueidan.com/blog/css-shapes/index.html&quot;&gt;previous article&lt;/a&gt;, you already know that this can be done with CSS Shapes, by using an image with alpha transparency with multiple shapes defined in it, and letting the browser extract the content&#39;s float areas from it. As appealing as this may sound and as creative as we can get with our shapes, flowing the text into multiple areas can easily make our content almost completely unreadable.
&lt;/p&gt;
&lt;small&gt;
    This article assumes that you&#39;re already familiar with the basics of CSS Shapes and &lt;a href=&quot;http://dev.w3.org/csswg/css-regions/&quot;&gt;CSS Regions&lt;/a&gt;. I&#39;ve recently written &lt;a href=&quot;http://sarasoueidan.com/blog/css-shapes/index.html&quot;&gt;an in-depth comprehensive article about creating non-rectangular layouts with CSS shapes&lt;/a&gt;, which is perfect for getting you up and running with CSS shapes.
&lt;/small&gt;
&lt;div class=&quot;note warning&quot;&gt;
  Notes: 
  &lt;ul&gt;
    &lt;li&gt;
      This article&#39;s demo uses the
      &lt;code&gt;shape-inside&lt;/code&gt; property, which will be temporarily &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=130698&quot;&gt;removed from Webkit&lt;/a&gt; and &lt;a href=&quot;https://codereview.chromium.org/209443007/&quot;&gt;Blink&lt;/a&gt;. So, for the time being, this article will only show screenshots of how the demo works when &lt;code&gt;shape-inside&lt;/code&gt; is implemented again.
    &lt;/li&gt;
    &lt;li&gt;
      CSS Regions have also been &lt;a href=&quot;http://www.cnet.com/news/reversing-course-google-rejects-adobe-web-publishing-tech/&quot;&gt;dropped from Blink&lt;/a&gt;, so they currently don&#39;t work in Chrome.
    &lt;/li&gt;
    &lt;li&gt;
      Check the &lt;a href=&quot;http://caniuse.com/#feat=css-shapes&quot;&gt;current state of browser support for CSS Shapes&lt;/a&gt; out.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;CSS shapes can introduce a serious accessibility problem when not used wisely. It’s great to achieve all kinds of creative layouts with custom shapes, but the first and most important thing to keep in mind is that the content is there to be read, so a designer must think accessibility and readability first, then appealing layout second.&lt;/p&gt;
&lt;p&gt;To explain this better, let’s get into an example of when CSS shapes can cause a really bad reading experience. Although, to be fair, it’s not CSS shapes that does that, it’s the decision the designer makes, but you know what I mean.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;the-problem&quot;&gt;The Problem: Multiple CSS Shapes Making Text Unreadable&lt;/h3&gt; 
&lt;p&gt;A few days ago I &lt;a href=&quot;https://twitter.com/SaraSoueidan/status/407909116862943232&quot;&gt;tweeted&lt;/a&gt; about a &lt;a href=&quot;http://www.behance.net/gallery/Magazine-Feature-Magazine/9812813&quot;&gt;“fragmented” magazine layout&lt;/a&gt; I made using CSS Shapes and &lt;a href=&quot;http://www.w3.org/TR/css-masking/&quot;&gt;CSS Masks&lt;/a&gt;. The layout took literally less than 2 minutes to create after the mask images were ready (I made those using Photoshop). But after finishing the layout, I realized that, even though it looked quite interesting and creative, it was anything but readable.&lt;/p&gt;
&lt;p&gt;Here’s how the layout looked:&lt;/p&gt;
&lt;figure&gt;
   &lt;img src=&quot;https://sarasoueidan.com/assets/images/old-demo.png&quot; alt=&quot;Fragmented Magazine Layout Demo Screenshot&quot; /&gt;
   &lt;figcaption&gt;Fragmented Magazine Layout created with CSS Shapes and Masks&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The left part of the layout, where the text is flowing in 3 custom-shaped areas, is where the problem occurred.&lt;/p&gt;
&lt;p&gt;As with content masking, you can imagine your content as one layer and the mask as another; the content will be “painted” only where the mask is opaque, assuming that we’re working with an alpha mask which has only fully black and fully transparent areas. In this case, the fully black areas determine the areas where the content will be visible. And in terms of CSS shapes, the black areas determine the flow areas where our text will flow.&lt;/p&gt;
&lt;p&gt;This is the mask I used to create the 3 flow areas for the text:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://sarasoueidan.com/assets/images/fragments-text-mask.png&quot; alt=&quot;Fragmented Magazine Layout Mask Defining Flow Areas&quot; /&gt;
  &lt;figcaption&gt;The alpha channel mask used to define the flow areas for the text container&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now the problem occurs from the way the browser’s layout engine works to fill these areas with text. When the browser flows the text into the shapes it moves down an element line by line, and starts writing the text in the text’s flow areas, which, when you’re using a mask image, are the areas of the element covered by the black areas of the mask. For regular rectangular elements, i.e. those that don’t have any CSS shape defined on them, that is perfectly fine: just move down the element one line after another, and type the text on those lines. But when an element’s flow area changes, things can easily get messy.&lt;/p&gt;
&lt;p&gt;The browser starts with the first line on an element, and prints the text on that line &lt;em&gt;&lt;strong&gt;only where the line passes through a defined flow area (one of the black areas)&lt;/strong&gt;&lt;/em&gt;. So, what happens is that words will end up “scattered” on every line, and the lines divided into several “fragments”  depending on the number of flow areas passing through the line. A reader’s eye will have to “jump” from area to area to read the fragments that make up a line.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://sarasoueidan.com/assets/images/fragments-text-mask-shapes-flow.png&quot; alt=&quot;Content flow into defined flow areas with CSS Shapes&quot; /&gt;
  &lt;figcaption&gt;The horizontal &quot;fragmented&quot; flow of text inside multiple flow areas defined by CSS shapes&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As you can see in the image above, if you start reading a line, &lt;strong&gt;your eyes have to jump from area to area for every line&lt;/strong&gt;, which, after a few of lines, becomes impossible to do, at least for me.&lt;/p&gt;
&lt;p&gt;When I first started experimenting with CSS shapes I expected the text to flow in each of these custom-shaped areas the same way it does in CSS regions: I expected the browser to treat CSS Shapes’ flow areas the same way it treats CSS regions, but it does not. What we would normally want to do, is have the text flow in the individual areas, moving to one area after another one has been filled with content.&lt;/p&gt;
&lt;p&gt;One way to achieve this (filling areas one after another) is by using CSS regions to create any number of flow areas we want, and then giving each region a custom shape inside it using the &lt;code&gt;shape-inside&lt;/code&gt; property. So, for the above mask for example, which has 3 shapes inside it which define 3 flow areas, we will define each of these areas as a region, and then give each region a custom shape so that text flows inside it the way we want it to. This way, the browser will fill the first area (first region) with text, and then when it’s full, it will move into the second region after the first one’s been filled, and so on. This way, the text can be easily read inside each region (as long as you’re not using some crazy shape that will make text unreadable in all cases), as your eyes won’t have to jump between regions for every line.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://sarasoueidan.com/assets/images/fragments-text-mask-regions-flow.png&quot; alt=&quot;Content flow into flow areas defined with CSS Regions and shapes&quot; /&gt;
  &lt;figcaption&gt;Using CSS regions to define the three areas, text will fill each region before flowing into the next one, making reading a lot easier&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now let’s change the above demo I made by introducing CSS regions into it and see how that affects the readability of the layout.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;the-solution&quot;&gt;The Solution: Introducing CSS Regions Into The Layout&lt;/h3&gt; 
&lt;p&gt;What we’re going to do, is create three regions inside our text container, and then give each region a shape using &lt;code&gt;shape-inside&lt;/code&gt; so that the text flows inside it in a non-rectangular manner.&lt;/p&gt;
&lt;p&gt;The right side of the demo, which is a “fragmented” image, is created using CSS masks. A mask is applied to the element, which will “erase” parts of the image where the mask is transparent. We’ll get to this part at the end of this section.&lt;/p&gt;
&lt;p&gt;First, we’re going to go over the markup for the two “pages”. The page with a class name &lt;code&gt;.text&lt;/code&gt; is the left page with the text inside it. Inside this page, we’re going to define 3 regions, and a &lt;code&gt;.content&lt;/code&gt; container which will contain the text that we want to flow into these regions.&lt;/p&gt;
&lt;p&gt;So, the 3 regions are initially empty, and via CSS, we’re going to fill them with the text contained in the &lt;code&gt;.content&lt;/code&gt; element.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;magazine&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;page text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            Good design should be used solely as information that acknowledges its very difficult to leave room for the consumer with promises that part of design is only lousy design emphasises the intellectual side .... &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;            &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!--...--&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;region region-1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;region region-2&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;region region-3&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;page photo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;images/bg.jpg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Photo of a Sea&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our markup ready, we’ll start by defining some general styles before we get into the relevant CSS. We’ll be giving all the elements fixed dimensions; both CSS shapes and CSS regions require an element to have fixed dimensions to work.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.magazine&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 700px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1300px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .8em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Nunito&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sans-serif&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.page&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 710px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 700px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .9em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.photo&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;590px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.photo img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* .. */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.text&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* We&#39;re justifying the text so that it fills the entire line so that the shapes are more &quot;defined&quot; by their content */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; justify&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.region&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* must specify dimensions on regions otherwise they won&#39;t be filled with text */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 220px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 670px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; left&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .5em&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these styles set, we can now flow our text content into our regions using CSS’s &lt;code&gt;flow-from&lt;/code&gt; and &lt;code&gt;flow-into&lt;/code&gt; properties. I’ll be using the &lt;code&gt;-webkit-&lt;/code&gt; prefix as the demo will only work in webkit browsers at this time.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-flow-into&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pocket&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.region&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-flow-from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pocket&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s all you need to flow the text into the regions. The demo would look like the following screenshot. I’ve colored the regions’ background so that they are more visible. And for the time being, you can ignore the right side of the page with the fragmented image effect. Like I mentioned earlier, we’ll get to that by the end of this section.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://sarasoueidan.com/assets/images/fragmented-magazine-regions-show.jpg&quot; alt=&quot;Screenshot of Demo with Regions and Mask applied&quot; /&gt;
  &lt;figcaption&gt;Screenshot of the demo when text flows inside the regions before applying the shapes to them&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The text flows from one region to another starting from the left column to the right, which is exactly what we set out to achieve. Now what we want to do next is apply the same non-rectangular shapes to our 3 columns (regions) as those we saw in the mask used above, so that the end result looks like the demo we want to improve.&lt;/p&gt;
&lt;p&gt;Because we want to change the flow of text &lt;em&gt;inside&lt;/em&gt; the regions, we’re going to use CSS’s &lt;code&gt;shape-inside property to change the shape of the flow area inside the regions. There are two ways we could define our shapes: using an image with an alpha channel like we did in the initial demo before we introduced regions, or by creating these shapes using the &lt;code&gt;polygon()&lt;/code&gt; shape function.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Because each region will have only one flow area inside it which is a simple polygonal shape, we’re going to use the &lt;code&gt;polygon()&lt;/code&gt; function instead of creating 3 images for the 3 regions (the image previously used in the demo to define the 3 flow areas can be divided into 3 masks using Photoshop, each mask containing one of the shapes inside the image).&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.region-1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;80px 0px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 150px 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 190px 200px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 130px 400px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 200px 550px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 200px 670px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30px 670px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0px 100px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.region-2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;150px 0px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 210px 170px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 150px 300px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 220px 670px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50px 670px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 5px 430px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 40px 270px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0px 60px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.region-3&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;190px 0px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 210px 350px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 150px 610px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 140px 670px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0px 370px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 40px 160px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 10px 40px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now the text flows inside our regions in non-rectangular shapes:&lt;/p&gt;
&lt;figure&gt;
   &lt;img src=&quot;https://sarasoueidan.com/assets/images/fragmented-magazine-regions-shaped.jpg&quot; alt=&quot;Screenshot of Demo with Shapes applied to Regions&quot; /&gt;
   &lt;figcaption&gt;Screenshot of the demo when shapes are applied to the regions&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;With this result, it’s a lot easier to read the text than it was in the intial demo. Your eyes can move down a column and then move to the next once it’s done with the first.&lt;/p&gt;
&lt;p&gt;Nonetheless, it’s absolutely necessary that a designer always design shapes that don’t strain the eyes. There’s probably a good reason why rectangular reading areas are the most comfortable to read in, and when designers decide to think outside the box (pun intended), it’s important to remember not to compromise readability and sacrifice a good user experience for beautiful comps.&lt;/p&gt;
&lt;p&gt;With that said, this is how the demo looks:&lt;/p&gt;
&lt;figure&gt;
   &lt;img src=&quot;https://sarasoueidan.com/assets/images/css-regions-with-shapes-for-readability-header.png&quot; alt=&quot;Screenshot of the final demo&quot; /&gt;
   &lt;figcaption&gt;Screenshot of the final demo&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And this is how CSS regions can help create a fairly better reading experience when used with CSS shapes. It would be great if browsers filled the CSS shapes the same way it filled CSS regions, but because it’s not a simple task to just change the layout algorithm, we can always use CSS regions to get that result.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;regions-with-masks&quot;&gt;Creating The &quot;Fragmented&quot; Photo Effect with CSS Masks&lt;/h3&gt; 
&lt;p&gt;Last but not least, we’re going to use CSS masks to mask parts of the image in the &lt;code&gt;.photo&lt;/code&gt; page, to give it that “fragmented” effect. The mask used to create this effect on the image looks like so:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://sarasoueidan.com/assets/images/fragments-mask.png&quot; alt=&quot;Mask used to create the fragmented effect on the image&quot; /&gt;
  &lt;figcaption&gt;Mask with alpha channel used to create the &quot;fragmented&quot; effect on the image&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The above mask is an image with an alpha channel, where the opaque areas define where the content will be visible, and the transparent areas are the areas where the content will be “erased”. You can notice that it’s obviously a messy mask :P because that’s what happens when I try to “draw” with a mouse! But then again, it kind of emphasizes that “torn” and “fragmented” effect on the image, which is nice. =)&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.photo img&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* mask applied to the image. At this time, only webkit browsers support CSS masks with a webkit prefix */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;-webkit-mask-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;../images/fragments-mask.png&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt; 
&lt;p&gt;CSS Shapes will be one of the best things to happen to design on the web, but as we’ve always learned: with great power comes great repsonsibility. It’s &lt;a href=&quot;http://blogs.adobe.com/webplatform/2013/12/04/css-shapes-in-last-call/&quot;&gt;estimated&lt;/a&gt; that in a year from now many  browsers will have implemented CSS shapes, so it’s great to start experimenting with them from now. The more you experiment the more you can help find bugs to fix them before all browsers implement them.&lt;/p&gt;
&lt;p&gt;And finally, I hope you enjoyed reading this article and found it useful. Thank you for reading.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Techniques For Creating Textured Text</title>
    <link href="https://sarasoueidan.com/blog/textured-text-techniques/"/>
    <updated>2013-12-02T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/textured-text-techniques/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	For too long, we&#39;ve resorted to graphics editors to create &lt;em&gt;images&lt;/em&gt; of text that has nice effects such as creative fills or that blends with its background in a nice subtle way. We used those images as a replacement for text on our pages, which made that text unaccessible and un-selectable.. But with all the advances in web design today, we can now create textured text effects using CSS, using SVG, and using HTML5 Canvas. This article introduces and shows you how to do that using all of those techniques.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Techniques For Responsive Typography</title>
    <link href="https://sarasoueidan.com/blog/responsive-typography-techniques/"/>
    <updated>2013-11-11T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/responsive-typography-techniques/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	Text is the most important part of a website. Did you know that are several ways to make text responsive? Be it big headlines or body copy, the article will cover all those techniques, serving as an ultimate reference for making text responsive. We will cover accessibility, media queries, viewport units, and much more.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>CSS Overlay Techniques</title>
    <link href="https://sarasoueidan.com/blog/css-overlay-techniques/"/>
    <updated>2013-11-07T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-overlay-techniques/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	Overlays can sometimes be annoying, but also undoubtedly have their useful use cases. There are different approaches to creating overlays, some of them work better than others, and some of them come with gotchas that you need to be aware of, including performance implications. In HTML5, we also get a native way to create modals with less hassle and less code. In this article, we will cover all of that.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Creating Non-Rectangular Layouts With CSS Shapes</title>
    <link href="https://sarasoueidan.com/blog/css-shapes/"/>
    <updated>2013-11-05T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/css-shapes/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;Today we can create all kinds of &lt;a href=&quot;https://css-tricks.com/examples/ShapesOfCSS/&quot;&gt;shapes with CSS&lt;/a&gt; using CSS transforms, but all these shapes do not affect the flow of the content inside or around them. That is, if you create a triangle or a trapezoid with CSS, for example, the shape created does not define or affect the way the text inside it flows, or the way inline text around it does.&lt;/p&gt;
&lt;p&gt;With the introduction of CSS Shapes into the web, wrapping content in custom non-rectangular shapes, and recreating print designs and layouts on the web becomes a piece of cake!&lt;/p&gt;
&lt;p&gt;In this article we&#39;re going to go over the basics of declaring shapes, and creating some simple layouts using these new CSS technologies. When more CSS Shapes features are implemented, more complex and awesome layouts will be possible, but even with what we have at hand now, &lt;a href=&quot;https://blogs.adobe.com/webplatform/2013/10/23/css-shapes-visual-storytelling/&quot;&gt;some interesting and very creative layouts&lt;/a&gt; can be created with a little extra experimentation.&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;The CSS technologies we’ll be covering in this article may not work in your browser. If you want to see the working live demos you need to make sure you’re viewing them in a browser that supports these technologies. Check the &lt;a href=&quot;https://caniuse.com/#feat=css-shapes&quot;&gt;current state of browser support for CSS Shapes&lt;/a&gt; out. You &lt;em&gt;don&#39;t need&lt;/em&gt; a supporting browser to understand the features and demos, though. I&#39;ve included screenshots of the demos so you can see how the final result looks like&lt;/strong&gt;.&lt;/p&gt;
&lt;p class=&quot;note warning&quot;&gt;
Most of this article&#39;s demos use the &lt;code&gt;shape-inside&lt;/code&gt; property, which has been temporarily &lt;a href=&quot;https://bugs.webkit.org/show_bug.cgi?id=130698&quot;&gt;removed from Webkit&lt;/a&gt; and &lt;a href=&quot;https://codereview.chromium.org/209443007/&quot;&gt;Blink&lt;/a&gt;. So, for the time being, this article will only show screenshots of how the demos work when &lt;code&gt;shape-inside&lt;/code&gt; is implemented again.
&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;declaring-shapes&quot;&gt;Declaring Shapes&lt;/h3&gt; 
&lt;p&gt;All HTML elements have a rectangular box model which governs the flow of content inside and around it. In order to give an element a custom non-rectangular shape, the &lt;code&gt;shape-inside&lt;/code&gt; and &lt;code&gt;shape-outside&lt;/code&gt; properties are used. At the time of writing of this article, the &lt;code&gt;shape-outside&lt;/code&gt; property can be applied to floating elements only, and the &lt;code&gt;shape-inside&lt;/code&gt; property isn&#39;t completely implemented, so you may still find bugs when u use it. The shape-* properties can also only be applied to block-level elements. Non-block-level elements should be forced to block if you want to use a shape property on them.&lt;/p&gt;
&lt;p&gt;Shape-* properties take one of three values: auto, a basic shape, or an image URI. If the value is set to auto, the element’s float area uses the margin box as normal. (If you’re not familiar with the &lt;a href=&quot;https://www.w3.org/TR/2007/WD-css3-box-20070809/&quot;&gt;CSS box model&lt;/a&gt;, make sure you read up on it because you should know how it works). &lt;/p&gt;
&lt;p&gt;If the value is set to a shape function, then the shape is computed based on the values of one of ‘&lt;code&gt;inset&lt;/code&gt;’, ‘&lt;code&gt;circle&lt;/code&gt;’, ‘&lt;code&gt;ellipse&lt;/code&gt;’ or ‘&lt;code&gt;polygon&lt;/code&gt;’. You can learn more about each of these functions in &lt;a href=&quot;https://blogs.adobe.com/webplatform/2014/02/11/new-css-shapes-syntax/&quot;&gt;this article&lt;/a&gt; by the Adobe Platform team.&lt;/p&gt;
&lt;p&gt; And finally, if the value is set to an image URI, the browser will use the image to extract and compute the shape based on the image’s alpha channel. The shape is computed to be the path that encloses the area where the opacity of the specified image is greater than the &lt;code&gt;shape-image-threshold&lt;/code&gt; value. If the &lt;code&gt;shape-image-threshold&lt;/code&gt; is not specified, the initial value to be considered is 0.5. The image should be CORS-same-origin, otherwise, it won&#39;t work, and the default value &lt;code&gt;auto&lt;/code&gt; will be the value of the computed shape.&lt;/p&gt;
&lt;p&gt;Shapes defined using the &lt;code&gt;shape-outside&lt;/code&gt; property define the &lt;em&gt;exclusion area&lt;/em&gt; on an element, while those defined using the &lt;code&gt;shape-inside&lt;/code&gt; property define the &lt;em&gt;float area&lt;/em&gt; of an element. We&#39;ll learn what each of these means in the examples below.&lt;/p&gt;
&lt;p&gt;The shapes defined by the shape-* properties can be modified by using the &lt;code&gt;shape-margin&lt;/code&gt; and &lt;code&gt;shape-padding&lt;/code&gt; properties. The margin and padding shape properties are self-explanatory.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;establishing-a-coordinate-system&quot;&gt;Establishing a coordinate system on an element&lt;/h3&gt; 
&lt;p&gt;For the CSS shape declared to actually be applied on an element, we need to first start with establishing a coordinate system which we’ll be using to draw the shape.&lt;/p&gt;
&lt;p&gt;A coordinate system is necessary because the shapes you declare will be defined by a set of points (and radii if you’re drawing circles or ellipses for example), and these points have x and y coordinates which will be placed on this coordinate system.&lt;/p&gt;
&lt;p&gt;The shape-* properties use the content box of the element they’re applied to for their coordinate system, so in order to make them work, &lt;strong&gt;you need to specify a fixed width and height for the element&lt;/strong&gt; which defines its bounding box, which in turn will be used to establish the coordinate system for the shapes you draw. &lt;strong&gt;If no explicit width and height are specified, the shape-* properties don’t work&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The origin of the coordinate system defined on the element&#39;s bounding box is positioned at the top left corner.&lt;/p&gt;
&lt;p&gt;So, to declare a shape an element you have to start with:&lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Specifying the dimensions of the element getting the shape (remember: the element should be floated when using &lt;code&gt;shape-outside&lt;/code&gt; on it).&lt;/li&gt; 
    &lt;li&gt;Declaring the shape on that element using the shape-* properties.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;applying-a-custom-shape&quot;&gt;Applying a background to a custom shape&lt;/h3&gt; 
&lt;blockquote class=&quot;quotes-left&quot;&gt;
    &lt;p&gt;While the boundaries used for wrapping inline flow content outside a float can be defined using shapes, &lt;strong&gt;the actual box model does not change&lt;/strong&gt;. If the element has specified margins, borders or padding they will be computed and rendered according to the &lt;a href=&quot;https://www.w3.org/TR/css-shapes/#CSS3BOX&quot;&gt;CSS3BOX&lt;/a&gt; module. 
    &lt;cite&gt;&amp;#8212;&lt;a href=&quot;https://www.w3.org/TR/css-shapes/&quot;&gt;W3C CSS Shapes Module Level 1&lt;/a&gt;&lt;/cite&gt;
    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In other words, the shape you define on an element using shape-* properties &lt;em&gt;only&lt;/em&gt; affects the element’s float area, i.e. the flow of the content inside/outside this element, but all the element’s other properties won’t be affected.&lt;/p&gt;
&lt;p&gt;For example, suppose you only want to draw a circular shape and have content float on its side like the shape in the image below, you’d first have to declare the circular shape on the element (again, remember to float the element and give it a height and width). Then, say you want to apply a background color to the circular shape to look like the one in the image..&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/shape-background.png&quot; alt=&quot;Background applied to CSS shape&quot; /&gt;
    &lt;figcaption&gt;Background applied to a custom declared shape&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You’d be tempted to just add a background color to the containing element and then end up with the above result (that’s what I did the first time), but doing that won’t do the job. The reason for that is that all properties of the element, other than the flow of content outside it, won’t be affected by the shape you defined inside it, and they will be rendered normally according to the element’s box model (its rectangular shape), as we’ve seen in the spec. So if you apply a background color to it, you’ll end up with this.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/box-model-background.png&quot; alt=&quot;Background applied to rectangular box model&quot; /&gt;
    &lt;figcaption&gt;Background applied to the element&#39;s rectangular box shape&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So, &lt;em&gt;how can we apply the color to the shape only and not the whole element?&lt;/em&gt; This is where the &lt;code&gt;clip-path&lt;/code&gt; property from &lt;a href=&quot;https://www.w3.org/TR/2014/WD-css-masking-1-20140213/&quot;&gt;the CSS Masking specification&lt;/a&gt; can help.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;clip-path&lt;/code&gt; property will be used to &lt;em&gt;clip&lt;/em&gt; parts of the element that we don’t need and keep only the parts inside the shape we defined. That obviously means that we’re not actually applying the color &lt;em&gt;to&lt;/em&gt; the shape, we’re just &lt;em&gt;trimming&lt;/em&gt; the element and leaving only the shape intact. With this, you’ll end up with a floating circle wrapping text outside it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;How, exactly? what value does the clip-path property get to do this?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The user coordinate system for the shapes defined by the &lt;code&gt;clip-path&lt;/code&gt; property is established using the bounding box of the element to which the clipping path is applied, so the coordinate system is the same one as that of the shape-* properties.&lt;/p&gt;
&lt;p&gt;Because of this, we can use the same shape defined in the shape-* property for the clip path, which will cut out, or &lt;em&gt;clip&lt;/em&gt;, everything inside the containing element that’s outside the boundaries of the shape, and we’ll end up with a custom shape with a background.&lt;/p&gt;
&lt;p&gt;You can test this concept live in &lt;a href=&quot;https://codepen.io/SaraSoueidan/pen/ad12e1280e4b1c481faa3b82bd9a3263&quot;&gt;this pen&lt;/a&gt;, just make sure you test it in a supporting browser.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;reminder&quot;&gt;Quick Reminder&lt;/h3&gt; 
&lt;p&gt;At the time of writing of this article, the &lt;code&gt;shape-outside&lt;/code&gt; property only works on floats, and both &lt;code&gt;shape-outside&lt;/code&gt; and &lt;code&gt;shape-inside&lt;/code&gt; properties are applied only to block-level elements, or inline elements &lt;strong&gt;forced to block&lt;/strong&gt;. A shape defined on a float will cause inline content to wrap around the defined shape instead of the float&#39;s bounding box. Future levels of CSS Shapes will allow use of shapes on elements other than floats, and when that happens we’ll be able to wrap content on both sides of a shape (as in the image below). So for now, we can only float an element and have content flow  on either side of it.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://dev.w3.org/csswg/css-shapes-2/images/shapes_CSS2.1_MBP.png&quot; alt=&quot;Example rendering of circle shape and box model.&quot; /&gt;
    &lt;figcaption&gt;Flowing content on both sides of a CSS shape&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;You could also fake wrapping content on both sides using the &lt;a href=&quot;https://betravis.github.io/shape-tools/exclusion-punch/&quot;&gt;Exclusion Punch plugin&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/bear_travis&quot;&gt;Bear Travis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let’s get our hands dirty drawing some shapes and creating some fun layouts!&lt;/p&gt;
&lt;p&gt;Each of the following examples will introduce a new tip/idea/technique that are used to define and use CSS shapes and exclusions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can view the live demo for each example by clicking on the demo&#39;s screenshot.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;example-1&quot;&gt;Example #1: Floating text around a custom shape with &lt;code&gt;shape-outside&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;We’ll start with a simple example. In this example we’re going to define a custom shape and have content flow on its side. The end result will look like the image below:&lt;/p&gt;
&lt;a href=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-1/index.html&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-1/images/demo-screenshot.jpg&quot; alt=&quot;Screenshot of Demo #1&quot; /&gt;
        &lt;figcaption&gt;Screenshot of Demo #1. Click on the screenshot to see the working demo.&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/a&gt;
&lt;p&gt;In the demo we have a container which contains two elements: a &lt;code&gt;.content&lt;/code&gt; container with text on the left, and another element with a class&lt;code&gt;.shaped&lt;/code&gt; floated to the right, which will get the custom shape and have the text flow on its left side.&lt;/p&gt;
&lt;p&gt;The heading in the &lt;code&gt;.content&lt;/code&gt; area is also getting a similar treatment to the one we&#39;re giving the floated div on the right, so I&#39;ll skip its explanation and only talk about what we&#39;re doing on the &lt;code&gt;.shaped&lt;/code&gt; area on the right.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;shaped&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;         &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;La&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; Tour &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;Eiffel&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;         &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Lorem Ipsum......&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will first start by giving the floated &lt;code&gt;div&lt;/code&gt; on the right a specific height and width to establish a coordinate system. We’ll set its height to be the same as its container, which for this demo I’ve set to be the same height as the viewport, using CSS’s &lt;code&gt;vh&lt;/code&gt; unit.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vh&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.shaped&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;100vh&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;40vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; black &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;../images/eiffel.jpg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; center top no-repeat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;cover&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that the coordinate system is ready, we’re going to draw the shape, to define the float and exclusion areas of the element. There are two ways to go about declaring a shape for this demo:&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;using-polygon&quot;&gt;Using &lt;code&gt;polygon()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;For the first method, we’ll be using the polygon() function. This function takes in a set of points that form the polygon, each point defined by x and y coordinates. We&#39;re going to define a very simple polygonal shape, with 4 vertices, as shown in the image below (blue and orange discs):&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-1/images/demo-shape.jpg&quot; alt=&quot;Vertices of the Polygon&quot; /&gt;
    &lt;figcaption&gt;Screenshot showing the vertices making up the polygonal shape&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The coordinates of the points can have either specific values (px or em), or percentage values. In this example we&#39;re going to provide percentage values for the vertices visible in the above screenshot. Now all we have to do is just declare this shape on the floated element so that the text flows on its side.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.shaped&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/*...*/&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-outside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100% 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100% 100%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30% 100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s it! the text can now flow in the &lt;em&gt;float area&lt;/em&gt; of the element, defined by the custom shape we declared on it.&lt;/p&gt;
&lt;p&gt;You can also see that I&#39;ve added a margin to the shape, to push the content away from the shape a little and create a gap.&lt;/p&gt;
&lt;p&gt;But we have one more thing to add here. Like I mentioned in a previous section, the background of the floated element is applied to its original rectangular shape, not just to the shape we declared on it, because the background property is not affected by the shape declared on the element. So far, the demo looks like this:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-1/images/demo-screenshot-incomplete.jpg&quot; alt=&quot;Screenshot of background applied to rectangular shape of the element&quot; /&gt;
    &lt;figcaption&gt;Screenshot showing the background applied to the element covering its rectangular shape&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So in order to clip out the excess areas that we don&#39;t need, we&#39;re going to use the &lt;code&gt;clip-path&lt;/code&gt; property, and give it the same value/shape that we gave to the &lt;code&gt;shape-outside&lt;/code&gt; property above. So we add this rule to the rule set:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.shaped&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/*...*/&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;clip-path&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100% 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100% 100%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 30% 100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we&#39;re done! Simple, right? &lt;/p&gt;
&lt;p&gt;The page title on the left gets the same treatment as the &lt;code&gt;.floated&lt;/code&gt; &lt;code&gt;div&lt;/code&gt; on the right. The heading is floated inside its container &lt;code&gt;.content&lt;/code&gt;, it is given a specific height and width to establish a coordinate system, and then a shape is declared on it using the &lt;code&gt;shape-outside&lt;/code&gt; property just like we did on the &lt;code&gt;.floated&lt;/code&gt; element.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;using-an-image-uri&quot;&gt;Using an image URI&lt;/h4&gt;
&lt;p&gt;Another way we could define the shape on our element is by using an image with an alpha channel, that is, any image with transparent areas.&lt;/p&gt;
&lt;p&gt;For our example here, instead of using the polygon() function to define the shape, we’ll give the &lt;code&gt;shape-outside&lt;/code&gt; property an image URI, and the browser will extract the shape from the image, and use it.&lt;/p&gt;
&lt;p&gt;The image that would define the exclusion area for this example is the one shown below. You can see that the image shows the same shape defined by the polygon() points in the previous method.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-1/images/mask.png&quot; alt=&quot;Image with Alpha Channel showing the polygonal shape&quot; /&gt;
    &lt;figcaption&gt;Image with Alpha Channel whose URI will be used to extract and compute the value of the shape&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When you’re using an image with alpha channels to define a shape &lt;strong&gt;for the shape-outside property&lt;/strong&gt;, the &lt;em&gt;transparent area&lt;/em&gt; of the image will define the area where the inline text flows, this is the area called the &lt;em&gt;float area&lt;/em&gt; of the element. The black portion defines the exclusion area of the element.&lt;/p&gt;
&lt;p&gt;To use this image we write the following:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.shaped&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/*...*/&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-outside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;../images/mm.png&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-image-threshold&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.5&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* this property is used to set the threshold used for extracting a shape from an image. 0.0 = fully transparent and 1.0 = fully opaque */&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each of the two methods mentioned has its advantages. You might want to use an image URI for complex shapes that may be cumbersome to define the points for manually, in this case creating an alpha channel image in Photoshop would be much easier and faster than manually adding the points.&lt;/p&gt;
&lt;p&gt;Another situation where you might want to use an image URI instead of a shape function is when you have multiple float or exclusion areas inside an element, in that case using this method is necessary because you can’t, for now, declare multiple shapes on an element, but if the image contains multiple areas, the browser will extract these areas from the image and use them. Pretty neat, right? :) we’ll see an example of this in the last demo.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;example-2&quot;&gt;Exmaple #2: wrapping/flowing text inside a custom shape with &lt;code&gt;shape-inside&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;For the second example we’ll create a simple demo where the end result will look like this:&lt;/p&gt;
&lt;a href=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-2/index.html&quot; class=&quot;image-link&quot;&gt;
    &lt;figure&gt;
        &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-2/images/demo-screenshot.png&quot; alt=&quot;Screenshot of demo #2&quot; /&gt;
        &lt;figcaption&gt;Screenshot of demo #2&lt;/figcaption&gt;
    &lt;/figure&gt;
&lt;/a&gt;
&lt;p&gt;The goal of this example is to demonstrate the &lt;code&gt;shape-inside&lt;/code&gt; property used to float text inside a non-rectangular shape. We have a container element with some placeholder text inside it, and we applied the photo as a background image to this container.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;            &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;...&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Corn Bread&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see from the demo screenshot above, the text is wrapped inside a circular shape at the top. So, we know that we’re going to have to declare a circle on our container. Now, like in the previous example, there are two ways we can do that..&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;using-circle&quot;&gt;Using &lt;code&gt;circle()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Using the &lt;code&gt;circle()&lt;/code&gt; function we&#39;re going to define a circle and position it on our element.&lt;/p&gt;
&lt;p&gt;The image below shows the coordinate system established on the element, and the position of the circle inside the element. We’re making sure the circle is positioned on top of the pan image inside the photo we’re using as a background, so that it appears as if the text is contained inside that pan. On the image the position of the center of the circle with respect to the coordinate system established on the element is also visible.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-2/images/demo-shape.png&quot; alt=&quot;Coordinate system and shape defined on the container&quot; /&gt;
    &lt;figcaption&gt;Coordinate system and shape defined on the container&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Because we want to wrap text &lt;em&gt;inside&lt;/em&gt; a custom shape, and not flow it around it, we’re going to use the &lt;code&gt;shape-inside&lt;/code&gt; property on the element containing this text. When you&#39;re applying the &lt;code&gt; shape-inside&lt;/code&gt; property to an element, you have to remember that this element would have the text content inside it, unlike the previous example, where the content was outside the element we declared the shape on.&lt;/p&gt;
&lt;p&gt; We’ll specify the coordinates of the center of the circle and we&#39;ll set the value of its radius, and apply those to the container:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;600px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;900px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0 50px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;white&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;13px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;../images/pan.jpg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; top left no-repeat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;100% 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/*declare shape using the shape function circle()*/&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;160px at 400px 60px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, unless you&#39;re attempting to create a perfect circular shape, you can also define the shape using &lt;code&gt;polygon()&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Using an image URI&lt;/h4&gt;
&lt;p&gt;We can also use the URI of an image with an alpha channel to extract the shape of the circle from it. The image would look like the following: &lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-2/images/mask.png&quot; alt=&quot;Image with Alpha Channel showing the circular shape
              &quot; /&gt;
    &lt;figcaption&gt;Image with Alpha Channel defining the circular shape&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt; It’s important to note here that when you’re using an image with an alpha channel to define a shape &lt;strong&gt;for the &lt;code&gt;shape-inside&lt;/code&gt; property&lt;/strong&gt;, the &lt;em&gt;black (or opaque) area&lt;/em&gt; of the image will define the area where the text flows. In the previous example, the opaque area defined the &lt;em&gt;exclusion area&lt;/em&gt; of the element we applied the shape to, i.e the area where &lt;strong&gt;no&lt;/strong&gt; text flows.&lt;/p&gt;
&lt;p&gt;So declare the shape using an image URI instead of the shape function &lt;code&gt;circle()&lt;/code&gt;, you&#39;ll have to set the value of the &lt;code&gt;shape-inside&lt;/code&gt; property to point to the URI of the image:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/*...*/&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mask.png&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; top left&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;example-3&quot;&gt;Example #3 : wrapping/flowing text inside a custom shape with &lt;code&gt;shape-inside&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In this example we&#39;re also going to declare a polygonal shape on a container and have its content flow inside this shape. The end result will look like the image below:&lt;/p&gt;
&lt;!-- &lt;a href=&quot;../../demos/css-shapes-layouts/demo-3/index.html&quot; class=&quot;image-link&quot;&gt; --&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-3/images/demo-screenshot.png&quot; alt=&quot;Screenshot of Demo #3&quot; /&gt;
    &lt;figcaption&gt;Screenshot of Demo #3&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;!-- &lt;/a&gt; --&gt;
&lt;p&gt;Here, too, we can use either a shape function or an image URI to declare the shape on the element.&lt;/p&gt;
&lt;p&gt;The shape declared on this container is clearly a &quot;random&quot; polygonal shape, not a geometric shape that we could declare using a shape function like &lt;code&gt;circle()&lt;/code&gt;, &lt;code&gt;ellipse()&lt;/code&gt;, or &lt;code&gt;inset()&lt;/code&gt;, so we&#39;re going to use the &lt;code&gt;polygon()&lt;/code&gt; function to declare it.&lt;/p&gt;
&lt;p&gt;The shape defined by a set of points is visible in the image below.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-3/images/demo-shape.png&quot; alt=&quot;The polygonal shape defined by a set of points&quot; /&gt;
    &lt;figcaption&gt;The polygonal shape defined by a set of points&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Because there&#39;s a fairly large number of points making this shape up, it would be cumbersome to calculate the coordinates of these points, so it would be helpful if there was a &lt;strong&gt; visual&lt;/strong&gt; tool available to help us &lt;em&gt;plot&lt;/em&gt; these points on the image, right? Well, there is a tool created by Adobe&#39;s &lt;a href=&quot;https://twitter.com/bear_travis&quot;&gt;Bear Travis&lt;/a&gt;, which is actually a collection of tools that can help you when working with CSS shapes. Make sure you &lt;a href=&quot;https://betravis.github.io/shape-tools&quot;&gt; check the Shape Tools out&lt;/a&gt; because they are very valuable.&lt;/p&gt;
&lt;p&gt;One of the Shape tools mentioned is called &lt;a href=&quot;https://betravis.github.io/shape-tools/polygon-drawing/&quot;&gt;Poly Draw&lt;/a&gt;, and it allows you to manually &quot;draw&quot; a shape, a polygon in particular, and then it generates the coordinates of the shape for you to copy and paste into your CSS to declare the shape on your element.&lt;/p&gt;
&lt;p&gt;I have used the Poly Draw tool to draw the above shape on the image. Now, the tool does not take an image and sets it as a background for the element you define the shape on, so I had to git clone the repo of the tool and fiddle with the tool’s code a bit in the dev tools, and I applied the image to it and plotted the points on it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/razvancaliman&quot;&gt;Razvan Caliman&lt;/a&gt; suggested this idea when I asked him about the availability of a tool that allows us to define shapes on top of images right in the browser, just like the one he showed and used in &lt;a href=&quot;https://www.youtube.com/watch?v=zsLwZhTSuQk&amp;list=PL8rji95IPUUDu3puqqxWMKFXf-NQ4z7WE&amp;index=11&quot;&gt;his talk at this year&#39;s CSS Conf EU&lt;/a&gt;. If you haven&#39;t watched his talk yet, make sure you do. The tool he used will some day, soon I hope, be open-sourced by Adobe, and then it&#39;ll be an indispensible tool when working with CSS shapes. But until then, you could do with the Poly Draw tool.&lt;/p&gt;
&lt;p&gt;After drawing the shape with the Poly Draw tool, all you have to do is declare the resulting shape on your element and you&#39;re good to go.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;445px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;670px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;30px auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/*shape generated by the Poly Draw tool*/&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-outside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;170.67px 291.00px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;126.23px 347.56px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;139.79px 417.11px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;208.92px 466.22px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;302.50px 482.97px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;343.67px 474.47px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;446.33px 452.00px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;443.63px 246.82px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;389.92px 245.63px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;336.50px 235.26px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;299.67px 196.53px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;259.33px 209.53px&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;217.00px 254.76px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could also define the shape above using an image with an alpha channel. The image below shows what that image would look like. Again, the black areas define the float area when using &lt;code&gt;shape-inside&lt;/code&gt;, and they&#39;re where the text is going to flow.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-3/images/mask.png&quot; alt=&quot;Image with alpha channel defining the shape for demo #2&quot; /&gt;
     &lt;figcaption&gt;Image with alpha channel defining the shape for demo #2&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;If you want to go with the image URI instead of the shape function, youd replace the above shape outside value with the following:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/*...*/&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mask.png&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; top left&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;example-4&quot;&gt;Example #4 : Multiple float areas with &lt;code&gt;shape-inside&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In this example we&#39;re going to create multiple float areas inside an element to wrap content inside. The result of this demo is shown in the following image:&lt;/p&gt;
&lt;!-- &lt;a href=&quot;../../demos/css-shapes-layouts/demo-4/index.html&quot; class=&quot;image-link&quot;&gt; --&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-4/images/demo-screenshot.jpg&quot; alt=&quot;Screenshot of Demo #3&quot; /&gt;
    &lt;figcaption&gt;Screenshot of Demo #4&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;!-- &lt;/a&gt; --&gt;
&lt;p&gt;We have a &lt;code&gt;div&lt;/code&gt; with a background image, and we want the text inside this &lt;code&gt;div&lt;/code&gt; to flow inside specific areas inside it, all of which have custom shapes.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Rosemary Sandwich&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;...&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, since we can&#39;t declare multiple shapes on an element, we&#39;re going to use an image with an alpha channel. An image can contain as many shapes and areas as you want, so it&#39;s perfect to define multiple shapes on an element, and the browser will extract all the shapes from this image and use them on the element.&lt;/p&gt;
&lt;p&gt;We&#39;ll use the following image to define the shapes. The black areas in the image will define the float area of for the content inside the &lt;code&gt;.container&lt;/code&gt; where the text will flow.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-4/images/mask.png&quot; alt=&quot;Image with Alpha Channel defining shapes for demo #3&quot; /&gt;
    &lt;figcaption&gt;Image with Alpha Channel defining shapes for demo #3&lt;/figcaption&gt;
&lt;/figure&gt; 
&lt;p&gt;We&#39;ll use the URI of this image as a value for the &lt;code&gt;shape-inside&lt;/code&gt; property that we&#39;re going to declare on the &lt;code&gt;.container&lt;/code&gt;, all the while remembering to set height and width values for the &lt;code&gt;div&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.container&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;556px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;835px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0 50px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;white&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;../images/bread.jpg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; top left no-repeat&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100% 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;shape-inside&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mask.png&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; top left&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;13px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we&#39;re done. The browser does the rest of the work for us by extracting the shapes from the image we gave it, and our text flows nicely inside those areas!&lt;/p&gt;
&lt;p&gt;Using an image to define the shapes is the logical way to go when you have separate areas that are not connected to eachother, i.e that don&#39;t form a singe polygonal shape. For this demo, we could have used the &lt;code&gt;polygon()&lt;/code&gt; function to define the shape, by defining a polygon that looks like the one in the image below:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/demos/css-shapes-layouts/demo-4/images/demo-shape.png&quot; alt=&quot;Image of shape defined using polygon()&quot; /&gt;
    &lt;figcaption&gt;Image representing the points used to define a single polygon&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;But, as you can notice, this isn&#39;t the best way to do this, I just added this to show the difference between using an image and defining the shape with &lt;code&gt;polygon()&lt;/code&gt;, and to show that sometimes the best practice or the one that seems more proper and makes more sense is to use an image, even if you can use a shape function to define your shapes.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;shapes-with-regions-and-flexbox&quot;&gt;Combining CSS Shapes with Regions and Flexbox to create magazine layouts&lt;/h3&gt;
&lt;p&gt;Typical print magazines usually combine multi-column text layouts with non-rectangular shapes to create creative and appealing designs. The columns are usually equal in height unless needed otherwise.&lt;/p&gt;
&lt;p&gt;Once future CSS Shapes features are implemented, and wrapping content on both sides of a shape is possible, creating print-like digital magazine designs becomes very much possible when combining Shapes and Exclusions with Regions and Flexbox.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/multicolumn-shapes.png&quot; alt=&quot;Multi-column layouts with shapes&quot; /&gt;
    &lt;figcaption&gt; Travel Magazine by Bartosz Kwiecień on Behance. Layout like this could be replicated using future CSS Shapes technologies and Regions (&lt;a href=&quot;https://www.behance.net/gallery/Travel-Magazine/2159303&quot;&gt;&lt;/a&gt;) &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Flexbox provides us with the equal-height columns, Regions allows us to flow text into different areas on the page and separate the page content from its layout, and Shapes and Exclusions will allow us to add that final creative touch that takes our magazine layouts to the next level.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h3&gt;
&lt;p&gt;I don’t think I’ve been excited about a new CSS feature as I am about CSS shapes and exclusions. The power, flexibility, and creativity that these features combined regions and flexbox can provide is just fantastic!&lt;/p&gt;
&lt;p&gt;Widespread support for CSS Shapes should be coming soon, as the web platform team at Adobe is constantly working on improving and implementing these features, and providing tools to make working with them easier.&lt;/p&gt;
&lt;p&gt;The future of web layout is looking brighter and more captivating every day. It&#39;s a wonderful time to be a web developer!&lt;/p&gt;
&lt;p&gt;I hope this article helped introduce you more to the technical part of getting started with CSS Shapes. This will not be my last article on this topic. Combining CSS Shapes with other cutting edge CSS technologies like Regions opens the door to a new world of creativity, and lots of new tutorials! ;)&lt;/p&gt;
&lt;p&gt;You should subscribe to my blog&#39;s &lt;a href=&quot;https://feeds.feedburner.com/sarasoueidan&quot;&gt;RSS feed&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/SaraSoueidan&quot;&gt;follow me on Twitter&lt;/a&gt; to stay in the loop for upcoming new articles.&lt;/p&gt;
&lt;p&gt;Thank you for reading!&lt;/p&gt;
&lt;h4&gt;Resources &amp;amp; Further Learning&lt;/h4&gt;
&lt;ul class=&quot;resources&quot;&gt;
    &lt;li&gt;Bear Travis’s &lt;a href=&quot;https://betravis.github.io/shape-tools/&quot;&gt;CSS Shape tools&lt;/a&gt; &lt;/li&gt;
    &lt;li&gt;W3C&#39;s &lt;a href=&quot;https://www.w3.org/TR/css-shapes/&quot;&gt;CSS Shapes Working Draft&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;CSSWG Wiki on &lt;a href=&quot;https://wiki.csswg.org/ideas/css3-exclusions-use-cases&quot;&gt;CSS Shapes and Exclusions use cases examples&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Adobe’s &lt;a href=&quot;https://html.adobe.com/webplatform/layout/shapes/browser-support/&quot;&gt;CSS shapes support matrix&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Adobe Web Platform&#39;s &lt;a href=&quot;https://html.adobe.com/webplatform/layout/shapes/&quot;&gt;resources for CSS Layout&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/betravis/web-layout-lab&quot;&gt;This project&lt;/a&gt; by Bear Travis contains a series of exercises demonstrating new web platform layout features including an combining CSS Flexbox, Grid, Regions, Shapes, and Exclusions.&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://galjot.si/css-exclusions&quot;&gt;CSS Exculsions article&lt;/a&gt; by&lt;a href=&quot;https://galjot.si/&quot;&gt; Robert Sedovše&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This article wouldn’t have been possible without the great help from &lt;a href=&quot;https://razvancaliman.com/&quot;&gt;Razvan Caliman&lt;/a&gt;, so a big thanks goes to him.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Navicon Transformicons: Animated Navigation Icons with CSS Transforms</title>
    <link href="https://sarasoueidan.com/blog/navicon-transformicons/"/>
    <updated>2013-10-20T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/navicon-transformicons/</id>
    <content type="html">&lt;p class=&quot;deck note&quot;&gt;The following is a collaboration post between &lt;a href=&quot;http://bennettfeely.com/&quot;&gt;Bennett Feely&lt;/a&gt; and I. After seeing Bennett&#39;s impressive animated navigation icon transformations (or &quot;Navicon Transformicons&quot;) &lt;a href=&quot;http://codepen.io/bennettfeely/pen/twbyA&quot;&gt;pens&lt;/a&gt; &lt;a href=&quot;http://codepen.io/bennettfeely/pen/eClzu&quot;&gt;on Codepen&lt;/a&gt;, I asked him if he would like to write a tutorial on how he did them as a guest post on my blog. He kindly approved. And as he doesn&#39;t have a lot of free time to work the article, we decided to collaborate on it. We&#39;ll be covering a few of the icons he created in his pen, and a couple more.&lt;/p&gt;
&lt;p&gt;If you were to ask me what my most favorite CSS property is I might just answer the transition property. It has proven to be a perfect use case for progressive enhancement and it’s adoption has made countless websites feel smoother.  By the way, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties&quot;&gt;a heck of a lot of properties&lt;/a&gt; are also transitionable. &lt;/p&gt;
&lt;p&gt;While the prefixed transition property has been supported by the major browsers for a long time now (web speaking), there was quite a dilemma with browsers and their ability to transition and animate pseudo-elements (&lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt;). While Firefox has been doing things right since version 4.0, it wasn’t until March of this year when Chrome finally &lt;a href=&quot;http://css-tricks.com/pseudo-element-animationstransitions-bug-fixed-in-webkit/&quot;&gt;fixed things&lt;/a&gt;. Now, even IE10 supports transitions and animations on pseudo-elements.&lt;/p&gt;
&lt;p&gt;So what shall we call these transforming CSS icons? How about transformicons?&lt;/p&gt;
&lt;p class=&quot;note warning&quot;&gt;
              These code snippets are intended to work only in &lt;a href=&quot;http://caniuse.com/#feat=transforms2d&quot;&gt;browsers that support&lt;/a&gt; the properties used.
            &lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
              We will only cover the styles/transforms in SCSS, and add some explanation in the form of comments for those of you who aren&#39;t very familiar with SCSS. You&#39;ll find the complete compiled CSS code in the source code on Github.&lt;br /&gt; As the Javascript is very simple (just toggling a class name)  we won&#39;t be going over it, and you&#39;ll also find it in the downloadable source code on Github.
            &lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;demo-1&quot;&gt;Three-line to arrow (arrow left and arrow up)&lt;/h3&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/lines-to-arrows.png&quot; alt=&quot;Three-lines to Arrows Transformations&quot; /&gt;
&lt;/figure&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;demo-1-markup&quot;&gt;The Markup&lt;/h4&gt;
&lt;p&gt;The three-line menu icon, aka navicon, aka hamburger icon can be accomplished quite a few different ways, but in this case we will use a wrapper element and a child with two psuedo elements to form the three lines. The markup really isn’t heavy.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lines-button arrow arrow-left&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-label&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Toggle Navigation&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;lines&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;demo-1-scss&quot;&gt;The SCSS&lt;/h4&gt;
&lt;p&gt;First we’ll set up the wrapper around the actual navicon to trigger the transition. &lt;code&gt;$button-size&lt;/code&gt; is the width of the lines of the navicon, not the entire target area.&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 3.5rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token property&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$transition&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .3s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// increase this to see the transformations in slow-motion&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token selector&quot;&gt;.lines-button &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/2 &lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/4&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; .3s&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pointer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;user-select&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; none&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/7&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:hover &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:active &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;.1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now a mixin that we will use to make a single line.&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token keyword&quot;&gt;@mixin&lt;/span&gt; &lt;span class=&quot;token selector&quot;&gt;line &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; inline-block&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/7&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/14&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$transition&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are using the mixin in the &lt;code&gt;.lines&lt;/code&gt; element and its absolutely positioned pseudo elements to create the navicon. &lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token selector&quot;&gt;.lines &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token comment&quot;&gt;//create middle line&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token keyword&quot;&gt;@include&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token comment&quot;&gt;/*create the upper and lower lines as pseudo-elements of the middle line*/&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:before, &lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:after &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                 &lt;span class=&quot;token keyword&quot;&gt;@include&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token property&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token property&quot;&gt;transform-origin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/14 center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:before &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/4&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:after &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -&lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/4&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to line up the transform origin of the pseudo elements (upper and lower lines) carefully if we want everything to line up perfectly.&lt;/p&gt;
&lt;p&gt;I created a simple pen to show where the transform origin goes and how the pseudo-elements are transformed.&lt;code&gt;:before&lt;/code&gt; is red, &lt;code&gt;:after&lt;/code&gt; is blue, and &lt;code&gt;.lines&lt;/code&gt; is green.&lt;/p&gt;
&lt;p&gt;Check the pen out &lt;a href=&quot;http://codepen.io/bennettfeely/pen/mhwDt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And here&#39;s a simple image to show the transform origins and how the pseudo-elements should align.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/transform-origin.png&quot; alt=&quot;Image showing the transform origins of the pseudo-elements&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;When we hover over the three-line menu button in it’s original state, we’ll have it expand a little.&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token selector&quot;&gt;.lines-button:hover &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token selector&quot;&gt;.lines &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:before &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/3.5&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:after &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -&lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/3.5&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, let’s transform this three-line menu into a left arrow icon. For this demo, when the &lt;code&gt;.lines-button&lt;/code&gt; wrapper clicked, we will add a &lt;code&gt;.close&lt;/code&gt; class to it. The arrow looks better when it is scaled down a bit so we will do so using &lt;code&gt;scale3d()&lt;/code&gt; rather than just &lt;code&gt;scale()&lt;/code&gt;, which will trigger hardware acceleration and should make things run a bit smoother.&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token selector&quot;&gt;.lines-button.arrow.close &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;scale3d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;.8&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;.8&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;.8&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token selector&quot;&gt;.lines-button.arrow.close .lines&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:before,&lt;br /&gt;                  &lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:after &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$button-size&lt;/span&gt;/1.8&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:before &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rotate3d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;40deg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;                  &lt;span class=&quot;token selector&quot;&gt;&lt;span class=&quot;token parent important&quot;&gt;&amp;amp;&lt;/span&gt;:after &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token property&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rotate3d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;-40deg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;              &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; lines, we will shorten them a bit and overlay them all on top of each other. Finally, we rotate them 40° in opposite directions to each other. We have made an arrow!&lt;/p&gt;
&lt;p&gt;For the &lt;strong&gt;second navicon transformation into an arrow pointing upwards&lt;/strong&gt;, the markup remains the same, we’ll just add a class of &lt;code&gt;.arrow-up&lt;/code&gt; to the button. &lt;/p&gt;
&lt;pre class=&quot;brush:html&quot;&gt;
              &lt;button class=&quot;lines-button arrow arrow-up&quot; type=&quot;button&quot; role=&quot;button&quot; aria-label=&quot;Toggle Navigation&quot;&gt;
                &lt;span class=&quot;lines&quot;&gt;&lt;/span&gt;
              &lt;/button&gt;
```

&lt;p&gt;This icon will get the exact same styles and transformations as the previous one, but we&#39;ll rotate the icon in it&#39;s &lt;code&gt;.close&lt;/code&gt; state by 90 degrees so the arrow points upwards.&lt;/p&gt;

```scss 
              .lines-button.arrow-up.close {
                transform: scale3d(.8,.8,.8) rotate3d(0,0,1,90deg); // Rotate around the z-axis
              }
```

&lt;h3 class=&quot;deeplink&quot; id=&quot;demo-2&quot;&gt;Three-line to &amp;#8212;&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/lines-to-minus.png&quot; alt=&quot;Three-lines to Minus Transformation&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;The markup for this one is, of course, the same as the markup in the previous section. The button in this example gets a &lt;code&gt;.minus&lt;/code&gt; class, which defines the styles that will be applied to it.&lt;/p&gt;

&lt;h4 class=&quot;deeplink&quot; id=&quot;demo-2-scss&quot;&gt;The SCSS&lt;/h4&gt;

&lt;p&gt;To style this icon we’ll apply the same styles as above too down until the hover state. But where this icon will differ from the previous one is in the styles applied to it when it’s clicked, i.e in the &lt;code&gt;.close&lt;/code&gt; state. This icon will transform into a “&amp;#8212;” (like a minus sign), which can resemble a “collapse menu” icon, or “show less”, if you’re using it for a mobile navigation.  The pseudo-elements (top and bottom lines) won’t be rotated so we’ll reset the transforms to none, and we’ll keep the width of the icon instead of shrinking it, and then we&#39;ll just overlay them on top of the &lt;code&gt;.lines&lt;/code&gt; element to form one single line instead of three.&lt;/p&gt;

```scss 
              .lines-button.minus.close .lines{
                  &amp;:before, &amp;:after{
                    transform: none;
                    width: $button-size;
                    top:0;
                  }
              } 
```

&lt;h3 class=&quot;deeplink&quot; id=&quot;demo-3&quot;&gt;Three-line to &amp;#10005; (#1)&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/lines-to-x.png&quot; alt=&quot;Three-lines to x Transformation&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;This icon will start out the exact same way the previous ones have. The markup structure is the same as the previous three-lines icons, with the same hover state expanding effect. For this transformation, the icon will get a &lt;code&gt;.x&lt;/code&gt; class (resembles a transformation to an x shape).&lt;/p&gt;

&lt;p&gt;When the button is clicked, an &lt;code&gt;.close&lt;/code&gt; class is added to it just like in the previous examples. But this is where the new transformation will be defined.&lt;/p&gt;

&lt;h4 class=&quot;deeplink&quot; id=&quot;demo-3-scss&quot;&gt;The SCSS&lt;/h4&gt;

&lt;p&gt;In order to transform the three lines into an &amp;#10005; shape, we&#39;re going to change the icon&#39;s background into a transparent one (the middle line will disappear), and the upper and lower lines (the pseudo-elements) will be rotated by 45 degrees in opposite directions and overlayed to create the shape.&lt;/p&gt;

```scss 
              .lines-button.x.close .lines{

                  /*hide the middle line*/
                  background: transparent;

                  /*overlay the lines by setting both their top values to 0*/
                  &amp;:before, &amp;:after{
                    transform-origin: 50% 50%;
                    top:0;
                    width: $button-size;
                  }

                  // rotate the lines to form the x shape
                  &amp;:before{
                    transform: rotate3d(0,0,1,45deg); 
                  }
                  &amp;:after{
                    transform: rotate3d(0,0,1,-45deg); 
                  }
              }
```

&lt;p&gt;This transformation is very similar to the arrow transformation, but the key notes which make it different is keeping the width of the lines here instead of shrinking them like we did for the arrows, and keeping the transform origin at the center.&lt;/p&gt;

&lt;h3 class=&quot;deeplink&quot; id=&quot;demo-4&quot;&gt;Three-line to &amp;#10005; (#2)&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/lines-to-x.png&quot; alt=&quot;Three-lines to x Transformation&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;This transformation is inspired by the fifth transformation style from Pedro Campos’s &lt;a href=&quot;http://codepen.io/pedrocampos/details/gufrx&quot;&gt;pen&lt;/a&gt; on Codepen.  We’ll make the markup for this one, of course, the same as the markup for all our buttons, with a specific class, in this case .x2.&lt;/p&gt;

&lt;h4 class=&quot;deeplink&quot; id=&quot;demo-4-scss&quot;&gt;The SCSS&lt;/h4&gt;

&lt;p&gt;This icon will start out with the same transformation as the three-line-to-minus icon, and when the first transformation is finished, the pseudo-elements will rotate and form the &amp;#10005; shape. We’ll apply the second transformation when the first one is finished, so for that we’ll need to set a delay for the transitions so that they don’t happen simultaneously.&lt;/p&gt;

&lt;p&gt;Where this transformation differs from the previous &amp;#10005; effect is the order of transformations and the added delays. For the previous effect we rotated and overlayed simultaneously, while in this case we&#39;re going to overlay, and delay the rotation till the overlaying is done, and then we&#39;ll rotate.&lt;/p&gt;

```scss 
              .lines-button.x2 .lines{
                  transition: background .3s .6s ease;

                  &amp;:before, &amp;:after{
                    //set transform origin back to center
                    transform-origin: 50% 50%;
                    transition: top .3s .6s ease, transform .3s ease;
                  }
              }
```

&lt;p&gt;We have added a delay on the transition for the lines so that the transformations happen in a row.&lt;/p&gt;

&lt;p&gt;Next, we’ll define the transition delays and transformations for the pseudo-elements. When the button is clicked, the upper and lower lines will first be translated to overlay on top of each other, the middle line’s background will be set to transparent to hide it, because we don’t want it to be there when the x is formed, and then each of two remaining lines  will be rotated by 45deg (and -45deg for the opposite line) to form an &amp;#10005; shape.&lt;/p&gt;

```scss 
              .lines-button.x2.close .lines{

                  transition: background .3s 0s ease;
                  background: transparent;

                  &amp;:before, &amp;:after{
                    transition: top .3s ease, transform .3s .5s ease;      
                    top:0;
                    width: $button-size;
                  }
                  &amp;:before{
                    transform: rotate3d(0,0,1,45deg); 
                  }
                  &amp;:after{
                    transform: rotate3d(0,0,1,-45deg); 
                  }
              }
```

&lt;p&gt;The trick here that’s different from the previous transformations is just to set the transform origin of the pseudo-elements to be their center, and add the proper transition delays.&lt;/p&gt;

&lt;h3 class=&quot;deeplink&quot; id=&quot;demo-5&quot;&gt;Grid to &amp;#10006; (#1)&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/grid-to-x.png&quot; alt=&quot;Grid to x Transformation&quot; /&gt;
&lt;/figure&gt;

&lt;h4 class=&quot;deeplink&quot; id=&quot;demo-5-markup&quot;&gt;The Markup&lt;/h4&gt;

&lt;p&gt;Similar to the previous markup, we have a &lt;code&gt;.grid-button&lt;/code&gt; wrapping a &lt;code&gt;.grid&lt;/code&gt; icon.&lt;/p&gt;

&lt;pre class=&quot;brush:html&quot;&gt;
              &lt;button class=&quot;grid-button rearrange&quot; type=&quot;button&quot; role=&quot;button&quot; aria-label=&quot;Toggle Navigation&quot;&gt;
                &lt;span class=&quot;grid&quot;&gt;&lt;/span&gt;
              &lt;/button&gt;
```

&lt;h4 class=&quot;deeplink&quot; id=&quot;demo-5-scss&quot;&gt;The SCSS&lt;/h4&gt;

&lt;p&gt;For this icon, instead of using psuedo elements we will instead leverage the power of the mighty &lt;code&gt;box-shadow&lt;/code&gt; property. To make the code cleaner and easier to modify, we will create a &lt;code&gt;$base&lt;/code&gt; and a &lt;code&gt;$space&lt;/code&gt; variables. First we will style the &lt;code&gt;.grid-button&lt;/code&gt;, wrapper.&lt;/p&gt;

```scss 
              //variables are used to make the buttons more flexible and easier to customize
              //these variables are replaced with their values in the compiled CSS

              $base : 1rem;
              $space : $base/4;
              $color : #c0392b;

              .grid-button {
                padding: $base*2; //2rem
                cursor: pointer;
                user-select: none;
              }

```

&lt;p&gt;Now let’s get to the &lt;code&gt;.grid&lt;/code&gt; icon itself and the crazy &lt;code&gt;box-shadow&lt;/code&gt; property. Think of each comma-separated shadow as a it’s own sort of pseudo- element. It is very important to keep track of the order of each shadow in the box-shadow property or the animation will not look right.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;box-shadow&lt;/code&gt; property is nice that when a color is not specified, the property simply inherits whatever the color property may be. In a situation like ours, it’s very helpful with an element with a ton of shadows that are the same color to simply leave out the colors and set it once with the color property.&lt;/p&gt;

```scss 
              .grid-button .grid{
                  width: $base;
                  height: $base;
                  background: $color;
                  color: $color; /* Not in use when the colors are specified below */
                  transition: $transition;
              }

```

&lt;p&gt;When we click on the button, we add the &lt;code&gt;.close&lt;/code&gt; class to &lt;code&gt;.grid-button&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Because we&#39;ll be using two techniques to create an &amp;#10006; out of the grid icon, we&#39;ll be using two different class names for two two transformations. For the first one we&#39;ll use a &lt;code&gt;.rearrange&lt;/code&gt; class name, as we&#39;ll be rearranging the box shadows.&lt;/p&gt;

&lt;p&gt;First we’ll spread the box shadows for the icon to form a grid.&lt;/p&gt;

```scss 
              .grid-button.rearrange .grid{
                  box-shadow:
                    -($base+$space) 0 -($base+$space),
                    0 0 -($base+$space),
                    ($base+$space) (-($base + $space)),
                    -($base+$space) 0,
                    $base+$space 0,
                    -($base+$space) ($base + $space),
                    0 ($base+$space),
                    ($base+$space) ($base + $space);
                
              }
              /* The CSS equivalent to the above box-shadow result is:
              
                box-shadow: 
                  -1.25rem -1.25rem, 
                  0 -1.25rem, 
                  1.25rem -1.25rem, 
                  -1.25rem 0, 
                  1.25rem 0, 
                  -1.25rem 1.25rem, 
                  0 1.25rem, 
                  1.25rem 1.25rem;

              */
```

&lt;p&gt;And when the icon gets the &lt;code&gt;.close&lt;/code&gt; class on click, we’ll rearrange the shadows.&lt;/p&gt;

```scss 
              .grid-button.rearrange.close .grid{ 
                    box-shadow:
                      0 0 -$base,
                      0 0 -$base*2,
                      $base 0,
                      -$base*2 0,
                      $base*2 0,
                      -$base 0,
                      0 $base*2,
                      0 $base;
                    transform: rotate3d(0,0,1,-45deg)  scale3d(.8,.8,.8);
              }

              /* The CSS equivalent to the box-shadow is:

                    box-shadow: 
                      0 -1rem, 
                      0 -2rem, 
                      1rem 0, 
                      -2rem 0, 
                      2rem 0, 
                      -1rem 0, 
                      0 2rem, 
                      0 1rem;

              */
```

&lt;p&gt;We have removed all the spaces between the individual shadows (removed all the &lt;code&gt;$space&lt;/code&gt; variables), and moved the four corner shadows inward and four side shadows outward by rearranging them. Last but not least, we rotate the whole icon by -45° and scale it, all using hardware acceleration to make the animation run smoothly. And with that we&#39;ve achieved the first effect.&lt;/p&gt;

&lt;h3 class=&quot;deeplink&quot; id=&quot;demo-6&quot;&gt;Grid to &amp;#10006; (#2)&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://sarasoueidan.com/assets/images/grid-to-x-2.png&quot; alt=&quot;Grid to x Transformation #2&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;For the second grid to &amp;#10006; transformation, we’ll be doing something very similar to what we did previously, but instead of rearranging the shadows we’re going to “collapse” four of them into the main element and bring the other four closer by removing the spaces and thus forming an &amp;#10006;. We&#39;ll give the button with this effect a class &lt;code&gt;.collapse&lt;/code&gt;.&lt;/p&gt;

```scss 
              .grid-button.collapse .grid{
                //the order of box shadows here differs a little from the above one order-wise
                  box-shadow:
                    -($base+$space) 0,
                    -($base+$space) ($base+$space),
                    $base+$space 0,
                    ($base+$space) (-($base+$space)),
                    0 0 -($base+$space),
                    -($base+$space) 0 -($base+$space),
                    0 ($base+$space),
                    ($base+$space) ($base+$space);
              }

              /*The CSS equivalent to the box-shadow specified here is:
                
                  box-shadow: 
                    -1.25rem 0, 
                    -1.25rem 1.25rem, 
                    1.25rem 0, 
                    1.25rem -1.25rem, 
                    0 -1.25rem, 
                    -1.25rem -1.25rem, 
                    0 1.25rem, 
                    1.25rem 1.25rem;

              */
```

&lt;p&gt;And when the button is clicked the &lt;code&gt;.close&lt;/code&gt; class is added, and the shadows “collapse”.&lt;/p&gt;

```scss 
              .grid-button.collapse.close .grid{
                  box-shadow:
                  -$base 0,
                  0 0 transparent,
                  $base 0,
                  0 0 transparent,
                  0 0 -$base,
                  0 0 transparent,
                  0 $base,
                  0 0 transparent;
              }

              /*The CSS equivalent to the box-shadow result is:
                
                  box-shadow: 
                    -1rem 0, 
                    0 0 transparent, 
                    1rem 0, 
                    0 0 transparent, 
                    0 -1rem, 
                    0 0 transparent, 
                    0 1rem, 
                    0 0 transparent;

              */
```

&lt;p&gt;And we&#39;re done! I hope you liked these effects and found the tutorial useful!&lt;/p&gt;
&lt;/pre&gt;&lt;/pre&gt;</content>
  </entry>
  
  <entry>
    <title>Building A Circular Navigation With CSS Transforms</title>
    <link href="https://sarasoueidan.com/blog/circular-navigation/"/>
    <updated>2013-08-09T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/circular-navigation/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
	In this article, we will learn how to apply CSS transforms to fake a &quot;slice&quot; shape, creating a circular navigation using nothing but CSS (and some maths!). The article includes an interactive demo that explains visually and step by step how the technique works and the shapes are created.
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lessons from the “Seductive Interaction Design” Book</title>
    <link href="https://sarasoueidan.com/blog/lessons-from-seductive-interaction-design-book/"/>
    <updated>2013-04-26T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/lessons-from-seductive-interaction-design-book/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;
In this article today, I’m going to share with you some of the lessons I learned from one of the best books I’ve read: &lt;a href=&quot;http://www.peachpit.com/store/seductive-interaction-design-creating-playful-fun-and-9780321725523&quot;&gt;Seductive Interaction Design: Creating Playful, Fun, and Effective User Experiences&lt;/a&gt;.
&lt;/p&gt; 
&lt;p&gt;I believe that you should read this book yourselves to fully appreciate all the information and insight the writer has to share. I will cover only the first half of the book. I will be pasting some excerpts, because there are many things that the writer describes a lot better than I could ever do. I will also be skipping a lot of the content for sake of brevity and of course because you should learn the rest from the book directly, not from me.&lt;/p&gt;
&lt;p&gt;
So think of this article as a review, preview, or just a simple article written by someone who is so excited about a book she read that she just needs to share some of what she learned with you.
&lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;
&lt;strong&gt;Disclaimer:&lt;/strong&gt; Images, blockquotes, and quotes are excerpted from Seductive Interaction Design: Creating Playful, Fun, and Effective User Experiences by Stephen P. Anderson. Copyright © 2011. Used with permission of Pearson Education, Inc. and New Riders.&lt;br /&gt;
Link to book: &lt;a href=&quot;http://www.peachpit.com/store/seductive-interaction-design-creating-playful-fun-and-9780321725523&quot;&gt;Seductive Interaction Design: Creating Playful, Fun, and Effective User Experiences.&lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;overview&quot;&gt;OVERVIEW&lt;/h3&gt;
&lt;p&gt;
Writer, designer, and speaker &lt;a href=&quot;http://www.poetpainter.com/&quot;&gt;Stephen Anderson&lt;/a&gt; shows you in this book how the same tactics humans use to attract a mate can apply to the interactions between humans and interactive devices, to make people “fall in love” with your websites and/or applications.
&lt;/p&gt;
&lt;p&gt;
The book focuses on human behavior, in both physical and digital contexts, and talks about what actually drives people and influences their behavior and “seduces” them into taking certain kinds of actions. It also studies a lot of examples of existing web applications, and explores the underlying psychological principles applied to the user experience of these applications, that make them as effective and successful as they are.
&lt;/p&gt;
&lt;p&gt;One of the first examples mentioned in the book is LinkedIn and the effectiveness of the Profile Completeness process, specifically how LinkedIn manages to pull quite a bit of information out of millions of users through a series of prompts that are simple enough and yet very effective. By understanding what motivates people, they were able to get a lot of information out of them. And this is what the book is concerned with: why people do the things they do.&lt;/p&gt;
&lt;p&gt;The concept of level completeness used in LinkedIn can also be found in games as a “progress dynamic”, with points and levels. It can also be found in other contexts, one of which is martial arts, where each “level” is represented by a colored belt, one you earn while advancing towards the black belt. &lt;q&gt;By having different colored belts [..] you get rewarded and recognized along the path to mastery. These belts are a tangible, achievable goal to work toward&lt;/q&gt;.But why do we do the things we do when we have this kind of progress dynamic?&lt;/p&gt;
&lt;p&gt;We could look at several ideas from psychology:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;ul style=&quot;list-style-type:none;&quot;&gt;
        &lt;li&gt;&lt;strong&gt;Sequencing:&lt;/strong&gt; We are more likely to take action when complex tasks are broken down into smaller tasks.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Appropriate challenges:&lt;/strong&gt; We delight in challenges, especially ones that strike a balance between being overwhelming and being boring.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Status:&lt;/strong&gt; We constantly assess how interactions enhance or diminish our standing relative to others and our personal best.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Achievements:&lt;/strong&gt; We are more likely to engage in activities in which meaningful achievements are recognized.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;So always offer your users some kind of reward after every step they make throughout a sign up form, or any other kind of forms that require several steps along the way to completeness, like surveys, for example, and be clear about why you’re asking for the information you ask for, and help them understand that whatever information you ask from them will actually benefit &lt;em&gt;them&lt;/em&gt;, even if you have other reasons you’re asking them for this information. &lt;b&gt;State your reasons in terms of how they would benefit &lt;em&gt; the user&lt;/em&gt; to provide this information to you&lt;/b&gt;, because &lt;q&gt;we’ve known that we are more interested in people who are interested in us. no one wants to sit and hear someone talk about themselves all night. The same is true in many online interactions&lt;/q&gt;.&lt;/p&gt;
&lt;p&gt;The writer then goes on to mention another example of great UX, which benefits both the user and the owners of the application, which is iTunes. He explains the process of signing up for iTunes in detail, and reveals the psychological part of the process, that makes users &lt;em&gt;want&lt;/em&gt; to continue the process:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;ul style=&quot;list-style-type:none;&quot;&gt;
        &lt;li&gt;&lt;strong&gt;Feedback loops: &lt;/strong&gt; We’re engaged by situations in which we see our actions modify subsequent results.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Curiosity:&lt;/strong&gt; When teased with a small bit of interesting information, people want to know more.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Visual imagery:&lt;/strong&gt; Vision trumps all other senses and is the most direct way to perception.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Recognition over recall:&lt;/strong&gt; It’s easier to recognize things we have previously experienced than it is to recall them from memory.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;This kind of perspective offers you a new way to look at user experiences. For example, one example of UX that is &lt;em&gt;different&lt;/em&gt; and very attractive and more enjoyable, in my opinion, is the new form and survey experience that &lt;a href=&quot;http://www.typeform.com/&quot;&gt;Typeform&lt;/a&gt; offers, because it uses several concepts including sequencing and visual imagery, and they use images for a lot of their questions and offer multiple choices which are easier to use than having to recall stuff from memory. All these elements make filling up forms and taking surveys easier and more enjoyable, or at the very least, a lot less boring.&lt;/p&gt;
&lt;figure&gt;
            &lt;img src=&quot;https://sarasoueidan.com/assets/images/typeform1.png&quot; /&gt;
            &lt;figcaption&gt;Screenshot from the preview video on the Typeform website. The application offers users a set of images to choose from.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
            &lt;img src=&quot;https://sarasoueidan.com/assets/images/typeform2.png&quot; /&gt;
            &lt;figcaption&gt;Screenshot from the preview video on the Typeform website. The application offers users an image with the question. &quot;Vision trumps all other senses and is the most direct way to perception&quot;.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;usability-psychology&quot;&gt;Usability and Psychology&lt;/h3&gt;
&lt;p&gt;A simple and straightforward differentiation between the roles of usability and psychology in user experience design is the following:&lt;/p&gt;
&lt;blockquote&gt;
    Usability clears the way for a good experience by eliminating troublesome interface distractions, but a great experience stems from something more—an awareness of why people could or do care. &lt;b&gt;The danger is in confusing “ease of use” with actually desiring to use something.&lt;/b&gt; These are two entirely different things. Both are essential, but simply making something more usable won’t guarantee any more clicks or conversions. in this case, it was psychology that made this so engaging.
&lt;/blockquote&gt;
&lt;p&gt;Here is an image showing the difference in roles between usability and psychology in user experience design:&lt;/p&gt;
&lt;figure class=&quot;floated&quot;&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/usability-psychology.png&quot; alt=&quot;Usability vs Psychology&quot; /&gt;
    &lt;figcaption&gt;An image representing the role of each of usability and psychology in user experience design.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;By using psychology to make your website/application move from being functional, reliable, usable, and convenient to being pleasurable and meaningful to the user. With this in mind, the writer then introduces a “user experience hierarchy of needs model” (shown in the image below)&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/hierarchy.png&quot; alt=&quot;Hierarchy of Needs Model&quot; /&gt;
    &lt;figcaption&gt;User Experience Hierarchy of Needs model. From bottom to top is a basic product maturity continuum: a top to bottom focus starts with the experience you want people to have.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;So if you want to create a revolutionary product, you have to think beyond basic functionality, usability, and convenience, and think about what kind of experience you want the user to have when using your product/website/application, but without forgetting the basics of usability.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;aesthetics&quot;&gt;Aesthetics, Beauty, and Behavior&lt;/h3&gt;
&lt;p&gt;The first “Weapon” of seduction is Aesthetics. This section explores the relation between aesthetics and human cognition, affect, and how aesthetics help our brains make certain associations between a product, and other real-life objects, and how these associations will end up affecting how we feel about it, and consequently how we behave. &lt;/p&gt;
&lt;blockquote&gt;
    As user experience designers, we must consider every stimulus that might influence user interaction. […] “aesthetics examines our response to an object or phenomenon” (according to Wikipedia). In other words, aesthetics aren’t just about the artistic merit of Web buttons or other visual effects, but about how people respond to these elements. The question becomes: How do aesthetic design choices influence understanding and emotions, and how do understanding and emotions influence behavior?
    […] we’ll look at how aesthetics influences cognition, affect, and associations.
&lt;/blockquote&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;aesthetics-cognition&quot;&gt;Aesthetics and Cognition&lt;/h4&gt;
&lt;p&gt;
&lt;q&gt;Cognition is the process of knowing. Based on patterns and experiences, we learn how to understand the world around us [..] and aesthetics play a critical role in cognitive processing&lt;/q&gt;, that is, in the way we perceive elements in the digital context.
&lt;/p&gt;
&lt;p&gt;The human brain has its own way of interpreting color, shadows, shading, and other natural occurrences, and the role of aesthetics is to communicate the functionality of the elements we see to our brains. They provide the brain with cues that communicate how we should interact with these elements. So, when designing, designers should think about what each color means, in addition to the role and meaning of shadows and shading. &lt;/p&gt;
&lt;p&gt;For example, think about a simple button (image below). The shadows, gradients, and beveled edges of the upper right button help the brain understand that this is in fact a button, and therefore it can be pressed, and that we can expect something to happen if we do. In this case, aesthetics communicate function. These shadows, gradients, and beveled edges &lt;q&gt;are perceived affordances—cues that communicate how a user can, and should, interact with an object. translation: if it looks like a button, it must be a button&lt;/q&gt;.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/buttons.png&quot; alt=&quot;Buttons and Meaning of Gradients&quot; style=&quot;margin-top:50px;&quot; /&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/alert.png&quot; alt=&quot;Alert Message and Meaning of color&quot; style=&quot;float:right&quot; /&gt;
&lt;/figure&gt;
&lt;p style=&quot;clear:both;&quot;&gt;The second image shows how wrong usage of colors can confuse the brain about the actual meaning and functionality of an element, in this case an alerted message.&lt;/p&gt;
&lt;p&gt;The use of shadows also plays an important role in determining how elements look on a page, and which elements lay on top of others (stacking context), so special attention should be paid to these kinds of details. One of my favorite paragraphs in this book is this one in which the writer gives a golden tip:&lt;/p&gt;
&lt;blockquote&gt;
    Whatever the natural reference is— shadows, reflections, lighting, bevels—i like to ask designers, “Could you build a physical model of this page?” if you can’t, then the viewer   will likely be disturbed, as something feels not   quite right.
&lt;/blockquote&gt;
&lt;p&gt;So, if you can build a physical model out of a digital design, then it can be interpreted correctly by the brain, otherwise it’s just not right!&lt;/p&gt;
&lt;p&gt;In addition to cuing the brain to understand the functionality and shape of objects, aesthetics play in a role in determining the relationship between these objects.&lt;q&gt;For example,  the law of proximity explains that if i place two or more items in a cluster together, you’ ll assume they are related&lt;/q&gt;.&lt;/p&gt;
&lt;figure&gt; 
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/proximity.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Then there is also contrast and connectedness.&lt;q&gt;if one object has different characteristics from other objects, we perceive it as being different. This is known as contrast.” Additionally, elements connected by uniform visual properties are perceived as being more related than elements that are not connected. This is known as uniform connectedness&lt;/q&gt;.
&lt;/p&gt;  
&lt;figure&gt; 
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/connectedness.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;figure class=&quot;floated&quot;&gt; 
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/mac-genie.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;Additionally, aesthetics help us understand the “space” in which we interact, for example, placing elements behind each other in a 3D space to communicate distance. Another example is the famous “genie effect” animation in Mac OS X, which communicates where a file is being stored/minimized for easy retrieval later.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;aesthetics-emotion&quot;&gt;Aesthetics and Emotion&lt;/h4&gt;
&lt;p&gt;Some UX designers believe that by making a product easy to use and convenient, this will directly lead to creating a better, enjoyable user experience. But in this chapter, the writer proves that things that are enjoyable will be perceived as easy to use and convenient. Again to relate digital experiences to real-life interactions between people, &lt;q&gt;Think of how quickly we form judgments about people in the first few moments after we meet them. Conversely, think about how our personal appearance (our personal aesthetic) affects the way people perceive us; or how product packaging influences our perception of the product inside. We may know better, but we continue to judge a book by its cover&lt;/q&gt;.&lt;/p&gt;
&lt;p&gt;The way products and interfaces look says a lot about them. Take for example an application with a lot of attention to details. When you see this kind of attention, you subconsciously trust the application you’re interacting with more. On the other hand, imagine a UI with inconsistent fonts, odd paddings, line heights, and such details that can butcher even the greatest designs, “how might these sloppy UI details affect our perception of the application?” How can you trust an application whose owner wasn’t attentive enough to care about these small details of their own product? How will they be able to pay attention to our needs if they can’t even pay attention to the small details in their product?&lt;/p&gt;
&lt;p&gt;There are also a lot of studies mentioned in the book that prove that &lt;q&gt;not only do aesthetics affect perceived usability, they also influence actual performance&lt;/q&gt;. I’m going to mention only one short experiment for the sake of brevity:&lt;/p&gt;
&lt;blockquote&gt;
    One study, “The Influence of Design aesthetics in usability testing: effects on user Performance and Perceived usability,” (Sonderegger and Sauer, 2009), presented adolescents with one of two mobile phones, an attractive one, and one less so. The conclusion? “The visual appearance of the phone had a positive effect on performance, leading to reduced task completion times for the attractive model.
&lt;/blockquote&gt;
&lt;p&gt;All the experiments the writer mentions lead us to one firm conclusion:&lt;/p&gt;
&lt;blockquote&gt;
    The more we learn about people, and how our brains process information, the more we see the truth of that phrase: form and function aren’t separate. If form exists independently of function, and we can treat aesthetics and function as two separate elements, then we ignore the evidence that beauty is much more than decoration. Our brains can’t help but agree.
&lt;/blockquote&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;aesthetics-associations&quot;&gt;Aesthetics and Associations&lt;/h4&gt;
&lt;p&gt;Aesthetics play a major role in associations our brains make between objects. Our brains tend to try to connect objects to other objects, and when that is done it shares the characteristics of one of these objects with the other.&lt;/p&gt;
&lt;p&gt;The best way to explain this point is to just paste one of the (interesting) examples the writer mentions in the book: Apple products!&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;In a 2005 essay on design and perceptions, Luke Williams recounts how another designer discovered why so many people think of the iPod as a “clean” device. Apparently, this designer had been sitting on the toilet (where all great ideas happen!) when it occurred to him that the iPod references the same materials used in a bathroom, “the shiny white porcelain of the bathtub and the reflective chrome of the faucet on the wash basin.” This might sound laughable, until you factor in that Jonathan ives, apple’s senior vice president of design, once worked for an agency that designed—you guessed it— bathroom appliances. Coincidence? Perhaps. What’s important is that “consciously or unconsciously, the iPod materials reference a convention of ‘cleanliness’ that everybody interacts with every day—a bathroom.
    &lt;/p&gt;
    &lt;p&gt;We’re talking about human perception, and the system of conventions that shapes our perceptions. Perception is essential to the process of design.
            These aesthetic associations are evident in other apple products. If you own an apple laptop, you may have noticed the soothing sleep-light indicator that’s visible when your computer is “sleeping.” The rate at which this light fades in and out is comparable to that of the average respiratory rate for adults, about 12 to 20 breaths per minute. Coincidence? apple owns the patent for a Breathing status Led indicator (Us 6,658,577 B2), which “mimics the rhythm of breathing which is psychologically appealing&quot;.&lt;/p&gt;
        &lt;img src=&quot;https://sarasoueidan.com/assets/images/ipod.png&quot; alt=&quot;&quot; width=&quot;250&quot; height=&quot;230&quot; /&gt;
    &lt;p&gt;One final example: when apple launched the original iPod shuffle, they compared it directly to a pack of gum, due to the equivalent sizes of the two products. This is a great example of a conceptual metaphor, in which we make sense of new information by associating it with something we’re already familiar with. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;power-of-faces&quot;&gt;The Power of Faces&lt;/h4&gt;
&lt;p&gt;Including faces in our online interactions also affects the associations our brains make, because faces carry with them some kind of associations, and can help build trust because of a higher fidelity of information that the application or website presents.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/faces.png&quot; alt=&quot;&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;One example to best explain this notion is Facebook&#39;s logout screen. &lt;/p&gt;
&lt;blockquote&gt;
    The original Facebook deactivation page was pretty boring. It simply stated: “We’re sorry you’re leaving. tell us why Facebook was not useful.” One of the designers suggested that closing your account be “more like leaving summer camp (you know, a place that has all your friends and you don’t want to leave.)”
        &lt;img src=&quot;https://sarasoueidan.com/assets/images/facebook.png&quot; alt=&quot;&quot; /&gt;
    Inspired by this concept, the design team created a new deactivation page that pulls faces from a few of your friends’ profiles, along with the message that asks, “are you sure you want to deactivate your account? Your 498 friends will no longer be able to keep in touch with you.” has this made a difference? according to Julie Zhuo, design manager at Facebook, this has reduced the deactivation rate by 7 percent. at least a million fewer users have deactivated their accounts!
&lt;/blockquote&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;playful-seduction-techniques&quot;&gt;Playful Seduction Techniques&lt;/h3&gt;
&lt;blockquote&gt;
    In dating terms, it’s easy to think, “People will like me for who I am.” The truth is people have to be interested just enough to get to know you (your app) in the first place. What we’re talking about in this chapter are ways to design interactions that are more interesting and playful—interactions that engage people in both intellectually and emotionally. This leads to experiences that do more than merely work, they delight people.
&lt;/blockquote&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;fun&quot;&gt;Be Fun&lt;/h4&gt;
&lt;p&gt;We all like funny people. And by funny I don’t mean people who are always making jokes and trying to make you laugh, because those can become really annoying! By funny people I mean people who are fun to be around, who always have their way to make you smile, and who are great talkers, and can get a message to you in a fun way that sticks into your brains and that you’re more likely to remember later, and smile about it! &lt;/p&gt;
&lt;p&gt;By including humor in digital contexts, you engage people in a meaningful and memorable way. One of the examples that show the kind of fun you can use is the Southwest Airlines company. 
&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/southwest.png&quot; alt=&quot;Southwest&quot; /&gt;
    &lt;figcaption&gt;
        Some messages that the Southwest Airlines company uses that include fun phrases.
     &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Some may argue that humor is not always appropriate, so the writer has another golden advice to give:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;If it’s appropriate in a real-world interaction, why not online as well? Are we suddenly transformed into emotionless automatons when we sit in front of a screen? No.&lt;/p&gt;
                [...]
    &lt;p&gt;Humor is appropriate (or inappropriate) based on the situation, not the industry.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/popup.png&quot; alt=&quot;Fun Popup&quot; /&gt;
     &lt;figcaption&gt;
        An alert message that uses humor to convey a message.
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;unpredictable&quot;&gt;Be Unpredictable&lt;/h4&gt;
&lt;blockquote&gt;
    Our brains are aroused by the unexpected. While stability and a sense of control are no doubt critical user interface principles, there’s something exciting about the unexpected. not knowing what to expect heightens our anxiety, and our curiosity. Our brains are aroused by new and unexpected discoveries within our normal routines.
&lt;/blockquote&gt;
&lt;p&gt;One of the simplest way to make an experience more enjoyable after repeated visits, is by breaking the routine. One of the simplest and most obvious examples of offering a slight surprise and breaking the routine is the Google Search homepage. The Google logo changes depending on the occasion. This little change adds a new flavor to our daily visits, that would otherwise be all boring and the same, especially that the Google homepage design is already too simple to start with. So add these little design touches help break the routine and keep our brains expecting something new at different occasions.&lt;/p&gt;
&lt;p&gt;Another example of breaking routines is for example changing the content of a confirmation message every time it pops up so that it’s different every time, or changing an image on the homepage after repeated visits, or delightful messages that pop up in unexpected places. These messages don’t have to be necessary, yet they could be pleasant enough to stick in the head of your users or readers.&lt;/p&gt;
&lt;p&gt;One perfect example of a delightful surprise the writer mentions is a note he saw while he was going up the stairs in a hotel, where he was surprised by a “Everything is going to be alright” written in uppercase on one of the stairs (image below), that made him grin, and was so pleasant that he still remembers it and thought it was worthy of mentioning as a great example in his book.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/stairs.png&quot; alt=&quot;Stairs&quot; /&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
    A good date is full of delightful moments— some planned, some not—that make the overall experience memorable and pleasant. What does my wife remember from our first date? among other fond memories, it rained and we got our shoes stuck in the mud!
&lt;/blockquote&gt;
&lt;p&gt;These kinds of small delightful surprises make the interaction with the digital world seem more human, which is a very important aspect if you’re trying to sell yourself as a trustworthy person.&lt;/p&gt;
&lt;p&gt;So what makes a good present or surprise? Another golden advice from the writer:&lt;/p&gt;
&lt;blockquote&gt;
    A good gift is one that pumps up the recipient. 
&lt;/blockquote&gt;
&lt;p&gt;Think of the word pump:  P is for pleasurable, U is for unexpected, M is for meaningful (useful, not generic), and the last P is for pleasantly packaged.&lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;mysterious&quot;&gt;Be Mysterious&lt;/h4&gt;
&lt;p&gt;
&lt;q&gt;In new relationships, flirtation often involves some element of playful teasing&lt;/q&gt;, and a similar kind of teasing can be applied to the relationship between users and a website or application.
&lt;/p&gt;
&lt;p&gt;Curiosity is a powerful human drive that pushes us to do a lot of the things we do. It’s probably the reason why I read the book in the first place. I was curious to know how a website or application can be “Seductive”, I was even more curious after I started reading to understand how people think, and understand how my brain works, and why &lt;em&gt;I&lt;/em&gt; do the things I do.&lt;/p&gt;
&lt;p&gt;Part of the role of usability is make things clear to the user, and remove all roadblocks and ambiguous elements that make a user experience become a rather frustrating one.&lt;/p&gt;
&lt;p&gt;Just like we have to care about the basics and make an application or product usable and functional, and after that we can cross that line to make it pleasurable and memorable,&lt;b&gt; we can also start thinking about adding some kind of &lt;em&gt;controlled&lt;/em&gt; uncertainty to the experience after having provided the user with the clarity he needs, thus introducing a level of thrill and suspense to the experience&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes giving the user all the information they want from the first visit rids them of their interest and leaves no more room for curiosity to drive them forward to further explore the application at hand.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/curiosity1.png&quot; alt=&quot;Curiosity Zone&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;You want to make sure that you &lt;em&gt;tease&lt;/em&gt; them with as little information as necessary, enough to drive them into the “curiosity zone”.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;https://sarasoueidan.com/assets/images/curiosity2.png&quot; alt=&quot;Curiosity Zone&quot; /&gt;
&lt;/figure&gt;
&lt;blockquote&gt;
    &lt;p&gt;Information can be presented in a manner that is straightforward or curious. If we opt for the latter, we are guaranteed not only attention, but probably higher engagement as well— curiosity demands that we know more!&lt;/p&gt;
&lt;p&gt;[…]&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;When we become aware that  information is missing—when something changes from being known (or so we thought) to an unknown state—we become curious. This is the explanation of curiosity posed by behavioral economist George Loewenstein in his information gap theory. Loewenstein says, “curiosity happens when we feel a gap in our knowledge.”&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;[…]&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;The feeling we get from these information gaps is best described as deprivation, which is critical to understanding why we are motivated by curiosity. to “eliminate the feeling of deprivation,” we seek out the missing information.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;[…]&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;Simply stated: I’m curious because there’s a gap between “what I know and what I want to know.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s human to be curious. And it’s part of our nature to seek to solve mysteries around us. The kind of curiosity the writer refers to in his book is akin to teasing. Teasing people by making them aware that there is something they &lt;em&gt;don’t&lt;/em&gt; know. But there are a few ways to make this teasing effective, and I believe the most important one is to let them know that the information you’re hiding away from them will benefit &lt;em&gt;them&lt;/em&gt; the most. Also, make sure that once they get to the point where they uncover the information you withheld from them at the beginning, they find that this information meets their expectations, the expectations they built because of &lt;em&gt;you&lt;/em&gt;. Also, &lt;q&gt;don’t lure users with something that is given away freely elsewhere&lt;/q&gt;. &lt;/p&gt;
&lt;h4 class=&quot;deeplink&quot; id=&quot;self-expression&quot;&gt;Let others express themselves around you&lt;/h4&gt;
&lt;p&gt;The final principle in the playful seduction section is &lt;em&gt;self-expression&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Giving the users the ability to express themselves in your application, by giving them, for example, the ability to customize the application and make it more personal, is very important when the users expect this kind of option to be available to them, and even when they don’t!&lt;/p&gt;
&lt;blockquote&gt;
    The need for self-expression shows up in just about any area where people are allowed to control something, especially where this control is tied to an identity.
&lt;/blockquote&gt;
&lt;p&gt;Some examples of allowing users to express and apply their personal identity to an application would  be to allow them to change the theme, or use custom emoticons, or change the content and add/remove what they want, change the layout and theme, and so on.&lt;/p&gt;
&lt;p&gt;If you’re one of the people who use Windows’ MSN chat application, then you definitely know that for the past couple of months or more, the company was preparing MSN users to switch, or “upgrade”, to Skype. I am one of the individuals who sincerely hated this “upgrade” for one simple reason: Skype doesn’t allow you to use custom emoticons. And after reading a lot of comments on the Skype blog, I realized that I am only one of so many people who hated this “upgrade” as well, and my intention was very clear: to &lt;em&gt; not&lt;/em&gt; make the switch. Why? Because my MSN is customized to my needs, and Skype doesn’t allow you to add custom emoticons. I love custom emoticons. I can’t chat without them. And I really believe this should not be called an upgrade because IMO to upgrade means to make better, and when your newer version lacks a lot of the best features of your previous one, then this, IMO, is more of a downgrade. Microsoft should’ve given this move a lot of thought before actually deciding to move forward with it.&lt;/p&gt;
&lt;p&gt;The point is, giving your users the ability to customize your application or express themselves in any way is a great way to make the application feel more personal and thus enjoyable for them. And if you ever decide to do that, please don’t take that option away from them later. If you add it to your app, just make it stick. &lt;/p&gt;
&lt;h5 class=&quot;deeplink&quot; id=&quot;final-words&quot;&gt;Final Words&lt;/h5&gt;
&lt;p&gt;I only covered the first two sections of the book in this article. The amount of information, tips, and insight I wrote here is just a drop from the sea of what you can find in the book. The next two sections are titled “The Subtle Art of Seduction” and “The Game of Seduction”, with a &lt;em&gt;lot&lt;/em&gt; more insight and tips in them.&lt;/p&gt;
&lt;p&gt;If you’re a UX designer, a designer, a web developer, or any person interested in learning more about human behavior, or interested in making your products more popular or trying to build a stronger online existence, then this is definitely a must-read for you. I cannot recommend this book enough.&lt;/p&gt;
&lt;p&gt;After reading this book, I’m definitely never going to look at applications and UX like I used to, because it gave me a lot of insight, and helped me see and understand the reasons behind successful user experiences, and taught me how I could apply these principles even to a small website, not just a huge application.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed this article and found it useful. Thank you for reading! &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>How to Create Windows-8-like animations with CSS3 and jQuery</title>
    <link href="https://sarasoueidan.com/blog/windows8-animations/"/>
    <updated>2013-02-11T00:00:00Z</updated>
    <id>https://sarasoueidan.com/blog/windows8-animations/</id>
    <content type="html">&lt;p class=&quot;deck&quot;&gt;I have recently realized that CSS3 3D transforms have been out there for quite a long time now and yet I haven&#39;t experimented with them yet. I have also been using Windows 8 for a while now, and the first thing that struck me as impressive about it was the transitions and animations built into the dashboard, so I thought it would be really cool if  my first experiment with CSS 3D transforms would be to recreate those animations and effects. So, here goes the tutorial on how I did that.
&lt;/p&gt;
&lt;p class=&quot;note warning&quot;&gt;Please note that this demo works only in &lt;a href=&quot;http://caniuse.com/#feat=transforms3d&quot;&gt;browsers that support&lt;/a&gt; the CSS3 properties used. &lt;/p&gt;
&lt;p class=&quot;note&quot;&gt;For the sake of brevity in the example code, I am using the un-prefixed CSS properties, but you will find the prefixes in the downloadeable source code on Github.&lt;/p&gt;
&lt;h3 class=&quot;deeplink&quot; id=&quot;markup&quot;&gt;The Markup&lt;/h3&gt; 
&lt;p&gt;The demo&#39;s structure is pretty simple: The dashboard is a list of tiles, of three sizes, small, big, and 2xbig, floated inside 3 columns. And then there are  their corresponding &quot;pages&quot;. A page is an overlay which opens when u click on one of the boxes on the dashboard. It represents an app on desktop, with each of the tiles being the shortcut to that app.&lt;/p&gt;
&lt;p&gt;Each tile will open up a corresponding page. There are two kinds of page transitions included in the Windows 8 dashboard: one that opens the page in a 3D rotating effect from the right of the screen, and one that slides the page in and back to the left. We will define a class name for each type of page as &lt;code&gt; s-page&lt;/code&gt; for the pages that slide from and to the left, and &lt;code&gt; r-page&lt;/code&gt; for pages that rotate open from the right.&lt;/p&gt;
&lt;p&gt;Now, for each tile, we need to specify what type of page it opens (depending on the effect you want for that page). We will define the type of the page for each tile in a custom data attribute called &lt;code&gt; data-page-type&lt;/code&gt;, this will take care of applying the right class names triggering the right animations later on.&lt;/p&gt;
&lt;p&gt;Each page should also have a name. The page name for a certain app will be different from that of another app, so the &quot;Skype&quot; tile opens up a page called &quot;skype-app&quot; for example. I&#39;ve used only two page names in this example, which are repeated for all tiles, and used a &lt;code&gt; custom-page&lt;/code&gt; name for the last tile for sake of example. You&#39;ll probably have to add a different page for each tile, hence a different page name specified in every tile.&lt;/p&gt;
&lt;p&gt;Here&#39;s the markup for the whole dashboard (tiles and pages):&lt;/p&gt;
&lt;pre class=&quot;brush:html;&quot; style=&quot;max-height:600px; overflow-y: scroll;&quot;&gt;
            &amp;lt;div class=&quot;demo-wrapper&quot;&amp;gt;
              &amp;lt;!-- classnames for the pages should include: 1) type of page 2) page name--&amp;gt;
               &amp;lt;div class=&quot;s-page random-restored-page&quot;&amp;gt;
                  &amp;lt;div class=&quot;page-content&quot;&amp;gt;
                    &amp;lt;h2 class=&quot;page-title&quot;&amp;gt;Some minimized App&amp;lt;/h3&amp;gt;
                    &amp;lt;div class=&quot;close-button s-close-button&quot;&amp;gt;x&amp;lt;/div&amp;gt;
                  &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;s-page custom-page&quot;&amp;gt;
                  &amp;lt;div class=&quot;page-content&quot;&amp;gt;
                    &amp;lt;h2 class=&quot;page-title&quot;&amp;gt;Thank You!&amp;lt;/h3&amp;gt;
                    &amp;lt;div class=&quot;close-button s-close-button&quot;&amp;gt;x&amp;lt;/div&amp;gt;
                  &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;r-page random-r-page&quot;&amp;gt;
                  &amp;lt;div class=&quot;page-content&quot;&amp;gt;
                    &amp;lt;h2 class=&quot;page-title&quot;&amp;gt;App Screen&amp;lt;/h3&amp;gt;
                    &amp;lt;p&amp;gt;Chew iPad power cord chew iPad power cord attack feet chase mice leave dead animals as gifts and stick butt in face chew iPad power cord. Chase mice. Run in circles use lap as chair why must they do that. Intrigued by the shower destroy couch leave hair everywhere sleep on keyboard chew iPad power cord. Use lap as chair. Missing until dinner time stand in front of the computer screen, intently sniff hand. Find something else more interesting. Destroy couch play time so inspect anything brought into the house hate dog burrow under covers. Sleep on keyboard destroy couch so hate dog so hide when guests come over. Chase mice destroy couch lick butt throwup on your pillow use lap as chair yet intrigued by the shower but climb leg. Stare at ceiling make muffins or hunt anything that moves claw drapes. Intently sniff hand intrigued by the shower. Why must they do that. Cat snacks leave dead animals as gifts or inspect anything brought into the house sweet beast so stare at ceiling give attitude. Flop over claw drapes but sun bathe lick butt, and chase mice. Rub face on everything lick butt leave hair everywhere lick butt, missing until dinner time for use lap as chair lick butt. Make muffins leave dead animals as gifts play time. Chew foot intrigued by the shower stare at ceiling inspect anything brought into the house yet hopped up on goofballs. 

                    Hunt anything that moves intently sniff hand for hunt anything that moves play time. Chew foot climb leg throwup on your pillow so lick butt yet make muffins hate dog. Intrigued by the shower. Intently sniff hand shake treat bag. Cat snacks burrow under covers make muffins but all of a sudden go crazy find something else more interesting. Flop over chase mice. Give attitude. Inspect anything brought into the house. Stick butt in face sun bathe so find something else more interesting and intrigued by the shower. Rub face on everything use lap as chair. 

                    Under the bed claw drapes chase mice but leave hair everywhere yet make muffins yet claw drapes. Use lap as chair. Find something else more interesting stretch for under the bed. Nap all day intrigued by the shower, hate dog sweet beast intently sniff hand so hate dog nap all day. Swat at dog hide when guests come over and mark territory chase mice for cat snacks. Use lap as chair. Lick butt throwup on your pillow need to chase tail. 

                    Mark territory. Stick butt in face shake treat bag yet hunt anything that moves, yet hopped up on goofballs yet stare at ceiling under the bed. Give attitude chase imaginary bugs stretch so hunt anything that moves so hide when guests come over but intrigued by the shower find something else more interesting. Make muffins behind the couch for chew foot. Sweet beast flop over but throwup on your pillow. Intently sniff hand use lap as chair and missing until dinner time and chase imaginary bugs. 
                    &amp;lt;/p&amp;gt;
                  &amp;lt;/div&amp;gt;
                  
                  &amp;lt;div class=&quot;close-button r-close-button&quot;&amp;gt;x&amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;!--each tile should specify what page type it opens (to determine which animation) and the corresponding page name it should open--&amp;gt;
                &amp;lt;div class=&quot;dashboard clearfix&quot;&amp;gt;
                  &amp;lt;ul class=&quot;tiles&quot;&amp;gt;
                    &amp;lt;div class=&quot;col1 clearfix&quot;&amp;gt;
                      &amp;lt;li class=&quot;tile tile-big tile-1 slideTextUp&quot; data-page-type=&quot;r-page&quot; data-page-name=&quot;random-r-page&quot;&amp;gt;
                        &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;This tile&#39;s content slides up&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
                        &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;View all tasks&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
                      &amp;lt;/li&amp;gt;
                      &amp;lt;li class=&quot;tile tile-small tile tile-2 slideTextRight&quot; data-page-type=&quot;s-page&quot; data-page-name =&quot;random-restored-page&quot;&amp;gt;
                        &amp;lt;div&amp;gt;&amp;lt;p class=&quot;icon-arrow-right&quot;&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
                        &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Tile&#39;s content slides right. Page opens from left&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
                      &amp;lt;/li&amp;gt;
                      &amp;lt;li class=&quot;tile tile-small last tile-3&quot; data-page-type=&quot;r-page&quot; data-page-name=&quot;random-r-page&quot;&amp;gt;
                        &amp;lt;p class=&quot;icon-calendar-alt-fill&quot;&amp;gt;&amp;lt;/p&amp;gt;
                      &amp;lt;/li&amp;gt;
                      &amp;lt;li class=&quot;tile tile-big tile-4&quot; data-page-type=&quot;r-page&quot; data-page-name=&quot;random-r-page&quot;&amp;gt;
                        &amp;lt;figure&amp;gt;
                          &amp;lt;img src=&quot;images/blue.jpg&quot; /&amp;gt;
                          &amp;lt;figcaption class=&quot;tile-caption caption-left&quot;&amp;gt;Slide-out Caption from left&amp;lt;/figcaption&amp;gt;
                        &amp;lt;/figure&amp;gt;
                      &amp;lt;/li&amp;gt;
                    &amp;lt;/div&amp;gt;

                    &amp;lt;div class=&quot;col2 clearfix&quot;&amp;gt;
                      &amp;lt;li class=&quot;tile tile-big tile-5&quot; data-page-type=&quot;r-page&quot; data-page-name=&quot;random-r-page&quot;&amp;gt;
                        &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&quot;icon-cloudy&quot;&amp;gt;&amp;lt;/span&amp;gt;Weather&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
                      &amp;lt;/li&amp;gt;
                      &amp;lt;li class=&quot;tile tile-big tile-6 slideTextLeft&quot; data-page-type=&quot;r-page&quot; data-page-name=&quot;random-r-page&quot;&amp;gt;
                        &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;span class=&quot;icon-skype&quot;&amp;gt;&amp;lt;/span&amp;gt;Skype&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
                        &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Make a Call&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
                      &amp;lt;/li&amp;gt;
                      &amp;lt;!--Tiles with a 3D effect should have the following structure:
                          1) a container inside the tile with class of .faces
                          2) 2 figure elements, one with class .front and the other with class .back--&amp;gt;
                      &amp;lt;li class=&quot;tile tile-small tile-7 rotate3d rotate3dX&quot; data-page-type=&quot;r-page&quot; data-page-name=&quot;random-r-page&quot;&amp;gt;
                        &amp;lt;div class=&quot;faces&quot;&amp;gt;
                          &amp;lt;div class=&quot;front&quot;&amp;gt;&amp;lt;span class=&quot;icon-picassa&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
                          &amp;lt;div class=&quot;back&quot;&amp;gt;&amp;lt;p&amp;gt;Launch Picassa&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                      &amp;lt;/li&amp;gt;
                      &amp;lt;li class=&quot;tile tile-small last tile-8 rotate3d rotate3dY&quot; data-page-type=&quot;r-page&quot; data-page-name=&quot;random-r-page&quot;&amp;gt;
                        &amp;lt;div class=&quot;faces&quot;&amp;gt;
                          &amp;lt;div class=&quot;front&quot;&amp;gt;&amp;lt;span class=&quot;icon-instagram&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
                          &amp;lt;div class=&quot;back&quot;&amp;gt;&amp;lt;p&amp;gt;Launch Instagram&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
                        &amp;lt;/div&amp;gt;
                      &amp;lt;/li&amp;gt;
                    &amp;lt;/div&amp;gt;

                    &amp;lt;div class=&quot;col3 clearfix&quot;&amp;gt;      
                      &amp;lt;li class=&quot;tile tile-2xbig tile-9&quot; data-page-type=&quot;custom-page&quot; data-page-name=&quot;random-r-page&quot;&amp;gt;
                        &amp;lt;figure&amp;gt;
                          &amp;lt;img src=&quot;images/summer.jpg&quot; /&amp;gt;
                          &amp;lt;figcaption class=&quot;tile-caption caption-bottom&quot;&amp;gt;Fixed Caption: Some Subtitle or Tile Description Goes Here with some kinda link or anything
                          &amp;lt;/figure&amp;gt;
                      &amp;lt;/li&amp;gt;
                      &amp;lt;li class=&quot;tile tile-big tile-10&quot; data-page-type=&quot;s-page&quot; data-page-name=&quot;custom-page&quot;&amp;gt;
                        &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;Windows-8-like Animations with CSS3 &amp;amp; jQuery &amp;copy; Sara Soueidan. Licensed under MIT.&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;
                      &amp;lt;/li&amp;gt;
                    &amp;lt;/div&amp;gt;
                  &amp;lt;/ul&amp;gt;
                &amp;lt;/div&amp;gt;&amp;lt;!--end dashboard--&amp;gt;
              &amp;lt;/div&amp;gt;
    ```

&lt;p&gt;The icon font I&#39;m using is from &lt;strong&gt;Icomoon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What will happen is that the Javascript will get the name and type of page to be opened when a tile is clicked, and then, according to the type of the page, it will apply specific class names to the page (whose name we have also retrieved from the &lt;code&gt;data-page-name&lt;/code&gt; attribute) to open it with the specified type of animation for each class applied.&lt;/p&gt;

&lt;h3 class=&quot;deeplink&quot; id=&quot;css&quot;&gt;The CSS&lt;/h3&gt; 

&lt;p class=&quot;note&quot;&gt;Please note that I&#39;m taking a mobile-first approach to the styles, which we&#39;ll then make responsive in the media queries section.&lt;/p&gt;

&lt;p&gt;First, the styles for the demo wrapper, the container in which the whole demo will be contained. We&#39;ll define general styles, and make sure to set a &lt;code&gt;perspective&lt;/code&gt; to activate the 3D space, otherwise, the whole demo will look flat and two dimensional.&lt;/p&gt;

```css
            .demo-wrapper {
              padding: 2em .5em;
              width: 100%;
              height:100%;
              perspective: 3300px;
              position: relative;
            }
    ```

&lt;p&gt;Now let&#39;s start with the dashboard styles and animations.&lt;/p&gt;

&lt;p&gt;The first animation applied to the dashboard is fired when the page loads. The dashboard is initially hidden and translated to the right of the screen, and fades and translates in to position on page load.&lt;/p&gt;

```css 
            .dashboard {
              margin: 0 auto;
              width: 100%;
              padding: 1em;
              transform: translateX(200px);
              opacity:0;
              animation: start 1s ease-out forwards;
            }
            @keyframes start{
              0%{
                transform: translateX(200px);
                opacity:0;
              }
              50%{
                opacity:1;
              }
              100%{
                transform: translateX(0);
                opacity:1;
              }
            }
    ```
    
&lt;p&gt;The dashboard also fades into the view and fades back when a tile is clicked. Once a tile is clicked, the dashboard translates back along the z-axis, decreases in size, and fades its opacity gradually till it becomes 0. And when an opened page is closed, the dashboard fades back into the view.&lt;/p&gt;

&lt;p&gt;The three columns in the dashboard fade in one after the other, with a slight delay between them. When a page is closed, a class name is added to each column (via Javascript), and each of these classes calls the animation with a certain delay.&lt;/p&gt;

&lt;p&gt;Here are the classes and the animations applied to the dashboard upon clicking the tiles and closing the pages:&lt;/p&gt;

```css
            .fadeOutback{
             animation: fadeOutBack 0.3s ease-out 1 normal forwards;
            }
            .fadeInForward-1, .fadeInForward-2, .fadeInForward-3 {
              /*remember: in the second animation u have to set the final values reached by the first one*/
              opacity:0;
              transform: translateZ(-5em) scale(0.75);
              animation: fadeInForward .5s cubic-bezier(.03,.93,.43,.77) .4s normal forwards;
            }
        
            .fadeInForward-2{
              animation-delay: .55s;
            }
            .fadeInForward-3{
              animation-delay: .7s;
            }
        
            @keyframes fadeOutBack{
              0% {transform: translateX(-2em) scale(1); opacity:1;}
              70% {transform: translateZ(-5em) scale(0.6); opacity:0.5;}
              95% {transform: translateZ(-5em) scale(0.6); opacity:0.5;}
              100% {transform: translateZ(-5em) scale(0); opacity:0;}
            }
            @keyframes fadeInForward{
              0% {transform: translateZ(-5em) scale(0); opacity:0;}
              100% {transform: translateZ(0) scale(1); opacity:1;}
            }
    ``` 
&lt;p&gt;Now we&#39;re going to style the pages.&lt;/p&gt;

```css 
            .r-page {
              width: 100%;
              height: 100%;
              text-align: center;
              font-size: 2em;
              font-weight: 300;
              position: absolute;
              right: 0;
              top: 0;
              left:0;
              bottom:0;
              opacity: 0;
              color: white;
              z-index: 10;
              padding:10px;
              transform-origin: 100% 0%;
              transform: rotateY(-90deg) translateZ(5em)
            }

            .s-page {
              color: white;
              z-index: 10;
              text-align: center;
              font-size: 2em;
              font-weight: 300;
            }
            .page-content{
              overflow-y:auto;
              max-height:100%;
              font-size:.6em;
              padding:.6em;
              text-align:left;
            }

            .s-page, .r-page{
              background-color: white;
              color:black;
            }

            .page-title {
              margin: .25em 0;
              font-weight: 100;
              font-size: 3em;
              text-align:center;
            }

            .close-button {
              font-size: 1.5em;
              width: 1em;
              height: 1em;
              position: absolute;
              top: .75em;
              right: .75em;
              cursor: pointer;
              line-height: .8em;
              text-align: center
            }

    ```
&lt;p&gt;I&#39;ve set the original position of each &lt;code&gt;r-page&lt;/code&gt; in the 3D space by first rotating it about the y-axis (the vertical axis), then I moved the page 5em to the left of the screen by using &lt;code&gt;translateZ&lt;/code&gt;. Always remember: when u transform an element in 3D, you transform its coordinate system along with it. What I wanted to do is move the page 5em to the left of the screen, but instead of using &lt;code&gt;translateX&lt;/code&gt; I used &lt;code&gt;translateZ&lt;/code&gt;, because after the first tranformation (rotation about y axis), the coordinate system was also rotated, so now the z-axis points towards the left, and the x-axis is pointing towards you, the viewer.&lt;/p&gt;

&lt;p&gt;All the pages, except the s-page app page, have the same initial position in the 3D space. The &lt;code&gt;s-page&lt;/code&gt;s, on the other hand, are positioned -150% left of the screen off canvas, so that they slide into view when their animation is fired.&lt;/p&gt;

&lt;p&gt;
Once the tile for each page is clicked, a corresponding class is added (via javascript) to the page that will open, and each class calls for a certain animation. So, each page will get a class name that will define the 3D effect for the page.
&lt;/p&gt;

&lt;p&gt;These are the class names that trigger the opening and closing of the pages, along with the animations defined for each class.&lt;/p&gt;

```css
            /* opens the r-page type pages*/
            .openpage{ 
              animation: rotatePageInFromRight 1s cubic-bezier(.66,.04,.36,1.03) 1 normal forwards;
            }
            /* closes the r-page type pages */
            .slidePageLeft{
              transform: rotateY(0) translateZ(0) ; opacity:1;
              animation:slidePageLeft .8s ease-out 1 normal forwards;
            }
            /* opens the s-page type pages */
            .slidePageInFromLeft{
              animation: slidePageInFromLeft .8s cubic-bezier(.01,1,.22,.99) 1 0.25s normal forwards;
            }
            /* closes the s-page type pages*/
            .slidePageBackLeft{
              opacity:1; 
              left:0;
              animation: slidePageBackLeft .8s ease-out 1 normal forwards;
            }
    ```
&lt;p&gt;I&#39;m using the &lt;code&gt;animation&lt;/code&gt; &lt;a href=&quot;http://www.w3.org/TR/css3-animations/#animation-shorthand-property&quot;&gt;shorthand property&lt;/a&gt; here. The last value &lt;code&gt;forwards&lt;/code&gt; corresponds to the &lt;code&gt;animation-fill-mode&lt;/code&gt; property, which must be set to &lt;code&gt;forwards&lt;/code&gt;, otherwise the page will get back to its initial &quot;closed&quot; position after the animation is over. So, in order to keep the page open, and be able to create sequential animations, the element has to stay in the final state defined by the first animation, and from there start the second animation.&lt;/p&gt;

&lt;p&gt;These are the animations for the classes applied to the pages:&lt;/p&gt;

```css
          @keyframes rotatePageInFromRight{
            0% {transform:rotateY(-90deg) translateZ(5em);opacity:0}
            30% {opacity:1}
            100% {transform: rotateY(0deg) translateZ(0) ; opacity:1}
          }
        
          /*When the close-button is clicked, the page slides to the left*/
          /*note that the start of the second animation is the same state as the
          end of the previous one*/
        
          @keyframes slidePageLeft{
            0% {left:0; transform: rotateY(0deg) translateZ(0) ; opacity:1}
            70% {opacity:1;}
            100% {opacity:0; left:-150%; transform: rotateY(0deg)}
          }
          @keyframes slidePageInFromLeft{
            0% {opacity:0; }
            30% {opacity:1}
            100% {opacity:1; left:0;}
          }
          @keyframes slidePageBackLeft{
            0% {opacity:1; left:0; transform: scale(0.95);}
            10% {transform: scale(0.9);}
            70% {opacity:1;}
            100% {opacity:0; left:-150%;}
          }
    ```
&lt;p&gt;Last but not least we&#39;ll style the dashboard tiles and define the transitions and animations applied to them when they are hovered.&lt;/p&gt;

&lt;p&gt;General styles defining the size of the tiles:&lt;/p&gt;

```css
            .tile{
              float: left;
              margin: 0 auto 1%;
              color: white;
              font-size: 1.3em;
              text-align: center;
              height: 8em;
              font-weight: 300;
              overflow: hidden;
              cursor: pointer;
              position:relative;
              background-color: #fff;
              color: #333;
              position:relative;
              transition: background-color 0.2s ease-out
            }
            .tile-2xbig{
              height:16.15em;
              width:100%;
            }
            .tile-big {
              width: 100%
            }
            .tile-small {
              width: 49%;
              margin-right: 2%
            }
            .tile-small.last {
              margin-right: 0
            }
    ```
&lt;p&gt;A couple of tiles contain an image along with an image caption. These tiles will get a class &lt;code&gt;fig-tile&lt;/code&gt; to determine their type in the Javascript code. The colors used for the text and background of the corresponding page will be retrieved from the colors of the caption, so don&#39;t forget to define them.The caption can be either fixed, or it can slide in when the tile is hovered:&lt;/p&gt;

```css
            .tile-caption{
              position:absolute;
              z-index:1;
              background-color: #455962;
              color:#fff;
              font-size:1em;
              padding:1em;
              text-align: left;
            }
            .caption-bottom{
              left:0;
              bottom:0;
              right:0;
              height:40%;
            }
            .caption-left{
              left:-100%;
              top:0;
              bottom:0;
              width:40%;
              transition: left .3s linear;
            }
            .tile:hover .caption-left{
              left:0;
            }
    ```
&lt;p&gt;Regular tiles, with no special kind of animation, will change their background and text color on hover. In order to make sure the text is vertically centered in each tile, each one will contain a &lt;code&gt;div&lt;/code&gt; with a paragraph containing the text. We&#39;ll use the table-cell display property to center this text vertically.&lt;/p&gt;

```css
            .tile div{
              position:absolute;
              top:0; left:0; right:0; bottom:0;
              width:100%;
              height:100%;
              text-align:center;
              display:table;
              padding:0 1em;
              transition: all .3s ease;
            }
            .tile div p{
              display:table-cell;
              vertical-align:middle;
            }
    ```
&lt;p&gt;I&#39;ll skip the general styles of the tiles for sake of brevity, but make sure you set a background and text color on all tiles, even the ones that will be covered by an image, because these colors will be retrieved via Javascript and set as the colors for the corresponding page of this tile. Let&#39;s move on to the animations and transitions on the tiles.&lt;/p&gt;

&lt;p&gt;Tiles with text sliding inside of them will contain two &lt;code&gt;div&lt;/code&gt;s, each div will be like a &quot;face&quot; or a block inside the tile. These &lt;code&gt;div&lt;/code&gt;s are positioned absolutely, and moved on hover according to the direction of slide we want.&lt;/p&gt;

&lt;p&gt;For a tile&#39;s text to slide up on hover, we&#39;ll apply a class &lt;code&gt;slideTextUp&lt;/code&gt;.&lt;/p&gt;

```css
            /* slide text inside tile up */
            /* 2nd div will be positioned below the bottom of the tile*/
            .slideTextUp div:nth-child(2){
              top:100%;
            }
            /*both divs will be translated up on hover*/
            .slideTextUp:hover div{
              transform: translateY(-100%);
            }
            .tile-1 p{
              font-size:1.3em;
            }
    ```

&lt;p&gt;Similarly, tiles with text sliding to the right and left, will get class names &lt;code&gt;slideTextLeft&lt;/code&gt; and &lt;code&gt;slideTextRight&lt;/code&gt;, with a similar structure as the above tile.&lt;/p&gt;

```css
            /* slide text inside tile to the right*/
            .slideTextRight div:first-child{
              left:-100%;
            }
            .slideTextRight:hover div{
              transform: translateX(100%);
            } 

            /* slide text inside tile to the left */
            .slideTextLeft div:nth-child(2){
              left:100%;
            }
            .slideTextLeft:hover div{
              transform: translateX(-100%);
            } 
    ```
&lt;p&gt;A couple tiles have a different hover effect, they rotate to reveal the back face of the tile. This effect is a very simple and basic &quot;card flip&quot; effect. I won&#39;t get into the details of this effect, but if you&#39;re new to this, you can read more about it in &lt;a href=&quot;http://desandro.github.io/3dtransforms/docs/card-flip.html&quot;&gt;this excellent tutorial&lt;/a&gt; by David De Sandro.&lt;/p&gt;

&lt;p&gt;For this flipping effect, apply a &lt;code&gt;rotate3d&lt;/code&gt; class to the tile you want to flip. For a card with a vertical flip we&#39;ll add a class &lt;code&gt;rotate3dY&lt;/code&gt;, and for a horizontal flip we&#39;ll apply a class &lt;code&gt;rotate3dX&lt;/code&gt; (in addition to the &lt;code&gt;rotate3d&lt;/code&gt; class), and we&#39;ll apply the following styles: &lt;/p&gt;

```css
            /* rotate tile in 3D*/
            .rotate3d{
              /* add a perspective to the tile to activate 3d space inside it*/
              perspective: 800px;
              overflow: visible;
            }
            .faces{
              /* preserve the 3d space in the container wrapping the two &quot;faces&quot; and define a transition */
              transform-style: preserve-3d;
              transition: transform 1s;
            }
            .faces div {
              /* position faces on top of each other */
              display: block;
              position: absolute;
              top:0; left:0; right:0; bottom:0;
              width: 100%;
              height: 100%;
              /* hide backface visibility so that the back of the face is hidden when it&#39;s rotated */
              backface-visibility: hidden;
            }
    ```
&lt;p&gt;We&#39;ll rotate one of the faces in the tiles so that the two faces are back to back.&lt;/p&gt;

```css
            .rotate3dY .back{
              transform: rotateY( 180deg );
            }
            .rotate3dX .back{
              transform: rotateX( 180deg );
            }
    ```
&lt;p&gt;And when the tile is hovered, the &lt;code&gt;.faces&lt;/code&gt; &lt;code&gt;div&lt;/code&gt; will be rotated to reveal the back face. &lt;/p&gt;

```css
            .rotate3dY:hover .faces:hover{
                transform: rotateY( 180deg );
            }
            .rotate3dX:hover .faces:hover{
                transform: rotateX( 180deg );
            }
    ```
&lt;p&gt;For styles rotating in 3D, remember to set a background and text color for the &lt;code&gt;.front&lt;/code&gt; face, so that these colors be retrieved and set to the tile&#39;s page when it is opened.&lt;/p&gt;&lt;p&gt;

&lt;/p&gt;&lt;p&gt;And that&#39;s all for the styles and animations!&lt;/p&gt;

&lt;p&gt;Now let&#39;s define responsive styles for the dashboard. Dashboard columns are initially full-width on small screens (remember we&#39;re starting mobile-first), and they will be floated next to each other on big screens.&lt;/p&gt;

```css
            .col1,
            .col2,
            .col3 {
              width: 99%;
              margin: 1em auto
            }
            @media screen and (min-width: 43.75em) {
              .col1,
              .col2,
              .col3 {
                float: left;
                margin-right: 1%;
                width: 49%
              }
              .page-title{
                font-size:2.5em;
              }
              .page-content{
                font-size:1em;
              }
              .close-button{
                font-size:2em;
              }
            }

            @media screen and (min-width: 64em) {
              .col1,
              .col2,
              .col3 {
                float: left;
                margin-right: .5%;
                width: 31%
              }

              .col3 {
                margin-right: 0
              }

              .col1 {
                margin-left: 2em
              }
              .page-title{
                font-size:3.5em;
              }
            }
    ```

&lt;h3 class=&quot;deeplink&quot; id=&quot;javascript&quot;&gt;The Javascript&lt;/h3&gt; 

&lt;p&gt;All click events will be handled wtih Javascript. I&#39;ll be using jQuery for this example. Event handlers are going to be set on each of the dashboard tiles, and when a click event is detected, we&#39;re going to retrieve the name and type of the corresponding page from the &lt;code&gt;data-page-type&lt;/code&gt; and &lt;code&gt;data-page-name&lt;/code&gt; attributes, and use these to open the page.&lt;/p&gt;

&lt;p&gt;Other click events will be handled when clicking on the close button in each page. The close button for each page type will apply the suitable class names to close this page type.&lt;/p&gt;

&lt;p&gt;Additionally, in order to give each page the same background color and text color as its corresponding tile, we will first loop through the tiles, retrieve its colors, and then applies it to its corresponsing page. If a tile has a &lt;code&gt;rotate3d&lt;/code&gt; class, it looks for the background-color of the front &quot;face&quot; of the tile, and applies that to the page.&lt;/p&gt;

&lt;pre class=&quot;brush:javascript;&quot;&gt;
            (function(){
                //get the background-color for each tile and apply it as background color for the cooresponding screen
                $(&#39;.tile&#39;).each(function(){
                    var $this= $(this),
                        page = $this.data(&#39;page-name&#39;),
                        bgcolor = $this.css(&#39;background-color&#39;),
                        textColor = $this.css(&#39;color&#39;);
                    //if the tile rotates, we&#39;ll use the colors of the front face
                        if($this.hasClass(&#39;rotate3d&#39;)) {
                          frontface = $this.find(&#39;.front&#39;);
                          bgcolor = frontface.css(&#39;background-color&#39;);
                          textColor = frontface.css(&#39;color&#39;);
                        }
                    //if the tile has an image and a caption, we&#39;ll use the caption styles
                        if($this.hasClass(&#39;fig-tile&#39;)) {
                          caption = $this.find(&#39;figcaption&#39;);
                          bgcolor = caption.css(&#39;background-color&#39;);
                          textColor = caption.css(&#39;color&#39;);
                        }

                    $this.on(&#39;click&#39;,function(){
                      $(&#39;.&#39;+page).css({&#39;background-color&#39;: bgcolor, &#39;color&#39;: textColor})
                                 .find(&#39;.close-button&#39;).css({&#39;background-color&#39;: textColor, &#39;color&#39;: bgcolor});
                    });
                });

                function showDashBoard(){
                  for(var i = 1; i &lt;= 3; i++) {
                    $(&#39;.col&#39;+i).each(function(){
                        $(this).addClass(&#39;fadeInForward-&#39;+i).removeClass(&#39;fadeOutback&#39;);
                    });
                  }
                }

                function fadeDashBoard(){
                  for(var i = 1; i &lt;= 3; i++) {
                    $(&#39;.col&#39;+i).addClass(&#39;fadeOutback&#39;).removeClass(&#39;fadeInForward-&#39;+i);
                  }
                }
              
                
              //listen for when a tile is clicked
              //retrieve the type of page it opens from its data attribute
              //based on the type of page, add corresponding class to page and fade the dashboard
              $(&#39;.tile&#39;).each(function(){
                var $this= $(this),
                    pageType = $this.data(&#39;page-type&#39;),
                    page = $this.data(&#39;page-name&#39;);
                    
                $this.on(&#39;click&#39;,function(){
                  if(pageType === &quot;s-page&quot;){
                      fadeDashBoard();
                      $(&#39;.&#39;+page).addClass(&#39;slidePageInFromLeft&#39;).removeClass(&#39;slidePageBackLeft&#39;);
                    }
                    else{
                      $(&#39;.&#39;+page).addClass(&#39;openpage&#39;);
                      fadeDashBoard();
                    }
                });
              });

              //when a close button is clicked:
              //close the page
              //wait till the page is closed and fade dashboard back in
              $(&#39;.r-close-button&#39;).click(function(){
                  $(this).parent().addClass(&#39;slidePageLeft&#39;)
                      .one(&#39;webkitAnimationEnd oanimationend msAnimationEnd animationend&#39;, function(e) {
                            $(this).removeClass(&#39;slidePageLeft&#39;).removeClass(&#39;openpage&#39;);
                          });
                  showDashBoard();
              });
              $(&#39;.s-close-button&#39;).click(function(){
                  $(this).parent().removeClass(&#39;slidePageInFromLeft&#39;).addClass(&#39;slidePageBackLeft&#39;);
                  showDashBoard();
              });

            })();
    ```
&lt;p&gt;And that&#39;s it!&lt;br /&gt; I hope you enjoyed this tutorial and found it useful! :)&lt;/p&gt;
&lt;/pre&gt;&lt;/pre&gt;</content>
  </entry>
</feed>
