<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
	<title>Jakub Arnold&#39;s Blog</title>
	<link>https://blog.jakuba.net/</link>
	<description>Recent content on Jakub Arnold&#39;s Blog</description>
	<generator>Hugo -- gohugo.io</generator>
	<language>en-us</language>
	<lastBuildDate>Sat, 09 May 2020 10:00:00 +0200</lastBuildDate>
    
        <atom:link href="https://blog.jakuba.net/index.xml" rel="self" type="application/rss+xml" />
	
	
	<item>
		<title>requestAnimationFrame and useEffect vs useLayoutEffect</title>
		<link>https://blog.jakuba.net/request-animation-frame-and-use-effect-vs-use-layout-effect/</link>
		<pubDate>Sat, 09 May 2020 10:00:00 +0200</pubDate>
		
		<guid>https://blog.jakuba.net/request-animation-frame-and-use-effect-vs-use-layout-effect/</guid>
		<description>&lt;p&gt;While trying to implement an animated number counter I stumbled upon an interesting issue with &lt;code&gt;useEffect&lt;/code&gt; and &lt;code&gt;requestAnimationFrame&lt;/code&gt; not playing together nicely that lead down a rabbit hole of confusion, but lucky for me I wasn&amp;rsquo;t the first one to stumble upon this, and &lt;a href=&#34;https://github.com/streamich/react-use&#34;&gt;react-use&lt;/a&gt; actually has resolved this exact issue in their &lt;a href=&#34;https://github.com/streamich/react-use/blob/master/docs/useRaf.md&#34;&gt;&lt;code&gt;useRaf&lt;/code&gt; hook&lt;/a&gt;. This post is a short explanation of the problem, and why &lt;code&gt;useLayoutEffect&lt;/code&gt; fixes it.&lt;/p&gt;
&lt;h2 id=&#34;useeffect&#34;&gt;&lt;code&gt;useEffect&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; hook is a useful new addition since React 16.8 that allows us to access lifecycle methods in functional components. It can act as &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt; while keeping the logic neatly in one place. Let&amp;rsquo;s quickly go over the few different use cases.&lt;/p&gt;
&lt;p&gt;Running code after each render:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; Counter&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  useEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;document&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;title &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;`Counter: &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;${&lt;/span&gt;counter&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;counter &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)}&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Clicked &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; times
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While on some level this acts as &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentDidUpdate&lt;/code&gt;, what it really says is &lt;em&gt;queue this function to run on each render&lt;/em&gt;. As a quick side note, you might be tempted to write the arrow function without braces like this (it might be more tempting with something else than an assignment, such as a function call):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;useEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;document&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;title &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;`Counter: &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;${&lt;/span&gt;counter&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but if you try it React will crash with &lt;code&gt;TypeError: destroy is not a function&lt;/code&gt;. This might be surprising at first, but the difference is the arrow function is now actually returning the value of the assignment, that is the string &lt;code&gt;Counter: ${counter}&lt;/code&gt;. In order for &lt;code&gt;useEffect&lt;/code&gt; to also handle cleanup (and be able to replace &lt;code&gt;componentWillUnmount&lt;/code&gt;), it has a mechanism for the user to provide a cleanup function. This is actually what we did by accident, because the cleanup function is to be returned from the &lt;code&gt;effect&lt;/code&gt;. But this shorter arrow function syntax is equivalent to writing the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;useEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;document&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;title &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;`Counter: &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;${&lt;/span&gt;counter&lt;span style=&#34;color:#a3be8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it should be more clear why react complains. It expects the return value to either be &lt;code&gt;undefined&lt;/code&gt;, in which case it doesn&amp;rsquo;t do any cleanup, or a &lt;code&gt;function&lt;/code&gt; which can be called. But we&amp;rsquo;re returning a string, which is not &lt;code&gt;undefined&lt;/code&gt;, and React will crash when it tries to call it.&lt;/p&gt;
&lt;h3 id=&#34;useeffect-cleanup&#34;&gt;&lt;code&gt;useEffect&lt;/code&gt; cleanup&lt;/h3&gt;
&lt;p&gt;Our previous example didn&amp;rsquo;t really have any need for cleanup. We&amp;rsquo;ll switch to using &lt;code&gt;setInterval&lt;/code&gt; to create an auto-incrementing &lt;code&gt;counter&lt;/code&gt; where we can also control the speed at which it increments.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with a basic structure that is buggy and we&amp;rsquo;ll incrementally fix it. We&amp;rsquo;ll add a second state variable &lt;code&gt;speed&lt;/code&gt; which will control the &lt;code&gt;timeout&lt;/code&gt; parameter of a &lt;code&gt;setInterval&lt;/code&gt;. We&amp;rsquo;ll also add two buttons to control the &lt;code&gt;speed&lt;/code&gt; of the timer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; Counter&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;speed&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setSpeed&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  useEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Similarly to `this.setState` in class components, `setCounter`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// can accept a function that takes in the current value and
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// returns a new value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;      setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; speed&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Counter&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;...&lt;/span&gt; Speed&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;speed&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; setSpeed&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;speed &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)}&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;/* The `Math.max` is here simply so we don&amp;#39;t set the speed to `0` */&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; setSpeed&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; speed &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))}&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you were to run this code you&amp;rsquo;ll see the issue very quickly (&lt;a href=&#34;https://codesandbox.io/s/patient-http-qm0o1&#34;&gt;you can try it here&lt;/a&gt;, but be careful, it gets very laggy very quickly). The timer doesn&amp;rsquo;t increment by &lt;code&gt;1&lt;/code&gt; every second. It increments by &lt;code&gt;1&lt;/code&gt; the first second, then by &lt;code&gt;2&lt;/code&gt;, then by &lt;code&gt;3&lt;/code&gt;, then by &lt;code&gt;4&lt;/code&gt;, and so on. This is because by default &lt;code&gt;useEffect&lt;/code&gt; will run on every single render, and we&amp;rsquo;re only ever setting new intervals, we&amp;rsquo;re not clearing the old ones.&lt;/p&gt;
&lt;p&gt;A quick fix would be to return a cleanup function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;useEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; timerId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; setInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; speed&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; clearInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timerId&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But this is not ideal as well. Each time the &lt;code&gt;setInterval&lt;/code&gt; ticks, it will call &lt;code&gt;setCounter&lt;/code&gt;, which in turn causes the component to re-render. But our &lt;code&gt;useEffect&lt;/code&gt; also runs on each render, which means the first tick of the timer will cause a re-render which in turn calls &lt;code&gt;useEffect&lt;/code&gt;, which clears the first interval, and sets a new one. While the code seemingly does what it&amp;rsquo;s supposed to, it&amp;rsquo;s clearly not ideal to clear the interval on each render. We really only need to change it when &lt;code&gt;speed&lt;/code&gt; changes. This is why &lt;code&gt;useEffect&lt;/code&gt; has a second argument for a list of &lt;em&gt;dependencies&lt;/em&gt;. Here&amp;rsquo;s the complete component:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; Counter&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;speed&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setSpeed&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  useEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Setting up a new interval&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; timerId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; setInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; speed&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; clearInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timerId&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;speed&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Counter&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;...&lt;/span&gt; Speed&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;speed&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; setSpeed&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;speed &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)}&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;+&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;/* The `Math.max` is here simply so we don&amp;#39;t set the speed to `0` */&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; setSpeed&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; speed &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))}&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;-&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://codesandbox.io/s/modest-water-pyd8k?file=/src/App.js&#34;&gt;You can see it in action here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also added a &lt;code&gt;console.log&lt;/code&gt; to make it clear when the new &lt;code&gt;setInterval&lt;/code&gt; is being set.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is extremely important to make a small note about closures here. If we were to touch &lt;code&gt;counter&lt;/code&gt; (for example &lt;code&gt;setCounter(counter + 1)&lt;/code&gt;) inside the &lt;code&gt;setInterval&lt;/code&gt; callback instead of passing in &lt;code&gt;x =&amp;gt; x + 1&lt;/code&gt; then the closure would actually hold onto the variable &lt;code&gt;counter&lt;/code&gt; at the time of its creation, and not get updated with the new value until &lt;code&gt;speed&lt;/code&gt; changes (at which point the closure is re-created). We could potentially fix this by specifying &lt;code&gt;[counter, speed]&lt;/code&gt; as deps, but that would be essentially re-creating the previous case where the interval only ever runs once.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By specifying &lt;code&gt;[speed]&lt;/code&gt; as the dependency of our effect we can control when it gets re-run. This is similar to diffing &lt;code&gt;props&lt;/code&gt; within &lt;code&gt;componentDidUpdate&lt;/code&gt;, but React will do that automatically for us.&lt;/p&gt;
&lt;p&gt;If we didn&amp;rsquo;t want to control the &lt;code&gt;speed&lt;/code&gt;, we could simply pass in &lt;code&gt;[]&lt;/code&gt; as an empty list of dependencies, which would make the &lt;code&gt;useEffect&lt;/code&gt; equivalent to &lt;code&gt;componentDidMount&lt;/code&gt; and not be affected by re-renders.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;useEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; timerId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; setInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; speed&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; clearInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timerId&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But since we care about controlling the speed, we have to leave out this option.&lt;/p&gt;
&lt;h3 id=&#34;pausing-and-timing-issues&#34;&gt;pausing and timing issues&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll modify our example a little bit to add a Pause/Resume controls instead of controlling the speed, as this is where I initially ran into the issue with &lt;code&gt;requestAnimationFrame&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; Counter&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setIsPaused&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  useEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;!&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; timerId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; setInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; clearInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timerId&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Counter&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;...{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; setIsPaused&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;!&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;)}&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;isPaused &lt;span style=&#34;color:#81a1c1&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Resume&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Pause&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://codesandbox.io/s/awesome-gareth-qr9gs?file=/src/App.js&#34;&gt;You can run the code here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We removed the &lt;code&gt;speed&lt;/code&gt; state and instead added an &lt;code&gt;isPaused&lt;/code&gt; state variable, which then controls if the timer is being increased.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;setInterval&lt;/code&gt; is not the right way to do animations, as it doesn&amp;rsquo;t synchronize with the browser&amp;rsquo;s re-painting mechanism. This is where &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&#34;&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt;&lt;/a&gt; comes in, which basically tells the browser to &lt;em&gt;run the given callback before the next repaint&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Before we switch to it, let us first rewrite the component so that it uses &lt;code&gt;setTimeout&lt;/code&gt; instead of &lt;code&gt;setInterval&lt;/code&gt;, as that will be nearly identical to the structure of the correct version with &lt;code&gt;requestAnimationFrame&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Interestingly enough, this example already contains the same issue as the final version with &lt;code&gt;requestAnimationFrame&lt;/code&gt;, but it is much harder to trigger.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; Counter&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setIsPaused&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  useEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;!&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; timerId
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Since `f` is only called in a `setTimeout` and not
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// `setInterval`, it needs to re-schedule itself to run
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// again after it finishes.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;        timerId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; setTimeout&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// The initial run is also scheduled via `setTimeout`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// to keep this in line with how `requestAnimationFrame`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// works, and to make the code overall more consistent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// in the way it executes.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;      timerId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; setTimeout&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; clearTimeout&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timerId&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Counter&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;...{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; setIsPaused&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;!&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;)}&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;isPaused &lt;span style=&#34;color:#81a1c1&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Resume&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Pause&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://codesandbox.io/s/intelligent-liskov-jvgyr?file=/src/App.js&#34;&gt;You can try the code here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few things changed in this version. We extract our update logic into a separate function &lt;code&gt;f&lt;/code&gt; which is the invoked using &lt;code&gt;setTimeout(f, 1)&lt;/code&gt; for the first time, and after that it schedules itself to run again as it finishes, using &lt;code&gt;setTimeout(f, 1)&lt;/code&gt;. This might seem strange, but it is exactly how &lt;code&gt;requestAnimationFrame&lt;/code&gt; works.&lt;/p&gt;
&lt;p&gt;Now for the final version with &lt;code&gt;requestAnimationFrame&lt;/code&gt;, we simply use &lt;code&gt;requestAnimationFrame(f)&lt;/code&gt; in place of &lt;code&gt;setTimeout(f, 1)&lt;/code&gt;, and &lt;code&gt;cancelAnimationFrame&lt;/code&gt; in place of &lt;code&gt;clearTimeout&lt;/code&gt;. This code tells the browser to run &lt;code&gt;f&lt;/code&gt; before it will perform its next repaint, which in most cases will be 60 times per second, giving us a nice and smooth animation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; Counter&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setIsPaused&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  useEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;!&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; timerId
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        timerId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      timerId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; cancelAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timerId&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Counter&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;...{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; setIsPaused&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;!&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;)}&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;isPaused &lt;span style=&#34;color:#81a1c1&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Resume&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Pause&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://codesandbox.io/s/priceless-bogdan-up4zw?file=/src/App.js&#34;&gt;You can try the code here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now all it takes is to click the &lt;code&gt;Resume&lt;/code&gt; / &lt;code&gt;Pause&lt;/code&gt; button really fast, and in a couple of tries you should see the counter will ignore the button and keep increasing despite being paused.&lt;/p&gt;
&lt;p&gt;This seems very strange, since we&amp;rsquo;re telling React to cleanup the request after the button is pressed. The thing is, despite what people say, &lt;code&gt;useEffect&lt;/code&gt; is not actually the same as &lt;code&gt;componentDidUpdate&lt;/code&gt;. The documentation actually mentions this at one point, but it didn&amp;rsquo;t occur to me at first what consequences it would have. The problem is the effect passed to &lt;code&gt;useEffect&lt;/code&gt; is not run synchronously after the DOM is updated from the render call, but rahter &lt;em&gt;at some point later&lt;/em&gt;. This means the browser isn&amp;rsquo;t blocked by the update logic and the app feels more responsive. Specifically in this case, the browser is able to re-paint before the effect (or its cleanup) is run.&lt;/p&gt;
&lt;p&gt;In the case of &lt;code&gt;document.title = ...&lt;/code&gt; we didn&amp;rsquo;t really care if the title was updated a few milliseconds later, but in the case of &lt;code&gt;requestAnimationFrame&lt;/code&gt; it does make a difference. The problem is a new animation frame will be requested before the cleanup function of &lt;code&gt;useEffect&lt;/code&gt; is called, since the cleanup is not run synchronously. This is essentially a timing issue, where &lt;em&gt;sometimes&lt;/em&gt; the browser will re-paint right between our component rendering to the DOM, and the cleanup function being called. This means our &lt;code&gt;f&lt;/code&gt; gets a chance to schedule itself again before it is cleaned up, and essentially escapes our cleanup logic.&lt;/p&gt;
&lt;p&gt;Lucky for us, there is an easy fix. Apart from &lt;code&gt;useEffect&lt;/code&gt;, there is also a &lt;code&gt;useLayoutEffect&lt;/code&gt; hook which has exactly the same arguments and works the same way, &lt;strong&gt;except it runs synchronously after the DOM is updated&lt;/strong&gt;. This is exactly what we need, as it will cancel the current animation frame request before a new one has a chance to be queued.&lt;/p&gt;
&lt;p&gt;The fixed code is exactly the same, except for &lt;code&gt;useEffect&lt;/code&gt; being replaced by &lt;code&gt;useLayoutEffect&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; Counter&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; setIsPaused&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; useState&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  useLayoutEffect&lt;span style=&#34;color:#eceff4&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;!&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; timerId
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;const&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        setCounter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        timerId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      timerId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; cancelAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timerId&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Counter&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;counter&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;...{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;=&amp;gt;&lt;/span&gt; setIsPaused&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;!&lt;/span&gt;isPaused&lt;span style=&#34;color:#eceff4&#34;&gt;)}&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;isPaused &lt;span style=&#34;color:#81a1c1&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Resume&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Pause&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/button&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/p&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://codesandbox.io/s/falling-field-rs8pb?file=/src/App.js&#34;&gt;You can try the code here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion-and-references&#34;&gt;Conclusion and references&lt;/h2&gt;
&lt;p&gt;This article is a good example on why reading documentation and paying attention to detail is important. When learning about hooks I remember hearing something along the lines of &lt;em&gt;&lt;code&gt;useEffect&lt;/code&gt; fires the effect asynchronously later&lt;/em&gt;, it didn&amp;rsquo;t immediately prompt me to ask the question if that could cause any issues, or what are some other use cases for &lt;code&gt;useLayoutEffect&lt;/code&gt;. The example I&amp;rsquo;ve seen people mention with it over and over again is &lt;em&gt;resizing windows&lt;/em&gt; or &lt;em&gt;DOM mutations&lt;/em&gt;, where &lt;code&gt;useEffect&lt;/code&gt; would cause a flicker in the UI and &lt;code&gt;useLayoutEffect&lt;/code&gt; wouldn&amp;rsquo;t. Interestingly, this is the same problem as we&amp;rsquo;re facing with &lt;code&gt;requestAnimationFrame&lt;/code&gt;, as in both cases we want to do something before the browser has a chance to repaint. Only in the case of &lt;code&gt;requestAnimationFrame&lt;/code&gt; the repaint does more than a UI flicker, it breaks our code.&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-effect.html&#34;&gt;Using the Effect Hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hooks-reference.html#uselayouteffect&#34;&gt;React Hooks - &lt;code&gt;useLayoutEffect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/streamich/react-use&#34;&gt;react-use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/streamich/react-use/issues/76&#34;&gt;react-use - issue #76 &lt;em&gt;cancelAnimationFrame may not work well in useRaf hook&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/streamich/react-use/pull/77&#34;&gt;react-use - fix of the &lt;code&gt;useRaf&lt;/code&gt; hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/streamich/react-use/commit/5d7434867c2f62e2383ed407ac1a0ad25e6d3f86#diff-aab454c8a7c03a31d945af5f20756009&#34;&gt;react-use commit fixing the above issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/53781632/whats-useeffect-execution-order-and-its-internal-clean-up-logic-in-react-hooks&#34;&gt;StackOverflow question on useEffect vs useLayoutEffect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>SSH Tunnel - Local, Remote and Dynamic Port Forwarding</title>
		<link>https://blog.jakuba.net/ssh-tunnel---local-remote-and-dynamic-port-forwarding/</link>
		<pubDate>Mon, 04 May 2020 10:00:00 +0200</pubDate>
		
		<guid>https://blog.jakuba.net/ssh-tunnel---local-remote-and-dynamic-port-forwarding/</guid>
		<description>&lt;p&gt;SSH tunneling is an extremely useful feature of SSH that is very often googled, but less often understood enough to use without a reference. In this post I hope to explain it in such a way that you&amp;rsquo;ll have no confusion about when to use SHH&amp;rsquo;s local, remote, or even dynamic port forwarding. In its essence, port forwarding allows SSH to securely create an encrypted communication channel (a tunnel) between two computers on the network. We can use this channel to run commands on the remote server, expose a local port in a remote computer, expose a remote port on the local computer, or route traffic via a SOCKS proxy (more on this later).&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;But first a tiny bit of background on how SSH works and why it&amp;rsquo;s secure. If you just want to get to the practical bits, feel free to skip this section and jump straight to &lt;em&gt;Local Port Forwarding&lt;/em&gt;. You don&amp;rsquo;t need to understand it to use SSH tunnels in practice.&lt;/p&gt;
&lt;p&gt;There are three types of encryption used at different stages: Diffie-Hellman, RSA, and AES (or other algorithms depending on configuration). If you&amp;rsquo;ve ever configured nginx and run into something called &lt;code&gt;dhparam&lt;/code&gt; or &lt;code&gt;ssl_dhparam&lt;/code&gt;, the &lt;code&gt;dh&lt;/code&gt; in there stands for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange&#34;&gt;Diffie-Hellman algorithm&lt;/a&gt;, which is an amazingly simple algorithm to exchange a secret key over an insecure communication channel, without any prior knowledge. If you understand exponentiation (e.g. $2^{10} = 1024$) and modulo (e.g. $16 \mod 5 = 1$) you can understand Diffie-Hellman, as it&amp;rsquo;s only a few steps that could be done even on paper.&lt;/p&gt;
&lt;p&gt;The issue with Diffiel-Hellman is that while you can exchange a secret, you don&amp;rsquo;t really know who you&amp;rsquo;re exchanging it with, and is vulnerable to the main-in-the-middle attack (someone could pretend to be the server and exchange the key with you instead). That&amp;rsquo;s where one more step comes in and the server uses its private key to sign a hash of some of the Diffie-Hellman parameters (&lt;a href=&#34;https://tools.ietf.org/html/rfc4253#section-8&#34;&gt;check out section 8 of the RFC on what exactly gets signed&lt;/a&gt;), and the client then verifies the hosts signature using its public key. This is where SSH asks you to verify the host fingerprint, which is the fingerprint of its public key, and if you say yes, it means you&amp;rsquo;re validating the server truly is who they say they are (and not an attacker), and they key exchange can continue. If you always say &lt;code&gt;yes&lt;/code&gt; without verifying the host key, you&amp;rsquo;re vulnerable to a man-in-the-middle-attack.&lt;/p&gt;
&lt;p&gt;After the server authenticity is confirmed, and the client and the server use Diffie-Hellman to negotiate a session key, which is then used to encrypt all of the traffic between them. You might be thinking why not use the already existing RSA keys (public/private keypair) of the client/server to encrypt the traffic? The answer is simple: asymmetric encryption is slow. Instead, SSH uses symmetric encryption (e.g. AES) to encrypt the traffic.&lt;/p&gt;
&lt;p&gt;Lastly, the client is authorized against the server using it&amp;rsquo;s RSA keypair. The server will simply encrypt a random value using the client&amp;rsquo;s public key (taken from &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt;) and send it over, the client verifies itself by being able to decrypt the message (because it owns the private key) and sends it back. If the values match, the client&amp;rsquo;s identity is verified and is authenticated now. (&lt;em&gt;Note that there are a few technical details, such as hashing the values together with the session key, but those are not important for understanding the overall flow&lt;/em&gt;.)&lt;/p&gt;
&lt;h2 id=&#34;local-port-forwarding&#34;&gt;Local Port Forwarding&lt;/h2&gt;
&lt;p&gt;The first forwarding mode we&amp;rsquo;ll look at is &lt;strong&gt;local port forwarding&lt;/strong&gt; with the &lt;code&gt;-L&lt;/code&gt; flag. It&amp;rsquo;s called &lt;em&gt;local&lt;/em&gt; because it allows us to forward connections from a local port to a different port on another computer on the network, using a secure SSH connection.&lt;/p&gt;
&lt;p&gt;Say that you have a database (e.g. PostgreSQL) running on a server &lt;code&gt;example.com&lt;/code&gt; on port &lt;code&gt;5432&lt;/code&gt;. The server is configured in such a way that only the SSH port &lt;code&gt;22&lt;/code&gt; is open, and thus you can&amp;rsquo;t connect directly via &lt;code&gt;psql -h example.com -p 5432&lt;/code&gt;. You could SSH to the server and run &lt;code&gt;psql -h localhost -p 5432&lt;/code&gt; on there, but what if you wanted to use a GUI client for the database, and connect to the server directly?&lt;/p&gt;
&lt;p&gt;With SSH you can simply forward an arbitrary local port, say &lt;code&gt;4000&lt;/code&gt;, to the port &lt;code&gt;5432&lt;/code&gt; on the server, but in such a way that the connection to &lt;code&gt;5432&lt;/code&gt; would come as if from inside the server, and thus would be allowed. To do this we run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -N -L 4000:localhost:5432 user@example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;We&amp;rsquo;ll use the &lt;code&gt;-N&lt;/code&gt; flag with all commands, which tell SSH to not start a shell (or execute a given command) and only forward ports. Personally I find this useful to distinguish which SSH session I use for forwarding and which ones might be just regular shell connections. You can of course forward while starting a remote shell (just omit the &lt;code&gt;-N&lt;/code&gt; flag).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The above command will connect to &lt;code&gt;user@example.com&lt;/code&gt; and start forwarding the local port &lt;code&gt;4000&lt;/code&gt; to &lt;code&gt;localhost:5432&lt;/code&gt; on the server. This means we can now run &lt;code&gt;psql -h localhost -p 4000&lt;/code&gt;, and as &lt;code&gt;psql&lt;/code&gt; establishes a connection to &lt;code&gt;localhost&lt;/code&gt; on port &lt;code&gt;4000&lt;/code&gt;, SSH will securely forward the connection to &lt;code&gt;example.com&lt;/code&gt;, where it connects to &lt;code&gt;localhost:5432&lt;/code&gt;. This way &lt;code&gt;psql&lt;/code&gt; doesn&amp;rsquo;t even know it&amp;rsquo;s connecting to a database running on a far away server.&lt;/p&gt;
&lt;p&gt;One interesting tip is that we could forward to something else than &lt;code&gt;localhost&lt;/code&gt; on &lt;code&gt;example.com&lt;/code&gt;. Say that we have a second host named &lt;code&gt;foobar.org&lt;/code&gt;, which is accessible only from the &lt;code&gt;example.com&lt;/code&gt; server, but not accessible from your machine.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh -N -L 4000:foobar.org:5432 user@example.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This way a connection to &lt;code&gt;localhost:4000&lt;/code&gt; on your machine would get forwarded through &lt;code&gt;example.com&lt;/code&gt; to connect to &lt;code&gt;foobar.org&lt;/code&gt; on port &lt;code&gt;5432&lt;/code&gt;. In theory, you could also use this to bypass a firewall blocking direct connections from your computer, but dynamic port forwarding solves this problem more naturally by creating a SOCKS proxy (as we&amp;rsquo;ll see shortly).&lt;/p&gt;
&lt;h2 id=&#34;remote-port-forwarding&#34;&gt;Remote Port Forwarding&lt;/h2&gt;
&lt;p&gt;While local forwarding allows us to forward local connections to a remote port, with remote port forwarding we can accept connections on a remote server, and forward those to a local port on our machine. Say that we have a folder we want to share with a friend via our &lt;code&gt;example.com&lt;/code&gt; server, but we don&amp;rsquo;t want to copy the files over. We could start up a web server using python&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python -m http.server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which creates a simple HTTP server on port &lt;code&gt;8000&lt;/code&gt; that servers files from the current directory. We could then use SSH to remotly forward port &lt;code&gt;4000&lt;/code&gt; on the server &lt;code&gt;example.com&lt;/code&gt; to &lt;code&gt;localhost:8000&lt;/code&gt; as follows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh -N -R 4000:localhost:8000 user@example.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can tell your friend to go to &lt;code&gt;http://example.com:4000&lt;/code&gt;, and SSH will accept his connection, and forward it to your computer to &lt;code&gt;localhost:8000&lt;/code&gt;. There is one small catch, and that forwarding ports like this requires you to edit the configuration of SSH on the server. Specifically, you need add (or edit) &lt;code&gt;GatewayPorts yes&lt;/code&gt; to &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; and restart the SSH daemon (via &lt;code&gt;sudo systemctl restart sshd&lt;/code&gt;), otherwise SSH won&amp;rsquo;t allow you to use this form of port forwarding.&lt;/p&gt;
&lt;p&gt;Services like &lt;a href=&#34;https://ngrok.com/&#34;&gt;ngrok.com&lt;/a&gt; basically give you a fancy UI to remote port forwarding. They give you a CLI which you can run to make a local port available &lt;em&gt;on the internet&lt;/em&gt; via a publically accesible subdomain. If you have your own server (which you can get for free on AWS/GCP, or for a few dollars per month on many providers), you can do exactly the same thing with a single command with SSH using remote port forwarding without any limitations, and save yourself some money :)&lt;/p&gt;
&lt;h2 id=&#34;dynamic-port-forwarding&#34;&gt;Dynamic Port Forwarding&lt;/h2&gt;
&lt;p&gt;The last type of forwarding is called &lt;em&gt;dynamic port forwarding&lt;/em&gt;, which is perhaps a slightly confusing name, because the way you use it is different from the two previous forwarding mechanisms. With dynamic port forwarding you only specify the local port to bind to using the &lt;code&gt;-D&lt;/code&gt; parameter, and SSH will then determine where to forward connections based on the SOCKS protocol. The way this works is that SSH creates a SOCKS server which acts as a proxy which you can use in other applications.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you still have the &lt;code&gt;example.com&lt;/code&gt; server with the SSH port open. It is also part of a private network with other servers on it, say a website &lt;code&gt;private.example.com&lt;/code&gt;, which is not accesible directly from the internet, but is accesible from &lt;code&gt;example.com&lt;/code&gt;. First we connect to &lt;code&gt;example.com&lt;/code&gt; with dynamic port forwarding:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh -N -D 5000 user@example.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To connect to &lt;code&gt;private.example.com&lt;/code&gt; we need to configure the web browser to use our SOCKS proxy. In Firefox this can be done with &lt;code&gt;Network Settings -&amp;gt; Manual proxy configuration -&amp;gt; SOCKS host&lt;/code&gt; and select &lt;code&gt;SOCKS v5&lt;/code&gt; and set &lt;code&gt;SOCKS Host&lt;/code&gt; to &lt;code&gt;localhost&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt; to &lt;code&gt;5000&lt;/code&gt;. You can also check &lt;code&gt;Proxy DNS when using SOCKS v5&lt;/code&gt; to resolve DNS using your SOCKS proxy, instead of resolving the hostname on your machine prior to making the request.&lt;/p&gt;
&lt;p&gt;After this, you can just press &lt;code&gt;OK&lt;/code&gt; and type &lt;code&gt;private.example.com&lt;/code&gt; in the address bar and hit enter, and SSH will do the rest. Specifically it will connect to &lt;code&gt;localhost:5000&lt;/code&gt; via the SOCKS protocol and forward your request via the server to the website &lt;code&gt;private.example.com&lt;/code&gt;. In practice, this is as if you used a VPN to connect to the private network. The downside is you need to configure your browser (and any other program) which you want to connect via the proxy. It doesn&amp;rsquo;t connect your whole computer inside the network as a VPN program could, but this could also be considered a benefit if you just want to access something in isolation.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using Chrome (or Chromium), you can use this nifty one-liner to start a new instance with the SOCKS configuration pre-filled:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ chromium --proxy-server=socks://localhost:5000 \
    --user-data-dir=/tmp/foo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;--proxy-server=socks://localhost:5000&lt;/code&gt; option does exactly what it says, it sets the SOCKS proxy configuration option. The &lt;code&gt;--user-data-dir&lt;/code&gt; option is a nice addition, because this way you could have a completely separate user profile for the proxied browser.&lt;/p&gt;
&lt;p&gt;As a final note, you can use dynamic port forwarding to do things like access a website avaialble only in a specific country if you have a server &lt;code&gt;example.com&lt;/code&gt; which is hosted in that country. Or you could connect to websites on your company&amp;rsquo;s private network as long as you can SSH to any server on the network.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We covered three ways of port forwarding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local port forwarding used for tunneling local connections to a port on a remote server.&lt;/li&gt;
&lt;li&gt;Remote port forwarding used for tunneling remote connections to a port on a local server.&lt;/li&gt;
&lt;li&gt;Dynamic port forwarding used for creating a TCP proxy via a remote host.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The given examples only scratch the surface of possible use cases. There are many cases where local or remote port forwarding can be useful during debugging multi-server architectures. You could even create multi-hop SSH tunnels where you tunnel from &lt;code&gt;A&lt;/code&gt; to &lt;code&gt;B&lt;/code&gt;, and then from &lt;code&gt;B&lt;/code&gt; to &lt;code&gt;C&lt;/code&gt;, e.g.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh -L 9999:host2:1234 -N host1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can even use the first &lt;code&gt;ssh&lt;/code&gt; command to run &lt;code&gt;ssh&lt;/code&gt; on the remote host and create a second tunnel as the first one is created&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh -L 9999:localhost:9999 host1 ssh -L 9999:localhost:1234 -N host2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which is not only cool, but also creates a secure SSH tunnel from &lt;code&gt;host1&lt;/code&gt; to &lt;code&gt;host2&lt;/code&gt; as opposed to the first method which does not (&lt;a href=&#34;https://superuser.com/questions/96489/an-ssh-tunnel-via-multiple-hops&#34;&gt;see this answer on SuperUser for more interesting examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most importantly, play around and experiment with SSH when you get a chance! While not every combination of tunnels might be the best solution to your problem, there were certainly many times where knowing how to solve a problem using SSH tunnels saved me hours of otherwise tedious work (usually involving moving stuff around between servers).&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Git Command Overview with Useful Flags and Aliases</title>
		<link>https://blog.jakuba.net/git-command-overview-with-useful-flags-and-aliases/</link>
		<pubDate>Sun, 03 May 2020 23:28:14 +0200</pubDate>
		
		<guid>https://blog.jakuba.net/git-command-overview-with-useful-flags-and-aliases/</guid>
		<description>&lt;p&gt;This post is a short guide to making your git usage a little more efficient. We&amp;rsquo;re not going to cover how git works in depth. Instead, we&amp;rsquo;ll look at the most common operations and useful flags, with the goal to create a set of bash or zsh aliases for daily use. A completel list of aliases presented in the article is summarized at the end of the article.&lt;/p&gt;
&lt;p&gt;Each section will first briefly describe the command, some of its useful flags, and then suggest a set of mnemonic aliases with their usage. Contrary to what some people might thinks, we won&amp;rsquo;t use the builtin git alias functionality using &lt;code&gt;git config&lt;/code&gt; (that is e.g. &lt;code&gt;git config --global alias.co checkout&lt;/code&gt;), but rather plain shell aliases such as &lt;code&gt;alias gco=&amp;quot;git checkout&amp;quot;&lt;/code&gt;. The reason is simple, it is much easier and faster to type &lt;code&gt;gco&lt;/code&gt; than &lt;code&gt;git co&lt;/code&gt;, which makes git usage more enjoyable. Since (almost) all of our aliases will be prefixed with &lt;code&gt;g&lt;/code&gt; (such as &lt;code&gt;ga&lt;/code&gt;, &lt;code&gt;gco&lt;/code&gt;, &lt;code&gt;gc&lt;/code&gt;, &amp;hellip;) they will be just as easy to &lt;em&gt;discover&lt;/em&gt; if you ever forget them as their &lt;code&gt;git config&lt;/code&gt; alias counterpart.&lt;/p&gt;
&lt;h2 id=&#34;git-status&#34;&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re going to skip ahead alphabetically and cover &lt;code&gt;git status&lt;/code&gt; right now, as it will be useful in explaining the other commands. Everyone who ever tried git had to write &lt;code&gt;git status&lt;/code&gt; at some point, yet of all the people I&amp;rsquo;ve met, only a few know of its extremely useful variant &lt;code&gt;git status -sb&lt;/code&gt;. Let me illustrate on a straightforward example where we simply create three file &lt;code&gt;f1, f2, f3&lt;/code&gt;, modify some of them, and look at how the output of &lt;code&gt;git status&lt;/code&gt; differs from &lt;code&gt;git status -sb&lt;/code&gt; (I tried to make the example self-contained so you can try it yourself):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir status-demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#81a1c1&#34;&gt;cd&lt;/span&gt; status-demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Initialized empty Git repository in /home/darth/projects/status-demo/.git/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# This lets us make an empty commit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit -m &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Initial commit&amp;#34;&lt;/span&gt; --allow-empty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;[&lt;/span&gt;master &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt; 35773eb&lt;span style=&#34;color:#81a1c1&#34;&gt;]&lt;/span&gt; Initial commit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ touch f1 f2 f3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;On branch master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Untracked files:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to include in what will be committed&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nothing added to commit but untracked files present &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt; to track&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status -sb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;## master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;?? f1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;?? f2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;?? f3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit -m &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Add a few files&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;[&lt;/span&gt;master b97a26a&lt;span style=&#34;color:#81a1c1&#34;&gt;]&lt;/span&gt; Add a few files
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; files changed, &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; insertions&lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;, &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; deletions&lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;-&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; create mode &lt;span style=&#34;color:#b48ead&#34;&gt;100644&lt;/span&gt; f1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; create mode &lt;span style=&#34;color:#b48ead&#34;&gt;100644&lt;/span&gt; f2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; create mode &lt;span style=&#34;color:#b48ead&#34;&gt;100644&lt;/span&gt; f3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#81a1c1&#34;&gt;echo&lt;/span&gt; x &amp;gt; f1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ rm f2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#81a1c1&#34;&gt;echo&lt;/span&gt; x &amp;gt; f3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#81a1c1&#34;&gt;echo&lt;/span&gt; x &amp;gt; f4 &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# new file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add f1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;On branch master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Changes to be committed:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git restore --staged &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to unstage&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modified:   f1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Changes not staged &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; commit:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git add/rm &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to update what will be committed&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git restore &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to discard changes in working directory&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        deleted:    f2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modified:   f3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Untracked files:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;use &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span&gt; to include in what will be committed&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status -sb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;## master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;M  f1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; D f2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; M f3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;?? f4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;The code examples are intentionally a bit verbose to keep them reproducible. You can simply follow along command by command in your own terminal. Playing around with &lt;code&gt;git&lt;/code&gt; is a great way to learn!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Since the code highlighter on this post does not capture the terminal output highlighting, here&amp;rsquo;s the last two commands in a screenshot, showing how &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git status -sb&lt;/code&gt; share the same color highlighting, but only format the output differently.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2HmXwzT.png&#34; alt=&#34;git status vs git status -sb&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git status -sb&lt;/code&gt; simply drops all of the text and additional information, and keeps the important parts of the output - what branch are we on and what has changed in what way. It will mark modifications with &lt;code&gt;M&lt;/code&gt;, deletions with &lt;code&gt;D&lt;/code&gt;, and newly added files with &lt;code&gt;??&lt;/code&gt;. The column in which the &lt;code&gt;M/D&lt;/code&gt; is displayed also signifies if the change was staged. For example, the modifications to &lt;code&gt;f1&lt;/code&gt; were staged with &lt;code&gt;git add&lt;/code&gt;, hence the &lt;code&gt;M&lt;/code&gt; displays in the left column and in yellow (same as regular &lt;code&gt;git status&lt;/code&gt;). Modifications to &lt;code&gt;f3&lt;/code&gt; and the deletion of &lt;code&gt;f2&lt;/code&gt; were not staged, which is why they&amp;rsquo;re in green in the second column.&lt;/p&gt;
&lt;p&gt;While this might be a little confusing at first, I promise that it only takes a couple of minutes to get used to this, and that your git experience will be much improved from using &lt;code&gt;git status -sb&lt;/code&gt; over the regular &lt;code&gt;git status&lt;/code&gt;. Suddenly your terminal won&amp;rsquo;t fill half the screen with each status, and you won&amp;rsquo;t have to scroll around to find your previous commands after using &lt;code&gt;git status&lt;/code&gt; for a few times. It might seem like a small thing, but at least personally for me, this single command (along with the suggested alias) transformed my git usage from &lt;em&gt;annoying&lt;/em&gt; to &lt;em&gt;joyful&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To make the matters even more controversial, I suggest a different alias for &lt;code&gt;git status -sb&lt;/code&gt;, and that is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias s=&amp;quot;git status -sb&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you might think this is insane, a single letter alias for an arbitrary git command? The reason is, at least in my personal experience, that this is the most common command I use out of all terminal commands. Here are the top 6 commands from my history:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1  648  6.48065%   s
2  640  6.40064%   cd
3  505  5.05051%   gc
4  410  4.10041%   vim
5  331  3.31033%   docker
6  292  2.92029%   ga
7  266  2.66027%   ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can create a similar statisic for yourself using the following command (&lt;a href=&#34;https://dev.to/abhinav/which-is-the-most-used-command-in-your-shell-history-5ca1&#34;&gt;reference&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;history&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] &amp;#34; &amp;#34; CMD[a]/count*100 &amp;#34;% &amp;#34; a;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;|&lt;/span&gt; grep -v &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;./&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;|&lt;/span&gt; column -c3 -s &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; -t &lt;span style=&#34;color:#eceff4&#34;&gt;|&lt;/span&gt; sort -nr &lt;span style=&#34;color:#eceff4&#34;&gt;|&lt;/span&gt; nl &lt;span style=&#34;color:#eceff4&#34;&gt;|&lt;/span&gt;  head -n10
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At least in my case &lt;code&gt;s&lt;/code&gt; is a winner and beats even &lt;code&gt;cd&lt;/code&gt;, followed by &lt;code&gt;gc&lt;/code&gt; (the &lt;code&gt;git commit -v&lt;/code&gt; from before). This makes sense, because every time you would want to make a new git commit, you&amp;rsquo;d &lt;code&gt;cd&lt;/code&gt; into the directory and check the status.&lt;/p&gt;
&lt;p&gt;This statistic (at least for my git usage) confirms that &lt;code&gt;git status -sb&lt;/code&gt; is not just a random command, it is &lt;strong&gt;the command&lt;/strong&gt;, and as such it deserves a special alias. Some people suggest using &lt;code&gt;alias gs=&amp;quot;git status -sb&amp;quot;&lt;/code&gt;, which might be leaning on the safe side, and I definitely started out that way. But is there really anything else that would deserve the glorious one letter &lt;code&gt;s&lt;/code&gt; alias than &lt;code&gt;git status -sb&lt;/code&gt;?&lt;/p&gt;
&lt;h2 id=&#34;git-add&#34;&gt;&lt;code&gt;git add&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Git separates the working tree (the files being edited) from the index, that is the staged changes which are ready to be comitted. Before using &lt;code&gt;git commit&lt;/code&gt;, we have to stage our changes using &lt;code&gt;git add&lt;/code&gt;. But since this doesn&amp;rsquo;t have to include all of the changes, &lt;code&gt;git add&lt;/code&gt; comes with quite a few options (check &lt;code&gt;man git-add&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;git add -u&lt;/code&gt; only stages files that were modified (or deleted), but not newly added files. To add all modifications, deletions and additions, one can simply run &lt;code&gt;git add .&lt;/code&gt; But sometimes we want to be more granular than adding whole files. This is where &lt;code&gt;git add -p&lt;/code&gt; (or &lt;code&gt;--patch&lt;/code&gt;) comes in, which launches an interactive mode, prompting the user with each change whether they want to add it to the index.&lt;/p&gt;
&lt;p&gt;Aliases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias ga=&amp;quot;git add&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias gau=&amp;quot;git add -u&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias gap=&amp;quot;git add -p&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-branch&#34;&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Branching is an integral art of git, and as such the &lt;code&gt;git branch&lt;/code&gt; command deserves at least one alias of its own. Lucky for us we can rely on &lt;code&gt;git checkout&lt;/code&gt; for most of the branching shenanigans, and as such we only mention &lt;code&gt;git branch --all&lt;/code&gt;. Deleting branches is sometimes useful as well, but as there are multiple ways - with some people preferring &lt;code&gt;-d&lt;/code&gt; and some &lt;code&gt;-D&lt;/code&gt; - we leave this out of the aliases.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gb=&amp;quot;git branch&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias gba=&amp;quot;git branch --all&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-commit&#34;&gt;&lt;code&gt;git commit&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Creating new commits is one of the most common operations when using git, and as such we want to have a decent setup for it. Firstly, &lt;code&gt;git commit&lt;/code&gt; has a &lt;code&gt;-v&lt;/code&gt; flag which causes it to show a complete diff when it opens the editor for the commit message.&lt;/p&gt;
&lt;p&gt;One benefit of using &lt;code&gt;git commit -v&lt;/code&gt; as opposed to &lt;code&gt;git commit -m &amp;quot;Some message&amp;quot;&lt;/code&gt; is that you get one last chance to inspect what is being changed. This might be as simple as holding down &lt;code&gt;Ctrl-D&lt;/code&gt; to scroll down in Vim in a matter of seconds, but there are certainly times where such quick visual inspection can catch unexpected files being committed (especially when the size of the diff is much larger/smaller than expected, or weird characters pop up). As such, we&amp;rsquo;ll use &lt;code&gt;-v&lt;/code&gt; as a default option for all our &lt;code&gt;git commit&lt;/code&gt; commands.&lt;/p&gt;
&lt;p&gt;We can also use &lt;code&gt;-a&lt;/code&gt; to automatically stage all modified files before committing (similar to &lt;code&gt;git add -u&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Lastly, there is the &lt;code&gt;--amend&lt;/code&gt; options, which gives us a way to &lt;em&gt;fix&lt;/em&gt; the last commit if it hasn&amp;rsquo;t been pushed. &lt;strong&gt;Since git history is immutable, this does not actually change the commit, but instead creates a new one and resets &lt;code&gt;HEAD&lt;/code&gt; to it.&lt;/strong&gt; This is critical information, because it means you should not &lt;code&gt;--amend&lt;/code&gt; after you used &lt;code&gt;git push&lt;/code&gt;. That is after some other computer contains the old commit. If you do &lt;code&gt;git commit --amend&lt;/code&gt; after pushing, you will be required to force push (&lt;code&gt;git push --force&lt;/code&gt;), as your tree is not a simple extension of the tree on the origin server, and needs to be overwritten by your local copy. This is similar to using &lt;code&gt;git rebase&lt;/code&gt; or &lt;code&gt;git reset --hard&lt;/code&gt; as we&amp;rsquo;ll see later. In simple terms, if you &lt;code&gt;git push --force&lt;/code&gt; you&amp;rsquo;re in some sense &lt;em&gt;overwriting&lt;/em&gt; &lt;code&gt;origin&lt;/code&gt;, and if someone else ran &lt;code&gt;git fetch&lt;/code&gt; (or &lt;code&gt;git pull&lt;/code&gt;) in the meantime, they will have a different local tree that won&amp;rsquo;t be compatible with &lt;code&gt;origin&lt;/code&gt; after you for push anymore. There are definitely ways to work around these problems, but none of them are trivial, and out of the scope of this article.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re interested in a followup article covering &lt;code&gt;git push --force&lt;/code&gt; or some other topic, feel free to leave a comment below the article or message me on twitter&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gc=&amp;quot;git commit -v&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias gca=&amp;quot;git commit -v -a&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias gcam=&amp;quot;gca --amend&amp;quot;&lt;/code&gt; - Here you might want to opt out of the &lt;code&gt;-a&lt;/code&gt; depending on your preference.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-cherry-pick&#34;&gt;&lt;code&gt;git cherry-pick&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Cherry picking allows us to copy (apply) arbitrary commits to our &lt;code&gt;HEAD&lt;/code&gt;. While not a common operation it does come in handy from time to time, especially when fixing previous git-related issues. As cherry-picking is very problem specific, we don&amp;rsquo;t introduce any default flags and only use the most basic alias&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gch=&amp;quot;git cherry-pick&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-checkout&#34;&gt;&lt;code&gt;git checkout&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Git checkout is our first command that directly manipulates the working tree. First we introduce &lt;code&gt;git checkout &amp;lt;BRANCH&amp;gt;&lt;/code&gt; as a way to switch between branches. We can also use this to switch our working tree to an arbitrary commit in the history (as in &lt;code&gt;git checkout &amp;lt;REF&amp;gt;&lt;/code&gt;). Surprisingly to some, &lt;code&gt;git checkout&lt;/code&gt; is better at creating new branches than &lt;code&gt;git branch&lt;/code&gt; is, as it allows us to create the branch and switch to it with a single command &lt;code&gt;git branch -b &amp;lt;BRANCH&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, we can use &lt;code&gt;git checkout &amp;lt;FILE&amp;gt;&lt;/code&gt; to discard its changes and revert it back to the version in the index, or in case nothing is staged, to &lt;code&gt;HEAD&lt;/code&gt;. A small example to illustrate this where we create and commit a new file, then make some changes to it, stage them, make some more changes, use &lt;code&gt;git checkout&lt;/code&gt; to reset the unstaged changes, then use &lt;code&gt;git reset&lt;/code&gt; to clear the stage, and again &lt;code&gt;git checkout&lt;/code&gt; to reset the remaining changes.&lt;/p&gt;
&lt;p&gt;One sidenote, consider if we had a file named &lt;code&gt;master&lt;/code&gt; while also having a branch named &lt;code&gt;master&lt;/code&gt;. If we wanted to use &lt;code&gt;git checkout&lt;/code&gt; on the file and wrote &lt;code&gt;git checkout master&lt;/code&gt;, git would actually refer to the branch instead. For this reason &lt;code&gt;git&lt;/code&gt; provides a &lt;code&gt;--&lt;/code&gt; argument, which tells git to process the comes after it as filenames. This means &lt;code&gt;git checkout -- master&lt;/code&gt; will apply &lt;code&gt;git checkout&lt;/code&gt; on a &lt;strong&gt;file&lt;/strong&gt; named &lt;code&gt;master&lt;/code&gt;. It&amp;rsquo;s a good idea to use this option every time you want to apply &lt;code&gt;git checkout&lt;/code&gt; to a file, as you might forget you have a branch with the same name and get confused about the results (especially if you create lots of temporary branches/files named &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;foo&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt;). For this reason we&amp;rsquo;ll use &lt;code&gt;git checkout -- file.txt&lt;/code&gt; as opposed to &lt;code&gt;git checkout file.txt&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir checkout-demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#81a1c1&#34;&gt;cd&lt;/span&gt; checkout-demo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#81a1c1&#34;&gt;echo&lt;/span&gt; aaa &amp;gt; file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Initialized empty Git repository in ~/checkout-demo/.git/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git commit -m &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Initial commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;[&lt;/span&gt;master &lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;root-commit&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt; 52ae6f1&lt;span style=&#34;color:#81a1c1&#34;&gt;]&lt;/span&gt; Initial commit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; file changed, &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; insertion&lt;span style=&#34;color:#81a1c1&#34;&gt;(&lt;/span&gt;+&lt;span style=&#34;color:#81a1c1&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; create mode &lt;span style=&#34;color:#b48ead&#34;&gt;100644&lt;/span&gt; file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#81a1c1&#34;&gt;echo&lt;/span&gt; bbb &amp;gt;&amp;gt; file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status -sb               &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;## master                      #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; M file.txt           &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# -------- here the ` M` is&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git add file.txt             &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# in the right column meaning&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#81a1c1&#34;&gt;echo&lt;/span&gt; ccc &amp;gt;&amp;gt; file.txt         &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# unstaged changes only&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status -sb               &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;## master                      #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MM file.txt           &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# -------- here we have `MM` for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat file.txt                 &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# both staged and unstaged&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa                            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# changes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbb                            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ccc                            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git checkout -- file.txt     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status -sb               &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;## master                      #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;M  file.txt            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# ------- and finally here the `M `&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat file.txt                 &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# is on the left, signifying&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa                            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# staged changes only&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bbb                            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git reset                    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Unstaged changes after reset:  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;M       file.txt       &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# ------- this is not what we *have after*,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status -sb               &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# but what *was changed*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;## master                      #&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; M file.txt             &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# ------ confirming the output,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git checkout -- file.txt     &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# `git reset` unstaged our changes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ git status -sb               &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# and now we&amp;#39;re back to ` M`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;## master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat file.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aaa
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;The code examples are intentionally a bit verbose to keep them reproducible. You can simply follow along command by command in your own terminal. Playing around with &lt;code&gt;git&lt;/code&gt; is a great way to learn!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you found this example confusing due to the &lt;code&gt;git status -sb&lt;/code&gt; outputs not being correctly highlighted, or are confused in general, here&amp;rsquo;s the same thing but in a properly colorized screenshot&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kRj4zKs.png&#34; alt=&#34;colorized git checkout with git status -sb&#34;&gt;&lt;/p&gt;
&lt;p&gt;As noted before, yellow means &lt;em&gt;staged&lt;/em&gt;, green means &lt;em&gt;unstaged&lt;/em&gt;, and &lt;code&gt;git checkout&lt;/code&gt; modifies the unstaged changes, meaning it &lt;em&gt;removes the green ones&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gco=&amp;quot;git checkout&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-diff&#34;&gt;&lt;code&gt;git diff&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Similarly to &lt;code&gt;git status&lt;/code&gt;, checking the changes made to the working dir is a very common operation. The &lt;code&gt;git diff&lt;/code&gt; has a useful flag which I would recommend using by default, and that is &lt;code&gt;git diff -M&lt;/code&gt;. This will allow &lt;code&gt;git diff&lt;/code&gt; to detect when a file was renamed. If you rename a file and don&amp;rsquo;t use &lt;code&gt;-M&lt;/code&gt;, &lt;code&gt;git diff&lt;/code&gt; will show one file as deleted and another one as newly added, as opposed to showing it as a rename.&lt;/p&gt;
&lt;p&gt;Note that this option does not work 100% of the time, because git can&amp;rsquo;t know with certainty that a file was renamed. The filesystem doesn&amp;rsquo;t keep any kind of log of rename operations, nor is it written in any kind of metadata. Git will simply look at the contents of the two files, compare them, and if the amount of changes is small enough, it will consider the file as renamed. You can actually specify the threshold for changes with the &lt;code&gt;-M&lt;/code&gt; flag, specifically &lt;code&gt;-M90%&lt;/code&gt; would tell git to only consider something to be renamed if more than 90% of the file hasn&amp;rsquo;t been changed. By default this is set to 50%. This might seem silly at first, but consider renaming a file in your editor and then making changes to it. You wouldn&amp;rsquo;t necessarily commit things right after the file was renamed, yet you would still expect git to track the rename.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gd=&amp;quot;git diff -M&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Personally I use &lt;code&gt;git diff&lt;/code&gt; so often I devoted a second one-letter alias to it, specifically just &lt;code&gt;d&lt;/code&gt; as opposed to &lt;code&gt;gd&lt;/code&gt;. That is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias d=&amp;quot;git diff -M&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As opposed to &lt;code&gt;alias s=&amp;quot;git status -sb&amp;quot;&lt;/code&gt; I&amp;rsquo;d say this one is more debatable, considering &lt;code&gt;git diff&lt;/code&gt; is used much less often than &lt;code&gt;git status&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is one more useful flag with &lt;code&gt;git diff&lt;/code&gt;, and that is &lt;code&gt;--cached&lt;/code&gt;. The regular &lt;code&gt;git diff&lt;/code&gt; only shows diff between the working directory and the index. That is changes you could possibly stage with &lt;code&gt;git add&lt;/code&gt;. But sometimes you might have already staged some changes while leaving others unstaged (say with &lt;code&gt;git add -p&lt;/code&gt;) and would like to see only the changes that would be comitted. This is where &lt;code&gt;git diff --cached&lt;/code&gt; comes in, which will show the difference between your staged changes and &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gdc=&amp;quot;git diff -M --cached&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An honorary mention goes to the &lt;code&gt;--word-diff&lt;/code&gt; flag, which is not common enough to make an alias, but still useful to know about and I suggest playing around with it (and also look it up in &lt;code&gt;man git-diff&lt;/code&gt;). By default &lt;code&gt;git diff&lt;/code&gt; will show how the whole line has changed, but with &lt;code&gt;--word-diff&lt;/code&gt; it will try to show diff within the line itself (on single words). This can be useful when making small tweaks to long lines, such as READMEs or documentation, but less so on code (which is why it&amp;rsquo;s not the default).&lt;/p&gt;
&lt;h1 id=&#34;git-fetch&#34;&gt;&lt;code&gt;git fetch&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Sometimes people are surprised when they see me using &lt;code&gt;git fetch&lt;/code&gt; followed by a &lt;code&gt;git merge --ff-only&lt;/code&gt; and they ask why even bother running &lt;code&gt;git fetch&lt;/code&gt; when you could just &lt;code&gt;git pull&lt;/code&gt;, right? The problem with &lt;code&gt;git pull&lt;/code&gt; is that it essentially does two things at once. It fetches the changes from the remote, and then merges (or rebases, depending on the flags) your &lt;code&gt;HEAD&lt;/code&gt; with the changes, with the issue being that you don&amp;rsquo;t see what has changed before it begins with the merge.&lt;/p&gt;
&lt;p&gt;Automating the merge is fine if it is what you actually wanted to happen, and for this reason I don&amp;rsquo;t think &lt;code&gt;git pull&lt;/code&gt; is inherently a bad command. But more often than not I find people get surprised by the result of the pull, as it does something to their local copy that they didn&amp;rsquo;t expect. For that reason alone it might be useful to consider using a combination &lt;code&gt;git fetch&lt;/code&gt;, looking at the changes with &lt;code&gt;git log&lt;/code&gt; (as we&amp;rsquo;ll see shortly), and then manually merging/rebasing as needed.&lt;/p&gt;
&lt;p&gt;By default &lt;code&gt;git fetch&lt;/code&gt; will only fetch the tracking remote, but there is also the &lt;code&gt;--all&lt;/code&gt; option which will fetch from all remotes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gf=&amp;quot;git fetch&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias gfa=&amp;quot;git fetch --all&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;git-log&#34;&gt;&lt;code&gt;git log&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Now perhaps one of the commands which forces many people to use GUIs instead of the terminal interface to &lt;code&gt;git&lt;/code&gt;. They simply can&amp;rsquo;t find useful information from the default &lt;code&gt;git log&lt;/code&gt; output, and I don&amp;rsquo;t blame them. Personally I can&amp;rsquo;t use git on a computer without a proper &lt;code&gt;git log&lt;/code&gt; alias as well, and often resort to either searching github for my own &lt;code&gt;git log&lt;/code&gt; alias, or just use a GUI.&lt;/p&gt;
&lt;p&gt;There are essentially two (or three) parts to making &lt;code&gt;git log&lt;/code&gt; usable. One is forcing it to only print out one line per commit, which can either be done using &lt;code&gt;--oneline&lt;/code&gt;, or a custom format (as shown shortly) with &lt;code&gt;--pretty&lt;/code&gt;. The second is &lt;code&gt;--graph&lt;/code&gt;, which visually represents branches and history. The third, and optional, is &lt;code&gt;--all&lt;/code&gt;, which shows the history for all branches, not just the past of where &lt;code&gt;HEAD&lt;/code&gt; is pointing to.&lt;/p&gt;
&lt;p&gt;All of this combined is &lt;code&gt;git log --graph --oneline --all&lt;/code&gt;, which when applied to Facebook&amp;rsquo;s React at the time of writing this article looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6yiW5Ph.png&#34; alt=&#34;git log on react repo&#34;&gt;&lt;/p&gt;
&lt;p&gt;While this output is very useful and already infinitely better than the default, it does not display the author, when the commit was made, and doesn&amp;rsquo;t give us a way to customize its colors (which might be important if you have a custom color scheme).&lt;/p&gt;
&lt;p&gt;Thus I present to you the full version of the &lt;code&gt;--pretty&lt;/code&gt; version.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kvG9Kmr.png&#34; alt=&#34;git log pretty on react repo&#34;&gt;&lt;/p&gt;
&lt;p&gt;The above screenshot was created with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git log --all --graph --pretty&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;format:%C(yellow)%h%C(auto)%d%Creset %s %C(white) %C(cyan)%an, %C(magenta)%ar%Creset&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It looks complicated, but if you look at it for a few seconds you can see it really isn&amp;rsquo;t. We&amp;rsquo;re just passing in a format string with two different kinds of placeholders. One is the colors, e.g. &lt;code&gt;%C(yellow)&lt;/code&gt; or &lt;code&gt;%C(auto)&lt;/code&gt;, and the others are the actual content, such as &lt;code&gt;%h&lt;/code&gt; or &lt;code&gt;%s&lt;/code&gt;. You can certainly customize the command to your liking, and I suggest you look at &lt;code&gt;man git-log&lt;/code&gt; in the &lt;code&gt;PRETTY FORMATS&lt;/code&gt; section which lists all of the possible format string options.&lt;/p&gt;
&lt;p&gt;Because sometimes we want to view the history of the current branch only, and sometimes we want to see all of it at once, we&amp;rsquo;ll resort to two aliases, differing only with the use of &lt;code&gt;--all&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gl=&#39;git log --graph --pretty=&amp;quot;format:%C(yellow)%h%C(auto)%d%Creset %s %C(white) %C(cyan)%an, %C(magenta)%ar%Creset&amp;quot;&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias gla=&#39;gl --all&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-merge&#34;&gt;&lt;code&gt;git merge&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Since branches are an integral part of git, merging branches is equally if not more important. There are two important kinds of merges, fast-forward and with a merge commit. Fast-foward means the current branch set to the ref in which it is being merged into. For example, if we&amp;rsquo;re fast-forward merging &lt;code&gt;master&lt;/code&gt; into &lt;code&gt;origin/master&lt;/code&gt; and we have no pending changes in the working directory, this is essentially equivalent to running &lt;code&gt;git reset --hard origin/master&lt;/code&gt;, as the &lt;code&gt;master&lt;/code&gt; label simply changes to a commit further in the history. But sometimes the target ref is not directly ahead and might be lying on a parallel branch, in which case git will create a merge commit that joins the two branches together.&lt;/p&gt;
&lt;p&gt;There are three important flags which should be paid attention to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--ff&lt;/code&gt; (default): tries to perform a fast-forward, and if it can&amp;rsquo;t it will create a merge commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--no-ff&lt;/code&gt;: creates a merge commit every single time, even if a fast-forward is possible&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ff-only&lt;/code&gt;: tries to perform a fast-forward and exits when if it is not possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most problems arising during git usage come from git doing something that the user did not expect, which is why the first option (&lt;code&gt;--ff&lt;/code&gt;) can be quite dangerous. You simply don&amp;rsquo;t know if a fast-forward will happen or if a merge commit will be created unless you examine the history and are certain how fast-forward works.&lt;/p&gt;
&lt;p&gt;You might think that git will be able to fast-forward, run &lt;code&gt;git merge --ff&lt;/code&gt;, and be surprised by the result and maybe have to revert it, or only realize it later and have even more work to fix. This is why I suggest to never use the default &lt;code&gt;--ff&lt;/code&gt; option, but instead be explicit and either use &lt;code&gt;--ff-only&lt;/code&gt; or &lt;code&gt;--no-ff&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The benefit is that &lt;code&gt;--ff-only&lt;/code&gt; is somewhat safer and thus you can run it without that many worries to basically check if a fast-forward is possible. If it&amp;rsquo;s not, the command will simply fail, and you can decide if you want to run the &lt;code&gt;--no-ff&lt;/code&gt; version instead, or maybe re-examine the history and figure out why it failed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gm=&amp;quot;git merge --no-ff&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias gmf=&amp;quot;git merge --ff-only&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-push&#34;&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s not that much to be said about &lt;code&gt;git push&lt;/code&gt;, other than the &lt;code&gt;--tags&lt;/code&gt; flag which causes git to push all of the tags to the remote repo, meaning you can do &lt;code&gt;git push --tags origin&lt;/code&gt; instead of &lt;code&gt;git push origin &amp;lt;tag name&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gp=&amp;quot;git push&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias gpt=&amp;quot;git push --tags&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-reset&#34;&gt;&lt;code&gt;git reset&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Manipulating the &lt;code&gt;HEAD&lt;/code&gt; with &lt;code&gt;git reset&lt;/code&gt; is one of the lesser understood commands, and can lead to some potentially dangerous situations. It has multiple modes, the three most useful ones are the following (all examples assume your working dir is clean and you have no pending changes):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset --soft&lt;/code&gt;: Moves the &lt;code&gt;HEAD&lt;/code&gt;, but leaves the index and working dir as is, meaning if you run &lt;code&gt;git reset --soft HEAD~&lt;/code&gt; you&amp;rsquo;ll be in the state right before the last commit you made. Meaning all your changes are already staged.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --mixed&lt;/code&gt; (default): Resets the index but leaves the working dir as is. As this is the default, the most common use case is to just run &lt;code&gt;git reset&lt;/code&gt; without any arguments (which is exactly the same as &lt;code&gt;git reset --mixed&lt;/code&gt;), which will unstage all of your changes, but leave the working dir intact.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard&lt;/code&gt;: My favorite variant, and also the most dangerous one. This resets everything to the specified commit, including the working dir. If you run &lt;code&gt;git reset --hard&lt;/code&gt; with no target, it will reset all of your staged and unstaged changes to &lt;code&gt;HEAD&lt;/code&gt;, essentially saying &lt;em&gt;please discard all the changes I have made&lt;/em&gt;. If you specify a target, say &lt;code&gt;git reset --hard HEAD~&lt;/code&gt; it means &lt;em&gt;please discard all changes and set &lt;code&gt;HEAD&lt;/code&gt; and my current branch to one commit ago&lt;/em&gt;, which can be useful if you made a commit and want to discard it completely (just be mindful and don&amp;rsquo;t this if you&amp;rsquo;ve already pushed your changes, or if you&amp;rsquo;re not sure what you&amp;rsquo;re doing in general).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One last worthy mention is &lt;code&gt;git reset --patch&lt;/code&gt;, which similarly to &lt;code&gt;git add --patch&lt;/code&gt; (or &lt;code&gt;-p&lt;/code&gt;) will ask you which changes you want to keep staged and which unstaged, and then reset the &lt;code&gt;HEAD&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The respective suggested aliases are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gr=&amp;quot;git reset&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias grp=&amp;quot;git reset --patch&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias grh=&amp;quot;git reset --hard&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias grsh=&amp;quot;git reset --soft HEAD~&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-rebase&#34;&gt;&lt;code&gt;git rebase&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Similarly to &lt;code&gt;git reset&lt;/code&gt;, the &lt;code&gt;git rebase&lt;/code&gt; command is one of the lesser understood but more dangerous commands. Some people use it to &lt;em&gt;edit the history&lt;/em&gt;, but that&amp;rsquo;s not really what it does. The git history tree is immutable, and we can only ever add new commits to it, which is exactly what &lt;code&gt;git rebase&lt;/code&gt; does. It will copy and re-apply existing commits in a different place, possilby modifying them along the way.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go through the example presented in the &lt;code&gt;git rebase&lt;/code&gt; manpage (available at &lt;code&gt;man git-rebase&lt;/code&gt;):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Assume the following history exists and the current branch is &amp;ldquo;topic&amp;rdquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          A---B---C topic
        /
    D---E---F---G master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this point, the result of either of the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git rebase master
git rebase master topic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                  A&#39;--B&#39;--C&#39; topic
                /
    D---E---F---G master
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first glance it might seem that &lt;code&gt;git rebase&lt;/code&gt; somehow took the commits &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt; and moved them over to start at &lt;code&gt;G&lt;/code&gt;, but if you look more closely you can see that they were renamed &lt;code&gt;A&#39;&lt;/code&gt;, &lt;code&gt;B&#39;&lt;/code&gt; and &lt;code&gt;C&#39;&lt;/code&gt;. This is very much intentional, because &lt;code&gt;git rebase&lt;/code&gt; is not moving the commits, it is simply creating new ones in a different place. The original commits are still in the tree, they are just not visible because nothing is pointing to them. If we were to write down the ref of &lt;code&gt;C&lt;/code&gt; prior to doing the rebase, then ran the rebase, and ran &lt;code&gt;git tag REF&lt;/code&gt;, it would re-appear in the history as if by magic. That&amp;rsquo;s because it was there all along, &lt;code&gt;git rebase&lt;/code&gt; only created its copy on top of &lt;code&gt;G&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The same would happen if we ran &lt;code&gt;git rebase -i HEAD~5&lt;/code&gt;, that is interactively rebase last five commits. Sometimes people would do this to squash commits before submitting a pull request. It is important to note that this does not replace those five commits with a new one, it only creates one new commit with the contents of the five, and resets the branch label (and &lt;code&gt;HEAD&lt;/code&gt;) to it, making it &lt;em&gt;appear&lt;/em&gt; as if the original commits were edited.&lt;/p&gt;
&lt;p&gt;While rebase is replaying commits it might run into a conflict, in which case it will stop and ask the user to resolve the conflict. After the conflict is resolved, the rebase can continue with &lt;code&gt;git rebase --continue&lt;/code&gt;. As this situation is quite common, we devote an alias to it as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias grb=&amp;quot;git rebase&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias grbc=&amp;quot;git rebase --continue&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias grbi=&amp;quot;git rebase -i&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;A word of caution: If you decide to use &lt;code&gt;git rebase&lt;/code&gt; on a production codebase, I suggest you take a lookt at &lt;code&gt;git reflog&lt;/code&gt; first (&lt;code&gt;man git-reflog&lt;/code&gt;) and play around with how different &lt;code&gt;rebase&lt;/code&gt; variants get stored in the reflog so you can recover when things go wrong.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-remote&#34;&gt;&lt;code&gt;git remote&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Listing and managing remotes is a common practice in any git-controlled project, even if it just means pushing to GitHub (or other). Sometimes we might not be certain where &lt;code&gt;origin&lt;/code&gt; is, and that is where &lt;code&gt;git remote -v&lt;/code&gt; comes in handy, as it will simply print out the list of remotes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias grv=&amp;quot;git remote -v&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-stash&#34;&gt;&lt;code&gt;git stash&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s not that many things worthy to mention with &lt;code&gt;git stash&lt;/code&gt;, especially since you could accomplish the same using temporary branches and cherry-picking. But sometimes the changes are small enough to warrant the use of &lt;code&gt;git stash&lt;/code&gt; instead, and that&amp;rsquo;s why we introduce a few handy aliases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gst=&amp;quot;git stash&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alias gstp=&amp;quot;git stash pop&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git-show&#34;&gt;&lt;code&gt;git show&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Last command on the list is &lt;code&gt;git show&lt;/code&gt;, which simply tells git &lt;em&gt;show me what changed in this commit&lt;/em&gt; (including the author, date, and commit message in detail). This might be useful both when checking what the last commit was (either &lt;code&gt;git show HEAD&lt;/code&gt; or just &lt;code&gt;git show&lt;/code&gt; without an argument), or when looking at a particular commit in the past.&lt;/p&gt;
&lt;p&gt;The alias &lt;code&gt;gw&lt;/code&gt; might not be what you immediately think of, but since other &lt;code&gt;gs&lt;/code&gt;-prefixed ones are taken, it is at least somewhat phoentically resemblant of the command itself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alias gw=&amp;quot;git show&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve read this far I hope you learned at least a thing or two. Git is a massive tool with hundreds of useful flags and sub-commands and there are definitely times where having that one extra trick up your sleeve can save you hours of pain. &lt;strong&gt;If you have any tips, suggestions, corrections, or feedback, please do leave a comment below or hit me up on twitter. I&amp;rsquo;ll be sure to reply to each and every comment.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here is a complete list of aliases mentioned in the article, ready to be copy-pasted into your &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; or wherever else you store your aliases (sorry &lt;code&gt;fish&lt;/code&gt; users).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; s&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git status -sb&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; ga&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git add&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gau&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git add -u&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gap&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git add -p&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gb&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git branch&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gba&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git branch --all&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gc&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git commit -v&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gca&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git commit -v -a&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gcam&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;gca --amend&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gch&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git cherry-pick&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gco&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git checkout&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; d&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git diff -M&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gdc&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git diff -M --cached&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gf&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git fetch&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gfa&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git fetch --all&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gl&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;git log --graph --pretty=&amp;#34;format:%C(yellow)%h%C(auto)%d%Creset %s %C(white) %C(cyan)%an, %C(magenta)%ar%Creset&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gla&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;gl --all&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gm&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git merge --no-ff&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gmf&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git merge --ff-only&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gp&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git push&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gpt&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git push --tags&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gr&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git reset&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; grp&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git reset --patch&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; grh&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git reset --hard&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; grsh&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git reset --soft HEAD~&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; grb&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git rebase&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; grbc&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git rebase --continue&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; grbi&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git rebase -i&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; grv&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git remote -v&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gst&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git stash&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gstp&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git stash pop&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;alias&lt;/span&gt; gw&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;git show&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
	</item>
	
	<item>
		<title>Eigenvalues and Eigenvectors: Basic Properties</title>
		<link>https://blog.jakuba.net/eigenvalues-and-eigenvectors/</link>
		<pubDate>Sat, 08 Dec 2018 01:44:08 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/eigenvalues-and-eigenvectors/</guid>
		<description>&lt;p&gt;Eigenvalues and eigenvectors of a matrix $\boldsymbol A$ tell us a lot about
the matrix. On the other hand, if we know our matrix $\boldsymbol A$ is somehow
special (say symmetric) it will tell us some information about how its
eigenvalues and eigenvectors look like.&lt;/p&gt;
&lt;p&gt;Let us begin with a definition. Given a matrix $\boldsymbol A$, the vector $x$ is an eigenvector
of $\boldsymbol A$ and has a corresponding eigenvalue $\lambda$, if&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol A \boldsymbol x = \lambda \boldsymbol x.
$$&lt;/p&gt;
&lt;p&gt;The eigenvectors of a matrix $\boldsymbol A$ are exactly those vectors which
when transformed by the mapping defined by $\boldsymbol A$ are only scaled by
$\lambda$, but their direction does not change.&lt;/p&gt;
&lt;h2 id=&#34;eigenvalues-and-eigenvectors-of-a-projection-matrix&#34;&gt;Eigenvalues and eigenvectors of a projection matrix&lt;/h2&gt;
&lt;p&gt;To understand what eigenvectors are and how they behave, let us consider a
projection matrix $\boldsymbol P$. What are $x$&amp;rsquo;s and $\lambda$&amp;rsquo;s for a
projection matrix?&lt;/p&gt;
&lt;p&gt;The key property we&amp;rsquo;ll use is $\boldsymbol P^2 = \boldsymbol P$. This is
because when we project a vector $x$ onto a plane to get $\hat x$, that is
$\boldsymbol P x = \hat x$, we would expect that projecting $\hat x$ again to
do nothing, since it already lies in the plane, that is&lt;/p&gt;
&lt;p&gt;$$
\hat x = \boldsymbol P \hat x = \boldsymbol P (\boldsymbol P x) = (\boldsymbol
P \boldsymbol P) x = \boldsymbol P^2 x.
$$&lt;/p&gt;
&lt;p&gt;Now thinking about eigenvectors as those vectors which don&amp;rsquo;t change direction
when a projection matrix is applied, we can deduce two cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any $x$ already in the plane: $\boldsymbol P x = x, \lambda = 1$.&lt;/li&gt;
&lt;li&gt;Any $x$ perpendicular to the plane: $\boldsymbol P x = 0 x, \lambda = 0$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, a projection matrix $\boldsymbol P$ has two eigenvalues, $\lambda
= 0$ and $\lambda = 1$, and two sets of eigenvectors. Those that lie in the
projection plane, and those that are perpendicular to it.&lt;/p&gt;
&lt;h2 id=&#34;eigenvalues-of-a-2-times-2-permutation-matrix&#34;&gt;Eigenvalues of a $2 \times 2$ permutation matrix&lt;/h2&gt;
&lt;p&gt;One more small example, consider a $2 \times 2$ permutation matrix
$\boldsymbol A = \begin{pmatrix}0 &amp;amp; 1 \\ 1 &amp;amp; 0 \end{pmatrix}$.&lt;/p&gt;
&lt;p&gt;We can find the eigenvectors straight away, at least the first one, which is
simply $x = (1\ 1)^T$, since $\boldsymbol A x = x$, and so its corresponding
eigenvalue is $\lambda = 1$.&lt;/p&gt;
&lt;p&gt;If we think a little harder, we can guess the second eigenvector to be
$x = (-1\ 1)^T$, since $\boldsymbol A = -x$ with an eigenvalue $\lambda = -1$.&lt;/p&gt;
&lt;h2 id=&#34;computing-eigenvalues-and-eigenvectors&#34;&gt;Computing eigenvalues and eigenvectors&lt;/h2&gt;
&lt;p&gt;We can re-arrange the terms in our definition to get a direct way to compute
eigenvalues and eigenvectors of a matrix $\boldsymbol A$. Simply move $\lambda x$
to the left&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
\boldsymbol A x &amp;amp;= \lambda x \\\\
(\boldsymbol A - \lambda \boldsymbol I) x &amp;amp;= 0 \\\\
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;and then notice that $\boldsymbol A - \lambda \boldsymbol I$ must be singular,
because $x$ lies in its nullspace. We know that singular matrices have a zero
determinant, and we can use this to compute the eigenvalues $\lambda$ simply by
writing&lt;/p&gt;
&lt;p&gt;$$
\det (\boldsymbol A - \lambda \boldsymbol I) = 0.
$$&lt;/p&gt;
&lt;p&gt;This is called the &lt;strong&gt;characteristic equation&lt;/strong&gt;. The equation $det(\boldsymbol A&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\lambda \boldsymbol I) = 0$ gives us a polynomial of degree $n$, which we can
use to find $n$ solutions $\lambda$. These need not be different, and can even
be complex numbers. But once we obtain the $\lambda$&amp;rsquo;s we can plug them back into&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$$
(\boldsymbol A - \lambda \boldsymbol I) x = 0
$$&lt;/p&gt;
&lt;p&gt;and one by one obtain their corresponding eigenvectors $x$.&lt;/p&gt;
&lt;h2 id=&#34;eigenvalues-and-eigenvectors-of-an-upper-triangular-matrix&#34;&gt;Eigenvalues and eigenvectors of an upper triangular matrix&lt;/h2&gt;
&lt;p&gt;For a triangular matrix, the determinant is just the diagonal&lt;/p&gt;
&lt;p&gt;$$
det(\boldsymbol A) = \prod_{i=1}^n \boldsymbol A_{ii}
$$&lt;/p&gt;
&lt;p&gt;which means solving the characteristic equation of $\boldsymbol A$
simply amounts to multiplying out the diagonal&lt;/p&gt;
&lt;p&gt;$$
det(\boldsymbol A - \lambda \boldsymbol I) = \prod_{i=1}^n (\boldsymbol A - \lambda \boldsymbol I)_{ii},
$$&lt;/p&gt;
&lt;p&gt;which gives us a factored polynomial $(\boldsymbol A_{11} - \lambda)(\boldsymbol A_{22} -
\lambda)\ldots(\boldsymbol A_{nn} - \lambda)$, from which we immediately see that the
eigenvalues are the diagonal elements.&lt;/p&gt;
&lt;h2 id=&#34;diagonalization-boldsymbol-s-1-boldsymbol-a-boldsymbol-s--boldsymbol-lambda&#34;&gt;Diagonalization $\boldsymbol S^{-1} \boldsymbol A \boldsymbol S = \boldsymbol \Lambda$&lt;/h2&gt;
&lt;p&gt;Suppose we have $n$ linearly independent eigenvectors of $\boldsymbol A$. Put
them int the columns of $\boldsymbol S$. We now write&lt;/p&gt;
&lt;p&gt;$$
\def\vertbar{{\rule[-1ex]{0.5pt}{2.5ex}}}
$$&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol A \boldsymbol S = A \begin{bmatrix}
\vertbar &amp;amp; \vertbar &amp;amp; &amp;amp; \vertbar \\\\
x_1 &amp;amp; x_2 &amp;amp; \cdots &amp;amp; x_n \\\\
\vertbar &amp;amp; \vertbar &amp;amp; &amp;amp; \vertbar
\end{bmatrix} = \begin{bmatrix}
\vertbar &amp;amp; \vertbar &amp;amp; &amp;amp; \vertbar \\\\
\lambda_1 x_1 &amp;amp; \lambda_2 x_2 &amp;amp; \cdots &amp;amp; \lambda_n x_n \\\\
\vertbar &amp;amp; \vertbar &amp;amp; &amp;amp; \vertbar
\end{bmatrix} = \boldsymbol S \boldsymbol \Lambda
$$&lt;/p&gt;
&lt;p&gt;where $\boldsymbol \Lambda$ is a diagonal matrix of eigenvalues. Thus we get
$\boldsymbol A \boldsymbol S = \boldsymbol S \boldsymbol \Lambda$. If we have
$n$ independent eigenvectors in $\boldsymbol A$, we also get&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\boldsymbol A \boldsymbol S &amp;amp;= \boldsymbol S \boldsymbol \Lambda \\\\
\boldsymbol S^{-1} \boldsymbol A \boldsymbol S = \boldsymbol \Lambda \\\\
\boldsymbol A &amp;amp;= \boldsymbol S \boldsymbol \Lambda \boldsymbol S^{-1}
\end{align}
$$&lt;/p&gt;
&lt;p&gt;The matrix $\boldsymbol A$ is sure to have $n$ independent eigenvectors (and be
diagonalizable) if all the $\lambda$&amp;rsquo;s are different (no repeated $\lambda$&amp;rsquo;s).
Repeated eigenvalues mean $\boldsymbol A$ may or may not have $n$ independent
eigenvectors.&lt;/p&gt;
&lt;p&gt;Proof (ref G. Strang, Introduction to LA): Suppose $c_1 + x_1 + c_2 x_2 = 0$. Multiply by $\boldsymbol A$ to
find $c_1 \lambda_1 x_1 + c_2 \lambda_2 x_2 = 0$. Multiply by $\lambda_2$
to find $c_1 \lambda_2 x_1 + c_2 \lambda_2 x_2 = 0$. Now subtracting
these two equations gives us&lt;/p&gt;
&lt;p&gt;$$
(\lambda_1 - \lambda_2) c_1 x_1 = 0.
$$&lt;/p&gt;
&lt;p&gt;Since $\lambda_1 \neq \lambda_2$ and $x_1 \neq 0$, we conclude $c_1 = 0$.
We can derive $c_2 = 0$ the same way. Since $c_1 = c_2 = 0$ are the only
coefficients for which $c_1 x_1 + c_2 x_2 = 0$, we see that $x_1$ and
$x_2$ are linearly independent.&lt;/p&gt;
&lt;p&gt;The same argument can be extended to $n$ eigenvectors and eigenvalues.&lt;/p&gt;
&lt;h2 id=&#34;sum-of-eigenvalues-equlas-the-trace&#34;&gt;Sum of eigenvalues equlas the trace&lt;/h2&gt;
&lt;p&gt;Another very useful fact is that the sum of the eigenvalues equals
the sum of the main diagonal (called the &lt;strong&gt;trace&lt;/strong&gt; of $\boldsymbol A$),
that is&lt;/p&gt;
&lt;p&gt;$$
\lambda_1 + \lambda_2 + \ldots + \lambda_n = \boldsymbol A_{11} +
\boldsymbol A_{22} + \ldots + \boldsymbol A_{nn} = Tr(\boldsymbol A).
$$&lt;/p&gt;
&lt;p&gt;To prove this we&amp;rsquo;ll first show that $Tr(\boldsymbol A \boldsymbol B) =
Tr(\boldsymbol B \boldsymbol A)$.&lt;/p&gt;
&lt;p&gt;To get a single element on the diagonal of $\boldsymbol A \boldsymbol B$ we
simply write&lt;/p&gt;
&lt;p&gt;$$
(\boldsymbol A \boldsymbol B)_{jj} = \sum_{k} \boldsymbol A_{jk} \boldsymbol
B_{kj}
$$&lt;/p&gt;
&lt;p&gt;and to get the trace we just sum over all possible $j$ as&lt;/p&gt;
&lt;p&gt;$$
Tr(\boldsymbol A \boldsymbol B) = \sum_{j} \sum_{k} \boldsymbol A_{jk}
\boldsymbol B_{kj}.
$$&lt;/p&gt;
&lt;p&gt;On the other hand, the $k$-th element on the diagonal of $\boldsymbol B
\boldsymbol A$ is&lt;/p&gt;
&lt;p&gt;$$
(\boldsymbol B \boldsymbol A)_{kk} = \sum_{j} \boldsymbol B_{kj} \boldsymbol
A_{jk}
$$&lt;/p&gt;
&lt;p&gt;and the trace $Tr(\boldsymbol B \boldsymbol A)$ is&lt;/p&gt;
&lt;p&gt;$$
Tr(\boldsymbol B \boldsymbol A) = \sum_{k} \sum_{j} \boldsymbol B_{kj}
\boldsymbol A_{jk}.
$$&lt;/p&gt;
&lt;p&gt;But since we can swap the order of summation and also swap the order of
multiplication, we get&lt;/p&gt;
&lt;p&gt;$$
Tr(\boldsymbol B \boldsymbol A) = \sum_{k} \sum_{j} \boldsymbol B_{kj}
\boldsymbol A_{jk} = \sum_{j} \sum_{k} \boldsymbol A_{jk} \boldsymbol
B_{kj} = Tr(\boldsymbol A \boldsymbol B).
$$&lt;/p&gt;
&lt;p&gt;Now consider we have $n$ different eigenvalues. We can diagonalize the matrix&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol S^{-1} \boldsymbol A \boldsymbol S = \boldsymbol \Lambda
$$&lt;/p&gt;
&lt;p&gt;where $\boldsymbol \Lambda$ is a diagonal matrix of eigenvalues of $\boldsymbol
A$.  Using our trace trick we can write&lt;/p&gt;
&lt;p&gt;$$
Tr(\boldsymbol \Lambda) = Tr(\boldsymbol S^{-1} \boldsymbol A \boldsymbol S) =
Tr((\boldsymbol S^{-1} \boldsymbol A) \boldsymbol S) = Tr(\boldsymbol S (\boldsymbol S^{-1} \boldsymbol A)) =
Tr((\boldsymbol S \boldsymbol S^{-1}) \boldsymbol A) = Tr(\boldsymbol I \boldsymbol A) = Tr(\boldsymbol A)
$$&lt;/p&gt;
&lt;p&gt;and thus the sum of eigenvalues is equal the trace of $\boldsymbol A$. We&amp;rsquo;ve
only shown this for the case of $n$ different eigenvalues. This property does
hold in general, but requires some properties we haven&amp;rsquo;t proven yet (Jordan
normal form), and thus we skip the rest of the proof.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested, check out &lt;a href=&#34;http://www.applet-magic.com/eigenvaluestrace.htm&#34;&gt;the following
article&lt;/a&gt; which shows the
whole proof, and possibly &lt;a href=&#34;https://en.wikipedia.org/wiki/Jordan_normal_form&#34;&gt;the Wikipedia article on Jordan normal
form&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;powers-of-a-matrix&#34;&gt;Powers of a matrix&lt;/h2&gt;
&lt;p&gt;If $\boldsymbol A x = \lambda x$, then we multiply by $\boldsymbol A$ and get&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol A^2 x = \lambda \boldsymbol A x = \lambda^2 x.
$$&lt;/p&gt;
&lt;p&gt;Continuing&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol A^2 = \boldsymbol S \boldsymbol \Lambda \boldsymbol S^{-1}
\boldsymbol S \boldsymbol \Lambda \boldsymbol S^{-1} = \boldsymbol S \boldsymbol \Lambda^2 \boldsymbol S^{-1}
$$&lt;/p&gt;
&lt;p&gt;or in general&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol A^k = \boldsymbol S \boldsymbol \Lambda^k \boldsymbol S^{-1}.
$$&lt;/p&gt;
&lt;p&gt;Theorem: $\boldsymbol A^k \rightarrow 0$ as $k \rightarrow \infty$ if all
$|\lambda_i| &amp;lt; 1$.&lt;/p&gt;
&lt;h2 id=&#34;more-properties&#34;&gt;More properties&lt;/h2&gt;
&lt;p&gt;$\boldsymbol A$ and $\boldsymbol B$ share the same $n$ independent
eigenvectors if and only if $\boldsymbol A \boldsymbol B = \boldsymbol B
\boldsymbol A$.&lt;/p&gt;
&lt;p&gt;This is true because $\boldsymbol A \boldsymbol B x = \lambda \beta x$ and
$\boldsymbol B \boldsymbol A x = \lambda \beta x$ since&lt;/p&gt;
&lt;p&gt;$$
\boldsymbol A \boldsymbol B x = \boldsymbol A \beta x = \beta \boldsymbol A x = \beta \lambda x.
$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But this only holds if $\boldsymbol A$ and $\boldsymbol B$ share the same eigenvectors!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One last interesting fact we can show is what happens to the eigenvalues when
we add a constant $c$ to the matrix $\boldsymbol A$. The proof is rather trivial,
if $\boldsymbol A x = \lambda x$, then&lt;/p&gt;
&lt;p&gt;$$
(\boldsymbol A + c) x = (\boldsymbol A + c \boldsymbol I) x = (\lambda + c) x.
$$&lt;/p&gt;
&lt;p&gt;Adding a constant to a matrix causes its eigenvalues to increase by exactly
that constant.&lt;/p&gt;
&lt;h2 id=&#34;references-and-visualizations&#34;&gt;References and visualizations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://math.mit.edu/~gs/linearalgebra/ila0601.pdf&#34;&gt;Introduction to Linear Algebra, Gilbert Strang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://setosa.io/ev/eigenvectors-and-eigenvalues/&#34;&gt;setosa.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://the-learning-machine.com/article/machine-learning/linear-algebra&#34;&gt;The Learning Machine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Mixture of Categoricals and Latent Dirichlet Allocation (LDA)</title>
		<link>https://blog.jakuba.net/mixture-of-categoricals-and-latent-dirichlet-allocation-lda/</link>
		<pubDate>Wed, 05 Dec 2018 21:50:26 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/mixture-of-categoricals-and-latent-dirichlet-allocation-lda/</guid>
		<description>&lt;p&gt;Now that we&amp;rsquo;ve worked through the &lt;a href=&#34;https://blog.jakuba.net/posterior-predictive-distribution-for-the-dirichlet-categorical-model/&#34;&gt;Dirichlet-Categorical model in quite a bit of detail&lt;/a&gt;
we can move onto document modeling.&lt;/p&gt;
&lt;p&gt;Let us begin with a very simple document model in which we consider only a single distribution
over words across all documents. We have the following variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$N_d$: number of words in $d$-th document.&lt;/li&gt;
&lt;li&gt;$D$: number of documents.&lt;/li&gt;
&lt;li&gt;$M$: number of words in the dictionary.&lt;/li&gt;
&lt;li&gt;$\boldsymbol\beta = (\beta_1,\ldots,\beta_M)$: probabilities of each word.&lt;/li&gt;
&lt;li&gt;$w_{nd} \sim Cat(\boldsymbol\beta)$: $n$-th word in $d$-th document.&lt;/li&gt;
&lt;li&gt;$I(w_{nd} = m)$: indicator variable saying that the $n$-th word in the $d$-th document is $m$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize, there is only one random variable $w_{nd}$, which is observed
and has a Categorical distribution with a parameter $\boldsymbol\beta$.  We can
fit this model &lt;a href=&#34;https://blog.jakuba.net/maximum-likelihood-for-multinomial-distribution/&#34;&gt;using maximum likelihood estimation (MLE) directly as we&amp;rsquo;ve
shown before&lt;/a&gt;,
that is&lt;/p&gt;
&lt;p&gt;$$
\beta_m = \frac{c_m}{N}
$$&lt;/p&gt;
&lt;p&gt;where $c_m$ is the number of occurences of the $m$-th word and $N$ is the
total number of word occurences in all documents. It is important to distinguish
between $M$ and $N$, as $M$ is the number of words in the dictionary, that is unique words,
and $N$ is the sum of all the counts. Specifically:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
N &amp;amp;= \sum_{d=1}^D N_d \\\\
c_m &amp;amp;= \sum_{d=1}^D \sum_{n=1}^{N_d} I(w_{nd} = m)
\end{align}
$$&lt;/p&gt;
&lt;p&gt;In this case $c_m$ sums over document, and in each document it sums up all the
occurences of $m$-th word, that is summing over all indexes in that document
and adding $1$ for each occurence of $m$.&lt;/p&gt;
&lt;p&gt;There are downsides to this simple model though. Sharing one $\boldsymbol\beta$
between all documents means that all documents have the same distribution of words.
What we would like instead is allow each document to be about a different topic,
and have a different distribution of words for each topic.&lt;/p&gt;
&lt;h2 id=&#34;mixture-of-categoricals&#34;&gt;Mixture of Categoricals&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ll modify our model to allow it to have multiple topics, each of which will
have its own categorical distribution on words. We introduce a second random
variable $z_d \sim Cat(\boldsymbol\theta)$ where $\boldsymbol\theta$ is a
vector of topic probabilities.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$z_d$: assigns document $d$ to one of the $K$ categories.&lt;/li&gt;
&lt;li&gt;$\theta_k = p(z_d = k)$: probability that a document $d$ is assigned to category $k$.&lt;/li&gt;
&lt;li&gt;$w_{nd} | z_d \sim Cat(\boldsymbol\beta_{z_d})$: distribution over words
at $n$-th position in document $d$ given we have observed its topic $z_d$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A small note, the distribution of $w_{nd}$ actually depends on the document
$d$ (on its topic), while in the previous document it remained constant
throughout. We can write this model in its generative process specification
as follows:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
z_d &amp;amp;\sim Cat(\boldsymbol\theta) \\\\
w_{nd} | z_d &amp;amp;\sim Cat(\boldsymbol\beta_{z_d})
\end{align}
$$&lt;/p&gt;
&lt;p&gt;In order to allow our model to capture different topics, we introduced a set of
latent (hidden) variables $z_d$. Now the problem becomes, how do we perform
maximum likelihood estimation with these hidden variables? Let us write out the likelihood&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
p(\boldsymbol w | \boldsymbol\theta, \boldsymbol\beta)
&amp;amp;= \prod_{d=1}^D p(\boldsymbol w_d | \boldsymbol\theta, \boldsymbol\beta) \qquad\text{expanding the marginal}\\\\
&amp;amp;= \prod_{d=1}^D \sum_{k=1}^K p(\boldsymbol w_d, z_d = k | \boldsymbol\theta, \boldsymbol\beta) \\\\
&amp;amp;= \prod_{d=1}^D \sum_{k=1}^K p(\boldsymbol w_d | z_d = k, \boldsymbol\beta) p(z_d = k | \boldsymbol\theta) \\\\
&amp;amp;= \prod_{d=1}^D \sum_{k=1}^K \left( \prod_{n=1}^{N_d} p(w_{nd} | z_d = k, \boldsymbol\beta) \right) p(z_d = k | \boldsymbol\theta) \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;We cannot easily optimize through the marginalization, and even if we were to
take the log likelihood&lt;/p&gt;
&lt;p&gt;$$
\log p(\boldsymbol w | \boldsymbol\theta, \boldsymbol\beta)
= \sum_{d=1}^D \log \left( \sum_{k=1}^K \left( \prod_{n=1}^{N_d} p(w_{nd}
| z_d = k, \boldsymbol\beta) \right) p(z_d = k | \boldsymbol\theta) \right)
$$&lt;/p&gt;
&lt;p&gt;we run into a problem with a sum inside a log, that is $\sum \log \left(\sum
\ldots \right)$, and we cannot move the log inside the sum, and solving the
equation analytically is not possible, at least in the general form. This is
where the Expectation-Maximization (EM) algorithm comes in and allows us to
find a local optimum using MLE. But for now we&amp;rsquo;ll move onto the bayesian
approach and cover EM in a separate article in more depth.&lt;/p&gt;
&lt;h2 id=&#34;bayesian-mixture-of-categoricals&#34;&gt;Bayesian Mixture of Categoricals&lt;/h2&gt;
&lt;p&gt;To move from a point estimate of the EM to a fully bayesian treatment, we&amp;rsquo;ll
introduce a prior distribution over the parameters $\boldsymbol\theta$ and
$\boldsymbol\beta$. Since they are both parameters of a Categorical
distribution, it is of no surprise that our priors will be a Dirichlet
distribution.&lt;/p&gt;
&lt;p&gt;The generative model specification then becomes&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\boldsymbol\theta \sim Dir(\boldsymbol\alpha) \\\\
\boldsymbol\beta_k \sim Dir(\boldsymbol\gamma) \\\\
z_d | \boldsymbol\theta \sim Cat(\boldsymbol\theta) \\\\
w_{nd} | z_d,\boldsymbol\beta_{z_d} \sim Cat(\boldsymbol\beta_{z_d})
\end{align}
$$&lt;/p&gt;
&lt;p&gt;where $\boldsymbol\alpha$ is the hyperparameter over topic probabilities, while
$\boldsymbol\gamma$ is the hyperparameter over dictionary probabilities.&lt;/p&gt;
&lt;p&gt;Now that we have our priors, we could compute a MAP estimate using EM, but we&amp;rsquo;ll
instead go one step further, extend our model to Latent Dirichlet allocation (LDA),
and then cover full bayesian inference using Gibbs sampling.&lt;/p&gt;
&lt;h2 id=&#34;latent-dirichlet-allocation-lda&#34;&gt;Latent Dirichlet Allocation (LDA)&lt;/h2&gt;
&lt;p&gt;One limitation of the mixture of categoricals model is that words in each
document are drawn only from one specific topic. The problem is when we have
documents that span more than one topic, in which case we need to learn a
mixture of those topics. We also allow the distribution of topics to vary
across documents.&lt;/p&gt;
&lt;p&gt;In LDA, each document becomes a mixture of topics, but each word is still drawn
from one of those topics. We don&amp;rsquo;t need to introduce new random variables,
we&amp;rsquo;ll simply create more of what we have. In the mixture of categoricals we had
$z_d$ be a distribution over possible topics of the $d$-th document.  We
replace it with $z_{nd}$ which becomes a distribution over possible topics of
the $n$-th word in $d$-th document. We also introduce $\boldsymbol\theta_d$,
which is a distribution over topics for the $d$-th document.&lt;/p&gt;
&lt;p&gt;A generative model then becomes:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\boldsymbol\theta_d &amp;amp;\sim Dir(\boldsymbol\alpha) \\\\
\boldsymbol\beta_k &amp;amp;\sim Dir(\boldsymbol\gamma) \\\\
z_{nd} | \boldsymbol\theta_d &amp;amp;\sim Cat(\boldsymbol\theta_d) \\\\
w_{nd} | z_{nd}, \boldsymbol\beta_{z_d} &amp;amp;\sim Cat(\boldsymbol\beta_{z_d}) \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;We can view this generative process as a sequential recipe for generating a set
of documents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For each document $d$, draw $\boldsymbol\theta_d$ from the prior
distribution $Dir(\boldsymbol\alpha)$.This is the parameter for our
Categorical distribution over topics.&lt;/li&gt;
&lt;li&gt;For each topic $k$, draw $\boldsymbol\beta_k$ from the prior
$Dir(\boldsymbol\gamma)$. This is the parameter for our Categorical
distribution over words in that topic.&lt;/li&gt;
&lt;li&gt;For each $z_{nd}$, that is each word position $n$ in a document $d$ draw its
topic from $Cat(\boldsymbol\theta_d)$. This allows us to have each word in
a document drawn from a different topic.&lt;/li&gt;
&lt;li&gt;Draw each word $w_{nd}$ from its corresponding $Cat(\boldsymbol\beta_{z_{nd}})$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The critical part here is in the last step, where each word at position $n$ in
document $d$ is drawn from $Cat(\boldsymbol\beta_{z_{nd}})$. The parameter
$\boldsymbol\beta_{z_{nd}}$ of the distribution of $w_{nd}$ depends on
$z_{nd}$, that is $p(w_{nd} | z_{nd})$. Even though each document $d$ has
only a single distribution over topics $Cat(\boldsymbol\theta_d)$, we draw a topic
$z_{nd}$ for each word position $n$ in the document $d$.&lt;/p&gt;
&lt;p&gt;We can think of $z_{nd}$ as defining a distribution over words at position $n$
in document $d$.  The problem with viewing it directly as a distribution is
that in such view we ignore the topics and don&amp;rsquo;t share word probabilities among
different positions from the same topic. That&amp;rsquo;s why we keep a separate set of
random variables $\boldsymbol\beta_k$, which define the distribution over
words in a topic $k$, and $z_{nd}$ simply acts as an index into one of those
$\boldsymbol\beta_k$.&lt;/p&gt;
&lt;p&gt;This allows us to draw the topic of each position in each document independently,
while sharing the probabilities of words within the same topic between document.&lt;/p&gt;
&lt;p&gt;Just to summarize, we have the following count constants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$D$ is the number of documents.&lt;/li&gt;
&lt;li&gt;$N_d$ is the number of words in document $d$.&lt;/li&gt;
&lt;li&gt;$K$ is the number of topics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and the following random variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One hyperparameter $\boldsymbol\alpha$ for the prior distribution on topics
for each document.&lt;/li&gt;
&lt;li&gt;One hyperparameter $\boldsymbol\gamma$ for the prior distribution on words in
each topic.&lt;/li&gt;
&lt;li&gt;A set of $D$ (number of documents) parameters $\boldsymbol\theta_{1:D}$ for our
per-document topic distribution.&lt;/li&gt;
&lt;li&gt;A set of $K$ parameters $\boldsymbol\beta_{1:K}$ for our per-topic word distribution.&lt;/li&gt;
&lt;li&gt;A set of $N \times D$ random variables $z_{nd}$ for each position in each
document signifying the topic of a word at that position.&lt;/li&gt;
&lt;li&gt;A set of $N \times D$ random variables $w_{nd}$ representing the actual word
at a given position in each document, drawn from the $z_{nd}$-th topic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inference-in-lda&#34;&gt;Inference in LDA&lt;/h2&gt;
&lt;p&gt;Similarly to the Mixture of Categoricals, if we wanted to compute the posterior
over our parameters $\boldsymbol\beta_{1:K}$ and $\boldsymbol\theta_{1:D}$ given we
observed words $z_{nd}$, we&amp;rsquo;d need to marginalize out the latent variables
$z_{nd}$. Let us write out the posterior first:&lt;/p&gt;
&lt;p&gt;$$
p(\boldsymbol\beta, \boldsymbol\theta, \boldsymbol z | \boldsymbol w, \alpha, \gamma) =
\frac{p(\boldsymbol\beta, \boldsymbol\theta, \boldsymbol z, \boldsymbol w | \alpha, \gamma)}{
p(\boldsymbol w | \alpha, \gamma)
}
$$&lt;/p&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;p&gt;$$
p(\boldsymbol\beta, \boldsymbol\theta, \boldsymbol z, \boldsymbol w | \gamma, \alpha)
= \prod_{k=1}^K p(\boldsymbol\beta_k | \gamma) \prod_{d=1}^D \left(
p(\boldsymbol\theta_d | \alpha)
\prod_{n=1}^{N_d} \left( p(z_{nd} | \boldsymbol\theta_d) p(w_{nd} | \boldsymbol\beta, z_{nd}) \right)
\right)
$$&lt;/p&gt;
&lt;p&gt;and the normalization constant $p(\boldsymbol w | \alpha, \gamma)$ written out as&lt;/p&gt;
&lt;p&gt;$$
p(\boldsymbol w | \alpha, \gamma) = \int \int \sum_{z_{id}} \prod_{d=1}^D \prod_{k=1}^K \prod_{n=1}^{N_d}
p(z_{nd} | \boldsymbol\theta_d) p(\boldsymbol\theta_d | \alpha) p(w_{nd} | \boldsymbol\beta, z_{nd})
p(\boldsymbol\beta_k | \gamma)\ d\boldsymbol\beta_k\ d\boldsymbol\theta_d
$$&lt;/p&gt;
&lt;p&gt;is intractable, since we&amp;rsquo;d need to marginalize out the latent variables
$z_{nd}$. If every document had $N$ words, this means $K^N$ configurations per
document.&lt;/p&gt;
&lt;p&gt;Although the posterior is intractable for exact inference, we can use many approximate
inference algorithms, e.g. Markov-Chain Monte Carlo and variational inference. In the next
article we&amp;rsquo;ll see how to apply Gibbs sampling to LDA.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mlg.eng.cam.ac.uk/teaching/4f13/1819/&#34;&gt;Probabilistic Machine Learning 4f13 Michaelmas 2018,
Cambridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jmlr.org/papers/volume3/blei03a/blei03a.pdf&#34;&gt;Latent Dirichlet Allocation, David Blei, Andrew Ng, Michael
Jordan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Posterior Predictive Distribution for the Dirichlet-Categorical Model (Bag of Words)</title>
		<link>https://blog.jakuba.net/posterior-predictive-distribution-for-the-dirichlet-categorical-model/</link>
		<pubDate>Tue, 04 Dec 2018 14:22:58 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/posterior-predictive-distribution-for-the-dirichlet-categorical-model/</guid>
		<description>&lt;p&gt;In the &lt;a href=&#34;https://blog.jakuba.net/maximum-likelihood-for-multinomial-distribution/&#34;&gt;previous article we derived a maximum likelihood estimate (MLE) for the
parameters of a Multinomial distribution&lt;/a&gt;.  This time
we&amp;rsquo;re going to compute the full posterior of the Dirichlet-Categorical model as
well as derive the posterior predictive distribution. This will close our
exploration of the Bag of Words model.&lt;/p&gt;
&lt;h2 id=&#34;likelihood&#34;&gt;Likelihood&lt;/h2&gt;
&lt;p&gt;Similarly as in the previous article, our likelihood will be defined by a
Multinomial distribution, that is&lt;/p&gt;
&lt;p&gt;$$
p(D|\boldsymbol\pi) \propto \prod_{i+1}^m \pi_i^{x_i}.
$$&lt;/p&gt;
&lt;p&gt;Since the Dirichlet distribution is a conjugate prior to the Multinomial, we
can omit the normalization constants as we will be able to infer them
afterwards from the unnormalized posterior parameters. Knowing that the
posterior is again a Dirichlet distribution saves us a lot of tedious work.&lt;/p&gt;
&lt;h2 id=&#34;prior&#34;&gt;Prior&lt;/h2&gt;
&lt;p&gt;Much like the model name would suggest, our prior will be the Dirichlet distribution,
which defines an $m-dimensional$ probability simplex over the Multinomial&amp;rsquo;s parameters.
The prior has the form&lt;/p&gt;
&lt;p&gt;$$
p(\boldsymbol\pi|\boldsymbol\alpha) = \frac{1}{B(\boldsymbol\alpha)}
\prod_{i=1}^m \pi_i^{\alpha_i - 1}.
$$&lt;/p&gt;
&lt;h2 id=&#34;posterior&#34;&gt;Posterior&lt;/h2&gt;
&lt;p&gt;Multiplying the likelihood by the prior will directly give us the shape of the posterior
because of the conjugacy. We don&amp;rsquo;t have to care about the normalizing constant. As a result, we obtain&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
p(\boldsymbol\pi | D) &amp;amp;\propto p(D|\boldsymbol\pi) p(\boldsymbol\pi | \boldsymbol\alpha) \\\\
&amp;amp;= \prod_{i=1}^m \pi_i^{x_i} \prod_{i=1}^m \pi_i^{\alpha_i - 1} \\\\
&amp;amp;\propto \prod_{i=1}^m \pi_i^{\alpha_i + x_i - 1} \\\\
&amp;amp;\propto Dir(\boldsymbol\pi | \alpha_1 + x_1, \alpha_2 + x_2, \ldots, \alpha_m + x_m)
\end{align}
$$&lt;/p&gt;
&lt;p&gt;We can write this more succintly as $Dir(\boldsymbol\pi | \boldsymbol\alpha&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\boldsymbol x)$ where $x$ is the vector of counts of the observed data $D$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;map-estimate-of-the-parameters&#34;&gt;MAP estimate of the parameters&lt;/h2&gt;
&lt;p&gt;Since we have our posterior, we can take a small detour and compute the
maximum-aposteriori (MAP) estimate of the parameters, which is simply the mode
of the posterior (its maximum). We can do this similarly to the &lt;a href=&#34;https://blog.jakuba.net/maximum-likelihood-for-multinomial-distribution/&#34;&gt;previous
article&lt;/a&gt; and use lagrange multipliers to enforce the constraint that $\sum_{i=1}^m&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;\pi_i = 1$. Since the Dirichlet distribution is again of the exponential family,
we differentiate the log posterior, which in turn is the log likelihood plus the log prior&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$$
\log p(\boldsymbol\pi | D) \propto \log p(D | \boldsymbol\pi) + \log p(\boldsymbol\pi | \boldsymbol\alpha).
$$&lt;/p&gt;
&lt;p&gt;The lagrangian than has the following form&lt;/p&gt;
&lt;p&gt;$$
L(\boldsymbol\pi, \lambda) = \sum_{i=1}^m x_i \log \pi_i + \sum_{i=1}^m
(\alpha_i - 1) \log \pi_i + \lambda \left( 1 - \sum_{i=1}^m \pi_i \right).
$$&lt;/p&gt;
&lt;p&gt;Same as before, we differentiate the lagrangian with respect to $\boldsymbol\pi_i$&lt;/p&gt;
&lt;p&gt;$$
\frac{\partial}{\partial\pi_i} L(\boldsymbol\pi, \lambda) =
\frac{x_i}{\pi_i} + \frac{\alpha_i - 1}{\pi_i} - \lambda = \frac{x_i + \alpha_i&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1}{\pi_i} - \lambda
$$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and set it equal to zero&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
0 &amp;amp;= \frac{x_i + \alpha_i - 1}{\pi_i} - \lambda \\\\
\lambda &amp;amp;= \frac{x_i + \alpha_i - 1}{\pi_i} \\\\
\pi_i &amp;amp;= \frac{x_i + \alpha_i - 1}{\lambda}.
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Finally, we can apply the same trick as before and solve for $\lambda$&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\pi_i &amp;amp;= \frac{x_i + \alpha_i - 1}{\lambda} \\\\
\sum_{i=1}^m \pi_i &amp;amp;= \sum_{i=1}^m \frac{x_i + \alpha_i - 1}{\lambda} \\\\
1 &amp;amp;= \sum_{i=1}^m \frac{x_i + \alpha_i - 1}{\lambda} \\\\
\lambda &amp;amp;= \sum_{i=1}^m \left( x_i + \alpha_i - 1 \right) \\\\
\lambda &amp;amp;= n - m + \sum_{i=1}^m \alpha_i.
\end{align}
$$&lt;/p&gt;
&lt;p&gt;We can plug this back in to get the MAP estimate&lt;/p&gt;
&lt;p&gt;$$
\pi_i = \frac{x_i + \alpha_i - 1}{n + \left(\sum_{i=1}^m \alpha_i \right) - m}.
$$&lt;/p&gt;
&lt;p&gt;Comparing this with the MLE estimate, which was&lt;/p&gt;
&lt;p&gt;$$
\pi_i = \frac{x_i}{n}
$$&lt;/p&gt;
&lt;p&gt;we can see the concentration parameter $\boldsymbol\alpha$ affects the
probability. If we were to set a uniform prior with $\alpha_i=1$, we would
recover the original MLE estimate.&lt;/p&gt;
&lt;h2 id=&#34;posterior-predictive&#34;&gt;Posterior predictive&lt;/h2&gt;
&lt;p&gt;The posterior predictive distribution give us a distribution over the possible
outcomes while taking into account our uncertainty in the parameters given by
the posterior distribution. For a general model with an outcome $X$ and a parameter
vector $\boldsymbol\theta$ the posterior predictive is given by the following&lt;/p&gt;
&lt;p&gt;$$
p(X|D) = \int p(X | \boldsymbol\theta, D) p(\boldsymbol\theta | D)\ d\boldsymbol\theta
$$&lt;/p&gt;
&lt;p&gt;Before we can integrate this, let us introduce &lt;a href=&#34;https://stats.stackexchange.com/a/166574/109849&#34;&gt;a small
trick&lt;/a&gt;. For any
$\boldsymbol\theta = (\theta_1,\ldots,\theta_m)$ let us define
$\theta_{\neg j} = (\theta_1, \ldots, \theta_{j-1}, \theta_{j+1},
\ldots, \theta_m)$, that is all $\theta_i$ except for $\theta_j$.
Using this we can write a marginal $p(\theta_j)$ as&lt;/p&gt;
&lt;p&gt;$$
\int p(\theta_j, \theta_{\neg j})\ d \theta_{\neg j} = p(\theta_j)
$$&lt;/p&gt;
&lt;p&gt;The posterior predictive&lt;/p&gt;
&lt;p&gt;$$
p(X = j | \boldsymbol\theta) = \int p(X | \boldsymbol\theta) p(\boldsymbol\theta)\ d\theta
$$&lt;/p&gt;
&lt;p&gt;can then be re-written using this trick as a double integral&lt;/p&gt;
&lt;p&gt;$$
\int_{\theta_j} \int_{\theta_{\neg j}} p(X = j | \boldsymbol\theta)
p(\boldsymbol\theta)\ d\theta_{\neg j}\ d\theta_j.
$$&lt;/p&gt;
&lt;h3 id=&#34;posterior-predictive-for-single-trival-dirichlet-categorical&#34;&gt;Posterior predictive for single trival Dirichlet-Categorical&lt;/h3&gt;
&lt;p&gt;If we&amp;rsquo;re considering a single-trial multinomial (multinoulli) we have $p(X
= j | \boldsymbol\pi) = \pi_j$, which is independent of
$\pi_{\neg j}$, simplifying the above expression&lt;/p&gt;
&lt;p&gt;$$
\int_{\pi_j} \pi_j \int_{\pi_{\neg j}} p(\boldsymbol\pi)&lt;br&gt;
d\pi_{\neg j}\ d\pi_j.
$$&lt;/p&gt;
&lt;p&gt;Now applying the marginalization trick we get $\int_{\pi_{\neg j}}
p(\pi)\ d\pi_{\neg j} = p(\pi_j)$ and our posterior has the
form&lt;/p&gt;
&lt;p&gt;$$
\int_{\pi_j} \pi_j p(\pi_j)\ d\pi_j.
$$&lt;/p&gt;
&lt;p&gt;Looking more closely at the formula, we can see this is an expectation of
$\pi_j$ under the posterior, that is&lt;/p&gt;
&lt;p&gt;$$
\int_{\pi_j} \pi_j p(\pi_j | D)\ d\pi_j = E[\pi_j |
D] = \frac{\alpha_j + x_j}{\sum_{i=1}^m \left( \alpha_i + x_i
\right)} = \frac{\alpha_j + x_j}{\alpha_0 + N}
$$&lt;/p&gt;
&lt;p&gt;where $\alpha_0 = \sum_{i=1}^m \alpha_i$ and $N = \sum_{i=1}^m x_i$.
Repeating the result one more time for clarity, the posterior predictive
for a single trial Multinomial (Multinoulli) is given by&lt;/p&gt;
&lt;p&gt;$$
p(X=j | D) = \frac{\alpha_j + x_j}{\alpha_0 + N}
$$&lt;/p&gt;
&lt;h3 id=&#34;posterior-predictive-for-a-general-multi-trial-dirichlet-multinomial&#34;&gt;Posterior predictive for a general multi-trial Dirichlet-Multinomial&lt;/h3&gt;
&lt;p&gt;Generalizing the posterior predictive to a Dirichlet-Multinomial model with
multiple trials is going to be a little bit more work. Let us begin by writing
the posterior predictive in its full form (note we drop the conditioning on $D$
in the likelihood for brevity, and because it is not needed). To avoid notation
clashes, let us replace the posterior $\boldsymbol\alpha + \boldsymbol x$ by
$\boldsymbol \alpha&amp;rsquo;$, so we&amp;rsquo;ll write $Dir(\boldsymbol\alpha&amp;rsquo;)$ and $\alpha_i&amp;rsquo;$
in place of $Dir(\boldsymbol\alpha + \boldsymbol x)$ and $\alpha_i + x_i$.&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
p(X|D) &amp;amp;= \int p(X | \boldsymbol\pi) p(\boldsymbol\pi | D)\ d\boldsymbol\pi \\\\
&amp;amp;= \int Mult(X | \boldsymbol\pi) Dir(\boldsymbol\alpha&amp;rsquo;) \ d\boldsymbol\pi \\\\
&amp;amp;= \int \left(\binom{n!}{x_1! \ldots x_m!} \prod_{i=1}^m \pi_i^{x_i} \right)
\left(\frac{1}{B(\boldsymbol\alpha + \boldsymbol x)} \prod_{i=1}^m \pi_i^{\alpha_i&amp;rsquo; - 1} \right) \ d\boldsymbol\pi \\\\
&amp;amp;= \binom{n!}{x_1! \ldots x_m!} \frac{1}{B(\boldsymbol\alpha&amp;rsquo;)}
\int \prod_{i=1}^m \pi_i^{x_i} \prod_{i=1}^m \pi_i^{\alpha_i&amp;rsquo; - 1} \ d\boldsymbol\pi \\\\
&amp;amp;= \binom{n!}{x_1! \ldots x_m!} \frac{1}{B(\boldsymbol\alpha&amp;rsquo;)}
\int \prod_{i=1}^m \pi_i^{x_i + \alpha_i&amp;rsquo; - 1} \ d\boldsymbol\pi \\\\
&amp;amp;= \binom{n!}{x_1! \ldots x_m!} \frac{1}{B(\boldsymbol\alpha&amp;rsquo;)} B(\boldsymbol\alpha&amp;rsquo; + \boldsymbol x) \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;where in the last equality we made use of knowing that the integral of an
unnormalized Dirichlet distribution is $B(\boldsymbol\alpha)$. Let us repeat
the definition of $B(\boldsymbol\alpha)$ again, that is&lt;/p&gt;
&lt;p&gt;$$
B(\boldsymbol\alpha) = \frac{\prod_{i=1}^m \Gamma(\alpha_i)}{\Gamma(\sum_{i=1}^m \alpha_i)}
$$&lt;/p&gt;
&lt;p&gt;and plugging this back into the formula we computed&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;$$
\begin{align}
p(X|D) &amp;amp;= \binom{n!}{x_1! \ldots x_m!} \frac{1}{B(\boldsymbol\alpha&amp;rsquo;)} B(\boldsymbol\alpha&amp;rsquo; + \boldsymbol x)\\\\
&amp;amp;= \frac{n!}{x_1! \ldots x_m!} \frac{\Gamma(\sum_{i=1}^m \alpha_i&amp;rsquo;)}{\prod_{i=1}^m \Gamma(\alpha_i&amp;rsquo;)}
\frac{\prod_{i=1}^m \Gamma(\alpha_i&amp;rsquo; + x_i)}{\Gamma(\sum_{i=1}^m \alpha_i&amp;rsquo; + x_i)} \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;To move forward, we need to introduce a more general form for the multinomial distribution
which allows for non-integer counts. All it comes down is basically replacing factorials with
the gamma function, that is instead of&lt;/p&gt;
&lt;p&gt;$$
p(\boldsymbol x | \boldsymbol\pi, n) = \binom{n!}{x_1!\ldots x_m!} \prod_{i=1}^m \pi_i^{x_i}
$$&lt;/p&gt;
&lt;p&gt;we write&lt;/p&gt;
&lt;p&gt;$$
p(\boldsymbol x | \boldsymbol\pi, n) = \frac{\Gamma(\sum_{i=1}^m x_i +
1)}{\prod_{i=1}^m \Gamma(x_i + 1)} \prod_{i=1}^m \pi_i^{x_i}.
$$&lt;/p&gt;
&lt;p&gt;Since only the normalizing constant changed, we can plug it back into our posterior predictive formula&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
p(X|D) &amp;amp;= \frac{\Gamma(\sum_{i=1}^m x_i + 1)}{\prod_{i=1}^m \Gamma(x_i + 1)}
\frac{\Gamma(\sum_{i=1}^m \alpha_i&amp;rsquo;)}{\prod_{i=1}^m \Gamma(\alpha_i&amp;rsquo;)}
\frac{\prod_{i=1}^m \Gamma(\alpha_i&amp;rsquo; + x_i)}{\Gamma(\sum_{i=1}^m \alpha_i&amp;rsquo; + x_i)} \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;which although ugly, it is the posterior predictive distribution in closed form :)&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.ubc.ca/~murphyk/MLbook/&#34;&gt;Machine Learning - A Probabilistic Perspective, chapter 3.4.4, by Kevin P. Murphy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://people.eecs.berkeley.edu/~stephentu/writeups/dirichlet-conjugate-prior.pdf?fbclid=IwAR1pBuknQZiTdDFj2_KDUaD8b5lSSbwlk1NYyZfmhPZ3rExg1lctc_kQCzw&#34;&gt;The Dirichlet-Multinomial and Dirichlet-Categorical models for Bayesian inference by Stephen Tu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Maximum Likelihood for the Multinomial Distribution (Bag of Words)</title>
		<link>https://blog.jakuba.net/maximum-likelihood-for-multinomial-distribution/</link>
		<pubDate>Mon, 03 Dec 2018 23:52:59 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/maximum-likelihood-for-multinomial-distribution/</guid>
		<description>&lt;p&gt;In this short article we&amp;rsquo;ll derive the maximum likelihood estimate (MLE) of the
parameters of a Multinomial distribution. If you need a &lt;a href=&#34;https://blog.jakuba.net/dirichlet-categorical-model/&#34;&gt;refresher on the
Multinomial distribution, check out the previous article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let us begin by repeating the definition of a Multinomial random variable.
Consider the bag of words model where we&amp;rsquo;re counting the nubmer of words in a
document, where the words are generated from a fixed dictionary. The
probability mass function (PMF) is defined as&lt;/p&gt;
&lt;p&gt;$$
p(\boldsymbol x | \boldsymbol \pi, n) = \binom{n!}{x_1! x_2! \ldots x_m!}
\prod_{i=1}^m \pi_i^{x_i} = n! \prod_{i=1}^m \frac{\pi_i^{x_i}}{x_i!}
$$&lt;/p&gt;
&lt;p&gt;where $\pi_i$ is the probability of $i-th$ word, $x_i$ is the nubmer of
occurences of that word, $m$ is the number of words in the dictionary, and
$n$ is the total number of occurences of all words.&lt;/p&gt;
&lt;p&gt;Since the Multinomial distribution comes from the exponential family, we know
computing the log-likelihood will give us a simpler expression, and since
$\log$ is concave computing the MLE on the log-likelihood will be equivalent
as computing it on the original likelihood function.&lt;/p&gt;
&lt;p&gt;Now taking the log-likelihood&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\log L(\boldsymbol \pi) &amp;amp;= \log n! \left( \prod_{i=1}^m \frac{\pi_i^{x_i}}{x_i!} \right) \\\\
&amp;amp;= \log n! + \sum_{i=1}^m x_i \log \pi_i - \sum_{i=1}^m \log x_i!.
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Before we can differentiate the log-likelihood to find the maximum, we need to introduce
the constraint that all probabilities $\pi_i$ sum up to $1$, that is&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=1}^m \pi_i = 1.
$$&lt;/p&gt;
&lt;p&gt;The lagrangian with the constraint than has the following form&lt;/p&gt;
&lt;p&gt;$$
\mathcal{L}(\boldsymbol \pi, \lambda) = \log L(\boldsymbol \pi) + \lambda (1 - \sum_{i=1}^m \pi_i).
$$&lt;/p&gt;
&lt;p&gt;To find the maximum, we differentiate the lagrangian w.r.t. $\pi_i$ as follows&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\frac{\partial}{\partial\pi_i} \mathcal{L}(\boldsymbol\pi, \lambda) &amp;amp;=
\frac{\partial}{\partial\pi_i}\log L(\boldsymbol \pi) + \frac{\partial}{\partial\pi_i} \lambda (1 - \sum_{i=1}^m \pi_i) \\\\
&amp;amp;= \frac{\partial}{\partial\pi_i}\log L(\boldsymbol \pi) - \lambda \\\\
&amp;amp;= \frac{\partial}{\partial\pi_i} \left(\log n! + \sum_{i=1}^m x_i \log \pi_i - \sum_{i=1}^m \log x_i! \right) - \lambda \\\\
&amp;amp;= \frac{x_i}{\pi_i} - \lambda.
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Finally, setting the lagrangian equal to zero allows us to compute the extremum as&lt;/p&gt;
&lt;p&gt;$$
\pi_i = \frac{x_i}{\lambda}.
$$&lt;/p&gt;
&lt;p&gt;To solve for $\lambda$, we sum both sides and make use of our initial constraint&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\pi_i &amp;amp;= \frac{x_i}{\lambda} \\\\
\sum_{i=1}^m \pi_i &amp;amp;= \sum_{i=1}^m \frac{x_i}{\lambda} \\\\
1 &amp;amp;= \frac{1}{\lambda }\sum_{i=1}^m x_i \\\\
1 &amp;amp;= \frac{1}{\lambda} n \\\\
\lambda &amp;amp;= n \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;giving us the final form of the MLE for $\pi_i$, that is&lt;/p&gt;
&lt;p&gt;$$
\pi_i = \frac{x_i}{n}
$$&lt;/p&gt;
&lt;p&gt;which is what we would expect. The MLE for a word is exactly its frequency in the document.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Dirichlet-Categorical Model</title>
		<link>https://blog.jakuba.net/dirichlet-categorical-model/</link>
		<pubDate>Sun, 02 Dec 2018 00:06:08 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/dirichlet-categorical-model/</guid>
		<description>&lt;p&gt;In the previous article we looked at the &lt;a href=&#34;https://blog.jakuba.net/beta-distribution/&#34;&gt;Beta-Bernoulli model&lt;/a&gt;.  This time we&amp;rsquo;ll extend it to a model with
multiple possible outcomes. We&amp;rsquo;ll also take a look at the Dirichlet,
Categorical and Multinomial distributions.&lt;/p&gt;
&lt;p&gt;After this, we&amp;rsquo;ll be quite close to implementing interesting models such as the
Latent Dirichlet Allocation (LDA). But for now, we have to understand the
basics first.&lt;/p&gt;
&lt;h3 id=&#34;multinomial-coefficients&#34;&gt;Multinomial coefficients&lt;/h3&gt;
&lt;p&gt;Before we can dive into the dirichlet-categorical model we have to briefly look
at the multinomial coefficient, which is the generalization of a binomial
coefficient. First, here&amp;rsquo;s a definition of the binomial coefficient&lt;/p&gt;
&lt;p&gt;$$
\binom{n}{k} = \frac{n!}{k! (n - k)!}
$$&lt;/p&gt;
&lt;p&gt;which represents the number of ways we can choose $k$ items out of $n$ total.&lt;/p&gt;
&lt;p&gt;We can generalize this to more than two types of items using the &lt;strong&gt;multinomial
coefficient&lt;/strong&gt; defined as&lt;/p&gt;
&lt;p&gt;$$
\binom{n}{k_1, k_2, \ldots, k_m} = \frac{n!}{k_1! k_2! \ldots k_m!}.
$$&lt;/p&gt;
&lt;p&gt;which represents the number of ways we can split $n$ items into $m$ groups,
with $k_1$ items in the first group, $k_2$ items in the second group, and so
on.&lt;/p&gt;
&lt;h3 id=&#34;categorical-distribution&#34;&gt;Categorical distribution&lt;/h3&gt;
&lt;p&gt;Now that we are comfortable with multinomial coefficients, let us continue with
the generalization of the Bernoulli distribution, that is the Categorical
distribution, denoted as $Cat(\boldsymbol{\pi})$, where $\boldsymbol\pi$ is a
vector of probabilities for each possible outcome. The probability mass
function (PMF) is simply&lt;/p&gt;
&lt;p&gt;$$
p(x|\boldsymbol \pi) = \prod_{i=1}^k \pi_i^{I[x = i]}
$$&lt;/p&gt;
&lt;p&gt;where $I[x = i]$ is an indicator variable which evaluates to $1$ if $x=i$, or
to $0$ otherwise. Note that we require $\sum_{i=1}^k \pi_i = 1$.&lt;/p&gt;
&lt;p&gt;We can also re-formulate this for the case of one-of-K encoding, where only one
of the outcomes is $1$, and the remaining elements equal $0$. Then the
distribution becomes&lt;/p&gt;
&lt;p&gt;$$
p(x|\boldsymbol\pi) = \prod_{i=1}^k \pi_i^{x_i}.
$$&lt;/p&gt;
&lt;p&gt;An example of this would be a single roll of a dice, where only one of the
outcomes is possible, but each might have a different probability (unfair
dice).&lt;/p&gt;
&lt;h3 id=&#34;multinomial-distribution&#34;&gt;Multinomial distribution&lt;/h3&gt;
&lt;p&gt;Having understood the Categorical distribution, we can now move to the
generalization of the Binomial distribution to multiple outcomes, that is the
Multinomial distribution. An easy way to think of it is $n$ rolls of a
$k$-sided dice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When $n = 1$ and $k = 2$ we have a Bernoulli distribution.&lt;/li&gt;
&lt;li&gt;When $n = 1$ and $k &amp;gt; 2$ we have a Categorical distribution.&lt;/li&gt;
&lt;li&gt;When $n &amp;gt; 1$ and $k = 2$ we have a Binomial distribution.&lt;/li&gt;
&lt;li&gt;And finally, when $n &amp;gt; 1$ and $k &amp;gt; 2$ we have a Multinomial distribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course we can simply always use the Multinomial distribution as it is the
most general. The PMF in the one-of-K case is then simply&lt;/p&gt;
&lt;p&gt;$$
p(\boldsymbol{x} | \boldsymbol{\pi},n) = \binom{n!}{x_1!x_2! \ldots x_k!} \prod_{i=1}^k \pi_i^{x_i}
$$&lt;/p&gt;
&lt;p&gt;In this case $\boldsymbol{x} = (x_1, \ldots, x_k)$ represent the number of
times each outcome was observed, while again $\boldsymbol{\pi} = (\pi_1,
\ldots, \pi_k)$ represent the probabilities of each outcome.&lt;/p&gt;
&lt;p&gt;An example of the multinomial distribution is the Bag of Words model, which
describes the number of occurences of each word in a dataset. There are $k$
possible words in a dictionary and the document consists of $n$ words in total.&lt;/p&gt;
&lt;h3 id=&#34;dirichlet-distribution&#34;&gt;Dirichlet distribution&lt;/h3&gt;
&lt;p&gt;Lastly, let us consider the Dirichlet distribution, which is a generalization
of the Beta distribution to more than two outcomes. The Dirichlet distribution
is to the Categorical/Mutlinomial what the Beta is to the Bernoulli/Binomial.&lt;/p&gt;
&lt;p&gt;A random vector $\boldsymbol{\pi} = (\pi_1, \ldots, \pi_k)$ with $\sum_{i=1}^k \pi_i =
1$ and $\pi_i \in (0; 1)$ has a Dirichlet distribution with a PMF&lt;/p&gt;
&lt;p&gt;$$
Dir(\boldsymbol{\pi} | \alpha_1, \ldots, \alpha_m) = \frac{\Gamma(\sum_{i=1}^k
\alpha_i)}{\prod_{i=1}^k \Gamma(\alpha_i)} \prod_{i=1}^k \pi_i^{\alpha_i -
1}.
$$&lt;/p&gt;
&lt;p&gt;Just like we did with the Beta distribution, we can simplify things by naming
normalization constant, as it can be computed in closed form from the parameters,
that is&lt;/p&gt;
&lt;p&gt;$$
Dir(\boldsymbol{\pi} | \alpha_1, \ldots, \alpha_m) =
\frac{1}{B(\boldsymbol{\alpha})} \prod_{i=1}^k \pi_i^{\alpha_i - 1}
$$&lt;/p&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;p&gt;$$
B(\boldsymbol{\alpha}) = \frac{\prod_{i=1}^k \Gamma(\alpha_i)}{\Gamma(\sum_{i=1}^k \alpha_i)}.
$$&lt;/p&gt;
&lt;p&gt;Note that for shorthand we will also write $\boldsymbol\alpha = (\alpha_1,
\ldots, \alpha_k)$, giving us a shorter notation when writing
$Dir(\boldsymbol\pi | \boldsymbol\alpha)$.&lt;/p&gt;
&lt;h3 id=&#34;dirichlet-categorical-model&#34;&gt;Dirichlet-Categorical Model&lt;/h3&gt;
&lt;p&gt;Similarly in the previous article about the &lt;a href=&#34;https://blog.jakuba.net/beta-distribution/&#34;&gt;Beta-Bernoulli model&lt;/a&gt; we will now introduce the
Dirichlet-Categorical model. Since everything is analogous we won&amp;rsquo;t go into
that much detail. The Dirichlet distribution is a conjugate prior to the
Categorical and Multinomial distributions, which means if we set our prior to
Dirichlet and our likelihood to Categorical or Mutlinomial, the resulting
distribution will again be a Dirichlet distribution.&lt;/p&gt;
&lt;p&gt;We can observe this easily by just multiplying out the probability mass
functions for $Cat(\boldsymbol x | \boldsymbol \pi)$ and
$Dir(\boldsymbol\pi|\boldsymbol\alpha)$, that is&lt;/p&gt;
&lt;p&gt;$$
Cat(\boldsymbol x | \boldsymbol \pi) Dir(\boldsymbol\pi|\boldsymbol\alpha)
\propto \prod_{i=1}^k \pi_i^{x_i} \prod_{i=1}^k \pi_i^{\alpha_i - 1}.
$$&lt;/p&gt;
&lt;p&gt;Since only one of the $x_i$ in the Categorical distribution can be $1$ and the
rest are $0$, say $x_j =1 $, then this will get multiplied by the respective
$\pi_j$ in the Dirichlet distribution and we can immediately see that
$\alpha_j$ will be increased by one, giving us a new Dirichlet distribution
with a parameter $(\alpha_1, \ldots, \alpha_j + 1, \ldots, \alpha_k)$.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Beta Distribution and the Beta-Bernoulli Model</title>
		<link>https://blog.jakuba.net/beta-distribution/</link>
		<pubDate>Sat, 01 Dec 2018 19:08:14 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/beta-distribution/</guid>
		<description>&lt;p&gt;The Beta distribution is a parametric distribution defined on the interval $[0;
1]$ with two positive shape parameters, denoted $\alpha$ and $\beta$. Probably
the most common use case is using Beta as a distribution over probabilities, as
in the case of the parameter of a Bernoulli random variable. Even more
importantly, the Beta distribution is a conjugate prior for the Bernoulli,
binomial, negative binomial and geometric distributions.&lt;/p&gt;
&lt;p&gt;The PDF of the Beta distribution, for $x \in [0; 1]$ is defined as&lt;/p&gt;
&lt;p&gt;$$
p(x | \alpha, \beta) = \frac{1}{B(\alpha, \beta)} x^{\alpha - 1} (1 - x)^{\beta - 1}
$$&lt;/p&gt;
&lt;p&gt;where $B(\alpha, \beta)$ is the normalizing constant which can be directly
computed from the parameters using the gamma function (denoted $\Gamma$ and
defined via an integral $\Gamma(z) = \int_0^\infty x^{z-1} e^{-x}\ dx$) as
follows&lt;/p&gt;
&lt;p&gt;$$
B(\alpha, \beta) = \frac{\Gamma(\alpha) \Gamma(\beta)}{\Gamma(\alpha + \beta)}.
$$&lt;/p&gt;
&lt;p&gt;This gives us the complete form of the PDF&lt;/p&gt;
&lt;p&gt;$$
Beta(x | \alpha, \beta) = \frac{\Gamma(\alpha + \beta)}{\Gamma(\alpha)
\Gamma(\beta)} x^{\alpha - 1} (1 - x)^{\beta - 1}.
$$&lt;/p&gt;
&lt;p&gt;Because of the conjugacy, we rarely have to worry about the normalizing constant
and can simply compute it in closed form.&lt;/p&gt;
&lt;p&gt;As a small aside, let us compute the expectation of a Beta random variable $X
\sim Beta(\alpha, \beta)$. Note that the support of the Beta distribution is
$[0; 1]$, which means we&amp;rsquo;re only integrating over that interval.&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\mu = E[X] &amp;amp;= \int_0^1 x p(x | \alpha, \beta)\ dx \\\\
&amp;amp;= \int_0^1 x \frac{x^{\alpha - 1} (1 - x)^{\beta - 1}}{B(\alpha, \beta)}\ dx \\\\
&amp;amp;= \frac{1}{B(\alpha, \beta)}\int_0^1 x^{\alpha} (1 - x)^{\beta - 1}\ dx \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Here we make use of a simple trick. Since $B(\alpha, \beta)$ is the normalizing
constant, it must hold that the integral over an unnormalized $Beta(\alpha, \beta)$
distribution is exactly $B(\alpha, \beta)$, that is&lt;/p&gt;
&lt;p&gt;$$
\int_0^1 x^{\alpha - 1} (1 - x)^{\beta - 1}\ dx = B(\alpha, \beta).
$$&lt;/p&gt;
&lt;p&gt;If we look at the integral we got in the previous expression, it is very similar,
except the $\alpha$ instead of $\alpha - 1$. But that is ok, it simply corresponds to
$B(\alpha + 1, \beta)$. We can plug this back in and get&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\mu &amp;amp;= \frac{B(\alpha + 1, \beta)}{B(\alpha, \beta)} \\\\
&amp;amp;= \frac{\Gamma(\alpha + 1)\Gamma(\beta)}{\Gamma(\alpha + 1 + \beta)}
\frac{\Gamma(\alpha + \beta)}{\Gamma(\alpha)\Gamma(\beta)} \\\\
&amp;amp;= \frac{\alpha \Gamma(\alpha)\Gamma(\beta)}{(\alpha + \beta)\Gamma(\alpha +
\beta)} \frac{\Gamma(\alpha + \beta)}{\Gamma(\alpha)\Gamma(\beta)} \\\\
&amp;amp;= \frac{\alpha}{\alpha + \beta} \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;using the identity $\Gamma(x + 1) = x \Gamma(x)$.&lt;/p&gt;
&lt;h2 id=&#34;beta-bernoulli-model&#34;&gt;Beta-Bernoulli model&lt;/h2&gt;
&lt;p&gt;Let us now show a simple example where we make use of the conjugacy between
Beta and Bernoulli distributions.&lt;/p&gt;
&lt;p&gt;Consider a random variable representing the outcome of a single coin toss,
which has a Bernoulli distribution with a parameter $\theta$ (probability of heads).
Before we observe the coin toss, we might have some prior belief about the
fairness of the coin. Let us set the prior belief as if we&amp;rsquo;ve seen 1 head and 1
tail before tossing the coin, that is $Beta(1, 1)$.&lt;/p&gt;
&lt;p&gt;Because Bayesian inference models uncertainty directly, this does not mean that
we believe the coin is fair, even though the maximum likelihood estimate of
$\theta$ for these two coin tosses would be $0.5$. We are however interested in
computing the full posterior over $\theta$, that is $p(\theta | D)$ where $D$
is our observed data. Using Bayes theorem we get&lt;/p&gt;
&lt;p&gt;$$
p(\theta | D) = \frac{p(\theta | \alpha, \beta) p(D | \theta)}{p(D)}.
$$&lt;/p&gt;
&lt;p&gt;Now knowing that the Beta distribution is a conjugate prior for the Bernoulli
distribution, and given that our prior is Beta and our likelihood is Bernoulli,
we know that our posterior must be a Beta distribution as well. We can thus
omit the normalizing constant $p(D)$ since we can infer it from the computed
parameters from multiplying the prior by the likelihood.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we toss the coin once and observe heads. We can write the likelihood&lt;/p&gt;
&lt;p&gt;$$
p(D | \theta) = \theta
$$&lt;/p&gt;
&lt;p&gt;and putting this together with the prior&lt;/p&gt;
&lt;p&gt;$$
p(\theta | \alpha, \beta) \propto \theta^{\alpha - 1} (1 - \theta)^{\beta - 1}
$$&lt;/p&gt;
&lt;p&gt;we can compute the posterior&lt;/p&gt;
&lt;p&gt;$$
p(\theta | D) \propto \theta\theta^{\alpha - 1} (1 - \theta)^{\beta - 1} = \theta^{(\alpha - 1) + 1} (1 - \theta)^{\beta - 1} \propto Beta(\theta | \alpha + 1, \beta).
$$&lt;/p&gt;
&lt;p&gt;As you can see, multiplying the likelihood and the prior gives again gives a
distribution which is exactly the same shape as a Beta distribution. We can thus
infer back the normalizing constant to be $B(\alpha + 1, \beta)$ and write our full
posterior in closed form&lt;/p&gt;
&lt;p&gt;$$
p(\theta | D) = \frac{1}{B(\alpha + 1, \beta)} \theta^{\alpha} (1 - \theta)^{\beta - 1}
$$&lt;/p&gt;
&lt;p&gt;If we observed tails, the likelihood would be $p(D | \theta) = 1 - \theta$
since $\theta$ is the probability of heads. Plugging this back into the
previous formula we can easily see that the resulting distribution would be
$Beta(\alpha, \beta + 1)$.&lt;/p&gt;
&lt;p&gt;The Beta distribution basically acts as a &lt;em&gt;counter&lt;/em&gt;. With every newly observed
coin toss it gets added to our existing prior belief to compute the posterior,
which then can become a prior for the next coin toss, but with our belief updated.
This is a simple example of how Bayesian models can be updated on-line as new data
comes in.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>The Gaussian Distribution - Basic Properties</title>
		<link>https://blog.jakuba.net/the-gaussian-distribution---basic-properties/</link>
		<pubDate>Sat, 01 Dec 2018 02:59:25 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/the-gaussian-distribution---basic-properties/</guid>
		<description>&lt;p&gt;The Gaussian distribution has many interesting properties, many of which make
it useful in various different applications. Before moving further, let us just
define the univariate PDF with a mean $\mu$ and variance $\sigma^2$&lt;/p&gt;
&lt;p&gt;$$
\mathcal{N}(x | \mu, \sigma^2) = \frac{1}{\sqrt{2 \pi \sigma^2}} \exp \left( -\frac{(x - \mu)^2}{2 \sigma^2} \right).
$$&lt;/p&gt;
&lt;p&gt;In the general multi-dimensional case, the mean becomes a mean vector, and the variance turns into
a $D \times D$ covariance matrix. The PDF then becomes&lt;/p&gt;
&lt;p&gt;$$
\mathcal{N}(\mathbf{x} | \mathbf{\mu}, \mathbf{\Sigma}) = \frac{1}{\sqrt{(2 \pi)^k det(\mathbf{\Sigma})}}
\exp \left( -\frac{1}{2} (\mathbf{x} - \mathbf{\mu})^T \mathbf{\Sigma}^{-1} (\mathbf{x} - \mathbf{\mu}) \right)
$$&lt;/p&gt;
&lt;p&gt;where $det(\Sigma)$ is the determinant of the covariance matrix $\Sigma$. The
term in the exponent is called &lt;em&gt;Mahalanobis distance&lt;/em&gt; and is useful to study in
more detail.&lt;/p&gt;
&lt;h2 id=&#34;affine-property&#34;&gt;Affine property&lt;/h2&gt;
&lt;p&gt;The first property of the Gaussian states that if $X \sim \mathcal{N}(\mu,
\Sigma)$, then $Y = A X + b$ is also a Gaussian, specifically $Y \sim
\mathcal{N}(A \mu + b, A \Sigma A^T)$. We can prove this using the definition of
mean and covariance. The mean of $Y$ (denoted $\mu_Y$) can be derived simply
from the linearity of expectation, that is&lt;/p&gt;
&lt;p&gt;$$
\mu_Y = E[Y] = E[A X + b] = E[A X] + E[b] = A E[X] + b = A \mu + b.
$$&lt;/p&gt;
&lt;p&gt;And now the covariance $\Sigma_Y$ we again substitute into the definition
of covariance and get&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\Sigma_Y &amp;amp;= E[(Y - \mu_Y) (Y - \mu_Y)^T] \\\\
&amp;amp;= E[((A X + b) - (A \mu + b)) ((A X + b) - (A \mu + b))^T] \\\\
&amp;amp;= E[(A(X - \mu)) (A (X - \mu))^T] \\\\
&amp;amp;= E[A (X - \mu) (X - \mu)^T A^T] \\\\
&amp;amp;= A E[(X - \mu) (X - \mu)^T] A^T \\\\
&amp;amp;= A \Sigma A^T
\end{align}
$$&lt;/p&gt;
&lt;p&gt;and thus $\Sigma_Y = A \Sigma A^T$, which gives the final result of&lt;/p&gt;
&lt;p&gt;$$
Y \sim \mathcal{N}(A \mu, A \Sigma A^T).
$$&lt;/p&gt;
&lt;h2 id=&#34;sampling-from-a-gaussian&#34;&gt;Sampling from a Gaussian&lt;/h2&gt;
&lt;p&gt;We can immediately make use of the affine property to define how to sample from
a multivariate Gaussian. We&amp;rsquo;ll make use of &lt;em&gt;Cholesky decomposition&lt;/em&gt;, which for
a positive-definite matrix $\Sigma$ returns a lower triangular matrix $L$, such
that&lt;/p&gt;
&lt;p&gt;$$
L L^T = \Sigma.
$$&lt;/p&gt;
&lt;p&gt;This together with the affine property defined above gives us&lt;/p&gt;
&lt;p&gt;$$
\mathcal{N}(\mu, \Sigma) = \mu + L \mathcal{N}(0, I).
$$&lt;/p&gt;
&lt;p&gt;Sampling from the former is thus equivalent to sampling from the latter. Since
$\mu$ and $L$ are constant factors with respect to sampling, we simply have to
figure out how to draw samples from $\mathcal{N}(0, I)$ and then do the affine
transform back to our original distribution.&lt;/p&gt;
&lt;p&gt;Observe that since the covariance of $\mathcal{N}(0, I)$ is diagonal, the individual
values in the random vector are independent. Note that this &lt;a href=&#34;https://en.wikipedia.org/wiki/Normally_distributed_and_uncorrelated_does_not_imply_independent&#34;&gt;property is special to the
Gaussian and is a little bit tricky&lt;/a&gt;,
but holds in our case, because in this case we&amp;rsquo;re inferring that individual random variables
which are jointly Gaussian but uncorrelated are independent.&lt;/p&gt;
&lt;p&gt;Finally, because the variables are independent, we can sample them independently,
which can be done easily using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform&#34;&gt;Box-Muller transform&lt;/a&gt;.
Once we obtain our $D$ independent samples, we simply multiply by $L$ and add $\mu$
to obtain correlated samples from our original distribution.&lt;/p&gt;
&lt;h3 id=&#34;sum-of-two-independent-gaussians-is-a-gaussian&#34;&gt;Sum of two independent Gaussians is a Gaussian&lt;/h3&gt;
&lt;p&gt;If $X$ and $Y$ random variables with a Gaussian distributions, where $X \sim
\mathcal{N}(\mu_X, \sigma_X^2)$ and $X \sim \mathcal{N}(\mu_X,
\sigma_X^2)$, then&lt;/p&gt;
&lt;p&gt;$$
X + Y \sim \mathcal{N}(\mu_X + \mu_Y, \sigma_X^2 + \sigma_Y^2).
$$&lt;/p&gt;
&lt;p&gt;This can be proven many different ways, the simplest of which is probably using
moment generating functions. With the moment generating function of a Gaussian
being&lt;/p&gt;
&lt;p&gt;$$
M_X(t) = \exp \left( t\mu + \frac{1}{2} \sigma^2 t^2 \right),
$$&lt;/p&gt;
&lt;p&gt;and using the property of moment generating functions which says how to combine
two independent variables $X$ and $Y$, specifically&lt;/p&gt;
&lt;p&gt;$$
M_{X + Y}(t) = M_X(t) M_Y(t),
$$&lt;/p&gt;
&lt;p&gt;we can simply plug in our moment generating function for the Gaussian and get
our result&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
M_{X + Y}(t) &amp;amp;= M_X(t) M_Y(t) \\\\
&amp;amp;= \exp \left( t\mu_X + \frac{1}{2} \sigma_X^2 t^2 \right) \exp \left( t\mu_Y + \frac{1}{2} \sigma_Y^2 t^2 \right) \\\\
&amp;amp;= \exp \left( t(\mu_X + \mu_Y) + \frac{1}{2} t^2 (\sigma_X^2 + \sigma_Y^2) \right)
\end{align}
$$&lt;/p&gt;
&lt;h3 id=&#34;deriving-the-normalizing-constant&#34;&gt;Deriving the normalizing constant&lt;/h3&gt;
&lt;p&gt;We can compute the Gaussian integral using polar coordinates. Consider the zero mean unit variance case.&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\left( \int_{-\infty}^\infty e^{-x^2} dx \right)^2 &amp;amp;=
\int_{-\infty}^\infty e^{-x^2} dx \int_{-\infty}^\infty e^{-x^2} dx \\\\
&amp;amp;= \int_{-\infty}^\infty e^{-x^2} dx \int_{-\infty}^\infty e^{-y^2} dy \qquad \text{rename $x$ to $y$}\\\\
&amp;amp;= \int_{-\infty}^\infty \int_{-\infty}^\infty e^{-(x^2 + y^2)} dx\ dy
\end{align}
$$&lt;/p&gt;
&lt;p&gt;And now comes an important trick, we&amp;rsquo;ll do a polar coordinate substitution,
since $e^{-(x^2 + y^2)} = e^{-r^2}$ in $R^2$.&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
&amp;amp;= \int_{-\infty}^\infty \int_{-\infty}^\infty e^{-(x^2 + y^2)} dx\ dy\\\\
&amp;amp;= \int_0^{2\pi} \int_0^\infty e^{-r^2} r\ dr\ d\theta \\\\
&amp;amp;= 2\pi \int_0^\infty e^{-r^2} r\ dr \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;now substituting $s = -r^2$ and $ds = -2 r\ dr$, giving us&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
&amp;amp;= 2\pi \int_0^\infty e^{-r^2} r\ dr \\\\
&amp;amp;= 2\pi \int_0^\infty -\frac{1}{2} e^s\ ds \\\\
&amp;amp;= \pi \int_0^\infty -e^s\ ds \qquad\text{flipping integration bounds} \\\\
&amp;amp;= \pi \int_{-\infty}^0 e^s\ ds \\\\
&amp;amp;= \pi (e^0 - e^{-\infty}) \\\\
&amp;amp;= \pi
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Finally, combining this with the initial integral we get&lt;/p&gt;
&lt;p&gt;$$
\left( \int_{-\infty}^\infty e^{-x^2} dx \right)^2 = \pi
$$&lt;/p&gt;
&lt;p&gt;and as a result&lt;/p&gt;
&lt;p&gt;$$
\int_{-\infty}^\infty e^{-x^2} dx = \sqrt{\pi}.
$$&lt;/p&gt;
&lt;h3 id=&#34;deriving-the-mean-and-standard-deviation&#34;&gt;Deriving the mean and standard deviation&lt;/h3&gt;
&lt;p&gt;Lastly, while not necessarily a property of the Gaussian, it is a useful
exercise to derive the mean and standard deviation from the PDF. Once again,
the PDF is&lt;/p&gt;
&lt;p&gt;$$
p(x | \mu, \sigma^2) = \frac{1}{\sqrt{2 \pi \sigma^2}} \exp \left( -\frac{(x - \mu)^2}{2 \sigma^2} \right)
$$&lt;/p&gt;
&lt;p&gt;and the general formula for $E[X]$ is&lt;/p&gt;
&lt;p&gt;$$
E[X] = \int_{-\infty}^\infty x p(x)\ dx = \int_{-\infty}^\infty x \frac{1}{\sqrt{2 \pi \sigma^2}} \exp \left( -\frac{(x - \mu)^2}{2 \sigma^2} \right)\ dx.
$$&lt;/p&gt;
&lt;p&gt;We can pull out the constant outside of the integral and substitute $u = x -
\mu$ and $du = dx$, giving us&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
&amp;amp;= \frac{1}{\sqrt{2 \pi \sigma^2}} \int_{-\infty}^\infty (u + \mu) \exp \left( -\frac{u^2}{2 \sigma^2} \right)\ du \\\\
&amp;amp;= \frac{1}{\sqrt{2 \pi \sigma^2}} \left( \left( \int_{-\infty}^\infty u \exp \left( -\frac{u^2}{2 \sigma^2} \right)\ du \right) +
\mu \left( \int_{-\infty}^\infty \exp \left( -\frac{u^2}{2 \sigma^2} \right)\ du \right) \right) \\\\
&amp;amp;= \frac{1}{\sqrt{2 \pi \sigma^2}} \left( \int_{-\infty}^\infty u \exp \left( -\frac{u^2}{2 \sigma^2} \right)\ du \right) + \mu \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Here we note that the function being integrated is odd, which means the
integral adds up to $0$, and we&amp;rsquo;re left with only $\mu$, that is&lt;/p&gt;
&lt;p&gt;$$
E[X] = \mu
$$&lt;/p&gt;
&lt;p&gt;which is what we wanted to prove.&lt;/p&gt;
&lt;p&gt;Now for the variance, which is defined as&lt;/p&gt;
&lt;p&gt;$$
var(X) = E[(X - \mu)^2]
$$&lt;/p&gt;
&lt;p&gt;which written again as an integral gives us&lt;/p&gt;
&lt;p&gt;$$
var(X) = \int_{-\infty}^\infty (x - \mu)^2 p(x)\ dx = \int_{-\infty}^\infty (x - \mu)^2 \frac{1}{\sqrt{2 \pi \sigma^2}} \exp \left( -\frac{(x - \mu)^2}{2 \sigma^2} \right)\ dx.
$$&lt;/p&gt;
&lt;p&gt;again pulling out the constant and substituting $u = x - \mu$ and $du = dx$ we get&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
var(X) &amp;amp;= \frac{1}{\sqrt{2 \pi \sigma^2}} \int_{-\infty}^\infty u^2 \exp \left( -\frac{u^2}{2 \sigma^2} \right)\ du.
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Integrating by parts using the $\int u\ v&amp;rsquo; = u\ v - \int v\ u&amp;rsquo;$ where we set&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
u &amp;amp;= y \\\\
u&amp;rsquo; &amp;amp;= 1 \\\\
v&amp;rsquo; &amp;amp;= y \cdot e^{-y^2 / 2\sigma^2}.
\end{align}
$$&lt;/p&gt;
&lt;p&gt;To get $v$ we have to compute the integral of $v&amp;rsquo;$, which we can easily do substituting $u = -\frac{y^2}{2\sigma^2}$
and $du = -\frac{y}{\sigma^2} dy$, giving us&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\int y \cdot e^{-y^2 / 2\sigma^2}\ dy &amp;amp;= -\int \sigma^2 e^u\ du \\\\
&amp;amp;= -\sigma^2 e^u \\\\
&amp;amp;= -\sigma^2 e^{-\frac{y^2}{2\sigma^2}}.
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Now finishing our integration by parts we can write out the final formula&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\int u v&amp;rsquo; &amp;amp;= u\ v - \int v\ u&amp;rsquo; \\\\\
&amp;amp;= \frac{1}{2 \pi \sigma^2} \left( \left[y (-\sigma^2) e^{-\frac{y^2}{2\sigma^2}}\right]_{-\infty}^\infty - \int_{-\infty}^\infty (-s^2) e^{-\frac{y^2}{2s^2}} \ dy \right) \\\\
&amp;amp;= 0 + \sigma^2 \cdot 1 = \sigma^2.
\end{align}
$$&lt;/p&gt;
&lt;p&gt;That is, $var(X) = \sigma^2$.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Graphical Models: D-Separation</title>
		<link>https://blog.jakuba.net/graphical-models---d-separation/</link>
		<pubDate>Thu, 29 Nov 2018 20:51:24 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/graphical-models---d-separation/</guid>
		<description>&lt;p&gt;$$
\newcommand{\bigci}{\perp\mkern-10mu\perp}
$$&lt;/p&gt;
&lt;p&gt;This article is a brief overview of conditional independence in graphical models, and the related d-separation. Let us begin with a definition.&lt;/p&gt;
&lt;p&gt;For three random variables $X$, $Y$ and $Z$, we say $X$ is conditionally independent of $Y$ given $Z$ iff&lt;/p&gt;
&lt;p&gt;$$
p(X, Y | Z) = p(X | Z) p(Y | Z).
$$&lt;/p&gt;
&lt;p&gt;We can use a shorthand notation&lt;/p&gt;
&lt;p&gt;$$
X \bigci Y | Z
$$&lt;/p&gt;
&lt;p&gt;Before we can define d-separation, let us first show three different types of graphs. Consider the same three variables as before, we&amp;rsquo;ll be interested in conditional independence based on whether we observe $Z$.&lt;/p&gt;
&lt;h2 id=&#34;tail-tail&#34;&gt;Tail-tail&lt;/h2&gt;
&lt;p&gt;The first case is called the &lt;em&gt;tail-tail&lt;/em&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We can factor the joint distribution to get&lt;/p&gt;
&lt;p&gt;$$
p(X, Y, Z) = p(X | Z) p(Y | Z) p(Z)
$$&lt;/p&gt;
&lt;p&gt;and conditioning on the value of $Z$ we get (using the Bayes&amp;rsquo; theorem)&lt;/p&gt;
&lt;p&gt;$$
p(X, Y | Z) = \frac{p(X, Y, Z)}{p(Z)} = \frac{p(X | Z) p(Y | Z) p(Z)}{p(Z)} = p(X | Z) p(Y | Z).
$$&lt;/p&gt;
&lt;p&gt;From this we can immediately see that conditioning on $Z$ in the &lt;em&gt;tail-tail&lt;/em&gt; case makes $X$ and $Y$ independent, that is $X \bigci Y | Z$.&lt;/p&gt;
&lt;h2 id=&#34;head-tail&#34;&gt;Head-tail&lt;/h2&gt;
&lt;p&gt;The second case is called the &lt;em&gt;head-tail&lt;/em&gt; and looks as the following.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We can again write the joint distribution for the graph&lt;/p&gt;
&lt;p&gt;$$
p(X, Y, Z) = p(X) p(Z | X) p(Y | Z)
$$&lt;/p&gt;
&lt;p&gt;and again conditioning on $Z$ we get (using rules of conditional probability)&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
p(X, Y | Z) &amp;amp;= \frac{p(X, Y, Z)}{p(Z)} \\\\
&amp;amp;= \frac{p(X) p(Z | X) p(Y | Z)}{p(Z)} \\\\
&amp;amp;= \frac{p(X, Z) p(Y | Z)}{p(Z)} \\\\
&amp;amp;= \frac{p(X | Z) p(Z) p(Y | Z)}{p(Z)} \\\\
&amp;amp;= p(X | Z) p(Y | Z)
\end{align}
$$&lt;/p&gt;
&lt;p&gt;and so again, $X$ and $Y$ are conditionally independent given $Z$, that is $X \bigci Y | Z$.&lt;/p&gt;
&lt;h4 id=&#34;checking-marginal-independence&#34;&gt;Checking marginal independence&lt;/h4&gt;
&lt;p&gt;For completeness, we can also check if $X$ and $Y$ are marginally independent, which they shouldn&amp;rsquo;t be, since we just showed they&amp;rsquo;re conditionally independent.&lt;/p&gt;
&lt;p&gt;$$
p(X, Y, Z) = p(X) p(Z | X) p(Y | Z)
$$&lt;/p&gt;
&lt;p&gt;which gives us the following when marginalizing over $Z$&lt;/p&gt;
&lt;p&gt;$$
p(X, Y) = \sum_Z p(X, Y, Z) = p(X) \sum_Z p(Z | X) p(Y | Z) = p(X) \sum_Z p(Y, Z | X) = p(X) p(Y | X)
$$&lt;/p&gt;
&lt;p&gt;from which we can immediately see it does not factorize into $p(X) p(Y)$ in the general case, and thus $X$ and $Y$ are not marginally independent.&lt;/p&gt;
&lt;h2 id=&#34;head-head&#34;&gt;Head-head&lt;/h2&gt;
&lt;p&gt;The last case is called the &lt;em&gt;head-head&lt;/em&gt; and is a little bit tricky&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We can again write out the joint distribution&lt;/p&gt;
&lt;p&gt;$$
p(X, Y, Z) = p(X) p(Y) p(Z | X, Y),
$$&lt;/p&gt;
&lt;p&gt;but this does not immediately help us when we try to condition on $Z$, we would want&lt;/p&gt;
&lt;p&gt;$$
p(X, Y | Z) = \frac{p(X, Y, Z)}{p(Z)} \stackrel{?}{=} p(X|Z) p(Y|Z)
$$&lt;/p&gt;
&lt;p&gt;which does not hold in general. For example, consider $X, Y \sim Bernoulli(0.5)$ and $Z = 1$ if $X = Y$, and $0$ otherwise. In this case if we know $Z$ and observe $X$, it immediately tells us the value of $Y$, hence $X$ and $Y$ are not conditionally independent given $Z$.&lt;/p&gt;
&lt;p&gt;We can however do a little trick and write the $p(X, Y)$ as a marginalization over $Z$, that is&lt;/p&gt;
&lt;p&gt;$$
p(X, Y) = \sum_Z p(X, Y, Z) = \sum_Z p(X) p(Y) p(Z | X, Y) = p(X) p(Y)
$$&lt;/p&gt;
&lt;p&gt;since $\sum_Z p(Z | X, Y) = 1$. As a result, in the head-head case we have marginal independence between $X$ and $Y$, that is $X \bigci Y$.&lt;/p&gt;
&lt;h2 id=&#34;d-separation&#34;&gt;D-separation&lt;/h2&gt;
&lt;p&gt;Having shown the three cases, we can finally define d-separation. Let $G$ be a DAG, and let $A, B, C$ be disjoint subsets of vertices.&lt;/p&gt;
&lt;p&gt;A path between two vertices is &lt;strong&gt;blocked&lt;/strong&gt; if it passes through a vertex $v$, such that either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the edges are head-tail or tail-tail, and $v \in C$, or&lt;/li&gt;
&lt;li&gt;the edges are head-head, and $v \not \in C$, and neither are any of its descendants.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We say that $A$ and $B$ are &lt;strong&gt;d-separated&lt;/strong&gt; by $C$ if all paths from a vertex of $A$ to a vertex of $B$ are blocked w.r.t. $C$. And now comes the important part, &lt;strong&gt;if $A$ and $B$ are d-separated by $C$, then $A \bigci B\ |\ C$&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Thig might all look very complicated, but this property of directed graphical models is actually extremely useful, and very easy to do quickly after seeing just a few examples.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;To get a feel for d-separation, let us look at the following example ($B$ is observed).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We can immediately see that $A \bigci D | B$ since this is the &lt;em&gt;head-tail&lt;/em&gt; case. We can also see that $A \not{\bigci} E | B$ (not conditionally independent), because while the path through $B$ is blocked, the path through $C$ is not.&lt;/p&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
	</item>
	
	<item>
		<title>Variational Inference - Deriving ELBO</title>
		<link>https://blog.jakuba.net/variational-inference---deriving-elbo/</link>
		<pubDate>Sat, 24 Nov 2018 21:20:11 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/variational-inference---deriving-elbo/</guid>
		<description>&lt;p&gt;This post describes two approaches for deriving the Expected Lower Bound (ELBO) used in variational inference. Let us begin with a little bit of motivation.&lt;/p&gt;
&lt;p&gt;Consider a probabilistic model where we are interested in maximizing the marginal likelihood $p(X)$ for which direct optimization is difficult, but optimizing complete-data likelihood $p(X, Z)$ is significantly easier.&lt;/p&gt;
&lt;p&gt;In a bayesian setting, we condition on the data $X$ and compute the posterior distribution $p(Z | X)$ over the latent variables given our observed data. This may however require approximate inference. There are two general approaches, sampling using MCMC, and optimization using variational inference.&lt;/p&gt;
&lt;p&gt;The main idea behind variational inference is to consider a family of densities $\mathcal(Q)$ over the latent variables, and use optimization to find $q(Z)$ that approximates our target posterior $p(Z | X)$. We measure this using the Kullback-Leiber divergence, that is&lt;/p&gt;
&lt;p&gt;$$
q^*(Z) = {\arg\min}_{q(Z) \in \mathcal{Q}} KL(q(Z)\ ||\ p(Z | X)).
$$&lt;/p&gt;
&lt;p&gt;However, optimizing the KL divergence directly is not tractable, because it requires us to compute the log posterior $p(Z | X)$, specifically&lt;/p&gt;
&lt;p&gt;$$
KL(q(Z)\ ||\ p(Z | X)) = -\mathrm{E}_q \left[\log \frac{p(Z | X)}{q(Z)} \right].
$$&lt;/p&gt;
&lt;p&gt;We can however do a bit of equation shuffling (note we omit the explicit density in the expectation since all of them are taken w.r.t $q$)&lt;/p&gt;
&lt;p&gt;$$
\begin{aligned}
KL(q(Z)\ ||\ p(Z | X)) &amp;amp;= -\mathrm{E} \left[\log \frac{p(Z | X)}{q(Z)} \right] \\\\
&amp;amp;= \mathrm{E} \left[\log \frac{q(Z)}{p(Z | X)} \right] \\\\
&amp;amp;= \mathrm{E} \left[\log q(Z) \right] - \mathrm{E} \left[\log p(Z | X) \right] \\\\
&amp;amp;= \mathrm{E} \left[\log q(Z) \right] - \mathrm{E} \left[\log p(Z, X) \right] + \mathrm{E} \left[ \log p(X) \right] \\\\
&amp;amp;= \mathrm{E} \left[\log \frac{q(Z)}{p(Z, X)} \right] + \log p(X)  \\\\
&amp;amp;= -\mathrm{E} \left[\log \frac{p(Z, X)}{q(Z)} \right] + \log p(X)  \\\\
\end{aligned}
$$&lt;/p&gt;
&lt;p&gt;where the last equations is a consequence of $\log p(X)$ being independent of $q(Z)$. Re-writing the equation and moving everything except for $\log p(X)$ to the right we get&lt;/p&gt;
&lt;p&gt;$$
\log p(X) = \mathrm{E} \left[\log \frac{p(Z, X)}{q(Z)} \right] + KL(q(Z)\ ||\ p(Z | X)).
$$&lt;/p&gt;
&lt;p&gt;The first term on the right is usually called the &lt;strong&gt;expected lower bound&lt;/strong&gt; (ELBO, or &lt;strong&gt;variational lower bound&lt;/strong&gt;). Let us denote it as&lt;/p&gt;
&lt;p&gt;$$
\mathcal{L}(q) = \mathrm{E} \left[\log \frac{p(Z, X)}{q(Z)} \right]
$$&lt;/p&gt;
&lt;p&gt;giving us the final equation&lt;/p&gt;
&lt;p&gt;$$
\log p(X) = \mathcal{L}(g) + KL(q(Z)\ ||\ p(Z | X)).
$$&lt;/p&gt;
&lt;p&gt;Now comes the interesting part. Because we are interested in optimizing by changing $q$, the $\log p(X)$ does not change when $q$ changes. And because the KL divergence between $q(Z)$ and $p(Z | X)$ is always positive, then $\mathcal{L}(g)$ must be a lower bound on $\log p(X)$. As a result, because changing the ELBO by manipulating $q$ does not change $\log p(X)$, the expression on the right must be equal to a constant, which means that increasing $\mathcal{L}(g)$ must decrease $KL(q(Z) || p(Z|X))$. But this is what we wanted all along!&lt;/p&gt;
&lt;p&gt;If we find a way to maximize the ELBO, we are effectively minimizing the KL divergence between our approximate distribution $q(Z)$, and our target posterior distribution $p(Z | X)$. If we were to choose $q(Z) = p(Z | X)$, the KL divergence would be zero, and $\mathcal{L}(g) = \log p(X)$. This justifies maximizing the ELBO as an objective in variational inference.&lt;/p&gt;
&lt;h2 id=&#34;elbo-using-jensens-inequality&#34;&gt;ELBO using Jensen&amp;rsquo;s inequality&lt;/h2&gt;
&lt;p&gt;The Jensen&amp;rsquo;s inequality will give us a bit of motivation behind the ELBO.&lt;/p&gt;
&lt;p&gt;In simple terms, Jensen&amp;rsquo;s inequality states that for a convex function $f(x)$ and a random variable $X$ we get&lt;/p&gt;
&lt;p&gt;$$
E[g(X)] \geq g(E[X]).
$$&lt;/p&gt;
&lt;p&gt;Recall that we&amp;rsquo;re interested in&lt;/p&gt;
&lt;p&gt;$$
\log p(X) = \log \left( \sum_Z p(X, Z) \right).
$$&lt;/p&gt;
&lt;p&gt;Introducing a new density $q(Z)$ on the latent variable $Z$ we can re-write the last equation as&lt;/p&gt;
&lt;p&gt;$$
\log \left( \sum_Z p(X, Z) \frac{q(Z)}{q(Z)} \right) = \log \left( \sum_Z q(Z) \frac{p(X, Z)}{q(Z)} \right) = \log \mathrm{E}_q \left[ \frac{p(X, Z)}{q(Z)} \right].
$$&lt;/p&gt;
&lt;p&gt;We can now simply apply the Jensen&amp;rsquo;s inequality and immediately arrive at the ELBO as a lower bound, since&lt;/p&gt;
&lt;p&gt;$$
\log p(X) = \log \mathrm{E}_q \left[ \frac{p(X, Z)}{q(Z)} \right] \geq \mathrm{E}_q \left[ \log \frac{p(X, Z)}{q(Z)} \right] = \mathcal{L}(q).
$$&lt;/p&gt;
&lt;p&gt;Note that we got the same exact equation as above, showing that $\mathcal{L}$ is indeed a lower bound on $\log p(X)$.&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://legacydirs.umiacs.umd.edu/~xyang35/files/understanding-variational-lower.pdf&#34;&gt;Understanding the Variational Lower Bound, Xitong Yang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.ubc.ca/~murphyk/MLbook/&#34;&gt;Machine Learning: a Probabilistic Perspective, Kevin Patrick Murphy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1601.00670&#34;&gt;Variational Inference: A Review for Statisticians, David M. Blei, Alp Kucukelbir, Jon D. McAuliffe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/research/people/cmbishop/#prml-book&#34;&gt;Pattern Recognition and Machine Learning, Christopher Bishop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Bellman Equation</title>
		<link>https://blog.jakuba.net/bellman-equation/</link>
		<pubDate>Thu, 22 Nov 2018 17:39:21 +0200</pubDate>
		
		<guid>https://blog.jakuba.net/bellman-equation/</guid>
		<description>&lt;p&gt;Before we begin, let me just define a few terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$S_t$ is the state at time $t$.&lt;/li&gt;
&lt;li&gt;$A_t$ is the action performed at time $t$.&lt;/li&gt;
&lt;li&gt;$R_t$ is the reward received at time $t$.&lt;/li&gt;
&lt;li&gt;$G_t$ is the &lt;strong&gt;return&lt;/strong&gt;, that is the sum of discounted rewards received from time $t$ onwards, defined as &lt;code&gt;$G_t = \sum_{i=0}^\infty \gamma^i R_{t+i+1}$&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;$V^\pi(s)$ is the value of a state when following a policy $\pi$, that is the expected return when starting in state $s$ and following a policy $\pi$, defined as &lt;code&gt;$V^\pi(s) = E[G_t | S_t = s]$&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;$Q^\pi(s, a)$ is the value of a state $s$ when performing and action $a$ and then following the policy $\pi$, that is $Q^\pi(s, a) = E[G_t | S_t = s, A_t = a]$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before moving further, note a small algebraic tric for re-writing $G_t$ in terms of itself&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We can use this in the definition of $V^\pi(s)$ and get&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The last equation is called the Bellman equation for $V^\pi(s)$ and it shows a recursive relationship between the value of the current state and the possible next states. This in and of itself is not as interesting, but we&amp;rsquo;ll use it to derive a solution to finding the optimal policy.&lt;/p&gt;
&lt;p&gt;Let us now define the optimal value function, that is the value function of the optimal policy (denoted $\pi^*$).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;that is the optimal value of a state is the maximum over all possible policies. Going one step further, we also define the optimal action-value function as&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;It&amp;rsquo;s easy to see now that &lt;code&gt;$V^*(s) = \max_a Q^*(s, a)$&lt;/code&gt;, that is the maximum value of a state is computed by performing the best possible action. We can use this further to arrive at a simplified Bellman equation as follows&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Here we managed to do a small but important trick in the second last equation (marked with $\stackrel{*}{=}$). But let us first decompose what does $\mathrm{E}_\pi*$ actually mean. Because $G_r$ is the discounted sum of rewards, it is only defined in terms of a policy. But since we assume the policy to be stochastic, we need to take an expectation over all possible actions chosen by the policy, and the possible rewards.&lt;/p&gt;
&lt;p&gt;This changes at the marked equation, because we are no longer referring to the policy $\pi_*$, but rather to the value function $V^*$, which is not stochastic. As a reuslt, the expectation in the second to last equation is simply over $R_t$, because we still assume stochastic rewards.&lt;/p&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Equations for the value function and notation borrowed from &lt;a href=&#34;https://mitpress.mit.edu/books/reinforcement-learning&#34;&gt;Reinforcement Learning: An Introduction by Andrew Barto and Richard S. Sutton&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Linear Regression - least squares with orthogonal projection</title>
		<link>https://blog.jakuba.net/linear-regression---least-squares-with-orthogonal-projection/</link>
		<pubDate>Sun, 01 Jul 2018 10:47:11 +0200</pubDate>
		
		<guid>https://blog.jakuba.net/linear-regression---least-squares-with-orthogonal-projection/</guid>
		<description>&lt;p&gt;Compared to the previous article where we simply used vector derivatives we&amp;rsquo;ll now try to derive the formula for least squares simply by the properties of linear transformations and the four fundamental subspaces of linear algebra. These are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kernel $Ker(A)$: The set of all solutions to $Ax = 0$. Sometimes we can say nullspace $N(A)$ instead of kernel.&lt;/li&gt;
&lt;li&gt;Image $Im(A)$: The set of all right sides $b$, for which there is a solution $Ax = b$. We&amp;rsquo;ll show that this is equal to the column space $C(A)$, which is the span of the column vectors in $A$.&lt;/li&gt;
&lt;li&gt;Row space $R(A)$: Span of the row vectors in $A$, sometimes also referred to as $Im(A^T)$ (the image of $A^T$). We can also refer to this as $C(A^T)$, because since $Im(A) = C(A)$, then $Im(A^T) = C(A^T) = R(A)$.&lt;/li&gt;
&lt;li&gt;Left kernel $Ker(A^T)$ (or left nullspace): The set of all solutions to $A^T x = 0$. The name comes from left multiplying by $x$, specifically the set of solutions to $x^T A = 0^T$.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this derivation we assume that $Ker(A) \perp R(A)$ and $Im(A) \perp Ker(A^T)$.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;A&lt;/code&gt; is not invertible (could be rectangular), there is no exact solution to $Ax = b$, because $b$ has a component in $Ker(A^T)$, which is outside the range of $A$ (literally). We can define $b = b_i + b_n$ where $b_i$ is the ortogonal projection of $b$ onto $Im(A)$, and $b_n$ is the ortogonal projection of $b$ onto $Ker(A^T)$. In other words, $b_i \perp b_n$.&lt;/p&gt;
&lt;p&gt;The above is valid, because we assume $Im(A) \perp Ker(A^T)$, and that $span(Im(A) \cup Ker(A^T)) = rng(A)$, in other words that $Im(A)$ and $Ker(A^T)$ together generate the whole range of our linear mapping $A$. Now just using basic algebra:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
b &amp;amp;= b_i + b_n \\\\
b &amp;amp;= Ax + b_n &amp;amp; \text{left multiply by $A^T$} \\\\
A^T b &amp;amp;= A^T A x + A^T b_n &amp;amp; \text{since $b_n \in Ker(A^T)$, we know $A^T b_n = 0$} \\\\
A^T b &amp;amp;= A^T A x &amp;amp; \text{$A^T A$ is invertible, see note below} \\\\
(A^T A)^{-1} A^T b &amp;amp;= x &amp;amp; \text{finally, we get the normal equation}
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Here we used the fact that $A^T A$ is always a symmetric positive semi-definite matrix, and in case we have linearly independent columns, it is actually positive-definite, which means it is also invertible. This is actually easy to show.&lt;/p&gt;
&lt;p&gt;First we show that $A^T A$ is symmetric. This is easy to see, because $(A^T A)_{ij}$ is just the dot product of $i$-th row of $A^T$ with the $j-th$ column of $A$. Note that $i$-th row of $A^T$ is actually $i$-th column of $A$. From this we see that $(A^T A)_{ij} = (A^T A)_{ji}$, because dot product is symmetric.&lt;/p&gt;
&lt;p&gt;Now we show that $A^T A$ is positive semi-definite. For an arbitrary matrix $M$, we say that $M$ is positive semi-definite if and only if $x^T M x \geq 0$ for all $x \in \mathbb{R}$. We can directly substitute $A^T A$ and use the same trick as below:&lt;/p&gt;
&lt;p&gt;$$
x^T A^T A x = (A x)^T A x = ||A x||^2 \geq 0
$$&lt;/p&gt;
&lt;p&gt;Since $A^T A$ satisfies the definition directly, it is positive-semidefinite. &lt;!-- raw HTML omitted --&gt;$\square$&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;There is also another very nice way to show that $A^T A$ is invertible, without showing that it is positive semi-definite.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lemma&lt;/strong&gt; $Ker(A^T A) = Ker(A)$.&lt;/p&gt;
&lt;p&gt;Starting with $Ker(A^T A) \supseteq Ker(A)$, this follows immediately from $Ax = 0 \implies A^T (Ax) = 0$.&lt;/p&gt;
&lt;p&gt;Next $Ker(A^T A) \subseteq Ker(A)$: $A^T A x = 0$, left multiply by $x^T$ and we get:&lt;/p&gt;
&lt;p&gt;$$
0 = x^T A^T A x = (A x)^T A x = || Ax ||^2.
$$&lt;/p&gt;
&lt;p&gt;Since the $L_2$ norm is zero only if the vector is zero, we get that any vector $x$ for which $A^T A x = 0$, it is also true that $|| Ax ||^2 = 0$, which can only be true when $A x = 0$, and hence $x \in Ker(A)$. &lt;!-- raw HTML omitted --&gt;$\square$&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Because $Ker(A^T A) = Ker(A)$, we also know that $rank(A^T A) = rank(A)$, which means if $A$ has linearly independent columns, $A^T A$ is invertible, because it has a full rank (this is because $A^T A$ is square and has the same number of rows/columns as $A$ has columns).&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Matrix Inversion Lemma</title>
		<link>https://blog.jakuba.net/matrix-inversion-lemma/</link>
		<pubDate>Wed, 16 May 2018 23:12:35 +0200</pubDate>
		
		<guid>https://blog.jakuba.net/matrix-inversion-lemma/</guid>
		<description>&lt;p&gt;&lt;strong&gt;This article is a draft and as such there might be typos and other inaccuracies&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this article we&amp;rsquo;ll derive the matrix inversion lemma, also known as the Sherman-Morrisson-Woodbury formula. At first it might seem like a very boring piece of linear algebra, but it has a few nifty uses, as we&amp;rsquo;ll see in one of the followup articles.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with the following block matrix:&lt;/p&gt;
&lt;p&gt;$$
M = \begin{bmatrix}
A &amp;amp; U \\\\
V &amp;amp; B
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll do an &lt;a href=&#34;https://en.wikipedia.org/wiki/LU_decomposition#LDU_decomposition&#34;&gt;LDU decomposition&lt;/a&gt; in two different ways, which basically direclty gives us the end formula. Eliminating the bototm left element we get the following:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
I &amp;amp; 0 \\\\
-V A^{-1} &amp;amp; I
\end{bmatrix}
\begin{bmatrix}
A &amp;amp; U \\\\
V &amp;amp; B
\end{bmatrix} = \begin{bmatrix}
A &amp;amp; U \\\\
0 &amp;amp; B - V A^{-1} U
\end{bmatrix}&lt;br&gt;
$$&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;$B - V A^{-1} U$&lt;/code&gt; is called a &lt;a href=&#34;https://en.wikipedia.org/wiki/Schur_complement&#34;&gt;Schur complement&lt;/a&gt; and is generally defined as follows:&lt;/p&gt;
&lt;p&gt;$$
M/A := V A^{-1} U
$$&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use this notation later to make things easier to read. Moving on with the decomposition, we&amp;rsquo;ll now eliminate $U$.&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
A &amp;amp; U \\\\
0 &amp;amp; B - V A^{-1} U
\end{bmatrix} \begin{bmatrix}
I &amp;amp; -A^{-1} U \\\\
0 &amp;amp; I
\end{bmatrix} = \begin{bmatrix}
A &amp;amp; 0 \\\\
0 &amp;amp; B - V A^{-1} U
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Putting the two equations above together we get the following:&lt;/p&gt;
&lt;p&gt;$$
\underbrace{\begin{bmatrix}
I &amp;amp; 0 \\\\
-V A^{-1} &amp;amp; I
\end{bmatrix}}_{X}
\underbrace{\begin{bmatrix}
A &amp;amp; U \\\\
V &amp;amp; B
\end{bmatrix}}_{M} \underbrace{\begin{bmatrix}
I &amp;amp; -A^{-1} U \\\\
0 &amp;amp; I
\end{bmatrix}}_{Z} = \underbrace{\begin{bmatrix}
A &amp;amp; 0 \\\\
0 &amp;amp; B - V A^{-1} U
\end{bmatrix}}_{W}
$$&lt;/p&gt;
&lt;p&gt;We could also write the matrix $W$ using the Schur complement notation:
$$
W = \begin{bmatrix}
A &amp;amp; 0 \\\\
0 &amp;amp; B - V A^{-1} U
\end{bmatrix} = \begin{bmatrix}
A &amp;amp; 0 \\\\
0 &amp;amp; M/A
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Now we just express $M$ in terms of $X, Z, W$ and take the inverse to get $M^{-1}$.&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
X M Z &amp;amp;= W \\\\
M Z &amp;amp;= X^{-1} W \\\\
M &amp;amp;= X^{-1} W Z^{-1} \\\\
M^{-1} &amp;amp;= (X^{-1} W Z^{-1})^{-1} \\\\
M^{-1} &amp;amp;= Z W^{-1} X
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Substituting our matrices back in, we get:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
A &amp;amp; U \\\\
V &amp;amp; B
\end{bmatrix}^{-1}
= \begin{bmatrix}
I &amp;amp; -A^{-1} U \\\\
0 &amp;amp; I
\end{bmatrix}
\begin{bmatrix}
A^{-1} &amp;amp; 0 \\\\
0 &amp;amp; (M/A)^{-1}
\end{bmatrix}
\begin{bmatrix}
I &amp;amp; 0 \\\\
-V A^{-1} &amp;amp; I
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Now comes the fun part, we&amp;rsquo;ll multiply out the right side of the equation:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\begin{bmatrix}
A &amp;amp; U \\\\
V &amp;amp; B
\end{bmatrix}^{-1}
&amp;amp;= \begin{bmatrix}
I &amp;amp; -A^{-1} U \\\\
0 &amp;amp; I
\end{bmatrix}
\begin{bmatrix}
A^{-1} &amp;amp; 0 \\\\
0 &amp;amp; (M/A)^{-1}
\end{bmatrix}
\begin{bmatrix}
I &amp;amp; 0 \\\\
-V A^{-1} &amp;amp; I
\end{bmatrix} \\\\
&amp;amp;= \begin{bmatrix}
A^{-1} &amp;amp; -A^{-1} U (M/A)^{-1} \\\\
0 &amp;amp; (M/A)^{-1}
\end{bmatrix}
\begin{bmatrix}
I &amp;amp; 0 \\\\
-V A^{-1} &amp;amp; I
\end{bmatrix} \\\\
&amp;amp;= \begin{bmatrix}
A^{-1} + A^{-1} U (M/A)^{-1} V A^{-1} &amp;amp; -A^{-1} U (M/A)^{-1} \\\\
-(M/A)^{-1} VA^{-1} &amp;amp; (M/A)^{-1}
\end{bmatrix} \\\\
&amp;amp;= \begin{bmatrix}
A^{-1} + A^{-1} U (B - V A^{-1} U)^{-1} V A^{-1} &amp;amp; -A^{-1} U (B - V A^{-1} U)^{-1} \\\\
-(B - V A^{-1} U)^{-1} VA^{-1} &amp;amp; (B - V A^{-1} U)^{-1}
\end{bmatrix}
\end{align}
$$&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it for the first part, now we&amp;rsquo;ll do the same, but eliminating the top-right element from the left first.&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
I &amp;amp; -U B^{-1} \\\\
0 &amp;amp; I
\end{bmatrix} \begin{bmatrix}
A &amp;amp; U \\\\
V &amp;amp; B
\end{bmatrix} = \begin{bmatrix}
A - UB^{-1}V &amp;amp; 0 \\\\
V &amp;amp; B
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Here we get the other Schur complement, which we&amp;rsquo;ll note as $M/B = A - UB^{-1}V$. We can substitute it in straight away this time.&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
M/B &amp;amp; 0 \\\\
V &amp;amp; B
\end{bmatrix} \begin{bmatrix}
I &amp;amp; 0 \\\\
-B^{-1}V &amp;amp; I
\end{bmatrix} = \begin{bmatrix}
M/B &amp;amp; 0 \\\\
0 &amp;amp; B
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;As before, we&amp;rsquo;ll write it out as a single equation:&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
I &amp;amp; -U B^{-1} \\\\
0 &amp;amp; I
\end{bmatrix}
\begin{bmatrix}
A &amp;amp; U \\\\
V &amp;amp; B
\end{bmatrix} \begin{bmatrix}
I &amp;amp; 0 \\\\
-B^{-1}V &amp;amp; I
\end{bmatrix} = \begin{bmatrix}
M/B &amp;amp; 0 \\\\
0 &amp;amp; B
\end{bmatrix}
$$&lt;/p&gt;
&lt;p&gt;Now we express the matrix $M$ in terms of the other two (notice the newly added inverse signs):&lt;/p&gt;
&lt;p&gt;$$
\begin{bmatrix}
A &amp;amp; U \\\\
V &amp;amp; B
\end{bmatrix} = \begin{bmatrix}
I &amp;amp; -U B^{-1} \\\\
0 &amp;amp; I
\end{bmatrix}^{-1}
\begin{bmatrix}
M/B &amp;amp; 0 \\\\
0 &amp;amp; B
\end{bmatrix} \begin{bmatrix}
I &amp;amp; 0 \\\\
-B^{-1}V &amp;amp; I
\end{bmatrix}^{-1}
$$&lt;/p&gt;
&lt;p&gt;Lastly, we just take the inverse of both sides:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\begin{bmatrix}
A &amp;amp; U \\\\
V &amp;amp; B
\end{bmatrix}^{-1} &amp;amp;= \left( \begin{bmatrix}
I &amp;amp; -U B^{-1} \\\\
0 &amp;amp; I
\end{bmatrix}^{-1}
\begin{bmatrix}
M/B &amp;amp; 0 \\\\
0 &amp;amp; B
\end{bmatrix} \begin{bmatrix}
I &amp;amp; 0 \\\\
-B^{-1}V &amp;amp; I
\end{bmatrix}^{-1} \right)^{-1} \\\\
&amp;amp;= \begin{bmatrix}
I &amp;amp; 0 \\\\
-B^{-1}V &amp;amp; I
\end{bmatrix}
\begin{bmatrix}
M/B &amp;amp; 0 \\\\
0 &amp;amp; B
\end{bmatrix}^{-1} \begin{bmatrix}
I &amp;amp; -U B^{-1} \\\\
0 &amp;amp; I
\end{bmatrix} &amp;amp; \text{notice the inverses cancelling out} \\\\
&amp;amp;= \begin{bmatrix}
I &amp;amp; 0 \\\\
-B^{-1}V &amp;amp; I
\end{bmatrix}
\begin{bmatrix}
(M/B)^{-1} &amp;amp; 0 \\\\
0 &amp;amp; B^{-1}
\end{bmatrix} \begin{bmatrix}
I &amp;amp; -U B^{-1} \\\\
0 &amp;amp; I
\end{bmatrix} \\\\
&amp;amp;=
\begin{bmatrix}
(M/B)^{-1} &amp;amp; 0 \\\\
-B^{-1} V (M/B)^{-1} &amp;amp; B^{-1}
\end{bmatrix} \begin{bmatrix}
I &amp;amp; -U B^{-1} \\\\
0 &amp;amp; I
\end{bmatrix} \\\\
&amp;amp;=
\begin{bmatrix}
(M/B)^{-1} &amp;amp; -(M/B)^{-1} UB^{-1} \\\\
-B^{-1} V (M/B)^{-1}  &amp;amp; B^{-1} V (M/B)^{-1} UB^{-1} + B^{-1}
\end{bmatrix} \\\\
&amp;amp;=
\begin{bmatrix}
(A - UB^{-1}V)^{-1} &amp;amp; -(A - UB^{-1}V)^{-1} UB^{-1} \\\\
-B^{-1} V (A - UB^{-1}V)^{-1}  &amp;amp; B^{-1} V (A - UB^{-1}V)^{-1} UB^{-1} + B^{-1}
\end{bmatrix}
\end{align}
$$&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Linear Regression - Least Squares Without Orthogonal Projection</title>
		<link>https://blog.jakuba.net/linear-regression---deriving-least-squares-without-orthogonal-projection/</link>
		<pubDate>Tue, 24 Apr 2018 23:28:14 +0200</pubDate>
		
		<guid>https://blog.jakuba.net/linear-regression---deriving-least-squares-without-orthogonal-projection/</guid>
		<description>&lt;p&gt;There are multiple ways one can arrive at the least squares solution to linear regression. I&amp;rsquo;ve always seen the one using orthogonality, but there is another way which I&amp;rsquo;d say is even simpler, especially if you&amp;rsquo;ve done any calculus. Let&amp;rsquo;s define the problem first.&lt;/p&gt;
&lt;p&gt;Given a matrix \(N \times M\) matrix \(X\) of inputs, and a vector \(y\) of length \(N\) containing the outputs, the goal is to find a weight vector \(w\) of length \(M\) such that:&lt;/p&gt;
&lt;p&gt;$$
X w \approx y
$$&lt;/p&gt;
&lt;p&gt;The reason we&amp;rsquo;re using a \(\approx\) instead of \(=\) is that we&amp;rsquo;re not expecting to fit the line exactly through are training examples, as real world data will contain some form of noise.&lt;/p&gt;
&lt;p&gt;To find a best possible fit we&amp;rsquo;ll create a loss function which tells us how well our line fits the data, and then try to minimize the loss. A common choice for regression is the &lt;em&gt;sum of squared errors&lt;/em&gt; loss (denoted \(L\)), which is defined as:&lt;/p&gt;
&lt;p&gt;$$
L = \sum_{i = 1}^{N} \left( X_iw - y_i \right)^2
$$&lt;/p&gt;
&lt;p&gt;We can also write this in vector notation using a squared L2 norm&lt;/p&gt;
&lt;p&gt;$$
L = || Xw - y ||^2
$$&lt;/p&gt;
&lt;p&gt;Now here comes the fun part. Because our loss \(L\) is a convex function, it only has a single global minimum, for which we can solve analytically by simply taking a derivative with respect to \(w\) and setting that equal to zero. Before we get into that, let&amp;rsquo;s re-write the loss \(L\) to a form which is more suitable for differentiation:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
L = || Xw - y ||^2 &amp;amp;= (Xw - y)^T (Xw - y) \\\\
&amp;amp;= (y^T - w^T X^T) (Xw - y) \\\\
&amp;amp;= y^T X w - y^T y - w^T X^T X w \\\\
&amp;amp;= y^T X w + w^T X^T y - y^T y - w^T X^T X w \\\\
&amp;amp;= y^T X w + (y^T X w)^T - y^T y - w^T X^T X w &amp;amp; \text{transpose of a scalar is a scalar} \\\\
&amp;amp;= y^T X w + y^T X w - y^T y - w^T X^T X w \\\\
&amp;amp;= 2 y^T X w - y^T y - w^T X^T X w \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Before moving any further, let us derive a few vector derivative rules (no pun intended). First, the \(i\)-th row of \(Ax\) is defined as follows:&lt;/p&gt;
&lt;p&gt;$$
\left( Ax \right)_i = \sum_{j=1}^{M} A_{ij} x_j = A_{i1} x_1 + A_{i2} x_2 + \dots + A_{iM} x_M&lt;br&gt;
$$&lt;/p&gt;
&lt;p&gt;Now if we take a derivative with respect to \(x_j\) we&amp;rsquo;d get:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\frac{\partial}{\partial x_j} \left( Ax \right)_i &amp;amp;= \frac{\partial}{\partial x_j} \left(A_{i1} x_1 + A_{i2} x_2 + \dots + A_{iM} x_M \right) \\\\
&amp;amp;= \frac{\partial}{\partial x_j} \left(A_{i1} x_1 + A_{i2} x_2 + \dots + A_{ij} x_j + \dots + A_{iM} x_M \right) \\\\
&amp;amp;= \frac{\partial}{\partial x_j} A_{i1} x_1 + \frac{\partial}{\partial x_j} A_{i2} x_2 + \dots + \frac{\partial}{\partial x_j} A_{ij} x_j + \dots + \frac{\partial}{\partial x_j} A_{iM} x_M \\\\
&amp;amp;= 0 + 0 + \dots + \frac{\partial}{\partial x_j} A_{ij} x_j + \dots + 0 \\\\
&amp;amp;= A_{ij}
\end{align}
$$&lt;/p&gt;
&lt;p&gt;So this means if we take the \(i\)-th row of the matrix and derive it by the \(j\)-th element in \(x\), we get back \(A_{ij}\). As a result, we get to a nice simple equation:&lt;/p&gt;
&lt;p&gt;$$
\frac{d}{dx} Ax = A
$$&lt;/p&gt;
&lt;p&gt;While nice, this doesn&amp;rsquo;t get us very far. We also need to figure out what happens in the case when the vector is on the left as a row vector, as in \(x^T A\)&lt;/p&gt;
&lt;p&gt;$$
(x^T A)_i = \sum_{j = 1}^{M} x_{j}^T A_{ji}
$$&lt;/p&gt;
&lt;p&gt;Giving us the following partial derivative:&lt;/p&gt;
&lt;p&gt;$$
\frac{\partial}{\partial x_j} (x^T A)_i = A^T
$$&lt;/p&gt;
&lt;p&gt;And finally the interesting part:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\frac{\partial x^T A x}{\partial x_i} &amp;amp;= \frac{\partial}{\partial x_i} \left( \sum_{j,k} x_j B_{jk} x_k \right) \\\\
&amp;amp;= \sum_{j} x_j B_{ji} + \sum_{k} B_{ik} x_k \\\\
&amp;amp;= \sum_{k} B^T_{ik} x_k + \sum_{k} B_{ik} x_k \\\\
&amp;amp;= \sum_{k} (B^T_{ik} + B_{ik}) x_k \\\\
&amp;amp;= \sum_{k} (B^T + B)_{ik} x_k \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Giving us the final:&lt;/p&gt;
&lt;p&gt;$$
\frac{d}{dx} x^T B x = (B^T + B) x
$$&lt;/p&gt;
&lt;p&gt;Which means we can take our loss function and take the derivative with respect to \(w\):&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
\frac{d}{dw} L &amp;amp;= \frac{d}{dw} (2 y^T X w - y^T y - w^T X^T X w) \\\\
&amp;amp;= 2 y^T X - 0 - w^T ((X^T X)^T + X^T X) &amp;amp; X^T X \ \text{is symmetrical}\\\\
&amp;amp;= 2 y^T X - w^T (X^T X + X^T X) \\\\
&amp;amp;= 2 y^T X - 2 w^T X^T X \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;Now we want this to be equal to \(0\) to find the minimum, which gives us the following equation:&lt;/p&gt;
&lt;p&gt;$$
\begin{align}
0 &amp;amp;= 2 y^T X - 2 w^T X^T X \\\\
2 w^T X^T X &amp;amp;= 2 y^T X  \\\\
w^T  &amp;amp;= y^T X (X^T X)^{-1}  \\\\
w &amp;amp;= (X^T X)^{-1} X^T y \\\\
\end{align}
$$&lt;/p&gt;
&lt;p&gt;And there we go, it was a bit of work but we managed to derive the normal equation without the use of orthogonal projection.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Let&#39;s Write a 2D Platformer From Scratch Using HTML5 and JavaScript, Part 3: Collision Detection</title>
		<link>https://blog.jakuba.net/2018-02-01-lets-write-a-2d-platformer-from-scratch-part-3/</link>
		<pubDate>Thu, 01 Feb 2018 10:00:00 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/2018-02-01-lets-write-a-2d-platformer-from-scratch-part-3/</guid>
		<description>&lt;p&gt;&lt;strong&gt;This article is a part 3 of the &lt;em&gt;Let&amp;rsquo;s Write a 2D Platformer From Scratch Using HTML5 and JavaScript&lt;/em&gt; series.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-1/&#34;&gt;Part 1: Game Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-2/&#34;&gt;Part 2: Rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: Collision Detection&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The previous post ended with a very ad-hoc solution to collision detection. We barely managed to get vertical movement working, and didn&amp;rsquo;t even get started on gravity. There&amp;rsquo;s a reason for that. Once the player starts moving vertically, we need something better than just checking against the top left corner we immediately run into issues such as passing through walls below the player, as shown in this image:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/hMMrnmL.png&#34; alt=&#34;player stuck in a wall&#34;&gt;&lt;/p&gt;
&lt;p&gt;What we really want is some concept of a &lt;em&gt;collider&lt;/em&gt;, which represents the rigid body of an object. There is however one important distinction. We are only concerning ourselves with collision detection, not full rigid body physics, such as is implemented in &lt;a href=&#34;https://github.com/erincatto/Box2D&#34;&gt;Box2D&lt;/a&gt;. While physics engines provide a huge range of possibilities and features, they are also sometimes difficult to control, &lt;a href=&#34;http://jessewarden.com/2012/02/building-an-elevator-in-box2d.html&#34;&gt;such as when using elevators&lt;/a&gt;, moving platforms, or climbing slopes. What we&amp;rsquo;ll do instead is implement simple horizontal and vertical raycasts which will together with a bit of code provide great control over how the player moves in the world. &lt;a href=&#34;https://en.wikipedia.org/wiki/Ray_casting&#34;&gt;Ray casting&lt;/a&gt; is basically like shooting a laser and seeing where it lands. It will allow us to see which object is the closest in a specific direction, and how far is it.&lt;/p&gt;
&lt;p&gt;Some platformers can benefity greatly from the use of a physics engines, such as the popular &lt;a href=&#34;http://littlebigplanet.playstation.com/&#34;&gt;Little Big Planet&lt;/a&gt;. Other platformers, such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Super_Mario_Bros.&#34;&gt;Super Mario Bros.&lt;/a&gt;, which require highly precise controls might be better off being implemented using raycasts, as they give the programmer more control. Physics engines are more inclined to work with things like forces, friction, velocities, etc., while the raycast approach is more in the terms of something like &lt;em&gt;if the player is hugging a wall he can press the jump button&lt;/em&gt; where the &lt;em&gt;hugging a wall&lt;/em&gt; is determined by doing a raycast on both sides of the player and seeing how far is the closest wall.&lt;/p&gt;
&lt;p&gt;To keep things simple we still constrain the game to box-shaped objects instead of arbitrary polygons. Each tile is a square, as is the player. But to make things at least somewhat interesting we&amp;rsquo;ll allow arbitrary shaped boxes, as long as they&amp;rsquo;re not rotated. This is commonly called an &lt;a href=&#34;https://en.wikipedia.org/wiki/Minimum_bounding_box#Axis-aligned_minimum_bounding_box&#34;&gt;Axis-Aligned Bounding Box&lt;/a&gt; (AABB for short).&lt;/p&gt;
&lt;p&gt;As a small sidenote, there are already tons of existing libraries for vector math, collision detection, or even specifically ray vs AABB collision detection. I initially didn&amp;rsquo;t intend to do this part completely from scratch and at least use a small vector wrapper like &lt;a href=&#34;https://github.com/maxkueng/victor&#34;&gt;victor.js&lt;/a&gt;, but the library looks basically dead and there are some outstanding issues left unfixed. Then there&amp;rsquo;s &lt;a href=&#34;https://github.com/toji/gl-matrix&#34;&gt;gl-matrix&lt;/a&gt; which seems to be up to date, but seems to be more concerned about performance and WebGL than anything else, which isn&amp;rsquo;t the priority in this series.&lt;/p&gt;
&lt;p&gt;Similarly, there is &lt;a href=&#34;https://github.com/stackgl/ray-aabb-intersection&#34;&gt;ray-aabb-intersection&lt;/a&gt; and &lt;a href=&#34;https://github.com/tmpvar/ray-aabb&#34;&gt;ray-aabb&lt;/a&gt; which are both more general than what we&amp;rsquo;ll implement here, but at the same time I feel that one has to ask themselves the question, why are we doing this? If the goal is to write production quality code, we probably wouldn&amp;rsquo;t pick small libraries which haven&amp;rsquo;t had any activity for 2-3 years. If the goal is learning, then we get the most out of it by implementing things ourselves.&lt;/p&gt;
&lt;p&gt;I wouldn&amp;rsquo;t be against using a production quality collision library and focus on learning other things, but there doesn&amp;rsquo;t seem to be one available for JavaScript, comparable to something like &lt;a href=&#34;http://ncollide.org/&#34;&gt;ncollide for Rust&lt;/a&gt;, and I don&amp;rsquo;t feel like bringing in the whole of &lt;a href=&#34;https://github.com/erincatto/Box2D&#34;&gt;Box2D&lt;/a&gt; just yet when we&amp;rsquo;re starting out. It will probably come handy in a future blog post when we&amp;rsquo;ll need a more robust solution to collisions and physics.&lt;/p&gt;
&lt;h2 id=&#34;horizontal-raycast-against-aabbs&#34;&gt;Horizontal raycast against AABBs&lt;/h2&gt;
&lt;p&gt;Before we move on, let us define a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AABB&lt;/strong&gt; is a rectangle, which is defined by its top-left corner, width and height.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ray&lt;/strong&gt; is a half-line, which is defined by its origin and direction (up/down/left/right in our case).&lt;/li&gt;
&lt;li&gt;A horizontal ray can be in three possible configurations with an AABB (consider ray direction to be &lt;code&gt;right&lt;/code&gt;, the &lt;code&gt;left&lt;/code&gt; case is symmetrical):
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Intersection&lt;/strong&gt;: the ray starts left of the AABB (&lt;code&gt;ray.origin.x &amp;lt; aabb.x&lt;/code&gt;) and hits the AABB (&lt;code&gt;ray.origin.y &amp;gt;= aabb.y &amp;amp;&amp;amp; ray.origin.y &amp;lt;= (aabb.y + aabb.h)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inside&lt;/strong&gt;: the ray starts in the inner interval of the AABB on the x-axis (&lt;code&gt;ray.origin.x &amp;gt;= aabb.x &amp;amp;&amp;amp; ray.origin.x &amp;lt;= (aabb.x + aabb.w)&lt;/code&gt;) and the same for the y-axis (&lt;code&gt;ray.origin.y &amp;gt;= aabb.y &amp;amp;&amp;amp; ray.origin.y &amp;lt;= (aabb.y + aabb.h)&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No intersection&lt;/strong&gt;: if neither of the above is true.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;When we define these properties, we&amp;rsquo;re thinking in the HTML5 Canvas&amp;rsquo; system of coordinates where positive X means &lt;em&gt;right&lt;/em&gt; and positive Y means &lt;em&gt;down&lt;/em&gt;. This is different than what the usual Cartesian system of coordinates, which considers its bottom left corner as origin, and positive Y going &lt;em&gt;up&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Just looking at the definitions, they basically give us the answer already. We could just copy paste the definitions, adjust the comparisons for each of the &lt;code&gt;12&lt;/code&gt; cases (&lt;code&gt;3&lt;/code&gt; for each direction, and there are &lt;code&gt;4&lt;/code&gt; directions) and be done. But let&amp;rsquo;s try to be smart and generalize the conditionals at least a little bit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; Direction &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UP&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;up&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    DOWN&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;down&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    LEFT&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;left&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RIGHT&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;right&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// A ray is defined by its origin and direction.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; Ray&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; dir&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; y &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;direction &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; dir&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// AABB is defined by its top-left corner, width and height.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; AABB&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; w&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; h&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;w &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; w&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;h &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; h&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; compareInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; low&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// This shouldn&amp;#39;t necessarily be required, but it allows us to just specify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// the bounds of an interval, without checking which of the two is low and which is high.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;low &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; tmp &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        high &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; low&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        low &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tmp&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// And then we simply check if the value lies outside of the interval
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; low&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;low &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;=&lt;/span&gt; value &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; value &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;=&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; intersect&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;direction&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; Direction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;UP&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; Direction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;DOWN&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; Direction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;LEFT&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; Direction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;RIGHT&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;=&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;compareInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;h&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before we move on any further, we should probably test this code to see if it works, since subtle bugs in collision detection could be hard to debug later on when we try to use it in a game. While the spirit of these articles is &lt;em&gt;let&amp;rsquo;s write everything ourselves&lt;/em&gt;, I don&amp;rsquo;t feel that writing our own testing framework would be of any benefit, and if you&amp;rsquo;ve read this far, you can probably do it without many issues (at least for the synchronous testing, which is what we&amp;rsquo;ll be doing here).&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use &lt;a href=&#34;https://qunitjs.com/&#34;&gt;QUnit&lt;/a&gt;, because it was the only one that literally had a copy-paste-this-and-it-works, which makes it ideal for the JSFiddle based format of these articles. If you have suggestions for a better testing library, please do share them in the comments, but keep in mind that this series is not about setting up the most elaborate build system. If it needs a command line tool to run/build, it&amp;rsquo;s already too much of a hassle.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a few tests for the &lt;code&gt;Direction.RIGHT&lt;/code&gt; case:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Implementing the other three directions isn&amp;rsquo;t really challenging as everything is symmetrical. We just have to be careful not to make any mistakes when passing down coordinates. Here&amp;rsquo;s a full &lt;code&gt;intersect&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; intersect&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;direction&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; Direction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;UP&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;=&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;h&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;compareInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;h &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; Direction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;DOWN&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;=&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;compareInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; Direction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;LEFT&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;=&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;compareInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;h&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;w&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; Direction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;RIGHT&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;=&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;compareInterval&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;h&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here&amp;rsquo;s a JSFiddle with test cases for all four of the directions:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We can also create a simple wrapper to calculate the distance of an AABB:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; distance&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;sqrt&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;pow&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;pow&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; raycastDistance&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; point &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; intersect&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;point&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; distance&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; point&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;raycasts-against-multiple-box-colliders&#34;&gt;Raycasts against multiple box colliders&lt;/h2&gt;
&lt;p&gt;So far we implemented an &lt;code&gt;intersect&lt;/code&gt; function which takes a ray and an AABB and calculates the intersection point if there is one. While this is useful, it would be far more useful to have a function which simply takes a ray and returns the closest box collider (AABB) the ray hits if there is one. There are numerous ways we could do this. In the ideal case, we&amp;rsquo;d use a spatial data structure (such as a quad tree or a spatial hash) to figure out the areas through which the ray is cast, and then check against colliders within that area. This avoid iterating the whole world on each raycast. Adding a more intelligent selection of colliders can be done separate from the rest of the code we&amp;rsquo;ll write here which is why we&amp;rsquo;ll simply iterate all of the colliders and return the intersection with the closest one.&lt;/p&gt;
&lt;p&gt;The code would look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; raycast&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; world&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; collisions &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; world&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;colliders&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;aabb&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; intersection &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; intersect&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; result &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            collider&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            intersection&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; intersect&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; aabb&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;result&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;intersection&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            result&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;distance &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; distance&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ray&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;origin&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; result&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;intersection&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}).&lt;/span&gt;filter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;collision&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; collision&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;intersection&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    collisions&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;sort&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;c1&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; c2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; c1&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;distance &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; c2&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;distance&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// JavaScript is happy with out of bound indexing, which means this line is still
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// valid even if there are no collisions.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; collisions&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now all we need is to fill a world with colliders and we can do arbitrary raycasts in horizontal/vertical directions and see what we hit. Let&amp;rsquo;s now go back to our game and test this out. I&amp;rsquo;ve added a few debug drawing helpers to visualize the rays and the distance from the collider.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;em&gt;Click on the canvas and press &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;D&lt;/strong&gt; to move. You can also click on the &lt;strong&gt;JavaScript&lt;/strong&gt; tab to see the full code for this example.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;An important thing to note is that we get &lt;code&gt;0&lt;/code&gt; distance when touching the wall. This is due to the &lt;code&gt;&amp;lt;=&lt;/code&gt; vs &lt;code&gt;&amp;lt;&lt;/code&gt; comparisons, which make it easier for us to detect touching walls. It might be worth nothing here that if our colliders weren&amp;rsquo;t aligned to integer coordinates, we might run into numerical errors.&lt;/p&gt;
&lt;h2 id=&#34;collisions-on-all-sides&#34;&gt;Collisions on all sides&lt;/h2&gt;
&lt;p&gt;In order for the player to move around both up/down and left/right we need to detect collisions on all of the edges, so that the player stays blocked by a wall even if only a part of his collider is blocked. We do this by using two raycasts on each side, and storing the results on the player object.&lt;/p&gt;
&lt;p&gt;A lot of the old collision code can be replaced with simple conditionals checking the computed distance against the velocity. Note the added &lt;a href=&#34;https://lodash.com&#34;&gt;lodash&lt;/a&gt; library. While it doesn&amp;rsquo;t provide anything we couldn&amp;rsquo;t implement ourselves I wanted to keep the code samples on point, and implementing stuff like &lt;code&gt;_.flatten&lt;/code&gt; and &lt;code&gt;_.min&lt;/code&gt; wouldn&amp;rsquo;t serve any purpose in this article.&lt;/p&gt;
&lt;p&gt;We also inset each ray a little bit into the player box by a small offset &lt;code&gt;off&lt;/code&gt; so that the ray doesn&amp;rsquo;t collide with boxes next to the player in a different direction. For example, a LEFT ray could collide with the ground beneath the player, which is not what we want, as the ground collision will be detected separately by the &lt;code&gt;bottom&lt;/code&gt; rays. This is why the BOTTOM LEFT ray is lifted up a little bit to avoid touching the ground.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;em&gt;Click on the canvas and press &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;D&lt;/strong&gt; to move. You can also click on the &lt;strong&gt;JavaScript&lt;/strong&gt; tab to see the full code for this example.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;gravity&#34;&gt;Gravity&lt;/h2&gt;
&lt;p&gt;Introducing gravity isn&amp;rsquo;t terribly difficult. We implement it just like in real life, a force causing downward acceleration. This is easier than it sounds, acceleration simply means &lt;em&gt;velocity change per second&lt;/em&gt;, which we can implement by adding vertical velocity to the player, and then updating the velocity with a gravitational constant on each frame.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;em&gt;Click on the canvas and press &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;D&lt;/strong&gt; to move and &lt;strong&gt;W&lt;/strong&gt; to jump. You can also click on the &lt;strong&gt;JavaScript&lt;/strong&gt; tab to see the full code for this example.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Overall, after we have the collision rays implemented, the rest of the logic is just a matter of writing out a few conditionals that handle each case.&lt;/p&gt;
&lt;p&gt;There is one bug though, which we won&amp;rsquo;t fix. When the player moves in a perfectly diagonal direction as they&amp;rsquo;re falling and lands on a corner of a wall the collision won&amp;rsquo;t detect the wall and the player will fall through. This is because both of the rays on the corner are inset a small amount, causing the player to fall a little bit inside the wall. After that, the collision detection part will notice the rays start inside a wall and return &lt;code&gt;null&lt;/code&gt; (because the player is technically inside the box at that point).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Ah2E1ki.png&#34; alt=&#34;player falling through a corner&#34;&gt;&lt;/p&gt;
&lt;p&gt;This goes to show that even simple as casting a few rays against boxes can have lots of edge cases that need to be handled. It is also a good argument for not implementing physics from scratch in a game that will go in productiton, as even a simple case like this isn&amp;rsquo;t trivial to get completely right.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve implemented basic collision handling and gravity. The game finally plays like a very simple platformer. We won&amp;rsquo;t be diving into physics anymore, at least not in the sense of implementing them ourselves. Instead, we&amp;rsquo;ll look at tweening next so that we can add a few simple animations to the game.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;This article is a part 3 of the &lt;em&gt;Let&amp;rsquo;s Write a 2D Platformer From Scratch Using HTML5 and JavaScript&lt;/em&gt; series.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-1/&#34;&gt;Part 1: Game Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-2/&#34;&gt;Part 2: Rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 3: Collision Detection&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jessewarden.com/2012/02/building-an-elevator-in-box2d.html&#34;&gt;Elevators in Box2D&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ray_casting&#34;&gt;Ray casting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Minimum_bounding_box#Axis-aligned_minimum_bounding_box&#34;&gt;Axis-Aligned Bounding Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/maxkueng/victor&#34;&gt;victor.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/toji/gl-matrix&#34;&gt;gl-matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stackgl/ray-aabb-intersection&#34;&gt;ray-aabb-intersection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tmpvar/ray-aabb&#34;&gt;ray-aabb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ncollide.org/&#34;&gt;ncollide collision detection library for Rust&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/erincatto/Box2D&#34;&gt;Box2D physics engine&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Let&#39;s Write a 2D Platformer From Scratch Using HTML5 and JavaScript, Part 1: Game Loop</title>
		<link>https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-1/</link>
		<pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-1/</guid>
		<description>&lt;p&gt;&lt;strong&gt;This article is a part 3 of the &lt;em&gt;Let&amp;rsquo;s Write a 2D Platformer From Scratch Using HTML5 and JavaScript&lt;/em&gt; series.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: Game Loop&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-2/&#34;&gt;Part 2: Rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-02-01-lets-write-a-2d-platformer-from-scratch-part-3/&#34;&gt;Part 3: Collision Detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;As far as gamedev and HTML5 goes, there are &lt;a href=&#34;http://phaser.io/&#34;&gt;tons&lt;/a&gt; &lt;a href=&#34;http://melonjs.org/&#34;&gt;of&lt;/a&gt; &lt;a href=&#34;http://www.pixijs.com/&#34;&gt;great&lt;/a&gt; &lt;a href=&#34;http://craftyjs.com/&#34;&gt;game&lt;/a&gt; &lt;a href=&#34;https://github.com/playcanvas/engine&#34;&gt;engines&lt;/a&gt; &lt;a href=&#34;https://github.com/BabylonJS/Babylon.js&#34;&gt;already&lt;/a&gt; &lt;a href=&#34;https://github.com/WhitestormJS/whs.js&#34;&gt;out&lt;/a&gt; &lt;a href=&#34;https://github.com/qiciengine/qiciengine&#34;&gt;there&lt;/a&gt;. How do we pick the right one? Look at the number of stars on GitHub? The number of contributors? The number of published games? If you&amp;rsquo;ve looked at the previous articles on this blog, you probably know where this is heading (or read the title for that matter). We&amp;rsquo;re going to write our own game engine first!&lt;/p&gt;
&lt;p&gt;Writing a game engine is not an easy task however. We&amp;rsquo;ll start out with just a simple 2d platformer. There won&amp;rsquo;t be any asset pipeline, and all the rendering will be done with rectangles using a simple HTML5 Canvas API. But this does not prevent us from doing animations. We&amp;rsquo;ll also write a simple tweening library to make animations and other time-based effects easy to add. But let&amp;rsquo;s first begin with the game loop.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you&amp;rsquo;re curious to see where this series is going&lt;/strong&gt;, here&amp;rsquo;s a little sneak peek of what we&amp;rsquo;ll have at the end of &lt;a href=&#34;https://blog.jakuba.net/2018-02-01-lets-write-a-2d-platformer-from-scratch-part-3/&#34;&gt;part 3&lt;/a&gt;, in which we implement collisions and gravity. Don&amp;rsquo;t worry if it seems like a lot of code (click on the &lt;em&gt;JavaScript&lt;/em&gt; tag to see the source), we&amp;rsquo;ll build it up step by step in a way that everything should be clear along the way.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;em&gt;Click on the canvas and press &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;D&lt;/strong&gt; to move and &lt;strong&gt;W&lt;/strong&gt; to jump. You can also click on the &lt;strong&gt;JavaScript&lt;/strong&gt; tab to see the full code for this example.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Deploying a game like this is easy. If you click on &lt;em&gt;Edit in JSFiddle&lt;/em&gt; on the top right, you&amp;rsquo;ll see there is a HTML and JavaScript part. The HTML only has two lines, one of which defines the &lt;code&gt;canvas&lt;/code&gt;, and one defines a &lt;code&gt;div&lt;/code&gt; used for debugging. That&amp;rsquo;s all there is needed for the game to work. After that, you can just add a &lt;code&gt;script&lt;/code&gt; tag with all of the code (under the &lt;em&gt;JavaScript&lt;/em&gt; section) and you&amp;rsquo;re almost ready to go. While this blog series doesn&amp;rsquo;t rely heavily on libraries, later on we&amp;rsquo;ll add &lt;a href=&#34;https://lodash.com/&#34;&gt;Lodash&lt;/a&gt; to keep the code cleaner without writing much boilerplate. Adding Lodash is either as well, all it takes is a single line to serve it from a CDN. Overall, the page to deploy the game could look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5e81ac;font-style:italic&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;https://unpkg.com/lodash@4.17.4/lodash.js&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;200&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;tabindex&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;debug-text&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;./game.js&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But that&amp;rsquo;s it for the spoilers! We first need to build our game, so let&amp;rsquo;s get started.&lt;/p&gt;
&lt;h2 id=&#34;game-loop&#34;&gt;Game loop&lt;/h2&gt;
&lt;p&gt;The core of the game loop is calculating &lt;code&gt;dt&lt;/code&gt; (or &lt;code&gt;deltaTime&lt;/code&gt;), which is the time elapsed since the last frame. Every run of the game loop then updates all of the necessary logic. If we keep &lt;code&gt;dt&lt;/code&gt; in seconds, we can measure all velocities as &lt;em&gt;per second&lt;/em&gt; and calculate the per-frame update by simple multiplication. For example, if we intend to change &lt;code&gt;player.x&lt;/code&gt; by &lt;code&gt;40&lt;/code&gt; pixels per second, we can calculate the offset of a single frame by just doing &lt;code&gt;player.x += 40 * dt&lt;/code&gt;. The units simply add up: &lt;code&gt;px/s * s = px&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Modern browsers have a great way of implementing the game loop with the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&#34;&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt; function&lt;/a&gt;. This function takes a callback, which is then called right before the next repaint of the browser window. It only calls the callback once, which means if we want our game loop to run continually we need to call &lt;code&gt;requestAnimationFrame&lt;/code&gt; at the end of it. One neat feature is that the &lt;code&gt;requestAnimationFrame&lt;/code&gt; function calls our callback with a &lt;code&gt;timestamp&lt;/code&gt; argument, which &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp#The_time_origin&#34;&gt;basically indicates the number of milliseconds since the page has loaded&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Normally we would update the game logic here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Enqueue another run of the `gameLoop` function on the next browser repaint.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We also initially call the `gameLoop` function via `requestAnimationFrame`.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use the &lt;code&gt;timestamp&lt;/code&gt; to calculate our &lt;code&gt;dt&lt;/code&gt; value. The number of callbacks of &lt;code&gt;requestAnimationFrame&lt;/code&gt; is usually 60 times per second (60 FPS), which amounts to about &lt;code&gt;16&lt;/code&gt; milliseconds per frame. We could use &lt;code&gt;new Date().getTime()&lt;/code&gt; to access the current time, but there is a newer and better API specifically intended for performance measurements. The function is &lt;code&gt;performance.now()&lt;/code&gt; and also returns the number of milliseconds since the page has loaded. This is actually the same value that &lt;code&gt;window.requestAnimationFrame&lt;/code&gt; passes into the callback, so we can use it to calculate the initial time before the game loop begins.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We initialize the time of the last frame to the current time.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; performance&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;now&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// window.requestAnimationFrame calls our game loop with a timestamp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// of when the callback started being processed (in milliseconds).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We calculate the time since last frame in seconds
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// and update the timestamp of the last frame.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; dt &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; lastFrame&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;dt&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we didn&amp;rsquo;t initialize the &lt;code&gt;lastFrame&lt;/code&gt; variable to &lt;code&gt;performance.now()&lt;/code&gt;, we could run into an issue of our game jumping forward in time on the first frame. This could happen especially if the game doesn&amp;rsquo;t start immediately with the page loading. To test this, try opening up the Developer Console on any web page (this one for example) and enter &lt;code&gt;window.requestAnimationFrame(console.log)&lt;/code&gt; after a few seconds, and you&amp;rsquo;ll see a fairly large number.&lt;/p&gt;
&lt;p&gt;There is one problem with this approach to &lt;code&gt;lastFrame&lt;/code&gt; initialization. It does not work in Chrome! It works just fine in Firefox, but &lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=268213&#34;&gt;Chrome has an open issue since 2013&lt;/a&gt; which causes it to call the &lt;code&gt;gameLoop&lt;/code&gt; with a timestamp lower than the initial value returned by &lt;code&gt;performance.now()&lt;/code&gt;. In other words, the first frame would get a negative &lt;code&gt;dt&lt;/code&gt;. Fortunately, the workaround isn&amp;rsquo;t terribly difficult. We can implement simple frame limiting that caps our game loop at 60 FPS, which will also fix this issue by skipping a loop if the time that has passed is less than &lt;code&gt;1000 / 60&lt;/code&gt; milliseconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; performance&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;now&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Moving `requestAnimationFrame` won&amp;#39;t change how the loop behaves, since JavaScript
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// runs synchronously from top to bottom and we can&amp;#39;t get interrupted in the middle
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// of the game loop by another call caused by an earlier `requestAnimationFrame`.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Here we simply skip the whole iteration if enough time hasn&amp;#39;t passed yet.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; dt &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; lastFrame&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;dt&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One last thing we might want to do before moving on is the ability to stop the game loop. Luckily, &lt;code&gt;requestAnimationFrame&lt;/code&gt; returns an ID which can later be passed to &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame&#34;&gt;&lt;code&gt;window.cancelAnimationFrame()&lt;/code&gt;&lt;/a&gt; to cancel the scheduled frame request. All we have to do is store this value in each iteration of the &lt;code&gt;gameLoop&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; performance&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;now&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; requestAnimationFrameId&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; stopGameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;cancelAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;requestAnimationFrameId&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    requestAnimationFrameId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; dt &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; lastFrame&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;dt&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;requestAnimationFrameId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;calculating-fps-with-exponential-moving-average&#34;&gt;Calculating FPS with exponential moving average&lt;/h2&gt;
&lt;p&gt;Lastly, before moving on to implement tweening I&amp;rsquo;d like to show one more useful thing. Game often have the ability to display FPS as the game is running. The easiest way is to use an &lt;a href=&#34;https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average&#34;&gt;exponential moving average&lt;/a&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Exponential_smoothing&#34;&gt;another resource&lt;/a&gt;) which requires no additional memory, compared to the often mentioned method of using an array of older values and doing a running average on those. If we used an array to store say &lt;code&gt;10&lt;/code&gt; previous values, calculate the average off that on each frame, and push a new value on the next frame while popping the oldest value, we&amp;rsquo;d get what is called a moving average. The key factor there is that all values have the same weight. While in this implementation of the &lt;em&gt;exponential smoothing&lt;/em&gt; we put more weight on newer values and decay the older ones faster and faster (exponentially). That means if we have an exponential moving average calculated from &lt;code&gt;10&lt;/code&gt; values, the newer values will contribute to the result much more than the older ones.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s see how it works. First we have to pick an \(\alpha\) value which determines how quickly we decay older values. A common choice is \(\alpha = 0.1\). Then calculating the value with respect to the current frame \(FPS_{current}\) we use the value from the last calculation \(FPS_{last}\) and FPS based on the current value &lt;code&gt;dt&lt;/code&gt;, which is calculated as \(\frac{1}{dt}\). Putting all this together we get:&lt;/p&gt;
&lt;p&gt;$$FPS_{current} = \alpha \cdot \frac{1}{dt} + (1 - \alpha) \cdot FPS_{last}$$&lt;/p&gt;
&lt;p&gt;Or alternatively (after a few basic algebraic operations):&lt;/p&gt;
&lt;p&gt;$$FPS_{current} = FPS_{last} + (1 - \alpha) \cdot (\frac{1}{dt} - FPS_{last})$$&lt;/p&gt;
&lt;p&gt;While this might look at a lot of complicated math, it really isn&amp;rsquo;t. We&amp;rsquo;re just scaling down the old value based on \(\alpha\) as we&amp;rsquo;re adding new values. After a few iterations, the initial values was scaled down by \(\alpha\) multiple times.&lt;/p&gt;
&lt;p&gt;Implementing this in code is easy, we just pick one of the formulas and write it as is, updating a &lt;code&gt;FPS&lt;/code&gt; variable after each &lt;code&gt;dt&lt;/code&gt; is calculated. One last note&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; performance&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;now&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; requestAnimationFrameId&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; FPS &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// It doesn&amp;#39;t really matter what value we initialize FPS to.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; alpha &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0.1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; stopGameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;cancelAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;requestAnimationFrameId&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    requestAnimationFrameId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; dt &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; lastFrame&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lastFrame &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FPS &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; FPS &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; alpha&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt;dt &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; FPS&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;FPS&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;requestAnimationFrameId &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;requestAnimationFrame&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This concludes the first part in this series. We&amp;rsquo;ve written a simple game loop with an FPS counter. The next article with continue with basic rendering and input handling.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;This article is a part 3 of the &lt;em&gt;Let&amp;rsquo;s Write a 2D Platformer From Scratch Using HTML5 and JavaScript&lt;/em&gt; series.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: Game Loop&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-2/&#34;&gt;Part 2: Rendering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-02-01-lets-write-a-2d-platformer-from-scratch-part-3/&#34;&gt;Part 3: Collision Detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&#34;&gt;&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=268213&#34;&gt;Google Chrome issue regarding &lt;code&gt;performance.now()&lt;/code&gt; and &lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame&#34;&gt;&lt;code&gt;window.cancelAnimationFrame()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Exponential_smoothing&#34;&gt;Exponential smoothing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average&#34;&gt;Exponential moving average&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Let&#39;s Write a 2D Platformer From Scratch Using HTML5 and JavaScript, Part 2: Rendering</title>
		<link>https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-2/</link>
		<pubDate>Sun, 28 Jan 2018 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-2/</guid>
		<description>&lt;p&gt;&lt;strong&gt;This article is a part 3 of the &lt;em&gt;Let&amp;rsquo;s Write a 2D Platformer From Scratch Using HTML5 and JavaScript&lt;/em&gt; series.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-1/&#34;&gt;Part 1: Game Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: Rendering&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-02-01-lets-write-a-2d-platformer-from-scratch-part-3/&#34;&gt;Part 3: Collision Detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now that we have the game loop, we can build a small wrapper around the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API&#34;&gt;HTML5 Canvas API&lt;/a&gt;. We&amp;rsquo;ll start with a simple tile based map where each tile is rendered as a colored rectangle.&lt;/p&gt;
&lt;p&gt;The map will be specified as an array of numbers where &lt;code&gt;0&lt;/code&gt; means empty and &lt;code&gt;1&lt;/code&gt; means wall. JavaScript doesn&amp;rsquo;t have direct support for multi-dimensional arrays, which leaves us with two options. We can either store all of the values in a 1D array and calculate the index based on 2D coordinates, or we can use an &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;Array&lt;/code&gt;s. The second approach is simpler in terms of indexing, but works conceptually very differently. For example, there is nothing enforcing each row to have the same length as the other rows.&lt;/p&gt;
&lt;p&gt;Using 1D arrays to store a 2D matrix is actually a very common pattern in lower level programming, which is why we&amp;rsquo;ll pick it here mainly for the educational purpose. The core idea is that if we have want to access an element at &lt;code&gt;i&lt;/code&gt;-th row and &lt;code&gt;j&lt;/code&gt;-th column, we&amp;rsquo;ll have to skip &lt;code&gt;i * ROW_LENGTH&lt;/code&gt; elements to get to a subset of the array where the &lt;code&gt;i&lt;/code&gt;-th row begins. After that, we just add the offset &lt;code&gt;j&lt;/code&gt; within the &lt;code&gt;i&lt;/code&gt;-th row to access the element. Since we&amp;rsquo;re specifying map dimensions as &lt;code&gt;MAP_W&lt;/code&gt; and &lt;code&gt;MAP_H&lt;/code&gt; (for map width and height) we simply do &lt;code&gt;i * MAP_W + j&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#6c6f74&#34;&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; canvas &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;document&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;getElementById&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;canvas&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; ctx &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; canvas&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;getContext&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;2d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; BOX_SIZE &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; MAP_W &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; MAP_H &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; drawBox&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;color&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; w&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; h&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;fillStyle &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; color&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ctx&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;fillRect&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; w &lt;span style=&#34;color:#81a1c1&#34;&gt;||&lt;/span&gt; BOX_SIZE&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; h &lt;span style=&#34;color:#81a1c1&#34;&gt;||&lt;/span&gt; BOX_SIZE&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; map &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; drawMap&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; MAP_H&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; j &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; j &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; MAP_W&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; j&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Calculating the color for a tile on corrdinates [j, i].
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; color &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; map&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; MAP_W &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; j&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;#5d995d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;lightblue&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// And draw it at the appropriate offset.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;            drawBox&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;color&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; BOX_SIZE &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; j&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; BOX_SIZE &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Draw the player.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;drawBox&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;#612b2e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; BOX_SIZE&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Later on when we put things together, each iteration of the &lt;code&gt;gameLoop&lt;/code&gt; will call &lt;code&gt;drawMap&lt;/code&gt; to render the background.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; gameLoop&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;timestamp&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// ... rest of the game loop
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    drawMap&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Draw the player.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    drawBox&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;#612b2e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; BOX_SIZE&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now all that is left to do is implement player movement.&lt;/p&gt;
&lt;h2 id=&#34;input-handling-and-simple-movement&#34;&gt;Input handling and simple movement&lt;/h2&gt;
&lt;p&gt;There is also no way to check if a key is being pressed in JavaScript, so we&amp;rsquo;ll create a small global handler that stores the keypress values in a global map. Later on we can add the ability to detect key press just in the frame in which it occurred.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; keys &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;onkeyup &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; keys&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;e&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;keyCode&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;window&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;onkeydown &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; keys&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;e&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;keyCode&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With these, we can write an &lt;code&gt;updatePlayer&lt;/code&gt; function which takes a &lt;code&gt;dt&lt;/code&gt; and moves the player based on a key being pressed. We&amp;rsquo;ll also need a &lt;code&gt;drawPlayer&lt;/code&gt; function to draw the player at their position.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; player &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; updatePlayer&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;dt&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Key codes for player hotkeys.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; A &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; W &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;87&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; D &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;68&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// The player moves at 80px per second.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; SPEED &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;keys&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;A&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; player&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;-=&lt;/span&gt; SPEED &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; dt&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;keys&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;D&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; player&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; SPEED &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; dt&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; drawPlayer&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    drawBox&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;#612b2e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; player&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; player&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;basic-collision-handling&#34;&gt;Basic collision handling&lt;/h2&gt;
&lt;p&gt;Collision handling is a complicated subject, especially if there can be arbitrary geometry present in the physics world. Luckily for us, we only have boxes of constant dimensions, and all of the walls are aligned to the tile map. The player is also the only object moving in the world, which means we only calculate collisions against the environment. If we had a multi-agent environment, we&amp;rsquo;d need a more general concept of colliders and raycasting. But for now, we can implement the raycast by simply checking the adjacent tiles on each side.&lt;/p&gt;
&lt;p&gt;Since the player can move just a single pixel, we need to actually calculate its position within a tile. We can do this by using the modulo operation &lt;code&gt;%&lt;/code&gt; which returns the remainder after integer division. &lt;code&gt;player.x % BOX_SIZE&lt;/code&gt; returns a value from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;BOX_SIZE&lt;/code&gt;, which is exactly the &lt;code&gt;x&lt;/code&gt; offset of the top left corner within its containing tile. We&amp;rsquo;ll store the tile coordinates in variables &lt;code&gt;tileX&lt;/code&gt; and &lt;code&gt;tileY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll also check if the player stands next to a wall on both sides. The right side is a tiny bit trickier, because we&amp;rsquo;re measuring the position from the top-left corner, which means we actually have to look two tiles to the right. We&amp;rsquo;ll improve this later on when we write a more general collision handling logic.&lt;/p&gt;
&lt;p&gt;Lastly, we introduce a new concept, the player&amp;rsquo;s velocity. This can be thought of as the number of pixels the player will move within the frame (per-frame velocity). The velocity is initially based on the player&amp;rsquo;s inputs. We then check if the player is moving in a direction of a wall, and check if the velocity is greater than the distance to the wall. If it is, the player would skip into the wall on the frame update, which is why we use &lt;code&gt;Math.min&lt;/code&gt;/&lt;code&gt;Math.max&lt;/code&gt; to make sure the player moves at most the distance he needs to reach the wall.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; updatePlayer&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;dt&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Key codes for player hotkeys.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; A &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; W &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;87&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; D &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;68&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// The player moves at 80px per second.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; SPEED &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We calculate the tile where the player is.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; tileX &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;floor&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;player&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; BOX_SIZE&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; tileY &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;floor&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;player&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;y &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; BOX_SIZE&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Player collides on the left either with the leftmost edge of the screen,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// or with a tile which is adjacent to the left.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; possibleCollisionLeft &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tileX &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;||&lt;/span&gt; map&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;tileY &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; MAP_W &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tileX &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Same for the right side.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; possibleCollisionRight &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tileX &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;MAP_W &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;||&lt;/span&gt; map&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;tileY &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; MAP_W &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tileX &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Vertical velocity of the player.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; vx &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;keys&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;A&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; vx &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;SPEED &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; dt&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;keys&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;D&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; vx &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; SPEED &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; dt&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vx &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; possibleCollisionLeft&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// If the player is near a left wall, either move him closer to the wall
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// based on his velocity, or based on his offset within the tile if the velocity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// would cause him to run through the wall.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;        vx &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;max&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vx&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;player&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; BOX_SIZE&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vx &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; possibleCollisionRight&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Same as for moving left, but here we have to account for the fact
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// that we use the left corner as the player&amp;#39;s position, hence the distance
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// to the wall is computed differently.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;        vx &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;min&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vx&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; BOX_SIZE &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;player&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; BOX_SIZE&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Lastly, we have to check if the player is already standing next to a wall,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// and nullify the vertical velocity in that case.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vx &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; map&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;tileY &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; MAP_W &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tileX &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)])&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vx &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    player&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;+=&lt;/span&gt; vx&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here&amp;rsquo;s how it looks inside the game: (move player with &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; keys)&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve implemented basic input and collision handling with player movement. What we have so far serves more as a demonstration than what we&amp;rsquo;ll end up with in the next article, as the collision handling is not flexible enough to handle more complicated player movement ansuch as gravity.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;This article is a part 3 of the &lt;em&gt;Let&amp;rsquo;s Write a 2D Platformer From Scratch Using HTML5 and JavaScript&lt;/em&gt; series.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-01-28-lets-write-a-2d-platformer-from-scratch-part-1/&#34;&gt;Part 1: Game Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Part 2: Rendering&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jakuba.net/2018-02-01-lets-write-a-2d-platformer-from-scratch-part-3/&#34;&gt;Part 3: Collision Detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API&#34;&gt;Canvas API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1828613/check-if-a-key-is-down&#34;&gt;Checking if a key is down JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Binary Search in JavaScript</title>
		<link>https://blog.jakuba.net/2018-01-25-binary-search-in-javascript/</link>
		<pubDate>Thu, 25 Jan 2018 10:00:00 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/2018-01-25-binary-search-in-javascript/</guid>
		<description>&lt;p&gt;Binary search is an extremely useful and popular algorithm used for quickly searching in a sorted array. Binary search is even used by people in real life (outside of programming) when they play the &lt;em&gt;guess the number&lt;/em&gt; game. One person thinks a number between 1 and 100, and the other person tries to guess. The response is only &lt;em&gt;less&lt;/em&gt;, &lt;em&gt;equal&lt;/em&gt; or &lt;em&gt;greater&lt;/em&gt;. If you guess 50 and get a &lt;em&gt;less&lt;/em&gt; response, you just narrowed down the search to half the interval, 1 to 50. You can keep going and guess 25. No matter if what answer you get, you either win, or narrow down the interval again to a half. This is how binary search works. We test our searched value against the element in the middle, if it&amp;rsquo;s less than the middle element, we repeat the process on the left part, if it&amp;rsquo;s greater than the middle element, we repeat the process on the right part. We repeat this until we get a value which is equal, at which point the search is complete.&lt;/p&gt;
&lt;p&gt;The initial requirement is that the array must be sorted. Why? Because a sorted array has a simple property. If we take any two indexes &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;, if &lt;code&gt;i &amp;lt;= j&lt;/code&gt;, then &lt;code&gt;array[i] &amp;lt;= array[j]&lt;/code&gt;. This means if we know that the searched number is lower than the number at the middle index, its index must be also lower.&lt;/p&gt;
&lt;p&gt;To implement to algorithm we will use two variables to store the bounds of our search area, &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt;. We begin by setting &lt;code&gt;low = 0&lt;/code&gt; and &lt;code&gt;high = array.length&lt;/code&gt;. We calculate the middle as the average of &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt;, always rounding down using the &lt;code&gt;Math.floor&lt;/code&gt; function. Note that we could also use a bitwise shift to the right with the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator to achieve the same, but we&amp;rsquo;ll keep the division explicit to make things easier to read. We then compare the number at the middle index to our search value. Here we can run into three different cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;array[mid] &amp;lt; value&lt;/code&gt;, then we need to move to the right, updating our lower bound &lt;code&gt;low = mid + 1&lt;/code&gt;. We add the one because the value can&amp;rsquo;t possibly be at &lt;code&gt;mid&lt;/code&gt; (since it&amp;rsquo;s greater than &lt;code&gt;array[mid]&lt;/code&gt;), so we can skip that index entirely.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;array[mid] &amp;gt; value&lt;/code&gt;, then we need to move to the left, updating our upper bound &lt;code&gt;high = mid&lt;/code&gt;. Since we initialize our &lt;code&gt;high&lt;/code&gt; to &lt;code&gt;array.length&lt;/code&gt;, the search range does not include the &lt;code&gt;high&lt;/code&gt; index (it&amp;rsquo;s a left-closed interval), which means we don&amp;rsquo;t need to subtract &lt;code&gt;1&lt;/code&gt; from the upper bound.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;array[mid] == value&lt;/code&gt;, we simply return the &lt;code&gt;mid&lt;/code&gt; index as a result.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We keep iterating until &lt;code&gt;low == high&lt;/code&gt;, at which point the search is narrowed down to a single element which must be the result if the element was initially present.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; binarySearch&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; low &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; high &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; array&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;length&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;low &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; mid &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;floor&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;low &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;mid&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            low &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;mid&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            high &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; mid&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; mid&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lastly, it&amp;rsquo;s important to note that &lt;strong&gt;if we search for an element which is not present in our array, we still get an index as a return value&lt;/strong&gt;. There are two ways to think about this. Either we think of the &lt;code&gt;binarySearch&lt;/code&gt; function as searching for an index of an existing element inside the array, at which point we might want to return &lt;code&gt;-1&lt;/code&gt; in case the element isn&amp;rsquo;t found. Or we use it to calculate an index at which we should insert a new element into the array so that it remains sorted.&lt;/p&gt;
&lt;p&gt;If we wanted the first variant, we could modify the binary search to check the result value before returning it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; binarySearch&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; low &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; high &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; array&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;length&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;low &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; mid &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;floor&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;low &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;mid&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            low &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;mid&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            high &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; mid&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; mid&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;high&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, we can use the first implementation to implement an insert into a sorted array which uses binary search to find the right place to insert the value. This is rather trivial, we simply find the proper index with the first version of our &lt;code&gt;binarySearch&lt;/code&gt;, and then use &lt;code&gt;Array.splice&lt;/code&gt; to insert the new value.&lt;/p&gt;
&lt;p&gt;The original code is provided here again so that the example as a whole can be copy-pasted into a developer console (or any other JavaScript environment) for experimentation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; binarySearch&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; low &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; high &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; array&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;length&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;low &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; mid &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;floor&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;low &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;mid&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            low &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; mid &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;mid&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            high &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; mid&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; mid&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; high&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; binaryInsert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; index &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; binarySearch&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;array&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    array&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;splice&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; arr &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binaryInsert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// [1, 2, 2, 3]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binaryInsert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// [1, 2, 2, 3, 5]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;binaryInsert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// [0, 1, 2, 2, 3, 5]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;time-complexity&#34;&gt;Time complexity&lt;/h2&gt;
&lt;p&gt;The main benefit of binary search is its time complexity, which is only \(O(\log n\), compared to regular linear search (going through the whole array searching for the right index), which is \(O(n)\). Searching &lt;code&gt;1000000&lt;/code&gt; elements using binary search would only take roughly &lt;code&gt;20&lt;/code&gt; steps while it could take up to &lt;code&gt;1000000&lt;/code&gt; steps.&lt;/p&gt;
&lt;p&gt;But why is it \(O(\log n)\)? Each iteration of binary search reduces the search space by half, which means we can translate the question &lt;em&gt;how many steps does it take?&lt;/em&gt; to &lt;em&gt;how many times can we take a half of a number until we get to 1?&lt;/em&gt; If the array length was a power of two, meaning we could write it as \(2^k\), we could divide it by &lt;code&gt;2&lt;/code&gt; exactly &lt;code&gt;k&lt;/code&gt; times. If we have an arbitrary number &lt;code&gt;n&lt;/code&gt; and we want to write it as \(2^k\), we can calcualte &lt;code&gt;k&lt;/code&gt; with a logarithm, specifically \(\log_2 n = k\). But by the definition of the big-O notation, we don&amp;rsquo;t need to worry about constants, and since \(\log_2 n = \frac{\log n}{\log 2}\), we can simply use \(O(\log n)\).&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Binary Heap (Priority Queue) in JavaScript</title>
		<link>https://blog.jakuba.net/2018-01-24-binary-heap-priority-queue-in-javascript/</link>
		<pubDate>Wed, 24 Jan 2018 10:00:00 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/2018-01-24-binary-heap-priority-queue-in-javascript/</guid>
		<description>&lt;p&gt;A binary heap is a simple data structure most often used for implementing priority queues. In a more general sense, a &lt;em&gt;heap&lt;/em&gt; is a tree-based data structure which satisfies the &lt;em&gt;heap property&lt;/em&gt;, and a &lt;em&gt;binary heap&lt;/em&gt; is a &lt;em&gt;heap&lt;/em&gt; which uses a &lt;em&gt;binary tree&lt;/em&gt; to store its data. Any arbitrary binary tree which satisfies the following two properties can be considered a binary heap:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;heap property&lt;/em&gt;: If P is a parent node of N, then &lt;code&gt;P.key &amp;lt;= N.key&lt;/code&gt;, meaning the parent always has a lower key than its children. This gives us a &lt;em&gt;MIN&lt;/em&gt; heap, where the root node has the minimum key of the whole heap. If we want a &lt;em&gt;MAX&lt;/em&gt; heap, we simply flip the property to &lt;code&gt;P.key &amp;gt;= N.key&lt;/code&gt;. Everything that is true for a &lt;em&gt;MIN&lt;/em&gt; heap is true for a &lt;em&gt;MAX&lt;/em&gt; heap, so from now on, we&amp;rsquo;ll consider a &lt;em&gt;MIN&lt;/em&gt; heap only.&lt;/li&gt;
&lt;li&gt;All levels of the tree are completely filled, except for the last one, which is filled from the left.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;rsquo;s an example of a valid heap. Note that the last level is missing one element on the right. It&amp;rsquo;s also important to distinguish that a binary heap is not a search tree. While a binary search tree satisfies the property that the left child has a lower value than the parent and right child has a higher value than the parent, a binary heap has no such property. This also means that a binary heap can not be searched.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Here is another example, but this time of a tree which doesn&amp;rsquo;t follow the &lt;em&gt;heap property&lt;/em&gt;, and as such is not a binary heap.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And here&amp;rsquo;s an example of a tree which doesn&amp;rsquo;t satisfy the same property, as the last layer is not filled from the left.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The first property (the &lt;em&gt;heap property&lt;/em&gt;) gives us the ability to access the MIN element in constant time, because it must be in the root of the tree. If the MIN was somewhere down the tree, its parent would need to have a larger key value, which would break the &lt;em&gt;heap property&lt;/em&gt;. If it had a smaller value, the MIN element wouldn&amp;rsquo;t be a true minimum, which is a contradiction with our choice of MIN as the minimum element of the whole heap.&lt;/p&gt;
&lt;p&gt;The second property isn&amp;rsquo;t so obvious, but it allows us to store the tree not as a network (graph) of nodes with edges, but as an array of numbers, where the edges can be calculated implicitly. The second property allows us to think about the binary tree as if it was a complete binary tree. There can&amp;rsquo;t be any holes (missing elements) in the middle of the tree, only at the very right edge in the last layer. To figure out how to store the tree in an array we can first ignore the missing elements in the last layer and think about the tree as if it was complete. Here&amp;rsquo;s how such tree might look:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;If we write it out layer by layer in an array, we simply get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since JavaScript arrays are &lt;code&gt;0&lt;/code&gt; indexed, we can do a little trick and add a blank element to the beginning of the array, which will make every number be equal to its index. I&amp;rsquo;m using &lt;code&gt;null&lt;/code&gt; to make it clear that the first element is not really part of the data structure and only acts to fill in space. In reality, we could use something like &lt;code&gt;Uint32Array&lt;/code&gt; and leave the first index set to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you look closely at the binary tree, &lt;strong&gt;you can see that the left child of each node has double the value of its parent, and the right child has double the value but plus one&lt;/strong&gt;. Looking at &lt;code&gt;7&lt;/code&gt; for example, the left child is &lt;code&gt;2*7 = 14&lt;/code&gt; and the right child is &lt;code&gt;2*7 + 1 = 15&lt;/code&gt;. This property is only true when we have a complete binary tree, which is exactly why the binary heap requires all but the last layers to be full.&lt;/p&gt;
&lt;p&gt;Now looking back at the array, we can also see something interesting. Because we know that the root is at index &lt;code&gt;1&lt;/code&gt;, its left child must be at index &lt;code&gt;2*1 = 2&lt;/code&gt; and right child at index &lt;code&gt;2*1 + 1 = 3&lt;/code&gt;. This will also be true for any other element, seeing that the array copies the structure of the tree. If the left child has double the value in the tree, and the array has values mapped to their index, then the left child in the array (having double the value) will be at double the index.&lt;/p&gt;
&lt;p&gt;We can also get rid of the initial blank element in the array by simply shifting all results off by 1 to the right, giving us &lt;code&gt;2*i + 1&lt;/code&gt; and &lt;code&gt;2*i + 2&lt;/code&gt;. Let&amp;rsquo;s try this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;12&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The left child of &lt;code&gt;1&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, which we can get to by calculating &lt;code&gt;2*i + 1&lt;/code&gt;, where &lt;code&gt;i = 0&lt;/code&gt; (because &lt;code&gt;1&lt;/code&gt; is at &lt;code&gt;0&lt;/code&gt;th index). We would get &lt;code&gt;2*0 + 1 = 1&lt;/code&gt;, which is the index of its left child, the number &lt;code&gt;2&lt;/code&gt;. Going further down, getting the right child of &lt;code&gt;2&lt;/code&gt; (which is a &lt;code&gt;5&lt;/code&gt;) we take the index of &lt;code&gt;2&lt;/code&gt; (which is &lt;code&gt;1&lt;/code&gt;) and plug it in the &lt;code&gt;2*i + 2&lt;/code&gt; formula, giving us &lt;code&gt;2*1 + 2 = 4&lt;/code&gt;, which is the index of the value &lt;code&gt;5&lt;/code&gt;. Let&amp;rsquo;s try getting the right child of &lt;code&gt;5&lt;/code&gt;. We take the index, which is &lt;code&gt;4&lt;/code&gt; and do &lt;code&gt;2*4 + 2 = 10&lt;/code&gt;, giving us the index of the right child, the number &lt;code&gt;11&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It is important to note that &lt;strong&gt;all the calculations are done on indexes&lt;/strong&gt;, not the actual values. We only used numbers from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;15&lt;/code&gt; to make it easy to see the pattern for calculating left/right children. We could just as well do the same on a completely different binary heap, and it would work, because there isn&amp;rsquo;t any point in the computation where the value is being used, only the index.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We can now also see, that this way of calculating children will work even if we leave out a few nodes in the last layer, considering it is still filled from the left. Going the other way, it&amp;rsquo;s not hard to see that if we left out one node in the middle of the tree, suddenly all of this would stop working and we would no longer have a simple formula for calculating children.&lt;/p&gt;
&lt;p&gt;Lastly, we need a way to navigate back up the heap, going from children to the parent. This is easy to figure out, because if &lt;code&gt;left = 2*i + 1&lt;/code&gt;, then &lt;code&gt;i = (left - 1) / 2&lt;/code&gt; when going from the left child, and if &lt;code&gt;right = 2*i + 2&lt;/code&gt;, then &lt;code&gt;i = (right - 2) / 2&lt;/code&gt;. This gives us&lt;/p&gt;
&lt;p&gt;$$\text{parent} = \frac{\text{left} - 1}{2} \text{or} \frac{\text{right} - 2}{2}$$&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s do a little renaming first, since we&amp;rsquo;re going from an index of the child, let&amp;rsquo;s call that &lt;code&gt;i&lt;/code&gt;, giving us a more general equation&lt;/p&gt;
&lt;p&gt;$$\text{parent} = \frac{i - 1}{2} \text{or} \frac{i - 2}{2}$$&lt;/p&gt;
&lt;p&gt;Now considering the expression \(\lfloor \frac{i - 1}{2} \rfloor\), equivalent to &lt;code&gt;Math.floor((i - 1) / 2)&lt;/code&gt;. If we had our original &lt;code&gt;2*i&lt;/code&gt; and &lt;code&gt;2*i + 1&lt;/code&gt;, then &lt;code&gt;Math.floor(i / 2)&lt;/code&gt; would definitely work, because we&amp;rsquo;re basically getting rid of the &lt;code&gt;+1&lt;/code&gt; in the second case. In the more complicated &lt;code&gt;2*i + 1&lt;/code&gt; and &lt;code&gt;2*i + 2&lt;/code&gt; we can think of the &lt;code&gt;i - 1&lt;/code&gt; as moving to the simpler case, and then using the same &lt;code&gt;floor&lt;/code&gt; function.&lt;/p&gt;
&lt;h2 id=&#34;navigating-a-binary-heap-in-an-array&#34;&gt;Navigating a binary heap in an Array&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s create an &lt;code&gt;Array&lt;/code&gt; for the following heap:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We simply write down the numbers going layer by layer, left to right, getting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// indexes: 0  1  2  3  4  5 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; heap &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; left&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; right&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; parent&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;floor&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;left&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;right&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We can even use .indexOf() to make this a bit clearer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;left&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;indexOf&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;right&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;indexOf&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;left&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;indexOf&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this, it should be crystal clear that we can think in terms of a tree, but do the actual operations on an &lt;code&gt;Array&lt;/code&gt; representing the same thing.&lt;/p&gt;
&lt;h2 id=&#34;heap-operations&#34;&gt;Heap operations&lt;/h2&gt;
&lt;p&gt;Now that we understand how to store the heap, we can take a look at the operations the heap supports, their time complexity, and how to implement them. First, here&amp;rsquo;s an overview of the supported operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Min()&lt;/code&gt;: Returns the MIN element, that is the one with the lowest key, \(O(1)\).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Insert(key, value)&lt;/code&gt;: Inserts a value into the heap under a given key, \(O(\log n)\).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExtractMin()&lt;/code&gt;: Returns the MIN element and removes it from the heap, \(O(\log n)\).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Earlier in this article, we implemented the heap as an &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;Number&lt;/code&gt;s. But in real life, we will almost always want to store actual objects in the heap, and order them by a given key. This can be done in multiple ways. We can either store an &lt;code&gt;Array&lt;/code&gt; of objects that look something like &lt;code&gt;{ key: X, value: the_actual_object }&lt;/code&gt;, or we can use a mapping function that the heap uses to map each element to its key. For example &lt;code&gt;function(user) { return user.id; }&lt;/code&gt; could be used to map users to their respective &lt;code&gt;user.id&lt;/code&gt;. I&amp;rsquo;m going to assume the first example, since it makes the implementation a bit shorter, but both ways should be equally easy to implement.&lt;/p&gt;
&lt;h3 id=&#34;min&#34;&gt;Min()&lt;/h3&gt;
&lt;p&gt;Returning the MIN element is an easy operation thanks to the heap property. We already know it is present in the root, which means we simply return the element at index &lt;code&gt;0&lt;/code&gt; in our array. The time complexity of this operations is \(O(1)\).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; min&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Note that we&amp;#39;re expecting the `{ key: X, value: the_actual_object }` format,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// which is why we&amp;#39;re returning `.value` here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;].&lt;/span&gt;value&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;insertkey-value&#34;&gt;Insert(key, value)&lt;/h3&gt;
&lt;p&gt;Adding an element is rather simple. First we add it to the end of our &lt;code&gt;Array&lt;/code&gt;, which is semantically equivalent to adding a new leaf to the last layer of the tree (as far left as possible). This however breaks the &lt;em&gt;heap property&lt;/em&gt;, saying that the key of each node must be lower than the keys of its children. We can easily fix this by &lt;em&gt;bubbling&lt;/em&gt; the newly added node up, checking if its key is lower than its parent, and swapping them if it is.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; key&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; node &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; key&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; key&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; value &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;push&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;node&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; index &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;index &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; parentIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; parent&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// here comes the `Math.floor((i - 1) / 2)`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;].&lt;/span&gt;key &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;parentIndex&lt;span style=&#34;color:#eceff4&#34;&gt;].&lt;/span&gt;key&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; tmp &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;parentIndex&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;parentIndex&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tmp&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            index &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; parentIndex&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We can stop up-propagating since the rest of the tree already
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// obeys the heap property and the upper nodes would have even lower keys
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// than our direct ancestor.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; heap &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 0: {key: 1, value: &amp;#34;a&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 1: {key: 3, value: &amp;#34;c&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 2: {key: 2, value: &amp;#34;b&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that &lt;code&gt;1&lt;/code&gt; is in the root as expected, &lt;code&gt;3&lt;/code&gt; is as the left child, and &lt;code&gt;2&lt;/code&gt; is as the right child. This is because after the first two inserts, right when we added &lt;code&gt;1&lt;/code&gt; to the leaf the heap looked like this (the nodes are labeled as &lt;code&gt;key[value]&lt;/code&gt; for simplicity):&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;But the &lt;code&gt;insert&lt;/code&gt; call runs the up-propagation, it swaps &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;, creating the final shape of the tree.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Adding &lt;code&gt;0&lt;/code&gt; to the heap would cause yet another round of up-propagation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; heap &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;~&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 0: {key: 0, value: &amp;#34;~&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 1: {key: 1, value: &amp;#34;a&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 2: {key: 2, value: &amp;#34;b&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 3: {key: 3, value: &amp;#34;c&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Initially before the up-propagation the heap would look like this, breaking the heap property:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;but after up-propagating the &lt;code&gt;0[~]&lt;/code&gt; element up we get a proper MIN-heap:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Because of the second property of a binary heap, we can think of a complete binary tree of the same depth as an upper bound on the shape of the heap. From this, we can easily derive that the depth of a complete binary tree is \(\log n\). The &lt;code&gt;Insert&lt;/code&gt; operation only traverses the tree once, going from a leaf to the root, which is \(\log n\) layers. The whole &lt;code&gt;Insert&lt;/code&gt; operation is thus also \(O(\log n)\).&lt;/p&gt;
&lt;h3 id=&#34;extractmin&#34;&gt;ExtractMin()&lt;/h3&gt;
&lt;p&gt;Removing the MIN element is easier than it might seem at first. We swap the root node with the last element on the last level, remove the last element from the &lt;code&gt;Array&lt;/code&gt; altogether (this removes the MIN element from the heap), and then propagate the new root down to fix the &lt;em&gt;heap property&lt;/em&gt;. We have to be a bit careful here though. While propagating up only required to compare with the parent, when propagating down we have to check against both the children, and swap with the smaller one. Why? A simple example will explain:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Let&amp;rsquo;s say &lt;code&gt;a &amp;gt; b&lt;/code&gt; and &lt;code&gt;a &amp;gt; c&lt;/code&gt;, which means &lt;code&gt;a&lt;/code&gt; needs to be propagated down. If we picked one of the children at random (or always the left one for example), we could break the heap property. Here&amp;rsquo;s how the tree would look after swapping &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We might have fixed the relationship between &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, but if we also had &lt;code&gt;b &amp;gt; c&lt;/code&gt; originally, we would still have a tree that does not satisfy the heap property. We can fix this easily by looking at both the children, comparing them against each other, and swapping with the smaller one. That way, we would&amp;rsquo;ve swapped &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;c&lt;/code&gt;, making &lt;code&gt;c&lt;/code&gt; the new MIN root. This would be fine, because &lt;code&gt;c &amp;lt; b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To clarify this better, let&amp;rsquo;s look at an example of doing the whole &lt;code&gt;ExtractMin()&lt;/code&gt; operation on a small heap.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;First &lt;code&gt;ExtractMin()&lt;/code&gt; swaps the root with the last element in the last layer.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Then it removes the &lt;code&gt;1&lt;/code&gt; from the heap altogether, but still having the &lt;em&gt;heap property&lt;/em&gt; broken.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Swapping down with the smaller of the two children at the second layer. Note that this is legal, because &lt;code&gt;2 &amp;lt; 3&lt;/code&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And continuing further down, until there are no more swaps needed, or until it reachest the last layer.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Knowing how the operation works, we can implement it in a fairly straightforward way. This example also includes all of the necessary above code to make it easier to test out in the console and understand the heap as a whole.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; left&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; right&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; parent&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;floor&lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; min&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Note that we&amp;#39;re expecting the `{ key: X, value: the_actual_object }` format,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// which is why we&amp;#39;re returning `.value` here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;].&lt;/span&gt;value&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; key&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; node &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; key&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; key&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; value &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;push&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;node&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; index &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;index &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; parentIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; parent&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// here comes the `Math.floor((i - 1) / 2)`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;].&lt;/span&gt;key &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;parentIndex&lt;span style=&#34;color:#eceff4&#34;&gt;].&lt;/span&gt;key&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; tmp &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;parentIndex&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;parentIndex&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tmp&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            index &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; parentIndex&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We can stop up-propagating since the rest of the tree already
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// obeys the heap property and the upper nodes would have even lower keys
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// than our direct ancestor.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; extractMin&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; result &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; min&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// If there is only one element in the heap, that being the minimum, we can just clear it.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;splice&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We copy the last element to the root and remove the last element.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// There is no need to do an actual swap as we showed in the examples above,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// since the last element is going to get removed immediately afterwards.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;splice&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bubbleDown&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; bubbleDown&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; index&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; leftIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; left&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; rightIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; right&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; smallest &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; index&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;leftIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;leftIndex&lt;span style=&#34;color:#eceff4&#34;&gt;].&lt;/span&gt;key &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;smallest&lt;span style=&#34;color:#eceff4&#34;&gt;].&lt;/span&gt;key&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        smallest &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; leftIndex&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;rightIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;rightIndex&lt;span style=&#34;color:#eceff4&#34;&gt;].&lt;/span&gt;key &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;smallest&lt;span style=&#34;color:#eceff4&#34;&gt;].&lt;/span&gt;key&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        smallest &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; rightIndex&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;index &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; smallest&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; tmp &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;index&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;smallest&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        heap&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;smallest&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tmp&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        bubbleDown&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; smallest&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; heap &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;~&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;extractMin&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// &amp;#34;~&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 0: {key: 1, value: &amp;#34;a&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 1: {key: 3, value: &amp;#34;c&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 2: {key: 2, value: &amp;#34;b&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;extractMin&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// &amp;#34;a&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 0: {key: 2, value: &amp;#34;b&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 1: {key: 3, value: &amp;#34;c&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;extractMin&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// &amp;#34;b&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 0: {key: 3, value: &amp;#34;c&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;extractMin&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// &amp;#34;c&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;heap&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// []
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Same as with the &lt;code&gt;Insert&lt;/code&gt; case, &lt;code&gt;ExtractMin&lt;/code&gt; also traverses the tree at most once, going from the root to a leaf, which means the time complexity is also \(O(\log n)\).&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In the beginning we mentioned that a binary heap is also often used as a priority queue. A good example here might be a task scheduler which always takes the task with the highest priority and runs it. Adding new tasks to the priority queue and extracting the highest priority one would both have \(O(\log n)\) time complexity, which makes it very fast even as the number of tasks grows larger. Another thing to note, the &lt;code&gt;Array&lt;/code&gt; based implementation has all the benefits of a tree data structure without having a bunch of objects floating around on the memory heap.&lt;/p&gt;
&lt;p&gt;Lastly, the binary heap is not the only heap there is, even though it&amp;rsquo;s probably the most common one. Two other examples are &lt;a href=&#34;https://nlogn.xyz/2018/01/23/fibonacci-and-binomial-heap.html&#34;&gt;Binomial and Fibonacci heaps&lt;/a&gt;, which are very different from the binary heap, and provide some very interesting time complexities on their operations. For example, inserting an element into a Fibonacci heap is \(O(1)\). There are also two operations which we didn&amp;rsquo;t cover in this article, &lt;code&gt;Decrease&lt;/code&gt; which changes the key of an element in the heap, and &lt;code&gt;Merge&lt;/code&gt; which takes two heaps and merges them together into one. The reason we didn&amp;rsquo;t cover them is that &lt;code&gt;Decrease&lt;/code&gt; requires some additional handling to be useful, and &lt;code&gt;Merge&lt;/code&gt; in and of itself isn&amp;rsquo;t so common. But those two are also an area where a Fibonacci heap provides constant time complexity, while the binomial heap is only \(O(\log n)\) for &lt;code&gt;Decrease&lt;/code&gt; and \(O(n)\) for &lt;code&gt;Merge&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Binary_heap&#34;&gt;Binary heap on Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nlogn.xyz/2018/01/23/fibonacci-and-binomial-heap.html&#34;&gt;Binomial and Fibonacci heap notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
	</item>
	
	<item>
		<title>Few notes on the Binomial and Fibonacci heaps</title>
		<link>https://blog.jakuba.net/2018-01-23-fibonacci-and-binomial-heap/</link>
		<pubDate>Tue, 23 Jan 2018 10:00:00 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/2018-01-23-fibonacci-and-binomial-heap/</guid>
		<description>&lt;p&gt;Having just implemented and tested a Fibonacci heap on a large dataset I thought I&amp;rsquo;d write up a bit about it, mostly so that I can reference this post later in the future, and to help me remember things I&amp;rsquo;ve learned better. Note that this blog post is not a tutorial on how to implement a Binomial/Fibonacci heap.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s begin with a few definitions. Throughout the article we&amp;rsquo;ll be talking about min-heaps. The &lt;em&gt;heap property&lt;/em&gt; of a tree says that the value in each node is less than or equal to the value of its children. It doesn&amp;rsquo;t say which values go to the left and which go to the right, so it doesn&amp;rsquo;t help us with searching. It only tells us that the minimum of any subtree is in its root. Also note that we are not restricting ourselves just to binary trees, this property works for any kind of tree.&lt;/p&gt;
&lt;h2 id=&#34;binomial-heap&#34;&gt;Binomial heap&lt;/h2&gt;
&lt;p&gt;Before we can define a binomial heap, we need to define a &lt;em&gt;binomial tree&lt;/em&gt;. We&amp;rsquo;ll use a recursive definition.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A binomial tree of rank &lt;strong&gt;0&lt;/strong&gt; is a single node without any children.&lt;/li&gt;
&lt;li&gt;A binomial tree of rank &lt;strong&gt;k&lt;/strong&gt; is a tree where the root has exactly &lt;strong&gt;k&lt;/strong&gt; children, which are, going from left to right, binomial trees of rank &lt;strong&gt;0..k-1&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To make things a little more confusing, here&amp;rsquo;s a picture from wikipedia, which uses uses a reverse order, putting children of lower rank to the right. Both definitions are equivalent.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Binomial_Trees.svg/500px-Binomial_Trees.svg.png&#34; alt=&#34;binomial tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;Before we move onto the binomial heap, let us prove a small property which will be useful later. &lt;em&gt;A binomial tree of rank $k$ has $2^k$ nodes.&lt;/em&gt; For k=0 we get $2^0 = 1$, which is true. Now taking $k&amp;gt;0$, we know that a binomial tree of rank $k-1$ has $2^{k-1}$ nodes. We also know, that we can use two trees of rank $k-1$ and combine them into a binomial tree of rank $k$.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8MOL7hJ.png&#34; alt=&#34;merging binomial trees&#34;&gt;&lt;/p&gt;
&lt;p&gt;If we do that, we get $2 \cdot 2^{k-1} = 2^k$ nodes in total. This shows that the number of children is logarithmic in the total number of nodes. Since increasing the rank by one increases the depth of the tree by one as well, we get that a binomial tree with $n$ nodes has the depth of $O(\log n)$ and also has $O(\log n)$ children at the root.&lt;/p&gt;
&lt;p&gt;A small sidenote, when we merge two binomial trees, in order to preserve the heap property, we have to put the one with a higher value in its root under the one with the lower value.&lt;/p&gt;
&lt;p&gt;Now moving onto a &lt;strong&gt;binomial heap&lt;/strong&gt;, we define it as a list of binomial trees T1,&amp;hellip;,Tk, which are sorted by their rank, each rank from 0 to $k$ occurs at most once, and each tree obeys the heap property.&lt;/p&gt;
&lt;p&gt;The operations we want from the binomial heap are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Min&lt;/strong&gt;: Finding the minimum, which can be either obtained in $O(\log n)$ by iterating the roots, or in $O(1)$ by keeping a separate minimum pointer and updating it along the other operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Merge&lt;/strong&gt;: Taking two binomial heaps and merging them together, we simply iterate both lists, looking at the same rank at a time &amp;hellip; if both heaps contain a tree of the same rank, we merge them together, creating a tree of one rank higher. We keep doing if there&amp;rsquo;s also a tree of one rank higher, much like we would carry over 1 in binary addition. This whole operating is $O(\log n)$, as it does the same exact operations as binary addition does, which can be shown as $O(\log n)$ using basic amortized analysis.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Insert&lt;/strong&gt;: Adding a single item into the heap. We do this by creating a singleton heap with just one element and merging it into our heap. By definition this is also $O(\log n)$.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt;: Building a binomial heap from a list of $n$ elements. Unlike in a binary heap, we can simply call &lt;strong&gt;Insert&lt;/strong&gt; for each element. I won&amp;rsquo;t go into why, but the complexity is just $O(n)$, not $O(n \log n)$ as we could expect.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ExtractMin&lt;/strong&gt;: Removing a minimum from the heap, we take the tree with the minimum value at its root, remove it from the heap, create a new heap into which we insert all of its children, and merge that heap back into our initial heap. The whole operation is again $O(\log n)$.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lazy-binomial-heap&#34;&gt;Lazy binomial heap&lt;/h2&gt;
&lt;p&gt;We can go a bit further and make our binomial heap lazy. This will help us improve the amortized time of some of the operations. The only change we&amp;rsquo;re going to make is allow multiple trees of the same rank to co-exist in our binomial heap.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll simplify our &lt;strong&gt;Merge&lt;/strong&gt; operation so that it works in constant time. Instead of doing all of those complicated operations, we simply take the both lists of trees of both heaps, and concatenate them together. This can be done in $O(1)$ when using double linked lists. (Note that the minimum pointer should be updated to the minimum of both heaps when doing this).&lt;/p&gt;
&lt;p&gt;We also modify our &lt;strong&gt;ExtractMin&lt;/strong&gt; operation so that it performs a new operation called &lt;strong&gt;Consolidation&lt;/strong&gt;. This will fix our heap so that it again looks like a binomial heap. In a nutshell, we&amp;rsquo;ll do a bucket sort on the lists of trees in our heap, and then merge trees in each bucket until there&amp;rsquo;s only one left (note that when we merge two trees we create a tree of a higher rank, so we move it one bucket up). Iterating the buckets from lower to higher ranks will result in a bucket lists where each bucket contains zero or one tree. We can convert this back to a binomial heap.&lt;/p&gt;
&lt;p&gt;The whole trick is that the consolidation itself is $O(\log n)$ (amortized), so we keep the amortized complexity of &lt;strong&gt;ExtractMin&lt;/strong&gt;, but improve the complexity of &lt;strong&gt;Insert&lt;/strong&gt; and &lt;strong&gt;Merge&lt;/strong&gt; to $O(1)$. Also note that the worst case time of &lt;strong&gt;ExtractMin&lt;/strong&gt; is $O(n)$.&lt;/p&gt;
&lt;h2 id=&#34;fibonacci-heap&#34;&gt;Fibonacci heap&lt;/h2&gt;
&lt;p&gt;Going even further, we want our heap to also support the &lt;strong&gt;Decrease&lt;/strong&gt; operation, which takes a pointer to a node and changes its key to a specific value. As doing this blindly could break the heap property, we have to do some tweaking to our data structure.&lt;/p&gt;
&lt;p&gt;A regular binomial heap can do a &lt;strong&gt;Decrease&lt;/strong&gt; in $O(\log n)$ by simply propagating the decreased element as far up to the root as needed to maintain the heap property. But our Fibonacci heap will be able to do this in just $O(1)$!.&lt;/p&gt;
&lt;p&gt;To allow this, we tweak our definition of the binomial heap. We keep the heap ordering on our trees, but we don&amp;rsquo;t require them to be binomial. All of the above mentioned operations will be identical to the lazy binomial heap, with the exception of &lt;strong&gt;Decrease&lt;/strong&gt;. We&amp;rsquo;ll also be keeping an additional flag on each node, which says if the node is &lt;strong&gt;marked&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;Decrease&lt;/strong&gt; is called on a node, we check if it changes the keys in such the parent node now has a higher value. If not, we stop right here as the tree keeps the heap property. If the parent now has a higher value, we &lt;strong&gt;Cut&lt;/strong&gt; the subtree at the changed note (including the changed node, acting as a root).&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Cut&lt;/strong&gt; operation takes the subtree, removes it from its parent, and &lt;strong&gt;Insert&lt;/strong&gt;s it back into the heap. If the parent was &lt;strong&gt;marked&lt;/strong&gt;, we recursively call &lt;strong&gt;Cut&lt;/strong&gt; on the parent. If the parent wasn&amp;rsquo;t &lt;strong&gt;marked&lt;/strong&gt;, we mark it and end right there.&lt;/p&gt;
&lt;p&gt;This means our first &lt;strong&gt;Decrease&lt;/strong&gt; will simply take the subtree at the decreased note, mark its parent, and insert the subtree back into the heap. If we then call a second &lt;strong&gt;Decrease&lt;/strong&gt; under the same parent node, we will end up &lt;strong&gt;Cut&lt;/strong&gt;ting the parent as well. This prevents the tree from becoming too degenerate.&lt;/p&gt;
&lt;p&gt;The most interesting part here (which I&amp;rsquo;m however not going to prove), is that the amortized cost of &lt;strong&gt;Cut&lt;/strong&gt; is $O(1)$, and the amortized cost of &lt;strong&gt;Decrease&lt;/strong&gt; is also $O(1)$. This makes for a very interesting data structure, in which all operations except for the &lt;strong&gt;ExtractMin&lt;/strong&gt; run in amortized constant time.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I do realize that I&amp;rsquo;ve skipped most of the amortized analysis, and simplified a few things, but this article mostly serves as a mental refresher for people already somewhat familiar with the Fibonacci heap. For a complete reference, check out &lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_heap&#34;&gt;the references at the Wikipedia page&lt;/a&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
	</item>
	
	<item>
		<title>Bloom filter in JavaScript</title>
		<link>https://blog.jakuba.net/2018-01-07-bloom-filter-in-javascript/</link>
		<pubDate>Thu, 18 Jan 2018 10:00:00 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/2018-01-07-bloom-filter-in-javascript/</guid>
		<description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;This article assumes basic familiarty with bit vectors. If you&amp;rsquo;re unsure how they work or need a refresher, check out &lt;a href=&#34;https://blog.jakuba.net/2018/01/17/bit-vector-in-javascript.html&#34;&gt;the previous article about bit vectors&lt;/a&gt; which goes in depth both in explaining how they work, and how to implement one.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A Bloom filter is a simple yet powerful data structure. It allows you to answer the question &lt;em&gt;have you seen this before?&lt;/em&gt; in a very fast and memory efficient way. Unlike a regular set, a Bloom filter only needs to store a few bits per item instead of storing the whole thing. The trick is, a Bloom filter will be able to tell you if something is &lt;em&gt;not present in the set&lt;/em&gt; with 100% certainty, but if you ask it if something &lt;em&gt;is present in the set&lt;/em&gt;, you might get a false positive. That means the response could be true, even if the item was never stored in the set.&lt;/p&gt;
&lt;p&gt;To explain things, let&amp;rsquo;s first do a simple example. Consider we&amp;rsquo;re taking random numbers as input and checking if we&amp;rsquo;ve already seen a given number. We could use an array and store the numbers and check its contents whenever needed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; arr &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// inserting a few elements in the array
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;push&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;push&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// and checking for presence
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;indexOf&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;indexOf&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;code&gt;arr.indexOf(...)&lt;/code&gt; returns the index of an element in the array if found, and &lt;code&gt;-1&lt;/code&gt; if the element was not present in the array.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This approach works, but it has a few issues. Firstly, &lt;code&gt;indexOf&lt;/code&gt; needs to traverse the entire array to see if an element is present (\(O(n)\) time complexity), which means the bigger the array, the longer it will take. And second, we&amp;rsquo;re also using extra memory for each element we add to the array. This might seem dumb at first, considering we haven&amp;rsquo;t gotten to the Bloom filter part, but read on to see how we can save a lot of memory with a probabilistic approach. But first, let&amp;rsquo;s try fixing the lookup time by switching to a hash table. We could use JavaScript&amp;rsquo;s builtin objects to store a truthy value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; table &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This helps us with the lookup time to an average constant time \(O(1)\). The thing is, if we were to count a lot of numbers, it would take up a lot of memory. Considering we&amp;rsquo;re only storing numbers here, you might be thinking that we could use a bit vector, which would only take 1 bit per number. If we were to store something like IPv4 addresses encoded as 32-bit integers, we would need to allocate a 128MB bit vector. That might still be feasible, as the set of possible values is still only 32 bits. Increasing this to IPv6 (which are 128-bit integers), the bit vector would be way too big (rougly \(10^{36}\) bytes).&lt;/p&gt;
&lt;p&gt;Here comes the interesting part though, what if we only intend to store a portion of the numbers. If it was small enough, we could simply store them in an array. If it was bigger, we&amp;rsquo;d probably use a hash table or ideally a set data structure. But what if we need to store lots of them?&lt;/p&gt;
&lt;p&gt;Storing 5 million IPv6 addresses (128bit numbers) would take up around 76MB of memory. That might not seem like a huge deal if all you&amp;rsquo;re doing is managing which IPv6 address you&amp;rsquo;ve seen before. But what if this is part of a side calculation that isn&amp;rsquo;t particularly important? Or what if you need to store even more? The storage requirements grow linearly together with each address. At 50 million we&amp;rsquo;d be closing in 1GB of memory.&lt;/p&gt;
&lt;h2 id=&#34;using-a-probabilistic-approach-to-save-memory&#34;&gt;Using a probabilistic approach to save memory&lt;/h2&gt;
&lt;p&gt;If we&amp;rsquo;re willing to relax our requirements on the data structure, we can save quite a bit of memory. The original bit vector approach is great in terms of memory, but fails when the set of possible values is too large, as we need to pre-allocate a slot for each possible value. But what if we allowed multiple values to share the same slot?&lt;/p&gt;
&lt;p&gt;We can use a simple hash function to calculate the position in the bit vector, which allows us to have a bit vector that is smaller than the set of possible values. If we have 100 possible values, but only 10 bits, we can use a &lt;em&gt;modulo 10&lt;/em&gt; hash function to set the proper bit to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; hash&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;num&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; num &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This approach does decrease the amount of memory required by 10x, but it&amp;rsquo;s also easy to see that collisions in the hash function can occur rather easily. For example &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;11&lt;/code&gt;, &lt;code&gt;21&lt;/code&gt;, &lt;code&gt;31&lt;/code&gt;, &amp;hellip; all have the same hash value. At first this seems like our data structure is completely broken and can&amp;rsquo;t tell us anything useful, but something interesting happens here.&lt;/p&gt;
&lt;p&gt;When we query the data structure, there are two cases that can happen:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The queried bit is &lt;code&gt;true&lt;/code&gt;, which means the number we used to calculate the hash might have been used to set it, or it could have been a different number with the same hash.&lt;/li&gt;
&lt;li&gt;The queried bit is &lt;code&gt;false&lt;/code&gt;, which menas the number was never present in the set! &lt;strong&gt;There is no way a different number could be used to set any bit to &lt;code&gt;false&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is a big difference between cases 1) and 2). While the first case gives a probabilistic response with a possible false positive (getting &lt;code&gt;true&lt;/code&gt; while the answer should be &lt;code&gt;false&lt;/code&gt;), the second case is always 100% correct. If we get a &lt;code&gt;false&lt;/code&gt;, the element definitely isn&amp;rsquo;t in the set!&lt;/p&gt;
&lt;p&gt;Before we move on to how an actual bloom filter works, let&amp;rsquo;s see a few examples where a data structure that can return false positives but never returns false negatives can be useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tracking which pages/articles/profiles/websites a user has seen and which he hasn&amp;rsquo;t. This way you can recommend things they definitely &lt;em&gt;have not seen&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;A simple web crawler where you want to avoid visiting the same pages again and again. You will 100% recognize if the crawler has not seen a particular page, with a possibility of skipping a few pages due to a false positive.&lt;/li&gt;
&lt;li&gt;Mapping tags/keywords to large data files/database where you might want to avoid a possibly expensive search if the keyword does not match the contents.&lt;/li&gt;
&lt;li&gt;Any case where you want a set which should not be enumerable. For example, when storing privacy sensitive data, using the approach mentioned above doesn&amp;rsquo;t anyone allow to figure out which specific elements are in the set, as there are many possibilities for each slot.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bloom-filter&#34;&gt;Bloom filter&lt;/h2&gt;
&lt;p&gt;In our previous example, the probability of a collision (two elements sharing the same hash) is both very high, and using such a simple hash function yields predictable collisions, which is something we&amp;rsquo;d want to avoid. The reason is, the number of collisions could be very high for a certain set of items, while being low for a different set, leading to uneven distribution of false positives among the set of possible sets of items.&lt;/p&gt;
&lt;p&gt;First, it is important to note that the above shown hash function is not a good example of a hash function. I won&amp;rsquo;t go into the details of constructing a hash function in this article, as it&amp;rsquo;s a rather involved topic and I can&amp;rsquo;t really think of any cases where you&amp;rsquo;d need to come up with your own. For now, let&amp;rsquo;s simply consider we have three different hash functions called &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt; and &lt;code&gt;h3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To create a bloom filter, we simply need a bit vector and &lt;code&gt;k&lt;/code&gt; different hash functions, and use them to calculate multiple bit indexes for each element. That way if two elements have a collision using one hash function, they don&amp;rsquo;t necessarily have a collision with the other ones, as each of the hash functions is different and returns a different index.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Here we assume that `bitvector` is an N-bit long bit vector. See references at the end of this
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// article if you&amp;#39;re unsure on how it works.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; insert&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bitvector&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We simply set all the relevant bits to `1`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    bitvector&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;h1&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bitvector&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;h2&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bitvector&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;h3&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#eceff4&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; isMember&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bitvector&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; bit1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; bitvector&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;h1&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; bit2 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; bitvector&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;h2&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; bit3 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; bitvector&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;h3&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// An element is in the set only if all of the relevant bits are `1`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; bit1 &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bit2 &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bit3&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the question is, does having multiple hash functions reduce the probability of a false positive? Sure the probability that three hash functions collide all at once is lower than the probability of just one hash function colliding, but we&amp;rsquo;re also setting three times as many bits.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you&amp;rsquo;re not interested in the math behind calculating the probabilites of collisions, feel free to skip to the next section for a high level overview.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If we have a bit vector with &lt;code&gt;N&lt;/code&gt; bits, the probability that a hash function selects a specific bit is \(\frac{1}{N}\). This means, that if we do a single insert with a single hash function, the probability that a specific bit is kept at &lt;code&gt;0&lt;/code&gt; is \(1 - \frac{1}{N}\). If we use &lt;code&gt;k&lt;/code&gt; different hash functions, a single bit is kept at &lt;code&gt;0&lt;/code&gt; if none of the hash functions choose it, which means the above test has to pass for all of them, which means the probability is \((1 - \frac{1}{N})^k\).&lt;/p&gt;
&lt;p&gt;If we start inserting multiple elements, the probability that a particular bit is &lt;code&gt;0&lt;/code&gt; after &lt;code&gt;n&lt;/code&gt; elements have been inserted is again calculated by looking at this as passing the above test for each of the inserted elements (done &lt;code&gt;n&lt;/code&gt; times), so the probability is \(((1 - \frac{1}{N})^k)^n = (1 - \frac{1}{N})^{kn}\).&lt;/p&gt;
&lt;p&gt;The complement of this is \(1 - (1 - \frac{1}{N})^{kn}\), which is the probability that a specific bit is &lt;code&gt;1&lt;/code&gt; after having inserted &lt;code&gt;n&lt;/code&gt; elements. We get a false positive if and only if all of the hash functions select indexes which are all &lt;code&gt;1&lt;/code&gt;, which means the above test needs to pass for all of them, giving us the final probability:&lt;/p&gt;
&lt;p&gt;\((1 - (1 - \frac{1}{N})^{kn})^k \approx (1 - e^{-\frac{kn}{N}})^k\)&lt;/p&gt;
&lt;p&gt;Using a bit of analysis, we can find that the minimum is at \(\frac{kn}{N} = \ln 2\), which gives us a useful relationship \(k = \ln 2 \cdot \frac{N}{n}\).&lt;/p&gt;
&lt;h2 id=&#34;choosing-the-right-constants-and-hash-functions&#34;&gt;Choosing the right constants and hash functions&lt;/h2&gt;
&lt;p&gt;When we want to use a Bloom filter, we don&amp;rsquo;t really start from the number of hash functions. We care about the probability of false positives and how many items we are approximately going to store in the filter. If we know those, it&amp;rsquo;s rather simple &lt;a href=&#34;https://stackoverflow.com/questions/658439/how-many-hash-functions-does-my-bloom-filter-need&#34;&gt;to calculate the number of bits and hash functions needed&lt;/a&gt;. There is actually a nice &lt;a href=&#34;https://krisives.github.io/bloom-calculator/&#34;&gt;Bloom filter calculator&lt;/a&gt; which does exactly this, you put in a number of expected elements, your target probability for false positives, and the calculator will tell you the optimal number of hash functions, and how many bits the backing bit vector should have. I really recommend trying it out with a few different settings for &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; and see how the size of the Bloom filter changes to get a feel for how much memory you might need if you used one.&lt;/p&gt;
&lt;p&gt;Now all that is left to do is figure out where to get those &lt;code&gt;k&lt;/code&gt; different hash functions. A simple solution suggested by &lt;a href=&#34;http://citeseer.ist.psu.edu/viewdoc/download;jsessionid=4060353E67A356EF9528D2C57C064F5A?doi=10.1.1.152.579&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;this paper&lt;/a&gt; suggests how to create &lt;code&gt;k&lt;/code&gt; hash functions from just two different ones (let&amp;rsquo;s call them &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;). We calculate the &lt;code&gt;i&lt;/code&gt;-th hash as &lt;code&gt;h(i) = (f(x) + i * g(x)) % N&lt;/code&gt; where &lt;code&gt;N&lt;/code&gt; is the number of bits in our bit vector.&lt;/p&gt;
&lt;p&gt;An important point to note here is that we only need the hash function to be uniform, we don&amp;rsquo;t need a cryptographically secure hash function such as SHA-2. We can use a simpler and faster hash function, such as FNV (&lt;a href=&#34;https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;http://isthe.com/chongo/tech/comp/fnv/&#34;&gt;here&lt;/a&gt;), which simply does a few bitwise operations and multiplications. There are actually two variants, FNV-1 and FNV-1a, which are almost the same, except for the order of one particular operation. This means we can use these two hash functions as a basis for the trick mentioned above. You can take a look at the &lt;a href=&#34;https://github.com/jasondavies/bloomfilter.js/blob/master/bloomfilter.js&#34;&gt;bloomfilter.js library&lt;/a&gt; which has an efficient implementation of both the Bloom filter, and of both variants of the FNV hash function.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://willwhim.wpengine.com/2011/09/03/producing-n-hash-functions-by-hashing-only-once/&#34;&gt;Producting n hash functions by hashing only once&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://citeseer.ist.psu.edu/viewdoc/download;jsessionid=4060353E67A356EF9528D2C57C064F5A?doi=10.1.1.152.579&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;Building a Better Bloom Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://isthe.com/chongo/tech/comp/fnv/&#34;&gt;FNV hash function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function&#34;&gt;FNV on Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jasondavies/bloomfilter.js&#34;&gt;bloomfilter.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projecteuclid.org/DPubS?service=UI&amp;amp;version=1.0&amp;amp;verb=Display&amp;amp;handle=euclid.im/1109191032&#34;&gt;Network Applications of Bloom Filters: A Survey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Bloom_filter&#34;&gt;Wikipedia article on Bloom filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://krisives.github.io/bloom-calculator/&#34;&gt;Bloom Filter Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/658439/how-many-hash-functions-does-my-bloom-filter-need&#34;&gt;Calculating the number of hash functions and bits on StackOverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Bit Vector in JavaScript</title>
		<link>https://blog.jakuba.net/2018-01-09-bit-vector-in-javascript/</link>
		<pubDate>Wed, 17 Jan 2018 10:00:00 +0100</pubDate>
		
		<guid>https://blog.jakuba.net/2018-01-09-bit-vector-in-javascript/</guid>
		<description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;A bit vector (also known as bit set or bit array) is a set data structure which uses only 1 bit per element. It answers the question &lt;em&gt;is X in the set?&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The main advantage is memory efficiency and speed, as the memory is allocated in a single continuous block, making it very cache friendly (unlike some tree based data structures), and requiring only a few bitwise operations to access/modify elements in the set. The disadvantage is that we need to know the size of the bit vector beforehand, and that we might be wasting some of the memory if we only store a few elements in a large vector. Let&amp;rsquo;s look at this more closely.&lt;/p&gt;
&lt;p&gt;For simplicity, we can think of the bit vector as an array of bits. Not boolean true/false values, or bytes, but &lt;em&gt;bits&lt;/em&gt;. Our goal is to map the set of all possible values we might want to store (also called the domain) to a unique index in the bit vector. A good example would be if we wanted a set of small integers (say for an algorithm like the prime sieve of Eratosthenes). We would then need as many bits as is the highest integer we might want to store. If the highest number is 1024, our vector would need 1024 bits, or 128 bytes to store all our membership values (flags).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;As a small sidenote, you can use the Chrome developer console to run the example code. It was written in a way that you can copy paste each snippet as you go along and everything will work.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;implementation-using-basic-array-and-number-types&#34;&gt;Implementation using basic &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt; types&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s do a simple implementation first, using bare JavaScript arrays of &lt;code&gt;Number&lt;/code&gt;. We can do this because the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&#34;&gt;JavaScript bitwise operators treat their operands as 32 bit integers&lt;/a&gt;. Afterwards, we&amp;rsquo;ll do the same using the new &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&#34;&gt;&lt;code&gt;Uint32Array&lt;/code&gt; type&lt;/a&gt;. But first, let&amp;rsquo;s use a regular &lt;code&gt;Array&lt;/code&gt; to make things simpler.&lt;/p&gt;
&lt;p&gt;To create a bit vector, we first need to specify the number of bits we need (which is also the number of possible values we can store membership of). The question becomes, how many 32-bit integers do we need to store &lt;code&gt;N&lt;/code&gt; bits? The answer is unsurprisingly &lt;code&gt;N / 32&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// A function which takes a number of bits and returns an initialized
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// bit vector of given length.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; buildVector&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bitCount&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// The number of bits each `Number` can store.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; BITS_PER_ELEMENT &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Total number of `Number` values in the vector.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We round up, because even if we need less than 32 bits, we need at least 1 `Number`.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; elementCount &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;ceil&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bitCount &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; BITS_PER_ELEMENT&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; vector &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;elementCount&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We initialize our bit vector to all zeros
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; elementCount&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; vector&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have our bit vector, all that is left to do is write the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; methods for manipulating bit values by their respective bit index. We&amp;rsquo;ll first consider only having a single &lt;code&gt;Number&lt;/code&gt; representing 32 bits.&lt;/p&gt;
&lt;h2 id=&#34;short-introduction-to-binary&#34;&gt;Short introduction to binary&lt;/h2&gt;
&lt;p&gt;Binary numbers are represented as a sum of powers of two, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(1 = 2^0\)&lt;/li&gt;
&lt;li&gt;\(2 = 2^1\)&lt;/li&gt;
&lt;li&gt;\(3 = 1 + 2 = 2^0 + 2^1\)&lt;/li&gt;
&lt;li&gt;\(4 = 2^2\)&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you don&amp;rsquo;t have much experience with binary, you might be tempted to think that \(4 = 1 + 3 = 2^0 + (2^0 + 2^1)\), but that wouldn&amp;rsquo;t work, as we only want one of each power of two. A simple rule to achieve this is that we do a greedy approach, starting from the biggest power of two we can.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;7 &amp;hellip; we can fit a 4 into that, which means it&amp;rsquo;s \(4 + 3\), and we have to convert the 3, which is \(2 + 1\), resulting in \(4 + 2 + 1\) or \(2^2 + 2^1 + 2^0\)&lt;/li&gt;
&lt;li&gt;14 &amp;hellip; we can fit an 8, leaving us with 6, on which we iterate the same rule and get \(4 + 2\), resulting in \(8 + 4 + 2\) or \(2^3 + 2^2 + 2^1\)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A binary number is then simply a sequence of 0 or 1, stating 1 for each power of 2 we have (going from the lowest from the right), and 0 for each one we don&amp;rsquo;t have, thus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;\(7 = 2^2 + 2^1 + 2^0\) which we can write as \(1 \cdot 2^2 + 1 \cdot 2^1 + 1 \cdot 2^0\), which gives us \(111\)&lt;/li&gt;
&lt;li&gt;\(14 = 2^3 + 2^2 + 2^1\) which we can write as \(1 \cdot 2^3 + 1 \cdot 2^2 + 1 \cdot 2^1 + 0 \cdot 2^0\), which gives us \(1110\) reading from the right&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that we can add any number of zeros to the left, so 111 is equivalent to 0111 and 000000111.&lt;/p&gt;
&lt;p&gt;A small sidestep here, we can also use hexadecimal numbers to represent binary, as the conversion is rather simple. A hexadecimal digit represents a value from 0 to 15, which is exactly what 4 bits represent. We can thus take any binary number, such as 100000101011111010 and convert it to hex (or back):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;look at it as groups of 4 bits from the right &lt;code&gt;10 0000 1010 1111 1010&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add leading zeros to the leftmost group if needed &lt;code&gt;0010 0000 1010 1111 1010&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;convert each individual group &lt;code&gt;2 0 10 15 10&lt;/code&gt; to decimal&lt;/li&gt;
&lt;li&gt;write each decimal in hex &lt;code&gt;2 0 A F A&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;put them back together, prefixing with &lt;code&gt;0x&lt;/code&gt; to get &lt;code&gt;0x20AFA&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Converting hexadecimal back to binary is simple, just take these steps backwards. The reason we use hexadecimal numbers instead of binary often is because they are much easier to visually parse, understand and remember. Looking at a number like &lt;code&gt;0xA1&lt;/code&gt; is much clearer than looking at &lt;code&gt;10100001&lt;/code&gt;, because you don&amp;rsquo;t have to count how long is each run of zeros/ones.&lt;/p&gt;
&lt;h2 id=&#34;bitwise-operators&#34;&gt;Bitwise operators&lt;/h2&gt;
&lt;p&gt;To manipulate individual bits, we&amp;rsquo;ll make use of a few simple bitwise operators. They are called bitwise, because they manipulate individual bits. Specifically, we&amp;rsquo;ll need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;negation (NOT), using the &lt;code&gt;~&lt;/code&gt; (tilde) operator, which simply flips all the bits&lt;/li&gt;
&lt;li&gt;conjunction (AND), using the &lt;code&gt;&amp;amp;&lt;/code&gt; operator, which returns 1 when both bits are 1, otherwise 0&lt;/li&gt;
&lt;li&gt;disjunction (OR), using the &lt;code&gt;|&lt;/code&gt; operator, which returns 0 when both bits are 0, otherwise 1&lt;/li&gt;
&lt;li&gt;left shift, using the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator, which is shifting all the bits to the left, or semantically multiplying by a given power of 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because these operators are bitwise, they will operate on all the bits in parallel. This is different from the more common logical operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; (note that they&amp;rsquo;re doubled), which operate on the whole numbers. Here are a few examples (the &lt;code&gt;b&lt;/code&gt; suffix signifies a binary string, this is not proper JavaScript syntax and only used for demonstration purposes):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 | 2 = 01b | 10b = 11b = 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 || 2 = 1&lt;/code&gt;, because both are converted to booleans, and both are true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;amp; 3 = 01b &amp;amp; 11b = 01b = 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;amp;&amp;amp; 3 = 1&lt;/code&gt;, because both are converted to booleans, and both are true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;&amp;lt; 1 = 1b &amp;lt;&amp;lt; 1 = 10b = 2&lt;/code&gt;, or \(1 \cdot 2^1\)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;&amp;lt; 3 = 1b &amp;lt;&amp;lt; 3 = 1000b = 8&lt;/code&gt;, or \(1 \cdot 2^3\)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To understand the NOT operator, we first need to understand that while mathematically, binary numbers are infinite (or can be), we are only working with 32-bit integers. This means if we start with &lt;code&gt;0&lt;/code&gt; and do a negation &lt;code&gt;~0&lt;/code&gt;, we get a 32 bit number with all bits set to 1.&lt;/p&gt;
&lt;p&gt;Because JavaScript uses two&amp;rsquo;s complement, &lt;code&gt;~0&lt;/code&gt; will actually be &lt;code&gt;-1&lt;/code&gt; (or &lt;code&gt;11111111111111111111111111111111&lt;/code&gt; in binary). This is because the &lt;code&gt;Number&lt;/code&gt; type behaves as a &lt;em&gt;signed&lt;/em&gt; 32-bit number, which means it also has to represent negative values. The important thing here is that two&amp;rsquo;s complement doesn&amp;rsquo;t say anything about the actual bits, it only specifies what value those bits represent when doing other mathematical operations (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, etc.). It also affects how the browser will display each number. If you want to learn more about two&amp;rsquo;s complement, check out &lt;a href=&#34;https://en.wikipedia.org/wiki/Two%27s_complement&#34;&gt;the wikipedia article&lt;/a&gt;
or the &lt;a href=&#34;http://www.convertforfree.com/twos-complement-calculator/&#34;&gt;following online calculator&lt;/a&gt; (there are many others) to get an idea for how it works.&lt;/p&gt;
&lt;p&gt;But since our bit vector doesn&amp;rsquo;t need to do arithmetic, we don&amp;rsquo;t really need to worry about this. We might occasionally want to print out a given number in hex or binary, which can be done using the &lt;code&gt;.toString&lt;/code&gt; function, for example &lt;code&gt;(14).toString(2)&lt;/code&gt; outputs binary &lt;code&gt;1110&lt;/code&gt; and &lt;code&gt;(14).toString(16)&lt;/code&gt; outputs hex &lt;code&gt;e&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Knowing how binary and bitwise operators work, we can finally figure out how to set a specific bit in a given 32-bit integer. The &lt;code&gt;OR&lt;/code&gt; operator &lt;code&gt;|&lt;/code&gt; is perfect for this, as it won&amp;rsquo;t change a &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; (and thus leaving the existing values alone), but will be able to set a &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;. Counting from 0, if we want to set the 1st bit (at index 0) to &lt;code&gt;1&lt;/code&gt;, we simply do &lt;code&gt;num | 1&lt;/code&gt;, as this can also be read as &lt;code&gt;num | 00000000000000000000000000000001b&lt;/code&gt;. If we wanted to set the 2nd bit (at index 1), we&amp;rsquo;d want &lt;code&gt;num | 10b&lt;/code&gt;, or &lt;code&gt;num | 2&lt;/code&gt; in decimal/hex. The 3rd bit (at index 2) would be &lt;code&gt;num | 100b&lt;/code&gt; or &lt;code&gt;num | 4&lt;/code&gt;, the 4th bit (at index 3) would be &lt;code&gt;num | 1000b&lt;/code&gt; or &lt;code&gt;num | 8&lt;/code&gt;, and so on. We&amp;rsquo;ll call the number on the right side of the operator a &lt;em&gt;bit mask&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you look closely, you can probably figure out the pattern. To set the &lt;code&gt;i&lt;/code&gt;-th bit, we need to OR the number with \(2^i\), which can be easily created with a left shift as &lt;code&gt;1 &amp;lt;&amp;lt; i&lt;/code&gt;. The whole operation then becomes &lt;code&gt;num | (1 &amp;lt;&amp;lt; i)&lt;/code&gt;. Before moving on, let&amp;rsquo;s do a more visual example. We&amp;rsquo;ll start with &lt;code&gt;num = 0xDA&lt;/code&gt; (or &lt;code&gt;11011010&lt;/code&gt;, or &lt;code&gt;218&lt;/code&gt; dec), and toggle the 3rd bit (index 2).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num  11011010
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mask 00000100
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OR | --------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     11011110
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also use the same operation to check if a given bit is set. As all the bits except for the &lt;code&gt;i&lt;/code&gt;-th are zero, we can use the &lt;code&gt;&amp;amp;&lt;/code&gt; operator, which will return a non-zero number if and only if the &lt;code&gt;i&lt;/code&gt;-th bit in &lt;code&gt;num&lt;/code&gt; is 1. The &lt;code&gt;get&lt;/code&gt; operation is then &lt;code&gt;num &amp;amp; (1 &amp;lt;&amp;lt; i)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lastly, we might want to remove elements from the bit vector, which means we need the ability to clear a specific bit. A small recap of the &lt;code&gt;&amp;amp;&lt;/code&gt; operator.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;| &amp;amp; | 0 | 1 |
|---|---|---|
| 0 | 0 | 0 |
| 1 | 0 | 1 |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can see that if we set the mask to all &lt;code&gt;1&lt;/code&gt;, doing &lt;code&gt;num &amp;amp; 1111...1111b&lt;/code&gt; doesn&amp;rsquo;t change the &lt;code&gt;num&lt;/code&gt; value. We also see that no matter what value is in &lt;code&gt;num&lt;/code&gt;, if any of the bits in the mask is &lt;code&gt;0&lt;/code&gt;, the resulting bit will also be &lt;code&gt;0&lt;/code&gt;. Thus &lt;code&gt;num &amp;amp; 11101b&lt;/code&gt; will set the 2nd bit from the right (index 1) to &lt;code&gt;0&lt;/code&gt; and leave all of the other bits intact.&lt;/p&gt;
&lt;p&gt;Constructing such mask is simple, since we only need to take our &lt;code&gt;set&lt;/code&gt; mask from before and flip all the bits using the NOT operator &lt;code&gt;~&lt;/code&gt;. Resulting in &lt;code&gt;num &amp;amp; (~(1 &amp;lt;&amp;lt; i))&lt;/code&gt;. I&amp;rsquo;ve added extra parentheses to make the order of operations clear. Beware that &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt; have a very low priority, so it might be a good idea to be very explicit with parens around bit operations unless you&amp;rsquo;re sure what you&amp;rsquo;re doing is correct.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a similar example as we did for OR, starting with &lt;code&gt;num = 0xDA&lt;/code&gt;, clearing the 7th bit (index 6). We first construct the mask step by step &lt;code&gt;1 &amp;lt;&amp;lt; 6 = 01000000b&lt;/code&gt;, followed by a negation &lt;code&gt;~01000000 = 10111111&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num   11011010
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mask  10111111
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AND &amp;amp; --------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      10011010
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;implementing-get-set-and-clear-on-a-32-bit-vector&#34;&gt;Implementing &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;clear&lt;/code&gt; on a 32-bit vector&lt;/h2&gt;
&lt;p&gt;As mentioned before, let&amp;rsquo;s first consider only a 32-bit vector stored in a single &lt;code&gt;Number&lt;/code&gt;. The operations would be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Set the i-th bit to 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; vec &lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Clear the i-th bit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; clear&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; vec &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Return the value of the i-th bit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; value &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; vec &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// we convert to boolean to make sure the result is always 0 or 1,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// instead of what is returned by the mask
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; value &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that all of these functions return a new number as their result. Let&amp;rsquo;s test to see if it works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Since our bit vector is stored in a single number, we simply initialize it as 0.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; vec &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vec &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;is 3 in vec? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// is 3 in vec? true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;is 4 in vec? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// is 4 in vec? false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vec &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; clear&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;is 3 in vec? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// is 3 in vec? false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Remember the number only has 32-bits, so don&amp;rsquo;t use an index bigger than 31. If you do, it will simply wrap around, so you&amp;rsquo;ll get &lt;code&gt;set(0, 0) == set(0, 32)&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;implementing-get-set-and-clear-on-an-arbitrary-length-bit-vector&#34;&gt;Implementing &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;clear&lt;/code&gt; on an arbitrary length bit vector&lt;/h2&gt;
&lt;p&gt;Now we&amp;rsquo;re finally ready to create the whole data structure, an arbitrary length bit vector. We need to modify our &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt; to calculate the right &lt;code&gt;Number&lt;/code&gt; within the array first, and then to do the same bit manipulation they did before.&lt;/p&gt;
&lt;p&gt;Going again from the right, bits 0 - 31 will be stored in the 1st &lt;code&gt;Number&lt;/code&gt; (at index 0), bits 32 - 63 at index 1, 64 - 95 at index 2, etc. From this, we can see that the index in the bigger array is simply the bit index divided by 32 and rounded down. Simply &lt;code&gt;Math.floor(i / 32)&lt;/code&gt;. This gives us the index of the &lt;code&gt;Number&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To get the bit index within the number, we simply take the remainder of dividing by 32, or the modulo 32 of the original bit index. This gives us &lt;code&gt;i % 32&lt;/code&gt; for the bit index. Putting this together (note that since we&amp;rsquo;re using an &lt;code&gt;Array&lt;/code&gt;, the bit vector is now mutable, unlike the previous 32-bit version using only a &lt;code&gt;Number&lt;/code&gt;). I&amp;rsquo;ve added the original &lt;code&gt;buildVector&lt;/code&gt; function to make it easier to copy paste this code as a whole.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Set the i-th bit to 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; bigIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;floor&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; smallIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vec&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;bigIndex&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; vec&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;bigIndex&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; smallIndex&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Clear the i-th bit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; clear&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; bigIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;floor&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; smallIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    vec&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;bigIndex&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; vec&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;bigIndex&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; smallIndex&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Return the value of the i-th bit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; i&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; bigIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;floor&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; smallIndex &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; value &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; vec&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;bigIndex&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; smallIndex&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// we convert to boolean to make sure the result is always 0 or 1,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// instead of what is returned by the mask
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; value &lt;span style=&#34;color:#81a1c1&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// A function which takes a number of bits and returns an initialized
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// bit vector of given length.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; buildVector&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bitCount&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Total number of `Number` values in the vector.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Adding Math.ceil here to make sure we allocate enough space even if the size
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// is not divisible by 32.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; elementCount &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;ceil&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bitCount &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; vector &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;elementCount&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; elementCount&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        vector&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; vector&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can do a similar test as we did before to test our bit vector:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Since our bit vector is stored in a single number, we simply initialize it as 0.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; vec &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; buildVector&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;is 30 in vec? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// is 30 in vec? true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;is 40 in vec? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// is 40 in vec? false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clear&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;is 30 in vec? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;vec&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// is 30 in vec? false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;using-uint32array-instead-of-an-array-of-number&#34;&gt;Using Uint32Array instead of an &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;Number&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Modern browsers now provide a better and more efficient variant to an &lt;code&gt;Array&lt;/code&gt; of &lt;code&gt;Number&lt;/code&gt;, which is using &lt;code&gt;Uint32Array&lt;/code&gt;. The difference here is that JavaScript &lt;code&gt;Array&lt;/code&gt; is not exactly the array you would expect if you came out of a computer science class. It behaves more like a hash map with integer keys. You can also store different types in the same array, for example &lt;code&gt;[1, &amp;quot;hello&amp;quot;]&lt;/code&gt; is completely valid JavaScript. Secondly, &lt;code&gt;Number&lt;/code&gt; is not a 32-bit integer. &lt;a href=&#34;https://tc39.github.io/ecma262/#sec-ecmascript-language-types-number-type&#34;&gt;According to the standard&lt;/a&gt;, &lt;code&gt;Number&lt;/code&gt; is a IEEE-754 double precision float. The trick here is that the bitwise operators convert their operands to a 32-bit integer before applying the operation. The conversion is defined as an abstract operation, so it most likely comes down to how the implementation chooses to handle things.&lt;/p&gt;
&lt;p&gt;The ideal scenario would be that the JIT (just in-time compiler) recognizes that we&amp;rsquo;re only doing bitwise operations on something that starts out as a constant zero, and thus uses a 32-bit integer as the backing store for our data, and also recognizes that the array doesn&amp;rsquo;t contain anything else, so it wouldn&amp;rsquo;t have to use a generic implementation that allows different types, but rather a continuous block of memory. While this might be possible, it&amp;rsquo;s most likely not what happens, at least not something that can be guarateed to happen 100% of the time, because the JIT would need to understand everything your code is doing to prove that such optimization is possible. The halting problem however proves that the compiler can&amp;rsquo;t understand any arbitrary code, and as such any optimization could be only based on heuristics.&lt;/p&gt;
&lt;p&gt;This is why the &lt;code&gt;Uint32Array&lt;/code&gt; type was added to JavaScript. While the compiler/interpreter/JIT can&amp;rsquo;t know that we only intend to use 32-bit integers, we as the programmers do know it, so we can choose a more specific data structure that allows for exactly that. &lt;code&gt;Uint32Array&lt;/code&gt; is a type which has only one purpose, to store unsigned 32-bit integers in a continuous block of memory.&lt;/p&gt;
&lt;p&gt;Using it is actually even simpler than what we did before, as our &lt;code&gt;buildVector&lt;/code&gt; function turns into a one liner.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; buildVector&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bitCount&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// The constructor accepts a number of 32-bit integers in the array,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// which is simply the number of bits in our bit vector divided by 32.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// We also keep the `Math.ceil` just to make the API more robust.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;new&lt;/span&gt; Uint32Array&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Math&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;ceil&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bitCount &lt;span style=&#34;color:#81a1c1&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On the outside, the &lt;code&gt;Uint32Array&lt;/code&gt; behaves just like an &lt;code&gt;Array&lt;/code&gt;, with the exception that the operands to the indexer &lt;code&gt;[]&lt;/code&gt; operator get converted to unsigned 32-bit integers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; arr &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;new&lt;/span&gt; Uint32Array&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3.14&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; arr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// 0 123 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everything else about the bit vector (&lt;code&gt;set&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, and &lt;code&gt;clear&lt;/code&gt;) will stay the same, so there isn&amp;rsquo;t really anything we&amp;rsquo;re giving up for using the more efficient &lt;code&gt;Uint32Array&lt;/code&gt; version.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve read this far, you should now feel pretty confident about how the bit vector works, and be able to implement it yourself. A bit vector might not be the most popular data structure, but it can come handy in various different scenarios. A specific example could be using binary frames with the &lt;code&gt;WebSocket&lt;/code&gt; API, in which case you might want to minimize the network traffic as much as possible. When working with binary frames, you will most certainly run into &lt;code&gt;Uint32Array&lt;/code&gt; and bitwise operators, so at least knowing how a bit vector works can help you there. It&amp;rsquo;s also useful to know that there are other built-in array types with predefined length, such as &lt;code&gt;Uint8Array&lt;/code&gt;, &lt;code&gt;Int32Array&lt;/code&gt; (note the lack of &lt;code&gt;U&lt;/code&gt;, as this is a signed integer version of a 32-bit array), &lt;code&gt;Float64Array&lt;/code&gt;, etc. For more details on these check out the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&#34;&gt;Indexed collections section under Global Objects on MDN&lt;/a&gt;. You might also be interested in seeing &lt;a href=&#34;http://kangax.github.io/compat-table/es6/#test-typed_arrays&#34;&gt;browser support of typed arrays&lt;/a&gt; in the modern browsers and different polyfill options.&lt;/p&gt;
&lt;p&gt;Lastly, I&amp;rsquo;d like to note a little bit about dynamically sized bit vectors. Much like a regular array, a bit vector can also be implemented in a way that allows for resizing. In the &lt;code&gt;Array&lt;/code&gt; variant, we would just need to push a few additional zeroed &lt;code&gt;Number&lt;/code&gt; instances into the array to make the bit vector larger, while the &lt;code&gt;Uint32Array&lt;/code&gt; variant would require us to allocate a new &lt;code&gt;Uint32Array&lt;/code&gt; with larger size and copy things over. At first it might seem like the &lt;code&gt;Array&lt;/code&gt; variant is clearly superior in this regard, but here&amp;rsquo;s a few thoughts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if the JIT recognized our &lt;code&gt;Array&lt;/code&gt; should use an efficient packed 32-bit integer block of memory to store the data, pushing a new element into it would do exactly the same as if we create a new &lt;code&gt;Uint32Array&lt;/code&gt; (there could be more optimizations going on, but the same could be said for the JIT optimizing a resize of the &lt;code&gt;Uint32Array&lt;/code&gt; variant)&lt;/li&gt;
&lt;li&gt;if the &lt;code&gt;Array&lt;/code&gt; is backed by a generic array of objects with extended capacity for pushing new elements into it, the &lt;code&gt;push&lt;/code&gt; itself wouldn&amp;rsquo;t cost as much, but there could be a price paid in terms of performance of the regular &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;clear&lt;/code&gt; operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that this is mostly food for thought, I haven&amp;rsquo;t done any benchmarks comparing the two variants, and could be very wrong with regards what happens in actual JavaScript implementations. If I was made to guess, I&amp;rsquo;d say the &lt;code&gt;Uint32Array&lt;/code&gt; would outperform the &lt;code&gt;Array&lt;/code&gt; even with an occasional resize. But feel free to correct me on this in the comments.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&#34;&gt;MDN Bitwise Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array&#34;&gt;MDN Uint32Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Two%27s_complement&#34;&gt;Two&amp;rsquo;s complement on Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.convertforfree.com/twos-complement-calculator/&#34;&gt;Two&amp;rsquo;s complement calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kangax.github.io/compat-table/es6/#test-typed_arrays&#34;&gt;Typed Array browser compatibility table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects&#34;&gt;MDN Global Objects (Indexed collections section)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kangax.github.io/compat-table/es6/#test-typed_arrays&#34;&gt;Browser support of typed arrays&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Visualizing TensorFlow Graphs in Jupyter Notebooks</title>
		<link>https://blog.jakuba.net/tensorboard-visualization/</link>
		<pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/tensorboard-visualization/</guid>
		<description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;em&gt;Prerequisites&lt;/em&gt;: This article assumes you are familiar with the basics of Python, TensorFlow, and Jupyter notebooks.
We won&amp;rsquo;t use any of the advanced TensorFlow features, as our goal is just to visualize the computation graphs.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;TensorFlow operations form a computation graph. And while for small examples
you might be able to look at the code and immediately see what is going on,
larger computation graphs might not be so obvious. Visualizing the graph can help
both in diagnosing issues with the computation itself, but also in understanding
how certain operations in TensorFlow work and how are things put together.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll take a look at a few different ways of visualizing TensorFlow graphs, and most importantly,
show how to do it in a very simple and time-efficient way. It shouldn&amp;rsquo;t take more than one or two lines
of code to draw a graph we have already defined. Now onto the specifics, we&amp;rsquo;ll take a look at the following
visualization techniques:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exploring the textual graph definition&lt;/li&gt;
&lt;li&gt;Building a GraphViz DOTgraph from that directly in the Jupyter Notebook&lt;/li&gt;
&lt;li&gt;Visualizing the same graph in a locally running instance of TensorBoard&lt;/li&gt;
&lt;li&gt;Using a self contained snippet that uses a cloud deployed publically available TensorBoard instance to render the graph inline in a Jupyter Notebook.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First, let us create a simple TensorFlow graph. Regular operations such as creating a placeholder with &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/placeholder&#34;&gt;tf.placeholder&lt;/a&gt; will create a node in the so called &lt;em&gt;default graph&lt;/em&gt;. We can access it via &lt;code&gt;tf.get_default_graph()&lt;/code&gt;, but we can also change it temporarily. In our example below, we&amp;rsquo;ll create a new instance of the &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/Graph&#34;&gt;tf.Graph&lt;/a&gt; object and create a simple operation adding two variables&lt;/p&gt;
&lt;p&gt;$$c = a + b$$&lt;/p&gt;
&lt;p&gt;Note that we&amp;rsquo;re giving explicit names to both of the placeholder variables.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;tensorflow&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;tf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Graph&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;with&lt;/span&gt; g&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;as_default&lt;span style=&#34;color:#eceff4&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;The variable &lt;code&gt;g&lt;/code&gt; now contains a definition of the computation graph for the operation $c = a + b$.
We can use the &lt;code&gt;g.as_graph_def()&lt;/code&gt; method to get a textual representation of the graph for our expression.
While the main use of this is for serialization and later deserialization via &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/import_graph_def&#34;&gt;tf.import_graph_def&lt;/a&gt;, we&amp;rsquo;ll use it to create a GraphViz DOTgraph.&lt;/p&gt;
&lt;p&gt;Let us take a look at the &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/GraphDef&#34;&gt;GraphDef&lt;/a&gt; for our simple
expression. First, we&amp;rsquo;ll inspect the names of all of the nodes in the graph.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; node &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; g&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;as_graph_def&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;node&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;[&#39;a&#39;, &#39;b&#39;, &#39;add&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;As expected, there are three nodes in the Graph. One for each of our variables, and one for the addition
opeartion. The placeholder variable nodes have a name since we explicitely named them when calling &lt;code&gt;tf.placeholder&lt;/code&gt;. If we omit the &lt;code&gt;name&lt;/code&gt; keyword argument, TensorFlow will simply generate a name on its own, as it did with the add operation.&lt;/p&gt;
&lt;p&gt;Next, we can take a look at the edges in the graph. Each GraphDef node has an &lt;code&gt;input&lt;/code&gt; field which specifies
of the nodes where it has edges. Let&amp;rsquo;s take a look:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;as_graph_def&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;node&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;input
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;[&#39;a&#39;, &#39;b&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;As we can see, there are two edges, one to each variable. We can feed this directly into GraphViz.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;building-a-graphviz-dotgraph&#34;&gt;Building a GraphViz DOTgraph&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&#34;http://www.graphviz.org/&#34;&gt;GraphViz&lt;/a&gt; is a fairly popular library for drawing graphs, trees and other graph-shaped data structures. We&amp;rsquo;ll use the &lt;a href=&#34;https://pypi.python.org/pypi/graphviz/0.7.1&#34;&gt;Python GraphViz package&lt;/a&gt; which provides a nice
clean interface. We can install it directly inside a Jupyter notebook via &lt;code&gt;!pip install graphviz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The graph definition itself will be rather simple, and we&amp;rsquo;ll take inspiration from a similar piece of code in
TensorFlow itself (in &lt;a href=&#34;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/quantization/graph_to_dot.py&#34;&gt;graph_to_dot.py&lt;/a&gt;) which generates a DOTgraph file format for a given GraphDef. Unfortunately it is only available as a command line script, and as such we can&amp;rsquo;t call it directly from our code. This is why we&amp;rsquo;ll be implementing it ourselves, but don&amp;rsquo;t worry, it will only
be a few lines of code.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;graphviz&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; Digraph
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dot &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Digraph&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; g&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;as_graph_def&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;node&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Each node has a name and a label. The name identifies the node&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# while the label is what will be displayed in the graph.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# We&amp;#39;re using the name as a label for simplicity.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dot&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;node&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;input&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Edges are determined by the names of the nodes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dot&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;edge&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Jupyter can automatically display the DOT graph,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# which allows us to just return it as a value.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;./index_10_0.svg&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now let&amp;rsquo;s wrap this in a function and try using it on a more complicated expression.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;tf_to_dot&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;graph&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dot &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Digraph&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; n &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; g&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;as_graph_def&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;node&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dot&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;node&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; label&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;input&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dot&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;edge&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; dot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We&amp;rsquo;ll build another graph calculating the area of a circle with the formula $\pi * r^2$.
As we can see TensorFlow does what we would actually expect and links the same placeholder
to two multiplication operations.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Graph&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;with&lt;/span&gt; g&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;as_default&lt;span style=&#34;color:#eceff4&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pi &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;constant&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3.14&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;pi&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; pi &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; r &lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tf_to_dot&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;./index_14_0.svg&#34; alt=&#34;svg&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;using-a-local-tensorboard-instance-to-visualize-the-graph&#34;&gt;Using a local TensorBoard instance to visualize the graph&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;While GraphViz might be nice for visualizing small graphs, neural networks can grow to quite a large size.
TensorBoard allows us to easily group parts of our equations into &lt;em&gt;scopes&lt;/em&gt;, which will then be visually
separated in the resulting graph. But before doing this, let&amp;rsquo;s just try visualizing our previous graph
with TensorBoard.&lt;/p&gt;
&lt;p&gt;All we need to do is save it using the &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/summary/FileWriter&#34;&gt;tf.summary.FileWriter&lt;/a&gt;, which takes a directory and a graph, and serializes
the graph in a format that TensorBoard can read. The directory can be anything you&amp;rsquo;d like, just make sure you point to the same directory using the &lt;code&gt;tensorboard --logdir=DIR&lt;/code&gt; command (&lt;code&gt;DIR&lt;/code&gt; being the directory you specified to the &lt;code&gt;FileWriter&lt;/code&gt;).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# We write the graph out to the `logs` directory&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;summary&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;FileWriter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;logs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; g&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;close&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Next, open up a console and navigate to the same directory from which you executed the &lt;code&gt;FileWriter&lt;/code&gt; command, and run &lt;code&gt;tensorboard --logdir=logs&lt;/code&gt;. This will launch an instance of TensorBoard which you can access at &lt;a href=&#34;http://localhost:6006&#34;&gt;http://localhost:6006&lt;/a&gt;. Then navigate to the &lt;code&gt;Graphs&lt;/code&gt; section and you should see a graph that looks like the following image. Note that you can also click on the nodes in the graph to inspect them further.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/XajS4Tv.png&#34; alt=&#34;tensorboard graph&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Now this is all nice and interactive, but we can already see some things which make it harder to read. For example, when we type $\pi * r^2$ we generally don&amp;rsquo;t think of the $r^2$ as a multiplication operation (even though we implement it as such), we think of it as a &lt;em&gt;square&lt;/em&gt; operation. This becomes more visible when the graph contains a lot more
operations.&lt;/p&gt;
&lt;p&gt;Luckily, TensorFlow allows us to bundle operations together into a single unit called &lt;em&gt;scope&lt;/em&gt;. But first, lets take a look at a more complicated example without using scopes. We&amp;rsquo;ll create a very simple feed forward neural network with three layers (with respective weights $W_1, W_2, W_3$ and biases $b_1, b_2, b_3$).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Graph&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;with&lt;/span&gt; g&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;as_default&lt;span style=&#34;color:#eceff4&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    X &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    W1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;W1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;b1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;relu&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;matmul&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;X&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; W1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; b1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    W2 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;W2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b2 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;b2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a2 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;relu&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;matmul&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a1&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; W2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; b2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    W3 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;W3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    b3 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;b3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    y_hat &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;matmul&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a2&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; W3&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; b3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;summary&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;FileWriter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;logs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; g&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;close&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Looking at the result in TensorBoard, the result is pretty much what we would expect. The only problem is, TensorBoard displays it as a single expression. It isn&amp;rsquo;t immediately apparent that we meant to think about our code in terms of layers.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/pwcEAgb.png&#34; alt=&#34;simple feedforward neural network without scopes&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We can improve this by using the above-mentioned &lt;a href=&#34;https://www.tensorflow.org/api_docs/python/tf/name_scope&#34;&gt;tf.name_scope&lt;/a&gt;
function. Let us rewrite our feedforward network code to separate each layer into its own scope.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;g &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;Graph&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;with&lt;/span&gt; g&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;as_default&lt;span style=&#34;color:#eceff4&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    X &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;X&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;with&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name_scope&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Layer1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        W1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;W1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;b1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        a1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;relu&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;matmul&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;X&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; W1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; b1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;with&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name_scope&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Layer2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        W2 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;W2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b2 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;b2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        a2 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;nn&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;relu&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;matmul&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a1&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; W2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; b2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;with&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name_scope&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Layer3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        W3 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;W3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b3 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;placeholder&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;float32&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;b3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        y_hat &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;matmul&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a2&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; W3&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; b3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;summary&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;FileWriter&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;logs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; g&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;close&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And here&amp;rsquo;s how the resulting graph looks like, showing both a compact view of the whole network (left) and what it looks like when you expand one of the nodes (right).&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/6HIpspV.png&#34; alt=&#34;simple feedforward network with scopes&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;using-a-cloud-hosted-tensorboard-instance-to-do-the-rendering&#34;&gt;Using a cloud-hosted TensorBoard instance to do the rendering&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;We&amp;rsquo;ll use the modified snippet from the &lt;a href=&#34;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/examples/tutorials/deepdream/deepdream.ipynb&#34;&gt;DeepDream notebook&lt;/a&gt;
taken from &lt;a href=&#34;https://stackoverflow.com/a/41463991/72583&#34;&gt;this StackOverflow answer&lt;/a&gt;. It basically takes the &lt;code&gt;tf.GraphDef&lt;/code&gt;,
sends it over to the cloud, and embeds an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; with the resulting visualization right in the Jupyter notebook.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the snippet in its whole. All you need to do is call &lt;code&gt;show_graph()&lt;/code&gt; and it will handle everything, as shown in the
example below on our previous graph &lt;code&gt;g&lt;/code&gt;. The obvious advantage of this approach is that you don&amp;rsquo;t need to run TensorBoard
to visualize the data, but you also need internet access.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# TensorFlow Graph visualizer code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;numpy&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;np&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;IPython.display&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; clear_output&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; Image&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; display&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; HTML
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;strip_consts&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;graph_def&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; max_const_size&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Strip large constant values from graph_def.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    strip_def &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tf&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;GraphDef&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; n0 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;in&lt;/span&gt; graph_def&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;node&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; strip_def&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;node&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;MergeFrom&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n0&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;op &lt;span style=&#34;color:#81a1c1&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;Const&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            tensor &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; n&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;attr&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;tensor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            size &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;len&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;tensor&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;tensor_content&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; size &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; max_const_size&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                tensor&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;tensor_content &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;lt;stripped &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt; bytes&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;%&lt;/span&gt;size
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; strip_def
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;show_graph&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;graph_def&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; max_const_size&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Visualize TensorFlow graph.&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;hasattr&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;graph_def&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;as_graph_def&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        graph_def &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; graph_def&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;as_graph_def&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    strip_def &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; strip_consts&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;graph_def&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; max_const_size&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;max_const_size&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    code &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;lt;script src=&amp;#34;//cdnjs.cloudflare.com/ajax/libs/polymer/0.3.3/platform.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;lt;script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;          function load() {\{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;            document.getElementById(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;{id}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;).pbtxt = &lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;{data}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;          }\}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;lt;link rel=&amp;#34;import&amp;#34; href=&amp;#34;https://tensorboard.appspot.com/tf-graph-basic.build.html&amp;#34; onload=load()&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;lt;div style=&amp;#34;height:600px&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;          &amp;lt;tf-graph-basic id=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;{id}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;gt;&amp;lt;/tf-graph-basic&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;format&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;repr&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;strip_def&lt;span style=&#34;color:#eceff4&#34;&gt;)),&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;graph&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;np&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;rand&lt;span style=&#34;color:#eceff4&#34;&gt;()))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    iframe &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;        &amp;lt;iframe seamless style=&amp;#34;width:1200px;height:620px;border:0&amp;#34; srcdoc=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;format&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;code&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;replace&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;&amp;amp;quot;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    display&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;HTML&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;iframe&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# Simply call this to display the result. Unfortunately it doesn&amp;#39;t save the output together with&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# the Jupyter notebook, so we can only show a non-interactive image here.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;show_graph&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/9sjrCUn.png&#34; alt=&#34;cloud hosted tensorboard output&#34;&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;
&lt;p&gt;Thats it for this article! Hopefully this article showed you a few tricks that can help you solve TensorFlow problems more
effectively. Here are a few links to related articles and references that further describe TensorBoard.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.tensorflow.org/get_started/graph_viz&#34;&gt;TensorBoard Graph Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eBbEDRsCmv4&amp;amp;index=5&amp;amp;list=PLOU2XLYxmsIKGc_NBoIhTn2Qhraji53cv&#34;&gt;Hands-On TensorBoard (TensorFlow Dev Summit 2017) [YouTube]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tensorboard/README.md&#34;&gt;TensorBoard README&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any questions or feedback, please do leave a comment!&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
	</item>
	
	<item>
		<title>Fibonacci Numbers</title>
		<link>https://blog.jakuba.net/2015-08-08-fibonacci-numbers/</link>
		<pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2015-08-08-fibonacci-numbers/</guid>
		<description>&lt;p&gt;The Fibonacci numbers are a well known recursive sequence, which is
defined as followed&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;f[0] = 0
f[1] = 1
f[n] = f[n-1] + f[n-2]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The question is, how can we calculate them?&lt;/p&gt;
&lt;p&gt;The first idea and probably most intuitive way is recursively. Why?
Because the structure of the sequence itself is recursive, which means
the implementation will be very similar to our definition.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll chose JavaScript as the implementation language, simply because you
can just open the developer console in your browser and paste in the
snippets to see the results immediately.&lt;/p&gt;
&lt;h2 id=&#34;1-straightforward-recursive-implementation&#34;&gt;1. Straightforward recursive implementation&lt;/h2&gt;
&lt;p&gt;We can simply take our definition, add a little bit of syntax, and
voilà, we&amp;rsquo;re done.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; fib&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; fib&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; fib&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First thing we should test to see if this function actually works.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; [fib(0), fib(1), fib(2), fib(3), fib(4), fib(5)]
[0, 1, 1, 2, 3, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Everything looks nice, but what if we try to calculate a larger number?
What is the largest number that our computer will be able to calculate
using this implementation? You might be tempted to figure this out by
trial and error, but let&amp;rsquo;s try calculating this first.&lt;/p&gt;
&lt;p&gt;By a very rough estimate, we could say that a modern computer does
around 1000 000 000 operations per second. One computer might be 10 or
100 times faster than another computer, but that won&amp;rsquo;t really bother us,
since the end result will be the same.&lt;/p&gt;
&lt;p&gt;To get any reasonable estimate, we should first figure out the
algorithmic complexity of our little function. At first it seems it
should be linear, since to calculate &lt;code&gt;fib(20)&lt;/code&gt; you only need &lt;code&gt;fib(19)&lt;/code&gt;
and &lt;code&gt;fib(18)&lt;/code&gt;, and so on. Except that &lt;code&gt;fib(19)&lt;/code&gt; will calculate &lt;code&gt;fib(18)&lt;/code&gt;
again. We can see this more easily by visualizing it as a tree:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/q3ZohJN.png&#34; alt=&#34;Fibonacci tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see, we&amp;rsquo;re calling &lt;code&gt;fib(n)&lt;/code&gt; multiple times for the same
input. Specifically, the height of the tree will be $n$, since the
calculated value decreases by $1$ on each level. If this was a balanced
binary tree, we could easily conclude that it has an exponential number
of nodes, $2^n$ to be specific, but you can already see that one of the
two branches will have fewer children. How many exactly? Let&amp;rsquo;s use a bit
of math.&lt;/p&gt;
&lt;p&gt;We can use the same exact formula for calculating the number of nodes,
since:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the trees for both &lt;code&gt;fib(0)&lt;/code&gt; and &lt;code&gt;fib(1)&lt;/code&gt; have &lt;code&gt;1&lt;/code&gt; node.&lt;/li&gt;
&lt;li&gt;the tree for &lt;code&gt;fib(2)&lt;/code&gt; has &lt;code&gt;3&lt;/code&gt; nodes, since it needs to calculate
&lt;code&gt;fib(0)&lt;/code&gt; and &lt;code&gt;fib(1)&lt;/code&gt;, which both have &lt;code&gt;1&lt;/code&gt; node, and then put those two together.&lt;/li&gt;
&lt;li&gt;the tree for &lt;code&gt;fib(3)&lt;/code&gt; has the height &lt;code&gt;1 + fib(2), fib(1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;in general, the tree for &lt;code&gt;fib(N)&lt;/code&gt; has exactly &lt;code&gt;fib(N-1) + fib(N-2) + 1&lt;/code&gt; nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given $f_0 = 0,\ f_1 = 1$ and $f_{n+2} = f_{n+1} + f_{n} + 1$,
we can see that it already grows faster than Fibonacci numbers, so if we
could simplify this and show that the Fibonacci numbers grow
exponentially, it would also mean that the number of nodes in the tree
grow exponentially.  There are many ways to derive the closed form formula for Fibonacci
numbers, &lt;a href=&#34;http://austinrochford.com/posts/2013-11-01-generating-functions-and-fibonacci-numbers.html&#34;&gt;but here&amp;rsquo;s a link to a really nice explanation using generating
functions&lt;/a&gt; (the same formula can also be &lt;a href=&#34;http://www.the-idea-shop.com/article/218/the-linear-algebra-view-of-the-fibonacci-sequence&#34;&gt;derived using linear algebra&lt;/a&gt;.)
The resulting formula is:&lt;/p&gt;
&lt;p&gt;$$f_n = \frac{1}{\sqrt{5}} \left( \left( \frac{1 + \sqrt{5}}{2} \right)^n - \left(\frac{1 - \sqrt{5}}{2} \right)^n \right)$$&lt;/p&gt;
&lt;p&gt;At this point we can see that the Fibonacci numbers grow exponentially,
and so will the number of nodes in the computation tree for our naive
recursive implementation.&lt;/p&gt;
&lt;p&gt;This is where the problem comes, since a binary tree of height $n$ will
have $O(2^n)$ nodes, meaning our complexity is exponential (even though
the real complexity is something like $O(1.6^n)$, it is still
exponential.)&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;fib(40)&lt;/code&gt; this would be roughly $10^{12}$, &lt;code&gt;fib(50)&lt;/code&gt; would be $10^{15}$,
and so on. Even if we get a very fast computer, we wouldn&amp;rsquo;t be able to
get anywhere near &lt;code&gt;fib(100)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can already see that this algorithm is clearly bad and wouldn&amp;rsquo;t be
very practical in real life (if you ever needed Fibonacci numbers in
real life.), so let&amp;rsquo;s try to improve it.&lt;/p&gt;
&lt;p&gt;It feels as if the algorithm should be linear. I bet that if someone
asked you to calculate the first 20 Fibonacci numbers on paper, you&amp;rsquo;d
start with $0$ and $1$, and then just iterate forward.&lt;/p&gt;
&lt;h2 id=&#34;2-recursive-implementation-with-dynamic-programming&#34;&gt;2. Recursive implementation with dynamic programming&lt;/h2&gt;
&lt;p&gt;Ideally we&amp;rsquo;d like to keep our simple recursive implementation while
improving the performance to a point where it&amp;rsquo;s comparable to an
iterative solution (in terms of speed.) Earlier we established that the
main bottleneck lies in the repetitive computations.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use dynamic programming to fix this, which basically introduces a
cache (or a memoization mechanism, also called a dynamic programming
table) which is used to store the intermediary result. Once we compute a
number for a specific parameter, we&amp;rsquo;ll store it in the table and never
compute it again. This way we only need to compute each number once,
landing at linear time complexity.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; table &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; fib&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;typeof&lt;/span&gt; table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;undefined&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; fib&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; fib&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that we don&amp;rsquo;t need to resize the array to fit the values. This is
only possible due to JavaScript&amp;rsquo;s array implementation, which behaves a
lot more like hash-maps than like arrays.&lt;/p&gt;
&lt;p&gt;While we did speed up the algorithm significantly, we also traded
computation time for memory, as computing &lt;code&gt;fib(N)&lt;/code&gt; will require a table of
size &lt;code&gt;N&lt;/code&gt; to store the intermediate results. Before optimizing this
further, we can look at one more dynamic programming solution.&lt;/p&gt;
&lt;p&gt;In general there are two ways to approach dynamic programming. One is
top-down, which is what we&amp;rsquo;ve done in the previous example, and the
second one is bottom-up, which is shown in the next snippet.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; fib&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; table &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;=&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;i &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; table&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Highlighting the differences between top-down and bottom-up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;top-down generally starts at the solution, and recursively computes
all the dependencies using memoization&lt;/li&gt;
&lt;li&gt;bottom-up starts builds up bigger solutions from smaller ones, until
it reaches the final solution&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is an obviously simple example, but it is quite useful to know both
of these approaches, as some problems are easier to solve top-down, and
some are easier to solve using the bottom-up approach.&lt;/p&gt;
&lt;p&gt;Regardless of which approach you chose, it still uses $O(N)$ memory.
While this is not ideal if you just want to compute a single value,
having the table pre-computed might come in very handy if you&amp;rsquo;re calling
the function often to get different Fibonacci numbers. I&amp;rsquo;ll leave it as
an exercise to the reader to modify the bottom-up approach to remember
the cached values between the calls, and only compute the needed part of
the table, such that calling &lt;code&gt;fib(10)&lt;/code&gt; and then &lt;code&gt;fib(15)&lt;/code&gt; would compute
the first 10 Fibonacci numbers only once.&lt;/p&gt;
&lt;h2 id=&#34;3-iteration&#34;&gt;3. Iteration&lt;/h2&gt;
&lt;p&gt;Last but not least, we can get rid of the memoization table, and only
compute the n-th number. This is rather easy by modifying the bottom-up
dynamic programming approach.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt; fib&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; y &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;n &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;=&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#81a1c1&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; tmp &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      y &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      x &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; tmp&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; n&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The advantage of this approach is that we get the best of both worlds.
The algorithm runs in linear time and consumes only a constant amount of
memory, and there&amp;rsquo;s no recursion, so we don&amp;rsquo;t have to worry about
stack-limit-exceeded types of errors.&lt;/p&gt;
&lt;p&gt;The downside is that if you&amp;rsquo;re going to be calculating lots of Fibonacci
numbers, it will do the work over and over again, while the dynamic
programming approaches could make use of memoization. (Note that the
iterative approach could be also classified as bottom-up dynamic
programming, but for the sake of illustration, I&amp;rsquo;m showing dynamic
programming with an explicit use of a memoization table.)&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In conclusion, there&amp;rsquo;s no single best solution, and you should pick one
based on your use case. While Fibonacci numbers are a very simple
example, you can already see that there are multiple approaches to the
same problem, without a clear winner.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Thoughts on OS X Yosemite, Arch Linux and xmonad</title>
		<link>https://blog.jakuba.net/2014-11-16-thoughts-on-os-x-yosemite-arch-linux-and-xmonad/</link>
		<pubDate>Sun, 16 Nov 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-11-16-thoughts-on-os-x-yosemite-arch-linux-and-xmonad/</guid>
		<description>&lt;p&gt;I&amp;rsquo;ve been using OS X as my main machine for quite a while now, mainly
because I got into Ruby development, and having a Mac is just the thing
you do when you write Ruby (at least that&amp;rsquo;s what I thought back then.)
One of the main reasons why I really fell in love with the Mac is that
things just work. There is no hassle in setting up your drivers, or
connecting a printer, or getting your favorite app to work. Everything
works out of the box.&lt;/p&gt;
&lt;p&gt;We even have homebrew, which is really nice, as long as the thing you
need has a formula that someone has tried before. This is where things
start to get a bit hairy sometimes though. Things that are popular
usually work 100%, on the other hand, programs which aren&amp;rsquo;t in the core
repertoire of a Mac developer either don&amp;rsquo;t have have a formula at all,
or it is broken and/or outdated (I know there are things that work
wonderfully on the Mac that don&amp;rsquo;t work so well on other platforms, but
that&amp;rsquo;s not the point here.) To put this in another words, as long as I
was doing what everyone else was doing I really enjoyed the Mac.&lt;/p&gt;
&lt;p&gt;One thing I really admired about the Mac is that everything was designed
to be perfect. The key word here is &lt;em&gt;was&lt;/em&gt;. We got a whole new user
interface with the OS X Yosemite update, which I actually do like a lot,
but we also got a huge number of buggy and incomplete things. There are
parts of the UI that are clearly broken, especially in the dark skin.
Handoff and continuity works only when it wants to work, and when it
does, it is really slow. The most annoying thing is that when somebody
calls me on my phone, and the Mac start ringing, and I pickup the phone
because I have it close, the Mac keeps ringing loudly for another 3-5
seconds, making it impossible to hear the person on the phone. While
this might seem really minor, it gets so annoying that I turned off the
feature after 2-3 phone calls. There are more things like this that are
tiny and broken, it just isn&amp;rsquo;t the Apple it used to be.&lt;/p&gt;
&lt;p&gt;This is when I decided that my next computer isn&amp;rsquo;t going to be a Mac.&lt;/p&gt;
&lt;h2 id=&#34;choosing-the-right-linux-distro&#34;&gt;Choosing the right Linux distro&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve always been using Linux on the side, mostly because you can get a
tiny 13&amp;quot; Lenovo for 1/3rd of the price of a Macbook Air (Macbook Air
starts at about $1500 in my country, while the Lenovo I&amp;rsquo;m typing on
right now costed about $500.) I always just installed Ubuntu, since
that&amp;rsquo;s the thing that works.&lt;/p&gt;
&lt;p&gt;The thing is that I never really liked Ubuntu itself. It&amp;rsquo;s an OK
distribution, and I would recommend it to anyone who isn&amp;rsquo;t familiar with
Linux, just because you can get it working really quickly and there are
no surprises on the way.&lt;/p&gt;
&lt;p&gt;But I don&amp;rsquo;t want to be a casual Linux user anymore, I want to customize
everything based on my needs. I don&amp;rsquo;t want to use 95% of the apps that
come installed with Ubuntu, not even Gnome. The reason why I used it is
because it installed in almost a &lt;em&gt;one click install&lt;/em&gt;, but that&amp;rsquo;s a poor
reason to choose a distribution.&lt;/p&gt;
&lt;p&gt;This is where I made the choice to go with Arch Linux. I tried it once a
few years ago, but it didn&amp;rsquo;t really stick back then, becuase my
mentality was to &lt;em&gt;install everything and make it look like a Mac&lt;/em&gt;, which
obviously didn&amp;rsquo;t work because I was lacking the Mac apps.&lt;/p&gt;
&lt;p&gt;But now I think I finally understand the philosophy that one should
follow when using a distribution like Arch Linux.&lt;/p&gt;
&lt;h2 id=&#34;xmonad&#34;&gt;xmonad&lt;/h2&gt;
&lt;p&gt;Choosing a window manager was probably the easiest decision. At first I
thought about not using a GUI at all, and just live in a tmux session,
but that wouldn&amp;rsquo;t really work with the web-based development that I do
these days, so I just grabbed the next closest thing to tmux, which is
&lt;em&gt;xmonad&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s been only a few days, but I can already feel the power. Just being
able to hit the keyboard once and have a terminal pop up &lt;em&gt;instantly&lt;/em&gt; is
an amazing feature. I&amp;rsquo;m not sure if it&amp;rsquo;s the terminal emulator I&amp;rsquo;m
using, or if it&amp;rsquo;s xmonad, but opening a new terminal is &lt;em&gt;really, really,
really fast&lt;/em&gt;. If I didn&amp;rsquo;t have such a slow &lt;code&gt;~/.zshrc&lt;/code&gt; it would open as
fast as I let go of the keyboard, but right now there is about 100ms
delay (yeah I&amp;rsquo;m gonna have to optimize my zsh.) This might not seem like
a big deal, but actually being able to open a terminal at any time, type
one command, and immediately close it is &lt;em&gt;amazing&lt;/em&gt;. I can be browsing
the web and see something I want to try, and without grabbing the mouse
just open a split terminal window and re-write the command from the web
page, then close the terminal and keep browsing, all without ever
touching the mouse.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m still waiting to try this on a bigger screen than my tiny 13&amp;quot;, but
I&amp;rsquo;m pretty sure that once I run this on a big screen, I won&amp;rsquo;t be able to
go back to using a regular ol&amp;rsquo; OS X (yes there are xmonad-like things
for OS X, but they don&amp;rsquo;t really work in my testing.)&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Parsing CSS with Parsec</title>
		<link>https://blog.jakuba.net/2014-08-10-parsing-css-with-parsec/</link>
		<pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-08-10-parsing-css-with-parsec/</guid>
		<description>&lt;p&gt;This article is a small introduction to
&lt;a href=&#34;http://hackage.haskell.org/package/parsec&#34;&gt;Parsec&lt;/a&gt;, the Haskell parser
combinator library for Haskell. We&amp;rsquo;ll use it to parse simple CSS file
such as the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;container&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;rgba&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0.9&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;px&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First we need to figure out our data structure which will represent the
syntax tree. Since this is just an introduction, we&amp;rsquo;ll go easy and
ignore features like media queries.&lt;/p&gt;
&lt;p&gt;In order to create the structure we need to figure out how to name
things. We can look at the &lt;a href=&#34;http://www.w3.org/TR/CSS2/grammar.html&#34;&gt;grammar definition for CSS
2.1&lt;/a&gt; to figure out how things
are named, from which we can tell that the main unit is a &lt;code&gt;ruleset&lt;/code&gt;, has
a &lt;code&gt;selector&lt;/code&gt; and a list of &lt;code&gt;declarations&lt;/code&gt;. Let&amp;rsquo;s call it a &lt;code&gt;rule&lt;/code&gt;
instead of a &lt;code&gt;declaration&lt;/code&gt; to keep things short. Each rule then has a
&lt;code&gt;property&lt;/code&gt; and a &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Selector&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Selector&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;basic-parsec-combinators&#34;&gt;Basic parsec combinators&lt;/h2&gt;
&lt;p&gt;The way that parsec work is that you build up small parsers and combine
them into bigger ones. We could write a parser for a rule, such as
&lt;code&gt;color: red;&lt;/code&gt;, which would first parse a property, then a colon, then
some optional spaces and finally a value with an optional semicolon at
the end.&lt;/p&gt;
&lt;p&gt;Here are some basic parsers from the Parsec library.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;char&lt;/code&gt; - Parses a single character.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; - Parses an arbitrary string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optional&lt;/code&gt; - Takes a parser and makes it optional.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;many&lt;/code&gt; - Takes a parser for a single item and makes it into a parser for 0 to N items.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;many1&lt;/code&gt; - Same as &lt;code&gt;many&lt;/code&gt;, only that it requires at least one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;letter&lt;/code&gt; - Parses any letter.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;digit&lt;/code&gt; - Parses a digit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To parse a colon we could do &lt;code&gt;char &#39;:&#39;&lt;/code&gt;. If that colon was optional, we
can just combine it with the &lt;code&gt;optional&lt;/code&gt; combinator, such as &lt;code&gt;optional (char &#39;:&#39;)&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how a simple parser for &lt;code&gt;Rule&lt;/code&gt; could look like.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Text.Parsec&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Text.Parsec.String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 letter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    optional &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 letter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    optional &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; p v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You might have already noticed that &lt;code&gt;Parser&lt;/code&gt; is indeed a Monad, which is
why we&amp;rsquo;re using the &lt;code&gt;do&lt;/code&gt; notation, and why we are able to combine many
small parsers together. This is where the power of Parsec comes in,
because it is very easy to combine small parsers to build something that
you can use in the real world.&lt;/p&gt;
&lt;p&gt;Now comes the time to test our parser. Parsec defines a function called
&lt;code&gt;parse&lt;/code&gt;, which accepts a parser, a source name and a source string, and
returns &lt;code&gt;Either&lt;/code&gt; a &lt;code&gt;ParseError&lt;/code&gt; if our parsing failed, or the parsed
value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Text.Parsec&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;line &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; column &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;unexpected&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;expecting&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;many1 letter&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We might also need to say something like &lt;em&gt;parse any number of letters or
digits&lt;/em&gt;. This is where the &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; combinator comes in, which allows us to
say the &lt;em&gt;or&lt;/em&gt; part. It takes two parsers as arguments and returns a new
parser, which tries to parse with the first one, and if it fails tries
the second one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;many1 &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; letter &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; digit&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello123&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello123&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;when-parsing-fails&#34;&gt;When parsing fails&lt;/h1&gt;
&lt;p&gt;There is one thing very important to understand here. As the parsers try
to parse the input, they consume it. If you use &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; to combine two
parsers together, and the first parser fails after already consuming
some input, the second parser will continue where the first one left
off. Here&amp;rsquo;s an example that illustrates this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hay&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hoy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hoy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Left&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;line &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; column &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;unexpected&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;expecting&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hay&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re trying to parse either &lt;code&gt;&amp;quot;hay&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;hoy&amp;quot;&lt;/code&gt;, giving it an input of
&lt;code&gt;&amp;quot;hoy&amp;quot;&lt;/code&gt;. It seems that this should obviously succeed, but it doesn&amp;rsquo;t,
because the first parser consumes the first character &lt;code&gt;&amp;quot;h&amp;quot;&lt;/code&gt; and then it
fails.&lt;/p&gt;
&lt;p&gt;We could write rewrite this in another way.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;h&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;ey&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;oy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hoy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;oy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we used a do block we could&amp;rsquo;ve actually achieved the end result of
parsing the whole &lt;code&gt;&amp;quot;hoy&amp;quot;&lt;/code&gt; string, but there&amp;rsquo;s a much easier way, by
using &lt;code&gt;try&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;try&lt;/code&gt; on any parser makes it backtrack when it fails while
consuming a part of the input.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;try &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;string &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hay&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hoy&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hoy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hoy&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that we only need to use &lt;code&gt;try&lt;/code&gt; with our first parser, since there
is nothing left to do if the second parser fails. &lt;code&gt;try&lt;/code&gt; doesn&amp;rsquo;t affect
how the parser works, only what happens when it fails.&lt;/p&gt;
&lt;p&gt;The bottom line here is, if you&amp;rsquo;re combining together multiple parsers
where one could consume some input and then fail, use &lt;code&gt;try&lt;/code&gt;. There are
cases when you don&amp;rsquo;t need to do this, such as when we did &lt;code&gt;letter &amp;lt;|&amp;gt; digit&lt;/code&gt;. Since those two parsers don&amp;rsquo;t overlap in their domain, we don&amp;rsquo;t
need to use &lt;code&gt;try&lt;/code&gt; there.&lt;/p&gt;
&lt;p&gt;The reason why parsec behaves this way is simply because of performance.
Careless usage of &lt;code&gt;try&lt;/code&gt; can make the parser slower, but since we&amp;rsquo;re just
trying to understand how things work, we don&amp;rsquo;t need to worry about this.&lt;/p&gt;
&lt;h2 id=&#34;the-css-parser&#34;&gt;The CSS parser&lt;/h2&gt;
&lt;p&gt;Before we move on any further, let&amp;rsquo;s improve our original &lt;code&gt;rule&lt;/code&gt; parser.
We didn&amp;rsquo;t really account for spaces, since CSS rules can be indented and
there can be arbitrary number of spaces after the &lt;code&gt;:&lt;/code&gt;, and values can
have more than just letters, such as &lt;code&gt;#FFF&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;spaces&lt;/code&gt; parser which skips &lt;em&gt;zero or more whitespace characters&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 letter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    spaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 letter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; p v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to figure out how to tell parsec that we also want things
other than just letters in the property value. We could use &lt;code&gt;oneOf&lt;/code&gt; to
name all of the symbols we&amp;rsquo;d like to accept, such as &lt;code&gt;oneOf &amp;quot;#()%&amp;quot;&lt;/code&gt;,
which parses one character out of the given set. But to keep things
simple, let&amp;rsquo;s just say that the value can be &lt;em&gt;anything but a &lt;code&gt;;&lt;/code&gt;&lt;/em&gt;. We
can use the &lt;code&gt;noneOf&lt;/code&gt; combinator for that. We&amp;rsquo;ll also make the &lt;code&gt;;&lt;/code&gt;
non-optional to save ourselves some trouble, and accept any number of
whitespace after the whole rule definition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    p &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 letter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    spaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    v &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;noneOf &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    spaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; p v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s test this out.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse rule &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;css parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;background: #fafafa;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;background&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;#fafafa&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse rule &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;css parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;background: rgba(255, 255, 255, 0.3);&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;background&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;rgba(255, 255, 255, 0.3)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can even try parsing multiple rules at once using &lt;code&gt;many1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;many1 rule&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;css parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;background: rgba(255, 255, 255, 0.3); color: red;&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;border: 1px solid black;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;background&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;rgba(255, 255, 255, 0.3)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;border&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;1px solid black&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now moving onto the parser for a whole ruleset. Let&amp;rsquo;s do the same thing
as we did with values and say that &lt;em&gt;a selector can be any character
except for {&lt;/em&gt;. Next we have the &lt;code&gt;{&lt;/code&gt;, followed by any number of spaces,
followed by a list of rules, followed by a closing &lt;code&gt;}&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ruleset&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ruleset&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;noneOf &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    spaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 rule
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    spaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt; s r
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s test this out.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse ruleset &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;css parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;p { color: red; }&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;p &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse ruleset &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;css parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;p { background: #fafafa;&lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt; color: red; }&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;p &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;background&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;#fafafa&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And everything seems to be working properly. You might notice that our
selector is being parsed as &lt;code&gt;&amp;quot;p &amp;quot;&lt;/code&gt; instead of just &lt;code&gt;&amp;quot;p&amp;quot;&lt;/code&gt;. This is
because we were too relaxed on our definition, but that&amp;rsquo;s easy to fix.
But first let&amp;rsquo;s do a bit of refactoring.&lt;/p&gt;
&lt;h2 id=&#34;refactoring-the-parser-using-applicative&#34;&gt;Refactoring the parser using Applicative&lt;/h2&gt;
&lt;p&gt;Because the &lt;code&gt;Parser&lt;/code&gt; monad is also an instance of &lt;code&gt;Applicative&lt;/code&gt;, we can
use a lot of the combinators that &lt;code&gt;Applicative&lt;/code&gt; gives us to cleanup our
code. The most useful ones are &lt;code&gt;*&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;*&lt;/code&gt;, where &lt;code&gt;*&amp;gt;&lt;/code&gt; takes two
parsers, runs the first one, throws away the result, then runs the
second one and returns its result (exactly the same as &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; does for
monads). &lt;code&gt;&amp;lt;*&lt;/code&gt; does the same thing, but the other way around, here are a
couple of examples.&lt;/p&gt;
&lt;p&gt;The reason why I&amp;rsquo;m hiding the &lt;code&gt;&amp;lt;|&amp;gt;&lt;/code&gt; in the import here is because we
need the definition from Parsec, not from Applicative.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Control.Applicative&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;hiding&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;spaces &lt;span style=&#34;color:#81a1c1&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;  hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&amp;gt;&lt;/span&gt; string &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;(hello)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; spaces&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;;     &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; spaces&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;; &lt;/span&gt;&lt;span style=&#34;color:#ebcb8b&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see the usage is pretty straightforward. We could write the
same thing using a &lt;code&gt;do&lt;/code&gt; notation, but using the Applicative combinators
make the code easier to read once you get used to them. You can think of
them as pointing in the direction of the result.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how we could refactor our rule parser.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  p &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 letter &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; spaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;noneOf &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; char &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; spaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; p v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can even define a helper that would take a parser and apply &lt;code&gt;&amp;lt;* spaces&lt;/code&gt; to it, since we&amp;rsquo;re using that quite a lot, but this is just a
matter of taste.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;paddedChar&lt;/span&gt; c &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; char c &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; spaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  p &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 letter &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; paddedChar &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  v &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;noneOf &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; paddedChar &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; p v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s do the same thing for our ruleset parser.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ruleset&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ruleset&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; many1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;noneOf &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; paddedChar &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&amp;gt;&lt;/span&gt; many1 rule &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; paddedChar &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt; s r
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have refactored everything, it&amp;rsquo;s time to make the selector
parsing more strict. The new parser will be defined as &lt;em&gt;a sequence of
characters consisting of letters, numbers, dots and hashes, separated by
spaces&lt;/em&gt;`.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;selector&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;selector&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; many1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;oneOf &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;.#&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; letter &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; digit&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; spaces
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then the actual selector for the ruleset will be just many of our
&lt;code&gt;selector&lt;/code&gt; parsers in a row, separated by spaces. We&amp;rsquo;ll use the &lt;code&gt;sepBy1&lt;/code&gt;
combinator for this, which takes a parser specifying the separator and
returns a list of parsed values.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;selector &lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt;sepBy1&lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt; spaces&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;test parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;.container h1 &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;.container&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;h1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we&amp;rsquo;ve succesfully parsed the selector, we can combine it back
into a single string using the &lt;code&gt;unwords&lt;/code&gt; function from prelude.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ruleset&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ruleset&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; selector &lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt;sepBy1&lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt; spaces
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; paddedChar &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;*&amp;gt;&lt;/span&gt; many1 rule &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&lt;/span&gt; paddedChar &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;unwords s&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And let&amp;rsquo;s test this once again to make sure everything works.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; parse ruleset &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;css parser&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;.container h1 { color: red; }&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Right&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Ruleset&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;.container h1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Rule&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, our selector now doesn&amp;rsquo;t contain the trailing spaces.&lt;/p&gt;
&lt;h2 id=&#34;closing-thoughts&#34;&gt;Closing thoughts&lt;/h2&gt;
&lt;p&gt;The parser we developed in this article is far from complete, but feel
free to extend it to support things like pseudo classes, comments, etc.&lt;/p&gt;
&lt;p&gt;While it&amp;rsquo;s not so common to do TDD in Haskell, I&amp;rsquo;d recommend writing a
lot of unit tests for your parser. It&amp;rsquo;s easy to play around in the REPL
and test things out, but once you start composing multiple parsers
together it gets very tedious to have to check different versions of the
string you&amp;rsquo;re parsing every time you make a change. Unlike in regular
Haskell code you can&amp;rsquo;t really rely on the type system that much, since
you&amp;rsquo;re just working with strings.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Lens Tutorial - Stab &amp; Traversal (Part 2)</title>
		<link>https://blog.jakuba.net/2014-08-06-lens-tutorial-stab-traversal-part-2/</link>
		<pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-08-06-lens-tutorial-stab-traversal-part-2/</guid>
		<description>&lt;p&gt;In the &lt;a href=&#34;https://blog.jakuba.net/2014/07/14/lens-tutorial-introduction-part-1.html&#34;&gt;first article in the series about lenses&lt;/a&gt;,
we&amp;rsquo;ve looked at the motivation behind the lens library, and we also
derived the basic type of &lt;code&gt;Lens s a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this article we&amp;rsquo;ll go deeper and explain the reasoning beheind the more
generic &lt;code&gt;Lens s t a b&lt;/code&gt; type. We&amp;rsquo;ll also take a look at how we can get a multi
focus lens using a &lt;code&gt;Traversal&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Just to reiterate, here&amp;rsquo;s how looks the type we derived in the previous
article.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; forall f&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What we&amp;rsquo;ll do here is further generalize it so that we can change the type of
the focus.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s t a b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; forall f&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f t
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you might be thinking that four type parameters is a bit much, but bear
with me here. If we compare the our &lt;code&gt;Lens s t a b&lt;/code&gt; to something like &lt;code&gt;fmap&lt;/code&gt;, we
can see a bit resemblance there.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t fmap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Much like a function &lt;code&gt;a -&amp;gt; b&lt;/code&gt; can be applied on &lt;code&gt;f a&lt;/code&gt; to &lt;em&gt;change it&amp;rsquo;s
structure&lt;/em&gt; to become an &lt;code&gt;f b&lt;/code&gt;. In the same way a &lt;code&gt;Lens s t a b&lt;/code&gt; allows us to
change &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;, which changes the &lt;em&gt;shape&lt;/em&gt; of &lt;code&gt;s&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt;. We can also read it
as: &lt;em&gt;A lens allows us to look at &lt;code&gt;a&lt;/code&gt; inside an &lt;code&gt;s&lt;/code&gt;, and if we can also replace
the &lt;code&gt;a&lt;/code&gt; with a &lt;code&gt;b&lt;/code&gt;, which will make the &lt;code&gt;s&lt;/code&gt; into &lt;code&gt;t&lt;/code&gt;&lt;/em&gt;. Here&amp;rsquo;s a simple example
using tuples.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t over _1 length &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; over _1 length &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Initially we started out with &lt;code&gt;s :: (String, String)&lt;/code&gt; and ended up with &lt;code&gt;t :: (Int, String)&lt;/code&gt; by applying a &lt;code&gt;String -&amp;gt; Int&lt;/code&gt; function on the first element of
the tuple. The specific type of the &lt;code&gt;_1&lt;/code&gt; lens in this case would be &lt;code&gt;Lens (String, String) (Int, String) String Int&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to understand that all of the derivations we made for &lt;code&gt;Lens s a&lt;/code&gt;
still hold for &lt;code&gt;Lens s t a b&lt;/code&gt;, since it&amp;rsquo;s just a bit more generic. In fact you
can write the following (as it is done in the lens library.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&amp;#39;&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s s a a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ll leave it as an exercise to the reader to go through all of the steps we
did previously and use &lt;code&gt;Lens s t a b&lt;/code&gt; instead.&lt;/p&gt;
&lt;h2 id=&#34;traversal---the-multi-foci-lens&#34;&gt;Traversal - the multi foci lens&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: When I say &lt;strong&gt;list&lt;/strong&gt; I really mean &lt;code&gt;Data.Traversable&lt;/code&gt;, however
using a &lt;strong&gt;list&lt;/strong&gt; makes things easier to understand. &lt;a href=&#34;https://blog.jakuba.net/2014/07/30/foldable-and-traversable.html&#34;&gt;I also wrote an article on
Traversable if you&amp;rsquo;re unfamiliar with
it&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While the lenses we&amp;rsquo;ve established so far are useful, they do have their
shortcomings. One example are nested lists, let&amp;rsquo;s see an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if I give you a list of users and ask you to give me all of the names of
their posts, you&amp;rsquo;ll probably not be very happy about that. Not that it&amp;rsquo;s
difficult, but some work involved.&lt;/p&gt;
&lt;p&gt;With &lt;code&gt;Traversal&lt;/code&gt; and &lt;code&gt;traverse&lt;/code&gt; we can focus on all elements of a list and do
this in a single step. But first, let&amp;rsquo;s define us some lenses to work with the
types. In a real world application we&amp;rsquo;d use Template Haskell to generate the
lenses automatically, but for the sake of exercise let&amp;rsquo;s do it manually here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;posts&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;posts&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; n p&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;p&amp;#39; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; n p&amp;#39;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f p&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;title&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;title&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmap &lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We got two lenses, one that focuses on &lt;code&gt;User&lt;/code&gt;&amp;rsquo;s posts, and another one for the
post&amp;rsquo;s title. Let&amp;rsquo;s also define us some test data to play around with.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;users&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;users&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;john&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bob&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;foobar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now lets open up GHCi, load these definitions file, import &lt;code&gt;Control.Lens&lt;/code&gt; and
see what we can do.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; view &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;traverse&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;posts&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; users
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;foobar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This seems to do what we want, we gave it a list of users and pulled out a list
of posts. Note that we used &lt;code&gt;traverse&lt;/code&gt; every time the current &lt;em&gt;focus&lt;/em&gt; was a
list, which is just in the first step on &lt;code&gt;users&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The next step is to go deeper to fetch the post title. If you look at the type
of our current lens &lt;code&gt;traverse.posts&lt;/code&gt;, you&amp;rsquo;ll see that it focuses on &lt;code&gt;[Posts]&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t traverse&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;posts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to reach out to each post, we need to use &lt;code&gt;traverse&lt;/code&gt; again. You can
think of &lt;code&gt;traverse&lt;/code&gt; as something that allows us to focus on multiple targets at
once, in a similar way that &lt;code&gt;map&lt;/code&gt; allows us to apply a function to all elements
of a list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We started with &lt;code&gt;[User]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We can&amp;rsquo;t directly apply the &lt;code&gt;posts&lt;/code&gt; lens, since that requires a &lt;code&gt;User&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;traverse&lt;/code&gt; changes to focus on &lt;code&gt;User&lt;/code&gt; inside the &lt;code&gt;[User]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;traverse.posts&lt;/code&gt; now works, since our target is just a &lt;code&gt;User&lt;/code&gt;, so we can compose to get a lens of &lt;code&gt;traverse.posts&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is also important to note here that the lens composition works backwards
than what is usual in Haskell. You can think of it as a sort of object accessor
notation in an object-oriented language, where you&amp;rsquo;d do &lt;code&gt;foo.bar.baz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Just to make this point crystal clear, here&amp;rsquo;s how function composition works
for regular functions. The &lt;code&gt;*2&lt;/code&gt; gets applied &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;+1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With lenses it goes the other way and the &lt;code&gt;traverse&lt;/code&gt; goes &lt;em&gt;before&lt;/em&gt; the &lt;code&gt;posts&lt;/code&gt;
lens.&lt;/p&gt;
&lt;h2 id=&#34;traversing-deeper-and-deeper&#34;&gt;Traversing deeper and deeper&lt;/h2&gt;
&lt;p&gt;Our previous example worked out just as we wanted, so let&amp;rsquo;s try to go deeper
and actually fetch the title of each &lt;code&gt;Post&lt;/code&gt; from our &lt;code&gt;users&lt;/code&gt; list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; view &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;traverse&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;posts&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;traverse&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;title&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; users
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;helloworldfoobar&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Huh? This isn&amp;rsquo;t what we wanted at all! Lens must be completely broken?!!?1!&lt;/p&gt;
&lt;p&gt;Much like we got &lt;code&gt;[Post]&lt;/code&gt; from &lt;code&gt;traverse.posts&lt;/code&gt;, it would make sense to get
&lt;code&gt;[String]&lt;/code&gt; from &lt;code&gt;traverse.posts.traverse.title&lt;/code&gt;, but instead we got one big
&lt;code&gt;String&lt;/code&gt; with all of the titles combined. In order to understand why this is
happening we need to look more closely at how &lt;code&gt;traverse&lt;/code&gt; works.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a simpler example that we can use to reproduce what we had previously.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; view traverse &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason for this behavior is that if we use &lt;code&gt;view&lt;/code&gt; together with &lt;code&gt;traverse&lt;/code&gt;
it will use the &lt;code&gt;Monoid&lt;/code&gt; instance of our focus and smash them together.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how this works by inlining the definition of &lt;code&gt;view&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; ln s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; ln &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Inlining the arguments we get the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; view traverse &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; traverse &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can already see that it is not the &lt;code&gt;lens&lt;/code&gt; library that does the magic, it&amp;rsquo;s
the &lt;code&gt;traverse&lt;/code&gt; combined with &lt;code&gt;Const&lt;/code&gt;. The &lt;code&gt;view&lt;/code&gt; just picks the &lt;code&gt;Const&lt;/code&gt;
applicative to be used with the &lt;code&gt;traverse&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Now moving on to inlining definition of &lt;code&gt;traverse&lt;/code&gt;, which for a list  look like
following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; f x &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; traverse f xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since this is a recursive function and our list has two elements, we need to
inline it in multiple steps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;-- Inlined the arguments into the definition.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; traverse f &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;-- First recursive call to traverse inlined.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; traverse f &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;-- Second recursive call to traverse inlined.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This whole expression will return a type of &lt;code&gt;Const String [a]&lt;/code&gt;, from which we
need to extract the &lt;code&gt;String&lt;/code&gt; using &lt;code&gt;getConst&lt;/code&gt;, as shown above.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see we&amp;rsquo;re still getting the same result as in the case of &lt;code&gt;view traverse [&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;]&lt;/code&gt;, which means we&amp;rsquo;re on the right track. But this
still doesn&amp;rsquo;t explain why are the two strings being concatenated together.&lt;/p&gt;
&lt;h2 id=&#34;const-as-a-monoid&#34;&gt;Const as a Monoid&lt;/h2&gt;
&lt;p&gt;To understand the concatenation we need to take a look at how the &lt;code&gt;Applicative&lt;/code&gt;
instance for &lt;code&gt;Const&lt;/code&gt; is implemented, but let&amp;rsquo;s think about this first.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Const a b&lt;/code&gt; acts as an &lt;code&gt;Functor&lt;/code&gt; that &lt;em&gt;pretends&lt;/em&gt; to contain a value of type
&lt;code&gt;b&lt;/code&gt;, but in reality hides a value of type &lt;code&gt;a&lt;/code&gt;. That&amp;rsquo;s why if we have &lt;code&gt;Const Int String&lt;/code&gt; and &lt;code&gt;fmap&lt;/code&gt; a function of type &lt;code&gt;String&lt;/code&gt;, we&amp;rsquo;ll get a &lt;code&gt;Const Int Int&lt;/code&gt;,
even though there was no actual value for &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t fmap length a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; fmap length a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re having trouble understanding this, &lt;a href=&#34;https://blog.jakuba.net/2014/07/14/lens-tutorial-introduction-part-1.html&#34;&gt;check out my first article on
Lenses&lt;/a&gt;
which explains this in a bit more detail.&lt;/p&gt;
&lt;p&gt;Now we&amp;rsquo;re faced with the problem of implementing an &lt;code&gt;Applicative&lt;/code&gt; instance. The
problem being that &lt;code&gt;Applicative&lt;/code&gt; defines &lt;code&gt;pure :: a -&amp;gt; f a&lt;/code&gt;, which takes a
value and lifts it into the &lt;code&gt;Applicative&lt;/code&gt;. But because we&amp;rsquo;re working with
&lt;code&gt;Const&lt;/code&gt;, there is no actual value being lifted, as in the case of a &lt;code&gt;Functor&lt;/code&gt;
where we didn&amp;rsquo;t really apply the function.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Const Int String&lt;/code&gt; does not contain any &lt;code&gt;String&lt;/code&gt;, it only contains the
&lt;code&gt;Int&lt;/code&gt;.&lt;/strong&gt; That&amp;rsquo;s why if we do &lt;code&gt;pure 3&lt;/code&gt; to get back a &lt;code&gt;Const String Int&lt;/code&gt;, we must
throw away the &lt;code&gt;3&lt;/code&gt; and somehow create a &lt;code&gt;String&lt;/code&gt; to hide it into the &lt;code&gt;Const&lt;/code&gt;.
We need to have a way to create a value for the type we&amp;rsquo;re hiding. But how do
we do that when we have nothing?&lt;/p&gt;
&lt;p&gt;We use a &lt;code&gt;Monoid&lt;/code&gt; and &lt;code&gt;mempty&lt;/code&gt;!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pure &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; mempty
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We just throw away the argument to &lt;code&gt;pure&lt;/code&gt; and create a new &lt;code&gt;Const&lt;/code&gt; hiding the
value returned by &lt;code&gt;mempty&lt;/code&gt;, which for a &lt;code&gt;String&lt;/code&gt; in our previous example would
be &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;pure &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next up is the definition of &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;, which is rather simple now that we know
that our hidden value is a &lt;code&gt;Monoid&lt;/code&gt;. The way that &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; works is that it takes
two &lt;code&gt;Applicative&lt;/code&gt;s and smashes them together. In a general case it would mean
applying the function in the first one to the value in the second one, but
because our &lt;code&gt;Const&lt;/code&gt; is just pretending to have a function while it has none, we
do not need to apply it. We just need to find a way to combine our two hidden
monoidal values, which is exactly where &lt;code&gt;mappend&lt;/code&gt; will come to play.&lt;/p&gt;
&lt;p&gt;We simply extract the hidden values and &lt;code&gt;mappend&lt;/code&gt; them together to create a new
&lt;code&gt;Const&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pure &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; mempty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f &lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt;mappend&lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt; x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;intuition-behind-view-traverse&#34;&gt;Intuition behind &lt;code&gt;view traverse&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Finally we can get back to our &lt;code&gt;traverse&lt;/code&gt; example and understand why it does
what it does. We ended up with the following expression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the recently gained knowledge we can see that it doesn&amp;rsquo;t matter what
function we apply to our &lt;code&gt;Const&lt;/code&gt;. In this case it is &lt;code&gt;(:)&lt;/code&gt; but it might as well
be &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; undefined &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means that the whole &lt;code&gt;(:) &amp;lt;$&amp;gt;&lt;/code&gt; has absolutely no meaning. It&amp;rsquo;s just there
so that our &lt;code&gt;Const &amp;quot;hello&amp;quot;&lt;/code&gt; can take on a type of a function application, so
that we can use &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;. In fact the only thing that does something is the &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;
combinator, which calls &lt;code&gt;mappend&lt;/code&gt; on the hidden values, but let&amp;rsquo;s take this
step by step.&lt;/p&gt;
&lt;p&gt;First we replace &lt;code&gt;pure []&lt;/code&gt; with the actual value it returns in this case.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we can evaluate the expression in the parentheses, which if you look at
our definition of &lt;code&gt;Const&lt;/code&gt; will just reduce to the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt;mappend&lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which evaluates to just &lt;code&gt;Const &amp;quot;world&amp;quot;&lt;/code&gt;. Now we&amp;rsquo;re left with the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which again just ends up being:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt;mappend&lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which evaluates to &lt;code&gt;Const &amp;quot;helloworld&amp;quot;&lt;/code&gt;. Our initial expression applied
&lt;code&gt;getConst&lt;/code&gt; to the result of this expression, which would just yield
&lt;code&gt;&amp;quot;helloworld&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt;mappend&lt;span style=&#34;color:#eceff4&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There we go, now we have a full understanding of why &lt;code&gt;view traverse&lt;/code&gt; requires
the traversed values to be a Monoid.&lt;/p&gt;
&lt;p&gt;In the next article we&amp;rsquo;ll focus on some other use cases for &lt;code&gt;traverse&lt;/code&gt; and how
to use it with combinators like &lt;code&gt;toListOf&lt;/code&gt;, etc.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Foldable and Traversable</title>
		<link>https://blog.jakuba.net/2014-07-30-foldable-and-traversable/</link>
		<pubDate>Wed, 30 Jul 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-07-30-foldable-and-traversable/</guid>
		<description>&lt;p&gt;Before we can get into the more advanced topics on Lenses, it is
important to really understand both &lt;code&gt;Foldable&lt;/code&gt; and &lt;code&gt;Traversable&lt;/code&gt;, which
is the motivation behind this article.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s begin with &lt;code&gt;Foldable&lt;/code&gt;. &lt;code&gt;Foldable&lt;/code&gt; represents structures which can
be folded. What does that mean? Here are a few examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Calculating the sum of a list.&lt;/li&gt;
&lt;li&gt;Calculating the product of a list.&lt;/li&gt;
&lt;li&gt;Folding a tree to get a maximum value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can describe a &lt;em&gt;fold&lt;/em&gt; as &lt;strong&gt;&lt;em&gt;taking a structure and reducing it to a
single result&lt;/em&gt;&lt;/strong&gt;. That&amp;rsquo;s also why some languages have a &lt;code&gt;reduce&lt;/code&gt;
function instead of a &lt;code&gt;fold&lt;/code&gt;, even though they mean the same thing.&lt;/p&gt;
&lt;p&gt;It is important to really understand the concept behind a fold in
general, not in terms of specific functions like &lt;code&gt;foldl&lt;/code&gt; or &lt;code&gt;foldr&lt;/code&gt;.
Whenever you see the word &lt;code&gt;fold&lt;/code&gt; in a function name, think &lt;em&gt;reducing a
larger structure to a single result&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now comes the time to take a look at the &lt;code&gt;Foldable&lt;/code&gt; type class.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Foldable&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fold    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; t m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foldMap &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foldr   &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foldr&amp;#39;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foldl   &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foldl&amp;#39;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foldr1  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foldl1  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We won&amp;rsquo;t go into detail on all of these, since &lt;code&gt;foldl&lt;/code&gt;, &lt;code&gt;foldr&lt;/code&gt;,
&lt;code&gt;foldl&#39;&lt;/code&gt;, &lt;code&gt;foldr&#39;&lt;/code&gt;, &lt;code&gt;foldl1&lt;/code&gt; and &lt;code&gt;foldr1&lt;/code&gt; work the same as their
counterparts from &lt;code&gt;Data.List&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What is interesting here is that &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldMap&lt;/code&gt; require the
elements of the &lt;code&gt;Foldable&lt;/code&gt; to be &lt;code&gt;Monoid&lt;/code&gt;s. Let&amp;rsquo;s just quickly take a
look at what a &lt;code&gt;Monoid&lt;/code&gt; is.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mempty  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mappend &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mconcat &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nothing really special here, &lt;code&gt;Monoid&lt;/code&gt; just simply defines a zero element
via &lt;code&gt;mempty&lt;/code&gt; and an associative operation &lt;code&gt;mappend&lt;/code&gt; for combining two
&lt;code&gt;Monoid&lt;/code&gt;s into one. &lt;code&gt;mconcat&lt;/code&gt; is just a convenience method which has a
default implementation using &lt;code&gt;mappend&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;mconcat&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;mconcat&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; foldr mappend mempty
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fold-and-foldmap&#34;&gt;fold and foldMap&lt;/h2&gt;
&lt;p&gt;The interesting thing about &lt;code&gt;fold&lt;/code&gt; and &lt;code&gt;foldMap&lt;/code&gt; is that they use a
&lt;code&gt;Monoid&lt;/code&gt; instead of a function to give us the final result. This might
not be obvious at first, but by picking the right &lt;code&gt;Monoid&lt;/code&gt; it is
essentialy the same as passing in a function, since it will just use the
&lt;code&gt;mappend&lt;/code&gt; defined for that &lt;code&gt;Monoid&lt;/code&gt; instance.&lt;/p&gt;
&lt;p&gt;One very very very important aspect to understand here is that it is the
&lt;code&gt;fold&lt;/code&gt; function that requires the elements of &lt;code&gt;Foldable&lt;/code&gt; to have a
&lt;code&gt;Monoid&lt;/code&gt; instance, while &lt;code&gt;Foldable&lt;/code&gt; itself does not have that
restriction.&lt;/p&gt;
&lt;p&gt;The result of this is that we can have something like &lt;code&gt;[Int]&lt;/code&gt;, where the
&lt;code&gt;[]&lt;/code&gt; is a &lt;code&gt;Foldable&lt;/code&gt;, but &lt;code&gt;Int&lt;/code&gt; is not a &lt;code&gt;Monoid&lt;/code&gt;, though as long as we
don&amp;rsquo;t use any of the functions from &lt;code&gt;Foldable&lt;/code&gt; that require a &lt;code&gt;Monoid&lt;/code&gt;
we&amp;rsquo;ll be OK. Here&amp;rsquo;s an example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; foldr1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; fold &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;-- Strings are Monoids using concatenation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; fold &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;No&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; for &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; a0&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; arising from a use &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#bf616a&#34;&gt;‘&lt;/span&gt;it&lt;span style=&#34;color:#bf616a&#34;&gt;’&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See how the problem only arises when we used &lt;code&gt;fold&lt;/code&gt; with &lt;code&gt;Int&lt;/code&gt;. We could
however wrap those &lt;code&gt;Int&lt;/code&gt;s in a &lt;code&gt;Monoid&lt;/code&gt; such as &lt;code&gt;Sum&lt;/code&gt; or &lt;code&gt;Product&lt;/code&gt; and
&lt;code&gt;fold&lt;/code&gt; them then.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; fold &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Sum&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Sum&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Sum&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Sum&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Sum&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;getSum &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This might seem tedious at first, but remember our &lt;code&gt;Foldable&lt;/code&gt; type
class, as it also defines a function that is perfect for this particular
use case: &lt;code&gt;foldMap :: Monoid m =&amp;gt; (a -&amp;gt; m) -&amp;gt; t a -&amp;gt; m&lt;/code&gt;. We can read
this as &lt;em&gt;Given a foldable containing things that aren&amp;rsquo;t Monoids, and a
function that can convert a single thing to a Monoid, I&amp;rsquo;ll give you back
a Monoid by traversing the foldable, converting everything to Monoids
and folding them together.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s our previous example, but now using &lt;code&gt;foldMap&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; foldMap &lt;span style=&#34;color:#81a1c1&#34;&gt;Sum&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Sum&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;getSum &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you think about this for a little while we might even implement
&lt;code&gt;fold&lt;/code&gt; in terms of &lt;code&gt;foldMap&lt;/code&gt;. Why? When using &lt;code&gt;foldMap&lt;/code&gt; we need to
provide a way to convert each item to a &lt;code&gt;Monoid&lt;/code&gt;, but if those items
already are &lt;code&gt;Monoid&lt;/code&gt;s, we don&amp;rsquo;t need to do any conversion!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fold&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; t m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fold&lt;/span&gt; xs &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; foldMap id xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s the same in more steps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t id
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t fold
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Foldable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; t m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t foldMap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Foldable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t foldMap id
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Foldable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; t m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The actual &lt;code&gt;Foldable&lt;/code&gt; type class requires either &lt;code&gt;foldMap&lt;/code&gt; or &lt;code&gt;foldr&lt;/code&gt;,
but for the sake of this article we won&amp;rsquo;t be looking into &lt;code&gt;foldr&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;traversable&#34;&gt;Traversable&lt;/h2&gt;
&lt;p&gt;Now that we have an understanding of &lt;code&gt;Foldable&lt;/code&gt; we can move on to
something more fun, &lt;code&gt;Traversable&lt;/code&gt;. &lt;code&gt;Traversable&lt;/code&gt; represents data
structures which can be traversed while perserving the shape. This is
why there is no &lt;code&gt;filter&lt;/code&gt; or &lt;code&gt;concatMap&lt;/code&gt;, since &lt;code&gt;Traversable&lt;/code&gt; only
defines a way to move through the data structure, but not a way to
change it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Foldable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sequenceA &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you look &lt;a href=&#34;https://hackage.haskell.org/package/base-4.7.0.0/docs/Data-Traversable.html&#34;&gt;in the documentation for
&lt;code&gt;Traversable&lt;/code&gt;&lt;/a&gt;
you might note that there is also &lt;code&gt;mapM&lt;/code&gt; and &lt;code&gt;sequence&lt;/code&gt;, but we won&amp;rsquo;t be
covering those in this article, since their implementation isn&amp;rsquo;t
interesting and can be done mechanically.&lt;/p&gt;
&lt;p&gt;This might look a little intimidating at first, but don&amp;rsquo;t worry, we&amp;rsquo;ll
do this step by step by implementing a &lt;code&gt;Traversable&lt;/code&gt; instance for a
list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     traverse f xs &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since the implementation will be recursive we first need to define the
base case for our recursion, which will be the empty list. The type that
we&amp;rsquo;re looking for is &lt;code&gt;f [b]&lt;/code&gt;, but because the list we&amp;rsquo;re traversing is
empty, we just need to wrap it in the &lt;code&gt;Applicative&lt;/code&gt; context.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next goes the actual recursive implementaion. We have a function &lt;code&gt;f :: a -&amp;gt; f b&lt;/code&gt; and a head of the list which has the type &lt;code&gt;a&lt;/code&gt;. The only thing we
can do at this point is apply the function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; f x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This won&amp;rsquo;t typecheck of course, because we&amp;rsquo;re returning &lt;code&gt;f b&lt;/code&gt; instead of
&lt;code&gt;f [b]&lt;/code&gt;. We could cheat here a little bit and just try to apply a some
function &lt;code&gt;f b -&amp;gt; f [b]&lt;/code&gt; to get the result. We can use &lt;code&gt;(:[])&lt;/code&gt; which has
a type of &lt;code&gt;a -&amp;gt; [a]&lt;/code&gt; and &lt;code&gt;fmap&lt;/code&gt; it on what we have.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:[]&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have an implementation that type checks, but it is still wrong,
since it doesn&amp;rsquo;t satisfy the rule that &lt;em&gt;a traversal must not change the
shape of the structure it is traversing&lt;/em&gt;, and here we are just dropping
the rest of the list. We need to find a way to use recursion and somehow
combine the results.&lt;/p&gt;
&lt;p&gt;By looking at the type of &lt;code&gt;traverse :: (a -&amp;gt; f b) -&amp;gt; t a -&amp;gt; f (t b)&lt;/code&gt;, or
in our case specifically &lt;code&gt;traverse :: (a -&amp;gt; f b) -&amp;gt; [a] -&amp;gt; f [b]&lt;/code&gt; we can
see that using &lt;code&gt;traverse&lt;/code&gt; recursively on the tail of the list would give
us the type we need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; traverse f xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have two values, one of type &lt;code&gt;f b&lt;/code&gt; and one of type &lt;code&gt;f [b]&lt;/code&gt;, which
are basically the head and the tail of the list, both wrapped in an
&lt;code&gt;Applicative&lt;/code&gt; context. We also have a function &lt;code&gt;(:) :: a -&amp;gt; [a] -&amp;gt; [a]&lt;/code&gt;,
which concatenates a head and a tail together into a single list.&lt;/p&gt;
&lt;p&gt;Knowing all of this it just comes down to a basic use of &lt;code&gt;Applicative&lt;/code&gt;
where we have a function of two arguments and need to apply it to two
values in the &lt;code&gt;Applicative&lt;/code&gt; context. We can do this in two different
ways.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; f x &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; traverse f xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And an alternative definition using &lt;code&gt;liftA2&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; liftA2 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;traverse f xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It should be pretty clear now that we need the &lt;code&gt;Applicative&lt;/code&gt; to be able
to actually implement &lt;code&gt;traverse&lt;/code&gt;. If all we had was a &lt;code&gt;Functor&lt;/code&gt; we
wouldn&amp;rsquo;t be able to combine the &lt;code&gt;f b&lt;/code&gt; and &lt;code&gt;f [b]&lt;/code&gt; together.&lt;/p&gt;
&lt;h2 id=&#34;sequencea&#34;&gt;sequenceA&lt;/h2&gt;
&lt;p&gt;Now that we have &lt;code&gt;traverse&lt;/code&gt; we can move on to define &lt;code&gt;sequenceA&lt;/code&gt;. Here&amp;rsquo;s
a specific type for our list instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;f a&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re familiar with &lt;code&gt;sequence :: Monad m =&amp;gt; [m a] -&amp;gt; m [a]&lt;/code&gt; from
&lt;code&gt;Control.Monad&lt;/code&gt; then you can see how these two functions are doing the
same thing. It simply takes the &lt;code&gt;Applicative&lt;/code&gt; effects, runs them and
pulls them out of the list.&lt;/p&gt;
&lt;p&gt;The implementation is really simple. Starting out with an empty list, we
just need to wrap it in the &lt;code&gt;Applicative&lt;/code&gt; context.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next comes the actual recursive implementaiton. If we pattern match on
the head and the tail of the list, we&amp;rsquo;ll yet again get &lt;code&gt;f a&lt;/code&gt; and &lt;code&gt;[f a]&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can call &lt;code&gt;sequenceA&lt;/code&gt; recursively on the tail to get &lt;code&gt;f [a]&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; sequenceA xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But of course this isn&amp;rsquo;t good enough. We need a way to combine the head
and the tail while they&amp;rsquo;re both wrapped in an &lt;code&gt;Applicative&lt;/code&gt; context.
This can be done in the same way as we did previously with &lt;code&gt;traverse&lt;/code&gt;,
using &lt;code&gt;(:)&lt;/code&gt; and the &lt;code&gt;Applicative&lt;/code&gt; functions &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; sequenceA xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or alternatively using &lt;code&gt;liftA2&lt;/code&gt; again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; liftA2 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;sequenceA xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it, we have a working implementation for &lt;code&gt;sequenceA&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;implementing-sequencea-with-traverse-and-vice-versa&#34;&gt;Implementing sequenceA with traverse and vice versa&lt;/h2&gt;
&lt;p&gt;If we now look at our implementations for &lt;code&gt;traverse&lt;/code&gt; and &lt;code&gt;sequenceA&lt;/code&gt; we
can definitely see some similarity there.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; f x &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; traverse f xs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; sequenceA xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only difference is that &lt;code&gt;traverse&lt;/code&gt; takes a function and applies it
to the head of the list, while &lt;code&gt;sequenceA&lt;/code&gt; simply uses the head as it
is. Knowing this we can actually define &lt;code&gt;sequenceA&lt;/code&gt; using &lt;code&gt;traverse&lt;/code&gt; and
the &lt;code&gt;id&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;sequenceA&lt;/span&gt; xs &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; traverse id xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Could we do the same thing the other way around though? Yes! We most
certainly can define &lt;code&gt;traverse&lt;/code&gt; by using &lt;code&gt;sequenceA&lt;/code&gt; and the fact that
every &lt;code&gt;Traversable&lt;/code&gt; is also a &lt;code&gt;Functor&lt;/code&gt;. Let&amp;rsquo;s take this step by step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; f xs &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We only have one way of applying our function &lt;code&gt;a -&amp;gt; f b&lt;/code&gt; to the &lt;code&gt;t a&lt;/code&gt;
and that is using &lt;code&gt;fmap&lt;/code&gt;, which would give us &lt;code&gt;t (f b)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; f xs &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; fmap f xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we&amp;rsquo;ll get an error saying that we need a function &lt;code&gt;t (f b) -&amp;gt; f (t b)&lt;/code&gt;, which is exactly what &lt;code&gt;sequenceA&lt;/code&gt; does!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; f xs &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; sequenceA &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; fmap f xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;traversable-with-default-implementations&#34;&gt;Traversable with default implementations&lt;/h2&gt;
&lt;p&gt;Given the two implementations we just got we can rewrite our initial
&lt;code&gt;Traversable&lt;/code&gt; type class to use those as a default implementation for
both functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Foldable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse f xs &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; sequenceA &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; fmap f xs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sequenceA &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sequenceA xs &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; traverse id xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is actually how it&amp;rsquo;s done in the &lt;code&gt;Data.Traversable&lt;/code&gt; module, except
that if you look at the source code you&amp;rsquo;ll see the functions defined in
point free style.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Foldable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; sequenceA &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; fmap f
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sequenceA &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; t &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sequenceA &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; traverse id
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;default-implementation-for-functor-and-foldable-using-traversable&#34;&gt;Default implementation for Functor and Foldable using Traversable&lt;/h2&gt;
&lt;p&gt;It might not be so obvious at first, but a &lt;code&gt;Traversable&lt;/code&gt; is a very
powerful concept. So powerful that it actually allows us to define both
&lt;code&gt;Functor&lt;/code&gt; and &lt;code&gt;Foldable&lt;/code&gt; if we have just a single function from
&lt;code&gt;Traversable&lt;/code&gt;. The &lt;code&gt;Data.Traversable&lt;/code&gt; module defines two functions,
&lt;code&gt;fmapDefault&lt;/code&gt; and &lt;code&gt;foldMapDefault&lt;/code&gt;, which can be used as an
implementation for &lt;code&gt;fmap&lt;/code&gt; and &lt;code&gt;foldMap&lt;/code&gt; if we so desire.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foldMapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The way we&amp;rsquo;re going to implement these is very similar to what we did in
&lt;a href=&#34;https://blog.jakuba.net/2014/07/14/lens-tutorial-introduction-part-1.html&#34;&gt;the Lens introduction article&lt;/a&gt;.
If this section is too hard for you to understand I recommend reading
the Lens article first and then come back here. Everything will make a
lot more sense.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s first compare the types of &lt;code&gt;traverse&lt;/code&gt; and &lt;code&gt;fmap&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmap&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference is that the function passed to &lt;code&gt;traverse&lt;/code&gt; returns a value
wrapped in &lt;code&gt;Applicative&lt;/code&gt; context, and the result is also wrapped. If we
could find a way to wrap the value after we apply the function, and then
unwrap it at the end, we would get exactly the same type as &lt;code&gt;fmap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can use the &lt;code&gt;Identity&lt;/code&gt; functor to do this, which defines a way to
unwrap it using &lt;code&gt;runIdentity :: Identity a -&amp;gt; a&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmapDefault&lt;/span&gt; f x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don&amp;rsquo;t have that many options here. To be able to give the function
&lt;code&gt;f&lt;/code&gt; to a &lt;code&gt;traverse&lt;/code&gt; we need to change it&amp;rsquo;s type from &lt;code&gt;a -&amp;gt; f a&lt;/code&gt;. That&amp;rsquo;s
where &lt;code&gt;Identity&lt;/code&gt; comes in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmapDefault&lt;/span&gt; f x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; traverse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now our types don&amp;rsquo;t align, since we are supposed to return &lt;code&gt;t b&lt;/code&gt; but  we
are returning &lt;code&gt;Identity (t b)&lt;/code&gt;. The solution here is the above mentioned
&lt;code&gt;runIdentity&lt;/code&gt; which simply unwraps the value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmapDefault&lt;/span&gt; f x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; runIdentity &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; traverse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And once more in point free style.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmapDefault&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; runIdentity &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; traverse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compare this to the definition of &lt;code&gt;over&lt;/code&gt; and you can see how it &lt;em&gt;looks
and feels&lt;/em&gt; almost exactly the same.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; ln f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; runIdentity &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; ln &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll explain how this relates to Lenses in more detail in a followup
article, but for now let&amp;rsquo;s move on to &lt;code&gt;foldMapDefault&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;implementing-foldmapdefault&#34;&gt;Implementing foldMapDefault&lt;/h2&gt;
&lt;p&gt;This part is very hard to understand, so be careful.&lt;/p&gt;
&lt;p&gt;If we compare the type of &lt;code&gt;foldMapDefault&lt;/code&gt; with &lt;code&gt;traverse&lt;/code&gt; we can yet
again see some similarity.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foldMapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;traverse&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;t b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference from &lt;code&gt;fmapDefault&lt;/code&gt; is that now we need a way to convert
each element of the &lt;code&gt;Traversable&lt;/code&gt; to a &lt;code&gt;Monoid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We will use the &lt;code&gt;Const&lt;/code&gt; applicative here, which as it so happens also
defines a &lt;code&gt;Monoid&lt;/code&gt; instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foldMapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foldMapDefault&lt;/span&gt; f x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As previously we can only use &lt;code&gt;traverse&lt;/code&gt; together with a function &lt;code&gt;a -&amp;gt; f b&lt;/code&gt;, but we have &lt;code&gt;a -&amp;gt; m&lt;/code&gt;, where by using &lt;code&gt;Const&lt;/code&gt; we can do the &lt;code&gt;m -&amp;gt; f b&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foldMapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foldMapDefault&lt;/span&gt; f x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; traverse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again we&amp;rsquo;re faced with the problem of having &lt;code&gt;Const m (t b)&lt;/code&gt; instead of
&lt;code&gt;m&lt;/code&gt;, which can be solved using &lt;code&gt;getConst&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foldMapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foldMapDefault&lt;/span&gt; f x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; traverse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And a point free version.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foldMapDefault&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; t&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monoid&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;foldMapDefault&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; traverse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is also very similar to one of the functions Lens provides, in
particular &lt;code&gt;view&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; ln &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; ln &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;implementing-functor-and-foldable-with-traversable&#34;&gt;Implementing Functor and Foldable with Traversable&lt;/h2&gt;
&lt;p&gt;Now that we understand how both &lt;code&gt;fmapDefault&lt;/code&gt; and &lt;code&gt;foldMapDefault&lt;/code&gt; work,
we can use them to define a &lt;code&gt;Functor&lt;/code&gt; and a &lt;code&gt;Foldable&lt;/code&gt; instance for any
&lt;code&gt;Traversable&lt;/code&gt; we might have.&lt;/p&gt;
&lt;p&gt;We can test this out by defining a simple list type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;List&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; a &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;List&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;List&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmap &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmapDefault
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Foldable&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;List&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    foldMap &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; foldMapDefault
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Traversable&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;List&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nil&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;Nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    traverse f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; x xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmap &lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; traverse f xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We used &lt;code&gt;fmap = fmapDefault&lt;/code&gt; and &lt;code&gt;foldMap = foldMapDefault&lt;/code&gt; to define
our &lt;code&gt;Functor&lt;/code&gt; and &lt;code&gt;Foldable&lt;/code&gt; instances, which is all made possible by
also having a &lt;code&gt;Traversable&lt;/code&gt; instance. Let&amp;rsquo;s test this out to make sure
it works!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; traverse &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; fold &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;world&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;helloworld&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; fmap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Cons&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It might be a surprising, but everything works as it is supposed
to.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Building Monad Transformers - Part 1</title>
		<link>https://blog.jakuba.net/2014-07-22-building-monad-transformers-part-1/</link>
		<pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-07-22-building-monad-transformers-part-1/</guid>
		<description>&lt;p&gt;In this article we&amp;rsquo;ll focus on building our own monad transformers.
We&amp;rsquo;ll start out with an example code and improve it by building a simple
wrapper over &lt;code&gt;IO (Maybe a)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following example is really simple, but I&amp;rsquo;m sure you can imagine
doing something similar in your own application. The &lt;code&gt;findById&lt;/code&gt; method
is there just to simulate a database query that might not find a result.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;findById&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;findById&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;findById&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;findUsers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;findUsers&lt;/span&gt; x y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    muser1 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; findById x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; muser1 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; return &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; user1 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            muser2 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; findById y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; muser2 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; return &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; user2 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user1&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; user2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While there&amp;rsquo;s nothing bad about &lt;code&gt;case&lt;/code&gt; statements with pattern matching
I&amp;rsquo;m sure we can all agree that this approach can easily blow out of
proportions.&lt;/p&gt;
&lt;p&gt;One solution that won&amp;rsquo;t work all the time might be to fetch both of the users
at the same time, which would allow us to make use of the &lt;code&gt;Maybe&lt;/code&gt; monad. If our
&lt;code&gt;findById&lt;/code&gt; function didn&amp;rsquo;t do any side effects, we could&amp;rsquo;ve written this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;findById&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;findById&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;findById&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;loadUsers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;loadUsers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user1 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; findById &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user2 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; findById &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user1&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; user2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because &lt;code&gt;Maybe&lt;/code&gt; is implemented in a way that it stops evaluating when it hits
on &lt;code&gt;Nothing&lt;/code&gt; we get the behavior we intended without pattern matching. If one of
our &lt;code&gt;findById&lt;/code&gt; fails to return a user, the whole function will return a
&lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately the act of finding a user needs to reach out to the real world,
which forces the &lt;code&gt;IO&lt;/code&gt; monad upon us, making this approach impossible. We
somehow need to be able to teach &lt;code&gt;IO&lt;/code&gt; the notion of failure.&lt;/p&gt;
&lt;h2 id=&#34;wrapping-io-in-maybeio&#34;&gt;Wrapping &lt;code&gt;IO&lt;/code&gt; in &lt;code&gt;MaybeIO&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s introduce a new monad which will simply wrap our &lt;code&gt;IO&lt;/code&gt; computations into a
&lt;code&gt;Maybe&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; runMaybeIO &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The next step is to make &lt;code&gt;MaybeIO&lt;/code&gt; into a &lt;code&gt;Monad&lt;/code&gt;, which will allow us to use
it inside a &lt;code&gt;do&lt;/code&gt; block, but first things first. The next version of GHC (7.10)
will require every &lt;code&gt;Monad&lt;/code&gt; to also be an &lt;code&gt;Applicative&lt;/code&gt;, which also means that
every &lt;code&gt;Monad&lt;/code&gt; must be a &lt;code&gt;Functor&lt;/code&gt;. We&amp;rsquo;ll follow this an start out with a
&lt;code&gt;Functor&lt;/code&gt; instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmap f m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; undefined
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll use type holes to hint us in while implementing these instances. First
let&amp;rsquo;s recap the type of &lt;code&gt;fmap&lt;/code&gt;, which is &lt;code&gt;(a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/code&gt;, which means
we have a function &lt;code&gt;f :: a -&amp;gt; b&lt;/code&gt; and a functor value &lt;code&gt;m :: f a&lt;/code&gt;, or
specifically &lt;code&gt;m :: MaybeIO a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Before we can do anything to the &lt;code&gt;m&lt;/code&gt; we need to unwrap &lt;code&gt;MaybeIO&lt;/code&gt; to get to the
insides. We&amp;rsquo;ll use pattern matching to do that since it&amp;rsquo;s more concise
than using &lt;code&gt;runMaybeIO&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmap f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; undefined
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We only have two things available to us, the function &lt;code&gt;f :: a -&amp;gt; b&lt;/code&gt;
which only works on the type &lt;code&gt;a&lt;/code&gt;, and the fact that both &lt;code&gt;Maybe&lt;/code&gt; and
&lt;code&gt;IO&lt;/code&gt; are also &lt;code&gt;Functor&lt;/code&gt; instances, which means we can use &lt;code&gt;fmap&lt;/code&gt; to
reach deep into the &lt;code&gt;Maybe (IO a)&lt;/code&gt; to apply our function &lt;code&gt;f&lt;/code&gt; to get the
result.&lt;/p&gt;
&lt;p&gt;Here comes a little trick, since &lt;code&gt;fmap&lt;/code&gt; can also be thought of as &lt;code&gt;(a -&amp;gt; b) -&amp;gt; (f a -&amp;gt; f b)&lt;/code&gt;. If we compose &lt;code&gt;fmap&lt;/code&gt; with &lt;code&gt;fmap&lt;/code&gt;, it gives us exactly what we
need, a way to reach two functors deep to apply a function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t fmap&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;fmap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; g&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Substituting our types we get the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;fmap&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;fmap &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are not there quite yet, let&amp;rsquo;s see what happens if we use this
approach to implement the &lt;code&gt;Functor&lt;/code&gt; instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmap f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fmap&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;fmap&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; f m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;-- Couldn&amp;#39;t match type ‘Maybe’ with ‘MaybeIO’&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re returning the wrong type! The original value passed in was &lt;code&gt;MaybeIO a&lt;/code&gt;
and we&amp;rsquo;re returning &lt;code&gt;IO (Maybe b)&lt;/code&gt; instead of &lt;code&gt;MaybeIO b&lt;/code&gt;. Let&amp;rsquo;s add a type
hole to make this crystal clear.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmap f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fmap&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;fmap&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; f m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;-- Found hole ‘_’ with type: Maybe (IO b) -&amp;gt; MaybeIO b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now remember how in the beginning we said we&amp;rsquo;ll be wrapping the &lt;code&gt;IO (Maybe a)&lt;/code&gt;
into a &lt;code&gt;MaybeIO&lt;/code&gt;? We can do that using the constructor of &lt;code&gt;MaybeIO&lt;/code&gt;!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fmap f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;fmap&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;fmap&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; f m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There you go, a &lt;code&gt;Functor&lt;/code&gt; instance for &lt;code&gt;MaybeIO&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;applicative-instance-for-maybeio&#34;&gt;&lt;code&gt;Applicative&lt;/code&gt; instance for &lt;code&gt;MaybeIO&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The next step is to implement an &lt;code&gt;Applicative&lt;/code&gt; instance for our &lt;code&gt;MaybeIO&lt;/code&gt;
wrapper. Here&amp;rsquo;s how the &lt;code&gt;Applicative&lt;/code&gt; class looks in case you forgot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pure &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; m &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In terms of our &lt;code&gt;MaybeIO&lt;/code&gt; the types would look as following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;pure&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Implementing &lt;code&gt;pure&lt;/code&gt; is simple, we just need to wrap a given value into a
minimal context. Since both &lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;IO&lt;/code&gt; are an instance of &lt;code&gt;Applicative&lt;/code&gt;,
we can use their &lt;code&gt;pure&lt;/code&gt; much as we used &lt;code&gt;fmap&lt;/code&gt; when implementing the &lt;code&gt;Functor instance&lt;/code&gt; (don&amp;rsquo;t forget to import &lt;code&gt;Control.Applicative&lt;/code&gt;.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pure &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; pure
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could&amp;rsquo;ve also written this more explicitly using &lt;code&gt;Just&lt;/code&gt; instead of &lt;code&gt;pure&lt;/code&gt;
for wrapping the value in a &lt;code&gt;Maybe&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pure &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But moving on, now comes the hard part, implementing &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;. This is probably
the hardest part of the whole article, so don&amp;rsquo;t worry if it seems a bit
complicated. First we need to pattern match to get rid of the &lt;code&gt;MaybeIO&lt;/code&gt;
wrapper, and then we also need to wrap the value on the right hand side in the
last step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pure &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;-- Found hole ‘_’ with type: IO (Maybe b)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The type hole tells us that we need to somehow get to a &lt;code&gt;IO (Maybe b)&lt;/code&gt; with the
given &lt;code&gt;IO (Maybe (a -&amp;gt; b))&lt;/code&gt; and &lt;code&gt;IO (Maybe a)&lt;/code&gt;. This seems like a typical
&lt;em&gt;reach into a box/context and apply a function&lt;/em&gt; kind of problem, and it is, but
we do need to do something which isn&amp;rsquo;t so apparent at first.&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;IO&lt;/code&gt; are an instance of &lt;code&gt;Applicative&lt;/code&gt;, which means we need to
somehow use &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; to apply the boxed function to the boxed value (pardon me for
saying boxed here, but it just seems like the right analogy here.)&lt;/p&gt;
&lt;p&gt;The problem is that we can only use &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; to apply a function nested one level
deep, since the type is &lt;code&gt;m (a -&amp;gt; b) -&amp;gt; m a -&amp;gt; m b&lt;/code&gt;. Knowing that &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; is a two
argument function, meaning we can&amp;rsquo;t use simple &lt;code&gt;.&lt;/code&gt;, we need to look into the
documentation for &lt;code&gt;Applicative&lt;/code&gt; and find the function &lt;code&gt;liftA2&lt;/code&gt;, works just like
&lt;code&gt;fmap&lt;/code&gt; on functors, but for two argument functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t liftA2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; c&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we combine these two together we do get exactly what we need, a function
which takes two arguments, where first one is a function nested in two
applicatives, and a value, and applies the function to that value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t liftA2 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; g&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;g b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s substitute our types once again to see how this exactly matches to what
we need.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;liftA2&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We already have both of the arguments of the correct types, which means we can
just apply the function to them and get our instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pure &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; pure &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; liftA2 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; f m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the next step we&amp;rsquo;ll move onto implementing the &lt;code&gt;Monad&lt;/code&gt; instance. Make sure
you understand what we&amp;rsquo;ve done so far.&lt;/p&gt;
&lt;h2 id=&#34;monad-instance-for-maybeio&#34;&gt;&lt;code&gt;Monad&lt;/code&gt; instance for &lt;code&gt;MaybeIO&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now comes the final step that we&amp;rsquo;ve been waiting for, implementing a &lt;code&gt;Monad&lt;/code&gt;
instance for our &lt;code&gt;MaybeIO&lt;/code&gt; wrapper. As we did before, here&amp;rsquo;s how the &lt;code&gt;Monad&lt;/code&gt;
class looks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; m a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can already see that &lt;code&gt;return&lt;/code&gt; will be exactly the same as &lt;code&gt;pure&lt;/code&gt; for our
&lt;code&gt;Applicative&lt;/code&gt;, so let&amp;rsquo;s do that first.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next comes the implementation of &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; or &lt;em&gt;bind&lt;/em&gt;. First the initial structure&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have a value of type &lt;code&gt;m :: IO (Maybe a)&lt;/code&gt; and a function that we need to
apply to the inner &lt;code&gt;a&lt;/code&gt; which has a type &lt;code&gt;f :: a -&amp;gt; MaybeIO b&lt;/code&gt;. We can use &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;
to get to the value inside the &lt;code&gt;IO&lt;/code&gt; monad.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This leaves us with &lt;code&gt;x :: Maybe a&lt;/code&gt;, which is just one pattern match away from
the final solution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; val &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; runMaybeIO &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; f val
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A very important thing to note here is that in the case of &lt;code&gt;Just val&lt;/code&gt; we
need to unwrap the &lt;code&gt;MaybeIO&lt;/code&gt; using &lt;code&gt;runMaybeIO&lt;/code&gt;. One might think that we
could instead write it like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; pure
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; val &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f val
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;-- Couldn&amp;#39;t match type ‘IO’ with ‘MaybeIO’&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem here is that &lt;code&gt;m &amp;gt;&amp;gt;= \x -&amp;gt; ...&lt;/code&gt; must have a return value of
&lt;code&gt;IO&lt;/code&gt;, but we&amp;rsquo;re trying to return &lt;code&gt;MaybeIO&lt;/code&gt;. This is why we need to
unwrap the result of &lt;code&gt;f val&lt;/code&gt; and then wrap it again after doing &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;,
as we did in the previous example.&lt;/p&gt;
&lt;h2 id=&#34;using-maybeio-to-cleanup-our-initial-example&#34;&gt;Using &lt;code&gt;MaybeIO&lt;/code&gt; to cleanup our initial example&lt;/h2&gt;
&lt;p&gt;We manage to build ourselves a monad which combines the effects of &lt;code&gt;IO&lt;/code&gt; and
&lt;code&gt;Maybe&lt;/code&gt; together, which means we can use it to represent &lt;code&gt;IO&lt;/code&gt; computations
which can fail. This is perfect for our initial example which uses &lt;code&gt;findById :: Int -&amp;gt; IO (Maybe User)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since the type of our computation is &lt;code&gt;MaybeIO&lt;/code&gt; we need to wrap the &lt;code&gt;findById&lt;/code&gt;
function to make use of the monad instance for &lt;code&gt;MaybeIO&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;smartFindUsers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;smartFindUsers&lt;/span&gt; x y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user1 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; findById x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user2 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; findById y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user1&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; user2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can even go one step further and keep the original return value of
&lt;code&gt;findUsers&lt;/code&gt; &lt;code&gt;IO (Maybe (User, User))&lt;/code&gt; by unwrapping the &lt;code&gt;MaybeIO&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;smartFindUsers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;smartFindUsers&lt;/span&gt; x y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; runMaybeIO &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user1 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; findById x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user2 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; findById y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user1&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; user2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s go ahead and test this in GHCi to make sure we didn&amp;rsquo;t break anything.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; smartFindUsers &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our new version works exactly the same as the old one, but without the
necessary error handling boilerplate. Much like monads allow you to capture
control flow patterns, you can use monad transformers to add additional control
flow to your existing monads without sacrificing readability of your code.&lt;/p&gt;
&lt;p&gt;The next step is to make our &lt;code&gt;MaybeIO&lt;/code&gt; into an actual transformer by swapping
&lt;code&gt;IO&lt;/code&gt; for any &lt;code&gt;Monad&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;generalizing-maybeio-to-maybet&#34;&gt;Generalizing &lt;code&gt;MaybeIO&lt;/code&gt; to &lt;code&gt;MaybeT&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The real monad transformers you&amp;rsquo;ll encounter in the world of Haskell are a bit
more generic than the one we just implemented. Instead of hard-coding the &lt;code&gt;IO&lt;/code&gt;
monad we&amp;rsquo;ll pass it in as a type parameter, resulting in the following
definition of &lt;code&gt;MaybeT&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;newtype&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; m a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; runMaybeT &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; m &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There aren&amp;rsquo;t any significant changes, we just introduced a new type parameter
which will be the monad we&amp;rsquo;re wrapping. Since everything else remains almost
exactly the same, I&amp;rsquo;ll just show the &lt;code&gt;Monad&lt;/code&gt; implementation here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;newtype&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; m a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; runMaybeT &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; m &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; return &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt; value &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; value &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                     &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; return &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                     &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; runMaybeT &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; f x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only notable thing here is that our type parameter &lt;code&gt;m&lt;/code&gt; is restricted to be
a &lt;code&gt;Monad&lt;/code&gt; as well, since we&amp;rsquo;re only going to be wrapping monads.&lt;/p&gt;
&lt;p&gt;Our &lt;code&gt;findUsers&lt;/code&gt; function will be exactly the same, we&amp;rsquo;ll just need to swap
&lt;code&gt;runMaybeIO&lt;/code&gt; for &lt;code&gt;runMaybeT&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;transformerFindUsers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;transformerFindUsers&lt;/span&gt; x y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; runMaybeT &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user1 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; findById x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user2 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; findById y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user1&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; user2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just to make it crystal clear what&amp;rsquo;s going on here, the function without using
&lt;code&gt;runMaybeT&lt;/code&gt; would look as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;wrappedFindUsers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;wrappedFindUsers&lt;/span&gt; x y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user1 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; findById x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user2 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; findById y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    return &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user1&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; user2&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can even introduce a type alias to have something called &lt;code&gt;MaybeIO&lt;/code&gt; using the
&lt;code&gt;MaybeT&lt;/code&gt; transformer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeIO&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;MaybeT&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is actually how the well known monads such as &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Writer&lt;/code&gt; and
&lt;code&gt;State&lt;/code&gt; are defined. They&amp;rsquo;re just type synonyms for the respective transformers
using the &lt;code&gt;Identity&lt;/code&gt; monad.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Reader&lt;/span&gt; r &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;ReaderT&lt;/span&gt; r &lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Writer&lt;/span&gt; w &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;WriterT&lt;/span&gt; w &lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;State&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;StateT&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re interested in learning more about the &lt;code&gt;Identity&lt;/code&gt; monad and how it can
be used in some more advanced settings, take a look at &lt;a href=&#34;https://blog.jakuba.net/2014/07/14/lens-tutorial-introduction-part-1.html&#34;&gt;my Introduction to
Lenses article&lt;/a&gt;
where it&amp;rsquo;s explained step by step in great detail.&lt;/p&gt;
&lt;p&gt;This concludes the first article in the series on Monad Transformers. Next time
we&amp;rsquo;ll take a look at how we can stack one transformer onto another and
introduce the &lt;code&gt;MonadTrans&lt;/code&gt; and &lt;code&gt;MonadIO&lt;/code&gt; type classes.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Mutable State in Haskell</title>
		<link>https://blog.jakuba.net/2014-07-20-mutable-state-in-haskell/</link>
		<pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-07-20-mutable-state-in-haskell/</guid>
		<description>&lt;p&gt;Haskell is a purely functional language, which means there are no side-effects
and all variables are immutable. &lt;!-- raw HTML omitted --&gt;But as you probably know this isn&amp;rsquo;t
completely true.&lt;!-- raw HTML omitted --&gt; &lt;em&gt;All variables are indeed immutable, but there
are ways to construct mutable references where we can change what the
reference points to.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Without side effects we wouldn&amp;rsquo;t be able to do much, which is
why Haskell gives us the IO monad. In a similar manner we have many ways to
achieve mutable state in Haskell, let&amp;rsquo;s take a look at them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IORef&lt;/li&gt;
&lt;li&gt;STRef in the ST monad&lt;/li&gt;
&lt;li&gt;MVar&lt;/li&gt;
&lt;li&gt;TVar in Software Transactional Memory (STM)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ioref&#34;&gt;IORef&lt;/h2&gt;
&lt;p&gt;We all know that the IO monad allows us to do arbitrary effects in the real
world, so it probably comes as no surprise that it also allows us to create a
mutable reference to an type, called &lt;code&gt;IORef&lt;/code&gt; (from &lt;code&gt;Data.IORef&lt;/code&gt;.) There is not
much complicated about &lt;code&gt;IORef&lt;/code&gt;, as it only takes a single type parameter, which
is the type it&amp;rsquo;s going to contain.&lt;/p&gt;
&lt;p&gt;Before we move into specifics it is important to note here that modifying the
&lt;code&gt;IORef&lt;/code&gt; is no a pure operation, which means ever single operation on the
&lt;code&gt;IORef&lt;/code&gt; will be inside the &lt;code&gt;IO&lt;/code&gt; monad.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at some of the functions available for manipulating &lt;code&gt;IORef&lt;/code&gt;s.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IORef&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;newIORef&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;IORef&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;readIORef&lt;/span&gt;   &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IORef&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;writeIORef&lt;/span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IORef&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;modifyIORef&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IORef&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First thing you&amp;rsquo;ll probably notice is that in order to create an &lt;code&gt;IORef&lt;/code&gt; we
need to give it a value. &lt;strong&gt;An &lt;code&gt;IORef&lt;/code&gt; must always contain a value of a given
type, it is impossible to create it empty&lt;/strong&gt;. Here&amp;rsquo;s a simple example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Data.IORef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ref &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newIORef &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    modifyIORef ref &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    readIORef ref &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; print
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;I&amp;rsquo;ve used &lt;code&gt;0 :: Int&lt;/code&gt; instead of just &lt;code&gt;0&lt;/code&gt; to make it explicit that we&amp;rsquo;re using
&lt;code&gt;Int&lt;/code&gt;s. If you don&amp;rsquo;t  do that it won&amp;rsquo;t affect the program but you might get a
warning from the compiler.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s not much really happening in this example, we just create a new
&lt;code&gt;IORef&lt;/code&gt;, increase it&amp;rsquo;s value by &lt;code&gt;1&lt;/code&gt; and then print the result. While this is
nice it doesn&amp;rsquo;t really show much, so let&amp;rsquo;s make this more complicated.&lt;/p&gt;
&lt;p&gt;A common pattern in Haskell is to take an immutable data structure and put it
inside a mutable reference, which basically gives you a mutable version of that
data structure (let&amp;rsquo;s ignore the fact that there might be a more efficient way
to do this for now.) This will work because we can take any Haskell type and
put it into an &lt;code&gt;IORef&lt;/code&gt;. Let&amp;rsquo;s begin by using &lt;code&gt;Maybe Int&lt;/code&gt; to represent a
&lt;em&gt;mutable box for an &lt;code&gt;Int&lt;/code&gt; which can be empty&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;magic&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IORef&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;magic&lt;/span&gt; ref &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef ref
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;case&lt;/span&gt; value &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; return &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; writeIORef ref &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;42&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ref &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newIORef &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    magic ref
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    readIORef ref &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; print
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First we define a function which takes a &lt;code&gt;IORef (Maybe Int)&lt;/code&gt;, that is &lt;em&gt;a
mutable reference that maybe contains an &lt;code&gt;Int&lt;/code&gt;&lt;/em&gt; and produces some side effects.
The implementation simply reads the &lt;code&gt;IORef&lt;/code&gt; and do nothing if it already has a
value, but if it contains &lt;code&gt;Nothing&lt;/code&gt; it will replace that value with &lt;code&gt;Just 42&lt;/code&gt;.
Our &lt;code&gt;main&lt;/code&gt; function then simply &lt;code&gt;print&lt;/code&gt;s the contents of the &lt;code&gt;IORef&lt;/code&gt;, which is
&lt;code&gt;Just 42&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;in-place-bubble-sort-with-ioref&#34;&gt;In-place bubble sort with &lt;code&gt;IORef&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve read this far there&amp;rsquo;s a fair chance that you know how bubble sort
works. The important thing about it is that it works in-place and modifies the
array it is sorting. Here&amp;rsquo;s a simple implementation in Ruby.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;bubble_sort&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;list&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  list&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;each_index &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt;i&lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;list&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;length &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; i &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;times &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt;j&lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; list&lt;span style=&#34;color:#81a1c1&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#81a1c1&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; list&lt;span style=&#34;color:#81a1c1&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        list&lt;span style=&#34;color:#81a1c1&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#81a1c1&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; list&lt;span style=&#34;color:#81a1c1&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; list&lt;span style=&#34;color:#81a1c1&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; list&lt;span style=&#34;color:#81a1c1&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#81a1c1&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key part being here is that we&amp;rsquo;re swapping the elements of the list as we
iterate through it. This is something we can&amp;rsquo;t do in pure Haskell, but we can
attempt to do this using &lt;code&gt;IORef&lt;/code&gt;s.&lt;/p&gt;
&lt;p&gt;We will use a simple Haskell list where each element is &lt;code&gt;IORef Int&lt;/code&gt;, so that we
can move them around. The exact type will be &lt;code&gt;[IORef Int]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: I am aware that using a list, which is a linked list, is a
horribly inefficient implementation. The point of this article is however to
show how &lt;code&gt;IORef&lt;/code&gt; can be used, not how to properly sort an array.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Our sorting function will accept a plain list of &lt;code&gt;Int&lt;/code&gt;s, wrap them all in
&lt;code&gt;IORef&lt;/code&gt;s, do the sorting in place, and unwrap the &lt;code&gt;IORef&lt;/code&gt;s to return a list of
&lt;code&gt;Int&lt;/code&gt;s again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;bubbleSort&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;bubbleSort&lt;/span&gt; input &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; ln &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; length input
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    xs &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; mapM newIORef input
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    forM_ &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;..&lt;/span&gt;ln &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        forM_ &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;..&lt;/span&gt;ln &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;j &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; ix &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; xs &lt;span style=&#34;color:#81a1c1&#34;&gt;!!&lt;/span&gt; j
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; iy &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; xs &lt;span style=&#34;color:#81a1c1&#34;&gt;!!&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;j &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef ix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            y &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef iy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            when &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                writeIORef ix y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                writeIORef iy x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mapM readIORef xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s go through the code one step at a time. First we need to calculate the
length of the list being sorted and bind that to a variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; ln &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; length input
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we wrap all of the items in the list inside an &lt;code&gt;IORef&lt;/code&gt;. This will allow us
to do the sort in-place by swapping around the values of the references.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;xs&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; mapM newIORef input
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s examine the &lt;code&gt;mapM&lt;/code&gt; here a little bit. The &lt;code&gt;newIORef&lt;/code&gt; function has a type
of &lt;code&gt;a -&amp;gt; IO (IORef a)&lt;/code&gt;, if we try to partially apply it with &lt;code&gt;map&lt;/code&gt;, we&amp;rsquo;ll get
back the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t map newIORef
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;IORef&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is not very useful for us, since we need a &lt;code&gt;[IORef a]&lt;/code&gt;. Fortunately
Haskell provides a &lt;code&gt;sequence :: [IO a] -&amp;gt; IO [a]&lt;/code&gt; function which simply pulls
out the monadic effects from a list.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;λ&amp;gt; :t sequence . map newIORef
:: [a] -&amp;gt; IO [IORef a]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;mapM&lt;/code&gt; is simply defined a shorthand for as &lt;code&gt;sequence . map&lt;/code&gt;. There also exists
&lt;code&gt;forM&lt;/code&gt; which is exactly like &lt;code&gt;mapM&lt;/code&gt;, but the arguments are swapped around.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t mapM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;mapM&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t forM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;forM&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One last variant is &lt;code&gt;mapM_&lt;/code&gt; and &lt;code&gt;forM_&lt;/code&gt;, which the same as &lt;code&gt;mapM&lt;/code&gt; and &lt;code&gt;forM&lt;/code&gt;,
only their return value is discarded.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t mapM_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;mapM_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t forM_
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;forM_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Monad&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We chose &lt;code&gt;forM&lt;/code&gt; because the function we pass in as an argument is quite long
and it just ends up being syntactically more pleasing, and because we only care
about the effects produced by the function we apply. &lt;code&gt;[0..ln - 2]&lt;/code&gt; simply
allows us to call the function &lt;code&gt;length - 2&lt;/code&gt; number of times.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;forM_&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;..&lt;/span&gt;ln &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    forM_ &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;..&lt;/span&gt;ln &lt;span style=&#34;color:#81a1c1&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;j &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we extract two items from the list, note that these have the type &lt;code&gt;IORef Int&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; ix &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; xs &lt;span style=&#34;color:#81a1c1&#34;&gt;!!&lt;/span&gt; j
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; iy &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; xs &lt;span style=&#34;color:#81a1c1&#34;&gt;!!&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;j &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need to read the values from the &lt;code&gt;IORef&lt;/code&gt;s in order to be able to compare them&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef ix
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; readIORef iy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and then simply swap the contents if &lt;code&gt;x &amp;gt; y&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;when&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    writeIORef ix y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    writeIORef iy x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The last step is to unwrap the &lt;code&gt;IORef&lt;/code&gt;s.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;mapM&lt;/span&gt; readIORef xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we went through each of the steps, let&amp;rsquo;s test our bubble sort implementation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; bubbleSort &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; bubbleSort &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; bubbleSort &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;93&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;93&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;99&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It works! Keep in mind that this implementation is horribly slow. If you&amp;rsquo;re
interested in fast arrays in Haskell &lt;a href=&#34;http://hackage.haskell.org/package/vector&#34;&gt;check out the vector
library&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;st-monad&#34;&gt;ST monad&lt;/h2&gt;
&lt;p&gt;You&amp;rsquo;ve probably noticed that the only reason why we need to perform our sorting
algorithm in the &lt;code&gt;IO&lt;/code&gt; monad is to have mutable references, which is not ideal
since we&amp;rsquo;re not really doing any &lt;code&gt;IO&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Luckily for us there is a solution called the &lt;em&gt;state thread monad&lt;/em&gt;. I won&amp;rsquo;t be
going on into great detail since the API for &lt;code&gt;IORef&lt;/code&gt; and &lt;code&gt;STRef&lt;/code&gt; is almost
exactly the same.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;STRef&lt;/span&gt; s a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;newSTRef&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;ST&lt;/span&gt; s &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;STRef&lt;/span&gt; s a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;readSTRef&lt;/span&gt;   &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;STRef&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;ST&lt;/span&gt; s a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;writeSTRef&lt;/span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;STRef&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;ST&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;modifySTRef&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;STRef&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;ST&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The key difference is that while we can&amp;rsquo;t ever escape from the &lt;code&gt;IO&lt;/code&gt; monad, we
do have the ability to escape from the &lt;code&gt;ST&lt;/code&gt; monad with the &lt;code&gt;runST :: ST s a -&amp;gt; a&lt;/code&gt; function, making the computation pure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Control.Monad.ST&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Data.STRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;magic&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;magic&lt;/span&gt; x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; runST &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ref &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newSTRef x
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    modifySTRef ref &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    readSTRef ref
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The only thing worth mentioning here compared to the &lt;code&gt;IORef&lt;/code&gt; example is that
the type of the function &lt;code&gt;magic&lt;/code&gt; is just &lt;code&gt;Int -&amp;gt; Int&lt;/code&gt;, because we&amp;rsquo;re able to
escape the &lt;code&gt;ST&lt;/code&gt; monad using a call to &lt;code&gt;runST&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re not sure why this is useful, think of the sorting algorithm we
developed earlier. There are many algorithms which require mutation, but which
are also pure in their nature. If the way to achieve mutation was using the
&lt;code&gt;IO&lt;/code&gt; monad, we wouldn&amp;rsquo;t be able to implement such algorithm in pure code.&lt;/p&gt;
&lt;h2 id=&#34;mvar&#34;&gt;MVar&lt;/h2&gt;
&lt;p&gt;The next type we&amp;rsquo;re going to take a look at is a little bit more complicated
than &lt;code&gt;IORef&lt;/code&gt;, it&amp;rsquo;s called an &lt;code&gt;MVar&lt;/code&gt;. As usual most of the API is similar, but
there is one huge difference. While an &lt;code&gt;IORef&lt;/code&gt; must always have a value, &lt;code&gt;MVar&lt;/code&gt;
can be empty.&lt;/p&gt;
&lt;p&gt;We have two ways of constructing an &lt;code&gt;MVar&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;newMVar&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;MVar&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;newEmptyMVar&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;MVar&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also have an additional operation &lt;code&gt;takeMVar :: MVar a -&amp;gt; IO a&lt;/code&gt; which takes a
value out of an &lt;code&gt;MVar&lt;/code&gt; and leaves it empty. Now comes the important part, &lt;strong&gt;if
we try to do &lt;code&gt;takeMVar&lt;/code&gt; from an empty &lt;code&gt;MVar&lt;/code&gt;, it will block the thread until
someone else puts a value into the &lt;code&gt;MVar&lt;/code&gt;&lt;/strong&gt;. The same thing happens when you
try to &lt;code&gt;putMVar&lt;/code&gt; into an &lt;code&gt;MVar&lt;/code&gt; that already has a value, it will block until
someone takes that value out.&lt;/p&gt;
&lt;p&gt;Try compiling and running the following program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Control.Concurrent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newEmptyMVar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    takeMVar a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After a second or so you&amp;rsquo;ll get an exception and the program will crash.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*** Exception: thread blocked indefinitely in an MVar operation
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reason for this is that there are no other threads that could possibly
modify the &lt;code&gt;MVar&lt;/code&gt;, so the runtime kills the thread. If we modify the program to
first put a value into the &lt;code&gt;MVar&lt;/code&gt; it will work correctly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newEmptyMVar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    putMVar a &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    takeMVar a &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; print
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you might be thinking, how does the runtime know that there are no other
threads that could put a value into that &lt;code&gt;MVar&lt;/code&gt;? Using garbage collection!&lt;/p&gt;
&lt;p&gt;Every &lt;code&gt;MVar&lt;/code&gt; knows which threads are currently blocked on it. If a thread that
is currently blocked on an &lt;code&gt;MVar&lt;/code&gt; is not accessible from any other running
thread, it will get killed since there is no way  it to become unblocked.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in more details about this I recommend reading the amazing
&lt;a href=&#34;http://chimera.labs.oreilly.com/books/1230000000929/index.html&#34;&gt;Parallel and Concurrent Programming in
Haskell&lt;/a&gt; book,
specifically the &lt;a href=&#34;http://chimera.labs.oreilly.com/books/1230000000929/ch15.html&#34;&gt;chapter on how blocked &lt;code&gt;MVar&lt;/code&gt;s are
handled&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;synchronizing-threads-using-mvar&#34;&gt;Synchronizing threads using &lt;code&gt;MVar&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;One of the great benefits of &lt;code&gt;MVar&lt;/code&gt;s is that they can be be used to serve as
synchronization primitives for communication between threads.&lt;/p&gt;
&lt;p&gt;We can use them as a simple 1 item channel, where we fork a thread that forever
loops trying to read from the &lt;code&gt;MVar&lt;/code&gt; and print the result, and in the main
thread we read input from the user and put it into the same &lt;code&gt;MVar&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Control.Monad&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Control.Concurrent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newEmptyMVar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    forkIO &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; forever &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; takeMVar a &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; putStrLn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    forever &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        text &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; getLine
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        putMVar a text
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everything will work as expected since &lt;code&gt;takeMVar&lt;/code&gt; will block until we put
something into the &lt;code&gt;MVar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One important thing to note here is that when &lt;code&gt;main&lt;/code&gt; returns the runtime
automatically kills all of the other running threads. It doesn&amp;rsquo;t wait for them
to finish. Let&amp;rsquo;s see a simple example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Control.Monad&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Control.Concurrent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    forkIO &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        threadDelay &lt;span style=&#34;color:#b48ead&#34;&gt;2000000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        putStrLn &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    putStrLn &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Game over!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you run this using &lt;code&gt;runhaskell&lt;/code&gt; or by compiling and running the binary
you&amp;rsquo;ll only see the output of &lt;code&gt;Game over!&lt;/code&gt;. The second thread will never print
&lt;code&gt;Hello World&lt;/code&gt;, because by the time it starts waiting the &lt;code&gt;main&lt;/code&gt; function will
return and the runtime will kill the other thread.&lt;/p&gt;
&lt;p&gt;We can fix this by using an &lt;code&gt;MVar&lt;/code&gt; to make the &lt;code&gt;main&lt;/code&gt; function wait for the
other thread to finish.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Control.Monad&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Control.Concurrent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newEmptyMVar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    forkIO &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        threadDelay &lt;span style=&#34;color:#b48ead&#34;&gt;2000000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        putStrLn &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        putMVar a &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    takeMVar a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    putStrLn &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Game over!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main thread first tried to take a value out of the &lt;code&gt;MVar&lt;/code&gt;, which will block
because there&amp;rsquo;s nothing in there yet, and then the second thread will sleep for
2 seconds, print &lt;code&gt;Hello World&lt;/code&gt; and put a &lt;code&gt;()&lt;/code&gt; into the &lt;code&gt;MVar&lt;/code&gt;. This causes
&lt;code&gt;main&lt;/code&gt; to continue, print &lt;code&gt;Game over!&lt;/code&gt; and exit the program. We could also do
this the other way around by using &lt;code&gt;putMVar&lt;/code&gt; on a full &lt;code&gt;MVar&lt;/code&gt; in order to
block, but the end result is the same.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newMVar &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    forkIO &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        threadDelay &lt;span style=&#34;color:#b48ead&#34;&gt;2000000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        putStrLn &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        takeMVar a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    putStrLn &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Game over!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    putMVar a &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are many more things to cover with respect to &lt;code&gt;MVar&lt;/code&gt;, but I&amp;rsquo;m not going
to go more in depth here, since there already are other great resources on the
topic.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chimera.labs.oreilly.com/books/1230000000929/ch07.html&#34;&gt;Parallel &amp;amp; Concurrent Programming in Haskell - Chapter 7. Basic Concurrency: Threads and MVars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.realworldhaskell.org/read/concurrent-and-multicore-programming.html&#34;&gt;Real World Haskell - Chapter 24. Concurrent and multicore programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;software-transactional-memory---stm&#34;&gt;Software Transactional Memory - STM&lt;/h1&gt;
&lt;p&gt;Last on our list is Software Transactional Memory. Much like we had &lt;code&gt;IORef&lt;/code&gt; and
&lt;code&gt;MVar&lt;/code&gt;, STM gives us &lt;code&gt;TVar&lt;/code&gt;, which stands for &lt;em&gt;transaction variable&lt;/em&gt;. The way
that STM works is that it builds up a log of actions that are to be performed
atomically. We won&amp;rsquo;t be covering STM itself as a method for managing
concurrency, since it&amp;rsquo;s a rather lengthy topic. Instead we&amp;rsquo;ll just examine the
options for achieving mutable state using STM using a &lt;code&gt;TVar&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Every STM operation happens inside the &lt;code&gt;STM&lt;/code&gt; monad, which already tells us that
we can chain multiple &lt;code&gt;STM&lt;/code&gt; operations into one (since the monad instance
provides us with &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;.) In order to run the actual &lt;code&gt;STM&lt;/code&gt; transaction we must
use the function &lt;code&gt;atomically :: STM a -&amp;gt; IO a&lt;/code&gt;, which takes any &lt;code&gt;STM&lt;/code&gt; operation
and performs it in a single atomic step.&lt;/p&gt;
&lt;p&gt;The API for creating &lt;code&gt;TVar&lt;/code&gt;s is almost the same as for &lt;code&gt;IORef&lt;/code&gt;s.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;TVar&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;newTVar&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;STM&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;TVar&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;readTVar&lt;/span&gt;   &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;TVar&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;STM&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;writeTVar&lt;/span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;TVar&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;STM&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;modifyTVar&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;TVar&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;STM&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are also alternatives that work in the &lt;code&gt;IO&lt;/code&gt; monad.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;newTVarIO&lt;/span&gt;   &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;TVar&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;readTVarIO&lt;/span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;TVar&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that these are just convenience functions that we could have implemented
ourselves using &lt;code&gt;atomically&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;newTVarIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;TVar&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;newTVarIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; atomically &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; newTVar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;readTVarIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;TVar&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;readTVarIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; atomically &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; readTVar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now let&amp;rsquo;s move onto mutations. We&amp;rsquo;ll use the same example as we did with
&lt;code&gt;IORef&lt;/code&gt;, but implement it using a &lt;code&gt;TVar&lt;/code&gt;. We have many ways to approach it,
either by building one big transaction with all the steps, or by doing this in
many small ones.&lt;/p&gt;
&lt;p&gt;First let&amp;rsquo;s do one big &lt;code&gt;atomically&lt;/code&gt; with all the steps.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;bigTransaction&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;bigTransaction&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    value &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; atomically &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        var &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newTVar &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modifyTVar var &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        readTVar var
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print value
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s not much interesting going on in here, so let&amp;rsquo;s split it into smaller
chunks. Even though &lt;code&gt;modifyTVar&lt;/code&gt; is the perfect function for our use case, we
can use a combination or &lt;code&gt;readTVar&lt;/code&gt; and &lt;code&gt;writeTVar&lt;/code&gt; to achieve the same,
because &lt;code&gt;atomically&lt;/code&gt; will make sure those two happen in a single step.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;atomicReadWrite&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;atomicReadWrite&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newTVarIO &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    atomically &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        value &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; readTVar var
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        writeTVar var &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    readTVarIO var &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; print
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since &lt;code&gt;STM&lt;/code&gt; is a monad, we can also make this more interesting by combining two
&lt;code&gt;STM&lt;/code&gt; operations together and running those atomically.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;TVar&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;STM&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;f&lt;/span&gt; var &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; modifyTVar var &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;twoCombined&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;twoCombined&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;&amp;lt;-&lt;/span&gt; newTVarIO &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    atomically &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f var
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        f var
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    readTVarIO var &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; print
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s a lot more to &lt;code&gt;STM&lt;/code&gt; than just &lt;code&gt;TVar&lt;/code&gt;s which is why I&amp;rsquo;d encourage you,
dear reader, to take a look at the following resources. You might find that it
will change the way you think about concurrent programming completely.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://research.microsoft.com/en-us/um/people/simonpj/papers/stm/lock-free-flops06.pdf&#34;&gt;Lock Free Data Structures using STM in Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://chimera.labs.oreilly.com/books/1230000000929/ch10.html&#34;&gt;Parallel and Concurrent Programming in Haskell - Chapter 10. Software Transactional Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.realworldhaskell.org/read/software-transactional-memory.html&#34;&gt;Real World Haskell - Chapter 28. Software transactional memory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Lens Tutorial - Introduction (part 1)</title>
		<link>https://blog.jakuba.net/2014-07-14-lens-tutorial-introduction-part-1/</link>
		<pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-07-14-lens-tutorial-introduction-part-1/</guid>
		<description>&lt;p&gt;This article is the first in the upcoming series that aims to explain the
Haskell&amp;rsquo;s &lt;a href=&#34;http://hackage.haskell.org/package/lens&#34;&gt;&lt;code&gt;lens&lt;/code&gt; library&lt;/a&gt; and the
ideas behind it in an approachable way. Don&amp;rsquo;t worry if you&amp;rsquo;re new to Haskell,
the only prerequisites here should be understanding of the &lt;code&gt;Functor&lt;/code&gt; type
class, and understanding how records and algebraic data types work in Haskell.&lt;/p&gt;
&lt;p&gt;We won&amp;rsquo;t be using the &lt;code&gt;lens&lt;/code&gt; library in this article yet. The API we&amp;rsquo;ll develop
will be exactly the same, but for the sake of learning I&amp;rsquo;ll try to show you how
everything works and why it works by re-implementing it from scratch.&lt;/p&gt;
&lt;p&gt;Keep in mind that lenses are a very advanced topic in Haskell and it takes some
time to truly understand them. Don&amp;rsquo;t worry if you don&amp;rsquo;t understand everything
at first read.&lt;/p&gt;
&lt;h2 id=&#34;the-motivation-behind-lenses&#34;&gt;The motivation behind lenses&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re coming from an imperative language like Ruby or Java, you&amp;rsquo;re probably
used to seeing code like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;project&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;owner&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The OOP people would call this &lt;strong&gt;a violation of the Law of Demeter&lt;/strong&gt;, but let&amp;rsquo;s
ignore that it&amp;rsquo;s a bad practice for now. The question here is, can we achieve
something similar in Haskell?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; owner &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;setOwnerName&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;setOwnerName&lt;/span&gt; newName p &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; p &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; owner &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;owner p&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; newName &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can already see how this is less than ideal. In order to change the name
of the &lt;code&gt;owner&lt;/code&gt;, we need to re-assign the owner field in the &lt;code&gt;Project&lt;/code&gt; with the
new &lt;code&gt;User&lt;/code&gt;, which is updated using the record syntax. We could do this in
multiple steps as follows.&lt;/p&gt;
&lt;p&gt;Code blocks with &lt;code&gt;λ&amp;gt; &lt;/code&gt; denote GHCi session.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; bob &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; project &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; owner &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; bob &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; alice &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; bob &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; project2 &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; project &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; owner &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; alice &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is very tedious compared to the original Ruby example, especially since we
need to keep re-building the original structure as we go deeper and deeper.&lt;/p&gt;
&lt;h2 id=&#34;a-naive-lens-implementation&#34;&gt;A naive lens implementation&lt;/h2&gt;
&lt;p&gt;This is where lenses come to help you out. In essence, lenses are just getters
and setters which you can compose together. In a naive approach the type might
look something like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; view &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; set  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Following the convention of &lt;a href=&#34;http://lens.github.io/&#34;&gt;the official lens library&lt;/a&gt;
I&amp;rsquo;ve named the type parameters &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;, where &lt;code&gt;s&lt;/code&gt; is the &lt;em&gt;object&lt;/em&gt; and &lt;code&gt;a&lt;/code&gt;
is the &lt;em&gt;focus&lt;/em&gt;. In our example above the &lt;code&gt;s&lt;/code&gt; would be &lt;code&gt;Project&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; would
be a &lt;code&gt;String&lt;/code&gt;, since we&amp;rsquo;re trying to change the name of the project&amp;rsquo;s user.&lt;/p&gt;
&lt;p&gt;Now given a lens of type &lt;code&gt;NaiveLens User String&lt;/code&gt; we can easily change the
name of a user&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; john &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; set nameLens &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt; john
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How is such lens implemented? It&amp;rsquo;s simply a getter and a setter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;nameLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;nameLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt; name &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;a s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem with this approach of sticking a getter and a setter into a data
type is that it doesn&amp;rsquo;t scale very well. If we wanted to do something like
&lt;em&gt;increment the value at the target by one&lt;/em&gt;, we would have to first &lt;code&gt;view&lt;/code&gt; the
current value, apply +1 to it, and then &lt;code&gt;set&lt;/code&gt; the new value. We could
encapsulate this by providing the lens with a third function call &lt;code&gt;over&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could use this similarly to &lt;code&gt;set&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; john &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; over ageLens &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; john
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ageLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ageLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt; age
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;a s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;f s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;age s&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that now we need to provide a getter and two setters for each
lens, even if we just use one.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve been using Haskell for a while you&amp;rsquo;ve probably seen the magical
function &lt;code&gt;const&lt;/code&gt;. It&amp;rsquo;s actually not magical at all, it simply has a type of &lt;code&gt;a -&amp;gt; b -&amp;gt; a&lt;/code&gt;, which allows us to turn &lt;code&gt;over :: (a -&amp;gt; a) -&amp;gt; s -&amp;gt; s&lt;/code&gt; into &lt;code&gt;set :: a -&amp;gt; s -&amp;gt; s&lt;/code&gt; by partially applying it, which leads to the definition of &lt;code&gt;set&lt;/code&gt; as
follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;set&lt;/span&gt; ln a s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; over ln &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;const a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s how the whole code looks now&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; view &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; over &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;set&lt;/span&gt; ln a s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; over ln &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;const a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lenses-with-side-effects-and-more&#34;&gt;Lenses with side effects and more&lt;/h2&gt;
&lt;p&gt;Now we can see that &lt;code&gt;over&lt;/code&gt; is definitely useful, but what if our modifier
function needs to perform some side effects? For example we might want to send
the current value over the network to determine the new value. We could go on
as before and add yet another function called &lt;code&gt;overIO&lt;/code&gt;, which would look as the
following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;overIO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But this means our simple pair of a getter and a setter has grown into a getter
and two setters again. Not to mention that we might want to use &lt;code&gt;over&lt;/code&gt; in more
settings than just &lt;code&gt;IO&lt;/code&gt;. Here&amp;rsquo;s how the type would look now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;NaiveLens&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; view   &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; over   &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                         &lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; overIO &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; s &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the point where the magical generalization of what is called the &lt;em&gt;van
Laarhoven lens&lt;/em&gt; comes into play. First step is that we can write our &lt;code&gt;overIO&lt;/code&gt;
in a more general way by swapping &lt;code&gt;IO&lt;/code&gt; for a &lt;code&gt;Functor&lt;/code&gt;, which gives us the
following type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;overF&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the sake of keeping this article short I&amp;rsquo;m going to tell you that &lt;code&gt;overF&lt;/code&gt;
is everything we need in order to implement &lt;code&gt;view&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;over&lt;/code&gt; and &lt;code&gt;overIO&lt;/code&gt;.
Which means we no longer need a &lt;code&gt;Lens&lt;/code&gt; record type, since we&amp;rsquo;ll have just one
function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By making this a type alias instead of a &lt;code&gt;newtype&lt;/code&gt; or &lt;code&gt;data&lt;/code&gt; we get one amazing
property of lenses. You can define your own lenses without depending on the
&lt;code&gt;lens&lt;/code&gt; library. &lt;strong&gt;Any function which has the appropriate type signature is a
lens&lt;/strong&gt;, there is no magic.&lt;/p&gt;
&lt;p&gt;One thing to note here is that we do need to enable the
&lt;a href=&#34;http://www.haskell.org/haskellwiki/Rank-N_types&#34;&gt;&lt;code&gt;RankNTypes&lt;/code&gt;&lt;/a&gt; extension for
this type alias to compile. To do that simply add the following snippet to the
first line of your file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;{-# LANGUAGE RankNTypes #-}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or if you&amp;rsquo;re following along in GHCi type &lt;code&gt;:set -XRankNTypes&lt;/code&gt;. I won&amp;rsquo;t be
explaining this in this article since it&amp;rsquo;s quite a complicated topic, but if
you&amp;rsquo;re interested in learning more, a simple google search will yield a lot of
good results.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;implementing-over-set-and-view-in-terms-of-lens-s-a&#34;&gt;Implementing &lt;code&gt;over&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;view&lt;/code&gt; in terms of &lt;code&gt;Lens s a&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s summarize before we move on. We started with an idea that a lens
represents a getter and a setter into some data type. Then we generalized the
setter to work with functions (using &lt;code&gt;over&lt;/code&gt;). Last we realized that &lt;code&gt;over&lt;/code&gt; is
not good enough when we want to do side effects, so we moved to &lt;code&gt;overIO&lt;/code&gt; and
finally generalized it to the &lt;em&gt;van Laarhoven&lt;/em&gt; lens of &lt;code&gt;Functor f =&amp;gt; (a -&amp;gt; f a) -&amp;gt; s -&amp;gt; f s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So far I&amp;rsquo;ve only told you that our new &lt;code&gt;Lens s a&lt;/code&gt; can behave like &lt;code&gt;over&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;
and &lt;code&gt;view&lt;/code&gt;, but we need to prove it to really understand why. In order to do
this we&amp;rsquo;ll make use to two &lt;code&gt;Functor&lt;/code&gt; instances that come from the &lt;code&gt;base&lt;/code&gt;
library, namely &lt;code&gt;Data.Functor.Identity&lt;/code&gt; and &lt;code&gt;Control.Applicative.Const&lt;/code&gt;. Let&amp;rsquo;s
start with the simplest one, that is implementing &lt;code&gt;over&lt;/code&gt; with the &lt;code&gt;Identity&lt;/code&gt;
functor.&lt;/p&gt;
&lt;h2 id=&#34;over-with-identity&#34;&gt;&lt;code&gt;over&lt;/code&gt; with &lt;code&gt;Identity&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;First of all, here&amp;rsquo;s the implementation of &lt;code&gt;Identity&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;newtype&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; runIdentity &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fmap f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason why this is useful is because we can put a value in, let it behave
as a functor, and then take the value out.&lt;/p&gt;
&lt;p&gt;The final type of &lt;code&gt;over&lt;/code&gt; that we&amp;rsquo;re looking for is &lt;code&gt;over :: Lens s a -&amp;gt; (a -&amp;gt; a) -&amp;gt; s -&amp;gt; s&lt;/code&gt;. We can read that as: &lt;em&gt;Given a lens focusing on an &lt;code&gt;a&lt;/code&gt; inside of
an &lt;code&gt;s&lt;/code&gt;, and a function from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt;, and an &lt;code&gt;s&lt;/code&gt;, I can give you back a
modified &lt;code&gt;s&lt;/code&gt; from applying the function to the focus point of the lens.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; ln f s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re on GHC 7.8.x you can copy the exact snippet above and get an error
telling you what type is needed in place of &lt;code&gt;_&lt;/code&gt; (this functionality is provided
by so called type holes.) Also don&amp;rsquo;t forget that you need to add the type alias
for &lt;code&gt;Lens s a&lt;/code&gt; and enable the &lt;code&gt;RankNTypes&lt;/code&gt; extension as mentioned above.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We&amp;rsquo;ll inline the &lt;code&gt;Lens&lt;/code&gt; type synonym, just so that we can see what is really
going on. Don&amp;rsquo;t worry if the type looks scary, it will all make sense in a
short while.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f s&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; ln f s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve added a few parentheses, especially around the &lt;code&gt;s -&amp;gt; f s&lt;/code&gt;, to make it
clear as we go along with partial applications. Keep in mind that &lt;code&gt;Lens&lt;/code&gt; is
just a function, nothing more.&lt;/p&gt;
&lt;p&gt;We only have one function of the type &lt;code&gt;a -&amp;gt; f a&lt;/code&gt; available here to pass into
the lens &lt;code&gt;ln&lt;/code&gt;, and that is &lt;code&gt;Identity&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; ln f s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ln &lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;using-ghci-to-play-with-types&#34;&gt;Using GHCi to play with types&lt;/h2&gt;
&lt;p&gt;If you want to play along in GHCi, there&amp;rsquo;s a neat little trick you can do to
interactively play with types. Say that you want to see the type of &lt;code&gt;ln Identity&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; ln &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; undefined &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f s&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t ln &lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason why this works is because the &lt;code&gt;undefined&lt;/code&gt; can take on any type.
Since we&amp;rsquo;re just trying to make the types align, you won&amp;rsquo;t get an error from
trying to evaluate the &lt;code&gt;undefined&lt;/code&gt;, you&amp;rsquo;ll just a type error. This way you can
keep trying to partially apply things to see if the types match as you expect.&lt;/p&gt;
&lt;p&gt;Anyway, moving on. We haven&amp;rsquo;t really used our function &lt;code&gt;f&lt;/code&gt; yet, and there will
be no more &lt;code&gt;a&lt;/code&gt; to apply it to ones we give something to the lens &lt;code&gt;ln&lt;/code&gt;. This is
why we need to apply it before we stick in the &lt;code&gt;Identity&lt;/code&gt;, or compose it with
the &lt;code&gt;Identity&lt;/code&gt; to be specific.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; ln f s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;ln &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now our current type hole if &lt;code&gt;(s -&amp;gt; f s) -&amp;gt; s&lt;/code&gt;, which means we can stick in our
&lt;code&gt;s&lt;/code&gt;. To make this syntactically more pleasing we&amp;rsquo;ll replace some parentheses
with &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; ln f s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; ln &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hang in, we&amp;rsquo;re almost done. The last thing we need do, as our type hole tells
us, is &lt;code&gt;f s -&amp;gt; s&lt;/code&gt;, which means we basically need to rip off the functor. This
is easy to do as we&amp;rsquo;re using the &lt;code&gt;Identity&lt;/code&gt; functor, so we just apply
&lt;code&gt;runIdentity&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; ln f s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; runIdentity &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; ln &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re feeling adventurous, we can rewrite this using point free style.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;over&lt;/span&gt; ln f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; runIdentity &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; ln &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt; f&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;view-with-const&#34;&gt;&lt;code&gt;view&lt;/code&gt; with &lt;code&gt;Const&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s move on to &lt;code&gt;view&lt;/code&gt;, where the type is simply &lt;code&gt;view :: Lens s a -&amp;gt; s -&amp;gt; a&lt;/code&gt;. We can read this as: &lt;em&gt;Given a lens that focuses on an &lt;code&gt;a&lt;/code&gt; inside of an &lt;code&gt;s&lt;/code&gt;,
and an &lt;code&gt;s&lt;/code&gt;, I can give you an &lt;code&gt;a&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This part is probably the most magical, since the type of the &lt;code&gt;Lens s a&lt;/code&gt; is &lt;code&gt;(a -&amp;gt; f a) -&amp;gt; s -&amp;gt; f s&lt;/code&gt; and we&amp;rsquo;re trying to implement something that&amp;rsquo;s &lt;code&gt;s -&amp;gt; a&lt;/code&gt;,
which means we need to have a way to turn the final &lt;code&gt;f s&lt;/code&gt; into an &lt;code&gt;a&lt;/code&gt;. The key
to this is the &lt;code&gt;Const&lt;/code&gt; functor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;newtype&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; a b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; a &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  fmap &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s break this down into steps and first explain how &lt;code&gt;Const&lt;/code&gt; works. &lt;code&gt;Const&lt;/code&gt;
is a wrapper which takes a value, hides it deep inside, and then pretends to be
a functor containing something else, which is why it ignores the function
you&amp;rsquo;re trying to &lt;code&gt;fmap&lt;/code&gt; over const. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ve hidden a &lt;code&gt;&amp;quot;hello&amp;quot;&lt;/code&gt; string inside a &lt;code&gt;Const&lt;/code&gt;, now let&amp;rsquo;s try to apply a
boolean function to it using &lt;code&gt;fmap&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; boolBox &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;False&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t boolBox
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Char&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Const&lt;/code&gt; has taken over to be a type of &lt;code&gt;Const String Bool&lt;/code&gt;. If we &lt;code&gt;fmap&lt;/code&gt;
over a function &lt;code&gt;Bool -&amp;gt; Double&lt;/code&gt; we&amp;rsquo;ll get a &lt;code&gt;Const String Double&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;t fmap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1.2&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; boolBox
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Double&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The important thing to keep in mind here is that the &lt;code&gt;Const&lt;/code&gt; simply ignores the
function we&amp;rsquo;re fmapping and takes on the new type, while keeping our original
&lt;code&gt;String&lt;/code&gt; safe. We can extract it back at any time we want, no matter how many
things we&amp;rsquo;ve &lt;code&gt;fmap&lt;/code&gt;ped.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; getConst boolBox
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; fmap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1.2&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; boolBox
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-actual-view-implementation&#34;&gt;The actual &lt;code&gt;view&lt;/code&gt; implementation&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s do this using type holes again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; ln s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can approach this the same way as we did before when implementing &lt;code&gt;over&lt;/code&gt;
using &lt;code&gt;Identity&lt;/code&gt;. First of all, here&amp;rsquo;s the type of &lt;code&gt;Lens s a&lt;/code&gt; again in case you
forgot &lt;code&gt;Functor f =&amp;gt; (a -&amp;gt; f a) -&amp;gt; s -&amp;gt; f s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you squint hard enough you can see that if we somehow pass a function to
&lt;code&gt;ln&lt;/code&gt;, we&amp;rsquo;ll get back another function of the type &lt;code&gt;s -&amp;gt; f s&lt;/code&gt;, which we can give
our &lt;code&gt;s&lt;/code&gt;, and then the only thing remaining is to extract the resulting &lt;code&gt;a&lt;/code&gt; out
of the &lt;code&gt;f s&lt;/code&gt;. Again the only function  that fits here is &lt;code&gt;Const&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; ln s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; ln &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The type of the hole here is &lt;code&gt;(s -&amp;gt; f s) -&amp;gt; a&lt;/code&gt;, which means we can apply our
&lt;code&gt;s&lt;/code&gt; on the right side as we did with &lt;code&gt;over&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; ln s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; ln &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now all we&amp;rsquo;re left with is &lt;code&gt;f s -&amp;gt; a&lt;/code&gt;, and because we know that the &lt;code&gt;f s&lt;/code&gt; is
actually &lt;code&gt;Const a s&lt;/code&gt; we can get back the &lt;code&gt;a&lt;/code&gt; using &lt;code&gt;getConst&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;view&lt;/span&gt; ln s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; getConst &lt;span style=&#34;color:#81a1c1&#34;&gt;$&lt;/span&gt; ln &lt;span style=&#34;color:#81a1c1&#34;&gt;Const&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And there you go, we got ourselves a &lt;code&gt;view&lt;/code&gt;. I won&amp;rsquo;t be showing how to
implement &lt;code&gt;set&lt;/code&gt; step by step, since it can be trivially defined either in terms
of &lt;code&gt;over&lt;/code&gt;, which is good enough for us.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;set&lt;/span&gt; ln x &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; over ln &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;const x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;writing-our-own-lenses&#34;&gt;Writing our own lenses&lt;/h2&gt;
&lt;p&gt;In order to use lenses we actually need to have some lenses. As said earlier,
we do not need the &lt;code&gt;lens&lt;/code&gt; library to define a new lens, we only need a function
with the type of &lt;code&gt;Functor f =&amp;gt; (a -&amp;gt; f a) -&amp;gt; s -&amp;gt; f s&lt;/code&gt;. Let&amp;rsquo;s make one!&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll start by implementing the &lt;code&gt;_1&lt;/code&gt; lens, which focuses on a first element of
a pair. The type will be &lt;code&gt;Lens (a,b) a&lt;/code&gt; or specifically &lt;code&gt;Functor f =&amp;gt; (a -&amp;gt; f a) -&amp;gt; (a,b) -&amp;gt; f (a,b)&lt;/code&gt;, in another words &lt;em&gt;Given a pair of &lt;code&gt;(a,b)&lt;/code&gt; the lens
focuses on the first element of the pair, which is &lt;code&gt;a&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;_1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;_1&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An interesting thing about pure functions in Haskell is that more often than
not, there is only one way to implement a function so that it typechecks. We
can use the types as we did earlier to guide us while implementing this.&lt;/p&gt;
&lt;p&gt;Ok let&amp;rsquo;s get going. We have three values available (via the function
parameters), &lt;code&gt;f :: a -&amp;gt; f a&lt;/code&gt;, &lt;code&gt;x :: a&lt;/code&gt; and &lt;code&gt;y :: b&lt;/code&gt;. The only thing we can do
here is apply &lt;code&gt;f&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;_1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;_1&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; f x
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will fail to typecheck, since we&amp;rsquo;re trying to return &lt;code&gt;f a&lt;/code&gt; instead of &lt;code&gt;f (a,b)&lt;/code&gt;. What else can we do now? We know &lt;code&gt;f&lt;/code&gt; is a &lt;code&gt;Functor&lt;/code&gt;, which means we can
use &lt;code&gt;fmap&lt;/code&gt;. We also know that we need to somehow use &lt;code&gt;y&lt;/code&gt; to compose the result.
If you think about this for a while, all we can really do is &lt;code&gt;fmap&lt;/code&gt; some
function on the result of &lt;code&gt;f x&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;_1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;_1&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmap &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result is that the type of &lt;code&gt;_&lt;/code&gt; in this case must be &lt;code&gt;a -&amp;gt; (a, b)&lt;/code&gt;. That&amp;rsquo;s
it, we only have one thing of type &lt;code&gt;b&lt;/code&gt;, which is &lt;code&gt;y&lt;/code&gt;, and the &lt;code&gt;a&lt;/code&gt; we can take
just form the parameter passed to the lambda, hence giving us the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;_1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;_1&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;y&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; y&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f x&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Whoa, did we just write an actual lens? I believe we did sir. Let&amp;rsquo;s test things
out!&lt;/p&gt;
&lt;h2 id=&#34;using-lenses&#34;&gt;Using lenses&lt;/h2&gt;
&lt;p&gt;Now that we got ourselves a &lt;code&gt;view&lt;/code&gt; and &lt;code&gt;_1&lt;/code&gt; lens, let&amp;rsquo;s play!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; view _1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also use &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;over&lt;/code&gt; to change the value&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; set _1 &lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; over _1 &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s see how to define a lens for the original &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Project&lt;/code&gt; types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; owner &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Show&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll start with a lens for the &lt;code&gt;User&lt;/code&gt;&amp;rsquo;s &lt;code&gt;name&lt;/code&gt;, which simply has the type
&lt;code&gt;Lens User String&lt;/code&gt;. There&amp;rsquo;s no magic here, we&amp;rsquo;ll just follow the same pattern
as we did with the &lt;code&gt;_1&lt;/code&gt; lens.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;nameLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;nameLens&lt;/span&gt; f user &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;newName &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; user &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; newName &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;name user&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see this is just mechanical work. We can define the other two lenses
for &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;owner&lt;/code&gt; by simply copy pasting the first one and changing a few
things around.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ageLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ageLens&lt;/span&gt; f user &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;newAge &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; user &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; newAge &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;age user&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ownerLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ownerLens&lt;/span&gt; f project &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; fmap &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;\&lt;/span&gt;newOwner &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; project &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; owner &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; newOwner &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;owner project&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;composing-lenses-together&#34;&gt;Composing lenses together&lt;/h2&gt;
&lt;p&gt;Because lenses are just functions (remember that &lt;code&gt;Lens s a&lt;/code&gt; is just a type
alias) we can compose them using the ordinary function composition &lt;code&gt;.&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ownerNameLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;ownerNameLens&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; ownerLens&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;nameLens
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s test this out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; john &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let&lt;/span&gt; p &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; owner &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; john &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; view ownerNameLens p
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;λ&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt; set ownerNameLens &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt; p
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Project&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;owner &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;User&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;name &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; age &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion-of-part-1&#34;&gt;Conclusion of part 1&lt;/h2&gt;
&lt;p&gt;Congratulations to you if you&amp;rsquo;ve read this far, you now have a good
understanding of how the basic &lt;code&gt;Lens s a&lt;/code&gt; works. This is not the end though,
since lenses are a very large subject and there is a lot of ground to cover.
The followup posts to this one will cover the more general &lt;code&gt;Lens s t a b&lt;/code&gt; type,
folds, traversals, prisms, isos, using template haskell to generate lenses, and
much more!&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re curious especially about the &lt;code&gt;Lens s t a b&lt;/code&gt; type and what it means,
it&amp;rsquo;s basically just a small generalization of what we&amp;rsquo;ve devleoped here.
Compare the following two:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&amp;#39;&lt;/span&gt; s a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; s t a b &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Functor&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f b&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f t
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This might look weird at first, but it&amp;rsquo;s not if you apply it to a specific data
type, such as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Lens&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Double&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#81a1c1&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; f &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Double&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It simply allows you to change the type of the underlying structure, but as I
said earlier, we&amp;rsquo;ll cover this more in one of the upcoming blog posts.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Using Phantom Types in Haskell for Extra Safety - Part 2</title>
		<link>https://blog.jakuba.net/2014-07-10-using-phantom-types-in-haskell-for-extra-safety-part-2/</link>
		<pubDate>Thu, 10 Jul 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-07-10-using-phantom-types-in-haskell-for-extra-safety-part-2/</guid>
		<description>&lt;p&gt;I&amp;rsquo;ve received &lt;strong&gt;a lot of reactions to the &lt;a href=&#34;https://blog.jakuba.net/2014/07/08/using-phantom-types-for-extra-safety.html&#34;&gt;previous blog post about Phantom
Types&lt;/a&gt;&lt;/strong&gt;
over the past two days, which is why I&amp;rsquo;ve decided to summarize what I&amp;rsquo;ve
learned in another blog post.&lt;/p&gt;
&lt;p&gt;First, here&amp;rsquo;s a summarized problem from the previous post. We have a &lt;code&gt;Message&lt;/code&gt;
which can be either &lt;code&gt;PlainText&lt;/code&gt; or &lt;code&gt;Encrypted&lt;/code&gt;. We&amp;rsquo;ve used Phantom Types to
enforce this in the type system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;encrypt&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;decrypt&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;can-newtype-do-the-same&#34;&gt;Can newtype do the same?&lt;/h2&gt;
&lt;p&gt;Many people mentioned that we could use the Haskell&amp;rsquo;s &lt;code&gt;newtype&lt;/code&gt; to do the same,
here&amp;rsquo;s how that would look.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;newtype&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainTextMessage&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainTextMessage&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;newtype&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;EncryptedMessage&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;EncryptedMessage&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;EncryptedMessage&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;encrypt&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainTextMessage&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;EncryptedMessage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;decrypt&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;EncryptedMessage&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainTextMessage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This example would work perfectly fine, and it&amp;rsquo;s how you&amp;rsquo;d probably solve this
in a statically typed language with no option for representing Phantom Types.&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s one downside to this solution. Our new &lt;code&gt;PlainTextMessage&lt;/code&gt; and
&lt;code&gt;EncryptedMessage&lt;/code&gt; are no longer related, which means we can&amp;rsquo;t write a function
that operates on both of them. Why would we need that? I&amp;rsquo;m glad you asked!
Here&amp;rsquo;s how a simple &lt;code&gt;length&lt;/code&gt; function would look in Haskell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;xs&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;+&lt;/span&gt; length xs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to calculate the length of a list, we do not care what is in the list.
The same way if we wanted to calculate a &lt;code&gt;messageLength&lt;/code&gt;, we don&amp;rsquo;t care if the
message has been encrypted or not, we just want to count the characters. This
is dead simple if we had Phantom Types, but it would be very hard using the
&lt;code&gt;newtype&lt;/code&gt; solution, since &lt;code&gt;PlainTextMessage&lt;/code&gt; and &lt;code&gt;EncryptedMessage&lt;/code&gt; are
parametrically (is that even a word?) not the same thing.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;messageLength&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;messageLength&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; length m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, we simply ignore the type parameter &lt;code&gt;a&lt;/code&gt; of the &lt;code&gt;Message&lt;/code&gt; type
and calculate the length of the inner &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We could achieve the same in the &lt;code&gt;newtype&lt;/code&gt; solution using type classes, but it
would be unnecessarily more complicated. Phantom types just fit this solution
more naturally.&lt;/p&gt;
&lt;h1 id=&#34;gadts&#34;&gt;GADTs&lt;/h1&gt;
&lt;p&gt;Some people have noted that we could achieve the same thing using &lt;code&gt;GADTs&lt;/code&gt;
(Generalised Algebraic Data Types), which is an extension to the Haskell&amp;rsquo;s type
system. I didn&amp;rsquo;t want to dive into this at first, since GADTs are much harder
to understand for non-Haskell programmers, but let&amp;rsquo;s show a simple
implementation of this example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;where&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;EncryptedMessage&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainTextMessage&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference here is that we&amp;rsquo;re basically creating typed value constructors
which automatically enforce the resulting type of the &lt;code&gt;Message&lt;/code&gt;. For example if
we do &lt;code&gt;EncryptedMessage &amp;quot;hello&amp;quot;&lt;/code&gt;, it will automatically have the type of
&lt;code&gt;Message Encrypted&lt;/code&gt;. This might seem the same as the &lt;code&gt;newtype&lt;/code&gt; solution
mentioned above, but by using &lt;code&gt;GADTs&lt;/code&gt; we can still write a generic
&lt;code&gt;messageLength&lt;/code&gt; function, exactly as we did previously.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;messageLength&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;messageLength&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;EncryptedMessage&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; length m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;messageLength&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;PlainTextMessage&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; length m
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference here is, that we need to pattern match on both of the
constructors. An implementation fo the &lt;code&gt;send&lt;/code&gt; function might look something
like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;EncryptedMessage&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;-- some magic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re familiar a bit with Haskell, you might be thinking that this function
is not total and could produce a non-exhaustive pattern match error. But in
fact it can&amp;rsquo;t, because it expects it&amp;rsquo;s argument of the type &lt;code&gt;Message Encrypted&lt;/code&gt;. If you try to call it with a &lt;code&gt;PlainText&lt;/code&gt; message it would be a type
error.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;PlainTextMessage&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;-- type error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is one of the beauties of &lt;code&gt;GADTs&lt;/code&gt;. If you&amp;rsquo;re interested in learning more
about them, I recommend reading &lt;a href=&#34;http://www.haskell.org/haskellwiki/Generalised_algebraic_datatype&#34;&gt;the Haskell Wiki
page&lt;/a&gt; as
well as &lt;a href=&#34;http://www.haskell.org/haskellwiki/GADTs_for_dummies&#34;&gt;many&lt;/a&gt;
&lt;a href=&#34;http://en.wikibooks.org/wiki/Haskell/GADT&#34;&gt;others&lt;/a&gt;. I&amp;rsquo;ll probably write
another followup article that explains just &lt;code&gt;GADTs&lt;/code&gt;, just because they&amp;rsquo;re such
a rich feature.&lt;/p&gt;
&lt;h1 id=&#34;tell-dont-ask&#34;&gt;Tell don&amp;rsquo;t ask™&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://patrickdlogan.blogspot.cz/2014/07/being-safer-in-dynamic-languages.html&#34;&gt;Patrick Dlogan actually took the time to write an article as a reaction to
mine&lt;/a&gt;,
where he shows a solution in which messages know how to encrypt themselves,
which allows you to get rid of the &lt;code&gt;if&lt;/code&gt; check in a dynamic language. Here&amp;rsquo;s
also a similar response from &lt;a href=&#34;https://lobste.rs/s/5ekbap/using_phantom_types_in_haskell_for_extra_safety&#34;&gt;comments on
Lobste.rs&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Struct&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;new&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:text&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;ciphertext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @ciphertext &lt;span style=&#34;color:#81a1c1&#34;&gt;||=&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# encrypt plain text logic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;send_message&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;message&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# send using message.ciphertext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We could label both of these solutions as a kind of &lt;em&gt;tell don&amp;rsquo;t ask™&lt;/em&gt;
principle. Basically what it means is that instead of performing the encryption
first, and then sending the message out, the encryption step is being run
directly when sending the message.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how something similar might look in Haskell. We&amp;rsquo;re simply doing the
encryption when sending the message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; someMagic &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;encrypt m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now this might make sense in some cases, but what if there is more than one
place where a message can get encrypted? We could solve that by making
&lt;code&gt;encrypt&lt;/code&gt; do nothing for already encrypted messages, but there are downsides to
doing that.&lt;/p&gt;
&lt;p&gt;First of all it&amp;rsquo;s important to realize that this is restructuring how the
program works. If &lt;code&gt;encrypt&lt;/code&gt; is something that can fail we&amp;rsquo;ve effectively moved
that failure to a different place. If &lt;code&gt;encrypt&lt;/code&gt; was throwing an exception that
had to be handled, now that error handling needs to happen in the place of the
caller of &lt;code&gt;send&lt;/code&gt; (assuming it&amp;rsquo;s not something we can deal right in place.)&lt;/p&gt;
&lt;p&gt;Another more important reason why this wouldn&amp;rsquo;t always be possible is that the
code for constructing messages might be outside of our control. Say that all of
the logic is hidden in a library which you can&amp;rsquo;t change for various reason, or
these are just some data types you&amp;rsquo;re receiving from an API.&lt;/p&gt;
&lt;p&gt;The library could still make use of Phantom Types to safely tag the values on
the type level, while you wouldn&amp;rsquo;t be able to apply this &lt;em&gt;tell don&amp;rsquo;t ask&lt;/em&gt;
approach, since the &lt;code&gt;encrypt&lt;/code&gt; logic is not in your control.&lt;/p&gt;
&lt;p&gt;I guess the TL;DR here is that by using the type system in a smart way we can
add additional checks that are verified at compile time, that increase the
safety of our programs. It&amp;rsquo;s not a technique for re-structuring or re-designing
a portion of the codebase.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Using Phantom Types for Extra Safety</title>
		<link>https://blog.jakuba.net/2014-07-08-using-phantom-types-for-extra-safety/</link>
		<pubDate>Tue, 08 Jul 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-07-08-using-phantom-types-for-extra-safety/</guid>
		<description>&lt;p&gt;If you’ve been programming in a dynamic language, you’ve probably heard that
type systems can catch more errors before your application even gets run. The
more powerful the type system is, the more you can express in it. And because
we’re talking about Haskell, we have a great number of tools at our disposal
when trying to express things in terms of the types.&lt;/p&gt;
&lt;p&gt;Why is this important? Sometimes a function has an expectation about the value
that it’s receiving. In most imperative languages those expectations are
implicit and up to the programmer to hold, such as the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;foo&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bar&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bar&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;baz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example the function &lt;code&gt;foo&lt;/code&gt; implicitly expects an object which is not
&lt;code&gt;nil&lt;/code&gt;. If you call &lt;code&gt;foo(nil)&lt;/code&gt;, you’ll get an exception at runtime. To combat
this we usually write unit tests to verify that our system will never get into
such state that the function would get passed in a &lt;code&gt;nil&lt;/code&gt;. Now this is a very
simple example, let’s take a look at a more complicated one.&lt;/p&gt;
&lt;p&gt;Imagine you’re writing a service which receives messages from users, encrypts
them, and sends them on through an unsecured channel. The messages are both
being sent and received as base64 encoded strings, so you can’t easily tell if
a message has been encrypted by just inspecting it.&lt;/p&gt;
&lt;p&gt;Here’s how we could represent the message in Haskell and in Ruby, just so that
we can compare the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Message&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;attr_accessor&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;initialize&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;text&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @text &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now this is all well and good, but we also want to keep track if the message
has been encrypted or if it is still in plain text. To do this in Haskell we’ll
use a simple Algebraic Data Type, while in Ruby we’ll add an additional
attribute called &lt;code&gt;encrypted&lt;/code&gt;, which will default to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Message&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;attr_accessor&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:text&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:encrypted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;initialize&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;text&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @text &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @encrypted &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While the Haskell version is less verbose, it doesn’t give us much more safety
guarantees at this point. Let’s say we want to define a function which sends a
message. We want it only to accept a message that has been encrypted, since
sending a plain text message is unsafe and should not be allowed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#88c0d0&#34;&gt;send_message&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;message&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; recipient&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;if&lt;/span&gt; message&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;encrypted
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;# send logic&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;ArgumentError&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Can’t send a plain text message&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Recipient&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt; m&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; recipient &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; some magic with m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; undefined
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It doesn’t really matter how we chose to represent this in Haskell. Even if we
used a &lt;code&gt;Maybe&lt;/code&gt; or &lt;code&gt;Either&lt;/code&gt; to handle the failure, we would still have to handle
this at runtime. Which means only one thing, this function needs to be for the
edge case that we pass in a message in an invalid state, and we would also need
to test the error handling. This is as far as we can go with Ruby, since
there’s no way to enforce more structure into the program.&lt;/p&gt;
&lt;p&gt;But wouldn’t it be much nicer if a program that’s trying to call &lt;code&gt;send&lt;/code&gt; with
&lt;code&gt;PlainText&lt;/code&gt; message would get rejected by the type checker? Such program is not
valid in our business domain and it shouldn&amp;rsquo;t compile. If we manage to do that,
we can save ourselves the error handling, and also writing tests for the error
handling.&lt;/p&gt;
&lt;p&gt;To be able to do this we need to express the relationship between the
&lt;code&gt;Encrypted&lt;/code&gt; message and the &lt;code&gt;send&lt;/code&gt; function at the type level. The trick that
allows us to do this is called &lt;code&gt;Phantom Types&lt;/code&gt;, but to understand those, first
let&amp;rsquo;s take a look at simple parametric data types in Haskell. They are very
similar to templates or generics in C++/C#/Java and many other languages.
Here&amp;rsquo;s a simple parametric type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Maybe&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Just&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Nothing&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;a&lt;/code&gt; on the left side is simply a &lt;em&gt;type parameter&lt;/em&gt;. If we choose to create a
value such as &lt;code&gt;Just 3&lt;/code&gt;, it would have the type of &lt;code&gt;Maybe Int&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;phantom-types&#34;&gt;Phantom Types&lt;/h2&gt;
&lt;p&gt;A type is called a Phantom Type if it has a type parameter which only appears
on the left hand side, but is not used by any of the value constructors. Here&amp;rsquo;s
how we could need to modify our &lt;code&gt;Message&lt;/code&gt; type to make it into a Phantom Type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; a &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This allows us to have things like &lt;code&gt;Message Int&lt;/code&gt;, &lt;code&gt;Message String&lt;/code&gt;, &lt;code&gt;Message (Maybe Char)&lt;/code&gt;, and so on. In itself it might not look appealing, since no
matter what type we use it will still have a single value constructor which
works with &lt;code&gt;String&lt;/code&gt;s. But let&amp;rsquo;s expand this further by adding two empty data
types, one for each type of the message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us an option to create both &lt;code&gt;Message Encrypted&lt;/code&gt; and &lt;code&gt;Message PlainText&lt;/code&gt; types. Remember that even if we&amp;rsquo;re not using the type parameter in
any of the constructors, it is still verified by the type system, which means
we can change our &lt;code&gt;send&lt;/code&gt; function to have the following signature.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Recipient&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;encrypt&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;decrypt&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Encrypted&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The last thing we would need to do to make this completely safe is to make the
constructor for &lt;code&gt;Message&lt;/code&gt; private and only export a function for creating a new
instance of the type. This makes it impossible to change the &lt;em&gt;state&lt;/em&gt; of the
&lt;code&gt;Message&lt;/code&gt; type in any other way, but by using our &lt;code&gt;encrypt&lt;/code&gt; and &lt;code&gt;decrypt&lt;/code&gt;
functions, because you wouldn&amp;rsquo;t be able to use pattern matching to extract the
inner value. The function for creating a new &lt;code&gt;Message&lt;/code&gt; could look something
like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;newMessage&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;PlainText&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;newMessage&lt;/span&gt; s &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;Message&lt;/span&gt; s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now armed with the power of Phantom Types, the following would be rejected by
the type system, making it impossible to send plain-text messages.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;send&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;newMessage &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;hello!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;john@example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A similar thing could also be implemented using &lt;a href=&#34;http://www.haskell.org/haskellwiki/Generalised_algebraic_datatype&#34;&gt;Generalised Algebraic Data
Types&lt;/a&gt;
(GADTs), but that&amp;rsquo;s in the scope of this article. If you&amp;rsquo;re interested in
learning more, I recommend checking out the &lt;a href=&#34;http://www.haskell.org/haskellwiki/Phantom_type&#34;&gt;Haskell Wiki article about Phantom
Types&lt;/a&gt;, which has some great
examples, or the &lt;a href=&#34;http://en.wikibooks.org/wiki/Haskell/Phantom_types&#34;&gt;WikiBooks
entry&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; As it was just pointed out in the &lt;a href=&#34;https://lobste.rs/s/5ekbap/using_phantom_types_in_haskell_for_extra_safety&#34;&gt;comments on
Lobste.rs&lt;/a&gt;,
it&amp;rsquo;s worth noting that all of this safety guarantee comes for free. The
types are stripped when the program type checks and compiles, so there
is no runtime overhead. This might be something not so obvious to people
used to programming in dynamic languages.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Evil Mode: How I Switched From VIM to Emacs</title>
		<link>https://blog.jakuba.net/2014-06-23-evil-mode-how-to-switch-from-vim-to-emacs/</link>
		<pubDate>Mon, 23 Jun 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-06-23-evil-mode-how-to-switch-from-vim-to-emacs/</guid>
		<description>&lt;p&gt;I&amp;rsquo;ve been a long time VIM user. I use it every day for all
of my work and side projects, writing blog posts, writing other
content, sometimes even for writing emails if the text is long
enough. VIM is like my home and I&amp;rsquo;m deeply in love with it.&lt;/p&gt;
&lt;p&gt;The problem is that VIM is a horrible IDE. It&amp;rsquo;s an amazing and super
productive editor, but it really sucks at doing IDE-like things. Now
you might be thinking I&amp;rsquo;m a noob who needs to click on good looking
buttons in RubyMine to get things done. No, that&amp;rsquo;s not what I mean by
IDE &amp;hellip; let me explain.&lt;/p&gt;
&lt;p&gt;Most of my work in the past years has been either Ruby or
JavaScript. Those are dynamic languages with close to none IDE
support. You don&amp;rsquo;t usually run a REPL and eval your Rails app, but
instead write a test, write some code, hit a button to run the test,
and occasionally reload the browser.&lt;/p&gt;
&lt;p&gt;Most of the work is heavy editing of large amounts of source code,
which is what VIM excels at. Running the tests is easy as well, since
you can just bind it to a key with a single line of vimscript&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;t :!rspec %&amp;lt;cr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is all nice, but what if you want to use a language which has a
REPL? What if you want to display errors inline every time you save a file?&lt;/p&gt;
&lt;p&gt;I can actually answer both of these right now. There were numerous
attempts to bring something REPL-like to VIM, but usually the outcome
is unusable. Most people I know don&amp;rsquo;t even bother with this and use
&lt;code&gt;tmux&lt;/code&gt;. Which is fine if this is the only problem you&amp;rsquo;re trying to
solve, but there&amp;rsquo;s more. Let&amp;rsquo;s go to problem #2.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve been using VIM for a while, you probably immediately thought
&lt;em&gt;Doesn&amp;rsquo;t syntastic already display errors inline?&lt;/em&gt;. Yes it does, but
it&amp;rsquo;s doing so in a synchronous way. Which means if you&amp;rsquo;re using a
checker which is slower than half a second, you will have a bad
time. This is especially true for &lt;code&gt;ghc-mod&lt;/code&gt;, which takes up to 5
seconds on my machine. There are alternatives that make this faster,
but this is still talking about a fast dev machine. When I&amp;rsquo;m working
on my tiny 11&amp;quot; Lenovo, it&amp;rsquo;s just impossible to have Syntastic turned
on.&lt;/p&gt;
&lt;h2 id=&#34;evil-mode&#34;&gt;Evil Mode&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been using Emacs on and off for about 2-3 years now. But there
was always the feeling of being slow compared to VIM. Especially once
you get really fast at navigating in VIM, it&amp;rsquo;s hard to use anything
else.&lt;/p&gt;
&lt;p&gt;Then one night I decided to give Evil Mode. Every other editor
supports some sort of VIM emulation, but every single one of them I
tried fell short. But not Emacs. I am completely blown away by the
level of integration Evil Mode has. There are even ports of the most
popular VIM plugins into Evil Mode, such as Tim Pope&amp;rsquo;s vim-surround.&lt;/p&gt;
&lt;p&gt;Almost everything works out of the box, and even more, it works really
well with the built-in Emacs key-bindings. You can search, record
macros, jump around like you would in VIM, but you get the full power
of Emacs at your hand as well. This means you can be in the middle of
typing something and immediately press &lt;code&gt;C-c C-l&lt;/code&gt; while still in insert
mode to load your file into the REPL. (Yes you still have to save the
file, but that can be done while in insert mode as well.)&lt;/p&gt;
&lt;p&gt;There are things that I love about Emacs that I was missing in VIM,
and there are things about VIM that I was missing in Emacs, but Evil
Mode does such a great job at bringing the two together. It&amp;rsquo;s hard to
describe this feeling in words. I can only imagine that the developers
behind it are very skilled VIM users.&lt;/p&gt;
&lt;h2 id=&#34;disadvantages&#34;&gt;Disadvantages&lt;/h2&gt;
&lt;p&gt;While most things work really nice with the default Emacs keymap,
there is one VIM feature that I had to disable, and that is &lt;code&gt;q&lt;/code&gt;. The
reason for this is that &lt;code&gt;q&lt;/code&gt; is being used at many places in Emacs to
close things, and sometimes it so happens that Evil Mode is turned on
in that window at the same time, which results in recording a macro
instead of closing the window.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my complete list of customizations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; evil-normal-state-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;,f&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;projectile-find-file&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; evil-normal-state-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;,,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;evil-buffer&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; evil-normal-state-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; evil-insert-state-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; evil-insert-state-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-d&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; evil-insert-state-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-k&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; evil-insert-state-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-g&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;evil-normal-state&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; evil-visual-state-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;evil-normal-state&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; evil-motion-state-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-e&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;nil&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;define-key&lt;/span&gt; evil-visual-state-map &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;kbd &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;C-c&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;evil-exit-visual-state&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most of these are just minor inconveniences, though I really do
appreciate the level of customization available in Evil Mode. If
anything misbehaves, it&amp;rsquo;s easy to just &lt;code&gt;C-h k&lt;/code&gt; and press the key, to
see which function gets invoked. After that it&amp;rsquo;s just a matter of
looking at the source code, or simply overriding the key in the
specific mode.&lt;/p&gt;
&lt;p&gt;Customizability (is that even a word?) is one of the reasons why I&amp;rsquo;m
starting to like Emacs more and more. Even though I&amp;rsquo;m not a big Lisp
fan, I still prefer it to vimscript any day of the week. Most of the
Elisp code out there is very readable and well commented, so it&amp;rsquo;s not
that hard to dig into the source of the package you&amp;rsquo;re using and try
to figure some things out. Having more customization options is also a
disadvantage to some extent, since Emacs packages are usually more
complex than the VIM counterparts and it takes more time to setup things.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t think I&amp;rsquo;ll ever give up VIM entirely, mostly because I&amp;rsquo;ve
invested many years into perfecting my Ruby workflow. That
being said, I don&amp;rsquo;t mind switching to Emacs for other languages, where
the support is much better to begin with, and the price to pay in
terms of differences between evil mode and VIM is quite small. Maybe
one day I will be able to write Ruby in Emacs as well.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Yesod is Fun</title>
		<link>https://blog.jakuba.net/2014-05-15-yesod-is-fun/</link>
		<pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-05-15-yesod-is-fun/</guid>
		<description>&lt;p&gt;I&amp;rsquo;ve been trying many Haskell web frameworks over the past few weeks. I wrote
one small app with &lt;a href=&#34;http://simple.cx&#34;&gt;Simple&lt;/a&gt;, almost wrote another one with
&lt;a href=&#34;https://github.com/scotty-web/scotty&#34;&gt;Scotty&lt;/a&gt;. Then decided it&amp;rsquo;s time to take a
look at the big guys, &lt;a href=&#34;http://happstack.com/&#34;&gt;Happstack&lt;/a&gt;,
&lt;a href=&#34;http://snapframework.com/&#34;&gt;Snap&lt;/a&gt; and &lt;a href=&#34;http://yesodweb.com/&#34;&gt;Yesod&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First I tried Happstack, which felt kind of OK and very understandable, mostly
because it doesn&amp;rsquo;t seem to be trying to do much magic. This is really great for
learning, but then I stumbled when I found that it&amp;rsquo;s not actually being
developed on GitHub. I know this in itself isn&amp;rsquo;t an argument against Happstack,
but given that it seems to be the least popular and least used out of the
three, it definitely doesn&amp;rsquo;t help it get higher on my list.&lt;/p&gt;
&lt;p&gt;Next goes Snap, which I have really mixed feelings about. At first Snap
feels very simple and well documented, and &lt;a href=&#34;http://snapforbeginners.com/&#34;&gt;even has a
book&lt;/a&gt;, which I immediately bought. There
is even an IRC room with more than 20 people in it. I was so excited.
But then small things started to pile up and I became less and less
excited.&lt;/p&gt;
&lt;p&gt;While the documentation seems to be sufficient, I couldn&amp;rsquo;t really found
the answers to many of my questions, the IRC room while full of people
is very idle and the GitHub repo seems quite dead. I will definitely
give Snap another try in the next weeks.&lt;/p&gt;
&lt;p&gt;And then came Yesod. I&amp;rsquo;ve been avoiding Yesod for quite some time,
mostly because I assumed it&amp;rsquo;s a big ball of magic, as Rails is, and I
wanted to avoid that in the beginning. I also tried it about a year ago
and failed, but this time I decided to really dig in and write something
in Yesod.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t really made much progress yet, but there&amp;rsquo;s an interesting
factor that was missing from the other frameworks (apart from Simple),
and that is fun. &lt;strong&gt;Yesod is fun.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Everything worked out of the box and the way I expected. Even the
automatic migrations which I didn&amp;rsquo;t like at first surprised me by doing
the right thing every time I used it. While there is a lot of Template
Haskell being used it actually does make a lot of sense after studying
it for a while. It might make some things a bit more obscure, but I find
it being used very reasonably and in ways which make sense to me.&lt;/p&gt;
&lt;p&gt;Also every time I &lt;a href=&#34;http://github.com/yesodweb&#34;&gt;check out any of the repos for
Yesod&lt;/a&gt; there has been a new commit, usually
a few hours ago. Comparing this to Snap which is &lt;a href=&#34;https://github.com/snapframework/snap/graphs/commit-activity&#34;&gt;fairly
inactive&lt;/a&gt;
I would say and I have yet another bonus point for Yesod. The #yesod
channel on IRC is also really active, and the documentation is
outstanding. There&amp;rsquo;s also FP Complete, which is another huge bonus point
for Yesod.&lt;/p&gt;
&lt;p&gt;All of this put together and I have a clear winner, at least for now.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Duplication in Tests Is Sometimes Good</title>
		<link>https://blog.jakuba.net/2014-05-04-duplication-in-tests-is-sometimes-good/</link>
		<pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-05-04-duplication-in-tests-is-sometimes-good/</guid>
		<description>&lt;p&gt;Having powerful tools like RSpec gives us so much power, that what was
once a nice suite of readable specs becomes a huge bunch of unreadable
mess, just because someone tried to DRY it up.&lt;/p&gt;
&lt;p&gt;When writing your production code, there&amp;rsquo;s a good reason to keep the
code DRY. Most of the times having duplication in your code can be a
smell. But just because something sometimes smells, it doesn&amp;rsquo;t mean you
should try to fix it all the time. This becomes even more important when
writing tests.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s compare these two examples&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;specify &lt;span style=&#34;color:#a3be8c&#34;&gt;:draft?&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  build&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;DRAFT&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should be_draft
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  build&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;PUBLISHED&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should_not be_draft
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;specify &lt;span style=&#34;color:#a3be8c&#34;&gt;:published?&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  build&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;DRAFT&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should_not be_published
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  build&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;PUBLISHED&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should be_published
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This looks ok, but could we maybe refactor it a little bit to avoid the
duplication there?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;let&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:draft_post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; build&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;DRAFT&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;let&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:published_post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; build&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;status&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;Post&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#8fbcbb&#34;&gt;PUBLISHED&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;specify &lt;span style=&#34;color:#a3be8c&#34;&gt;:draft?&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  draft_post&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should be_draft
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  published_post&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should_not be_draft
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;specify &lt;span style=&#34;color:#a3be8c&#34;&gt;:published?&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  draft_post&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should_not be_published
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  published_post&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should be_published
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we don&amp;rsquo;t have that ugly duplication anymore, let&amp;rsquo;s ask
ourselves if the refactored test is really better? There is less
duplication, but we&amp;rsquo;ve split each test in two parts. The problem comes
when one of these tests fails, and suddenly you need to look around in
the whole file to see where the setup is being performed.&lt;/p&gt;
&lt;p&gt;This becomes even worse if you use more than one &lt;code&gt;let&lt;/code&gt; to setup your
specs, such as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;let&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:user1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; create&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;let&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:user2&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; create&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;let&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; create&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; user1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;let&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:admin&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; create&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:admin&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;doesn&amp;#39;t allow any other user to delete a post&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user2&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;can_delete?&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;post&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should be_false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;allows admins to delete any post&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  admin&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;can_delete?&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;post&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should be_true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Imagine you have 20 tests like this for each context, and then define
some other variables in the context above. A single failure will force
you to scroll up and down and look around in 500 lines of test code,
instead of just seeing everything in one place, such as.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;doesn&amp;#39;t allow any other user to delete a post&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user1 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; create&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user2 &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; create&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:user&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  post &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; create&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;:&lt;/span&gt; user1&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  user2&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;can_delete?&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;post&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should be_false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;allows admin to delete any post&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  post &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; create&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:post&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  admin &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; create&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:admin&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  admin&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;can_delete?&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;post&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;.&lt;/span&gt;should be_true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Is there more duplication? Yes. But if test #2 fails tomorrow, you&amp;rsquo;ll
see what exactly is being tested, instead of having to spend 5 minutes
goofing around in the spec file to see what is actually going on.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Light Table Plugin Tutorial</title>
		<link>https://blog.jakuba.net/2014-01-13-light-table-plugin-tutorial/</link>
		<pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2014-01-13-light-table-plugin-tutorial/</guid>
		<description>&lt;p&gt;I&amp;rsquo;ve been playing around with Light Table since the day its source code was released (&lt;a href=&#34;https://github.com/darthdeus/LightTable-Ruby&#34;&gt;even made a tiny Ruby plugin&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;First of all, Light Table is &lt;a href=&#34;http://www.chris-granger.com/2013/01/24/the-ide-as-data/&#34;&gt;based on the BOT architecture&lt;/a&gt;. Which means there are three core concepts: behaviors, objects and tags. If you have any experience with Node.js or event driven programming, you&amp;rsquo;ll have an easy time understanding the concepts.&lt;/p&gt;
&lt;p&gt;Imagine you have a button which listens on a click event and displays a notice to the user when it&amp;rsquo;s clicked&lt;/p&gt;
&lt;p&gt;Using jQuery that could be as simple as the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;my-button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Do work&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;.my-button&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;click&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  showProgress&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;I&amp;#39;m doing some heavy lifting&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But there are problems with this approach, especially from the Light Table&amp;rsquo;s point of view. First of all there&amp;rsquo;s no way to see the callback after it&amp;rsquo;s been attached to the element. Which means you also can&amp;rsquo;t change it easily at runtime. BOT allows us to decouple the object (the button) from the actual behavior it triggers (click).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an implementation in ClojureScript. If you want to follow along with the tutorial, create a new file, for example &lt;code&gt;/tmp/tutorial.cljs&lt;/code&gt;, press Ctrl-Space, type &lt;code&gt;Add Connection&lt;/code&gt; and select &lt;code&gt;Light Table UI&lt;/code&gt;. This will allow you to evaluate the ClojureScript directly into the running Light Table instance. But before continuing, add the following requires at the top of your file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;ns &lt;/span&gt;lt.tutorial
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:require&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;lt.object &lt;span style=&#34;color:#a3be8c&#34;&gt;:as&lt;/span&gt; object&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;lt.objs.tabs &lt;span style=&#34;color:#a3be8c&#34;&gt;:as&lt;/span&gt; tabs&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;lt.objs.statusbar &lt;span style=&#34;color:#a3be8c&#34;&gt;:as&lt;/span&gt; statusbar&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;lt.objs.notifos &lt;span style=&#34;color:#a3be8c&#34;&gt;:as&lt;/span&gt; notifos&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;lt.util.js &lt;span style=&#34;color:#a3be8c&#34;&gt;:as&lt;/span&gt; util&lt;span style=&#34;color:#eceff4&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:require-macros&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;lt.macros &lt;span style=&#34;color:#a3be8c&#34;&gt;:refer&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;behavior defui&lt;span style=&#34;color:#eceff4&#34;&gt;]]))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From now on you should just be able to evaluate the current form under the cursor with Cmd-Enter.&lt;/p&gt;
&lt;p&gt;Next we need to define our button, using the &lt;code&gt;defui&lt;/code&gt; macro&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;defui&lt;/span&gt; work-button &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;this&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:input&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:type&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;:value&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Do work&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a3be8c&#34;&gt;:click&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;object/raise&lt;/span&gt; this &lt;span style=&#34;color:#a3be8c&#34;&gt;:clicked&lt;/span&gt; %&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This bit of code is fairly obvious, it results in a &lt;code&gt;&amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Do work&amp;quot;/&amp;gt;&lt;/code&gt; with a click handler bound to our callback. &lt;code&gt;#(object/raise this :click %)&lt;/code&gt; is just a shorthand for &lt;code&gt;(fn [e] (object/raise this :click e))&lt;/code&gt;, where &lt;code&gt;object/raise&lt;/code&gt; raises an event on the target object, in this case a click event. It has nothing to do with exceptions, despite its name.&lt;/p&gt;
&lt;p&gt;Next we need to define our worker object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;object/object*&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;::worker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a3be8c&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;A hard worker&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a3be8c&#34;&gt;:behaviors&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;::work-on-click&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a3be8c&#34;&gt;:init&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;this&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;work-button&lt;/span&gt; this&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s a hard worker who works when you click on it. Also note that the value returned from the &lt;code&gt;:init&lt;/code&gt; function is used when the object is placed inside a tab, in this case it returns our button, bound to this object.&lt;/p&gt;
&lt;p&gt;The behavior we&amp;rsquo;re after will use the beautiful &lt;code&gt;notifos&lt;/code&gt; library from Light Table, which displays these wonderful moving-squares-in-a-circle progress indicators.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;behavior&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;::work-on-click&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a3be8c&#34;&gt;:triggers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:clicked&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a3be8c&#34;&gt;:reaction&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;this&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;notifos/working&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;Doing some heavy lifting!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;util/wait&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;10000&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;statusbar/loader-set&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;))))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The behavior name has to be the same as in the object&amp;rsquo;s &lt;code&gt;:behaviors&lt;/code&gt; list. It has a set of &lt;code&gt;triggers&lt;/code&gt; which trigger the &lt;code&gt;:reaction&lt;/code&gt; function with the object passed in as an argument. In our case we&amp;rsquo;ll just display a working indicator and then hide it after 10 seconds.&lt;/p&gt;
&lt;p&gt;Now we&amp;rsquo;re ready to create the object and add it as a tab.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;let &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;worker &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;object/create&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;::worker&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;tabs/add!&lt;/span&gt; worker&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;tabs/active!&lt;/span&gt; worker&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A new tab should appear with a button filling its content. When you click the button you should see a small progress bar at the bottom of the page, which will automatically disappear after 10 seconds.&lt;/p&gt;
&lt;p&gt;Now you might&amp;rsquo;ve noticed that the tab can&amp;rsquo;t be closed. This is because there is no default behavior for closing a tab, since some tabs might want to prompt the user to save a file, others might have a completely different implementation. The good thing is that we can add this easily without having to restart Light Table.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll add another behavior which responds to the &lt;code&gt;:close&lt;/code&gt; event (&lt;a href=&#34;https://github.com/LightTable/LightTable/blob/master/src/lt/objs/docs.cljs#L23-L29&#34;&gt;taken from docs.cljs&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;behavior&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;::on-close-destroy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a3be8c&#34;&gt;:triggers&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:close&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a3be8c&#34;&gt;:reaction&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;this&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;when-let &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;ts &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:lt.objs.tabs/tabset&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;@&lt;/span&gt;this&lt;span style=&#34;color:#eceff4&#34;&gt;)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;when &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;= &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;count &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;:objs&lt;/span&gt; &lt;span style=&#34;color:#81a1c1&#34;&gt;@&lt;/span&gt;ts&lt;span style=&#34;color:#eceff4&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;tabs/rem-tabset&lt;/span&gt; ts&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;object/raise&lt;/span&gt; this &lt;span style=&#34;color:#a3be8c&#34;&gt;:destroy&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we need to tell our object to use this behavior by simply adding it to the behaviors list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-clojure&#34; data-lang=&#34;clojure&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;object/object*&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;::worker&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a3be8c&#34;&gt;:name&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;A hard worker&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a3be8c&#34;&gt;:behaviors&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;::work-on-click&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;::on-close-destroy&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a3be8c&#34;&gt;:init&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;fn &lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;this&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#88c0d0&#34;&gt;work-button&lt;/span&gt; this&lt;span style=&#34;color:#eceff4&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You don&amp;rsquo;t need to restart anything, just eval the behavior and the object definiton and you should be able to close the tab :) That&amp;rsquo;s how dynamic Light Table is.&lt;/p&gt;
&lt;p&gt;For those who want to see the entire result, &lt;a href=&#34;https://gist.github.com/darthdeus/8411616&#34;&gt;here&amp;rsquo;s a link to a gist&lt;/a&gt; and also a gif screencast of the whole process :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/PBsHkD7.gif&#34; alt=&#34;screencast&#34;&gt;&lt;/p&gt;
&lt;p&gt;This tutorial is really just a small introduction to what Light Table can do, but it should give you a little bit of insight into how dynamic the whole system actually is.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=7054884&#34;&gt;Discuss this post on Hacker News&lt;/a&gt; and &lt;a href=&#34;http://www.reddit.com/r/programming/comments/1v5n82/light_table_plugin_tutorial_part_1/&#34;&gt;Reddit&lt;/a&gt;&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>PostgreSQL Basics by Example</title>
		<link>https://blog.jakuba.net/2013-08-19-postgresql-basics-by-example/</link>
		<pubDate>Mon, 19 Aug 2013 01:19:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-08-19-postgresql-basics-by-example/</guid>
		<description>&lt;p&gt;Connecting to a database&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ psql postgres     # the default database
$ psql database_name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Connecting as a specific user&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ psql postgres john
$ psql -U john postgres
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Connecting to a host/port (by default &lt;code&gt;psql&lt;/code&gt; uses a unix socket)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ psql -h localhost -p 5432 postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also explicitly specify if you want to enter a password &lt;code&gt;-W&lt;/code&gt; or not &lt;code&gt;-w&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ psql -w postgres
$ psql -W postgres
Password:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you&amp;rsquo;re inside &lt;code&gt;psql&lt;/code&gt; you can control the database. Here&amp;rsquo;s a couple of handy commands&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# \h                 # help on SQL commands
postgres=# \?                 # help on psql commands, such as \? and \h
postgres=# \l                 # list databases
postgres=# \c database_name   # connect to a database
postgres=# \d                 # list of tables
postgres=# \d table_name      # schema of a given table
postgres=# \du                # list roles
postgres=# \e                 # edit in $EDITOR
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point you can just type SQL statements and they&amp;rsquo;ll be executed on the database you&amp;rsquo;re currently
connected to.&lt;/p&gt;
&lt;h2 id=&#34;user-management&#34;&gt;User Management&lt;/h2&gt;
&lt;p&gt;Once your application goes into production, or basically anywhere outside of your dev machine,
you&amp;rsquo;re going to want to create some users and restrict access.&lt;/p&gt;
&lt;p&gt;We have two options for creating users, either from the shell via &lt;code&gt;createuser&lt;/code&gt; or via SQL &lt;code&gt;CREATE ROLE&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ createuser john
postgres=# CREATE ROLE john;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One thing to note here is that by default users created with &lt;code&gt;CREATE ROLE&lt;/code&gt; can&amp;rsquo;t log in. To allow login you need to provide
the &lt;code&gt;LOGIN&lt;/code&gt; attribute&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# CREATE ROLE john LOGIN;
postgres=# CREATE ROLE john WITH LOGIN; # the same as above
postgres=# CREATE USER john;            # alternative to CREATE ROLE which adds the LOGIN attribute
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also add the &lt;code&gt;LOGIN&lt;/code&gt; attribute with &lt;code&gt;ALTER ROLE&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# ALTER ROLE john LOGIN;
postgres=# ALTER ROLE john NOLOGIN;   # remove login
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also specify multiple attributes when using &lt;code&gt;CREATE ROLE&lt;/code&gt; or &lt;code&gt;ALTER ROLE&lt;/code&gt;, but bare in mind that &lt;code&gt;ALTER ROLE&lt;/code&gt; doesn&amp;rsquo;t change the permissions the role already has which you don&amp;rsquo;t specify.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# CREATE ROLE deploy SUPERUSER LOGIN;
CREATE ROLE
postgres=# ALTER ROLE deploy NOSUPERUSER CREATEDB;  # the LOGIN privilege is not touched here
ALTER ROLE
postgres=# \du deploy
           List of roles
 Role name | Attributes | Member of
-----------+------------+-----------
 deploy    | Create DB  | {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There&amp;rsquo;s an alternative to &lt;code&gt;CREATE ROLE john WITH LOGIN&lt;/code&gt;, and that&amp;rsquo;s &lt;code&gt;CREATE USER&lt;/code&gt; which automatically creates the &lt;code&gt;LOGIN&lt;/code&gt; permission. It is important to understand that users and roles are the same thing. In fact there&amp;rsquo;s no such thing as a user in PostgreSQL, only a role with LOGIN permission&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# CREATE USER john;
CREATE ROLE
postgres=# CREATE ROLE kate;
CREATE ROLE
postgres=# \du
                             List of roles
 Role name |                   Attributes                   | Member of
-----------+------------------------------------------------+-----------
 darth     | Superuser, Create role, Create DB, Replication | {}
 john      |                                                | {}
 kate      | Cannot login                                   | {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also create groups via &lt;code&gt;CREATE GROUP&lt;/code&gt; (which is now aliased to &lt;code&gt;CREATE ROLE&lt;/code&gt;), and then grant or revoke
access to other roles.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;postgres=# CREATE GROUP admin LOGIN;
CREATE ROLE
postgres=# GRANT admin TO john;
GRANT ROLE
postgres=# \du
                             List of roles
 Role name |                   Attributes                   | Member of
-----------+------------------------------------------------+-----------
 admin     |                                                | {}
 darth     | Superuser, Create role, Create DB, Replication | {}
 john      |                                                | {admin}
 kate      | Cannot login                                   | {}
postgres=# REVOKE admin FROM john;
REVOKE ROLE
postgres=# \du
                             List of roles
 Role name |                   Attributes                   | Member of
-----------+------------------------------------------------+-----------
 admin     |                                                | {}
 darth     | Superuser, Create role, Create DB, Replication | {}
 john      |                                                | {}
 kate      | Cannot login                                   | {}
&lt;/code&gt;&lt;/pre&gt;</description>
	</item>
	
	<item>
		<title>Ember.js: Testing Ember.js - part 1</title>
		<link>https://blog.jakuba.net/2013-02-19-testing-ember-dot-js-part-1/</link>
		<pubDate>Tue, 19 Feb 2013 19:05:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-02-19-testing-ember-dot-js-part-1/</guid>
		<description>&lt;p&gt;Ever since I saw the &lt;em&gt;testing&lt;/em&gt; slides from EmberCamp I was thinking
about testing. Up until now I&amp;rsquo;ve been using Capybara which is really
really really slow.&lt;/p&gt;
&lt;p&gt;But @joliss mentioned this thing called &lt;code&gt;Ember.testing&lt;/code&gt; which should
automagically fix all of the async problems which make tests ugly, such
as waiting for the application to initialize and finish routing.&lt;/p&gt;
&lt;p&gt;In its essence &lt;code&gt;Ember.testing = true&lt;/code&gt; disables the automatic runloop,
which gives you the control to manually schedule asynchronous operations
to happen in a one-off runloop via &lt;code&gt;Ember.run&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ember.run&lt;/code&gt; will run the given function inside a runloop and flush all
of the bindings before it finishes, which means you can render a view
inside &lt;code&gt;Ember.run&lt;/code&gt; and check the DOM right after that. Here&amp;rsquo;s an example
from the &lt;code&gt;Ember.View&lt;/code&gt; tests&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;view &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;ContainerView&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  childViews&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;child&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  child&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;View&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tagName&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;aside&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;run&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  view&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;createElement&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;equal&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;view&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;$&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;aside&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;length&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see the &lt;code&gt;view.createElement()&lt;/code&gt; happens inside the runloop
scheduled by &lt;code&gt;Ember.run&lt;/code&gt; which will return only after the view was
completely rendered and all bindings flushed.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at a &lt;a href=&#34;http://jsbin.com/ixupad/59/edit&#34;&gt;complete example&lt;/a&gt;
and take it apart step by step&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Testing mode disables automatic runloop
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;testing &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Creating an application normally happens async,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// which is why we have to wrap it in Ember.run
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;run&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  App &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Application&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Router&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;route&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;home&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Store &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; DS&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  revision&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  adapter&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; DS&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;FixtureAdapter&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// This will make the FixtureAdapter do everything synchronously
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// instead of using setTimeout, which is vital because setTimeout
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// happens outside of the runloop.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    simulateRemoteResponse&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; DS&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Model&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; DS&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;attr&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;FIXTURES &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; id&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; name&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;brohuda&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;HomeRoute &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Route&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Enabling Ember.testing will also disable automatic initialization,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// which forces us to initialize manually
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;run&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;initialize&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// In real life this would be an assertion,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// here we&amp;#39;ll just check if everything is rendered at this point in time.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;$&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;p strong&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;append&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;$&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;h2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;text&lt;span style=&#34;color:#eceff4&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Take the example apart, play with it and try to figure out what works
and what doesn&amp;rsquo;t :)&lt;/p&gt;
&lt;p&gt;If you see&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;assertion failed: You have turned on testing mode, which disabled the run-loop&amp;#39;s autorun.
You will need to wrap any code with asynchronous side-effects in an Ember.run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;it means that you forgot to wrap something in &lt;code&gt;Ember.run&lt;/code&gt;. I hope this
is a good enough introduction. In one of the upcoming articles we&amp;rsquo;ll
take a look at simple Ember application and try testing it with a
full featured testing framework.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Ember.js: render, control, partial, view, template</title>
		<link>https://blog.jakuba.net/2013-02-10-render-control-partial-view/</link>
		<pubDate>Sun, 10 Feb 2013 21:29:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-02-10-render-control-partial-view/</guid>
		<description>&lt;p&gt;There are many ways one can DRY up templates when using Ember.js, it all
depends on what you&amp;rsquo;re trying to achieve.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;partial--template&#34;&gt;partial &amp;amp;&amp;amp; template&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;{% raw %}{{partial &amp;quot;foo&amp;quot;}}{% endraw %}&lt;/code&gt; will take a template
&lt;code&gt;foo.handlebars&lt;/code&gt; and insert it without changing anything, which is
exactly the same as in Rails. There are no views created, no scope
changes, it just inserts the template right there.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{% raw %}{{template}}{% endraw %}&lt;/code&gt; isn&amp;rsquo;t really meant to be used anymore, so use
&lt;code&gt;{% raw %}{{partial}}{% endraw %}&lt;/code&gt; instead.&lt;/p&gt;
&lt;h2 id=&#34;view&#34;&gt;view&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;{% raw %}{{view App.FooView}}{% endraw %}&lt;/code&gt; will create an instance of
&lt;code&gt;App.FooView&lt;/code&gt; (with &lt;code&gt;foo.handlebars&lt;/code&gt; template unless you override the
name) and insert it in place. You can bind on properties of the view,
such as &lt;code&gt;{% raw %}{{view App.FooView contentBinding=&amp;quot;foobar&amp;quot;}}{% endraw %}&lt;/code&gt;,
or just specify a property directly &lt;code&gt;{% raw %}{{view App.FooView class=&amp;quot;foobar&amp;quot;}}{% endraw %}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is a low level thing and is mostly used to instantiate simple
views, such as &lt;code&gt;{% raw %}{{view Ember.TextField valueBinding=&amp;quot;name&amp;quot; class=&amp;quot;username&amp;quot;}}{% endraw %}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;render--control&#34;&gt;render &amp;amp;&amp;amp; control&lt;/h2&gt;
&lt;p&gt;Most of the time you&amp;rsquo;re looking to use &lt;code&gt;{% raw %}{{render}}{% endraw %}&lt;/code&gt; instead of
&lt;code&gt;{% raw %}{{view}}{% endraw %}&lt;/code&gt; as it offers better means of
abstraction. &lt;code&gt;{% raw %}{{render &amp;quot;foo&amp;quot; bar}}{% endraw %}&lt;/code&gt; will create a
&lt;code&gt;App.FooController&lt;/code&gt; and bind it&amp;rsquo;s content to &lt;code&gt;bar&lt;/code&gt;.  It also creates a
&lt;code&gt;App.FooView&lt;/code&gt; and renders a &lt;code&gt;foo&lt;/code&gt; template.&lt;/p&gt;
&lt;p&gt;One drawback is that &lt;code&gt;{% raw %}{{render}}{% endraw %}&lt;/code&gt; &lt;strong&gt;can not be called multiple times on
a single route&lt;/strong&gt;. If you need a self sustainable widget which can be
created any number of times you want, you&amp;rsquo;re looking for &lt;code&gt;{% raw %}{{control}}{% endraw %}&lt;/code&gt;
which has exactly the same effect as &lt;code&gt;{% raw %}{{render}}{% endraw %}&lt;/code&gt;, but it will have a new
controller instance every time you call it, while &lt;code&gt;{% raw %}{{render}w{% endraw %}&lt;/code&gt; uses a
singleton controller.&lt;/p&gt;
&lt;p&gt;Please keep in mind that &lt;code&gt;{% raw %}{{control}}{% endraw %}&lt;/code&gt; is currently under heavy
development and will probably change soon, because of the high number of
issues there are with it.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Ember.js: Router Request Lifecycle</title>
		<link>https://blog.jakuba.net/2013-02-08-router-request-lifecycle/</link>
		<pubDate>Fri, 08 Feb 2013 16:59:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-02-08-router-request-lifecycle/</guid>
		<description>&lt;p&gt;Router is the core part of Ember. Every time we go to a new URL it means
the route object is called with our params and stuff. These are the
hooks sorted in order in which they are called&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;ul&gt;
&lt;li&gt;enter (private)&lt;/li&gt;
&lt;li&gt;activate - executed when entering the route&lt;/li&gt;
&lt;li&gt;deserialize (private)&lt;/li&gt;
&lt;li&gt;model (formely deserialize) - takes the params and returns a model
which is set to the route&amp;rsquo;s &lt;code&gt;currentModel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;serialize - used to generate dynamic segments in the URL from a model&lt;/li&gt;
&lt;li&gt;setupController - takes &lt;code&gt;currentModel&lt;/code&gt; and sets it to the controller&amp;rsquo;s
&lt;code&gt;content&lt;/code&gt; by default&lt;/li&gt;
&lt;li&gt;renderTemplate - takes current controller and what &lt;code&gt;model&lt;/code&gt; returns and
renders the template with an appropriate name&lt;/li&gt;
&lt;li&gt;deactivate - executed when exiting the route (called by exit
internally)&lt;/li&gt;
&lt;li&gt;exit (private, requires call to &lt;code&gt;this._super&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let&amp;rsquo;s take a look at them in more detail&lt;/p&gt;
&lt;h2 id=&#34;activatedeactivate&#34;&gt;&lt;code&gt;activate&lt;/code&gt;/&lt;code&gt;deactivate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;These were formely known as &lt;code&gt;enter&lt;/code&gt;/&lt;code&gt;exit&lt;/code&gt;, which are now marked as
private. &lt;code&gt;activate&lt;/code&gt; will be executed when user enters a route, be it
from a transition or from a URL directly, and &lt;code&gt;deactivate&lt;/code&gt; is executed
when user transitions away from the route.&lt;/p&gt;
&lt;p&gt;One of the most common use cases for me is doing a transaction rollback
in &lt;code&gt;deactivate&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;PostsNewRoute &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Route&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  deactivate&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;modelFor&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;postsNew&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;transaction&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;rollback&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I find this mostly useful when having a &lt;em&gt;new record form&lt;/em&gt; (or even when
editing a record), where you basically want to rollback any changes
which happened when the user exits the route. It doesn&amp;rsquo;t matter if the
user submits the form first, because then the transaction will be
comitted and there will be nothing to rollback.&lt;/p&gt;
&lt;h2 id=&#34;modelserialize&#34;&gt;&lt;code&gt;model&lt;/code&gt;/&lt;code&gt;serialize&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;To allow Ember to work with dynamic segments in the URLs we need to
teach it how to serialize and deserialize our models. When we enter a
URL directly (or reload the page) &lt;code&gt;model&lt;/code&gt; will be called with params
from the dynamic segments. Let&amp;rsquo;s take a look at an example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Router&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;resource&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/:post_id&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;PostRoute &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Route&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;params&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;params&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;post_id&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is exactly what Ember will auto generate for us, along with a
serialize hook&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;PostRoute &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Route&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;params&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;params&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;post_id&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  serialize&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;model&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; post_id&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; model&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;id &lt;span style=&#34;color:#eceff4&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;it is important to note here that if we&amp;rsquo;re transitioning from a
different route our &lt;code&gt;model&lt;/code&gt; hook &lt;em&gt;will not be called&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;setupcontroller&#34;&gt;&lt;code&gt;setupController&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;One step further after &lt;code&gt;model&lt;/code&gt; comes &lt;code&gt;setupController&lt;/code&gt;, which is meant
to set additional properties on the controller, or override it&amp;rsquo;s
&lt;code&gt;content&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But beware, there is no autogenerated &lt;code&gt;setupController&lt;/code&gt; hook which sets to &lt;code&gt;content&lt;/code&gt;,
this is done even before &lt;code&gt;setupController&lt;/code&gt; is called &lt;a href=&#34;https://github.com/emberjs/ember.js/blob/master/packages/ember-routing/lib/system/route.js#L79-82&#34;&gt;in the &lt;code&gt;setup&lt;/code&gt; hook&lt;/a&gt; of the route. This is basically simulates the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setupController&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;controller&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; model&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  controller&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; model&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it also means we can set additional properties on the controller
without needing to explicitly set the content&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setupController&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;controller&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; model&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  controller&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rendertemplate&#34;&gt;&lt;code&gt;renderTemplate&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The last one of the hooks is &lt;code&gt;renderTemplate&lt;/code&gt; where you tell which
template you want to render in which outlet.&lt;/p&gt;
&lt;p&gt;By default &lt;code&gt;renderTemplate&lt;/code&gt; will call &lt;code&gt;this.render&lt;/code&gt; as follows&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;PostRoute &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Route&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  renderTemplate&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;render&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      into&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;application&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      outlet&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      controller&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case &lt;code&gt;render&lt;/code&gt; will render the &lt;code&gt;post&lt;/code&gt; template into the
&lt;code&gt;application&lt;/code&gt; template&amp;rsquo;s &lt;code&gt;main&lt;/code&gt; outlet with the &lt;code&gt;PostController&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is the place where you can chose to render into other outlets. For
example let&amp;rsquo;s say that your &lt;code&gt;application&lt;/code&gt; template has a sidebar outlet
&lt;code&gt;{{outlet sidebar}}&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;PostRoute &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Route&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  renderTemplate&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// render with the defaults
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;render&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// and once more for the sidebar outlet
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;render&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;similarPosts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      into&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;application&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      outlet&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;sidebar&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;important-notes-about-controllerfor-and-modelfor&#34;&gt;Important notes about &lt;code&gt;controllerFor&lt;/code&gt; and &lt;code&gt;modelFor&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;While calling &lt;code&gt;controllerFor(&amp;quot;posts&amp;quot;)&lt;/code&gt; returns an instance of
&lt;code&gt;PostsController&lt;/code&gt;, calling &lt;code&gt;modelFor(&amp;quot;posts&amp;quot;)&lt;/code&gt; &lt;strong&gt;doesn&amp;rsquo;t return
&lt;code&gt;content&lt;/code&gt;
of the &lt;code&gt;PostController&lt;/code&gt;&lt;/strong&gt;. Instead it looks up the &lt;code&gt;PostsRoute&lt;/code&gt; and
returns it&amp;rsquo;s &lt;code&gt;currentModel&lt;/code&gt; which is set when we return a value from the
&lt;code&gt;model&lt;/code&gt; hook.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see an example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;PostsRoute &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Route&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setupController&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;controller&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    controller&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will cause issues if we decide to use &lt;code&gt;modelFor&lt;/code&gt; later on.
&lt;code&gt;PostsRoute&lt;/code&gt; will not have anything in &lt;code&gt;currentModel&lt;/code&gt; and &lt;code&gt;modelFor&lt;/code&gt;
will return undefined, which might look weird as the controller has a
content properly set.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Ember.js: Using Transactions in Ember Data - part 1</title>
		<link>https://blog.jakuba.net/2013-02-02-using-transactions-in-ember-data/</link>
		<pubDate>Sat, 02 Feb 2013 14:15:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-02-02-using-transactions-in-ember-data/</guid>
		<description>&lt;p&gt;We talked about transactions in &lt;a href=&#34;http://darthdeus.github.com/blog/2013/01/27/ember-data-in-depth/&#34;&gt;one of the previous articles&lt;/a&gt;
(read it if you haven&amp;rsquo;t already), but we didn&amp;rsquo;t really touch on when to
use them in real world. One of the most common use cases for me is when
I just want to manage a single record while there are many changes
happening on the page.&lt;/p&gt;
&lt;p&gt;Adding a record to a transaction is simple&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// say that we are in a controller
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;store &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;store&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// this ALWAYS returns a new transaction
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;transaction &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;toString&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; &amp;#34;&amp;lt;DS.Transaction:ember955&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now this is obvious, but what if we need to commit the transaction in a
completely different action? Do we need to store the instance somewhere
to use it later?&lt;/p&gt;
&lt;p&gt;The answer is NO, we can always return the transaction in which the
record is by calling &lt;code&gt;.get(&amp;quot;transaction&amp;quot;)&lt;/code&gt;. We can even do it if we
decide to fetch the user again in a completely different part of the
application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;transaction&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;toString&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; &amp;#34;&amp;lt;DS.Transaction:ember955&amp;gt;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It doesn&amp;rsquo;t matter in which part of the application you add the record to
a transaction because you can always retrieve the correct instance
later.&lt;/p&gt;
&lt;p&gt;Which allows us to do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;UsersNewRoute &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Route&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  model&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; transaction &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;store&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; user &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;createRecord&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; user&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  events&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    createUser&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;transaction&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Personally I use this when I only care about one record, but I know that
there might be other which are &lt;code&gt;dirty&lt;/code&gt; and I don&amp;rsquo;t want to commit those.
This happens almost every time you have two forms displayed at once.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Ember.js: Router and Template Naming Convention</title>
		<link>https://blog.jakuba.net/2013-02-01-ember-dot-js-router-and-template-naming-convention/</link>
		<pubDate>Fri, 01 Feb 2013 19:43:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-02-01-ember-dot-js-router-and-template-naming-convention/</guid>
		<description>&lt;p&gt;Ever since the change to &lt;code&gt;resource&lt;/code&gt; and &lt;code&gt;route&lt;/code&gt; a lot of people are
confused about the meaning of the two and how they affect naming. Here&amp;rsquo;s
the difference:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;resource&lt;/code&gt; - a thing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;route&lt;/code&gt; - something to do with the thing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s say we have a model &lt;code&gt;App.Post&lt;/code&gt; and we want to show a list of posts
and a new post form. There are many ways you can go about this, so let&amp;rsquo;s
start with the simplest.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Router&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;resource&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;posts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;route&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/new&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This would result in the following template structure&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;text/x-handlebars&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;data-template-name&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;posts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;...&lt;/span&gt; list the posts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;text/x-handlebars&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;data-template-name&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;new&lt;/span&gt; post template
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the following naming&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsRoute
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsView
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NewRoute
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NewController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;NewView
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://jsbin.com/ogorab/33/edit&#34;&gt;Here&amp;rsquo;s a JSBin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is almost never useful, since you might have many &lt;code&gt;/new&lt;/code&gt; actions
and you&amp;rsquo;d need to scope them to the resource, which would be done as
follows&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Router&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;resource&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;posts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;route&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/new&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here things get a little more complicated, since we&amp;rsquo;re nesting something
inside the resource. This means that we&amp;rsquo;ll end up with three templates
instead of two&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;text/x-handlebars&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;data-template-name&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;posts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;h1&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;gt;&lt;/span&gt;This is the outlet&lt;span style=&#34;color:#81a1c1&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#bf616a&#34;&gt;/h1&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;{{&lt;/span&gt;outlet&lt;span style=&#34;color:#eceff4&#34;&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;text/x-handlebars&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;data-template-name&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;posts/index&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;...&lt;/span&gt; list the posts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;text/x-handlebars&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8fbcbb&#34;&gt;data-template-name&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;posts/new&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;new&lt;/span&gt; post template
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the following naming&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsRoute
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsView
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsIndexRoute
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsIndexController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsIndexView
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsNewRoute
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsNewController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostsNewView
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://jsbin.com/ogorab/34/edit&#34;&gt;Here&amp;rsquo;s a JSBin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This means whenever you create a resource it will create a brand new
namespace. That namespace will have an &lt;code&gt;{{outlet}}&lt;/code&gt; which is named after the
resource and all of the child routes will be inserted into it.&lt;/p&gt;
&lt;p&gt;There are many reasons behind it, but let&amp;rsquo;s try another example which
will make it more obvious. We will add a &lt;code&gt;/:post_id&lt;/code&gt; and
&lt;code&gt;/:post_id/edit&lt;/code&gt; routes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Router&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;resource&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;posts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;resource&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/:post_id&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;route&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;edit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/edit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;route&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/new&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Additional to the routes in the previous example, this will give us&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// IMPORTANT - it&amp;#39;s not PostsPostRoute, because `resource`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// always creates a new namespace
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;PostRoute 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostView
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostIndexRoute
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostIndexController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostIndexView
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostEditRoute
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostEditController
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostEditView
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Templates are named accordingly &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;post.index&lt;/code&gt; and &lt;code&gt;post.edit&lt;/code&gt;,
&lt;strong&gt;there is nothing like &lt;code&gt;posts.post.index&lt;/code&gt; or &lt;code&gt;posts.post&lt;/code&gt; or
&lt;code&gt;posts.post.edit&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://jsbin.com/ogorab/35/edit&#34;&gt;Here&amp;rsquo;s a JSBin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But the problem is when we try to access the &lt;code&gt;App.Post&lt;/code&gt; model from the
&lt;code&gt;post/index&lt;/code&gt; or &lt;code&gt;post/edit&lt;/code&gt; template. It is only available in the &lt;code&gt;post&lt;/code&gt;
template with the outlet. Now why is that?&lt;/p&gt;
&lt;p&gt;Since we are defining a &lt;code&gt;resource&lt;/code&gt; it is expected that the child routes
will be related to that &lt;code&gt;resource&lt;/code&gt;, that&amp;rsquo;s why they don&amp;rsquo;t need to load
it separately. They can access it from the parent &lt;code&gt;PostController&lt;/code&gt; via
&lt;code&gt;needs&lt;/code&gt; (&lt;a href=&#34;http://darthdeus.github.com/blog/2013/01/27/controllers-needs-explained/&#34;&gt;more about that can be found in this article&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://jsbin.com/ogorab/44/edit&#34;&gt;Here&amp;rsquo;s a JSBin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the general pattern you would be using if you want to nest
everything. But what if you don&amp;rsquo;t want to render &lt;code&gt;post&lt;/code&gt; into the
&lt;code&gt;posts&lt;/code&gt; outlet? Well nothing prevents you from defining the routes as
this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Router&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;resource&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;posts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;route&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/new&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;resource&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/:post_id&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;route&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;edit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/edit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What is the difference? The naming remains exactly the same as in the
previous example, even templates are named the same. But the &lt;code&gt;post&lt;/code&gt;
template will be inserted into the &lt;code&gt;application&lt;/code&gt; layout, not inside the
&lt;code&gt;posts&lt;/code&gt; layout. This is the case when you want the detail &lt;code&gt;post&lt;/code&gt; page to
replace the whole layout, instead of just showing it together with the
&lt;code&gt;posts&lt;/code&gt; list.&lt;/p&gt;
&lt;p&gt;I hope the examples will help you understanding how the v2 routes work,
since this is a completely essential part of Ember.js.&lt;/p&gt;
&lt;p&gt;If you have any questions, leave them in the comments or tweet me
&lt;a href=&#34;http://twitter.com/darthdeus&#34;&gt;@darthdeus&lt;/a&gt;.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Ember.js: How to find a model by any attribute in Ember.js</title>
		<link>https://blog.jakuba.net/2013-01-31-how-to-find-a-model-by-any-attribute-in-ember-dot-js/</link>
		<pubDate>Thu, 31 Jan 2013 23:13:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-01-31-how-to-find-a-model-by-any-attribute-in-ember-dot-js/</guid>
		<description>&lt;p&gt;One of the common things people ask about Ember Data is how to find a
single record by it&amp;rsquo;s attribute. This is because the current revision
(11) only offers three methods of fetching records&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// returns a single user record
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt; username&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;wycats&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// returns a ManyArray
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;findQuery&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt; username&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;wycats&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// same as the above
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;If you want to search for a user by his username, you have two options&lt;/p&gt;
&lt;h2 id=&#34;using-find-with-_smart_-server-side&#34;&gt;Using .find with &lt;em&gt;smart&lt;/em&gt; server side&lt;/h2&gt;
&lt;p&gt;The way &lt;code&gt;App.User.find(1)&lt;/code&gt; works is that it does a request to
&lt;code&gt;/users/1&lt;/code&gt;, which is expected to return just one record.&lt;/p&gt;
&lt;p&gt;You could modify your server to accept both &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; on the
&lt;code&gt;/users/1&lt;/code&gt; path, which would allow to do &lt;code&gt;App.User.find(&amp;quot;wycats&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s an issue with this though. If you load the same user via his
&lt;code&gt;username&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;, you&amp;rsquo;ll end up with two records stored in the Ember
identity map.&lt;/p&gt;
&lt;p&gt;Which basically means that if you try to retrieve all of the user
records, you will end up with that one user twice.&lt;/p&gt;
&lt;p&gt;If you want to read more about this, &lt;a href=&#34;https://github.com/emberjs/data/issues/571&#34;&gt;checkout this GitHub
issue&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;using-a-findquery&#34;&gt;Using a findQuery&lt;/h2&gt;
&lt;p&gt;This might not seem like the right solution at first, since it returns a
&lt;code&gt;DS.ManyArray&lt;/code&gt; instead of just one record, but hang on.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DS.ManyArray&lt;/code&gt; is a subclass of &lt;code&gt;DS.RecordArray&lt;/code&gt;, which includes a
&lt;code&gt;DS.LoadPromise&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To understand how &lt;code&gt;DS.LoadPromise&lt;/code&gt; works, we need to understand what
promises are. &lt;a href=&#34;https://gist.github.com/3889970&#34;&gt;There&amp;rsquo;s a great article about
that&lt;/a&gt;, so I won&amp;rsquo;t go into much detail.&lt;/p&gt;
&lt;p&gt;Promise is basically an async monad (I guess that doesn&amp;rsquo;t help, let&amp;rsquo;s
try again).&lt;/p&gt;
&lt;p&gt;Promise is something which allows you to return an object which wraps
around a value, even if you don&amp;rsquo;t have the value yet. For example if
you&amp;rsquo;re doing &lt;code&gt;App.User.findQuery&lt;/code&gt;, you&amp;rsquo;ll get back an empty
&lt;code&gt;DS.ManyArray&lt;/code&gt; instantly.&lt;/p&gt;
&lt;p&gt;It doesn&amp;rsquo;t wait until the AJAX request is finished, it just returns the
empty array, which is populated with the data once the request finishes.&lt;/p&gt;
&lt;p&gt;This works because Ember uses data bindings and will automagically
update all of the views once the data is loaded. And also because the
router will wait if it&amp;rsquo;s model has a state &lt;code&gt;isLoading&lt;/code&gt;. That way you
won&amp;rsquo;t display a page which is half loaded.&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;Now that we know we&amp;rsquo;re getting a &lt;code&gt;DS.ManyArray&lt;/code&gt;, we need to figure out a
way to make it represent only the value of it&amp;rsquo;s first element, because
that&amp;rsquo;s what we care about.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;var&lt;/span&gt; users &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;findQuery&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt; username&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; username &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;users&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;one&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;didLoad&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  users&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;resolve&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;users&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;firstObject&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;return&lt;/span&gt; users&lt;span style=&#34;color:#eceff4&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see that we are returning the result of the &lt;code&gt;findQuery&lt;/code&gt;
instantly, but we&amp;rsquo;re also setting an asynchronous callback which
&lt;strong&gt;resolves the promise&lt;/strong&gt; to the &lt;code&gt;firstObject&lt;/code&gt; once it is loaded.&lt;/p&gt;
&lt;p&gt;Another way you could read the &lt;code&gt;resolve(x)&lt;/code&gt; is &lt;em&gt;from now you&amp;rsquo;re
representing value &lt;code&gt;x&lt;/code&gt;&lt;/em&gt;. Using this technique will work in all Ember,
because the data bindings will take care of everything. Always remember
that you don&amp;rsquo;t need to worry about re-rendering your views, just change
the data and Ember will take care of the rest.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Ember.js: Controller, ObjectController and ObjectProxy</title>
		<link>https://blog.jakuba.net/2013-01-27-controller-objectcontroller-and-objectproxy/</link>
		<pubDate>Sun, 27 Jan 2013 19:24:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-01-27-controller-objectcontroller-and-objectproxy/</guid>
		<description>&lt;p&gt;When you first come to Ember, you&amp;rsquo;ll soon stumble upon three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ember.Controller&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ember.ObjectController&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ember.ArrayController&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For some people (including me) it is not very clear what&amp;rsquo;s the
difference between the first two.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ember.Controller&lt;/code&gt; is just a plain implementation of
&lt;code&gt;Ember.ControllerMixin&lt;/code&gt;, while &lt;code&gt;Ember.ObjectController&lt;/code&gt; is a subclass of
&lt;code&gt;Ember.ObjectProxy&lt;/code&gt;. This is a huge difference! Let&amp;rsquo;s take a look at how
&lt;code&gt;Ember.ObjectProxy&lt;/code&gt; works, and as always starting with a code sample
(&lt;a href=&#34;https://github.com/emberjs/ember.js/blob/master/packages/ember-runtime/lib/system/object_proxy.js#L35-L50&#34;&gt;taken from the excellent source code documentation&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;object &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;proxy &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;ObjectProxy&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  content&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; object
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Access and change existing properties
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;proxy&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; &amp;#34;foo&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;proxy&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;object&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; &amp;#34;bar&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// Create new &amp;#34;description&amp;#34; property on `object`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;proxy&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;object&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; &amp;#34;baz&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is really no magic. In the basic usage, &lt;code&gt;Ember.ObjectProxy&lt;/code&gt; will
delegate all of it&amp;rsquo;s unknown properties to the &lt;code&gt;content&lt;/code&gt; object, with
one exception.&lt;/p&gt;
&lt;p&gt;If we try to set a new property on a proxy while it&amp;rsquo;s content is
undefined, we will get an exception.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;proxy &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;ObjectProxy&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;proxy&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// raises the following exception
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Cannot delegate set(&amp;#39;foo&amp;#39;, bar) to the &amp;#39;content&amp;#39; property
of object proxy &amp;lt;Ember.ObjectProxy:ember420&amp;gt;: its &amp;#39;content&amp;#39; is undefined.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;rsquo;ve stumbled upon this in one scenario, where I didn&amp;rsquo;t set content for
my &lt;code&gt;ObjectController&lt;/code&gt;, but I tried to modify one of it&amp;rsquo;s properties.
Raising the exception is a good example of failing fast, rather than
silently swallowing errors.&lt;/p&gt;
&lt;p&gt;This being said you should almost always use &lt;code&gt;Ember.ObjectController&lt;/code&gt;
over &lt;code&gt;Ember.Controller&lt;/code&gt;, unless you know what you&amp;rsquo;re doing :)&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Ember.js: State Manager and Friends - part 1</title>
		<link>https://blog.jakuba.net/2013-01-27-state-manager-and-friends/</link>
		<pubDate>Sun, 27 Jan 2013 19:23:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-01-27-state-manager-and-friends/</guid>
		<description>&lt;p&gt;Since state management is such a huge part of Ember.js it desrves a
dedicated article. I&amp;rsquo;m not going to explain the old router which used
&lt;code&gt;Ember.StateManager&lt;/code&gt; to do it&amp;rsquo;s bidding. Those days are over and we
should all be moving towards the v2 router (or v2.2 so to speak).
Instead we&amp;rsquo;re going to go deep into the &lt;code&gt;Ember.StateManager&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the general concept, state manager is basically some object which
manages states and the transitions between them, thus representing a
finite state machine.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Let&amp;rsquo;s say we have a &lt;code&gt;Post&lt;/code&gt; which can be in two states, &lt;code&gt;draft&lt;/code&gt; and
&lt;code&gt;published&lt;/code&gt;. It begins it&amp;rsquo;s life as a &lt;code&gt;draft&lt;/code&gt; and when we &lt;code&gt;publish&lt;/code&gt; it,
it should send out a notification email. The way Ember would handle this
is that it would assign a &lt;code&gt;Ember.StateManager&lt;/code&gt; instance to the &lt;code&gt;Post&lt;/code&gt;
instance and have that manage it&amp;rsquo;s state (that&amp;rsquo;s not exactly true in
Ember Data, but we&amp;rsquo;ll get into that).&lt;/p&gt;
&lt;p&gt;For now let&amp;rsquo;s just say that this is the code we have&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostManager &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;StateManager&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  states&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    draft&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;State&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    published&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;State&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Post &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#81a1c1&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  title&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  init&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; PostManager&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;_super&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This gives us a really basic implementation. I&amp;rsquo;m setting the
&lt;code&gt;stateManager&lt;/code&gt; property in the &lt;code&gt;init&lt;/code&gt; function to avoid sharing the
instance across multiple &lt;code&gt;Post&lt;/code&gt; instances. I&amp;rsquo;ll explain this in a
followup article, for now just remember that if you need to set a
property to an object instance, you have to do that in the &lt;code&gt;init&lt;/code&gt;
function, not directly like &lt;code&gt;stateManager: PostManager.create()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;OK, we are now ready to list all of the states a &lt;code&gt;Post&lt;/code&gt; can have.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager.states&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; { draft: ..., published: ... }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager.currentState&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We forgot to say which of the states should be the default. Let&amp;rsquo;s
do that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostManager &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;StateManager&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  initialState&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;draft&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  states&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    draft&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;State&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    published&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;State&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From now every single post we create will be a &lt;code&gt;draft&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager.currentState.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; &amp;#34;draft&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we can also make it transition into another state&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;transitionTo&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;published&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager.currentState.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; &amp;#34;published&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But &lt;code&gt;Ember.StateManager&lt;/code&gt; can do more than that. We can hook into both
&lt;code&gt;enter&lt;/code&gt; and &lt;code&gt;exit&lt;/code&gt; events on each state and do some magic! Let&amp;rsquo;s
redefine our state manager as this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;PostManager &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;StateManager&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  initialState&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;draft&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  states&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    draft&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;State&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    published&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;State&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      enter&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;post was published&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;post&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;transitionTo&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;published&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// console prints &amp;#34;post was published&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Understanding how this class works is essential for any Ember developer,
as it is being used in almost every part of the framework. We&amp;rsquo;ll take at
some specific examples in the second part of this artcile.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Ember.js: Concatenated Properties</title>
		<link>https://blog.jakuba.net/2013-01-27-concatenated-properties/</link>
		<pubDate>Sun, 27 Jan 2013 18:18:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-01-27-concatenated-properties/</guid>
		<description>&lt;p&gt;As some of you might now, Ember provides you with something called
&lt;em&gt;concatenated property&lt;/em&gt;. Their main use case is internal, which means
you are unlikely to have the need to use them in your own application.
There are some places in Ember where you might be surprised by how
things behave and this might be one of those. Let&amp;rsquo;s start with an
example.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;UserView &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;View&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  classNames&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;UserView&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;().&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;classNames&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; [&amp;#34;ember-view&amp;#34;, &amp;#34;user&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you might be asking, where is the &lt;code&gt;&amp;quot;ember-view&amp;quot;&lt;/code&gt; coming from? Time
for another example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;DetailUserView &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  classNames&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;more&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;detail&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;DetailUserView&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;().&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;classNames&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; [&amp;#34;ember-view&amp;#34;, &amp;#34;user&amp;#34;, &amp;#34;more&amp;#34;, &amp;#34;detail&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This must be some sorcery! It seems that &lt;code&gt;classNames&lt;/code&gt; aren&amp;rsquo;t overwritten
in the subclass, but rather concatenated to the superclass&amp;rsquo; value of
that property. This works even when you overwrite it in an instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;View&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt; classNames&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;}).&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;classNames&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; [&amp;#34;ember-view&amp;#34;, &amp;#34;cat&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A simple glance at the &lt;a href=&#34;https://github.com/emberjs/ember.js/blob/master/packages/ember-views/lib/views/view.js#L756&#34;&gt;&lt;code&gt;Ember.View&lt;/code&gt;&lt;/a&gt; source code reveals it&amp;rsquo;s secrets&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;View &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;CoreView&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  concatenatedProperties&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;classNames&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;classNameBindings&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;attributeBindings&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// more stuff
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If this still doesn&amp;rsquo;t make any sense to you, just go take a look at &lt;a href=&#34;https://github.com/emberjs/ember.js/blob/master/packages/ember-metal/tests/mixin/concatenatedProperties_test.js&#34;&gt;the
tests for concatenated properties&lt;/a&gt;.&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Ember.js: Ember Data in Depth</title>
		<link>https://blog.jakuba.net/2013-01-27-ember-data-in-depth/</link>
		<pubDate>Sun, 27 Jan 2013 13:52:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-01-27-ember-data-in-depth/</guid>
		<description>&lt;p&gt;This is a guide explaining how Ember Data works internaly. My initial
motivation for writing this is to understand Ember better myself. I&amp;rsquo;ve
found that every time I understand something about how Ember works, it
improves my application code.&lt;/p&gt;
&lt;h2 id=&#34;main-parts&#34;&gt;Main parts&lt;/h2&gt;
&lt;p&gt;First we need to understand what are the main concepts. Let&amp;rsquo;s start with
a simple example.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; DS&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Model&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  username&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; DS&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;attr&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s dive deep into this. There are four important concepts, two of
which are basic Ember.js and we&amp;rsquo;re going to skip them&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;App.User&lt;/code&gt; represents a &lt;code&gt;User&lt;/code&gt; class in the &lt;code&gt;App&lt;/code&gt; namespace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;username&lt;/code&gt; represents a property on the &lt;code&gt;User&lt;/code&gt; class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the basics and you should be familiar with them to understand
the rest of this guide. Next we have &lt;code&gt;DS.Model&lt;/code&gt; and &lt;code&gt;DS.attr&lt;/code&gt;:&lt;/p&gt;
&lt;h2 id=&#34;dsmodel-and-dsattr&#34;&gt;DS.Model and DS.attr&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DS.Model&lt;/code&gt; is one of the core concepts in Ember Data and it represents a
single &lt;em&gt;resource&lt;/em&gt;. Models can have relationships with other models,
similar to how you&amp;rsquo;d model your data in a relational database. But let&amp;rsquo;s
ignore that for now.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DS.Model&lt;/code&gt; is both a state machine and a promise. If you don&amp;rsquo;t
understand what promises are, please take a look at &lt;a href=&#34;https://gist.github.com/3889970&#34;&gt;this awesome
article&lt;/a&gt; which explains them in depth.&lt;/p&gt;
&lt;p&gt;State machines are used throughout Ember and they basically represent something &lt;em&gt;which can have multiple states and can transition between the states&lt;/em&gt;. For example &lt;code&gt;DS.Model&lt;/code&gt; can have the following states (&lt;em&gt;&lt;a href=&#34;http://emberjs.com/guides/models/model-lifecycle/&#34;&gt;taken from the official Ember guide&lt;/a&gt;&lt;/em&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isLoaded&lt;/code&gt; - The adapter has finished retrieving the current state of the record from its backend.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isDirty&lt;/code&gt; - The record has local changes that have not yet been saved by the adapter. This includes records that have been created (but not yet saved) or deleted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isSaving&lt;/code&gt; - The record has been sent to the adapter to have its changes saved to the backend, but the adapter has not yet confirmed that the changes were successful.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isDeleted&lt;/code&gt; - The record was marked for deletion. When &lt;code&gt;isDeleted&lt;/code&gt; is true and &lt;code&gt;isDirty&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the record is deleted locally but the deletion was not yet persisted. When &lt;code&gt;isSaving&lt;/code&gt; is true, the change is in-flight. When both &lt;code&gt;isDirty&lt;/code&gt; and &lt;code&gt;isSaving&lt;/code&gt; are &lt;code&gt;false&lt;/code&gt;, the change has been saved.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isError&lt;/code&gt; - The adapter reported that it was unable to save local changes to the backend. This may also result in the record having its &lt;code&gt;isValid&lt;/code&gt; property become false if the adapter reported that server-side validations failed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isNew&lt;/code&gt; - The record was created locally and the adapter did not yet report that it was successfully saved.
&lt;code&gt;isValid&lt;/code&gt; No client-side validations have failed and the adapter did not report any server-side validation failures.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can also bind to these with event handlers, which will be explained later, but for now let&amp;rsquo;s just list them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;didLoad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;didCreate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;didUpdate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;didDelete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;becameError&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;becameInvalid&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/emberjs/data/blob/f274153754cb8b629cd98fc6c590f18bc8ee3ff6/packages/ember-data/lib/system/model/states.js#L223-L245&#34;&gt;I would also encourage you to go take a look at the source documentation on GitHub&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is important for us to understand what each state means, because they
can affect how our application behaves. For example if we try to modify
a record which is already being saved, we will get an exception saying
something like this&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Attempted to handle event `willSetProperty` on &amp;lt;App.User:ember1144:null&amp;gt;
while in state rootState.loaded.created.inFlight. Called with
{reference: [object Object], store: &amp;lt;App.Store:ember313&amp;gt;, name: username}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The important part here is the &lt;code&gt;rootState.loaded.created.inFlight&lt;/code&gt;. If
we look at &lt;a href=&#34;https://github.com/emberjs/data/blob/f274153754cb8b629cd98fc6c590f18bc8ee3ff6/packages/ember-data/lib/system/model/states.js#L254-L261&#34;&gt;the source of &lt;code&gt;DirtyState&lt;/code&gt;&lt;/a&gt;, we can see what this means&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dirty states have three child states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;uncommitted&lt;/code&gt;: the store has not yet handed off the record to be saved.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inFlight&lt;/code&gt;: the store has handed off the record to be saved, but the adapter has not yet acknowledged success.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;invalid&lt;/code&gt;: the record has invalid information and cannot be send to the adapter yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s go through the record lifecycle and observe it&amp;rsquo;s state. We can do
this by doing &lt;code&gt;.get(&amp;quot;stateManager.currentState.name&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isLoaded&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isDirty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager.currentState.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; loaded
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;wycats&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isLoaded&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isDirty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; true, which means comitting the transaction will save the record
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager.currentState.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; uncommitted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;transaction&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// while the record is being saved
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager.currentState.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; inFlight
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isSaving&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// after the record was saved
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;stateManager.currentState.name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; saved
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;transactions-and-commit&#34;&gt;Transactions and &lt;code&gt;commit()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;In the previous example, we&amp;rsquo;ve used &lt;code&gt;get(&amp;quot;transaction&amp;quot;).commit()&lt;/code&gt; to
persist the changes to the server. &lt;code&gt;.commit()&lt;/code&gt; will take all &lt;code&gt;dirty&lt;/code&gt;
records in the transaction and persiste them to the server.&lt;/p&gt;
&lt;p&gt;A record becomes dirty whenever one of it&amp;rsquo;s attributes change. For
example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isDirty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;wycats&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isDirty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we create a new record, it will be dirty by default&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;createRecord&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isDirty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/emberjs/data/pull/646&#34;&gt;Currently there&amp;rsquo;s a regression&lt;/a&gt;
that we change an attribute to something else, and then back to the
original value, the record will be marked as dirty.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;originalUsername &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isDirty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;wycats&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isDirty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; originalUsername&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;isDirty&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// =&amp;gt; true, even though it should be false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But let&amp;rsquo;s hope this will be fixed soon.&lt;/p&gt;
&lt;h2 id=&#34;transactions&#34;&gt;Transactions&lt;/h2&gt;
&lt;p&gt;Until now we assumed that there is some &lt;em&gt;global&lt;/em&gt; transaction which is
the same for every single model. But this doesn&amp;rsquo;t have to be true. We
can create our own transactions and manage them at our will.&lt;/p&gt;
&lt;p&gt;I recommend you take a look at &lt;a href=&#34;https://github.com/emberjs/data/blob/master/packages/ember-data/tests/integration/transactions/basic_test.js&#34;&gt;the tests for transactions in Ember Data
repository&lt;/a&gt;.
They basically show all of the scenarios which you can encounter. For
example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;record &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;createRecord&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// this will save the record to the server
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;record&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// nothing is committed here, because the record
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;                      &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// is removed from the transaction when it is saved
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// this will save the record properly
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also add a record to a transaction, which will remove it from the
global transaction. Important thing to note here is that
&lt;a href=&#34;https://github.com/emberjs/data/blob/master/packages/ember-data/lib/system/store.js#L127-L129&#34;&gt;&lt;code&gt;store.transaction()&lt;/code&gt;&lt;/a&gt;
&lt;strong&gt;always returns a new transaction&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;wycats&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// nothing happens
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// user is saved
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Same goes for deleting records&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;deleteRecord&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// nothing happens
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// user is deleted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also remove a record from a transaction&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;User&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;find&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#b48ead&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;remove&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;wycats&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;transaction&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// nothing happens
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One scenario when transactions can be useful is when you just need to
change one record, without affecting changes to other records. You can
put that change in a separate transaction, instead of just doing
&lt;code&gt;store.commit()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Important thing to note here is that there&amp;rsquo;s a &lt;code&gt;defaultTransaction&lt;/code&gt; for
the store to which you can get via &lt;code&gt;store.get(&amp;quot;defaultTransaction&amp;quot;)&lt;/code&gt;.
This is where all of the records are placed, unless you explicitly
create a new transaction and assign a record to it.&lt;/p&gt;
&lt;p&gt;These two are completely equivalent&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;store&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;defaultTransaction&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just take a look at how &lt;code&gt;store.commit()&lt;/code&gt; is defined&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commit&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  get&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;defaultTransaction&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;).&lt;/span&gt;commit&lt;span style=&#34;color:#eceff4&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;commit&#34;&gt;&lt;code&gt;commit()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Now that we understand how transactions work, let&amp;rsquo;s dig deep into
&lt;code&gt;store.commit()&lt;/code&gt;. First thing we need to understand here is that Ember
Transactions use this thing called &lt;code&gt;bucket&lt;/code&gt; to store records with
various states in. This is first initialized in the &lt;a href=&#34;https://github.com/emberjs/data/blob/master/packages/ember-data/lib/system/transaction.js#L91-L101&#34;&gt;&lt;code&gt;init&lt;/code&gt; method of
&lt;code&gt;DS.Transaction&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;init&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;buckets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    clean&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;    Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;OrderedSet&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    created&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;  Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;OrderedSet&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    updated&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;  Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;OrderedSet&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    deleted&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt;  Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;OrderedSet&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    inflight&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;OrderedSet&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  set&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;relationships&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;OrderedSet&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;create&lt;span style=&#34;color:#eceff4&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each bucket represents one state in which a record can possibly be.
These are used in many different places in the transaction, and every
time a method changes it&amp;rsquo;s state, it will be moved to a corresponding
bucket&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;recordBecameDirty&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bucketType&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; record&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;removeFromBucket&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#39;clean&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; record&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;addToBucket&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;bucketType&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; record&lt;span style=&#34;color:#eceff4&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;More content will be coming soon&lt;/strong&gt;&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Ember.js: Controller&#39;s Needs Explained</title>
		<link>https://blog.jakuba.net/2013-01-27-controllers-needs-explained/</link>
		<pubDate>Sun, 27 Jan 2013 11:53:00 +0000</pubDate>
		
		<guid>https://blog.jakuba.net/2013-01-27-controllers-needs-explained/</guid>
		<description>&lt;p&gt;Since the v2 router came it became clear that using global singleton
controllers like &lt;code&gt;App.userController = App.UserController.create()&lt;/code&gt; is
not the way to go. This prevents us from doing a simple binding like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;UserController &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;ObjectController&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  accountsBinding&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;App.accountsController.content&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;There is no need or even possibility to manage the controller instances
with the new router though. It will create the instance for us. One way
we can use this is with &lt;code&gt;this.controllerFor&lt;/code&gt;, which can be used inside
of a route.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;UserRoute &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Route&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setupController&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;controller&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; model&lt;span style=&#34;color:#eceff4&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;// some magic with `this.controllerFor(&amp;#34;user&amp;#34;)`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;but since this method is only available on the route and not inside a
controller, it wasn&amp;rsquo;t very pleasant to specify dependencies (or needs)
between controllers. Which is exactly where needs come in and solve the
issue&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;UserController &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;ObjectController&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  needs&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this will give you the opportunity to call &lt;code&gt;controllers.foo&lt;/code&gt; on the
&lt;code&gt;App.UserController&lt;/code&gt; instance and get back an instance of
&lt;code&gt;App.FooController&lt;/code&gt;. You could even (ab)use that in the templates like
this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#616e87;font-style:italic&#34;&gt;&amp;lt;!-- inside `users` template --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{% raw %}{{controllers.foo}}{% endraw %}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;needs-vs-routing&#34;&gt;Needs vs routing&lt;/h2&gt;
&lt;p&gt;Needs become incredibly useful when you have nested routes, for example&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;Router&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;resource&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/posts/:post_id&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;},&lt;/span&gt; &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#81a1c1;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;route&lt;span style=&#34;color:#eceff4&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;edit&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;{&lt;/span&gt; path&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;/edit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case we will get &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;post.index&lt;/code&gt; and &lt;code&gt;post.edit&lt;/code&gt;. If you go
to &lt;code&gt;/posts/1&lt;/code&gt; you expect to get &lt;code&gt;post.index&lt;/code&gt; template, which is true,
but the context (or model, or content) is being set on the
&lt;code&gt;PostController&lt;/code&gt;, not on &lt;code&gt;PostIndexController&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you think about it it does make sense, because the &lt;code&gt;resource&lt;/code&gt; is
basically shared between &lt;code&gt;post.index&lt;/code&gt; and &lt;code&gt;post.edit&lt;/code&gt;, that&amp;rsquo;s why it is
fetched and stored in their parent. Let&amp;rsquo;s go through this in detail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;visit &lt;code&gt;/posts/1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;router basically does &lt;code&gt;App.Post.find(1)&lt;/code&gt; &lt;strong&gt;and assigns that to the
content of &lt;code&gt;PostController&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;template &lt;code&gt;post&lt;/code&gt; is rendered&lt;/li&gt;
&lt;li&gt;template &lt;code&gt;post.index&lt;/code&gt; is rendered in &lt;code&gt;post&lt;/code&gt;&amp;rsquo;s outlet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and when you transition to &lt;code&gt;/posts/1/edit&lt;/code&gt;, the only thing that changes
is the leaf route, you still keep the same &lt;code&gt;App.Post&lt;/code&gt; model, because it
belongs to the parent &lt;code&gt;PostRoute&lt;/code&gt;, not to the leaf &lt;code&gt;PostIndexRoute&lt;/code&gt;. But
this has a drawback. You&amp;rsquo;re not able to directly access the content from
the &lt;code&gt;post.index&lt;/code&gt; template, since it doesn&amp;rsquo;t belong to it&amp;rsquo;s controller.
That&amp;rsquo;s where needs come in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;App&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;PostIndexController &lt;span style=&#34;color:#81a1c1&#34;&gt;=&lt;/span&gt; Ember&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;ObjectController&lt;span style=&#34;color:#eceff4&#34;&gt;.&lt;/span&gt;extend&lt;span style=&#34;color:#eceff4&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  needs&lt;span style=&#34;color:#81a1c1&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#eceff4&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a3be8c&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#eceff4&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and in the &lt;code&gt;post/index&lt;/code&gt; template, you can access the content like this&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{% raw %}{{controllers.post.content}}{% endraw %}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By specifying the need Ember will make sure that it gives you the right
&lt;code&gt;PostController&lt;/code&gt; instance with it&amp;rsquo;s content set to the right value.&lt;/p&gt;
</description>
	</item>
	
	</channel>
</rss>
