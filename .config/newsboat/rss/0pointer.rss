<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Pid¬†Eins</title><link>https://0pointer.net/blog/</link><description></description><lastBuildDate>Thu, 03 Nov 2022 00:00:00 +0100</lastBuildDate><item><title>Linux Boot Partitions</title><link>https://0pointer.net/blog/linux-boot-partitions.html</link><description>&lt;h1&gt;üíΩ Linux Boot Partitions and How to Set Them Up üöÄ&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Let‚Äôs have a look how traditional Linux distributions set up
&lt;code&gt;/boot/&lt;/code&gt; and the ESP, and how this could be improved.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;How Linux distributions traditionally have been setting up their
‚Äúboot‚Äù file systems has been varying to some degree, but the most
common choice has been to have a separate partition mounted to
&lt;code&gt;/boot/&lt;/code&gt;. Usually the partition is formatted as a Linux file system
such as ext2/ext3/ext4. The partition contains the kernel images, the
initrd and various boot loader resources. Some distributions, like
Debian and Ubuntu, also store ancillary files associated with the
kernel here, such as &lt;code&gt;kconfig&lt;/code&gt; or &lt;code&gt;System.map&lt;/code&gt;. Such a traditional
boot partition is only defined within the context of the distribution,
and typically not immediately recognizable as such when looking just
at the partition table (i.e. it uses the generic Linux partition type
UUID).&lt;/p&gt;
&lt;p&gt;With the arrival of UEFI a new partition relevant for boot appeared,
the &lt;em&gt;EFI System Partition&lt;/em&gt; (ESP). This partition is defined by the
firmware environment, but typically accessed by Linux to install or
update boot loaders. The choice of file system is not up to Linux, but
effectively mandated by the UEFI specifications: vFAT. In theory it
could be formatted as other file systems too. However, this would
require the firmware to support file systems other than vFAT. This is
rare and firmware specific though, as vFAT is the only file system
mandated by the UEFI specification. In other words, vFAT is the only
file system which is guaranteed to be universally supported.&lt;/p&gt;
&lt;p&gt;There‚Äôs a major overlap of the type of the data typically stored in
the ESP and in the traditional boot partition mentioned earlier: a
variety of boot loader resources as well as kernels/initrds.&lt;/p&gt;
&lt;p&gt;Unlike the traditional boot partition, the ESP is easily recognizable
in the partition table via its GPT partition type UUID. The ESP is
also a &lt;em&gt;shared resource&lt;/em&gt;: all OSes installed on the same disk will
share it and put their boot resources into them (as opposed to the
traditional boot partition, of which there is one per installed Linux
OS, and only that one will put resources there).&lt;/p&gt;
&lt;p&gt;To summarize, the most common setup on typical Linux distributions is
something like this:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
   &lt;th&gt;Type&lt;/th&gt;
   &lt;th&gt;Linux Mount Point&lt;/th&gt;
   &lt;th&gt;File System Choice&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;Linux ‚ÄúBoot‚Äù Partition&lt;/td&gt;
   &lt;td&gt;&lt;code&gt;/boot/&lt;/code&gt;&lt;/td&gt;
   &lt;td&gt;Any Linux File System, typically ext2/ext3/ext4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;ESP&lt;/td&gt;
   &lt;td&gt;&lt;code&gt;/boot/efi/&lt;/code&gt;&lt;/td&gt;
   &lt;td&gt;vFAT&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;As mentioned, not all distributions or local installations agree on
this. For example, it‚Äôs probably worth mentioning that some
distributions decided to put kernels onto the root file system of the
OS itself. For this setup to work the boot loader itself [sic!] must
implement a non-trivial part of the storage stack. This may have to
include RAID, storage drivers, networked storage, volume management,
disk encryption, and Linux file systems. Leaving aside the conceptual
argument that complex storage stacks don‚Äôt belong in boot loaders
there are very practical problems with this approach. Reimplementing
the Linux storage stack in all its combinations is a massive amount of
work. It took decades to implement what we have on Linux now, and it
will take a similar amount of work to catch up in the boot loader‚Äôs
reimplementation. Moreover, there‚Äôs a political complication: some
Linux file system communities made clear they have no interest in
supporting a second file system implementation that is not maintained
as part of the Linux kernel.&lt;/p&gt;
&lt;p&gt;What‚Äôs interesting is that the &lt;code&gt;/boot/efi/&lt;/code&gt; mount point is nested
below the &lt;code&gt;/boot/&lt;/code&gt; mount point. This effectively means that to access
the ESP the Boot partition must exist and be mounted first. A system
with just an ESP and without a Boot partition hence doesn‚Äôt fit well
into the current model. The Boot partition will also have to carry an
empty ‚Äúefi‚Äù directory that can be used as the inner mount point, and
serves no other purpose.&lt;/p&gt;
&lt;p&gt;Given that the traditional boot partition and the ESP may carry
similar data (i.e. boot loader resources, kernels, initrds) one may
wonder why they are separate concepts. Historically, this was the
easiest way to make the pre-UEFI way how Linux systems were booted
compatible with UEFI: conceptually, the ESP can be seen as just a
minor addition to the status quo ante that way. Today, primarily two
reasons remained:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some distributions see a benefit in support for complex Linux file
  system concepts such as hardlinks, symlinks, SELinux labels/extended
  attributes and so on when storing boot loader resources. ‚Äì I
  personally believe that making use of features in the boot file
  systems that the firmware environment cannot really make sense of is
  very clearly not advisable. The UEFI file system APIs know no
  symlinks, and what is SELinux to UEFI anyway? Moreover, putting more
  than the absolute minimum of simple data files into such file
  systems immediately raises questions about how to authenticate them
  comprehensively (including all fancy metadata) cryptographically on
  use (see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On real-life systems that ship with non-Linux OSes the ESP often
  comes pre-installed with a size too small to carry multiple Linux
  kernels and initrds. As growing the size of an existing ESP is
  problematic (for example, because there‚Äôs no space available
  immediately after the ESP, or because some low-quality firmware
  reacts badly to the ESP changing size) placing the kernel in a
  separate, secondary partition (i.e. the boot partition) circumvents
  these space issues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;File System Choices&lt;/h2&gt;
&lt;p&gt;We already mentioned that the ESP effectively has to be vFAT, as that
is what UEFI (more or less) guarantees. The file system choice for the
boot partition is not quite as restricted, but using arbitrary Linux
file systems is not really an option either. The file system must be
accessible by both the boot loader and the Linux OS. Hence only file
systems that are available in both can be used. Note that such
secondary implementations of Linux file systems in the boot
environment ‚Äì limited as they may be ‚Äì are not typically welcomed
or supported by the maintainers of the canonical file system
implementation in the upstream Linux kernel. Modern file systems are
notoriously complicated and delicate and simply don‚Äôt belong in boot
loaders.&lt;/p&gt;
&lt;p&gt;In a trusted boot world, the two file systems for the ESP and the
&lt;code&gt;/boot/&lt;/code&gt; partition should be considered &lt;em&gt;untrusted&lt;/em&gt;: any code or
essential data read from them must be authenticated cryptographically
before use. And even more, the file system structures themselves are
also untrusted. The file system driver reading them must be careful
not to be exploitable by a rogue file system image. Effectively this
means a simple file system (for which a driver can be more easily
validated and reviewed) is generally a better choice than a complex
file system (Linux file system communities made it pretty clear that
robustness against rogue file system images is outside of their scope
and not what is being tested for.).&lt;/p&gt;
&lt;p&gt;Some approaches tried to address the fact that boot partitions are
untrusted territory by encrypting them via a mechanism compatible to
LUKS, and adding decryption capabilities to the boot loader so it can
access it. This misses the point though, as encryption does not imply
authentication, and only authentication is typically desired. The boot
loader and kernel code are typically Open Source anyway, and hence
there‚Äôs little value in attempting to keep secret what is already
public knowledge. Moreover, encryption implies the existence of an
encryption key. Physically typing in the decryption key on a keyboard
might still be acceptable on desktop systems with a single human user
in front, but outside of that scenario unlock via TPM, PKCS#11 or
network services are typically required. And even on the desktop FIDO2
unlocking is probably the future. Implementing all the technologies
these unlocking mechanisms require in the boot loader is not
realistic, unless the boot loader shall become a full OS on its own as
it would require subsystems for FIDO2, PKCS#11, USB, Bluetooth
network, smart card access, and so on.&lt;/p&gt;
&lt;h2&gt;File System Access Patterns&lt;/h2&gt;
&lt;p&gt;Note that traditionally both mentioned partitions were read-only
during most parts of the boot. Only later, once the OS is up, write
access was required to implement OS or boot loader updates. In today‚Äôs
world things have become a bit more complicated. A modern OS might
want to require some limited write access already in the boot loader,
to implement boot counting/boot assessment/automatic fallback (e.g.,
if the same kernel fails to boot 3 times, automatically revert to
older kernel), or to maintain an early storage-based random seed. This
means that even though the file system is &lt;em&gt;mostly read-only,&lt;/em&gt; we need
limited write access after all.&lt;/p&gt;
&lt;p&gt;vFAT cannot compete with modern Linux file systems such as &lt;code&gt;btrfs&lt;/code&gt;
when it comes to data safety guarantees. It‚Äôs not a journaled file
system, does not use CoW or any form of checksumming. This means when
used for the system boot process we need to be particularly careful
when accessing it, and in particular when making changes to it (i.e.,
trying to keep changes local to single sectors). It is essential to
use write patterns that minimize the chance of file system
corruption. Checking the file system (‚Äú&lt;code&gt;fsck&lt;/code&gt;‚Äù) before modification
(and probably also reading) is important, as is ensuring the file
system is put into a ‚Äúclean‚Äù state as quickly as possible after each
modification.&lt;/p&gt;
&lt;p&gt;Code quality of the firmware in typical systems is known to not always
be great. When relying on the file system driver included in the
firmware it‚Äôs hence a good idea to limit use to operations that have a
better chance to be correctly implemented. For example, when writing
from the UEFI environment it might be wise to avoid any operation that
requires allocation algorithms, but instead focus on access patterns
that only override already written data, and do not require allocation
of new space for the data.&lt;/p&gt;
&lt;p&gt;Besides write access from the boot loader code (as described above)
these file systems will require write access from the OS, to
facilitate boot loader and kernel/initrd updates. These types of
accesses are generally not fully random accesses (i.e., never partial
file updates) but usually mean adding new files as whole, and removing
old files as a whole. Existing files are typically not modified once
created, though they might be replaced wholly by newer versions.&lt;/p&gt;
&lt;h2&gt;Boot Loader Updates&lt;/h2&gt;
&lt;p&gt;Note that the update cycle frequencies for boot loaders and for
kernels/initrds are probably similar these days. While kernels are
still vastly more complex than boot loaders, security issues are
regularly found in both. In particular, as boot loaders (through
‚Äúshim‚Äù and similar components) carry certificate/keyring and denylist
information, which typically require frequent updates. Update cycles
hence have to be expected regularly.&lt;/p&gt;
&lt;h2&gt;Boot Partition Discovery&lt;/h2&gt;
&lt;p&gt;The traditional boot partition was not recognizable by looking just at
the partition table. On MBR systems it was directly referenced from
the boot sector of the disk, and on EFI systems from information
stored in the ESP. This is less than ideal since by losing this
entrypoint information the system becomes unbootable. It‚Äôs typically a
better, more robust idea to make boot partitions recognizable as such
in the partition table directly. This is done for the ESP via the GPT
partition type UUID. For traditional boot partitions this was not done
though.&lt;/p&gt;
&lt;h2&gt;Current Situation Summary&lt;/h2&gt;
&lt;p&gt;Let‚Äôs try to summarize the above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Currently, typical deployments use &lt;strong&gt;two distinct boot partitions&lt;/strong&gt;,
  often using two distinct file system implementations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Firmware effectively dictates existence of the ESP, and the use of
  &lt;strong&gt;vFAT&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In userspace view: the ESP &lt;strong&gt;mount is nested&lt;/strong&gt; below the general
  Boot partition mount&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resources stored in both partitions are primarily kernel/initrd, and
  boot loader resources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The mandatory use of vFAT brings certain &lt;strong&gt;data safety challenges&lt;/strong&gt;,
  as does quality of firmware file system driver code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;During boot limited write access&lt;/strong&gt; is needed, during OS runtime
  more comprehensive write access is needed (though still not fully
  random).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Less restricted but still &lt;strong&gt;limited write patterns from OS
  environment&lt;/strong&gt; (only full file additions/updates/removals, during
  OS/boot loader updates)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boot loaders should not implement complex storage stacks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ESP can be &lt;strong&gt;auto-discovered&lt;/strong&gt; from the partition table, traditional
  boot partition cannot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ESP and the traditional boot partition are not protected
  cryptographically neither in structure nor contents. It is expected
  that loaded files are individually authenticated after being read.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The ESP is a &lt;strong&gt;shared resource&lt;/strong&gt; ‚Äî the traditional boot partition a
  resource specific to each installed Linux OS on the same disk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to Do it Better&lt;/h2&gt;
&lt;p&gt;Now that we have discussed many of the issues with the status quo ante, let‚Äôs see how we can do things better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Two partitions for essentially the same data is a bad idea. Given
  they carry data very similar or identical in nature, the common case
  should be to have only one (but see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two file system implementations are worse than one. Given that vFAT
  is more or less mandated by UEFI and the only format universally
  understood by all players, and thus has to be used anyway, it might
  as well be the only file system that is used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data safety is unnecessarily bad so far: both ESP and boot partition
  are continuously mounted from the OS, even though access is pretty
  restricted: outside of update cycles access is typically not
  required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All partitions should be auto-discoverable/self-descriptive&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The two partitions should not be exposed as nested mounts to userspace&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be more specific, here‚Äôs how I think a better way to set this all up would look like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Whenever possible, only have &lt;strong&gt;one boot partition&lt;/strong&gt;, not two. On EFI
  systems, make it the ESP. On non-EFI systems use an XBOOTLDR
  partition instead (see below). Only have both in the case where a
  Linux OS is installed on a system that already contains an OS with
  an ESP that is too small to carry sufficient kernels/initrds. When a
  system contains a XBOOTLDR partition put kernels/initrd on that,
  otherwise the ESP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead of the vaguely defined, traditional Linux ‚Äúboot‚Äù partition
  use the &lt;strong&gt;XBOOTLDR&lt;/strong&gt; partition type as defined by the &lt;a href="https://uapi-group.org/specifications/specs/discoverable_partitions_specification/"&gt;Discoverable
  Partitions
  Specification&lt;/a&gt;. This
  ensures the partition is discoverable, and can be automatically
  mounted by things like
  &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-gpt-auto-generator.html"&gt;&lt;code&gt;systemd-gpt-auto-generator&lt;/code&gt;&lt;/a&gt;. Use
  XBOOTLDR only if you have to, i.e., when dealing with systems that
  lack UEFI (and where the ESP hence has no value) or to address the
  mentioned size issues with the ESP. Note that unlike the traditional
  boot partition the XBOOTLDR partition is a shared resource, i.e.,
  shared between multiple parallel Linux OS installations on the same
  disk. Because of this it is typically wise to place a per-OS
  directory at the top of the XBOOTLDR file system to avoid conflicts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;strong&gt;vFAT&lt;/strong&gt; for both partitions, it‚Äôs the only thing
  universally understood among relevant firmwares and Linux. It‚Äôs
  simple enough to be useful for untrusted storage. Or to say this
  differently: writing a file system driver that is not easily
  vulnerable to rogue disk images is much easier for vFAT than for
  let‚Äôs say btrfs. ‚Äì But the choice of vFAT implies some care needs to
  be taken to address the data safety issues it brings, see below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mount the two partitions via the ‚Äú&lt;strong&gt;automount&lt;/strong&gt;‚Äù
  logic. For example, via systemd‚Äôs
  &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.automount.html"&gt;automount&lt;/a&gt;
  units, with a very short idle time-out (one second or so). This
  improves data safety immensely, as the file systems will remain
  mounted (and thus possibly in a ‚Äúdirty‚Äù state) only for very short
  periods of time, when they are actually accessed ‚Äì and all that
  while the fact that they are not mounted continuously is mostly not
  noticeable for applications as the file system paths remain
  continuously around. Given that the backing file system (vFAT) has
  poor data safety properties, it is essential to shorten the access
  for unclean file system state as much as possible. In fact, this is
  what the aforementioned &lt;code&gt;systemd-gpt-auto-generator&lt;/code&gt;
  logic actually does by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whenever mounting one of the two partitions, do a file system check
  (&lt;strong&gt;fsck&lt;/strong&gt;; in fact this is also what
  &lt;code&gt;systemd-gpt-auto-generator&lt;/code&gt;does by default, hooked into
  the automount logic, to run on first access). This ensures that even
  if the file system is in an unclean state it is restored to be clean
  when needed, i.e., on first access.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not mount the two partitions &lt;strong&gt;nested&lt;/strong&gt;, i.e., no
  more &lt;code&gt;/boot/efi/&lt;/code&gt;. First of all, as mentioned above, it
  should be possible (and is desirable) to only have one of the
  two. Hence it is simply a bad idea to require the other as well,
  just to be able to mount it. More importantly though, by nesting
  them, automounting is complicated, as it is necessary to trigger the
  first automount to establish the second automount, which defeats the
  point of automounting them in the first place. Use the two distinct
  mount points &lt;code&gt;/efi/&lt;/code&gt; (for the ESP) and
  &lt;code&gt;/boot/&lt;/code&gt; (for XBOOTLDR) instead. You might have guessed,
  but that too is what &lt;code&gt;systemd-gpt-auto-generator&lt;/code&gt; does by
  default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When making additions or updates to ESP/XBOOTLDR from the OS make
  sure to create a file and write it in full, then
  &lt;code&gt;syncfs()&lt;/code&gt; the whole file system, then rename to give it
  its final name, and &lt;code&gt;syncfs()&lt;/code&gt; again. Similar when
  removing files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When writing from the boot loader environment/UEFI to ESP/XBOOTLDR,
  do not append to files or create new files. Instead overwrite
  already allocated file contents (for example to maintain a random
  seed file) or rename already allocated files to include information
  in the file name (and ideally do not increase the file name in
  length; for example to maintain boot counters).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consider adopting
  &lt;a href="https://0pointer.net/blog/brave-new-trusted-boot-world.html"&gt;UKIs&lt;/a&gt;,
  which minimize the number of files that need to be updated on the
  ESP/XBOOTLDR during OS/kernel updates (ideally down to 1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consider adopting
  &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-boot.html"&gt;&lt;code&gt;systemd-boot&lt;/code&gt;&lt;/a&gt;,
  which minimizes the number of files that need to be updated on boot
  loader updates (ideally down to 1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Consider removing any mention of ESP/XBOOTLDR from
  &lt;code&gt;/etc/fstab&lt;/code&gt;, and just let
  &lt;code&gt;systemd-gpt-auto-generator&lt;/code&gt; do its thing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop implementing file systems, complex storage, disk encryption, ‚Ä¶
  in your boot loader.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Implementing things like that you gain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;: only one file system implementation, typically only
  one partition and mount point&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Robust auto-discovery&lt;/strong&gt; of all partitions, no need to even
  configure &lt;code&gt;/etc/fstab&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data safety&lt;/strong&gt; guarantees as good as possible, given the
  circumstances&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize this in a table:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
   &lt;th&gt;Type&lt;/th&gt;
   &lt;th&gt;Linux Mount Point&lt;/th&gt;
   &lt;th&gt;File System Choice&lt;/th&gt;
   &lt;th&gt;Automount&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;ESP&lt;/td&gt;
   &lt;td&gt;&lt;code&gt;/efi/&lt;/code&gt;&lt;/td&gt;
   &lt;td&gt;vFAT&lt;/td&gt;
   &lt;td&gt;yes&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;XBOOTLDR&lt;/td&gt;
   &lt;td&gt;&lt;code&gt;/boot/&lt;/code&gt;&lt;/td&gt;
   &lt;td&gt;vFAT&lt;/td&gt;
   &lt;td&gt;yes&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;A note regarding modern boot loaders that implement the &lt;a href="https://uapi-group.org/specifications/specs/boot_loader_specification/"&gt;Boot Loader
Specification&lt;/a&gt;:
both partitions are explicitly listed in the specification as sources
for both Type #1 and Type #2 boot menu entries. Hence, if you use such
a modern boot loader (e.g. systemd-boot) these two partitions are the
preferred location for boot loader resources, kernels and initrds
anyway.&lt;/p&gt;
&lt;h1&gt;Addendum: You got RAID?&lt;/h1&gt;
&lt;p&gt;You might wonder, what about RAID setups and the ESP? This comes up
regularly in discussions: how to set up the ESP so that (software)
RAID1 (mirroring) can be done on the ESP. Long story short: I‚Äôd
strongly advise against using RAID on the ESP. Firmware typically
doesn‚Äôt have native RAID support, and given that firmware and boot
loader can write to the file systems involved, any attempt to use
software RAID on them will mean that a boot cycle might corrupt the
RAID sync, and immediately requires a re-synchronization after
boot. If RAID1 backing for the ESP is really necessary, the only way
to implement that safely would be to implement this as a driver for
UEFI ‚Äì but that creates certain bootstrapping issues (i.e., where to
place the driver if not the ESP, a file system the driver is supposed
to be used for), and also reimplements a considerable component of the
OS storage stack in firmware mode, which seems problematic.&lt;/p&gt;
&lt;p&gt;So what to do instead? My recommendation would be to solve this via
userspace tooling. If redundant disk support shall be implemented for
the ESP, then create separate ESPs on all disks, and synchronize them
on the file system level instead of the block level. Or in other
words, the tools that install/update/manage kernels or boot loaders
should be taught to maintain multiple ESPs instead of one. Copy the
kernels/boot loader files to all of them, and remove them from all of
them. Under the assumption that the goal of RAID is a more reliable
system this should be the best way to achieve that, as it doesn‚Äôt
pretend the firmware could do things it actually cannot do. Moreover
it minimizes the complexity of the boot loader, shifting the syncing
logic to userspace, where it‚Äôs typically easier to get right.&lt;/p&gt;
&lt;h1&gt;Addendum: Networked Boot&lt;/h1&gt;
&lt;p&gt;The discussion above focuses on booting up from a local disk. When
thinking about networked boot I think two scenarios are particularly
relevant:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PXE-style network booting. I think in this mode of operation focus
   should be on directly booting a single UKI image instead of a boot
   loader. This sidesteps the whole issue of maintaining any boot
   partition at all, and simplifies the boot process greatly. In
   scenarios where this is not sufficient, and an interactive boot
   menu or other boot loader features are desired, it might be a good
   idea to take inspiration from the UKI concept, and build a single
   boot loader EFI binary (such as systemd-boot), and include the UKIs
   for the boot menu items and other resources inside it via PE
   sections. Or in other words, build a single boot loader binary that
   is ‚Äúsupercharged‚Äù and contains all auxiliary resources in its own
   PE sections. (Note: this does not exist, it‚Äôs an idea I intend to
   explore with systemd-boot). Benefit: a single file has to be
   downloaded via PXE/TFTP, not more. Disadvantage: unused resources
   are downloaded unnecessarily. Either way: in this context there is
   no local storage, and the ESP/XBOOTLDR discussion above is without
   relevance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initrd-style network booting. In this scenario the boot loader and
   kernel/initrd (better: UKI) are available on a local disk. The
   initrd then configures the network and transitions to a network
   share or file system on a network block device for the root file
   system. In this case the discussion above applies, and in fact the
   ESP or XBOOTLDR partition would be the only partition available
   locally on disk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And this is all I have for today.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 03 Nov 2022 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2022-11-03:/blog/linux-boot-partitions.html</guid><category>projects</category></item><item><title>Brave New Trusted Boot World</title><link>https://0pointer.net/blog/brave-new-trusted-boot-world.html</link><description>&lt;h1&gt;üîê Brave New Trusted Boot World üöÄ&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;This document looks at the boot process of general purpose Linux
distributions. It covers the status quo and how we envision Linux boot
to work in the future with a focus on robustness and simplicity.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This document will assume that the reader has comprehensive
familiarity with TPM 2.0 security chips and their capabilities (e.g.,
PCRs, measurements, SRK), boot loaders, the &lt;code&gt;shim&lt;/code&gt; binary, Linux,
initrds, UEFI Firmware, PE binaries, and SecureBoot.&lt;/p&gt;
&lt;h2&gt;Problem Description&lt;/h2&gt;
&lt;p&gt;Status quo ante of the boot logic on typical Linux distributions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Most popular Linux distributions generate &lt;code&gt;initrds&lt;/code&gt; locally, and
  they are unsigned, thus not protected through SecureBoot (since that
  would require local SecureBoot key enrollment, which is generally
  not done), nor TPM PCRs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boot chain is typically Firmware ‚Üí
  &lt;a href="https://github.com/rhboot/shim"&gt;&lt;code&gt;shim&lt;/code&gt;&lt;/a&gt; ‚Üí &lt;code&gt;grub&lt;/code&gt; ‚Üí Linux kernel ‚Üí
  &lt;code&gt;initrd&lt;/code&gt; (&lt;code&gt;dracut&lt;/code&gt; or similar) ‚Üí root file system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Firmware‚Äôs UEFI SecureBoot protects shim, shim‚Äôs key management
  protects grub and kernel. No code signing protects initrd. initrd
  acquires the key for encrypted root fs from the user (or
  TPM/FIDO2/PKCS11).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shim&lt;/code&gt;/&lt;code&gt;grub&lt;/code&gt;/kernel is measured into TPM PCR 4, among other stuff&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EFI TPM event log reports measured data into TPM PCRs, and can be
  used to reconstruct and validate state of TPM PCRs from the used
  resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No userspace components are typically measured, except for what IMA
  measures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New kernels require locally generating new boot loader scripts and
  generating a new initrd each time. OS updates thus mean fragile
  generation of multiple resources and copying multiple files into the
  boot partition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Problems with the status quo ante:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;initrd typically unlocks root file system encryption, but is not
  protected &lt;em&gt;whatsoever&lt;/em&gt;, and trivial to attack and modify offline&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS updates are brittle: PCR values of grub are very hard to
  pre-calculate, as grub measures chosen control flow path, not just
  code images. PCR values vary wildly, and OS provided resources are
  not measured into separate PCRs. Grub‚Äôs PCR measurements might be
  useful up to a point to reason about the boot after the fact, for
  the most basic remote attestation purposes, but useless for
  calculating them ahead of time during the OS build process (which
  would be desirable to be able to bind secrets to future expected PCR
  state, for example to bind secrets to an OS in a way that it remain
  accessible even after that OS is updated).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updates of a boot loader are not robust, require multi-file updates
  of ESP and boot partition, and regeneration of boot scripts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No rollback protection (no way to cryptographically invalidate
  access to TPM-bound secrets on OS updates)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remote attestation of running software is needlessly complex since
  initrds are generated locally and thus basically are guaranteed to
  vary on each system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Locking resources maintained by arbitrary user apps to TPM state
  (PCRs) is not realistic for general purpose systems, since PCRs will
  change on every OS update, and there‚Äôs no mechanism to re-enroll
  each such resource before every OS update, and remove the old
  enrollment after the update.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no concept to cryptographically invalidate/revoke secrets
  for an older OS version once updated to a new OS version. An
  attacker thus can always access the secrets generated on old OSes if
  they manage to exploit an old version of the OS ‚Äî even if a newer
  version already has been deployed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Goals of the new design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Provide a &lt;strong&gt;fully signed execution path&lt;/strong&gt; from firmware to
  userspace, no exceptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide a &lt;strong&gt;fully measured execution path&lt;/strong&gt; from firmware to
  userspace, no exceptions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Separate out TPM PCRs assignments&lt;/strong&gt;, by ‚Äúowner‚Äù of measured
  resources, so that resources can be bound to them in a fine-grained
  fashion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Allow &lt;strong&gt;easy pre-calculation of expected PCR values&lt;/strong&gt; based on
  booted kernel/initrd, configuration, local identity of the system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rollback protection&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simple &amp;amp; robust updates: &lt;strong&gt;one updated file per concept&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Updates without requiring re-enrollment/local preparation&lt;/strong&gt; of the
  TPM-protected resources (no more ‚Äúbrittle‚Äù PCR hashes that must be
  propagated into every TPM-protected resource on each OS update)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System ready for easy &lt;strong&gt;remote attestation&lt;/strong&gt;, to prove validity of
  booted OS, configuration and local identity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ability to &lt;strong&gt;bind secrets to specific phases of the boot&lt;/strong&gt;, e.g. the
  root fs encryption key should be retrievable from the TPM only in
  the initrd, but not after the host transitioned into the root fs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reasonably &lt;strong&gt;secure, automatic, unattended unlocking&lt;/strong&gt; of disk
  encryption secrets should be possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;‚ÄúDemocratize‚Äù use of PCR policies by defining PCR register meanings,
  and making binding to them robust against updates, so that
  &lt;strong&gt;external projects&lt;/strong&gt; can safely and securely bind their own data to
  them (or use them for remote attestation) without risking breakage
  whenever the OS is updated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build around &lt;strong&gt;TPM 2.0&lt;/strong&gt; (with graceful fallback for TPM-less
  systems if desired, but TPM 1.2 support is out of scope)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considered attack scenarios and considerations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Evil Maid: neither online nor offline (i.e. ‚Äúat rest‚Äù), physical
  access to a storage device should enable an attacker to read the
  user‚Äôs plaintext data on disk (confidentiality); neither online nor
  offline, physical access to a storage device should allow undetected
  modification/backdooring of user data or OS (integrity), or
  exfiltration of secrets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TPMs are assumed to be reasonably ‚Äúsecure‚Äù, i.e. can securely
  store/encrypt secrets. Communication to TPM is not ‚Äúsecure‚Äù though
  and must be protected on the wire.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similar, the CPU is assumed to be reasonably ‚Äúsecure‚Äù&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SecureBoot is assumed to be reasonably ‚Äúsecure‚Äù to permit validated
  boot up to and including shim+boot loader+kernel (but see discussion
  below)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All user data must be encrypted &lt;em&gt;and&lt;/em&gt; authenticated. All vendor and
  administrator data must be authenticated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is assumed all software involved regularly contains
  vulnerabilities and requires frequent updates to address them, plus
  regular revocation of old versions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is further assumed that key material used for signing code by the
  OS vendor can reasonably be kept secure (via use of HSM, and
  similar, where secret key information never leaves the signing
  hardware) and does &lt;em&gt;not&lt;/em&gt; require frequent roll-over.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Proposed Construction&lt;/h2&gt;
&lt;p&gt;Central to the proposed design is the concept of a &lt;strong&gt;Unified Kernel
Image (UKI)&lt;/strong&gt;. These UKIs are the combination of a Linux kernel image,
and initrd, a UEFI boot stub program (and further resources, see
below) into one single UEFI PE file that can either be directly
invoked by the UEFI firmware (which is useful in particular in some
cloud/Confidential Computing environments) or through a boot loader
(which is generally useful to implement support for multiple kernel
versions, with interactive or automatic selection of image to boot
into, potentially with automatic fallback management to increase
robustness).&lt;/p&gt;
&lt;h2&gt;UKI Components&lt;/h2&gt;
&lt;p&gt;Specifically, UKIs typically consist of the following resources:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;An UEFI boot stub that is a small piece of code still running in
   UEFI mode and that transitions into the Linux kernel included in
   the UKI (e.g., as implemented in
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-stub.html"&gt;&lt;code&gt;sd-stub&lt;/code&gt;&lt;/a&gt;,
   see below)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Linux kernel to boot in the &lt;code&gt;.linux&lt;/code&gt; PE section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The initrd that the kernel shall unpack and invoke in the
   &lt;code&gt;.initrd&lt;/code&gt; PE section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A kernel command line string, in the &lt;code&gt;.cmdline&lt;/code&gt; PE
   section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally, information describing the OS this kernel is intended
   for, in the &lt;code&gt;.osrel&lt;/code&gt; PE section (derived from
   &lt;code&gt;/etc/os-release&lt;/code&gt; of the booted OS). This is useful for
   presentation of the UKI in the boot loader menu, and ordering it
   against other entries, using the included version information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally, information describing kernel release information
   (i.e. &lt;code&gt;uname -r&lt;/code&gt; output) in the &lt;code&gt;.uname&lt;/code&gt; PE
   section. This is also useful for presentation of the UKI in the
   boot loader menu, and ordering it against other entries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally, a boot splash to bring to screen before transitioning
   into the Linux kernel in the &lt;code&gt;.splash&lt;/code&gt; PE section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally, a compiled Devicetree database file, for systems which
   need it, in the &lt;code&gt;.dtb&lt;/code&gt; PE section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally, the public key in PEM format that matches the
   signatures of the &lt;code&gt;.pcrsig&lt;/code&gt; PE section (see below), in a
   &lt;code&gt;.pcrpkey&lt;/code&gt; PE section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally, a JSON file encoding expected PCR 11 hash values seen
    from userspace once the UKI has booted up, along with signatures
    of these expected PCR 11 hash values, matching a specific public
    key in the &lt;code&gt;.pcrsig&lt;/code&gt; PE section. (Note: we use plural
    for ‚Äúvalues‚Äù and ‚Äúsignatures‚Äù here, as this JSON file will
    typically carry a separate value and signature for each PCR bank
    for PCR 11, i.e. one pair of value and signature for the SHA1
    bank, and another pair for the SHA256 bank, and so on. This
    ensures when enrolling or unlocking a TPM-bound secret we‚Äôll
    always have a signature around matching the banks available
    locally (after all, which banks the local hardware supports is up
    to the hardware). For the sake of simplifying this already overly
    complex topic, we‚Äôll pretend in the rest of the text there was
    only one PCR signature per UKI we have to care about, even if this
    is not actually the case.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given UKIs are regular UEFI PE files, they can thus be signed as one
for SecureBoot, protecting all of the individual resources listed
above at once, and their combination. Standard Linux tools such as
&lt;code&gt;sbsigntool&lt;/code&gt; and &lt;code&gt;pesign&lt;/code&gt; can be used to sign
UKI files.&lt;/p&gt;
&lt;p&gt;UKIs wrap all of the above data in a single file, hence all of the
above components can be updated in one go through single file atomic
updates, which is useful given that the primary expected storage place
for these UKIs is the UEFI System Partition (ESP), which is a vFAT
file system, with its limited data safety guarantees.&lt;/p&gt;
&lt;p&gt;UKIs can be generated via a single, relatively simple objcopy
invocation, that glues the listed components together, generating one
PE binary that then can be signed for SecureBoot. (For details on
building these, see below.)&lt;/p&gt;
&lt;p&gt;Note that the primary location to place UKIs in is the EFI System
Partition (or an otherwise firmware accessible file system). This
typically means a VFAT file system of some form. Hence an effective
UKI size limit of 4GiB is in place, as that‚Äôs the largest file size a
FAT32 file system supports.&lt;/p&gt;
&lt;h2&gt;Basic UEFI Stub Execution Flow&lt;/h2&gt;
&lt;p&gt;The mentioned UEFI stub program will execute the following operations
in UEFI mode before transitioning into the Linux kernel that is
included in its &lt;code&gt;.linux&lt;/code&gt; PE section:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The PE sections listed are searched for in the invoked UKI the stub
   is part of, and superficially validated (i.e. general file format is
   in order).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All PE sections listed above of the invoked UKI are measured into
   TPM PCR 11. This TPM PCR is expected to be all zeroes before the UKI
   initializes. Pre-calculation is thus very straight-forward if the
   resources included in the PE image are known. (Note: as a single
   exception the &lt;code&gt;.pcrsig&lt;/code&gt; PE section is excluded from this measurement,
   as it is supposed to carry the expected result of the measurement, and
   thus cannot also be input to it, see below for further details about
   this section.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the &lt;code&gt;.splash&lt;/code&gt; PE section is included in the UKI it is brought onto the screen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the &lt;code&gt;.dtb&lt;/code&gt; PE section is included in the UKI it is activated
   using the Devicetree UEFI ‚Äúfix-up‚Äù protocol&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a command line was passed from the boot loader to the UKI
   executable it is discarded if SecureBoot is enabled and the command
   line from the &lt;code&gt;.cmdline&lt;/code&gt; used. If SecureBoot is disabled and a
   command line was passed it is used in place of the one from
   &lt;code&gt;.cmdline&lt;/code&gt;. Either way the used command line is measured into TPM
   PCR 12. (This of course removes any flexibility of control of the
   kernel command line of the local user. In many scenarios this is
   probably considered beneficial, but in others it is not, and some
   flexibility might be desired. Thus, this concept probably needs to
   be extended sooner or later, to allow more flexible kernel command
   line policies to be enforced via definitions embedded into the
   UKI. For example: allowing definition of multiple kernel command
   lines the user/boot menu can select one from; allowing additional
   allowlisted parameters to be specified; or even optionally allowing
   any verification of the kernel command line to be turned off even
   in SecureBoot mode. It would then be up to the builder of the UKI
   to decide on the policy of the kernel command line.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It will set a couple of volatile EFI variables to inform userspace
   about executed TPM PCR measurements (and which PCR registers were
   used), and other execution properties. (For example: the EFI
   variable &lt;code&gt;StubPcrKernelImage&lt;/code&gt; in the
   &lt;code&gt;4a67b082-0a4c-41cf-b6c7-440b29bb8c4f&lt;/code&gt; vendor namespace indicates
   the PCR register used for the UKI measurement, i.e. the value
   ‚Äú11‚Äù).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An initrd cpio archive is dynamically synthesized from the
   &lt;code&gt;.pcrsig&lt;/code&gt; and &lt;code&gt;.pcrpkey&lt;/code&gt; PE section data (this is later passed to
   the invoked Linux kernel as additional initrd, to be overlaid with
   the main initrd from the .initrd section). These files are later
   available in the &lt;code&gt;/.extra/&lt;/code&gt; directory in the initrd context.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Linux kernel from the &lt;code&gt;.linux&lt;/code&gt; PE section is invoked with with
   a combined initrd that is composed from the blob from the &lt;code&gt;.initrd&lt;/code&gt;
   PE section, the dynamically generated initrd containing the
   &lt;code&gt;.pcrsig&lt;/code&gt; and &lt;code&gt;.pcrpkey&lt;/code&gt; PE sections, and possibly some additional
   components like sysexts or syscfgs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;TPM PCR Assignments&lt;/h2&gt;
&lt;p&gt;In the construction above we take possession of two PCR registers
previously unused on generic Linux distributions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TPM &lt;strong&gt;PCR 11&lt;/strong&gt; shall contain measurements of all components of the
  UKI (with exception of the &lt;code&gt;.pcrsig&lt;/code&gt; PE section, see above). This
  PCR will also contain measurements of the boot phase once userspace
  takes over (see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TPM &lt;strong&gt;PCR 12&lt;/strong&gt; shall contain measurements of the used kernel command
  line. (Plus potentially other forms of
  parameterization/configuration passed into the UKI, not discussed in
  this document)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On top of that we intend to define two more PCR registers like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TPM &lt;strong&gt;PCR 15&lt;/strong&gt; shall contain measurements of the volume encryption
  key of the root file system of the OS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[TPM &lt;strong&gt;PCR 13&lt;/strong&gt; shall contain measurements of additional extension
  images for the initrd, to enable a modularized initrd ‚Äì not covered
  by this document]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(See the &lt;a href="https://uapi-group.org/specifications/specs/linux_tpm_pcr_registry/"&gt;Linux TPM PCR
Registry&lt;/a&gt;
for an overview how these four PCRs fit into the list of Linux PCR
assignments.)&lt;/p&gt;
&lt;p&gt;For all four PCRs the assumption is that they are zero before the UKI
initializes, and only the data that the UKI and the OS measure into
them is included. This makes pre-calculating them straightforward:
given a specific set of UKI components, it is immediately clear what
PCR values can be expected in PCR 11 once the UKI booted up. Given a
kernel command line (and other parameterization/configuration) it is
clear what PCR values are expected in PCR 12.&lt;/p&gt;
&lt;p&gt;Note that these four PCRs are defined by the conceptual ‚Äúowner‚Äù of the
resources measured into them. PCR 11 only contains resources the &lt;strong&gt;OS
vendor&lt;/strong&gt; controls. Thus it is straight-forward for the OS vendor to
pre-calculate and then cryptographically sign the expected values for
PCR 11. The PCR 11 values will be identical on all systems that run
the same version of the UKI. PCR 12 only contains resources the
&lt;strong&gt;administrator&lt;/strong&gt; controls, thus the administrator can pre-calculate
PCR values, and they will be correct on all instances of the OS that
use the same parameters/configuration. PCR 15 only contains resources
inherently local to the &lt;strong&gt;local system&lt;/strong&gt;, i.e. the cryptographic key
material that encrypts the root file system of the OS.&lt;/p&gt;
&lt;p&gt;Separating out these three roles does not imply these actually need to
be separate when used. However the assumption is that in many popular
environments these three roles should be separate.&lt;/p&gt;
&lt;p&gt;By separating out these PCRs by the owner‚Äôs role, it becomes
straightforward to remotely attest, individually, on the software that
runs on a node (PCR 11), the configuration it uses (PCR 12) or the
identity of the system (PCR 15). Moreover, it becomes straightforward
to robustly and securely encrypt data so that it can only be unlocked
on a specific set of systems that share the same OS, or the same
configuration, or have a specific identity ‚Äì or a combination thereof.&lt;/p&gt;
&lt;p&gt;Note that the mentioned PCRs are so far not typically used on generic
Linux-based operating systems, to our knowledge. Windows uses them,
but given that Windows and Linux should typically not be included in
the same boot process this should be unproblematic, as Windows‚Äô use of
these PCRs should thus not conflict with ours.&lt;/p&gt;
&lt;p&gt;To summarize:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
   &lt;th&gt;PCR&lt;/th&gt;
   &lt;th&gt;Purpose&lt;/th&gt;
   &lt;th&gt;Owner&lt;/th&gt;
   &lt;th&gt;Expected Value before UKI boot&lt;/th&gt;
   &lt;th&gt;Pre-Calculable&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;11&lt;/strong&gt;&lt;/td&gt;
   &lt;td&gt;Measurement of &lt;strong&gt;UKI components&lt;/strong&gt; and &lt;strong&gt;boot phases&lt;/strong&gt;&lt;/td&gt;
   &lt;td&gt;OS Vendor&lt;/td&gt;
   &lt;td&gt;Zero&lt;/td&gt;
   &lt;td&gt;Yes&lt;br/&gt;(at UKI build time)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;12&lt;/strong&gt;&lt;/td&gt;
   &lt;td&gt;Measurement of &lt;strong&gt;kernel command line,&lt;/strong&gt; additional &lt;strong&gt;kernel runtime configuration&lt;/strong&gt; such as systemd credentials, systemd syscfg images&lt;/td&gt;
   &lt;td&gt;Administrator&lt;/td&gt;
   &lt;td&gt;Zero&lt;/td&gt;
   &lt;td&gt;Yes&lt;br/&gt;(when system configuration is assembled)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;13&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;System Extension Images&lt;/strong&gt; of initrd&lt;br/&gt;(and possibly more)&lt;/td&gt;
   &lt;td&gt;(Administrator)&lt;/td&gt;
   &lt;td&gt;Zero&lt;/td&gt;
   &lt;td&gt;Yes&lt;br/(when set of extensions is assembled)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;15&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;Measurement of&lt;strong&gt; root file system volume key&lt;/strong&gt;&lt;br/&gt;(Possibly later more: measurement of root file system UUIDs and labels and of the machine ID &lt;code&gt;/etc/machine-id&lt;/code&gt;)&lt;/td&gt;
   &lt;td&gt;Local System&lt;/td&gt;
   &lt;td&gt;Zero&lt;/td&gt;
   &lt;td&gt;Yes&lt;br/&gt;(after first boot once ll such IDs are determined)&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2&gt;Signature Keys&lt;/h2&gt;
&lt;p&gt;In the model above in particular two sets of private/public key pairs
are relevant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The SecureBoot key to sign the UKI PE executable with. This controls
  permissible choices of OS/kernel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The key to sign the expected PCR 11 values with. Signatures made
  with this key will end up in the &lt;code&gt;.pcrsig&lt;/code&gt; PE section. The public
  key part will end up in the &lt;code&gt;.pcrpkey&lt;/code&gt; PE section.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typically the key pair for the PCR 11 signatures should be chosen with
a narrow focus, reused for exactly one specific OS (e.g. ‚ÄúFedora
Desktop Edition‚Äù) and the series of UKIs that belong to it (all the
way through all the versions of the OS). The SecureBoot signature key
can be used with a broader focus, if desired. By keeping the PCR 11
signature key narrow in focus one can ensure that secrets bound to the
signature key can only be unlocked on the narrow set of UKIs desired.&lt;/p&gt;
&lt;h2&gt;TPM Policy Use&lt;/h2&gt;
&lt;p&gt;Depending on the intended access policy to a resource protected by the
TPM, one or more of the PCRs described above should be selected to
bind TPM policy to.&lt;/p&gt;
&lt;p&gt;For example, the root file system encryption key should likely be
bound to TPM PCR 11, so that it can only be unlocked if a specific set
of UKIs is booted (it should then, once acquired, be measured into PCR
15, as discussed above, so that later TPM objects can be bound to it,
further down the chain). With the model described above this is
reasonably straight-forward to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When userspace wants to bind disk encryption to a specific series of
  UKIs (‚Äú&lt;strong&gt;enrollment&lt;/strong&gt;‚Äù), it looks for the public key passed to the
  &lt;code&gt;initrd&lt;/code&gt; in the &lt;code&gt;/.extra/&lt;/code&gt; directory (which as discussed above
  originates in the &lt;code&gt;.pcrpkey&lt;/code&gt; PE section of the UKI). The relevant
  userspace component (e.g. &lt;code&gt;systemd&lt;/code&gt;) is then responsible for
  generating a random key to be used as symmetric encryption key for
  the storage volume (let‚Äôs call it &lt;em&gt;disk encryption key _here&lt;/em&gt;,
  DEK_). The TPM is then used to encrypt (‚Äúseal‚Äù) the DEK with its
  internal Storage Root Key (TPM SRK). A TPM2 policy is bound to the
  encrypted DEK. The policy enforces that the DEK may only be
  decrypted if a valid signature is provided that matches the state of
  PCR 11 and the public key provided in the &lt;code&gt;/.extra/&lt;/code&gt; directory of
  the &lt;code&gt;initrd&lt;/code&gt;. The plaintext DEK key is passed to the kernel to
  implement disk encryption (e.g. LUKS/dm-crypt). (Alternatively,
  hardware disk encryption can be used too, i.e. Intel MKTME, AMD SME
  or even OPAL, all of which are outside of the scope of this
  document.) The TPM-encrypted version of the DEK which the TPM
  returned is written to the encrypted volume‚Äôs superblock.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When userspace wants to &lt;strong&gt;unlock&lt;/strong&gt; disk encryption on a specific
  UKI, it looks for the signature data passed to the initrd in the
  &lt;code&gt;/.extra/&lt;/code&gt; directory (which as discussed above originates in the
  &lt;code&gt;.pcrsig&lt;/code&gt; PE section of the UKI). It then reads the encrypted
  version of the DEK from the superblock of the encrypted volume. The
  signature and the encrypted DEK are then passed to the TPM. The TPM
  then checks if the current PCR 11 state matches the supplied
  signature from the &lt;code&gt;.pcrsig&lt;/code&gt; section and the public key used during
  enrollment. If all checks out it decrypts (‚Äúunseals‚Äù) the DEK and
  passes it back to the OS, where it is then passed to the kernel
  which implements the symmetric part of disk encryption.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that in this scheme the encrypted volume‚Äôs DEK is &lt;strong&gt;not&lt;/strong&gt; bound
to specific literal PCR hash values, but to a public key which is
expected to sign PCR hash values.&lt;/p&gt;
&lt;p&gt;Also note that the state of PCR 11 only matters during unlocking. It
is not used or checked when enrolling.&lt;/p&gt;
&lt;p&gt;In this scenario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Input to the TPM part of the &lt;strong&gt;enrollment&lt;/strong&gt; process are the TPM‚Äôs
  internal SRK, the plaintext DEK provided by the OS, and the public
  key later used for signing expected PCR values, also provided by the
  OS. ‚Äì Output is the encrypted (‚Äúsealed‚Äù) DEK.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input to the TPM part of the &lt;strong&gt;unlocking&lt;/strong&gt; process are the TPM‚Äôs
  internal SRK, the current TPM PCR 11 values, the public key used
  during enrollment, a signature that matches both these PCR values
  and the public key, and the encrypted DEK. ‚Äì Output is the plaintext
  (‚Äúunsealed‚Äù) DEK.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that sealing/unsealing is done entirely on the TPM chip, the host
OS just provides the inputs (well, only the inputs that the TPM chip
doesn‚Äôt know already on its own), and receives the outputs. With the
exception of the plaintext DEK, none of the inputs/outputs are
sensitive, and can safely be stored in the open. On the wire the
plaintext DEK is protected via TPM parameter encryption (not discussed
in detail here because though important not in scope for this
document).&lt;/p&gt;
&lt;p&gt;TPM PCR 11 is the most important of the mentioned PCRs, and its use is
thus explained in detail here. The other mentioned PCRs can be used in
similar ways, but signatures/public keys must be provided via other
means.&lt;/p&gt;
&lt;p&gt;This scheme builds on the functionality Linux‚Äô LUKS2 functionality
provides, i.e. key management supporting multiple slots, and the
ability to embed arbitrary metadata in the encrypted volume‚Äôs
superblock. Note that this means the TPM2-based logic explained here
doesn‚Äôt have to be the only way to unlock an encrypted volume. For
example, in many setups it is wise to enroll both this TPM-based
mechanism and an additional ‚Äú&lt;em&gt;recovery key&lt;/em&gt;‚Äù (i.e. a high-entropy
computer generated passphrase the user can provide manually in case
they lose access to the TPM and need to access their data), of which
either can be used to unlock the volume.&lt;/p&gt;
&lt;h2&gt;Boot Phases&lt;/h2&gt;
&lt;p&gt;Secrets needed during boot-up (such as the root file system encryption
key) should typically not be accessible anymore afterwards, to protect
them from access if a system is attacked during runtime. To implement
this the scheme above is extended in one way: at certain milestones of
the boot process additional fixed ‚Äúwords‚Äù should be measured into PCR
11. These milestones are placed at conceptual security boundaries,
i.e. whenever code transitions from a higher privileged context to a
less privileged context.&lt;/p&gt;
&lt;p&gt;Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When the initrd initializes (‚Äú&lt;code&gt;initrd-enter&lt;/code&gt;‚Äù)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the initrd transitions into the root file system (‚Äú&lt;code&gt;initrd-leave&lt;/code&gt;‚Äù)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the early boot phase of the OS on the root file system has
  completed, i.e. all storage and file systems have been set up and
  mounted, immediately before regular services are started
  (‚Äú&lt;code&gt;sysinit&lt;/code&gt;‚Äù)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the OS on the root file system completed the boot process far
  enough to allow unprivileged users to log in (‚Äú&lt;code&gt;complete&lt;/code&gt;‚Äù)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the OS begins shut down (‚Äú&lt;code&gt;shutdown&lt;/code&gt;‚Äù)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the service manager is mostly finished with shutting down and
  is about to pass control to the final phase of the shutdown logic
  (‚Äú&lt;code&gt;final&lt;/code&gt;‚Äù)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By measuring these additional words into PCR 11 the distinct phases of
the boot process can be distinguished in a relatively straight-forward
fashion and the expected PCR values in each phase can be determined.&lt;/p&gt;
&lt;p&gt;The phases are measured into PCR 11 (as opposed to some other PCR)
mostly because available PCRs are scarce, and the boot phases defined
are typically specific to a chosen OS, and hence fit well with the
other data measured into PCR 11: the UKI which is also specific to the
OS. The OS vendor generates both the UKI and defines the boot phases,
and thus can safely and reliably pre-calculate/sign the expected PCR
values for each phase of the boot.&lt;/p&gt;
&lt;h2&gt;Revocation/Rollback Protection&lt;/h2&gt;
&lt;p&gt;In order to secure secrets stored at rest, in particular in
environments where unattended decryption shall be possible, it is
essential that an attacker cannot use old, known-buggy ‚Äì but properly
signed ‚Äì versions of software to access them.&lt;/p&gt;
&lt;p&gt;Specifically, if disk encryption is bound to an OS vendor (via UKIs
that include expected PCR values, signed by the vendor‚Äôs public key)
there must be a mechanism to lock out old versions of the OS or UKI
from accessing TPM based secrets once it is determined that the old
version is vulnerable.&lt;/p&gt;
&lt;p&gt;To implement this we propose making use of one of the ‚Äúcounters‚Äù TPM
2.0 devices provide: integer registers that are persistent in the TPM
and can only be increased on request of the OS, but never be
decreased. When sealing resources to the TPM, a policy may be declared
to the TPM that restricts how the resources can later be unlocked:
here we use one that requires that along with the expected PCR values
(as discussed above) a counter integer range is provided to the TPM
chip, along with a suitable signature covering both, matching the
public key provided during sealing. The sealing/unsealing mechanism
described above is thus extended: the signature passed to the TPM
during unsealing now covers both the expected PCR values and the
expected counter range. To be able to use a signature associated with
an UKI provided by the vendor to unseal a resource, the counter thus
must be at least increased to the lower end of the range the signature
is for. By doing so the ability is lost to unseal the resource for
signatures associated with older versions of the UKI, because their
upper end of the range disables access once the counter has been
increased far enough. By carefully choosing the upper and lower end of
the counter range whenever the PCR values for an UKI shall be signed
it is thus possible to ensure that updates can invalidate prior
versions‚Äô access to resources. By placing some space between the upper
and lower end of the range it is possible to allow a controlled level
of fallback UKI support, with clearly defined milestones where
fallback to older versions of an UKI is not permitted anymore.&lt;/p&gt;
&lt;p&gt;Example: a hypothetical distribution FooOS releases a regular stream
of UKI kernels 5.1, 5.2, 5.3, ‚Ä¶ It signs the expected PCR values for
these kernels with a key pair it maintains in a HSM. When signing UKI
5.1 it includes information directed at the TPM in the signed data
declaring that the TPM counter must be above 100, and below 120, in
order for the signature to be used. Thus, when the UKI is booted up
and used for unlocking an encrypted volume the unlocking code must
first increase the counter to 100 if needed, as the TPM will otherwise
refuse unlocking the volume. The next release of the UKI, i.e. UKI 5.2
is a feature release, i.e. reverting back to the old kernel locally is
acceptable. It thus does not increase the lower bound, but it
increases the upper bound for the counter in the signature payload,
thus encoding a valid range 100‚Ä¶121 in the signed payload. Now a major
security vulnerability is discovered in UKI 5.1. A new UKI 5.3 is
prepared that fixes this issue. It is now essential that UKI 5.1 can
no longer be used to unlock the TPM secrets. Thus UKI 5.3 will bump
the lower bound to 121, and increase the upper bound by one, thus
allowing a range 121‚Ä¶122. Or in other words: for each new UKI release
the signed data shall include a counter range declaration where the
upper bound is increased by one. The lower range is left as-is between
releases, except when an old version shall be cut off, in which case
it is bumped to one above the upper bound used in that release.&lt;/p&gt;
&lt;h2&gt;UKI Generation&lt;/h2&gt;
&lt;p&gt;As mentioned earlier, UKIs are the combination of various resources
into one PE file. For most of these individual components there are
pre-existing tools to generate the components. For example the
included kernel image can be generated with the usual Linux kernel
build system. The initrd included in the UKI can be generated with
existing tools such as &lt;code&gt;dracut&lt;/code&gt; and similar. Once the basic components
(&lt;code&gt;.linux&lt;/code&gt;, &lt;code&gt;.initrd&lt;/code&gt;, &lt;code&gt;.cmdline&lt;/code&gt;, &lt;code&gt;.splash&lt;/code&gt;, &lt;code&gt;.dtb&lt;/code&gt;, &lt;code&gt;.osrel&lt;/code&gt;,
&lt;code&gt;.uname&lt;/code&gt;) have been acquired the combination process works roughly
like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The expected PCR 11 hashes (and signatures for them) for the UKI
   are calculated. The tool for that takes all basic UKI components
   and a signing key as input, and generates a JSON object as output
   that includes both the literal expected PCR hash values and a
   signature for them. (For all selected TPM2 banks)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The EFI stub binary is now combined with the basic components, the
   generated JSON PCR signature object from the first step (in the
   &lt;code&gt;.pcrsig&lt;/code&gt; section) and the public key for it (in the &lt;code&gt;.pcrpkey&lt;/code&gt;
   section). This is done via a simple ‚Äú&lt;code&gt;objcopy&lt;/code&gt;‚Äù invocation
   resulting in a single UKI PE binary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The resulting EFI PE binary is then signed for SecureBoot (via a
   tool such as
   &lt;a href="https://git.kernel.org/pub/scm/linux/kernel/git/jejb/sbsigntools.git/"&gt;&lt;code&gt;sbsign&lt;/code&gt;&lt;/a&gt;
   or similar).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that the UKI model implies pre-built initrds. How to generate
these (and securely extend and parameterize them) is outside of the
scope of this document, but a related document will be provided
highlighting these concepts.&lt;/p&gt;
&lt;h2&gt;Protection Coverage of SecureBoot Signing and PCRs&lt;/h2&gt;
&lt;p&gt;The scheme discussed here touches both SecureBoot code signing and TPM
PCR measurements. These two distinct mechanisms cover separate parts
of the boot process.&lt;/p&gt;
&lt;p&gt;Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Firmware/Shim SecureBoot signing covers bootloader and UKI&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TPM PCR 11 covers the UKI components and boot phase&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TPM PCR 12 covers admin configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TPM PCR 15 covers the local identity of the host&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that this means SecureBoot coverage ends once the system
transitions from the initrd into the root file system. It is assumed
that trust and integrity have been established before this transition
by some means, for example LUKS/dm-crypt/dm-integrity, ideally bound
to PCR 11 (i.e. UKI and boot phase).&lt;/p&gt;
&lt;p&gt;A robust and secure update scheme for PCR 11 (i.e. UKI) has been
described above, which allows binding TPM-locked resources to a
UKI. For PCR 12 no such scheme is currently designed, but might be
added later (use case: permit access to certain secrets only if the
system runs with configuration signed by a specific set of
keys). Given that resources measured into PCR 15 typically aren‚Äôt
updated (or if they are updated loss of access to other resources
linked to them is desired) no update scheme should be necessary for
it.&lt;/p&gt;
&lt;p&gt;This document focuses on the three PCRs discussed above. Disk
encryption and other userspace may choose to also bind to other
PCRs. However, doing so means the PCR brittleness issue returns that
this design is supposed to remove. PCRs defined by the various
firmware UEFI/TPM specifications generally do not know any concept for
signatures of expected PCR values.&lt;/p&gt;
&lt;p&gt;It is known that the industry-adopted SecureBoot signing keys are too
broad to act as more than a denylist for known bad code. It is thus
probably a good idea to enroll vendor SecureBoot keys wherever
possible (e.g. in environments where the hardware is very well known,
and VM environments), to raise the bar on preparing rogue UKI-like PE
binaries that will result in PCR values that match expectations but
actually contain bad code. Discussion about that is however outside of
the scope of this document.&lt;/p&gt;
&lt;h2&gt;Whole OS embedded in the UKI&lt;/h2&gt;
&lt;p&gt;The above is written under the assumption that the UKI embeds an
initrd whose job it is to set up the root file system: find it,
validate it, cryptographically unlock it and similar. Once the root
file system is found, the system transitions into it.&lt;/p&gt;
&lt;p&gt;While this is the traditional design and likely what most systems will
use, it is also possible to embed a regular root file system into the
UKI and avoid any transition to an on-disk root file system. In this
mode the whole OS would be encapsulated in the UKI, and
signed/measured as one. In such a scenario the whole of the OS must be
loaded into RAM and remain there, which typically restricts the
general usability of such an approach. However, for specific purposes
this might be the design of choice, for example to implement
self-sufficient recovery or provisioning systems.&lt;/p&gt;
&lt;h1&gt;Proposed Implementations &amp;amp; Current Status&lt;/h1&gt;
&lt;p&gt;The toolset for most of the above is already implemented in systemd and related projects in one way or another. Specifically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-stub.html"&gt;&lt;code&gt;systemd-stub&lt;/code&gt;&lt;/a&gt;
   (or short: &lt;code&gt;sd-stub&lt;/code&gt;) component implements the discussed UEFI stub
   program&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-measure.html"&gt;&lt;code&gt;systemd-measure&lt;/code&gt;&lt;/a&gt;
   tool can be used to pre-calculate expected PCR 11 values given the
   UKI components and can sign the result, as discussed in the UKI
   Image Generation section above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html"&gt;&lt;code&gt;systemd-cryptenroll&lt;/code&gt;&lt;/a&gt;
   and
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-cryptsetup@.service.html"&gt;&lt;code&gt;systemd-cryptsetup&lt;/code&gt;&lt;/a&gt;
   tools can be used to bind a LUKS2 encrypted file system volume to a
   TPM and PCR 11 public key/signatures, according to the scheme
   described above. (The two components also implement a ‚Äú&lt;em&gt;recovery
   key&lt;/em&gt;‚Äù concept, as discussed above)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-pcrphase.service.html"&gt;&lt;code&gt;systemd-pcrphase&lt;/code&gt;&lt;/a&gt;
   component measures specific words into PCR 11 at the discussed
   phases of the boot process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-creds.html"&gt;&lt;code&gt;systemd-creds&lt;/code&gt;&lt;/a&gt;
   tool may be used to encrypt/decrypt data objects called
   ‚Äúcredentials‚Äù that can be passed into services and booted systems,
   and are automatically decrypted (if needed) immediately before
   service invocation. Encryption is typically bound to the local TPM,
   to ensure the data cannot be recovered elsewhere.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-stub.html"&gt;&lt;code&gt;systemd-stub&lt;/code&gt;&lt;/a&gt;
(i.e. the UEFI code glued into the UKI) is distinct from
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-boot.html"&gt;&lt;code&gt;systemd-boot&lt;/code&gt;&lt;/a&gt;
(i.e. the UEFI boot loader than can manage multiple UKIs and other
boot menu items and implements automatic fallback, an interactive menu
and a programmatic interface for the OS among other things). One can
be used without the other ‚Äì both &lt;code&gt;sd-stub&lt;/code&gt; without &lt;code&gt;sd-boot&lt;/code&gt; and vice
versa ‚Äì though they integrate nicely if used in combination.&lt;/p&gt;
&lt;p&gt;Note that the mechanisms described are relatively generic, and can be
implemented and be consumed in other software too, systemd should be
considered a reference implementation, though one that found
comprehensive adoption across Linux distributions.&lt;/p&gt;
&lt;p&gt;Some concepts discussed above are currently not
implemented. Specifically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The rollback protection logic is currently not implemented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The mentioned measurement of the root file system volume key to PCR
   15 is implemented, but not merged into the systemd main branch yet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;The UAPI Group&lt;/h1&gt;
&lt;p&gt;We recently started a new group for discussing concepts and
specifications of basic OS components, including UKIs as described
above. It's called &lt;a href="https://uapi-group.org/"&gt;the UAPI Group&lt;/a&gt;. Please
have a look at the various documents and specifications already
available there, and expect more to come. Contributions welcome!&lt;/p&gt;
&lt;h2&gt;Glossary&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TPM&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Trusted Platform Module&lt;/em&gt;; a security chip found in many modern
systems, both physical systems and increasingly also in virtualized
environments. Traditionally a discrete chip on the mainboard but today
often implemented in firmware, and lately directly in the CPU SoC.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PCR&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Platform Configuration Register&lt;/em&gt;; a set of registers on a TPM that
are initialized to zero at boot. The firmware and OS can ‚Äú&lt;em&gt;extend&lt;/em&gt;‚Äù
these registers with hashes of data used during the boot process and
afterwards. ‚ÄúExtension‚Äù means the supplied data is first
cryptographically hashed. The resulting hash value is then combined
with the previous value of the PCR and the combination hashed
again. The result will become the new value of the PCR. By doing this
iteratively for all parts of the boot process (always with the data
that will be used next during the boot process) a concept of
‚Äú&lt;em&gt;Measured Boot&lt;/em&gt;‚Äù can be implemented: as long as every element in the
boot chain measures (i.e. extends into the PCR) the next part of the
boot like this, the resulting PCR values will prove cryptographically
that only a certain set of boot components can have been used to boot
up. A standards compliant TPM usually has 24 PCRs, but more than half
of those are already assigned specific meanings by the firmware. Some
of the others may be used by the OS, of which we use four in the
concepts discussed in this document.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Measurement&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The act of ‚Äú&lt;em&gt;extending&lt;/em&gt;‚Äù a PCR with some data object.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SRK&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Storage Root Key&lt;/em&gt;; a special cryptographic key generated by a TPM
that never leaves the TPM, and can be used to encrypt/decrypt data
passed to the TPM.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UKI&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Unified Kernel Image&lt;/em&gt;; the concept this document is about. A
combination of kernel, &lt;code&gt;initrd&lt;/code&gt; and other resources. See above.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SecureBoot&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A mechanism where every software component involved in the boot
process is cryptographically signed and checked against a set of
public keys stored in the mainboard hardware, implemented in firmware,
before it is used.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Measured Boot&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A boot process where each component measures (i.e., hashes and extends
into a TPM PCR, see above) the next component it will pass control to
before doing so. This serves two purposes: it can be used to bind
security policy for encrypted secrets to the resulting PCR values (or
signatures thereof, see above), and it can be used to reason about
used software after the fact, for example for the purpose of remote
attestation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;initrd&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Short for ‚Äú&lt;em&gt;initial RAM disk&lt;/em&gt;‚Äù, which ‚Äì strictly speaking ‚Äì is a
misnomer today, because no RAM disk is anymore involved, but a &lt;code&gt;tmpfs&lt;/code&gt;
file system instance. Also known as ‚Äú&lt;code&gt;initramfs&lt;/code&gt;‚Äù, which is also
misleading, given the file system is not &lt;code&gt;ramfs&lt;/code&gt; anymore, but &lt;code&gt;tmpfs&lt;/code&gt;
(both of which are in-memory file systems on Linux, with different
semantics). The &lt;code&gt;initrd&lt;/code&gt; is passed to the Linux kernel and is
basically a file system tree in &lt;code&gt;cpio&lt;/code&gt; archive. The kernel unpacks the
image into a &lt;code&gt;tmpfs&lt;/code&gt; (i.e., into an in-memory file system), and then
executes a binary from it. It thus contains the binaries for the first
userspace code the kernel invokes. Typically, the &lt;code&gt;initrd&lt;/code&gt;‚Äôs job is to
find the actual root file system, unlock it (if encrypted), and
transition into it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UEFI&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Short for ‚Äú&lt;em&gt;Unified Extensible Firmware Interface&lt;/em&gt;‚Äù, it is a widely
adopted standard for PC firmware, with native support for &lt;em&gt;SecureBoot&lt;/em&gt;
and Measured Boot.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;EFI&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More or less synonymous to UEFI, IRL.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Shim&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A boot component originating in the Linux world, which in a way
extends the public key database SecureBoot maintains (which is under
control from Microsoft) with a second layer (which is under control of
the Linux distributions and of the owner of the physical device).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;PE&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Portable Executable&lt;/em&gt;; a file format for executable binaries,
originally from the Windows world, but also used by UEFI firmware. PE
files may contain code and data, categorized in labeled ‚Äúsections‚Äù&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ESP&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;EFI System Partition&lt;/em&gt;; a special partition on a storage
medium that the firmware is able to look for UEFI PE binaries
in to execute at boot.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HSM&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Hardware Security Module&lt;/em&gt;; a piece of hardware that can generate and
store secret cryptographic keys, and execute operations with them,
without the keys leaving the hardware (though this is
configurable). TPMs can act as HSMs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DEK&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Disk Encryption Key&lt;/em&gt;; an asymmetric cryptographic key used for
unlocking disk encryption, i.e. passed to LUKS/dm-crypt for activating
an encrypted storage volume.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;LUKS2&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Linux Unified Key Setup Version 2&lt;/em&gt;; a specification for a superblock
for encrypted volumes widely used on Linux. LUKS2 is the default
on-disk format for the &lt;code&gt;cryptsetup&lt;/code&gt; suite of tools. It provides
flexible key management with multiple independent key slots and allows
embedding arbitrary metadata in a JSON format in the superblock.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;I‚Äôd like to thank Alain Gefflaut, Anna Trikalinou, Christian Brauner,
Daan de Meyer, Luca Boccassi, Zbigniew Jƒôdrzejewski-Szmek for
reviewing this text.&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 24 Oct 2022 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2022-10-24:/blog/brave-new-trusted-boot-world.html</guid><category>projects</category></item><item><title>Fitting Everything Together</title><link>https://0pointer.net/blog/fitting-everything-together.html</link><description>&lt;p&gt;&lt;em&gt;TLDR: Hermetic &lt;code&gt;/usr/&lt;/code&gt; is awesome; let's popularize image-based OSes
with modernized security properties built around immutability,
SecureBoot, TPM2, adaptability, auto-updating, factory reset,
uniformity ‚Äì built from traditional distribution packages, but
deployed via images.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Over the past years, systemd gained a number of components for
building Linux-based operating systems. While these components
individually have been adopted by many distributions and products for
specific purposes, we did not publicly communicate a broader vision
of how they should all fit together in the long run. In this blog story I
hope to provide that from my personal perspective, i.e. explain how I
&lt;em&gt;personally&lt;/em&gt; would build an OS and where I &lt;em&gt;personally&lt;/em&gt; think OS
development with Linux should go.&lt;/p&gt;
&lt;p&gt;I figure this is going to be a longer blog story, but I hope it
will be equally enlightening. Please understand though that everything
I write about OS design here is my personal opinion, and not one of my
employer.&lt;/p&gt;
&lt;p&gt;For the last 12 years or so I have been working on Linux OS
development, mostly around &lt;code&gt;systemd&lt;/code&gt;. In all those years I had a lot
of time thinking about the Linux platform, and specifically
traditional Linux distributions and their strengths and weaknesses. I
have seen many attempts to reinvent Linux distributions in one way or
another, to varying success. After all this most would probably
agree that the traditional RPM or dpkg/apt-based distributions still
define the Linux platform more than others (for 25+ years now), even
though some Linux-based OSes (Android, ChromeOS) probably outnumber
the installations overall.&lt;/p&gt;
&lt;p&gt;And over all those 12 years I kept wondering, how would &lt;em&gt;I&lt;/em&gt; actually
build an OS for a system or for an appliance, and what are the
components necessary to achieve that. And most importantly, how can we
make these components generic enough so that they are useful in
generic/traditional distributions too, and in other use cases than my
own.&lt;/p&gt;
&lt;h1&gt;The Project&lt;/h1&gt;
&lt;p&gt;Before figuring out how I would build an OS it's probably good to
figure out what type of OS I actually want to build, what purpose I
intend to cover. I think a desktop OS is probably the most
interesting. Why is that?  Well, first of all, I use one of these for my
job every single day, so I care immediately, it's my primary tool of
work. But more importantly: I think building a desktop OS is one of
the most complex overall OS projects you can work on, simply because
desktops are so much more versatile and variable than servers or
embedded devices. If one figures out the desktop case, I think there's
a lot more to learn from, and reuse in the server or embedded case,
then going the other way. After all, there's a reason why so much of the
widely accepted Linux userspace stack comes from people with a desktop
background (including systemd, BTW).&lt;/p&gt;
&lt;p&gt;So, let's see how &lt;em&gt;I&lt;/em&gt; would build a desktop OS. If you press me hard,
and ask me why I would do that given that ChromeOS already exists and
more or less is a Linux desktop OS: there's plenty I am missing in
ChromeOS, but most importantly, I am lot more interested in building
something people can easily and naturally rebuild and hack on,
i.e. Google-style over-the-wall open source with its skewed power
dynamic is not particularly attractive to me. I much prefer building
this within the framework of a proper open source community, out in
the open, and basing all this strongly on the status quo ante,
i.e. the existing distributions. I think it is crucial to provide a
clear avenue to build a modern OS based on the existing distribution
model, if there shall ever be a chance to make this interesting for a
larger audience.&lt;/p&gt;
&lt;p&gt;(Let me underline though: even though I am going to focus on a desktop
here, most of this is directly relevant for servers as well, in
particular container host OSes and suchlike, or embedded devices,
e.g. car IVI systems and so on.)&lt;/p&gt;
&lt;h1&gt;Design Goals&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First and foremost, I think the focus must be on an image-based
   design rather than a package-based one. For robustness and security
   it is essential to operate with reproducible, immutable images that
   describe the OS or large parts of it in full, rather than operating
   always with fine-grained RPM/dpkg style packages. That's not to say
   that packages are not relevant (I actually think they matter a
   lot!), but I think they should be less of a tool for deploying code
   but more one of building the objects to deploy. A different way to
   see this: any OS built like this must be easy to replicate in a
   large number of instances, with minimal variability. Regardless if
   we talk about desktops, servers or embedded devices: focus for my
   OS should be on "cattle", not "pets", i.e that from the start it's
   trivial to reuse the well-tested, cryptographically signed
   combination of software over a large set of devices the same way,
   with a maximum of bit-exact reuse and a minimum of local variances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The trust chain matters, from the boot loader all the way to the
   apps. This means all code that is run must be cryptographically
   validated before it is run. All storage must be cryptographically
   protected: public data must be integrity checked; private data must
   remain confidential.&lt;/p&gt;
&lt;p&gt;This is in fact where big distributions currently fail pretty
   badly. I would go as far as saying that SecureBoot on Linux
   distributions is mostly security theater at this point, if you so
   will. That's because the initrd that unlocks your FDE (i.e. the
   cryptographic concept that protects the rest of your system) is not
   signed or protected in any way. It's trivial to modify for an
   attacker with access to your hard disk in an undetectable way, and
   collect your FDE passphrase. The involved bureaucracy around the
   implementation of UEFI SecureBoot of the big distributions is to a
   large degree pointless if you ask me, given that once the kernel is
   assumed to be in a good state, as the next step the system invokes
   completely unsafe code with full privileges.&lt;/p&gt;
&lt;p&gt;This is a fault of current Linux distributions though, not of
   SecureBoot in general. Other OSes use this functionality in more
   useful ways, and we should correct that too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pretty much the same thing: offline security matters. I want
   my data to be reasonably safe at rest, i.e. cryptographically
   inaccessible even when I leave my laptop in my hotel room,
   suspended.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything should be cryptographically measured, so that remote
   attestation is supported for as much software shipped on the OS as
   possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything should be self descriptive, have single sources of truths
   that are closely attached to the object itself, instead of stored
   externally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything should be self-updating. Today we know that software is
   never bug-free, and thus requires a continuous update cycle. Not
   only the OS itself, but also any extensions, services and apps
   running on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything should be robust in respect to aborted OS operations,
   power loss and so on. It should be robust towards hosed OS updates
   (regardless if the download process failed, or the image was
   buggy), and not require user interaction to recover from them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There must always be a way to put the system back into a
   well-defined, guaranteed safe state ("factory reset"). This
   includes that all sensitive data from earlier uses becomes
   cryptographically inaccessible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The OS should enforce clear separation between vendor resources,
   system resources and user resources: conceptually and when it comes
   to cryptographical protection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things should be adaptive: the system should come up and make the
    best of the system it runs on, adapt to the storage and
    hardware. Moreover, the system should support execution on bare
    metal equally well as execution in a VM environment and in a
    container environment (i.e. &lt;code&gt;systemd-nspawn&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things should not require explicit installation. i.e. every image
    should be a live image. For installation it should be sufficient to
    &lt;code&gt;dd&lt;/code&gt; an OS image onto disk. Thus, strong focus on "instantiate on
    first boot", rather than "instantiate before first boot".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things should be reasonably minimal. The image the system starts
    its life with should be quick to download, and not include
    resources that can as well be created locally later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System identity, local cryptographic keys and so on should be
    generated locally, not be pre-provisioned, so that there's no leak
    of sensitive data during the transport onto the system possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things should be reasonably democratic and hackable. It should be
    easy to fork an OS, to modify an OS and still get reasonable
    cryptographic protection. Modifying your OS should not necessarily
    imply that your "warranty is voided" and you lose all good
    properties of the OS, if you so will.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things should be reasonably modular. The privileged part of the
    core OS must be extensible, including on the individual system.
    It's not sufficient to support extensibility just through
    high-level UI applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Things should be reasonably uniform, i.e. ideally the same formats
    and cryptographic properties are used for all components of the
    system, regardless if for the host OS itself or the payloads it
    receives and runs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even taking all these goals into consideration, it should still be
    close to traditional Linux distributions, and take advantage of what
    they are really good at: integration and security update cycles.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now that we know our goals and requirements, let's start designing the
OS along these lines.&lt;/p&gt;
&lt;h1&gt;Hermetic &lt;code&gt;/usr/&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;First of all the OS resources (code, data files, ‚Ä¶) should be
&lt;em&gt;hermetic&lt;/em&gt; in an immutable &lt;code&gt;/usr/&lt;/code&gt;. This means that a &lt;code&gt;/usr/&lt;/code&gt; tree
should carry everything needed to set up the minimal set of
directories and files outside of &lt;code&gt;/usr/&lt;/code&gt; to make the system work. This
&lt;code&gt;/usr/&lt;/code&gt; tree can then be mounted read-only into the writable root file
system that then will eventually carry the local configuration, state
and user data in &lt;code&gt;/etc/&lt;/code&gt;, &lt;code&gt;/var/&lt;/code&gt; and &lt;code&gt;/home/&lt;/code&gt; as usual.&lt;/p&gt;
&lt;p&gt;Thankfully, modern distributions are surprisingly close to working
without issues in such a hermetic context. Specifically, Fedora works
mostly just fine: it has adopted the &lt;code&gt;/usr/&lt;/code&gt; merge and the declarative
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-sysusers.html"&gt;&lt;code&gt;systemd-sysusers&lt;/code&gt;&lt;/a&gt;
and
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-tmpfiles-setup.service.html"&gt;&lt;code&gt;systemd-tmpfiles&lt;/code&gt;&lt;/a&gt;
components quite comprehensively, which means the directory trees
outside of &lt;code&gt;/usr/&lt;/code&gt; are automatically generated as needed if missing.
In particular &lt;code&gt;/etc/passwd&lt;/code&gt; and &lt;code&gt;/etc/group&lt;/code&gt; (and related files) are
appropriately populated, should they be missing entries.&lt;/p&gt;
&lt;p&gt;In my model a hermetic OS is hence comprehensively defined within
&lt;code&gt;/usr/&lt;/code&gt;: combine the &lt;code&gt;/usr/&lt;/code&gt; tree with an empty, otherwise unpopulated
root file system, and it will boot up successfully, automatically
adding the strictly necessary files, and resources that are necessary
to boot up.&lt;/p&gt;
&lt;p&gt;Monopolizing vendor OS resources and definitions in an immutable
&lt;code&gt;/usr/&lt;/code&gt; opens multiple doors to us:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We can apply &lt;code&gt;dm-verity&lt;/code&gt; to the whole &lt;code&gt;/usr/&lt;/code&gt; tree, i.e. guarantee
  structural, cryptographic integrity on the whole vendor OS resources
  at once, with full file system metadata.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can implement updates to the OS easily: by implementing an A/B
  update scheme on the &lt;code&gt;/usr/&lt;/code&gt; tree we can update the OS resources
  atomically and robustly, while leaving the rest of the OS environment
  untouched.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can implement factory reset easily: erase the root file system
  and reboot. The hermetic OS in &lt;code&gt;/usr/&lt;/code&gt; has all the information it
  needs to set up the root file system afresh ‚Äî exactly like in a new
  installation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Initial Look at the Partition Table&lt;/h1&gt;
&lt;p&gt;So let's have a look at a suitable partition table, taking a hermetic
&lt;code&gt;/usr/&lt;/code&gt; into account. Let's conceptually start with a table of four
entries:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;An UEFI System Partition (required by firmware to boot)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Immutable, Verity-protected, signed file system with the &lt;code&gt;/usr/&lt;/code&gt; tree in version A&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Immutable, Verity-protected, signed file system with the &lt;code&gt;/usr/&lt;/code&gt; tree in version B&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A writable, encrypted root file system&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(This is just for initial illustration here, as we'll see later it's
going to be a bit more complex in the end.)&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://systemd.io/DISCOVERABLE_PARTITIONS"&gt;Discoverable Partitions
Specification&lt;/a&gt; provides
suitable partition types UUIDs for all of the above partitions. Which
is great, because it makes the image self-descriptive: simply by
looking at the image's GPT table we know what to mount where. This
means we do not need a manual &lt;code&gt;/etc/fstab&lt;/code&gt;, and a multitude of tools
such as &lt;code&gt;systemd-nspawn&lt;/code&gt; and similar can operate directly on the disk
image and boot it up.&lt;/p&gt;
&lt;h1&gt;Booting&lt;/h1&gt;
&lt;p&gt;Now that we have a rough idea how to organize the partition table,
let's look a bit at how to boot into that. Specifically, in my model
"unified kernels" are the way to go, specifically those implementing
&lt;a href="https://systemd.io/BOOT_LOADER_SPECIFICATION"&gt;Boot Loader Specification Type #2&lt;/a&gt;. These are basically
kernel images that have an initial RAM disk attached to them, as well as
a kernel command line, a boot splash image and possibly more, all
wrapped into a single UEFI PE binary. By combining these into one we
achieve two goals: they become extremely easy to update (i.e. drop in
one file, and you update kernel+initrd) and more importantly, you can
sign them as one for the purpose of UEFI SecureBoot.&lt;/p&gt;
&lt;p&gt;In my model, each version of such a kernel would be associated with
exactly one version of the &lt;code&gt;/usr/&lt;/code&gt; tree: both are always updated at
the same time. An update then becomes relatively simple: drop in one
new &lt;code&gt;/usr/&lt;/code&gt; file system plus one kernel, and the update is complete.&lt;/p&gt;
&lt;p&gt;The boot loader used for all this would be
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-boot.html"&gt;systemd-boot&lt;/a&gt;,
of course. It's a very simple loader, and implements the
aforementioned boot loader specification. This means it requires no
explicit configuration or anything: it's entirely sufficient to drop
in one such unified kernel file, and it will be picked up, and be made
a candidate to boot into.&lt;/p&gt;
&lt;p&gt;You might wonder how to configure the root file system to boot from
with such a unified kernel that contains the kernel command line and
is signed as a whole and thus immutable. The idea here is to use the
&lt;code&gt;usrhash=&lt;/code&gt; kernel command line option implemented by
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-veritysetup-generator.html"&gt;systemd-veritysetup-generator&lt;/a&gt;
and
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-fstab-generator.html"&gt;systemd-fstab-generator&lt;/a&gt;. It
does two things: it will search and set up a &lt;code&gt;dm-verity&lt;/code&gt; volume for
the &lt;code&gt;/usr/&lt;/code&gt; file system, and then mount it. It takes the root hash
value of the &lt;code&gt;dm-verity&lt;/code&gt; Merkle tree as the parameter. This hash is
then also used to find the &lt;code&gt;/usr/&lt;/code&gt; partition in the GPT partition
table, under the assumption that the partition UUIDs are derived from
it, as per the suggestions in the discoverable partitions
specification (see above).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;systemd-boot&lt;/code&gt; (if not told otherwise) will do a version sort of the
kernel image files it finds, and then automatically boot the newest
one. Picking a specific kernel to boot will also fixate which version
of the &lt;code&gt;/usr/&lt;/code&gt; tree to boot into, because ‚Äî as mentioned ‚Äî the Verity
root hash of it is built into the kernel command line the unified
kernel image contains.&lt;/p&gt;
&lt;p&gt;In my model I'd place the kernels directly into the UEFI System
Partition (ESP), in order to simplify things. (&lt;code&gt;systemd-boot&lt;/code&gt; also
supports reading them from a separate boot partition, but let's not
complicate things needlessly, at least for now.)&lt;/p&gt;
&lt;p&gt;So, with all this, we now already have a boot chain that goes
something like this: once the boot loader is run, it will pick the
newest kernel, which includes the initial RAM disk and a secure
reference to the &lt;code&gt;/usr/&lt;/code&gt; file system to use. This is already
great. But a &lt;code&gt;/usr/&lt;/code&gt; alone won't make us happy, we also need a root
file system. In my model, that file system would be writable, and the
&lt;code&gt;/etc/&lt;/code&gt; and &lt;code&gt;/var/&lt;/code&gt; hierarchies would be located directly on it. Since
these trees potentially contain secrets (SSH keys, ‚Ä¶) the root file
system needs to be encrypted. We'll use LUKS2 for this, of course. In
my model, I'd bind this to the TPM2 chip (for compatibility with
systems lacking one, we can find a suitable fallback, which then
provides weaker guarantees, see below). A TPM2 is a security chip
available in most modern PCs. Among other things it contains a
persistent secret key that can be used to encrypt data, in a way that
only if you possess access to it and can prove you are using validated
software you can decrypt it again. The cryptographic measuring I
mentioned earlier is what allows this to work. But ‚Ä¶ let's not get
lost too much in the details of TPM2 devices, that'd be material for a
novel, and this blog story is going to be way too long already.&lt;/p&gt;
&lt;p&gt;What does using a TPM2 bound key for unlocking the root file system
get us? We can encrypt the root file system with it, and you can only
read or make changes to the root file system if you also possess the
TPM2 chip and run our validated version of the OS. This protects us
against an &lt;em&gt;evil&lt;/em&gt; &lt;em&gt;maid&lt;/em&gt; scenario to some level: an attacker cannot
just copy the hard disk of your laptop while you leave it in your
hotel room, because unless the attacker also steals the TPM2 device it
cannot be decrypted. The attacker can also not just modify the root
file system, because such changes would be detected on next boot
because they aren't done with the right cryptographic key.&lt;/p&gt;
&lt;p&gt;So, now we have a system that already can boot up somewhat completely,
and run userspace services. All code that is run is verified in some
way: the &lt;code&gt;/usr/&lt;/code&gt; file system is Verity protected, and the root hash of
it is included in the kernel that is signed via UEFI SecureBoot. And
the root file system is locked to the TPM2 where the secret key is
only accessible if our signed OS + &lt;code&gt;/usr/&lt;/code&gt; tree is used.&lt;/p&gt;
&lt;p&gt;(One brief intermission here: so far all the components I am
referencing here exist already, and have been shipped in &lt;code&gt;systemd&lt;/code&gt; and
other projects already, including the TPM2 based disk
encryption. There's one thing missing here however at the moment that
still needs to be developed (happy to take PRs!): right now TPM2 based
LUKS2 unlocking is bound to PCR hash values. This is hard to work with
when implementing updates ‚Äî what we'd need instead is unlocking by
signatures of PCR hashes. TPM2 supports this, but we don't support it
yet in our &lt;code&gt;systemd-cryptsetup&lt;/code&gt; + &lt;code&gt;systemd-cryptenroll&lt;/code&gt; stack.)&lt;/p&gt;
&lt;p&gt;One of the goals mentioned above is that cryptographic key material
should always be generated locally on first boot, rather than
pre-provisioned. This of course has implications for the encryption
key of the root file system: if we want to boot into this system we
need the root file system to exist, and thus a key already generated
that it is encrypted with. But where precisely would we generate it if
we have no installer which could generate while installing (as it is
done in traditional Linux distribution installers). My proposed
solution here is to use
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-repart.html"&gt;&lt;code&gt;systemd-repart&lt;/code&gt;&lt;/a&gt;,
which is a declarative, purely additive repartitioner. It can run from
the initrd to create and format partitions on boot, before
transitioning into the root file system. It can also format the
partitions it creates and encrypt them, automatically enrolling an
TPM2-bound key.&lt;/p&gt;
&lt;p&gt;So, let's revisit the partition table we mentioned earlier. Here's
what in my model we'd actually ship in the initial image:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;An UEFI System Partition (ESP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An immutable, Verity-protected, signed file system with the &lt;code&gt;/usr/&lt;/code&gt; tree in version A&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's already it. No root file system, no B &lt;code&gt;/usr/&lt;/code&gt; partition,
nothing else. Only two partitions are shipped: the ESP with the
&lt;code&gt;systemd-boot&lt;/code&gt; loader and one unified kernel image, and the A version
of the &lt;code&gt;/usr/&lt;/code&gt; partition. Then, on first boot &lt;code&gt;systemd-repart&lt;/code&gt; will
notice that the root file system doesn't exist yet, and will create
it, encrypt it, and format it, and enroll the key into the TPM2. It
will also create the second &lt;code&gt;/usr/&lt;/code&gt; partition (B) that we'll need for
later A/B updates (which will be created empty for now, until the
first update operation actually takes place, see below). Once done the
initrd will combine the fresh root file system with the shipped
&lt;code&gt;/usr/&lt;/code&gt; tree, and transition into it. Because the OS is hermetic in
&lt;code&gt;/usr/&lt;/code&gt; and contains all the &lt;code&gt;systemd-tmpfiles&lt;/code&gt; and &lt;code&gt;systemd-sysuser&lt;/code&gt;
information it can then set up the root file system properly and
create any directories and symlinks (and maybe a few files) necessary
to operate.&lt;/p&gt;
&lt;p&gt;Besides the fact that the root file system's encryption keys are
generated on the system we boot from and never leave it, it is also
pretty nice that the root file system will be sized dynamically,
taking into account the physical size of the backing storage. This is
perfect, because on first boot the image will automatically adapt to what
it has been &lt;code&gt;dd&lt;/code&gt;'ed onto.&lt;/p&gt;
&lt;h1&gt;Factory Reset&lt;/h1&gt;
&lt;p&gt;This is a good point to talk about the factory reset logic, i.e. the
mechanism to place the system back into a known good state. This is
important for two reasons: in our laptop use case, once you want to
pass the laptop to someone else, you want to ensure your data is fully
and comprehensively erased. Moreover, if you have reason to believe
your device was hacked you want to revert the device to a known good
state, i.e. ensure that exploits cannot persist. &lt;code&gt;systemd-repart&lt;/code&gt;
already has a mechanism for it. In the declarations of the partitions
the system should have, entries may be marked to be candidates for
erasing on factory reset. The actual factory reset is then requested
by one of two means: by specifying a specific kernel command line
option (which is not too interesting here, given we lock that down via
UEFI SecureBoot; but then again, one could also add a second kernel to
the ESP that is identical to the first, with only different that it
lists this command line option: thus when the user selects this entry
it will initiate a factory reset) ‚Äî and via an EFI variable that can
be set and is honoured on the immediately following boot. So here's
how a factory reset would then go down: once the factory reset is
requested it's enough to reboot. On the subsequent boot
&lt;code&gt;systemd-repart&lt;/code&gt; runs from the initrd, where it will honour the
request and erase the partitions marked for erasing. Once that is
complete the system is back in the state we shipped the system in:
only the ESP and the &lt;code&gt;/usr/&lt;/code&gt; file system will exist, but the root file
system is gone. And from here we can continue as on the original first
boot: create a new root file system (and any other partitions), and
encrypt/set it up afresh.&lt;/p&gt;
&lt;p&gt;So now we have a nice setup, where everything is either signed or
encrypted securely. The system can adapt to the system it is booted on
automatically on first boot, and can easily be brought back into a
well defined state identical to the way it was shipped in.&lt;/p&gt;
&lt;h1&gt;Modularity&lt;/h1&gt;
&lt;p&gt;But of course, such a monolithic, immutable system is only useful for
very specific purposes. If &lt;code&gt;/usr/&lt;/code&gt; can't be written to, ‚Äì at least in
the traditional sense ‚Äì one cannot just go and install a new software
package that one needs. So here two goals are superficially
conflicting: on one hand one wants modularity, i.e. the ability to
add components to the system, and on the other immutability, i.e. that
precisely this is prohibited.&lt;/p&gt;
&lt;p&gt;So let's see what I propose as a middle ground in my model. First,
what's the precise use case for such modularity? I see a couple of
different ones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For some cases it is necessary to extend the system itself at the
   lowest level, so that the components added in extend (or maybe even
   replace) the resources shipped in the base OS image, so that they live
   in the same namespace, and are subject to the same security
   restrictions and privileges. Exposure to the details of the base OS
   and its interface for this kind of modularity is at the maximum.&lt;/p&gt;
&lt;p&gt;Example: a module that adds a debugger or tracing tools into the
   system. Or maybe an optional hardware driver module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In other cases, more isolation is preferable: instead of extending
   the system resources directly, additional services shall be added
   in that bring their own files, can live in their own namespace
   (but with "windows" into the host namespaces), however still are
   system components, and provide services to other programs, whether
   local or remote. Exposure to the details of the base OS for this
   kind of modularity is restricted: it mostly focuses on the
   ability to consume and provide IPC APIs from/to the
   system. Components of this type can still be highly privileged, but
   the level of integration is substantially smaller than for the type
   explained above.&lt;/p&gt;
&lt;p&gt;Example: a module that adds a specific VPN connection service to
   the OS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, there's the actual payload of the OS. This stuff is
   relatively isolated from the OS and definitely from each other. It
   mostly consumes OS APIs, and generally doesn't provide OS
   APIs. This kind of stuff runs with minimal privileges, and in its
   own namespace of concepts.&lt;/p&gt;
&lt;p&gt;Example: a desktop app, for reading your emails.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, the lines between these three types of modules are blurry,
but I think distinguishing them does make sense, as I think different
mechanisms are appropriate for each. So here's what I'd propose in my
model to use for this.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;For the system extension case I think the
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-sysext.html"&gt;&lt;code&gt;systemd-sysext&lt;/code&gt;&lt;/a&gt;
   images are appropriate. This tool operates on
   system extension images that are very similar to the host's disk
   image: they also contain a &lt;code&gt;/usr/&lt;/code&gt; partition, protected by
   Verity. However, they just include additions to the host image:
   binaries that extend the host. When such a system extension image
   is activated, it is merged via an immutable &lt;code&gt;overlayfs&lt;/code&gt; mount into
   the host's &lt;code&gt;/usr/&lt;/code&gt; tree. Thus any file shipped in such a system
   extension will suddenly appear as if it was part of the host OS
   itself. For optional components that should be considered part of
   the OS more or less this is a very simple and powerful way to
   combine an immutable OS with an immutable extension. Note that most
   likely extensions for an OS matching this tool should be built at
   the same time within the same update cycle scheme as the host OS
   itself. After all, the files included in the extensions will have
   dependencies on files in the system OS image, and care must be
   taken that these dependencies remain in order.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For adding in additional somewhat isolated system services in my
   model, &lt;a href="https://systemd.io/PORTABLE_SERVICES"&gt;Portable Services&lt;/a&gt;
   are the proposed tool of choice. Portable services are in most ways
   just like regular system services; they could be included in the
   system OS image or an extension image. However, portable services
   use
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RootImage="&gt;&lt;code&gt;RootImage=&lt;/code&gt;&lt;/a&gt;
   to run off separate disk images, thus within their own
   namespace. Images set up this way have various ways to integrate
   into the host OS, as they are in most ways regular system services,
   which just happen to bring their own directory tree. Also, unlike
   regular system services, for them sandboxing is opt-out rather than
   opt-in. In my model, here too the disk images are Verity protected
   and thus immutable. Just like the host OS they are GPT disk images
   that come with a &lt;code&gt;/usr/&lt;/code&gt; partition and Verity data, along with
   signing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, the actual payload of the OS, i.e. the apps. To be useful
   in real life here it is important to hook into existing ecosystems,
   so that a large set of apps are available. Given that on Linux
   flatpak (or on servers OCI containers) are the established format
   that pretty much won they are probably the way to go. That said, I
   think both of these mechanisms have relatively weak properties, in
   particular when it comes to security, since
   immutability/measurements and similar are not provided. This means,
   unlike for system extensions and portable services a complete trust
   chain with attestation and per-app cryptographically protected data
   is much harder to implement sanely.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What I'd like to underline here is that the main system OS image, as
well as the system extension images and the portable service images
are put together the same way: they are GPT disk images, with one
immutable file system and associated Verity data. The latter two
should also contain a PKCS#7 signature for the top-level Verity
hash. This uniformity has many benefits: you can use the same tools to
build and process these images, but most importantly: by using a
single way to validate them throughout the stack (i.e. Verity, in the
latter cases with PKCS#7 signatures), validation and measurement is
straightforward. In fact it's so obvious that we don't even have to
implement it in systemd: the kernel has direct support for this Verity
signature checking natively already (IMA).&lt;/p&gt;
&lt;p&gt;So, by composing a system at runtime from a host image, extension
images and portable service images we have a nicely modular system
where every single component is cryptographically validated on every
single IO operation, and every component is measured, in its entire
combination, directly in the kernel's IMA subsystem.&lt;/p&gt;
&lt;p&gt;(Of course, once you add the desktop apps or OCI containers on top,
then these properties are lost further down the chain. But well, a lot
is already won, if you can close the chain that far down.)&lt;/p&gt;
&lt;p&gt;Note that system extensions are not designed to replicate the fine
grained packaging logic of RPM/dpkg. Of course, &lt;code&gt;systemd-sysext&lt;/code&gt; is a
generic tool, so you can use it for whatever you want, but there's a
reason it does not bring support for a dependency language: the goal
here is not to replicate traditional Linux packaging (we have that
already, in RPM/dpkg, and I think they are actually OK for what they
do) but to provide delivery of larger, coarser sets of functionality,
in lockstep with the underlying OS' life-cycle and in particular with
no interdependencies, except on the underlying OS.&lt;/p&gt;
&lt;p&gt;Also note that depending on the use case it might make sense to also
use system extensions to modularize the &lt;code&gt;initrd&lt;/code&gt; step. This is
probably less relevant for a desktop OS, but for server systems it
might make sense to package up support for specific complex storage in
a &lt;code&gt;systemd-sysext&lt;/code&gt; system extension, which can be applied to the
initrd that is built into the unified kernel. (In fact, we have been
working on implementing signed yet modular initrd support to general
purpose Fedora this way.)&lt;/p&gt;
&lt;p&gt;Note that portable services are composable from system extension too,
by the way. This makes them even more useful, as you can share a
common runtime between multiple portable service, or even use the host
image as common runtime for portable services. In this model a common
runtime image is shared between one or more system extensions, and
composed at runtime via an &lt;code&gt;overlayfs&lt;/code&gt; instance.&lt;/p&gt;
&lt;h1&gt;More Modularity: Secondary OS Installs&lt;/h1&gt;
&lt;p&gt;Having an immutable, cryptographically locked down host OS is great I
think, and if we have some moderate modularity on top, that's also
great. But oftentimes it's useful to be able to depart/compromise for
some specific use cases from that, i.e. provide a bridge for example to
allow workloads designed around RPM/dpkg package management to coexist
reasonably nicely with such an immutable host.&lt;/p&gt;
&lt;p&gt;For this purpose in my model I'd propose using &lt;code&gt;systemd-nspawn&lt;/code&gt;
containers. The containers are focused on OS containerization,
i.e. they allow you to run a full OS with init system and everything
as payload (unlike for example Docker containers which focus on a
single service, and where running a full OS in it is a mess).&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;systemd-nspawn&lt;/code&gt; containers for such secondary OS installs has
various nice properties. One of course is that &lt;code&gt;systemd-nspawn&lt;/code&gt;
supports the same level of cryptographic image validation that we rely
on for the host itself. Thus, to some level the whole OS trust chain
is reasonably recursive if desired: the firmware validates the OS, and the OS can
validate a secondary OS installed within it. In fact, we can run our
trusted OS recursively on itself and get similar security guarantees!
Besides these security aspects, &lt;code&gt;systemd-nspawn&lt;/code&gt; also has really nice
properties when it comes to integration with the host. For example the
&lt;code&gt;--bind-user=&lt;/code&gt; permits binding a host user record and their directory
into a container as a simple one step operation. This makes it
extremely easy to have a single user and &lt;code&gt;$HOME&lt;/code&gt; but share it
concurrently with the host &lt;em&gt;and&lt;/em&gt; a zoo of secondary OSes in
&lt;code&gt;systemd-nspawn&lt;/code&gt; containers, which each could run different
distributions even.&lt;/p&gt;
&lt;h1&gt;Developer Mode&lt;/h1&gt;
&lt;p&gt;Superficially, an OS with an immutable &lt;code&gt;/usr/&lt;/code&gt; appears much less
&lt;em&gt;hackable&lt;/em&gt; than an OS where everything is writable. Moreover, an OS
where everything must be signed and cryptographically validated makes
it hard to insert your own code, given you are unlikely to possess
access to the signing keys.&lt;/p&gt;
&lt;p&gt;To address this issue other systems have supported a "developer" mode:
when entered the security guarantees are disabled, and the system can
be freely modified, without cryptographic validation. While that's a
great concept to have I doubt it's what most developers really want:
the cryptographic properties of the OS are great after all, it sucks
having to give them up once developer mode is activated.&lt;/p&gt;
&lt;p&gt;In my model I'd thus propose two different approaches to this
problem. First of all, I think there's value in allowing users to
additively extend/override the OS via local developer &lt;a href="https://0pointer.net/blog/testing-my-system-code-in-usr-without-modifying-usr.html"&gt;system
extensions&lt;/a&gt;. With
this scheme the underlying cryptographic validation would remain in
tact, but ‚Äî if this form of development mode is explicitly enabled ‚Äì
the developer could add in more resources from local storage, that are
not tied to the OS builder's chain of trust, but a local one
(i.e. simply backed by encrypted storage of some form).&lt;/p&gt;
&lt;p&gt;The second approach is to make it easy to extend (or in fact replace)
the set of trusted validation keys, with local ones that are under the
control of the user, in order to make it easy to operate with kernel,
OS, extension, portable service or container images signed by the
local developer without involvement of the OS builder. This is
relatively easy to do for components down the trust chain, i.e. the
elements further up the chain should optionally allow additional
certificates to allow validation with.&lt;/p&gt;
&lt;p&gt;(Note that systemd currently has no explicit support for a
"developer" mode like this. I think we should add that sooner or later
however.)&lt;/p&gt;
&lt;h1&gt;Democratizing Code Signing&lt;/h1&gt;
&lt;p&gt;Closely related to the question of developer mode is the question of
code signing. If you ask me, the status quo of UEFI SecureBoot code
signing in the major Linux distributions is pretty sad. The work to
get stuff signed is massive, but in effect it delivers very little in
return: because initrds are entirely unprotected, and reside on
partitions lacking any form of cryptographic integrity protection any
attacker can trivially easily modify the boot process of any such
Linux system and freely collected FDE passphrases entered. There's
little value in signing the boot loader and kernel in a complex
bureaucracy if it then happily loads entirely unprotected code that
processes the actually relevant security credentials: the FDE
keys.&lt;/p&gt;
&lt;p&gt;In my model, through use of unified kernels this important gap is
closed, hence UEFI SecureBoot code signing becomes an integral part of
the boot chain from firmware to the host OS. Unfortunately, code
signing ‚Äì and having something a user can locally hack, is to some
level conflicting. However, I think we can improve the situation here,
and put more emphasis on enrolling developer keys in the trust chain
easily. Specifically, I see one relevant approach here: enrolling keys
directly in the firmware is something that we should make less of a
theoretical exercise and more something we can realistically
deploy. See &lt;a href="https://github.com/systemd/systemd/pull/20255#issuecomment-1098334694"&gt;this work in
progress&lt;/a&gt;
making this more automatic and eventually safe. Other approaches are
thinkable (including some that build on existing MokManager
infrastructure), but given the politics involved, are harder to
conclusively implement.&lt;/p&gt;
&lt;h1&gt;Running the OS itself in a container&lt;/h1&gt;
&lt;p&gt;What I explain above is put together with running on a bare metal
system in mind. However, one of the stated goals is to make the OS
adaptive enough to also run in a container environment (specifically:
&lt;code&gt;systemd-nspawn&lt;/code&gt;) nicely. Booting a disk image on bare metal or in a
VM generally means that the UEFI firmware validates and invokes the
boot loader, and the boot loader invokes the kernel which then
transitions into the final system. This is different for containers:
here the container manager immediately calls the init system, i.e. PID
1. Thus the validation logic must be different: cryptographic
validation must be done by the container manager. In my model this is
solved by shipping the OS image not only with a Verity data partition
(as is already necessary for the UEFI SecureBoot trust chain, see
above), but also with another partition, containing a PKCS#7 signature
of the root hash of said Verity partition. This of course is exactly
what I propose for both the system extension and portable service
image. Thus, in my model the images for all three uses are put
together the same way: an immutable &lt;code&gt;/usr/&lt;/code&gt; partition, accompanied by
a Verity partition and a PKCS#7 signature partition. The OS image
itself then has two ways "into" the trust chain: either through the
signed unified kernel in the ESP (which is used for bare metal and VM
boots) &lt;em&gt;or&lt;/em&gt; by using the PKCS#7 signature stored in the partition
(which is used for container/&lt;code&gt;systemd-nspawn&lt;/code&gt; boots).&lt;/p&gt;
&lt;h1&gt;Parameterizing Kernels&lt;/h1&gt;
&lt;p&gt;A fully immutable and signed OS has to establish trust in the user
data it makes use of before doing so. In the model I describe here,
for &lt;code&gt;/etc/&lt;/code&gt; and &lt;code&gt;/var/&lt;/code&gt; we do this via disk encryption of the root
file system (in combination with integrity checking). But the point
where the root file system is mounted comes relatively late in the
boot process, and thus cannot be used to parameterize the boot
itself. In many cases it's important to be able to parameterize the
boot process however.&lt;/p&gt;
&lt;p&gt;For example, for the implementation of the developer mode indicated
above it's useful to be able to pass this fact safely to the initrd,
in combination with other fields (e.g. hashed root password for
allowing in-initrd logins for debug purposes). After all, if the
initrd is pre-built by the vendor and signed as whole together with
the kernel it cannot be modified to carry such data directly (which is
in fact how parameterizing of the initrd to a large degree was traditionally
done).&lt;/p&gt;
&lt;p&gt;In my model this is achieved through &lt;a href="https://systemd.io/CREDENTIALS/"&gt;system
credentials&lt;/a&gt;, which allow passing
parameters to systems (and services for the matter) in an encrypted
and authenticated fashion, bound to the TPM2 chip. This means that we
can securely pass data into the initrd so that it can be authenticated
and decrypted only on the system it is intended for and with the
unified kernel image it was intended for.&lt;/p&gt;
&lt;h1&gt;Swap&lt;/h1&gt;
&lt;p&gt;In my model the OS would also carry a swap partition. For the simple
reason that only then
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-oomd.service.html"&gt;&lt;code&gt;systemd-oomd.service&lt;/code&gt;&lt;/a&gt;
can provide the best results. Also see &lt;a href="https://chrisdown.name/2018/01/02/in-defence-of-swap.html"&gt;In defence of swap: common
misconceptions&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Updating Images&lt;/h1&gt;
&lt;p&gt;We have a rough idea how the system shall be organized now, let's next
focus on the deployment cycle: software needs regular update cycles,
and software that is not updated regularly is a security
problem. Thus, I am sure that any modern system must be automatically
updated, without this requiring avoidable user interaction.&lt;/p&gt;
&lt;p&gt;In my model, this is the job for
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-sysupdate.html"&gt;systemd-sysupdate&lt;/a&gt;. It's
a relatively simple A/B image updater: it operates either on
partitions, on regular files in a directory, or on subdirectories in a
directory. Each entry has a version (which is encoded in the GPT
partition label for partitions, and in the filename for regular files
and directories): whenever an update is initiated the oldest version
is erased, and the newest version is downloaded.&lt;/p&gt;
&lt;p&gt;With the setup described above a system update becomes a really simple
operation. On each update the &lt;code&gt;systemd-sysupdate&lt;/code&gt; tool downloads a
&lt;code&gt;/usr/&lt;/code&gt; file system partition, an accompanying Verity partition, a
PKCS#7 signature partition, and drops it into the host's partition
table (where it possibly replaces the oldest version so far stored
there). Then it downloads a unified kernel image and drops it into
the EFI System Partition's &lt;code&gt;/EFI/Linux&lt;/code&gt; (as per Boot Loader
Specification; possibly erase the oldest such file there). And that's
already the whole update process: four files are downloaded from the
server, unpacked and put in the most straightforward of ways into the
partition table or file system. Unlike in other OS designs there's no
mechanism required to explicitly switch to the newer version, the
aforementioned &lt;code&gt;systemd-boot&lt;/code&gt; logic will automatically pick the newest
kernel once it is dropped in.&lt;/p&gt;
&lt;p&gt;Above we talked a lot about modularity, and how to put systems
together as a combination of a host OS image, system extension images
for the initrd and the host, portable service images and
&lt;code&gt;systemd-nspawn&lt;/code&gt; container images. I already emphasized that these
image files are actually always the same: GPT disk images with
partition definitions that match the Discoverable Partition
Specification. This comes very handy when thinking about updating: we
can use the exact same &lt;code&gt;systemd-sysupdate&lt;/code&gt; tool for updating these
other images as we use for the host image. The uniformity of the
on-disk format allows us to update them uniformly too.&lt;/p&gt;
&lt;h1&gt;Boot Counting + Assessment&lt;/h1&gt;
&lt;p&gt;Automatic OS updates do not come without risks: if they happen
automatically, and an update goes wrong this might mean your system
might be automatically updated into a brick. This of course is less
than ideal. Hence it is essential to address this reasonably
automatically. In my model, there's systemd's &lt;a href="https://systemd.io/AUTOMATIC_BOOT_ASSESSMENT"&gt;Automatic Boot
Assessment&lt;/a&gt; for
that. The mechanism is simple: whenever a new unified kernel image is
dropped into the system it will be stored with a small integer counter
value included in the filename. Whenever the unified kernel image is
selected for booting by &lt;code&gt;systemd-boot&lt;/code&gt;, it is decreased by one. Once
the system booted up successfully (which is determined by userspace)
the counter is removed from the file name (which indicates "this entry
is known to work"). If the counter ever hits zero, this indicates that
it tried to boot it a couple of times, and each time failed, thus is
apparently "bad". In this case &lt;code&gt;systemd-boot&lt;/code&gt; will not consider the
kernel anymore, and revert to the next older (that doesn't have a
counter of zero).&lt;/p&gt;
&lt;p&gt;By sticking the boot counter into the filename of the unified kernel
we can directly attach this information to the kernel, and thus need
not concern ourselves with cleaning up secondary information about the
kernel when the kernel is removed. Updating with a tool like
&lt;code&gt;systemd-sysupdate&lt;/code&gt; remains a very simple operation hence: drop one
old file, add one new file.&lt;/p&gt;
&lt;h1&gt;Picking the Newest Version&lt;/h1&gt;
&lt;p&gt;I already mentioned that &lt;code&gt;systemd-boot&lt;/code&gt; automatically picks the newest
unified kernel image to boot, by looking at the version encoded in the
filename. This is done via a simple
&lt;a href="https://man7.org/linux/man-pages/man3/strverscmp.3.html"&gt;&lt;code&gt;strverscmp()&lt;/code&gt;&lt;/a&gt;
call (well, truth be told, it's a modified version of that call,
different from the one implemented in libc, because real-life package
managers use more complex rules for comparing versions these days, and
hence it made sense to do that here too). The concept of having
multiple entries of some resource in a directory, and picking the
newest one automatically is a powerful concept, I think. It means
adding/removing new versions is extremely easy (as we discussed above,
in &lt;code&gt;systemd-sysupdate&lt;/code&gt; context), and allows stateless determination of
what to use.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;systemd-boot&lt;/code&gt; can do that, what about system extension images,
portable service images, or &lt;code&gt;systemd-nspawn&lt;/code&gt; container images that do
not actually use &lt;code&gt;systemd-boot&lt;/code&gt; as the entrypoint? All these tools
actually implement the very same logic, but on the partition level: if
multiple suitable &lt;code&gt;/usr/&lt;/code&gt; partitions exist, then the newest is determined
by comparing the GPT partition label of them.&lt;/p&gt;
&lt;p&gt;This is in a way the counterpart to the &lt;code&gt;systemd-sysupdate&lt;/code&gt; update
logic described above: we always need a way to determine which
partition to actually then use after the update took place: and this
becomes very easy each time: enumerate possible entries, pick the
newest as per the (modified) &lt;code&gt;strverscmp()&lt;/code&gt; result.&lt;/p&gt;
&lt;h1&gt;Home Directory Management&lt;/h1&gt;
&lt;p&gt;In my model the device's users and their home directories are managed
by
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-homed.service.html"&gt;&lt;code&gt;systemd-homed&lt;/code&gt;&lt;/a&gt;. This
means they are relatively self-contained and can be migrated easily
between devices. The numeric UID assignment for each user is done at
the moment of login only, and the files in the home directory are
mapped as needed via a &lt;code&gt;uidmap&lt;/code&gt; mount. It also allows us to protect
the data of each user individually with a credential that belongs to
the user itself. i.e. instead of binding confidentiality of the user's
data to the system-wide full-disk-encryption each user gets their own
encrypted home directory where the user's authentication token
(password, FIDO2 token, PKCS#11 token, recovery key‚Ä¶) is used as
authentication and decryption key for the user's data. This brings
a major improvement for security as it means the user's data is
cryptographically inaccessible except when the user is actually logged
in.&lt;/p&gt;
&lt;p&gt;It also allows us to correct another major issue with traditional
Linux systems: the way how data encryption works during system
suspend. Traditionally on Linux the disk encryption credentials
(e.g. LUKS passphrase) is kept in memory also when the system is
suspended. This is a bad choice for security, since many (most?) of us
probably never turn off their laptop but suspend it instead. But if
the decryption key is always present in unencrypted form during the
suspended time, then it could potentially be read from there by a
sufficiently equipped attacker.&lt;/p&gt;
&lt;p&gt;By encrypting the user's home directory with the user's authentication
token we can first safely "suspend" the home directory before going to
the system suspend state (i.e. flush out the cryptographic keys needed
to access it). This means any process currently accessing the home
directory will be frozen for the time of the suspend, but that's
expected anyway during a system suspend cycle. Why is this better than
the status quo ante? In this model the home directory's cryptographic
key material is erased during suspend, but it can be safely reacquired
on resume, from system code. If the system is only encrypted as a
whole however, then the system code itself couldn't reauthenticate the
user, because it would be frozen too. By separating home directory
encryption from the root file system encryption we can avoid this
problem.&lt;/p&gt;
&lt;h1&gt;Partition Setup&lt;/h1&gt;
&lt;p&gt;So we discussed the organization of the partitions OS images multiple
times in the above, each time focusing on a specific aspect. Let's
now summarize how this should look like all together.&lt;/p&gt;
&lt;p&gt;In my model, the initial, shipped OS image should look roughly like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1) An UEFI System Partition, with &lt;code&gt;systemd-boot&lt;/code&gt; as boot loader and one unified kernel&lt;/li&gt;
&lt;li&gt;(2) A &lt;code&gt;/usr/&lt;/code&gt; partition (version "A"), with a label &lt;code&gt;fooOS_0.7&lt;/code&gt; (under the assumption we called our project &lt;code&gt;fooOS&lt;/code&gt; and the image version is &lt;code&gt;0.7&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;(3) A Verity partition for the &lt;code&gt;/usr/&lt;/code&gt; partition (version "A"), with the same label&lt;/li&gt;
&lt;li&gt;(4) A partition carrying the Verity root hash for the &lt;code&gt;/usr/&lt;/code&gt; partition (version "A"), along with a PKCS#7 signature of it, also with the same label&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On first boot this is augmented by &lt;code&gt;systemd-repart&lt;/code&gt; like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(5) A second &lt;code&gt;/usr/&lt;/code&gt; partition (version "B"), initially with a label &lt;code&gt;_empty&lt;/code&gt; (which is the label &lt;code&gt;systemd-sysupdate&lt;/code&gt; uses to mark partitions that currently carry no valid payload)&lt;/li&gt;
&lt;li&gt;(6) A Verity partition for that (version "B"), similar to the above case, also labelled &lt;code&gt;_empty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(7) And ditto a Verity root hash partition with a PKCS#7 signature (version "B"), also labelled &lt;code&gt;_empty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(8) A root file system, encrypted and locked to the TPM2&lt;/li&gt;
&lt;li&gt;(9) A home file system, integrity protected via a key also in TPM2 (encryption is unnecessary, since &lt;code&gt;systemd-homed&lt;/code&gt; adds that on its own, and it's nice to avoid duplicate encryption)&lt;/li&gt;
&lt;li&gt;(10) A swap partition, encrypted and locked to the TPM2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then, on the first OS update the partitions 5, 6, 7 are filled with a
new version of the OS (let's say &lt;code&gt;0.8&lt;/code&gt;) and thus get their label
updated to &lt;code&gt;fooOS_0.8&lt;/code&gt;. After a boot, this version is active.&lt;/p&gt;
&lt;p&gt;On a subsequent update the three partitions &lt;code&gt;fooOS_0.7&lt;/code&gt; get wiped and
replaced by &lt;code&gt;fooOS_0.9&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;On factory reset, the partitions 8, 9, 10 are deleted, so that
&lt;code&gt;systemd-repart&lt;/code&gt; recreates them, using a new set of cryptographic
keys.&lt;/p&gt;
&lt;p&gt;Here's a graphic that hopefully illustrates the partition stable from
shipped image, through first boot, multiple update cycles and eventual
factory reset:&lt;/p&gt;
&lt;p&gt;&lt;a href="images/partitions.svg"&gt;&lt;img alt="Partitions Overview" src="images/partitions.svg" width="640"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Trust Chain&lt;/h1&gt;
&lt;p&gt;So let's summarize the intended chain of trust (for bare metal/VM
boots) that ensures every piece of code in this model is signed
and validated, and any system secret is locked to TPM2.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, firmware (or possibly shim) authenticates &lt;code&gt;systemd-boot&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once &lt;code&gt;systemd-boot&lt;/code&gt; picks a unified kernel image to boot, it is
   also authenticated by firmware/shim.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The unified kernel image contains an initrd, which is the first
   userspace component that runs. It finds any system extensions passed
   into the initrd, and sets them up through Verity. The kernel will
   validate the Verity root hash signature of these system extension
   images against its usual keyring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The initrd also finds credentials passed in, then securely unlocks
   (which means: decrypts + authenticates) them with a secret from the
   TPM2 chip, locked to the kernel image itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The kernel image also contains a kernel command line which contains
   a &lt;code&gt;usrhash=&lt;/code&gt; option that pins the root hash of the &lt;code&gt;/usr/&lt;/code&gt; partition
   to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The initrd then unlocks the encrypted root file system, with a
   secret bound to the TPM2 chip.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The system then transitions into the main system, i.e. the
   combination of the Verity protected &lt;code&gt;/usr/&lt;/code&gt; and the encrypted root
   files system. It then activates two more encrypted (and/or
   integrity protected) volumes for &lt;code&gt;/home/&lt;/code&gt; and swap, also with a
   secret tied to the TPM2 chip.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here's an attempt to illustrate the above graphically:&lt;/p&gt;
&lt;p&gt;&lt;a href="images/trustchain.svg"&gt;&lt;img alt="Trust Chain" src="images/trustchain.svg" width="640"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is the trust chain of the basic OS. Validation of system
extension images, portable service images, &lt;code&gt;systemd-nspawn&lt;/code&gt; container
images always takes place the same way: the kernel validates these
Verity images along with their PKCS#7 signatures against the kernel's
keyring.&lt;/p&gt;
&lt;h1&gt;File System Choice&lt;/h1&gt;
&lt;p&gt;In the above I left the choice of file systems unspecified. For the
immutable &lt;code&gt;/usr/&lt;/code&gt; partitions &lt;code&gt;squashfs&lt;/code&gt; might be a good candidate, but
any other that works nicely in a read-only fashion and generates
reproducible results is a good choice, too. The home directories as managed
by &lt;code&gt;systemd-homed&lt;/code&gt; should certainly use &lt;code&gt;btrfs&lt;/code&gt;, because it's the only
general purpose file system supporting online grow and shrink, which
&lt;code&gt;systemd-homed&lt;/code&gt; can take benefit of, to manage storage.&lt;/p&gt;
&lt;p&gt;For the root file system &lt;code&gt;btrfs&lt;/code&gt; is likely also the best idea. That's
because we intend to use LUKS/&lt;code&gt;dm-crypt&lt;/code&gt; underneath, which by default
only provides confidentiality, not authenticity of the data (unless
combined with &lt;code&gt;dm-integrity&lt;/code&gt;). Since &lt;code&gt;btrfs&lt;/code&gt; (unlike xfs/ext4) does
full data checksumming it's probably the best choice here, since it
means we don't have to use &lt;code&gt;dm-integrity&lt;/code&gt; (which comes at a higher
performance cost).&lt;/p&gt;
&lt;h1&gt;OS Installation vs. OS Instantiation&lt;/h1&gt;
&lt;p&gt;In the discussion above a lot of focus was put on setting up the OS
and completing the partition layout and such on first boot. This means
installing the OS becomes as simple as &lt;code&gt;dd&lt;/code&gt;-ing (i.e. "streaming") the
shipped disk image into the final HDD medium. Simple, isn't it?&lt;/p&gt;
&lt;p&gt;Of course, such a scheme is just &lt;em&gt;too&lt;/em&gt; simple for many setups in real
life. Whenever multi-boot is required (i.e. co-installing an OS
implementing this model with another unrelated one), &lt;code&gt;dd&lt;/code&gt;-ing a disk
image onto the HDD is going to overwrite user data that was supposed
to be kept around.&lt;/p&gt;
&lt;p&gt;In order to cover for this case, in my model, we'd use
&lt;code&gt;systemd-repart&lt;/code&gt; (again!) to allow streaming the source disk image
into the target HDD in a smarter, additive way. The tool after all is
purely additive: it will add in partitions or grow them if they are
missing or too small. &lt;code&gt;systemd-repart&lt;/code&gt; already has all the necessary
provisions to not only create a partition on the target disk, but also
copy blocks from a raw installer disk. An install operation would then
become a two stop process: one invocation of &lt;code&gt;systemd-repart&lt;/code&gt; that
adds in the &lt;code&gt;/usr/&lt;/code&gt;, its Verity and the signature partition to the
target medium, populated with a copy of the same partition of the
installer medium. And one invocation of &lt;code&gt;bootctl&lt;/code&gt; that installs the
&lt;code&gt;systemd-boot&lt;/code&gt; boot loader in the ESP. (Well, there's one thing
missing here: the unified OS kernel also needs to be dropped into the
ESP. For now, this can be done with a simple &lt;code&gt;cp&lt;/code&gt; call. In the long
run, this should probably be something &lt;code&gt;bootctl&lt;/code&gt; can do as well, if
told so.)&lt;/p&gt;
&lt;p&gt;So, with this scheme we have a simple scheme to cover all bases: we
can either just &lt;code&gt;dd&lt;/code&gt; an image to disk, or we can stream an image onto
an existing HDD, adding a couple of new partitions and files to the
ESP.&lt;/p&gt;
&lt;p&gt;Of course, in reality things are more complex than that even: there's
a good chance that the existing ESP is simply too small to carry
multiple unified kernels. In my model, the way to address this is by
shipping two slightly different &lt;code&gt;systemd-repart&lt;/code&gt; partition definition
file sets: the &lt;em&gt;ideal&lt;/em&gt; case when the ESP is large enough, and a
&lt;em&gt;fallback&lt;/em&gt; case, where it isn't and where we then add in an addition
XBOOTLDR partition (as per the Discoverable Partitions
Specification). In that mode the ESP carries the boot loader, but the
unified kernels are stored in the XBOOTLDR partition. This scenario is
not quite as simple as the XBOOTLDR-less scenario described first, but
is equally well supported in the various tools. Note that
&lt;code&gt;systemd-repart&lt;/code&gt; can be told size constraints on the partitions it
shall create or augment, thus to implement this scheme it's enough to
invoke the tool with the fallback partition scheme if invocation with
the ideal scheme fails.&lt;/p&gt;
&lt;p&gt;Either way: regardless how the partitions, the boot loader and the
unified kernels ended up on the system's hard disk, on first boot the
code paths are the same again: &lt;code&gt;systemd-repart&lt;/code&gt; will be called to
augment the partition table with the root file system, and properly
encrypt it, as was already discussed earlier here. This means: all
cryptographic key material used for disk encryption is generated on
first boot only, the installer phase does not encrypt anything.&lt;/p&gt;
&lt;h1&gt;Live Systems vs. Installer Systems vs. Installed Systems&lt;/h1&gt;
&lt;p&gt;Traditionally on Linux three types of systems were common: "installed"
systems, i.e. that are stored on the main storage of the device and
are the primary place people spend their time in; "installer" systems
which are used to install them and whose job is to copy and setup the
packages that make up the installed system; and "live" systems, which
were a middle ground: a system that behaves like an installed system
in most ways, but lives on removable media.&lt;/p&gt;
&lt;p&gt;In my model I'd like to remove the distinction between these three
concepts as much as possible: each of these three images should carry
the exact same &lt;code&gt;/usr/&lt;/code&gt; file system, and should be suitable to be
replicated the same way. Once installed the resulting image can also
act as an installer for another system, and so on, creating a certain
"viral" effect: if you have one image or installation it's
automatically something you can replicate 1:1 with a simple
&lt;code&gt;systemd-repart&lt;/code&gt; invocation.&lt;/p&gt;
&lt;h1&gt;Building Images According to this Model&lt;/h1&gt;
&lt;p&gt;The above explains how the image should look like and how its first
boot and update cycle will modify it. But this leaves one question
unanswered: how to actually build the initial image for OS instances
according to this model?&lt;/p&gt;
&lt;p&gt;Note that there's nothing too special about the images following this
model: they are ultimately just GPT disk images with Linux file
systems, following the Discoverable Partition Specification. This
means you can use any set of tools of your choice that can put
together GPT disk images for compliant images.&lt;/p&gt;
&lt;p&gt;I personally would use &lt;a href="https://github.com/systemd/mkosi"&gt;&lt;code&gt;mkosi&lt;/code&gt;&lt;/a&gt; for
this purpose though. It's designed to generate compliant images, and
has a rich toolset for SecureBoot and signed/Verity file systems
already in place.&lt;/p&gt;
&lt;p&gt;What is key here is that this model doesn't depart from RPM and dpkg,
instead it builds on top of that: in this model they are excellent for
putting together images on the build host, but deployment onto the
runtime host does not involve individual packages.&lt;/p&gt;
&lt;p&gt;I think one cannot underestimate the value traditional distributions
bring, regarding security, integration and general polishing. The
concepts I describe above are inherited from this, but depart from the
idea that distribution packages are a runtime concept and make it a
build-time concept instead.&lt;/p&gt;
&lt;p&gt;Note that the above is pretty much independent from the underlying
distribution.&lt;/p&gt;
&lt;h1&gt;Final Words&lt;/h1&gt;
&lt;p&gt;I have no illusions, general purpose distributions are not going to
adopt this model as their default any time soon, and it's not even my
goal that they do that. The above is &lt;em&gt;my&lt;/em&gt; &lt;em&gt;personal&lt;/em&gt; vision, and I
don't expect people to buy into it 100%, and that's fine. However,
what I am interested in is finding the overlaps, i.e. work with people
who buy 50% into this vision, and share the components.&lt;/p&gt;
&lt;p&gt;My goals here thus are to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get distributions to move to a model where images like this can be
   built from the distribution easily. Specifically this means that
   distributions make their OS hermetic in &lt;code&gt;/usr/&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the overlaps, share components with other projects to revisit
   how distributions are put together. This is already happening, see
   &lt;code&gt;systemd-tmpfiles&lt;/code&gt; and &lt;code&gt;systemd-sysuser&lt;/code&gt; support in various
   distributions, but I think there's more to share.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make people interested in building actual real-world images based
   on general purpose distributions adhering to the model described
   above. I'd love a "GnomeBook" image with full trust properties,
   that is built from &lt;em&gt;true&lt;/em&gt; Linux distros, such as Fedora or
   ArchLinux.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;FAQ&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;What about &lt;code&gt;ostree&lt;/code&gt;? Doesn't &lt;code&gt;ostree&lt;/code&gt; already deliver what this blog story describes?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ostree&lt;/code&gt; is fine technology, but in respect to security and
robustness properties it's not too interesting I think, because
unlike image-based approaches it cannot really deliver
integrity/robustness guarantees over the whole tree easily. To be
able to trust an &lt;code&gt;ostree&lt;/code&gt; setup you have to establish trust in the
underlying file system first, and the complexity of the file
system makes that challenging. To provide an effective
offline-secure trust chain through the whole depth of the stack it
is essential to cryptographically validate every single I/O
operation. In an image-based model this is trivially easy, but in
&lt;code&gt;ostree&lt;/code&gt; model it's with current file system technology not
possible and even if this is added in one way or another in the
future (though I am not aware of anyone doing on-access file-based
integrity that spans a whole hierarchy of files that was
compatible with &lt;code&gt;ostree&lt;/code&gt;'s hardlink farm model) I think validation
is still at too high a level, since Linux file system developers
made very clear their implementations are not robust to rogue
images. (There's &lt;a href="https://github.com/ostreedev/ostree-rs-ext/issues/288"&gt;this stuff
planned&lt;/a&gt;,
but doing structural authentication ahead of time instead of on
access makes the idea to weak ‚Äî and I'd expect too slow ‚Äî in my
eyes.)&lt;/p&gt;
&lt;p&gt;With my design I want to deliver similar security guarantees as
ChromeOS does, but &lt;code&gt;ostree&lt;/code&gt; is much weaker there, and I see no
perspective of this changing. In a way &lt;code&gt;ostree&lt;/code&gt;'s integrity checks
are similar to RPM's and enforced on download rather than on
access. In the model I suggest above, it's always on access, and
thus safe towards offline attacks (i.e. evil maid attacks). In
today's world, I think offline security is absolutely necessary
though.&lt;/p&gt;
&lt;p&gt;That said, &lt;code&gt;ostree&lt;/code&gt; does have some benefits over the model
described above: it naturally shares file system inodes if many of
the modules/images involved share the same data. It's thus more
space efficient on disk (and thus also in RAM/cache to some
degree) by default. In my model it would be up to the image
builders to minimize shipping overly redundant disk images, by
making good use of suitably composable system extensions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;What about configuration management?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At first glance immutable systems and configuration management
don't go that well together. However, do note, that in the model
I propose above the root file system with all its contents,
including &lt;code&gt;/etc/&lt;/code&gt; and &lt;code&gt;/var/&lt;/code&gt; is actually writable and can be
modified like on any other typical Linux distribution. The only
exception is &lt;code&gt;/usr/&lt;/code&gt; where the immutable OS is hermetic. That
means configuration management tools should work just fine in this
model ‚Äì up to the point where they are used to install additional
RPM/dpkg packages, because that's something not allowed in the
model above: packages need to be installed at image build time and
thus on the image build host, not the runtime host.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;What about non-UEFI and non-TPM2 systems?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The above is designed around the feature set of contemporary PCs,
and this means UEFI and TPM2 being available (simply because the
PC is pretty much defined by the Windows platform, and current
versions of Windows require both).&lt;/p&gt;
&lt;p&gt;I think it's important to make the best of the features of today's
PC hardware, and then find suitable fallbacks on more limited
hardware. Specifically this means: if there's desire to implement
something like the this on non-UEFI or non-TPM2 hardware we should
look for suitable fallbacks for the individual functionality, but
generally try to add glue to the old systems so that conceptually
they behave more like the new systems instead of the other way
round. Or in other words: most of the above is not strictly tied
to UEFI or TPM2, and for many cases &lt;em&gt;already&lt;/em&gt; there are reasonably
fallbacks in place for more limited systems. Of course, without
TPM2 many of the security guarantees will be weakened.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;How would you name an OS built that way?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I think a desktop OS built this way if it has the GNOME desktop
should of course be called &lt;em&gt;GnomeBook&lt;/em&gt;, to mimic the &lt;em&gt;ChromeBook&lt;/em&gt;
name. ;-)&lt;/p&gt;
&lt;p&gt;But in general, I'd call hermetic, adaptive, immutable OSes like this "&lt;em&gt;particles&lt;/em&gt;".&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;How can you help?&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Help making Distributions Hermetic in &lt;code&gt;/usr/&lt;/code&gt;!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One of the core ideas of the approach described above is to make
the OS &lt;em&gt;hermetic&lt;/em&gt; in &lt;code&gt;/usr/&lt;/code&gt;, i.e. make it carry a comprehensive
description of what needs to be set up outside of it when
instantiated. Specifically, this means that system users that are
needed are declared in &lt;code&gt;systemd-sysusers&lt;/code&gt; snippets, and skeleton
files and directories are created via &lt;code&gt;systemd-tmpfiles&lt;/code&gt;. Moreover
additional partitions should be declared via &lt;code&gt;systemd-repart&lt;/code&gt;
drop-ins.&lt;/p&gt;
&lt;p&gt;At this point some distributions (such as Fedora) are (probably
more by accident than on purpose) already mostly hermetic in
&lt;code&gt;/usr/&lt;/code&gt;, at least for the most basic parts of the OS. However,
this is not complete: many daemons require to have specific
resources set up in &lt;code&gt;/var/&lt;/code&gt; or &lt;code&gt;/etc/&lt;/code&gt; before they can work, and
the relevant packages do not carry &lt;code&gt;systemd-tmpfiles&lt;/code&gt; descriptions
that add them if missing. So there are two ways you could help
here: politically, it would be highly relevant to convince
distributions that an OS that is hermetic in &lt;code&gt;/usr/&lt;/code&gt; is highly
desirable and it's a worthy goal for packagers to get there. More
specifically, it would be desirable if RPM/dpkg packages would
ship with enough &lt;code&gt;systemd-tmpfiles&lt;/code&gt; information so that
configuration files the packages strictly need for operation are
symlinked (or copied) from &lt;code&gt;/usr/share/factory/&lt;/code&gt; if they are
missing (even better of course would be if packages from their
upstream sources on would just work with an empty &lt;code&gt;/etc/&lt;/code&gt; and
&lt;code&gt;/var/&lt;/code&gt;, and create themselves what they need and default to good
defaults in absence of configuration files).&lt;/p&gt;
&lt;p&gt;Note that distributions that adopted &lt;code&gt;systemd-sysusers&lt;/code&gt;,
&lt;code&gt;systemd-tmpfiles&lt;/code&gt; and the &lt;code&gt;/usr/&lt;/code&gt; merge are already quite close
to providing an OS that is hermetic in &lt;code&gt;/usr/&lt;/code&gt;. These were the
big, the major advancements: making the image fully hermetic
should be less controversial ‚Äì at least that's my guess.&lt;/p&gt;
&lt;p&gt;Also note that making the OS hermetic in &lt;code&gt;/usr/&lt;/code&gt; is not just useful in
scenarios like the above. It also means that stuff &lt;a href="https://0pointer.net/blog/testing-my-system-code-in-usr-without-modifying-usr.html"&gt;like
this&lt;/a&gt;
and &lt;a href="https://0pointer.net/blog/running-an-container-off-the-host-usr.html"&gt;like
this&lt;/a&gt;
can work well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Fill in the gaps!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I already mentioned a couple of missing bits and pieces in the
implementation of the overall vision. In the &lt;code&gt;systemd&lt;/code&gt; project
we'd be delighted to review/merge any PRs that fill in the voids.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Build your own OS like this!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Of course, while we built all these building blocks and they have
been adopted to various levels and various purposes in the various
distributions, no one so far built an OS that puts things together
just like that. It would be excellent if we had communities that
work on building images like what I propose above. i.e. if you
want to work on making a secure GnomeBook as I suggest above a
reality that would be more than welcome.&lt;/p&gt;
&lt;p&gt;How could this look like specifically? Pick an existing
distribution, write a set of &lt;code&gt;mkosi&lt;/code&gt; descriptions plus some
additional drop-in files, and then build this on some build
infrastructure. While doing so, report the gaps, and help us
address them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Further Documentation of Used Components and Concepts&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-tmpfiles.html"&gt;&lt;code&gt;systemd-tmpfiles&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-sysusers.html"&gt;&lt;code&gt;systemd-sysusers&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-boot.html"&gt;&lt;code&gt;systemd-boot&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-stub.html"&gt;&lt;code&gt;systemd-stub&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-sysext.html"&gt;&lt;code&gt;systemd-sysext&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-portabled.service.html"&gt;&lt;code&gt;systemd-portabled&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://systemd.io/PORTABLE_SERVICES"&gt;Portable Services Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-repart.html"&gt;&lt;code&gt;systemd-repart&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html"&gt;&lt;code&gt;systemd-nspawn&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-sysupdate.html"&gt;&lt;code&gt;systemd-sysupdate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-creds.html"&gt;&lt;code&gt;systemd-creds&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://systemd.io/CREDENTIALS"&gt;System and Service Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-homed.service.html"&gt;&lt;code&gt;systemd-homed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://systemd.io/AUTOMATIC_BOOT_ASSESSMENT"&gt;Automatic Boot Assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://systemd.io/BOOT_LOADER_SPECIFICATION"&gt;Boot Loader Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://systemd.io/DISCOVERABLE_PARTITIONS"&gt;Discoverable Partitions Specification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://systemd.io/BUILDING_IMAGES"&gt;Safely Building Images&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Earlier Blog Stories Related to this Topic&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://0pointer.net/blog/authenticated-boot-and-disk-encryption-on-linux.html"&gt;The Strange State of Authenticated Boot and Disk Encryption on Generic Linux Distributions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://0pointer.net/blog/the-wondrous-world-of-discoverable-gpt-disk-images.html"&gt;The Wondrous World of Discoverable GPT Disk Images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://0pointer.net/blog/unlocking-luks2-volumes-with-tpm2-fido2-pkcs11-security-hardware-on-systemd-248.html"&gt;Unlocking LUKS2 volumes with TPM2, FIDO2, PKCS#11 Security Hardware on systemd 248&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://0pointer.net/blog/walkthrough-for-portable-services.html"&gt;Portable Services with systemd v239&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://0pointer.net/blog/mkosi-a-tool-for-generating-os-images.html"&gt;mkosi ‚Äî A Tool for Generating OS Images&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's all for now.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 03 May 2022 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2022-05-03:/blog/fitting-everything-together.html</guid><category>projects</category></item><item><title>Testing my System Code in /usr/ Without Modifying /usr/</title><link>https://0pointer.net/blog/testing-my-system-code-in-usr-without-modifying-usr.html</link><description>&lt;p&gt;&lt;a href="https://0pointer.net/blog/running-an-container-off-the-host-usr.html"&gt;I recently
blogged&lt;/a&gt;
about how to run a volatile &lt;code&gt;systemd-nspawn&lt;/code&gt; container from your
host's &lt;code&gt;/usr/&lt;/code&gt; tree, for quickly testing stuff in your host
environment, sharing your home drectory, but all that without making a
single modification to your host, and on an isolated node.&lt;/p&gt;
&lt;p&gt;The one-liner discussed in that blog story is great for testing during
system software development. Let's have a look at another &lt;code&gt;systemd&lt;/code&gt;
tool that I regularly use to test things during &lt;code&gt;systemd&lt;/code&gt; development,
in a relatively safe environment, but still taking full benefit of my
host's setup.&lt;/p&gt;
&lt;p&gt;Since a while now, systemd has been shipping with a simple component
called
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-sysext.html"&gt;&lt;code&gt;systemd-sysext&lt;/code&gt;&lt;/a&gt;. It's
primary usecase goes something like this: on one hand OS systems with
immutable &lt;code&gt;/usr/&lt;/code&gt; hierarchies are fantastic for security, robustness,
updating and simplicity, but on the other hand not being able to
quickly add stuff to &lt;code&gt;/usr/&lt;/code&gt; is just annoying.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;systemd-sysext&lt;/code&gt; is supposed to bridge this contradiction: when
invoked it will merge a bunch of "system extension" images into
&lt;code&gt;/usr/&lt;/code&gt; (and &lt;code&gt;/opt/&lt;/code&gt; as a matter of fact) through the use of read-only
&lt;code&gt;overlayfs&lt;/code&gt;, making all files shipped in the image instantly and
&lt;em&gt;atomically&lt;/em&gt; appear in &lt;code&gt;/usr/&lt;/code&gt; during runtime ‚Äî as if they always had
been there. Now, let's say you are building your locked down OS, with
an immutable &lt;code&gt;/usr/&lt;/code&gt; tree, and it comes without ability to log into,
without debugging tools, without anything you want and need when
trying to debug and fix something in the system. With &lt;code&gt;systemd-sysext&lt;/code&gt;
you could use a system extension image that contains all this, drop it
into the system, and activate it with &lt;code&gt;systemd-sysext&lt;/code&gt; so that it
genuinely extends the host system.&lt;/p&gt;
&lt;p&gt;(There are many other usecases for this tool, for example, you could
build systems that way that at their base use a generic image, but by
installing one or more system extensions get extended to with
additional more specific functionality, or drivers, or similar. The
tool is generic, use it for whatever you want, but for now let's not
get lost in listing all the possibilites.)&lt;/p&gt;
&lt;p&gt;What's particularly nice about the tool is that it supports
automatically discovered &lt;code&gt;dm-verity&lt;/code&gt; images, with signatures and
everything. So you can even do this in a fully authenticated,
measured, safe way. But I am digressing‚Ä¶&lt;/p&gt;
&lt;p&gt;Now that we (hopefully) have a rough understanding what
&lt;code&gt;systemd-sysext&lt;/code&gt; is and does, let's discuss how specficially we can
use this in the context of system software development, to safely use
and test bleeding edge development code ‚Äî built freshly from your
project's build tree ‚Äì in your host OS without having to risk that the
host OS is corrupted or becomes unbootable by stuff that didn't quite
yet work the way it was envisioned:&lt;/p&gt;
&lt;p&gt;The images &lt;code&gt;systemd-sysext&lt;/code&gt; merges into &lt;code&gt;/usr/&lt;/code&gt; can be of two kinds:
disk images with a file system/verity/signature, or simple, plain
directory trees. To make these images available to the tool, they can
be placed or symlinked into &lt;code&gt;/usr/lib/extensions/&lt;/code&gt;,
&lt;code&gt;/var/lib/extensions/&lt;/code&gt;, &lt;code&gt;/run/extensions/&lt;/code&gt; (and a bunch of
others). So if we now install our freshly built development software
into a subdirectory of those paths, then that's entirely sufficient to
make them valid system extension images in the sense of
&lt;code&gt;systemd-sysext&lt;/code&gt;, and thus can be merged into &lt;code&gt;/usr/&lt;/code&gt; to try them out.&lt;/p&gt;
&lt;p&gt;To be more specific: when I develop &lt;code&gt;systemd&lt;/code&gt; itself, here's what I do
regularly, to see how my new development version would behave on my
host system. As preparation I checked out the systemd development git
tree first of course, hacked around in it a bit, then built it with
meson/ninja. And now I want to test what I just built:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo DESTDIR=/run/extensions/systemd-test meson install -C build --quiet --no-rebuild &amp;amp;&amp;amp;
        sudo systemd-sysext refresh --force
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Explanation: first, we'll install my current build tree as a system
extension into &lt;code&gt;/run/extensions/systemd-test/&lt;/code&gt;. And then we apply it
to the host via the &lt;code&gt;systemd-sysext refresh&lt;/code&gt; command. This command
will search for all installed system extension images in the
aforementioned directories, then unmount (i.e. "unmerge") any
previously merged dirs from &lt;code&gt;/usr/&lt;/code&gt; and then freshly mount
(i.e. "merge") the new set of system extensions on top of &lt;code&gt;/usr/&lt;/code&gt;. And
just like that, I have installed my development tree of &lt;code&gt;systemd&lt;/code&gt; into
the host OS, and all that without actually modifying/replacing even a
single file on the host at all. Nothing here actually hit the disk!&lt;/p&gt;
&lt;p&gt;Note that all this works on any system really, it is not necessary
that the underlying OS even is designed with immutability in
mind. Just because the tool was developed with immutable systems in
mind it doesn't mean you couldn't use it on traditional systems where
&lt;code&gt;/usr/&lt;/code&gt; is mutable as well. In fact, my development box actually runs
regular Fedora, i.e. is RPM-based and thus has a mutable &lt;code&gt;/usr/&lt;/code&gt;
tree. As long as system extensions are applied the whole of &lt;code&gt;/usr/&lt;/code&gt;
becomes read-only though.&lt;/p&gt;
&lt;p&gt;Once I am done testing, when I want to revert to how things were without the image installed, it is sufficient to call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo systemd-sysext unmerge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there you go, all files my development tree generated are gone
again, and the host system is as it was before (and &lt;code&gt;/usr/&lt;/code&gt; mutable
again, in case one is on a traditional Linux distribution).&lt;/p&gt;
&lt;p&gt;Also note that a reboot (regardless if a &lt;em&gt;clean&lt;/em&gt; one or an &lt;em&gt;abnormal&lt;/em&gt;
shutdown) will undo the whole thing automatically, since we installed
our build tree into &lt;code&gt;/run/&lt;/code&gt; after all, i.e. a &lt;code&gt;tmpfs&lt;/code&gt; instance that is
flushed on boot. And given that the &lt;code&gt;overlayfs&lt;/code&gt; merge is a runtime
thing, too, the whole operation was executed without any
persistence. Isn't that great?&lt;/p&gt;
&lt;p&gt;(You might wonder why I specified &lt;code&gt;--force&lt;/code&gt; on the &lt;code&gt;systemd-sysext
refresh&lt;/code&gt; line earlier. That's because &lt;code&gt;systemd-sysext&lt;/code&gt; actually does
some minimal version compatibility checks when applying system
extension images. For that it will look at the host's
&lt;code&gt;/etc/os-release&lt;/code&gt; file with
&lt;code&gt;/usr/lib/extension-release.d/extension-release.&amp;lt;name&amp;gt;&lt;/code&gt;, and refuse
operaton if the image is not actually built for the host OS
version. Here we don't want to bother with dropping that file in
there, we &lt;em&gt;know&lt;/em&gt; already that the extension image is compatible with
the host, as we just built it on it. &lt;code&gt;--force&lt;/code&gt; allows us to skip the
version check.)&lt;/p&gt;
&lt;p&gt;You might wonder: what about the combination of the idea from the
previous blog story (regarding running container's off the host
&lt;code&gt;/usr/&lt;/code&gt; tree) with system extensions? Glad you asked. Right now we
have no support for this, but it's high on our TODO list (patches
welcome, of course!). i.e. a new switch for &lt;code&gt;systemd-nspawn&lt;/code&gt; called
&lt;code&gt;--system-extension=&lt;/code&gt; that would allow merging one or more such
extensions into the container tree booted would be stellar. With that,
with a single command I could run a container off my host OS but with
a development version of systemd dropped in, all without any
persistence. How awesome would that be?&lt;/p&gt;
&lt;p&gt;(Oh, and in case you wonder, all of this only works with distributions
that have completed the &lt;code&gt;/usr/&lt;/code&gt; merge. On legacy distributions that
didn't do that and still place parts of &lt;code&gt;/usr/&lt;/code&gt; all over the hierarchy
the above won't work, since merging &lt;code&gt;/usr/&lt;/code&gt; trees via &lt;code&gt;overlayfs&lt;/code&gt; is
pretty pointess if the OS is not hermetic in &lt;code&gt;/usr/&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;And that's all for now. Happy hacking!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 27 Apr 2022 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2022-04-27:/blog/testing-my-system-code-in-usr-without-modifying-usr.html</guid><category>projects</category></item><item><title>Running a Container off the Host /usr/</title><link>https://0pointer.net/blog/running-an-container-off-the-host-usr.html</link><description>&lt;p&gt;Apparently, in some parts of &lt;a href="https://lwn.net/Articles/890219/"&gt;this
world&lt;/a&gt;, the &lt;code&gt;/usr/&lt;/code&gt;-merge
transition is still ongoing. Let's take the opportunity to have a look
at one specific way to take benefit of the &lt;code&gt;/usr/&lt;/code&gt;-merge (and
associated work) IRL.&lt;/p&gt;
&lt;p&gt;I develop system-level software as you might know. Oftentimes I want
to run my development code on my PC but be reasonably sure it cannot
destroy or otherwise negatively affect my host system. Now I could set
up a container tree for that, and boot into that. But often I am too
lazy for that, I don't want to bother with a slow package manager
setting up a new OS tree for me. So here's what I often do instead ‚Äî
and this only works because of the &lt;code&gt;/usr/&lt;/code&gt;-merge.&lt;/p&gt;
&lt;p&gt;I run a command like the following (without any preparatory work):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemd-nspawn &lt;span class="se"&gt;\&lt;/span&gt;
        --directory&lt;span class="o"&gt;=&lt;/span&gt;/ &lt;span class="se"&gt;\&lt;/span&gt;
        --volatile&lt;span class="o"&gt;=&lt;/span&gt;yes &lt;span class="se"&gt;\&lt;/span&gt;
        -U &lt;span class="se"&gt;\&lt;/span&gt;
        --set-credential&lt;span class="o"&gt;=&lt;/span&gt;passwd.hashed-password.root:&lt;span class="k"&gt;$(&lt;/span&gt;mkpasswd mysecret&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        --set-credential&lt;span class="o"&gt;=&lt;/span&gt;firstboot.locale:C.UTF-8 &lt;span class="se"&gt;\&lt;/span&gt;
        --bind-user&lt;span class="o"&gt;=&lt;/span&gt;lennart &lt;span class="se"&gt;\&lt;/span&gt;
        -b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then I very quickly get a login prompt on a container that runs
the exact same software as my host ‚Äî but is also isolated from the
host. I do &lt;em&gt;not&lt;/em&gt; need to prepare any separate OS tree or anything
else. It &lt;em&gt;just&lt;/em&gt; works. And my host user &lt;code&gt;lennart&lt;/code&gt; is &lt;em&gt;just&lt;/em&gt; there,
ready for me to log into.&lt;/p&gt;
&lt;p&gt;So here's what these
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html"&gt;&lt;code&gt;systemd-nspawn&lt;/code&gt;&lt;/a&gt;
options specifically do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--directory=/&lt;/code&gt; tells &lt;code&gt;systemd-nspawn&lt;/code&gt; to run off the host OS'
    file hierarchy. That smells like danger of course, running two
    OS instances off the same directory hierarchy. But don't be
    scared, because:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--volatile=yes&lt;/code&gt; enables volatile mode. Specifically this means
    what we configured with &lt;code&gt;--directory=/&lt;/code&gt; as root file system is
    slightly rearranged. Instead of mounting that tree as it is, we'll
    mount a &lt;code&gt;tmpfs&lt;/code&gt; instance as actual root file system, and then
    mount the &lt;code&gt;/usr/&lt;/code&gt; subdirectory of the specified hierarchy into the
    &lt;code&gt;/usr/&lt;/code&gt; subdirectory of the container file hierarchy in read-only
    fashion ‚Äì and &lt;em&gt;only&lt;/em&gt; that directory. So now we have a container
    directory tree that is basically empty, but imports all host OS
    binaries and libraries into its &lt;code&gt;/usr/&lt;/code&gt; tree. All software
    installed on the host is also available in the container with no
    manual work. This mechanism only works because on &lt;code&gt;/usr/&lt;/code&gt;-merged
    OSes vendor resources are monopolized at a single place:
    &lt;code&gt;/usr/&lt;/code&gt;. It's sufficient to share that one directory with the
    container to get a second instance of the host OS running. Note
    that this means &lt;code&gt;/etc/&lt;/code&gt; and &lt;code&gt;/var/&lt;/code&gt; will be entirely empty
    initially when this second system boots up. Thankfully, forward
    looking distributions (such as Fedora) have adopted
    &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-tmpfiles.html"&gt;&lt;code&gt;systemd-tmpfiles&lt;/code&gt;&lt;/a&gt;
    and
    &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-sysusers.html"&gt;&lt;code&gt;systemd-sysusers&lt;/code&gt;&lt;/a&gt;
    quite pervasively, so that system users and files/directories
    required for operation are created automatically should they be
    missing. Thus, even though at boot the mentioned directories are
    initially empty, once the system is booted up they are
    sufficiently populated for things to just work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-U&lt;/code&gt; means we'll enable user namespacing, in fully automatic
    mode. This does three things: it picks a free host UID range
    dynamically for the container, then sets up user namespacing for
    the container processes mapping host UID range to UIDs 0‚Ä¶65534 in
    the container. It then sets up a similar UID mapped mount on the
    &lt;code&gt;/usr/&lt;/code&gt; tree of the container. Net effect: file ownerships as set
    on the host OS tree appear as they belong to the very &lt;em&gt;same&lt;/em&gt; users
    inside of the container environment, except that we use user
    namespacing for everything, and thus the users are &lt;em&gt;actually&lt;/em&gt;
    neatly isolated from the host.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--set-credential=passwd.hashed-password.root:$(mkpasswd
    mysecret)&lt;/code&gt; passes a &lt;em&gt;credential&lt;/em&gt; to the container. Credentials are
    bits of data that you can pass to systemd services and whole
    systems. They are actually awesome concepts (e.g. they support
    TPM2 authentication/encryption that just works!) but I am not going
    to go into details around that, given it's off-topic in this
    specific scenario. Here we just take benefit of the fact that
    &lt;code&gt;systemd-sysusers&lt;/code&gt; looks for a credential called
    &lt;code&gt;passwd.hashed-password.root&lt;/code&gt; to initialize the root password of
    the system from. We set it to &lt;code&gt;mysecret&lt;/code&gt;. This means once the
    system is booted up we can log in as &lt;code&gt;root&lt;/code&gt; and the supplied
    password. Yay. (Remember, &lt;code&gt;/etc/&lt;/code&gt; is initially empty on this
    container, and thus also carries no &lt;code&gt;/etc/passwd&lt;/code&gt; or
    &lt;code&gt;/etc/shadow&lt;/code&gt;, and thus has no root user record, and thus no root
    password.)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://linux.die.net/man/1/mkpasswd"&gt;&lt;code&gt;mkpasswd&lt;/code&gt;&lt;/a&gt; is a tool then
converts a plain text password into a UNIX hashed password, which
is what this specific credential expects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similar, &lt;code&gt;--set-credential=firstboot.locale:C.UTF-8&lt;/code&gt; tells the
    &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-firstboot.html"&gt;&lt;code&gt;systemd-firstboot&lt;/code&gt;&lt;/a&gt;
    service in the container to initialize &lt;code&gt;/etc/locale.conf&lt;/code&gt; with
    this locale.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--bind-user=lennart&lt;/code&gt; binds the host user &lt;code&gt;lennart&lt;/code&gt; into the
    container, also as user &lt;code&gt;lennart&lt;/code&gt;. This does two things: it mounts
    the host user's home directory into the container. It also copies
    a minimal user record of the specified user into the container
    that
    &lt;a href="https://www.freedesktop.org/software/systemd/man/nss-systemd.html"&gt;&lt;code&gt;nss-systemd&lt;/code&gt;&lt;/a&gt;
    then picks up and includes in the regular user database. This
    means, once the container is booted up I can log in as &lt;code&gt;lennart&lt;/code&gt;
    with my regular password, and once I logged in I will see my
    regular host home directory, and can make changes to it. Yippieh!
    (This does a couple of more things, such as UID mapping and
    things, but let's not get lost in too much details.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, if I run this, I will very quickly get a login prompt, where I can
log into as my regular user. I have full access to my host home
directory, but otherwise everything is nicely isolated from the host,
and changes outside of the home directory are either prohibited or are
volatile, i.e. go to a &lt;code&gt;tmpfs&lt;/code&gt; instance whose lifetime is bound to the
container's lifetime: when I shut down the container I just started,
then any changes outside of my user's home directory are lost.&lt;/p&gt;
&lt;p&gt;Note that while here I use &lt;code&gt;--volatile=yes&lt;/code&gt; in combination with
&lt;code&gt;--directory=/&lt;/code&gt; you can actually use it on any OS hierarchy, i.e. just
about any directory that contains OS binaries.&lt;/p&gt;
&lt;p&gt;Similar, the &lt;code&gt;--bind-user=&lt;/code&gt; stuff works with any OS hierarchy too (but
do note that only systemd 249 and newer will pick up the user records
passed to the container that way, i.e. this requires at least v249
both on the host and in the container to work).&lt;/p&gt;
&lt;p&gt;Or in short: the possibilities are endless!&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;For this all to work, you need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A recent kernel (5.15 should suffice, as it brings UID mapped
   mounts for the most common file systems, so that &lt;code&gt;-U&lt;/code&gt; and
   &lt;code&gt;--bind-user=&lt;/code&gt; can work well.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A recent systemd (249 should suffice, which brings &lt;code&gt;--bind-user=&lt;/code&gt;,
   and a &lt;code&gt;-U&lt;/code&gt; switch backed by UID mapped mounts).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A distribution that adopted the &lt;code&gt;/usr/&lt;/code&gt;-merge, &lt;code&gt;systemd-tmpfiles&lt;/code&gt;
   and &lt;code&gt;systemd-sysusers&lt;/code&gt; so that the directory hierarchy and user
   databases are automatically populated when empty at boot.  (Fedora
   35 should suffice.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Limitations&lt;/h2&gt;
&lt;p&gt;While a lot of today's software actually out of the box works well on
systems that come up with an unpopulated &lt;code&gt;/etc/&lt;/code&gt; and &lt;code&gt;/var/&lt;/code&gt;, and
either fall back to reasonable built-in defaults, or deploy
&lt;code&gt;systemd-tmpfiles&lt;/code&gt; to create what is missing, things aren't perfect:
some software typically installed an desktop OSes will fail to start
when invoked in such a container, and be visible as ugly failed
services, but it won't stop me from logging in and using the system
for what I want to use it. It would be excellent to get that fixed,
though. This can either be fixed in the relevant software upstream
(i.e. if opening your configuration file fails with &lt;code&gt;ENOENT&lt;/code&gt;, then
just default to reasonable defaults), or in the distribution packaging
(i.e. add a
&lt;a href="https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html"&gt;&lt;code&gt;tmpfiles.d/&lt;/code&gt;&lt;/a&gt;
file that copies or symlinks in skeleton configuration from
&lt;code&gt;/usr/share/factory/etc/&lt;/code&gt; via the &lt;code&gt;C&lt;/code&gt; or &lt;code&gt;L&lt;/code&gt; line types).&lt;/p&gt;
&lt;p&gt;And then there's certain software dealing with hardware management and
similar that simply cannot work in a container (as device APIs on
Linux are generally not virtualized for containers) reasonably. It
would be excellent if software like that would be updated to carry
&lt;code&gt;ConditionVirtualization=!container&lt;/code&gt; or
&lt;code&gt;ConditionPathIsReadWrite=/sys&lt;/code&gt; conditionalization in their unit
files, so that it is automatically ‚Äì cleanly ‚Äì skipped when executed
in such a container environment.&lt;/p&gt;
&lt;p&gt;And that's all for now.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 06 Apr 2022 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2022-04-06:/blog/running-an-container-off-the-host-usr.html</guid><category>projects</category></item><item><title>Authenticated Boot and Disk Encryption on Linux</title><link>https://0pointer.net/blog/authenticated-boot-and-disk-encryption-on-linux.html</link><description>&lt;h1&gt;The Strange State of Authenticated Boot and Disk Encryption on Generic Linux Distributions&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;TL;DR: Linux has been supporting Full Disk Encryption (FDE) and
technologies such as UEFI SecureBoot and TPMs for a long
time. However, the way they are set up by most distributions is not as
secure as they should be, and in some ways quite frankly weird. In
fact, right now, your data is probably more secure if stored on
current ChromeOS, Android, Windows or MacOS devices, than it is on
typical Linux distributions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Generic Linux distributions (i.e. Debian, Fedora, Ubuntu, ‚Ä¶) adopted
Full Disk Encryption (FDE) more than 15 years ago, with the
LUKS/cryptsetup infrastructure. It was a big step forward to a more
secure environment. Almost ten years ago the big distributions started
adding UEFI SecureBoot to their boot process. Support for Trusted
Platform Modules (TPMs) has been added to the distributions a long
time ago as well ‚Äî but even though many PCs/laptops these days have
TPM chips on-board it's generally not used in the default setup of
generic Linux distributions.&lt;/p&gt;
&lt;p&gt;How these technologies currently fit together on generic Linux
distributions doesn't really make too much sense to me ‚Äî and falls
short of what they could actually deliver. In this story I'd like to
have a closer look at why I think that, and what I propose to do about
it.&lt;/p&gt;
&lt;h2&gt;The Basic Technologies&lt;/h2&gt;
&lt;p&gt;Let's have a closer look what these technologies actually deliver:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;LUKS/&lt;code&gt;dm-crypt&lt;/code&gt;/&lt;code&gt;cryptsetup&lt;/code&gt; provide disk encryption, and optionally
   data authentication. Disk encryption means that reading the data in
   clear-text form is only possible if you possess a secret of some
   form, usually a password/passphrase. Data authentication means that
   no one can make changes to the data on disk unless they possess a
   secret of some form. Most distributions only enable the former
   though ‚Äî the latter is a more recent addition to LUKS/cryptsetup,
   and is not used by default on most distributions (though it
   probably should be). Closely related to LUKS/&lt;code&gt;dm-crypt&lt;/code&gt; is
   &lt;code&gt;dm-verity&lt;/code&gt; (which can authenticate immutable volumes) and
   &lt;code&gt;dm-integrity&lt;/code&gt; (which can authenticate writable volumes, among
   other things).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UEFI SecureBoot provides mechanisms for authenticating boot loaders
   and other pre-OS binaries before they are invoked. If those boot
   loaders then authenticate the next step of booting in a similar
   fashion there's a chain of trust which can ensure that only code
   that has some level of trust associated with it will run on the
   system. Authentication of boot loaders is done via cryptographic
   signatures: the OS/boot loader vendors cryptographically sign their
   boot loader binaries. The cryptographic certificates that may be
   used to validate these signatures are then signed by Microsoft, and
   since Microsoft's certificates are basically built into all of
   today's PCs and laptops this will provide some basic trust chain:
   if you want to modify the boot loader of a system you must have
   access to the private key used to sign the code (or to the private
   keys further up the certificate chain).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TPMs do many things. For this text we'll focus one facet: they can
   be used to protect secrets (for example for use in disk encryption,
   see above), that are released only if the code that booted the host
   can be authenticated in some form. This works roughly like this:
   every component that is used during the boot process (i.e. code,
   certificates, configuration, ‚Ä¶) is hashed with a cryptographic hash
   function before it is used. The resulting hash is written to some
   small volatile memory the TPM maintains that is write-only (the so
   called Platform Configuration Registers, "PCRs"): each step of the
   boot process will write hashes of the resources needed by the next
   part of the boot process into these PCRs. The PCRs cannot be
   written freely: the hashes written are combined with what is
   already stored in the PCRs ‚Äî also through hashing and the result of
   that then replaces the previous value. Effectively this means: only
   if every component involved in the boot matches expectations the
   hash values exposed in the TPM PCRs match the expected values
   too. And if you then use those values to unlock the secrets you
   want to protect you can guarantee that the key is only released to
   the OS if the expected OS and configuration is booted. The process
   of hashing the components of the boot process and writing that to
   the TPM PCRs is called "measuring". What's also important to
   mention is that the secrets are not only protected by these PCR
   values but encrypted with a "seed key" that is generated on the TPM
   chip itself, and cannot leave the TPM (at least so goes the
   theory). The idea is that you cannot read out a TPM's seed key, and
   thus you cannot duplicate the chip: unless you possess the
   original, physical chip you cannot retrieve the secret it might be
   able to unlock for you. Finally, TPMs can enforce a limit on unlock
   attempts per time ("anti-hammering"): this makes it hard to brute
   force things: if you can only execute a certain number of unlock
   attempts within some specific time then brute forcing will be
   prohibitively slow.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How Linux Distributions use these Technologies&lt;/h2&gt;
&lt;p&gt;As mentioned already, Linux distributions adopted the first two
of these technologies widely, the third one not so much.&lt;/p&gt;
&lt;p&gt;So typically, here's how the boot process of Linux distributions works
these days:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The UEFI firmware invokes a piece of code called "shim" (which is
   stored in the EFI System Partition ‚Äî the "ESP" ‚Äî of your system),
   that more or less is just a list of certificates compiled into code
   form. The shim is signed with the aforementioned Microsoft key,
   that is built into all PCs/laptops. This list of certificates then
   can be used to validate the next step of the boot process. The shim
   is measured by the firmware into the TPM. (Well, the shim can do a
   bit more than what I describe here, but this is outside of the
   focus of this article.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The shim then invokes a boot loader (often Grub) that is signed by
   a private key owned by the distribution vendor. The boot loader is
   stored in the ESP as well, plus some other places (i.e. possibly a
   separate boot partition). The corresponding certificate is included
   in the list of certificates built into the shim. The boot loader
   components are also measured into the TPM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The boot loader then invokes the kernel and passes it an initial
   RAM disk image (initrd), which contains initial userspace code. The
   kernel itself is signed by the distribution vendor too. It's also
   validated via the shim. The initrd is not validated, though
   (!). The kernel is measured into the TPM, the initrd sometimes too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The kernel unpacks the initrd image, and invokes what is contained
   in it. Typically, the initrd then asks the user for a password for
   the encrypted root file system. The initrd then uses that to set up
   the encrypted volume. No code authentication or TPM measurements
   take place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The initrd then transitions into the root file system. No code
   authentication or TPM measurements take place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the OS itself is up the user is prompted for their user name,
   and their password. If correct, this will unlock the user account:
   the system is now ready to use. At this point no code
   authentication, no TPM measurements take place. Moreover, the
   user's password is not used to unlock any data, it's used only to
   allow or deny the login attempt ‚Äî the user's data has already been
   decrypted a long time ago, by the initrd, as mentioned above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;What you'll notice here of course is that code validation happens for
the shim, the boot loader and the kernel, but not for the initrd or
the main OS code anymore. TPM measurements might go one step further:
the initrd is measured sometimes too, if you are lucky. Moreover, you
might notice that the disk encryption password and the user password
are inquired by code that is not validated, and is thus not safe from
external manipulation. You might also notice that even though TPM
measurements of boot loader/OS components are done nothing actually
ever makes use of the resulting PCRs in the typical setup.&lt;/p&gt;
&lt;h2&gt;Attack Scenarios&lt;/h2&gt;
&lt;p&gt;Of course, before determining whether the setup described above makes
sense or not, one should have an idea what one actually intends to
protect against.&lt;/p&gt;
&lt;p&gt;The most basic attack scenario to focus on is probably that you want
to be reasonably sure that if someone steals your laptop that contains
all your data then this data remains confidential. The model described
above probably delivers that to some degree: the full disk encryption
when used with a reasonably strong password should make it hard for
the laptop thief to access the data. The data is as secure as the
password used is strong. The attacker might attempt to brute force the
password, thus if the password is not chosen carefully the attacker
might be successful.&lt;/p&gt;
&lt;p&gt;Two more interesting attack scenarios go something like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Instead of stealing your laptop the attacker takes the harddisk
   from your laptop while you aren't watching (e.g. while you went for
   a walk and left it at home or in your hotel room), makes a copy of
   it, and then puts it back. You'll never notice they did that. The
   attacker then analyzes the data in their lab, maybe trying to brute
   force the password. In this scenario you won't even know that your
   data is at risk, because for you nothing changed ‚Äî unlike in the
   basic scenario above. If the attacker manages to break your
   password they have full access to the data included on it,
   i.e. everything you so far stored on it, but not necessarily on
   what you are going to store on it later. This scenario is worse
   than the basic one mentioned above, for the simple fact that you
   won't know that you might be attacked. (This scenario could be
   extended further: maybe the attacker has a chance to watch you type
   in your password or so, effectively lowering the password
   strength.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instead of stealing your laptop the attacker takes the harddisk
   from your laptop while you aren't watching, inserts backdoor code
   on it, and puts it back. In this scenario you won't know your data
   is at risk, because physically everything is as before. What's
   really bad though is that the attacker gets access to anything you
   do on your laptop, both the data already on it, and whatever you
   will do in the future.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I think in particular this backdoor attack scenario is something we
should be concerned about. We know for a fact that attacks like that
happen all the time (Pegasus, industry espionage, ‚Ä¶), hence we should
make them hard.&lt;/p&gt;
&lt;h2&gt;Are we Safe?&lt;/h2&gt;
&lt;p&gt;So, does the scheme so far implemented by generic Linux distributions
protect us against the latter two scenarios? Unfortunately not at
all. Because distributions set up disk encryption the way they do, and
only bind it to a user password, an attacker can easily duplicate the
disk, and then attempt to brute force your password. What's worse:
since code authentication ends at the kernel ‚Äî and the initrd is not
authenticated anymore ‚Äî, backdooring is trivially easy: an attacker
can change the initrd any way they want, without having to fight any
kind of protections. And given that FDE unlocking is implemented in
the initrd, and it's the initrd that asks for the encryption password
things are just too easy: an attacker could trivially easily insert
some code that picks up the FDE password as you type it in and send it
wherever they want. And not just that: since once they are in they are
in, they can do anything they like for the rest of the system's
lifecycle, with full privileges ‚Äî including installing backdoors for
versions of the OS or kernel that are installed on the device in the
future, so that their backdoor remains open for as long as they like.&lt;/p&gt;
&lt;p&gt;That is sad of course. It's particular sad given that the other
popular OSes all address this much better. ChromeOS, Android, Windows
and MacOS all have way better built-in protections against attacks
like this. And it's why one can certainly claim that your data is
probably better protected right now if you store it on those OSes then
it is on generic Linux distributions.&lt;/p&gt;
&lt;p&gt;(Yeah, I know that there are some niche distros which do this better,
and some hackers hack their own. But I care about general purpose
distros here, i.e. the big ones, that most people base their work on.)&lt;/p&gt;
&lt;p&gt;Note that there are more problems with the current setup. For example,
it's really weird that during boot the user is queried for an FDE
password which actually protects their data, and then once the system
is up they are queried again ‚Äì now asking for a username, and another
password. And the weird thing is that this second authentication that
appears to be user-focused doesn't really protect the user's data
anymore ‚Äî at that moment the data is already unlocked and
accessible. The username/password query is supposed to be useful in
multi-user scenarios of course, but how does that make any sense,
given that these multiple users would all have to know a disk
encryption password that unlocks the whole thing during the FDE step,
and thus they have access to every user's data anyway if they make an
offline copy of the harddisk?&lt;/p&gt;
&lt;h2&gt;Can we do better?&lt;/h2&gt;
&lt;p&gt;Of course we can, and that is what this story is actually supposed to
be about.&lt;/p&gt;
&lt;p&gt;Let's first figure out what the minimal issues we should fix are (at
least in my humble opinion):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The initrd must be authenticated before being booted into. (And
   measured unconditionally.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The OS binary resources (i.e. &lt;code&gt;/usr/&lt;/code&gt;) must be authenticated before
   being booted into. (But don't need to be encrypted, since everyone
   has the same anyway, there's nothing to hide here.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The OS configuration and state (i.e. &lt;code&gt;/etc/&lt;/code&gt; and &lt;code&gt;/var/&lt;/code&gt;) must be
   encrypted, and authenticated before they are used. The encryption
   key should be bound to the TPM device; i.e system data should be
   locked to a security concept belonging to the system, not the user.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user's home directory (i.e. &lt;code&gt;/home/lennart/&lt;/code&gt; and similar) must
   be encrypted and authenticated. The unlocking key should be bound
   to a user password or user security token (FIDO2 or PKCS#11 token);
   i.e. user data should be locked to a security concept belonging to
   the user, not the system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or to summarize this differently:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Every single component of the boot
   process and OS needs to be authenticated, i.e. all of shim (done),
   boot loader (done), kernel (done), initrd (missing so far), OS binary
   resources (missing so far), OS configuration and state (missing so
   far), the user's home (missing so far).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encryption is necessary for the OS configuration and state (bound
   to TPM), and for the user's home directory (bound to a user
   password or user security token).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;In Detail&lt;/h2&gt;
&lt;p&gt;Let's see how we can achieve the above in more detail.&lt;/p&gt;
&lt;h3&gt;How to Authenticate the initrd&lt;/h3&gt;
&lt;p&gt;At the moment initrds are generated on the installed host via scripts
(dracut and similar) that try to figure out a minimal set of binaries
and configuration data to build an initrd that contains just enough to
be able to find and set up the root file system. What is included in
the initrd hence depends highly on the individual installation and its
configuration. Pretty likely no two initrds generated that way will be
fully identical due to this. This model clearly has benefits: the
initrds generated this way are very small and minimal, and support
exactly what is necessary for the system to boot, and not less or
more. It comes with serious drawbacks too though: the generation
process is fragile and sometimes more akin to black magic than
following clear rules: the generator script natively has to understand
a myriad of storage stacks to determine what needs to be included and
what not. It also means that authenticating the image is hard: given
that each individual host gets a different specialized initrd, it
means we cannot just sign the initrd with the vendor key like we sign
the kernel. If we want to keep this design we'd have to figure out
some other mechanism (e.g. a per-host signature key ‚Äì that is
generated locally; or by authenticating it with a message
authentication code bound to the TPM). While these approaches are
certainly thinkable, I am not convinced they actually are a good idea
though: locally and dynamically generated per-host initrds is
something we probably should move away from.&lt;/p&gt;
&lt;p&gt;If we move away from locally generated initrds, things become a lot
simpler. If the distribution vendor generates the initrds on their
build systems then it can be attached to the kernel image itself, and
thus be signed and measured along with the kernel image, without any
further work. This simplicity is simply lovely. Besides robustness and
reproducibility this gives us an easy route to authenticated initrds.&lt;/p&gt;
&lt;p&gt;But of course, nothing is really that simple: working with
vendor-generated initrds means that we can't adjust them anymore to
the specifics of the individual host: if we pre-build the initrds and
include them in the kernel image in immutable fashion then it becomes
harder to support complex, more exotic storage or to parameterize it
with local network server information, credentials, passwords, and so
on. Now, for my simple laptop use-case these things don't matter,
there's no need to extend/parameterize things, laptops and their
setups are not that wildly different. But what to do about the cases
where we want both: extensibility to cover for less common storage
subsystems (iscsi, LVM, multipath, drivers for exotic hardware‚Ä¶) and
parameterization?&lt;/p&gt;
&lt;p&gt;Here's a proposal how to achieve that: let's build a basic initrd into
the kernel as suggested, but then do two things to make this scheme
both extensible and parameterizable, without compromising security.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Let's define a way how the basic initrd can be extended with
   additional files, which are stored in separate "extension
   images". The basic initrd should be able to discover these extension
   images, authenticate them and then activate them, thus extending
   the initrd with additional resources on-the-fly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let's define a way how we can safely pass additional parameters to
   the kernel/initrd (and actually the rest of the OS, too) in an
   authenticated (and possibly encrypted) fashion. Parameters in this
   context can be anything specific to the local installation,
   i.e. server information, security credentials, certificates, SSH
   server keys, or even just the root password that shall be able to
   unlock the root account in the initrd ‚Ä¶&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In such a scheme we should be able to deliver everything we are
looking for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We'll have a full trust chain for the code: the boot loader will
   authenticate and measure the kernel and basic initrd. The initrd
   extension images will then be authenticated by the basic initrd
   image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We'll have authentication for all the parameters passed to the
   initrd.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This so far sounds very unspecific? Let's make it more specific by
looking closer at the components I'd suggest to be used for this
logic:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;systemd&lt;/code&gt; suite since a few months contains a subsystem
   implementing &lt;em&gt;system&lt;/em&gt; &lt;em&gt;extensions&lt;/em&gt; (v248). System extensions are
   ultimately just disk images (for example a squashfs file system in
   a GPT envelope) that can &lt;em&gt;extend&lt;/em&gt; an underlying OS tree. Extending
   in this regard means they simply add additional files and
   directories into the OS tree, i.e. below &lt;code&gt;/usr/&lt;/code&gt;. For a longer
   explanation see
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-sysext.html"&gt;systemd-sysext(8)&lt;/a&gt;. When
   a system extension is activated it is simply mounted and then
   merged into the main &lt;code&gt;/usr/&lt;/code&gt; tree via a read-only overlayfs
   mount. Now what's particularly nice about them in this context we
   are talking about here is that the extension images may carry
   &lt;em&gt;dm-verity&lt;/em&gt; authentication data, and PKCS#7 signatures (&lt;a href="https://github.com/systemd/systemd/pull/20691"&gt;once this
   is merged, that
   is, i.e. v250&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;systemd&lt;/code&gt; suite also contains a concept called service
   "credentials". These are small pieces of information passed to
   services in a secure way. One key feature of these credentials is
   that they can be encrypted and authenticated in a very simple way
   with a key bound to the TPM (v250). See
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#LoadCredential=ID:PATH"&gt;LoadCredentialEncrypted=&lt;/a&gt;
   and
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-creds.html"&gt;systemd-creds(1)&lt;/a&gt;
   for details. They are great for safely storing SSL private keys and
   similar on your system, but they also come handy for parameterizing
   initrds: an encrypted credential is just a file that can only be
   decoded if the right TPM is around with the right PCR values set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;systemd&lt;/code&gt; suite contains a component called
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-stub.html"&gt;systemd-stub(7)&lt;/a&gt;. It's
   an EFI stub, i.e. a small piece of code that is attached to a
   kernel image, and turns the kernel image into a regular EFI binary
   that can be directly executed by the firmware (or a boot
   loader). This stub has a number of nice features (for example, it
   can show a boot splash before invoking the Linux kernel itself and
   such). &lt;a href="https://github.com/systemd/systemd/pull/20789"&gt;Once this work is
   merged (v250)&lt;/a&gt; the stub
   will support one more feature: it will automatically search for
   system extension image files and credential files next to the
   kernel image file, measure them and pass them on to the main initrd
   of the host.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Putting this together we have nice way to provide fully authenticated
kernel images, initrd images and initrd extension images; as well as
encrypted and authenticated parameters via the credentials logic.&lt;/p&gt;
&lt;p&gt;How would a distribution actually make us of this? A distribution
vendor would pre-build the basic initrd, and glue it into the kernel
image, and sign that as a whole. Then, for each supposed extension of
the basic initrd (e.g. one for iscsi support, one for LVM, one for
multipath, ‚Ä¶), the vendor would use a tool such as
&lt;a href="https://github.com/systemd/mkosi"&gt;mkosi&lt;/a&gt; to build an extension image,
i.e. a GPT disk image containing the files in squashfs format, a
Verity partition that authenticates it, plus a PKCS#7 signature
partition that validates the root hash for the dm-verity partition,
and that can be checked against a key provided by the boot loader or
main initrd. Then, any parameters for the initrd will be encrypted
using &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-creds.html"&gt;systemd-creds encrypt
-T&lt;/a&gt;. The
resulting encrypted credentials and the initrd extension images are
then simply placed next to the kernel image in the ESP (or boot
partition). Done.&lt;/p&gt;
&lt;p&gt;This checks all boxes: everything is authenticated and measured, the
credentials also encrypted. Things remain extensible and modular, can
be pre-built by the vendor, and installation is as simple as dropping
in one file for each extension and/or credential.&lt;/p&gt;
&lt;h3&gt;How to Authenticate the Binary OS Resources&lt;/h3&gt;
&lt;p&gt;Let's now have a look how to authenticate the Binary OS resources,
i.e. the stuff you find in &lt;code&gt;/usr/&lt;/code&gt;, i.e. the stuff traditionally
shipped to the user's system via RPMs or DEBs.&lt;/p&gt;
&lt;p&gt;I think there are three relevant ways how to authenticate this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make &lt;code&gt;/usr/&lt;/code&gt; a &lt;code&gt;dm-verity&lt;/code&gt; volume. &lt;code&gt;dm-verity&lt;/code&gt; is a concept
   implemented in the Linux kernel that provides authenticity to
   read-only block devices: every read access is cryptographically
   verified against a &lt;em&gt;top-level&lt;/em&gt; &lt;em&gt;hash&lt;/em&gt; &lt;em&gt;value&lt;/em&gt;. This top-level
   hash is typically a 256bit value that you can either encode in the
   kernel image you are using, or cryptographically sign (&lt;a href="https://github.com/systemd/systemd/pull/20691"&gt;which is
   particularly nice once this is
   merged&lt;/a&gt;). I think
   this is actually the best approach since it makes the &lt;code&gt;/usr/&lt;/code&gt; tree
   entirely immutable in a very simple way. However, this also means
   that the whole of &lt;code&gt;/usr/&lt;/code&gt; needs to be updated as once, i.e. the
   traditional &lt;code&gt;rpm&lt;/code&gt;/&lt;code&gt;apt&lt;/code&gt; based update logic cannot work in this
   mode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make &lt;code&gt;/usr/&lt;/code&gt; a &lt;code&gt;dm-integrity&lt;/code&gt; volume. &lt;code&gt;dm-integrity&lt;/code&gt; is a concept
   provided by the Linux kernel that offers integrity guarantees to
   writable block devices, i.e. in some ways it can be considered to be
   a bit like &lt;code&gt;dm-verity&lt;/code&gt; while permitting write access. It can be
   used in three ways, one of which I think is particularly relevant
   here. The first way is with a simple hash function in "stand-alone"
   mode: this is not too interesting here, it just provides greater
   data safety for file systems that don't hash check their files' data
   on their own. The second way is in combination with &lt;code&gt;dm-crypt&lt;/code&gt;,
   i.e. with disk encryption. In this case it adds authenticity to
   confidentiality: only if you know the right secret you can read and
   make changes to the data, and any attempt to make changes without
   knowing this secret key will be detected as IO error on next read
   by those in possession of the secret (more about this below). The
   third way is the one I think is most interesting here: in
   "stand-alone" mode, but with a keyed hash function
   (e.g. HMAC). What's this good for? This provides authenticity
   without encryption: if you make changes to the disk without knowing
   the secret this will be noticed on the next read attempt of the
   data and result in IO errors. This mode provides what we want
   (authenticity) and doesn't do what we don't need (encryption). Of
   course, the secret key for the HMAC must be provided somehow, I
   think ideally by the TPM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make &lt;code&gt;/usr/&lt;/code&gt; a &lt;code&gt;dm-crypt&lt;/code&gt; (LUKS) + &lt;code&gt;dm-integrity&lt;/code&gt; volume. This
   provides both authenticity and encryption. The latter isn't
   typically needed for &lt;code&gt;/usr/&lt;/code&gt; given that it generally contains no
   secret data: anyone can download the binaries off the Internet
   anyway, and the sources too. By encrypting this you'll waste CPU
   cycles, but beyond that it doesn't hurt much. (Admittedly, some
   people might want to hide the precise set of packages they have
   installed, since it of course does reveal a bit of information
   about you: i.e. what you are working on, maybe what your job is ‚Äì
   think: if you are a hacker you have hacking tools installed ‚Äì and
   similar). Going this way might simplify things in some cases, as it
   means you don't have to distinguish "OS binary resources" (i.e
   &lt;code&gt;/usr/&lt;/code&gt;) and "OS configuration and state" (i.e. &lt;code&gt;/etc/&lt;/code&gt; + &lt;code&gt;/var/&lt;/code&gt;,
   see below), and just make it the same volume. Here too, the secret
   key must be provided somehow, I think ideally by the TPM.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All three approach are valid. The first approach has my primary
sympathies, but for distributions not willing to abandon client-side
updates via RPM/dpkg this is not an option, in which case I would
propose the other two approaches for these cases.&lt;/p&gt;
&lt;p&gt;The LUKS encryption key (and in case of &lt;code&gt;dm-integrity&lt;/code&gt; standalone mode
the key for the keyed hash function) should be bound to the TPM. Why
the TPM for this? You could also use a user password, a FIDO2 or
PKCS#11 security token ‚Äî but I think TPM is the right choice: why
that? To reduce the requirement for repeated authentication, i.e. that
you first have to provide the disk encryption password, and then you
have to login, providing another password. It should be possible that
the system boots up unattended and then only one authentication prompt
is needed to unlock the user's data properly. The TPM provides a way
to do this in a reasonably safe and fully unattended way. Also, when
we stop considering just the laptop use-case for a moment: on servers
interactive disk encryption prompts don't make much sense ‚Äî the fact
that TPMs can provide secrets without this requiring user interaction
and thus the ability to work in entirely unattended environments is
quite desirable. Note that
&lt;a href="https://www.freedesktop.org/software/systemd/man/crypttab.html"&gt;crypttab(5)&lt;/a&gt;
as implemented by &lt;code&gt;systemd&lt;/code&gt; (v248) provides native support for
authentication via password, via TPM2, via PKCS#11 or via FIDO2, so
the choice is ultimately all yours.&lt;/p&gt;
&lt;h3&gt;How to Encrypt/Authenticate OS Configuration and State&lt;/h3&gt;
&lt;p&gt;Let's now look at the OS configuration and state, i.e. the stuff in
&lt;code&gt;/etc/&lt;/code&gt; and &lt;code&gt;/var/&lt;/code&gt;. It probably makes sense to not consider these two
hierarchies independently but instead just consider this to be the
root file system. If the OS binary resources are in a separate file
system it is then mounted onto the &lt;code&gt;/usr/&lt;/code&gt; sub-directory of the root
file system.&lt;/p&gt;
&lt;p&gt;The OS configuration and state (or: root file system) should be both
encrypted and authenticated: it might contain secret keys, user
passwords, privileged logs and similar. This data matters and contains
plenty data that should remain confidential.&lt;/p&gt;
&lt;p&gt;The encryption of choice here is &lt;code&gt;dm-crypt&lt;/code&gt; (LUKS) + &lt;code&gt;dm-integrity&lt;/code&gt;
similar as discussed above, again with the key bound to the TPM.&lt;/p&gt;
&lt;p&gt;If the OS binary resources are protected the same way it is safe to
merge these two volumes and have a single partition for both (see
above)&lt;/p&gt;
&lt;h3&gt;How to Encrypt/Authenticate the User's Home Directory&lt;/h3&gt;
&lt;p&gt;The data in the user's home directory should be encrypted, and bound
to the user's preferred token of authentication (i.e. a password or
FIDO2/PKCS#11 security token). As mentioned, in the traditional mode
of operation the user's home directory is not individually encrypted,
but only encrypted because FDE is in use. The encryption key for that
is a system wide key though, not a per-user key. And I think that's
problem, as mentioned (and probably not even generally understood by
our users). We should correct that and ensure that the user's password
is what unlocks the user's data.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;systemd&lt;/code&gt; suite we provide a service
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-homed.service.html"&gt;systemd-homed(8)&lt;/a&gt;
(v245) that implements this in a safe way: each user gets its own LUKS
volume stored in a loopback file in &lt;code&gt;/home/&lt;/code&gt;, and this is enough to
synthesize a user account. The encryption password for this volume is
the user's account password, thus it's really the password provided at
login time that unlocks the user's data. &lt;code&gt;systemd-homed&lt;/code&gt; also supports
other mechanisms of authentication, in particular PKCS#11/FIDO2
security tokens. It also provides support for other storage back-ends
(such as fscrypt), but I'd always suggest to use the LUKS back-end
since it's the only one providing the comprehensive confidentiality
guarantees one wants for a UNIX-style home directory.&lt;/p&gt;
&lt;p&gt;Note that there's one special caveat here: if the user's home
directory (e.g. &lt;code&gt;/home/lennart/&lt;/code&gt;) is encrypted and authenticated, what
about the file system this data is stored on, i.e. &lt;code&gt;/home/&lt;/code&gt; itself? If
that dir is part of the the root file system this would result in
double encryption: first the data is encrypted with the TPM root file
system key, and then again with the per-user key. Such double
encryption is a waste of resources, and unnecessary. I'd thus suggest
to make &lt;code&gt;/home/&lt;/code&gt; its own &lt;code&gt;dm-integrity&lt;/code&gt; volume with a HMAC, keyed by
the TPM. This means the data stored directly in &lt;code&gt;/home/&lt;/code&gt; will be
authenticated but not encrypted. That's good not only for performance,
but also has practical benefits: it allows extracting the encrypted
volume of the various users in case the TPM key is lost, as a way to
recover from dead laptops or similar.&lt;/p&gt;
&lt;p&gt;Why authenticate &lt;code&gt;/home/&lt;/code&gt;, if it only contains per-user home
directories that are authenticated on their own anyway?  That's a
valid question: it's because the kernel file system maintainers made
clear that Linux file system code is not considered safe against rogue
disk images, and is not tested for that; this means before you mount
anything you need to establish trust in some way because otherwise
there's a risk that the act of mounting might exploit your kernel.&lt;/p&gt;
&lt;h3&gt;Summary of Resources and their Protections&lt;/h3&gt;
&lt;p&gt;So, let's now put this all together. Here's a table showing the
various resources we deal with, and how I think they should be
protected (in my idealized world).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resource&lt;/th&gt;
&lt;th&gt;Needs Authentication&lt;/th&gt;
&lt;th&gt;Needs Encryption&lt;/th&gt;
&lt;th&gt;Suggested Technology&lt;/th&gt;
&lt;th&gt;Validation/Encryption Keys/Certificates acquired via&lt;/th&gt;
&lt;th&gt;Stored where&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Shim&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;SecureBoot signature verification&lt;/td&gt;
&lt;td&gt;firmware certificate database&lt;/td&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boot loader&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;td&gt;firmware certificate database/shim&lt;/td&gt;
&lt;td&gt;ESP/boot partition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kernel&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;initrd&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;initrd parameters&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;systemd TPM encrypted credentials&lt;/td&gt;
&lt;td&gt;TPM&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;initrd extensions&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;&lt;code&gt;systemd-sysext&lt;/code&gt; with Verity+PKCS#7 signatures&lt;/td&gt;
&lt;td&gt;firmware/initrd certificate database&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OS binary resources&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dm-verity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;root hash linked into kernel image, or firmware/initrd certificate database&lt;/td&gt;
&lt;td&gt;top-level partition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OS configuration and state&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dm-crypt&lt;/code&gt; (LUKS) + &lt;code&gt;dm-integrity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;TPM&lt;/td&gt;
&lt;td&gt;top-level partition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/home/&lt;/code&gt; itself&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dm-integrity&lt;/code&gt; with HMAC&lt;/td&gt;
&lt;td&gt;TPM&lt;/td&gt;
&lt;td&gt;top-level partition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User home directories&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dm-crypt&lt;/code&gt; (LUKS) + &lt;code&gt;dm-integrity&lt;/code&gt; in loopback files&lt;/td&gt;
&lt;td&gt;User password/FIDO2/PKCS#11 security token&lt;/td&gt;
&lt;td&gt;loopback file inside &lt;code&gt;/home&lt;/code&gt; partition&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This should provide all the desired guarantees: everything is
authenticated, and the individualized per-host or per-user data
is also encrypted. No double encryption takes place. The encryption
keys/verification certificates are stored/bound to the most appropriate
infrastructure.&lt;/p&gt;
&lt;p&gt;Does this address the three attack scenarios mentioned earlier? I
think so, yes. The basic attack scenario I described is addressed by
the fact that &lt;code&gt;/var/&lt;/code&gt;, &lt;code&gt;/etc/&lt;/code&gt; and &lt;code&gt;/home/*/&lt;/code&gt; are encrypted. Brute
forcing the former two is harder than in the status quo ante model,
since a high entropy key is used instead of one derived from a user
provided password. Moreover, the "anti-hammering" logic of the TPM
will make brute forcing prohibitively slow. The home directories are
protected by the user's password or ideally a personal FIDO2/PKCS#11
security token in this model. Of course, a password isn't better
security-wise then the status quo ante. But given the FIDO2/PKCS#11
support built into &lt;code&gt;systemd-homed&lt;/code&gt; it should be easier to lock down
the home directories securely.&lt;/p&gt;
&lt;p&gt;Binding encryption of &lt;code&gt;/var/&lt;/code&gt; and &lt;code&gt;/etc/&lt;/code&gt; to the TPM also addresses
the first of the two more advanced attack scenarios: a copy of the
harddisk is useless without the physical TPM chip, since the seed key
is sealed into that. (And even if the attacker had the chance to watch
you type in your password, it won't help unless they possess access to
to the TPM chip.) For the home directory this attack is not addressed
as long as a plain password is used. However, since binding home
directories to FIDO2/PKCS#11 tokens is built into &lt;code&gt;systemd-homed&lt;/code&gt;
things should be safe here too ‚Äî provided the user actually possesses
and uses such a device.&lt;/p&gt;
&lt;p&gt;The backdoor attack scenario is addressed by the fact that every
resource in play now is authenticated: it's hard to backdoor the OS if
there's no component that isn't verified by signature keys or TPM
secrets the attacker hopefully doesn't know.&lt;/p&gt;
&lt;p&gt;For general purpose distributions that focus on updating the OS per
RPM/dpkg the idealized model above won't work out, since (as
mentioned) this implies an immutable &lt;code&gt;/usr/&lt;/code&gt;, and thus requires
updating &lt;code&gt;/usr/&lt;/code&gt; via an atomic update operation. For such distros a
setup like the following is probably more realistic, but see above.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resource&lt;/th&gt;
&lt;th&gt;Needs Authentication&lt;/th&gt;
&lt;th&gt;Needs Encryption&lt;/th&gt;
&lt;th&gt;Suggested Technology&lt;/th&gt;
&lt;th&gt;Validation/Encryption Keys/Certificates acquired via&lt;/th&gt;
&lt;th&gt;Stored where&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Shim&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;SecureBoot signature verification&lt;/td&gt;
&lt;td&gt;firmware certificate database&lt;/td&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boot loader&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;td&gt;firmware certificate database/shim&lt;/td&gt;
&lt;td&gt;ESP/boot partition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kernel&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;initrd&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;initrd parameters&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;systemd TPM encrypted credentials&lt;/td&gt;
&lt;td&gt;TPM&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;initrd extensions&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;&lt;code&gt;systemd-sysext&lt;/code&gt; with Verity+PKCS#7 signatures&lt;/td&gt;
&lt;td&gt;firmware/initrd certificate database&lt;/td&gt;
&lt;td&gt;ditto&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OS binary resources, configuration and state&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dm-crypt&lt;/code&gt; (LUKS) + &lt;code&gt;dm-integrity&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;TPM&lt;/td&gt;
&lt;td&gt;top-level partition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/home/&lt;/code&gt; itself&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dm-integrity&lt;/code&gt; with HMAC&lt;/td&gt;
&lt;td&gt;TPM&lt;/td&gt;
&lt;td&gt;top-level partition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;User home directories&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dm-crypt&lt;/code&gt; (LUKS) + &lt;code&gt;dm-integrity&lt;/code&gt; in loopback files&lt;/td&gt;
&lt;td&gt;User password/FIDO2/PKCS#11 security token&lt;/td&gt;
&lt;td&gt;loopback file inside &lt;code&gt;/home&lt;/code&gt; partition&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This means there's only one root file system that contains all of
&lt;code&gt;/etc/&lt;/code&gt;, &lt;code&gt;/var/&lt;/code&gt; and &lt;code&gt;/usr/&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Recovery Keys&lt;/h2&gt;
&lt;p&gt;When binding encryption to TPMs one problem that arises is what
strategy to adopt if the TPM is lost, due to hardware failure: if I
need the TPM to unlock my encrypted volume, what do I do if I need the
data but lost the TPM?&lt;/p&gt;
&lt;p&gt;The answer here is supporting recovery keys (this is similar to how
other OSes approach this). Recovery keys are pretty much the same
concept as passwords. The main difference being that they are computer
generated rather than user-chosen. Because of that they typically have
much higher entropy (which makes them more annoying to type in, i.e
you want to use them only when you must, not day-to-day). By having
higher entropy they are useful in combination with TPM, FIDO2 or
PKCS#11 based unlocking: unlike a combination with passwords they do
not compromise the higher strength of protection that
TPM/FIDO2/PKCS#11 based unlocking is supposed to provide.&lt;/p&gt;
&lt;p&gt;Current versions of
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html"&gt;systemd-cryptenroll(1)&lt;/a&gt;
implement a recovery key concept in an attempt to address this
problem. You may enroll any combination of TPM chips, PKCS#11 tokens,
FIDO2 tokens, recovery keys and passwords on the same LUKS
volume. When enrolling a recovery key it is generated and shown on
screen both in text form and as QR code you can scan off screen if you
like. The idea is write down/store this recovery key at a safe place so
that you can use it when you need it. Note that such recovery keys can
be entered wherever a LUKS password is requested, i.e. after
generation they behave pretty much the same as a regular password.&lt;/p&gt;
&lt;h2&gt;TPM PCR Brittleness&lt;/h2&gt;
&lt;p&gt;Locking devices to TPMs and enforcing a PCR policy with this
(i.e. configuring the TPM key to be unlockable only if certain PCRs
match certain values, and thus requiring the OS to be in a certain
state) brings a problem with it: TPM PCR brittleness. If the key you
want to unlock with the TPM requires the OS to be in a specific state
(i.e. that all OS components' hashes match certain expectations or
similar) then doing OS updates might have the affect of making your
key inaccessible: the OS updates will cause the code to change, and
thus the hashes of the code, and thus certain PCRs. (Thankfully, you
unrolled a recovery key, as described above, so this doesn't mean you
lost your data, right?).&lt;/p&gt;
&lt;p&gt;To address this I'd suggest three strategies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Most importantly: don't actually use the TPM PCRs that contain code
   hashes. There are actually &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html#id-1.6.3.9.2.2"&gt;multiple PCRs
   defined&lt;/a&gt;,
   each containing measurements of different aspects of the boot
   process. My recommendation is to bind keys to PCR 7 only, a PCR
   that contains measurements of the UEFI SecureBoot certificate
   databases. Thus, the keys will remain accessible as long as these
   databases remain the same, and updates to code will not affect it
   (updates to the certificate databases will, and they do happen too,
   though hopefully much less frequent then code updates). Does this
   reduce security? Not much, no, because the code that's run is after
   all not just measured but also validated via code signatures, and
   those signatures are validated with the aforementioned certificate
   databases. Thus binding an encrypted TPM key to PCR 7 should
   enforce a similar level of trust in the boot/OS code as binding it
   to a PCR with hashes of specific versions of that code. i.e. using
   PCR 7 means you say "every code signed by these vendors is allowed
   to unlock my key" while using a PCR that contains code hashes means
   "only this exact version of my code may access my key".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use LUKS key management to enroll multiple versions of the TPM keys
   in relevant volumes, to support multiple versions of the OS code
   (or multiple versions of the certificate database, as discussed
   above). Specifically: whenever an update is done that might result
   changing the relevant PCRs, pre-calculate the new PCRs, and enroll
   them in an additional LUKS slot on the relevant volumes. This means
   that the unlocking keys tied to the TPM remain accessible in both
   states of the system. Eventually, once rebooted after the update,
   remove the old slots.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If these two strategies didn't work out (maybe because the
   OS/firmware was updated outside of OS control, or the update
   mechanism was aborted at the wrong time) and the TPM PCRs changed
   unexpectedly, and the user now needs to use their recovery key to
   get access to the OS back, let's handle this gracefully and
   automatically reenroll the current TPM PCRs at boot, after the
   recovery key checked out, so that for future boots everything is in
   order again.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Other approaches can work too: for example, some OSes simply remove
TPM PCR policy protection of disk encryption keys altogether
immediately before OS or firmware updates, and then reenable it right
after. Of course, this opens a time window where the key bound to the
TPM is much less protected than people might assume. I'd try to avoid
such a scheme if possible.&lt;/p&gt;
&lt;h2&gt;Anything Else?&lt;/h2&gt;
&lt;p&gt;So, given that we are talking about idealized systems: I personally
actually think the ideal OS would be much simpler, and thus more
secure than this:&lt;/p&gt;
&lt;p&gt;I'd try to ditch the Shim, and instead focus on enrolling the
distribution vendor keys directly in the UEFI firmware certificate
list. This is actually supported by all firmwares too. This has
various benefits: it's no longer necessary to bind everything to
Microsoft's root key, you can just enroll your own stuff and thus make
sure only what you want to trust is trusted and nothing else. To make
an approach like this easier, we have been working on doing automatic
enrollment of these keys from the &lt;code&gt;systemd-boot&lt;/code&gt; boot loader, see
&lt;a href="https://github.com/systemd/systemd/pull/20255"&gt;this work in progress for
details&lt;/a&gt;. This way the
Firmware will authenticate the boot loader/kernel/initrd without any
further component for this in place.&lt;/p&gt;
&lt;p&gt;I'd also not bother with a separate boot partition, and just use the
ESP for everything. The ESP is required anyway by the firmware, and is
good enough for storing the few files we need.&lt;/p&gt;
&lt;h2&gt;FAQ&lt;/h2&gt;
&lt;h3&gt;Can I implement all of this in my distribution today?&lt;/h3&gt;
&lt;p&gt;Probably not. While the big issues have mostly been addressed there's
a lot of integration work still missing. As you might have seen I
linked some PRs that haven't even been merged into our tree yet, and
definitely not been released yet or even entered the distributions.&lt;/p&gt;
&lt;h3&gt;Will this show up in Fedora/Debian/Ubuntu soon?&lt;/h3&gt;
&lt;p&gt;I don't know. I am making a proposal how these things might work, and
am working on getting various building blocks for this into
shape. What the distributions do is up to them. But even if they don't
follow the recommendations I make 100%, or don't want to use the
building blocks I propose I think it's important they start thinking
about this, and yes, I think they should be thinking about defaulting
to setups like this.&lt;/p&gt;
&lt;p&gt;Work for measuring/signing initrds on Fedora has been started,
&lt;a href="https://raw.githubusercontent.com/keszybz/mkosi-initrd-talk/main/mkosi-initrd.pdf"&gt;here's a slide deck with some information about
it&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;But isn't a TPM evil?&lt;/h3&gt;
&lt;p&gt;Some corners of the community tried (unfortunately successfully to
some degree) to paint TPMs/Trusted Computing/SecureBoot as generally
evil technologies that stop us from using our systems the way we
want. That idea is rubbish though, I think. We should focus on what it
can deliver for us (and that's a lot I think, see above), and
appreciate the fact we can actually use it to kick out perceived evil
empires from our devices instead of being subjected to them. Yes, the
way SecureBoot/TPMs are defined puts &lt;em&gt;you&lt;/em&gt; in the driver seat if you
want ‚Äî and you may enroll your own certificates to keep out everything
you don't like.&lt;/p&gt;
&lt;h3&gt;What if my system doesn't have a TPM?&lt;/h3&gt;
&lt;p&gt;TPMs are becoming quite ubiquitous, in particular as the upcoming
Windows versions will require them. In general I think we should focus
on modern, fully equipped systems when designing all this, and then
find fall-backs for more limited systems. Frankly it feels as if so
far the design approach for all this was the other way round: try to
make the new stuff work like the old rather than the old like the new
(I mean, to me it appears this thinking is the main raison d'√™tre for
the Grub boot loader).&lt;/p&gt;
&lt;p&gt;More specifically, on the systems where we have no TPM we ultimately
cannot provide the same security guarantees as for those which
have. So depending on the resource to protect we should fall back to
different TPM-less mechanisms. For example, if we have no TPM then the
root file system should probably be encrypted with a user provided
password, typed in at boot as before. And for the encrypted boot
credentials we probably should simply not encrypt them, and place them
in the ESP unencrypted.&lt;/p&gt;
&lt;p&gt;Effectively this means: without TPM you'll still get protection regarding the
basic attack scenario, as before, but not the other two.&lt;/p&gt;
&lt;h3&gt;What if my system doesn't have UEFI?&lt;/h3&gt;
&lt;p&gt;Many of the mechanisms explained above taken individually do not
require UEFI. But of course the chain of trust suggested above requires
something like UEFI SecureBoot. If your system lacks UEFI it's
probably best to find work-alikes to the technologies suggested above,
but I doubt I'll be able to help you there.&lt;/p&gt;
&lt;h3&gt;rpm/dpkg already cryptographically validates all packages at installation time (&lt;code&gt;gpg&lt;/code&gt;), why would I need more than that?&lt;/h3&gt;
&lt;p&gt;This type of package validation happens once: at the moment of
installation (or update) of the package, but not anymore when the data
installed is actually used. Thus when an attacker manages to modify
the package data after installation and before use they can make any
change they like without this ever being noticed. Such package download
validation does address certain attack scenarios
(i.e. man-in-the-middle attacks on network downloads), but it doesn't
protect you from attackers with physical access, as described in the
attack scenarios above.&lt;/p&gt;
&lt;p&gt;Systems such as &lt;code&gt;ostree&lt;/code&gt; aren't better than rpm/dpkg regarding this
BTW, their data is not validated on use either, but only during
download or when processing tree checkouts.&lt;/p&gt;
&lt;p&gt;Key really here is that the scheme explained here provides &lt;em&gt;offline&lt;/em&gt;
protection for the data "at rest" ‚Äî even someone with physical access
to your device cannot easily make changes that aren't noticed on next
use. rpm/dpkg/ostree provide &lt;em&gt;online&lt;/em&gt; protection only: as long as the
system remains up, and all OS changes are done through the intended
program code-paths, and no one has physical access everything should
be good. In today's world I am sure this is not good enough though. As
mentioned most modern OSes provide offline protection for the data at
rest in one way or another. Generic Linux distributions are terribly
behind on this.&lt;/p&gt;
&lt;h3&gt;This is all so desktop/laptop focused, what about servers?&lt;/h3&gt;
&lt;p&gt;I am pretty sure servers should provide similar security guarantees as
outlined above. In a way servers are a much simpler case: there are no
users and no interactivity. Thus the discussion of &lt;code&gt;/home/&lt;/code&gt; and what
it contains and of user passwords doesn't matter. However, the
authenticated initrd and the unattended TPM-based encryption I think
are very important for servers too, in a trusted data center
environment. It provides security guarantees so far not given by Linux
server OSes.&lt;/p&gt;
&lt;h3&gt;I'd like to help with this, or discuss/comment on this&lt;/h3&gt;
&lt;p&gt;Submit patches or reviews through
&lt;a href="https://github.com/systemd/systemd"&gt;GitHub&lt;/a&gt;. General discussion about
this is best done on the &lt;a href="https://lists.freedesktop.org/mailman/listinfo/systemd-devel"&gt;systemd mailing
list&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 23 Sep 2021 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2021-09-23:/blog/authenticated-boot-and-disk-encryption-on-linux.html</guid><category>projects</category></item><item><title>The Wondrous World of Discoverable GPT Disk Images</title><link>https://0pointer.net/blog/the-wondrous-world-of-discoverable-gpt-disk-images.html</link><description>&lt;p&gt;&lt;em&gt;TL;DR: Tag your GPT partitions with the right, descriptive partition
types, and the world will become a better place.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A number of years ago we started the &lt;a href="https://systemd.io/DISCOVERABLE_PARTITIONS"&gt;Discoverable Partitions
Specification&lt;/a&gt; which
defines &lt;a href="https://en.wikipedia.org/wiki/GUID_Partition_Table"&gt;GPT&lt;/a&gt;
partition type UUIDs and partition flags for the various partitions
Linux systems typically deal with. Before the specification all Linux
partitions usually just used the same type, basically saying "Hey, I
am a Linux partition" and not much else. With this specification the
GPT partition type, flags and label system becomes a lot more
expressive, as it can tell you:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What kind of data a partition contains (i.e. is this swap data, a file system or Verity data?)&lt;/li&gt;
&lt;li&gt;What the purpose/mount point of a partition is (i.e. is this a &lt;code&gt;/home/&lt;/code&gt; partition or a root file system?)&lt;/li&gt;
&lt;li&gt;What CPU architecture a partition is intended for (i.e. is this a root partition for x86-64 or for aarch64?)&lt;/li&gt;
&lt;li&gt;Shall this partition be mounted automatically? (i.e. without specifically be configured via &lt;code&gt;/etc/fstab&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;And if so, shall it be mounted read-only?&lt;/li&gt;
&lt;li&gt;And if so, shall the file system be grown to its enclosing partition size, if smaller?&lt;/li&gt;
&lt;li&gt;Which partition contains the newer version of the same data (i.e. multiple root file systems, with different versions)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By embedding all of this information inside the GPT partition table
disk images become self-descriptive: without requiring any other
source of information (such as &lt;code&gt;/etc/fstab&lt;/code&gt;) if you look at a
compliant GPT disk image it is clear how an image is put together and
how it should be used and mounted. This self-descriptiveness in
particular breaks one philosophical weirdness of traditional Linux
installations: the original source of information which file system
the root file system is, typically is embedded in the root file system
itself, in &lt;code&gt;/etc/fstab&lt;/code&gt;. Thus, in a way, in order to know what the
root file system is you need to know what the root file system is. ü§Ø
ü§Ø ü§Ø&lt;/p&gt;
&lt;p&gt;(Of course, the way this recursion is traditionally broken up is by
then copying the root file system information from &lt;code&gt;/etc/fstab&lt;/code&gt; into
the boot loader configuration, resulting in a situation where the
primary source of information for this ‚Äî i.e. &lt;code&gt;/etc/fstab&lt;/code&gt; ‚Äî is
actually mostly irrelevant, and the secondary source ‚Äî i.e. the copy
in the boot loader ‚Äî becomes the configuration that actually matters.)&lt;/p&gt;
&lt;p&gt;Today, the GPT partition type UUIDs defined by the specification have
been adopted quite widely, by distributions and their installers, as
well as a variety of partitioning tools and other tools.&lt;/p&gt;
&lt;p&gt;In this article I want to highlight how the various tools the
&lt;a href="https://systemd.io/"&gt;systemd&lt;/a&gt; project provides make use of the
concepts the specification introduces.&lt;/p&gt;
&lt;p&gt;But before we start with that, let's underline why tagging partitions
with these descriptive partition type UUIDs (and the associated
partition flags) is a good thing, besides the philosophical points
made above.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Simplicity: in particular OS installers become simpler ‚Äî adjusting
   &lt;code&gt;/etc/fstab&lt;/code&gt; as part of the installation is not necessary anymore,
   as the partitioning step already put all information into place for
   assembling the system properly at boot. i.e. installing doesn't
   mean that you always have to get &lt;code&gt;fdisk&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;/etc/fstab&lt;/code&gt; into
   place, the former suffices entirely.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Robustness: since partition tables mostly remain static after
   installation the chance of corruption is much lower than if the
   data is stored in file systems (e.g. in &lt;code&gt;/etc/fstab&lt;/code&gt;). Moreover by
   associating the metadata directly with the objects it describes the
   chance of things getting out of sync is reduced. (i.e. if you lose
   &lt;code&gt;/etc/fstab&lt;/code&gt;, or forget to rerun your initrd builder you still know
   what a partition is supposed to be just by looking at it.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Programmability: if partitions are self-descriptive it's much
   easier to automatically process them with various tools. In fact,
   this blog story is mostly about that: various systemd tools can
   naturally process disk images prepared like this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alternative entry points: on traditional disk images, the boot
   loader needs to be told which kernel command line option &lt;code&gt;root=&lt;/code&gt; to
   use, which then provides access to the root file system, where
   &lt;code&gt;/etc/fstab&lt;/code&gt; is then found which describes the rest of the file
   systems. Where precisely &lt;code&gt;root=&lt;/code&gt; is configured for the boot loader
   highly depends on the boot loader and distribution used, and is
   typically encoded in a Turing complete programming language
   (Grub‚Ä¶). This makes it very hard to automatically determine the
   right root file system to use, to implement alternative entry points
   to the system. By alternative entry points I mean other ways to boot
   the disk image, specifically for running it as a &lt;code&gt;systemd-nspawn&lt;/code&gt;
   container ‚Äî but this extends to other mechanisms where the boot
   loader may be bypassed to boot up the system, for example &lt;code&gt;qemu&lt;/code&gt;
   when configured without a boot loader.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User friendliness: it's simply a lot nicer for the user looking at
   a partition table if the partition table explains what is what,
   instead of just saying "Hey, this is a Linux partition!" and
   nothing else.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Uses for the concept&lt;/h1&gt;
&lt;p&gt;Now that we cleared up the Why?, lets have a closer look how this is
currently used and exposed in &lt;code&gt;systemd&lt;/code&gt;'s various components.&lt;/p&gt;
&lt;h2&gt;Use #1: Running a disk image in a container&lt;/h2&gt;
&lt;p&gt;If a disk image follows the Discoverable Partition Specification then
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html"&gt;&lt;code&gt;systemd-nspawn&lt;/code&gt;&lt;/a&gt;
has all it needs to just boot it up. Specifically, if you have a GPT
disk image in a file &lt;code&gt;foobar.raw&lt;/code&gt; and you want to boot it up in a
container, just run &lt;code&gt;systemd-nspawn -i foobar.raw -b&lt;/code&gt;, and that's it
(you can specify a block device like &lt;code&gt;/dev/sdb&lt;/code&gt; too if you like). It
becomes easy and natural to prepare disk images that can be booted
either on a physical machine, inside a virtual machine manager or
inside such a container manager: the necessary meta-information is
included in the image, easily accessible before actually looking into
its file systems.&lt;/p&gt;
&lt;h2&gt;Use #2: Booting an OS image on bare-metal without &lt;code&gt;/etc/fstab&lt;/code&gt; or kernel command line &lt;code&gt;root=&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;If a disk image follows the specification in many cases you can remove
&lt;code&gt;/etc/fstab&lt;/code&gt; (or never even install it) ‚Äî as the basic information
needed is already included in the partition table. The
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-gpt-auto-generator.html"&gt;&lt;code&gt;systemd-gpt-auto-generator&lt;/code&gt;&lt;/a&gt;
logic implements automatic discovery of the root file system as well
as all auxiliary file systems. (Note that the former requires an
initrd that uses systemd, some more conservative distributions do not
support that yet, unfortunately). Effectively this means you can boot
up a kernel/initrd with an entirely empty kernel command line, and the
initrd will automatically find the root file system (by looking for a
suitably marked partition on the same drive the EFI System Partition
was found on).&lt;/p&gt;
&lt;p&gt;(Note, if &lt;code&gt;/etc/fstab&lt;/code&gt; or &lt;code&gt;root=&lt;/code&gt; exist and contain relevant
information they always takes precedence over the automatic logic. This
is in particular useful to tweaks thing by specifying additional mount
options and such.)&lt;/p&gt;
&lt;h2&gt;Use #3: Mounting a complex disk image for introspection or manipulation&lt;/h2&gt;
&lt;p&gt;The
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-dissect.html"&gt;&lt;code&gt;systemd-dissect&lt;/code&gt;&lt;/a&gt;
tool may be used to introspect and manipulate OS disk images that
implement the specification. If you pass the path to a disk image (or
block device) it will extract various bits of useful information from
the image (e.g. what OS is this? what partitions to mount?) and display it.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;--mount&lt;/code&gt; switch a disk image (or block device) can be
mounted to some location. This is useful for looking what is inside
it, or changing its contents. This will dissect the image and then
automatically mount all contained file systems matching their GPT
partition description to the right places, so that you subsequently
could &lt;code&gt;chroot&lt;/code&gt; into it. (But why &lt;code&gt;chroot&lt;/code&gt; if you can just use &lt;code&gt;systemd-nspawn&lt;/code&gt;? üòé)&lt;/p&gt;
&lt;h2&gt;Use #4: Copying files in and out of a disk image&lt;/h2&gt;
&lt;p&gt;The
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-dissect.html"&gt;&lt;code&gt;systemd-dissect&lt;/code&gt;&lt;/a&gt;
tool also has two switches &lt;code&gt;--copy-from&lt;/code&gt; and &lt;code&gt;--copy-to&lt;/code&gt; which allow
copying files out of or into a compliant disk image, taking all
included file systems and the resulting mount hierarchy into account.&lt;/p&gt;
&lt;h2&gt;Use #5: Running services directly off a disk image&lt;/h2&gt;
&lt;p&gt;The
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RootImage="&gt;&lt;code&gt;RootImage=&lt;/code&gt;&lt;/a&gt;
setting in service unit files accepts paths to compliant disk images
(or block device nodes), and can mount them automatically, running
service binaries directly off them (in &lt;code&gt;chroot()&lt;/code&gt; style). In fact,
this is the base for the &lt;a href="https://systemd.io/PORTABLE_SERVICES"&gt;Portable
Service&lt;/a&gt; concept of systemd.&lt;/p&gt;
&lt;h2&gt;Use #6: Provisioning disk images&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;systemd&lt;/code&gt; provides various tools that can run operations provisioning
disk images in an "offline" mode. Specifically:&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;systemd-tmpfiles&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;With the &lt;code&gt;--image=&lt;/code&gt; switch
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-tmpfiles.html"&gt;&lt;code&gt;systemd-tmpfiles&lt;/code&gt;&lt;/a&gt;
can directly operate on a disk image, and for example create all
directories and other inodes defined in its declarative configuration
files included in the image. This can be useful for example to set up
the &lt;code&gt;/var/&lt;/code&gt; or &lt;code&gt;/etc/&lt;/code&gt; tree according to such configuration before
first boot.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;systemd-sysusers&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Similar, the &lt;code&gt;--image=&lt;/code&gt; switch of
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-sysusers.html"&gt;&lt;code&gt;systemd-sysusers&lt;/code&gt;&lt;/a&gt;
tells the tool to read the declarative system user specifications
included in the image and synthesizes system users from it, writing
them to the &lt;code&gt;/etc/passwd&lt;/code&gt; (and related) files in the image. This is
useful for provisioning these users before the first boot, for example
to ensure UID/GID numbers are pre-allocated, and such allocations not
delayed until first boot.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;systemd-machine-id-setup&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;--image=&lt;/code&gt; switch of
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-machine-id-setup.html"&gt;&lt;code&gt;systemd-machine-id-setup&lt;/code&gt;&lt;/a&gt;
may be used to provision a fresh machine ID into
&lt;a href="https://www.freedesktop.org/software/systemd/man/machine-id.html"&gt;&lt;code&gt;/etc/machine-id&lt;/code&gt;&lt;/a&gt;
of a disk image, before first boot.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;systemd-firstboot&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;--image=&lt;/code&gt; switch of
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-firstboot.html"&gt;&lt;code&gt;systemd-firstboot&lt;/code&gt;&lt;/a&gt;
may be used to set various basic system setting (such as root
password, locale information, hostname, ‚Ä¶) on the specified disk
image, before booting it up.&lt;/p&gt;
&lt;h2&gt;Use #7: Extracting log information&lt;/h2&gt;
&lt;p&gt;The
&lt;a href="https://www.freedesktop.org/software/systemd/man/journalctl.html"&gt;&lt;code&gt;journalctl&lt;/code&gt;&lt;/a&gt;
switch &lt;code&gt;--image=&lt;/code&gt; may be used to show the journal log data included in
a disk image (or, as usual, the specified block device). This is very
useful for analyzing failed systems offline, as it gives direct access
to the logs without any further, manual analysis.&lt;/p&gt;
&lt;h2&gt;Use #8: Automatic repartitioning/growing of file systems&lt;/h2&gt;
&lt;p&gt;The
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-repart.html"&gt;&lt;code&gt;systemd-repart&lt;/code&gt;&lt;/a&gt;
tool may be used to repartition a disk or image in an declarative and
additive way. One primary use-case for it is to run during boot on
physical or VM systems to grow the root file system to the disk size,
or to add in, format, encrypt, populate additional partitions at boot.&lt;/p&gt;
&lt;p&gt;With its &lt;code&gt;--image=&lt;/code&gt; switch it the tool may operate on compliant disk
images in &lt;em&gt;offline&lt;/em&gt; mode of operation: it will then read the partition
definitions that shall be grown or created off the image itself, and
then apply them to the image. This is particularly useful in
combination with the &lt;code&gt;--size=&lt;/code&gt; which allows growing disk images to the
specified size.&lt;/p&gt;
&lt;p&gt;Specifically, consider the following work-flow: you download a
minimized disk image &lt;code&gt;foobar.raw&lt;/code&gt; that contains only the minimized
root file system (and maybe an ESP, if you want to boot it on
bare-metal, too). You then run &lt;code&gt;systemd-repart --image=foo.raw
--size=15G&lt;/code&gt; to enlarge the image to the 15G, based on the declarative
rules defined in the
&lt;a href="https://www.freedesktop.org/software/systemd/man/repart.d.html"&gt;&lt;code&gt;repart.d/&lt;/code&gt;&lt;/a&gt;
drop-in files included in the image (this means this can grow the root
partition, and/or add in more partitions, for example for &lt;code&gt;/srv&lt;/code&gt; or
so, maybe encrypted with a locally generated key or so). Then, you
proceed to boot it up with &lt;code&gt;systemd-nspawn --image=foo.raw -b&lt;/code&gt;, making
use of the full 15G.&lt;/p&gt;
&lt;h1&gt;Versioning + Multi-Arch&lt;/h1&gt;
&lt;p&gt;Disk images implementing this specifications can carry OS executables in one of three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Only a root file system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only a &lt;code&gt;/usr/&lt;/code&gt; file system (in which case the root file system is automatically picked as &lt;code&gt;tmpfs&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both a root and a &lt;code&gt;/usr/&lt;/code&gt;file system (in which case the two are
   combined, the &lt;code&gt;/usr/&lt;/code&gt; file system mounted into the root file system,
   and the former possibly in read-only fashion`)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;They may also contain OS executables for different architectures,
permitting "multi-arch" disk images that can safely boot up on
multiple CPU architectures. As the root and &lt;code&gt;/usr/&lt;/code&gt; partition type
UUIDs are specific to architectures this is easily done by including
one such partition for &lt;code&gt;x86-64&lt;/code&gt;, and another for &lt;code&gt;aarch64&lt;/code&gt;. If the
image is now used on an &lt;code&gt;x86-64&lt;/code&gt; system automatically the former
partition is used, on &lt;code&gt;aarch64&lt;/code&gt; the latter.&lt;/p&gt;
&lt;p&gt;Moreover, these OS executables may be contained in different versions,
to implement a simple versioning scheme: when tools such as
&lt;code&gt;systemd-nspawn&lt;/code&gt; or &lt;code&gt;systemd-gpt-auto-generator&lt;/code&gt; dissect a disk image,
and they find two or more root or &lt;code&gt;/usr/&lt;/code&gt; partitions of the same type
UUID, they will automatically pick the one whose GPT partition label
(a 36 character free-form string every GPT partition may have) is the
newest according to
&lt;a href="https://man7.org/linux/man-pages/man3/strverscmp.3.html"&gt;&lt;code&gt;strverscmp()&lt;/code&gt;&lt;/a&gt;
(OK, truth be told, we don't use &lt;code&gt;strverscmp()&lt;/code&gt; as-is, but a modified
version with some more modern syntax and semantics, but conceptually
identical).&lt;/p&gt;
&lt;p&gt;This logic allows to implement a very simple and natural A/B update
scheme: an updater can drop multiple versions of the OS into separate
root or &lt;code&gt;/usr/&lt;/code&gt; partitions, always updating the partition label to the
version included there-in once the download is complete. All of the
tools described here will then honour this, and always automatically
pick the newest version of the OS.&lt;/p&gt;
&lt;h1&gt;Verity&lt;/h1&gt;
&lt;p&gt;When building modern OS appliances, security is highly
relevant. Specifically, &lt;em&gt;offline&lt;/em&gt; security matters: an attacker with
physical access should have a difficult time modifying the OS in a way
that isn't noticed. i.e. think of a car or a cell network base
station: these appliances are usually parked/deployed in environments
attackers can get physical access to: it's essential that in this case
the OS itself sufficiently protected, so that the attacker cannot just
mount the OS file system image, make modifications (inserting a
backdoor, spying software or similar) and the system otherwise
continues to run without this being immediately detected.&lt;/p&gt;
&lt;p&gt;A great way to implement offline security is via Linux' &lt;code&gt;dm-verity&lt;/code&gt;
subsystem: it allows to securely bind immutable disk IO to a single,
short trusted hash value: if an attacker manages to offline modify the
disk image the modified disk image won't match the trusted hash
anymore, and will not be trusted anymore (depending on policy this
then just result in IO errors being generated, or automatic
reboot/power-off).&lt;/p&gt;
&lt;p&gt;The Discoverable Partitions Specification declares how to include
Verity validation data in disk images, and how to relate them to the file
systems they protect, thus making if very easy to deploy and work with
such protected images. For example &lt;code&gt;systemd-nspawn&lt;/code&gt; supports a
&lt;code&gt;--root-hash=&lt;/code&gt; switch, which accepts the Verity root hash and then
will automatically assemble &lt;code&gt;dm-verity&lt;/code&gt; with this, automatically
matching up the payload and verity partitions. (Alternatively, just
place a &lt;code&gt;.roothash&lt;/code&gt; file next to the image file).&lt;/p&gt;
&lt;h1&gt;Future&lt;/h1&gt;
&lt;p&gt;The above already is a powerful tool set for working with disk
images. However, there are some more areas I'd like to extend this
logic to:&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;bootctl&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Similar to the other tools mentioned above,
&lt;a href="https://www.freedesktop.org/software/systemd/man/bootctl.html"&gt;&lt;code&gt;bootctl&lt;/code&gt;&lt;/a&gt;
(which is a tool to interface with the boot loader, and install/update
systemd's own EFI boot loader
&lt;a href="https://www.freedesktop.org/software/systemd/man/bootctl.html"&gt;&lt;code&gt;sd-boot&lt;/code&gt;&lt;/a&gt;)
should learn a &lt;code&gt;--image=&lt;/code&gt; switch, to make installation of the boot
loader on disk images easy and natural. It would automatically find
the ESP and other relevant partitions in the image, and copy the boot
loader binaries into them (or update them).&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;coredumpctl&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Similar to the existing &lt;code&gt;journalctl --image=&lt;/code&gt; logic the &lt;code&gt;coredumpctl&lt;/code&gt;
tool should also gain an &lt;code&gt;--image=&lt;/code&gt; switch for extracting coredumps
from compliant disk images. The combination of &lt;code&gt;journalctl --image=&lt;/code&gt;
and &lt;code&gt;coredumpctl --image=&lt;/code&gt; would make it exceptionally easy to work
with OS disk images of appliances and extracting logging and debugging
information from them after failures.&lt;/p&gt;
&lt;p&gt;And that's all for now. Please refer to the specification and the man
pages for further details. If your distribution's installer does not
yet tag the GPT partition it creates with the right GPT type UUIDs,
consider asking them to do so.&lt;/p&gt;
&lt;p&gt;Thank you for your time.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 11 Jun 2021 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2021-06-11:/blog/the-wondrous-world-of-discoverable-gpt-disk-images.html</guid><category>projects</category></item><item><title>File Descriptor Limits</title><link>https://0pointer.net/blog/file-descriptor-limits.html</link><description>&lt;p&gt;&lt;em&gt;TL;DR: don't use &lt;code&gt;select()&lt;/code&gt; + bump the &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt; soft limit to
the hard limit in your modern programs.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The primary way to reference, allocate and pin runtime OS resources on
Linux today are file descriptors ("fds"). Originally they were used to
reference open files and directories and maybe a bit more, but today
they may be used to reference almost any kind of runtime resource in
Linux userspace, including open devices, memory
(&lt;a href="https://man7.org/linux/man-pages/man2/memfd_create.2.html"&gt;&lt;code&gt;memfd_create(2)&lt;/code&gt;&lt;/a&gt;),
timers
(&lt;a href="https://man7.org/linux/man-pages/man2/timerfd_create.2.html"&gt;&lt;code&gt;timefd_create(2)&lt;/code&gt;&lt;/a&gt;)
and even processes (with the new
&lt;a href="https://man7.org/linux/man-pages/man2/pidfd_open.2.html"&gt;&lt;code&gt;pidfd_open(2)&lt;/code&gt;&lt;/a&gt;
system call). In a way, the philosophically skewed UNIX concept of
"everything is a file" through the proliferation of fds actually
acquires a bit of sensible meaning: "everything &lt;em&gt;has&lt;/em&gt; a file
&lt;em&gt;descriptor&lt;/em&gt;" is certainly a much better motto to adopt.&lt;/p&gt;
&lt;p&gt;Because of this proliferation of fds, non-trivial modern programs tend
to have to deal with substantially more fds at the same time than they
traditionally did. Today, you'll often encounter real-life programs
that have a few thousand fds open at the same time.&lt;/p&gt;
&lt;p&gt;Like on most runtime resources on Linux limits are enforced on file
descriptors: once you hit the resource limit configured via
&lt;a href="https://man7.org/linux/man-pages/man2/getrlimit.2.html"&gt;&lt;code&gt;RLIMIT_NOFILE&lt;/code&gt;&lt;/a&gt;
any attempt to allocate more is refused with the &lt;code&gt;EMFILE&lt;/code&gt; error ‚Äî
until you close a couple of those you already have open.&lt;/p&gt;
&lt;p&gt;Because fds weren't such a universal concept traditionally, the limit
of &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt; used to be quite low. Specifically, when the Linux
kernel first invokes userspace it still sets &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt; to a low
value of 1024 (soft) and 4096 (hard). (Quick explanation: the &lt;em&gt;soft&lt;/em&gt;
limit is what matters and causes the &lt;code&gt;EMFILE&lt;/code&gt; issues, the &lt;em&gt;hard&lt;/em&gt; limit
is a secondary limit that processes may bump their soft limit to ‚Äî if
they like ‚Äî without requiring further privileges to do so. Bumping the
limit further would require privileges however.). A limit of 1024 fds
made fds a &lt;em&gt;scarce&lt;/em&gt; resource: APIs tried to be careful with using fds,
since you simply couldn't have that many of them at the same
time. This resulted in some questionable coding decisions and
concepts at various places: often secondary descriptors that are very
similar to fds ‚Äî but were not actually fds ‚Äî were introduced
(e.g. inotify watch descriptors), simply to avoid for them the low
limits enforced on true fds. Or code tried to aggressively close fds
when not absolutely needing them (e.g. &lt;code&gt;ftw()&lt;/code&gt;/&lt;code&gt;nftw()&lt;/code&gt;), losing the
nice + stable "pinning" effect of open fds.&lt;/p&gt;
&lt;p&gt;Worse though is that certain OS level APIs were designed having only
the low limits in mind. The worst offender being the BSD/POSIX
&lt;a href="https://man7.org/linux/man-pages/man2/select.2.html"&gt;&lt;code&gt;select(2)&lt;/code&gt;&lt;/a&gt;
system call: it only works with fds in the numeric range of 0‚Ä¶1023
(aka &lt;code&gt;FD_SETSIZE&lt;/code&gt;-1). If you have an fd outside of this range, tough
luck: select() won't work, and only if you are lucky you'll detect
that and can handle it somehow.&lt;/p&gt;
&lt;p&gt;Linux fds are exposed as simple integers, and for most calls it is
guaranteed that the lowest unused integer is allocated for new
fds. Thus, as long as the &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt; soft limit is set to 1024
everything remains compatible with &lt;code&gt;select()&lt;/code&gt;: the resulting fds will
also be below 1024. Yay. If we'd bump the soft limit above this
threshold though and at some point in time an fd higher than the
threshold is allocated, this fd would not be compatible with
&lt;code&gt;select()&lt;/code&gt; anymore.&lt;/p&gt;
&lt;p&gt;Because of that, indiscriminately increasing the soft &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt;
resource limit today for every userspace process is problematic: as
long as there's userspace code still using &lt;code&gt;select()&lt;/code&gt; doing so will
risk triggering hard-to-handle, hard-to-debug errors all over the
place.&lt;/p&gt;
&lt;p&gt;However, given the nowadays ubiquitous use of fds for all
kinds of resources (did you know, an eBPF program is an fd? and a
cgroup too? and attaching an eBPF program to cgroup is another fd? ‚Ä¶),
we'd really like to raise the limit anyway. ü§î&lt;/p&gt;
&lt;p&gt;So before we continue thinking about this problem, let's make the
problem more complex (‚Ä¶uh, I mean‚Ä¶ "more exciting") first. Having just
one hard and one soft per-process limit on fds is boring. Let's add
more limits on fds to the mix. Specifically on Linux there are two
system-wide sysctls: &lt;code&gt;fs.nr_open&lt;/code&gt; and &lt;code&gt;fs.file-max&lt;/code&gt;. (Don't ask me why
one uses a dash and the other an underscore, or why there are two of
them...) On today's kernels they kinda lost their relevance. They had
some originally, because fds weren't accounted by any other
counter. But today, the kernel tracks fds mostly as small pieces of
memory allocated on userspace requests ‚Äî because that's ultimately
what they are ‚Äî, and thus charges them to the memory accounting done
anyway.&lt;/p&gt;
&lt;p&gt;So now, we have four limits (actually: five if you count the memory
accounting) on the same kind of resource, and all of them make a
resource artificially scarce that we don't want to be scarce. So what
to do?&lt;/p&gt;
&lt;p&gt;Back in systemd v240 already (i.e. 2019) we decided to do something
about it. Specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Automatically at boot we'll now bump the two sysctls to their
  maximum, making them effectively ineffective. This one was easy. We
  got rid of two pretty much redundant knobs. Nice!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt; hard limit is bumped substantially to 512K. Yay,
  cheap fds! &lt;em&gt;You&lt;/em&gt; may have an fd, and &lt;em&gt;you&lt;/em&gt;, and &lt;em&gt;you&lt;/em&gt; as well,
  &lt;em&gt;everyone&lt;/em&gt; may have an fd!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But ‚Ä¶ we left the soft &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt; limit at 1024. We weren't
  quite ready to break all programs still using &lt;code&gt;select()&lt;/code&gt; in 2019
  yet. But it's not as bad as it might sound I think: given the hard
  limit is bumped every program can easily opt-in to a larger number
  of fds, by setting the soft limit to the hard limit early on ‚Äî
  without requiring privileges.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So effectively, with this approach fds should be much less scarce (at
least for programs that opt into that), and the limits should be much
easier to configure, since there are only two knobs now one really
needs to care about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Configure the &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt; hard limit to the maximum number of
  fds you actually want to allow a process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the program code then either bump the soft to the hard limit, or
  not. If you do, you basically declare "I understood the problem, I
  promise to not use &lt;code&gt;select()&lt;/code&gt;, drown me fds please!". If you don't
  then effectively everything remains as it always was.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apparently this approach worked, since the negative feedback on change
was even scarcer than fds traditionally were (ha, fun!). We got
reports from pretty much only two projects that were bitten by the
change (one being a JVM implementation): they already bumped their
soft limit automatically to their hard limit during program
initialization, and then allocated an array with one entry per
possible fd. With the new high limit this resulted in one massive
allocation that traditionally was just a few K, and this caused memory
checks to be hit.&lt;/p&gt;
&lt;p&gt;Anyway, here's the take away of this blog story:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Don't use &lt;code&gt;select()&lt;/code&gt; anymore in 2021. Use &lt;code&gt;poll()&lt;/code&gt;, &lt;code&gt;epoll&lt;/code&gt;,
  &lt;code&gt;iouring&lt;/code&gt;, ‚Ä¶, but for heaven's sake don't use &lt;code&gt;select()&lt;/code&gt;. It might
  have been all the rage in the 1990s but it doesn't scale and is
  simply not designed for today's programs. I wished the man page of
  &lt;code&gt;select()&lt;/code&gt; would make clearer how icky it is and that there are
  plenty of more preferably APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you hack on a program that potentially uses a lot of fds, add
  &lt;a href="https://github.com/systemd/systemd/blob/e7901aba1480db21e06e21cef4f6486ad71b2ec5/src/basic/rlimit-util.c#L373"&gt;some simple
  code&lt;/a&gt;
  somewhere to its start-up that bumps the &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt; soft limit
  to the hard limit. But if you do this, you have to make sure your
  code (and any code that you link to from it) refrains from using
  &lt;code&gt;select()&lt;/code&gt;. (Note: there's at least one glibc NSS plugin using
  &lt;code&gt;select()&lt;/code&gt; internally. Given that NSS modules can end up being
  loaded into pretty much &lt;em&gt;any&lt;/em&gt; process such modules should probably
  be considered just buggy.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If said program you hack on forks off foreign programs, make sure to
  reset the &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt; soft limit &lt;a href="https://github.com/systemd/systemd/blob/e7901aba1480db21e06e21cef4f6486ad71b2ec5/src/basic/rlimit-util.c#L394"&gt;back to
  1024&lt;/a&gt;
  for them. Just because your program might be fine with fds &amp;gt;= 1024
  it doesn't mean that those foreign programs might. And unfortunately
  &lt;code&gt;RLIMIT_NOFILE&lt;/code&gt; is inherited down the process tree unless explicitly
  set.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that's all I have for today. I hope this was enlightening.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 19 May 2021 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2021-05-19:/blog/file-descriptor-limits.html</guid><category>projects</category></item><item><title>Unlocking LUKS2 volumes with TPM2, FIDO2, PKCS#11 Security Hardware on systemd 248</title><link>https://0pointer.net/blog/unlocking-luks2-volumes-with-tpm2-fido2-pkcs11-security-hardware-on-systemd-248.html</link><description>&lt;p&gt;&lt;em&gt;TL;DR: It's now easy to unlock your LUKS2 volume with a FIDO2
security token (e.g. YubiKey, Nitrokey FIDO2, AuthenTrend
ATKey.Pro). And TPM2 unlocking is easy now too.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Blogging is a lot of work, and a lot less fun than hacking. I mostly
focus on the latter because of that, but from time to time I guess
stuff is just too interesting to not be blogged about. Hence here,
finally, another blog story about exciting new features in systemd.&lt;/p&gt;
&lt;p&gt;With the upcoming systemd v248 the
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-cryptsetup@.service.html"&gt;&lt;code&gt;systemd-cryptsetup&lt;/code&gt;&lt;/a&gt;
component of systemd (which is responsible for assembling encrypted
volumes during boot) gained direct support for unlocking encrypted
storage with three types of security hardware:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlocking with FIDO2 security tokens (well, at least with those
   which implement the &lt;code&gt;hmac-secret&lt;/code&gt; extension; most do). i.e. your
   YubiKeys (series 5 and above), Nitrokey FIDO2, AuthenTrend
   ATKey.Pro and such.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlocking with TPM2 security chips (pretty ubiquitous on non-budget
   PCs/laptops/‚Ä¶)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlocking with PKCS#11 security tokens, i.e. your smartcards and
   older YubiKeys (the ones that implement PIV). (Strictly speaking
   this was supported on older systemd already, but was a lot more
   "manual".)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For completeness' sake, let's keep in mind that the component also
allows unlocking with these more traditional mechanisms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Unlocking interactively with a user-entered passphrase (i.e. the
   way most people probably already deploy it, supported since
   about forever)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlocking via key file on disk (optionally on removable media
   plugged in at boot), supported since forever.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlocking via a key acquired through trivial
   &lt;code&gt;AF_UNIX&lt;/code&gt;/&lt;code&gt;SOCK_STREAM&lt;/code&gt; socket IPC. (Also new in v248)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlocking via &lt;em&gt;recovery&lt;/em&gt; &lt;em&gt;keys&lt;/em&gt;. These are pretty much the same
   thing as a regular passphrase (and in fact can be entered wherever
   a passphrase is requested) ‚Äî the main difference being that they
   are always generated by the computer, and thus have guaranteed high
   entropy, typically higher than user-chosen passphrases. They are
   generated in a way they are easy to type, in many cases even if the
   local key map is misconfigured. (Also new in v248)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this blog story, let's focus on the first three items, i.e. those
that talk to specific types of hardware for implementing unlocking.&lt;/p&gt;
&lt;p&gt;To make working with security tokens and TPM2 easy, a new, small tool
was added to the systemd tool set:
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-cryptenroll.html"&gt;systemd-cryptenroll&lt;/a&gt;. It's
only purpose is to make it easy to enroll your security token/chip of
choice into an encrypted volume. It works with any LUKS2 volume, and
embeds a tiny bit of meta-information into the LUKS2 header with
parameters necessary for the unlock operation.&lt;/p&gt;
&lt;h1&gt;Unlocking with FIDO2&lt;/h1&gt;
&lt;p&gt;So, let's see how this fits together in the FIDO2 case. Most likely
this is what you want to use if you have one of these fancy FIDO2 tokens
(which need to implement the &lt;code&gt;hmac-secret&lt;/code&gt; extension, as
mentioned). Let's say you already have your LUKS2 volume set up, and
previously unlocked it with a simple passphrase. Plug in your token,
and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemd-cryptenroll --fido2-device&lt;span class="o"&gt;=&lt;/span&gt;auto /dev/sda5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Replace &lt;code&gt;/dev/sda5&lt;/code&gt; with the underlying block device of your volume).&lt;/p&gt;
&lt;p&gt;This will enroll the key as an additional way to unlock the volume,
and embeds all necessary information for it in the LUKS2 volume
header. Before we can unlock the volume with this at boot, we need to
allow FIDO2 unlocking via
&lt;a href="https://www.freedesktop.org/software/systemd/man/crypttab.html"&gt;&lt;code&gt;/etc/crypttab&lt;/code&gt;&lt;/a&gt;. For
that, find the right entry for your volume in that file, and edit it
like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;myvolume /dev/sda5 - fido2-device=auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Replace &lt;code&gt;myvolume&lt;/code&gt; and &lt;code&gt;/dev/sda5&lt;/code&gt; with the right volume name, and
underlying device of course. Key here is the &lt;code&gt;fido2-device=auto&lt;/code&gt;
option you need to add to the fourth column in the file. It tells
&lt;code&gt;systemd-cryptsetup&lt;/code&gt; to use the FIDO2 metadata now embedded in the
LUKS2 header, wait for the FIDO2 token to be plugged in at boot
(utilizing &lt;code&gt;systemd-udevd&lt;/code&gt;, ‚Ä¶) and unlock the volume with it.&lt;/p&gt;
&lt;p&gt;And that's it already. Easy-peasy, no?&lt;/p&gt;
&lt;p&gt;Note that all of this doesn't modify the FIDO2 token itself in any
way. Moreover you can enroll the same token in as many volumes as you
like. Since all enrollment information is stored in the LUKS2 header
(and not on the token) there are no bounds on any of this. (OK, well,
admittedly, there's a cap on LUKS2 key slots per volume, i.e. you
can't enroll more than a bunch of keys per volume.)&lt;/p&gt;
&lt;h1&gt;Unlocking with PKCS#11&lt;/h1&gt;
&lt;p&gt;Let's now have a closer look how the same works with a PKCS#11
compatible security token or smartcard. For this to work, you need a
device that can store an RSA key pair. I figure most security
tokens/smartcards that implement PIV qualify. How you actually get the
keys onto the device might differ though. Here's how you do this for
any YubiKey that implements the PIV feature:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;ykman piv reset
&lt;span class="gp"&gt;# &lt;/span&gt;ykman piv generate-key -a RSA2048 9d pubkey.pem
&lt;span class="gp"&gt;# &lt;/span&gt;ykman piv generate-certificate --subject &lt;span class="s2"&gt;&amp;quot;Knobelei&amp;quot;&lt;/span&gt; 9d pubkey.pem
&lt;span class="gp"&gt;# &lt;/span&gt;rm pubkey.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(This chain of commands erases what was stored in PIV feature of your
token before, be careful!)&lt;/p&gt;
&lt;p&gt;For tokens/smartcards from other vendors a different series of
commands might work. Once you have a key pair on it, you can enroll it
with a LUKS2 volume like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemd-cryptenroll --pkcs11-token-uri&lt;span class="o"&gt;=&lt;/span&gt;auto /dev/sda5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Just like the same command's invocation in the FIDO2 case this enrolls
the security token as an additional way to unlock the volume, any
passphrases you already have enrolled remain enrolled.&lt;/p&gt;
&lt;p&gt;For the PKCS#11 case you need to edit your &lt;code&gt;/etc/crypttab&lt;/code&gt; entry like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;myvolume /dev/sda5 - pkcs11-uri=auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you have a security token that implements both PKCS#11 PIV and
FIDO2 I'd probably enroll it as FIDO2 device, given it's the more
contemporary, future-proof standard. Moreover, it requires no special
preparation in order to get an RSA key onto the device: FIDO2 keys
typically &lt;em&gt;just&lt;/em&gt; &lt;em&gt;work&lt;/em&gt;.&lt;/p&gt;
&lt;h1&gt;Unlocking with TPM2&lt;/h1&gt;
&lt;p&gt;Most modern (non-budget) PC hardware (and other kind of hardware too)
nowadays comes with a TPM2 security chip. In many ways a TPM2 chip is
a smartcard that is soldered onto the mainboard of your system. Unlike
your usual USB-connected security tokens you thus cannot remove them
from your PC, which means they address quite a different security
scenario: they aren't immediately comparable to a physical key you can
take with you that unlocks some door, but they are a key you leave at
the door, but that refuses to be turned by anyone but you.&lt;/p&gt;
&lt;p&gt;Even though this sounds a lot weaker than the FIDO2/PKCS#11 model TPM2
still bring benefits for securing your systems: because the
cryptographic key material stored in TPM2 devices cannot be extracted
(at least that's the theory), if you bind your hard disk encryption to
it, it means attackers cannot just copy your disk and analyze it
offline ‚Äî they always need access to the TPM2 chip too to have a
chance to acquire the necessary cryptographic keys. Thus, they can
still steal your whole PC and analyze it, but they cannot just copy
the disk without you noticing and analyze the copy.&lt;/p&gt;
&lt;p&gt;Moreover, you can bind the ability to unlock the harddisk to specific
software versions: for example you could say that only your trusted
Fedora Linux can unlock the device, but not any arbitrary OS some
hacker might boot from a USB stick they plugged in. Thus, if you trust
your OS vendor, you can entrust storage unlocking to the vendor's OS
together with your TPM2 device, and thus can be reasonably sure
intruders cannot decrypt your data unless they both hack your OS
vendor &lt;em&gt;and&lt;/em&gt; steal/break your TPM2 chip.&lt;/p&gt;
&lt;p&gt;Here's how you enroll your LUKS2 volume with your TPM2 chip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemd-cryptenroll --tpm2-device&lt;span class="o"&gt;=&lt;/span&gt;auto --tpm2-pcrs&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;7&lt;/span&gt; /dev/sda5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This looks almost as straightforward as the two earlier
&lt;code&gt;sytemd-cryptenroll&lt;/code&gt; command lines ‚Äî if it wasn't for the
&lt;code&gt;--tpm2-pcrs=&lt;/code&gt; part. With that option you can specify to which TPM2
PCRs you want to bind the enrollment. TPM2 PCRs are a set of
(typically 24) hash values that every TPM2 equipped system at boot
calculates from all the software that is invoked during the boot
sequence, in a secure, unfakable way (this is called
"measurement"). If you bind unlocking to a specific value of a
specific PCR you thus require the system has to follow the same
sequence of software at boot to re-acquire the disk encryption
key. Sounds complex? Well, that's because it is.&lt;/p&gt;
&lt;p&gt;For now, let's see how we have to modify your &lt;code&gt;/etc/crypttab&lt;/code&gt; to
unlock via TPM2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;myvolume /dev/sda5 - tpm2-device=auto
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This part is easy again: the &lt;code&gt;tpm2-device=&lt;/code&gt; option is what tells
&lt;code&gt;systemd-cryptsetup&lt;/code&gt; to use the TPM2 metadata from the LUKS2 header
and to wait for the TPM2 device to show up.&lt;/p&gt;
&lt;h1&gt;Bonus: Recovery Key Enrollment&lt;/h1&gt;
&lt;p&gt;FIDO2, PKCS#11 and TPM2 security tokens and chips pair well with
recovery keys: since you don't need to type in your password everyday
anymore it makes sense to get rid of it, and instead enroll a
high-entropy recovery key you then print out or scan off screen and
store a safe, physical location. i.e. forget about good ol'
passphrase-based unlocking, go for FIDO2 plus recovery key instead!
Here's how you do it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemd-cryptenroll --recovery-key /dev/sda5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will generate a key, enroll it in the LUKS2 volume, show it to
you on screen and generate a QR code you may scan off screen if you
like. The key has highest entropy, and can be entered wherever you can
enter a passphrase. Because of that you don't have to modify
&lt;code&gt;/etc/crypttab&lt;/code&gt; to make the recovery key work.&lt;/p&gt;
&lt;h1&gt;Future&lt;/h1&gt;
&lt;p&gt;There's still plenty room for further improvement in all of this. In
particular for the TPM2 case: what the text above doesn't really
mention is that binding your encrypted volume unlocking to specific
software versions (i.e. kernel + initrd + OS versions) actually sucks
hard: if you naively update your system to newer versions you might
lose access to your TPM2 enrolled keys (which isn't terrible, after
all you did enroll a recovery key ‚Äî &lt;em&gt;right&lt;/em&gt;? ‚Äî which you then can use
to regain access). To solve this some more integration with
distributions would be necessary: whenever they upgrade the system
they'd have to make sure to enroll the TPM2 again ‚Äî with the PCR
hashes matching the new version. And whenever they remove an old
version of the system they need to remove the old TPM2
enrollment. Alternatively TPM2 also knows a concept of &lt;em&gt;signed&lt;/em&gt; PCR
hash values. In this mode the distro could just ship a set of PCR
signatures which would unlock the TPM2 keys. (But quite frankly I
don't really see the point: whether you drop in a signature file on
each system update, or enroll a new set of PCR hashes in the LUKS2
header doesn't make much of a difference). Either way, to make TPM2
enrollment smooth some more integration work with your distribution's
system update mechanisms need to happen. And yes, because of this OS
updating complexity the example above ‚Äî where I referenced your trusty
Fedora Linux ‚Äî doesn't actually work IRL (yet? hopefully‚Ä¶). Nothing
updates the enrollment automatically after you initially enrolled it,
hence after the first kernel/initrd update you have to manually
re-enroll things again, and again, and again ‚Ä¶ after every update.&lt;/p&gt;
&lt;p&gt;The TPM2 could also be used for other kinds of key policies, we might
look into adding later too. For example, Windows uses TPM2 stuff to
allow short (4 digits or so) "PINs" for unlocking the harddisk,
i.e. kind of a low-entropy password you type in. The reason this is
reasonably safe is that in this case the PIN is passed to the TPM2
which enforces that not more than some limited amount of unlock
attempts may be made within some time frame, and that after too many
attempts the PIN is invalidated altogether. Thus making dictionary
attacks harder (which would normally be easier given the short length
of the PINs).&lt;/p&gt;
&lt;h1&gt;Postscript&lt;/h1&gt;
&lt;p&gt;(BTW: Yubico sent me two YubiKeys for testing, Nitrokey a Nitrokey
FIDO2, and AuthenTrend three ATKey.Pro tokens, thank you! ‚Äî That's why
you see all those references to YubiKey/Nitrokey/AuthenTrend devices
in the text above: it's the hardware I had to test this with. That
said, I also tested the FIDO2 stuff with a SoloKey I bought, where it
also worked fine. And yes, you!, other vendors!, who might be reading
this, please send me your security tokens &lt;em&gt;for&lt;/em&gt; &lt;em&gt;free&lt;/em&gt;, too, and I
might test things with them as well. No promises though. And I am not
going to give them back, if you do, sorry. ;-))&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 13 Jan 2021 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2021-01-13:/blog/unlocking-luks2-volumes-with-tpm2-fido2-pkcs11-security-hardware-on-systemd-248.html</guid><category>projects</category></item><item><title>ASG! 2019 CfP Re-Opened!</title><link>https://0pointer.net/blog/asg-2019-cfp-re-opened.html</link><description>&lt;p&gt;&lt;large&gt;&lt;b&gt;The All Systems Go! 2019 Call for Participation Re-Opened for ONE DAY!&lt;/b&gt;&lt;/large&gt;&lt;/p&gt;
&lt;p&gt;Due to popular request we have re-opened the Call for Participation
(CFP) for &lt;a href="https://all-systems-go.io/"&gt;All Systems Go!  2019&lt;/a&gt; for one
day. It will close again &lt;em&gt;TODAY&lt;/em&gt;, on 15 of July 2019, midnight Central
European Summit Time! If you missed the deadline so far, we‚Äôd like to
invite you to submit your proposals for consideration to &lt;a href="https://cfp.all-systems-go.io/ASG2019/cfp"&gt;the CFP
submission site&lt;/a&gt; quickly!
(And yes, this is the last extension, there's not going to be any
more extensions.)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pbs.twimg.com/profile_banners/869627937145802752/1551356869/1500x500" alt="ASG image" width="1000" height="333"/&gt;&lt;/p&gt;
&lt;p&gt;All Systems Go! is everybody's favourite low-level Userspace Linux
conference, taking place in Berlin, Germany in September 20-22, 2019.&lt;/p&gt;
&lt;p&gt;For more information please visit &lt;a href="https://all-systems-go.io/"&gt;our conference
website&lt;/a&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 15 Jul 2019 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2019-07-15:/blog/asg-2019-cfp-re-opened.html</guid><category>projects</category></item><item><title>Walkthrough for Portable Services in Go</title><link>https://0pointer.net/blog/walkthrough-for-portable-services-in-go.html</link><description>&lt;h1&gt;Portable Services Walkthrough (Go Edition)&lt;/h1&gt;
&lt;p&gt;A few months ago I posted &lt;a href="http://0pointer.net/blog/walkthrough-for-portable-services.html"&gt;a blog story with a walkthrough of systemd
Portable
Services&lt;/a&gt;. The
example service given was written in C, and the image was built with
&lt;a href="https://github.com/systemd/mkosi"&gt;&lt;code&gt;mkosi&lt;/code&gt;&lt;/a&gt;. In this blog story I'd
like to revisit the exercise, but this time focus on a different
aspect: modern programming languages like Go and Rust push users a lot
more towards static linking of libraries than the usual dynamic
linking preferred by C (at least in the way C is used by traditional
Linux distributions).&lt;/p&gt;
&lt;p&gt;Static linking means we can greatly simplify image building: if we
don't have to link against shared libraries during runtime we don't
have to include them in the portable service image. And that means
pretty much all need for building an image from a Linux distribution
of some kind goes away as we'll have next to no dependencies that
would require us to rely on a distribution package manager or
distribution packages. In fact, as it turns out, we only need as few
as three files in the portable service image to be fully functional.&lt;/p&gt;
&lt;p&gt;So, let's have a closer look how such an image can be put
together. All of the following is available in &lt;a href="https://github.com/systemd/portable-walkthrough-go"&gt;this git
repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;A Simple Go Service&lt;/h2&gt;
&lt;p&gt;Let's start with a simple Go service, an HTTP service that simply
counts how often a page from it is requested. Here are the sources:
&lt;a href="https://github.com/systemd/portable-walkthrough-go/blob/master/main.go"&gt;main.go&lt;/a&gt;
‚Äî note that I am not a seasoned Go programmer, hence please be
gracious.&lt;/p&gt;
&lt;p&gt;The service implements systemd's socket activation protocol, and thus
can receive bound TCP listener sockets from systemd, using the
&lt;code&gt;$LISTEN_PID&lt;/code&gt; and &lt;code&gt;$LISTEN_FDS&lt;/code&gt; environment variables.&lt;/p&gt;
&lt;p&gt;The service will store the counter data in the directory indicated in
the &lt;code&gt;$STATE_DIRECTORY&lt;/code&gt; environment variable, which happens to be an
environment variable current systemd versions set based on the
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RuntimeDirectory="&gt;&lt;code&gt;StateDirectory=&lt;/code&gt;&lt;/a&gt;
setting in service files.&lt;/p&gt;
&lt;h1&gt;Two Simple Unit Files&lt;/h1&gt;
&lt;p&gt;When a service shall be managed by systemd a unit file is
required. Since the service we are putting together shall be socket
activatable, we even have two:
&lt;a href="https://github.com/systemd/portable-walkthrough-go/blob/master/portable-walkthrough-go.service"&gt;&lt;code&gt;portable-walkthrough-go.service&lt;/code&gt;&lt;/a&gt;
(the description of the service binary itself) and
&lt;a href="https://github.com/systemd/portable-walkthrough-go/blob/master/portable-walkthrough-go.socket"&gt;&lt;code&gt;portable-walkthrough-go.socket&lt;/code&gt;&lt;/a&gt;
(the description of the sockets to listen on for the service).&lt;/p&gt;
&lt;p&gt;These units are not particularly remarkable: the &lt;code&gt;.service&lt;/code&gt; file
primarily contains the command line to invoke and a &lt;code&gt;StateDirectory=&lt;/code&gt;
setting to make sure the service when invoked gets its own private
state directory under &lt;code&gt;/var/lib/&lt;/code&gt; (and the &lt;code&gt;$STATE_DIRECTORY&lt;/code&gt;
environment variable is set to the resulting path). The &lt;code&gt;.socket&lt;/code&gt; file
simply lists 8088 as TCP/IP port to listen on.&lt;/p&gt;
&lt;h1&gt;An OS Description File&lt;/h1&gt;
&lt;p&gt;OS images (and that includes portable service images) generally should
include an
&lt;a href="https://www.freedesktop.org/software/systemd/man/os-release.html"&gt;&lt;code&gt;os-release&lt;/code&gt;&lt;/a&gt;
file. Usually, that is provided by the distribution. Since we are
building an image without any distribution let's write our &lt;a href="https://github.com/systemd/portable-walkthrough-go/blob/master/os-release"&gt;own
version of such a
file&lt;/a&gt;. Later
on we can use the &lt;code&gt;portablectl inspect&lt;/code&gt; command to have a look at this
metadata of our image.&lt;/p&gt;
&lt;h1&gt;Putting it All Together&lt;/h1&gt;
&lt;p&gt;The four files described above are already every file we need to build
our image. Let's now put the portable service image together. For that
I've written a
&lt;a href="https://github.com/systemd/portable-walkthrough-go/blob/master/Makefile"&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt;. It
contains two relevant rules: the first one builds the static binary
from the Go program sources. The second one then puts together a
&lt;code&gt;squashfs&lt;/code&gt; file system combining the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The compiled, statically linked service binary&lt;/li&gt;
&lt;li&gt;The two systemd unit files&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;os-release&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;A couple of empty directories such as &lt;code&gt;/proc/&lt;/code&gt;, &lt;code&gt;/sys/&lt;/code&gt;, &lt;code&gt;/dev/&lt;/code&gt;
   and so on that need to be over-mounted with the respective kernel
   API file system. We need to create them as empty directories here
   since Linux insists on directories to exist in order to over-mount
   them, and since the image we are building is going to be an
   immutable read-only image (&lt;code&gt;squashfs&lt;/code&gt;) these directories cannot be
   created dynamically when the portable image is mounted.&lt;/li&gt;
&lt;li&gt;Two empty files &lt;code&gt;/etc/resolv.conf&lt;/code&gt; and &lt;code&gt;/etc/machine-id&lt;/code&gt; that can
   be over-mounted with the same files from the host.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's already it. After a quick &lt;code&gt;make&lt;/code&gt; we'll have our portable
service image &lt;code&gt;portable-walkthrough-go.raw&lt;/code&gt; and are ready to go.&lt;/p&gt;
&lt;h1&gt;Trying it out&lt;/h1&gt;
&lt;p&gt;Let's now attach the portable service image to our host system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;portablectl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Matching&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;prefix&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;portable-walkthrough-go&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Created&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Created&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Written&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Copied&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Created&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Written&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Created&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;‚Üí&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Copied&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Created&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;symlink&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portables&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;‚Üí&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lennart&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;projects&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The portable service image is now attached to the host, which means we
can now go and start it (or even enable it):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's see if our little web service works, by doing an HTTP request on port 8088:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# curl localhost:8088
Hello! You are visitor #1!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's try this again, to check if it counts correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# curl localhost:8088
Hello! You are visitor #2!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nice! It worked. Let's now stop the service again, and detach the image again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;portablectl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;detach&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portables&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;portable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;walkthrough&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Removed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attached&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there we go, the portable image file is detached from the host again.&lt;/p&gt;
&lt;h2&gt;A Couple of Notes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Of course, this is a simplistic example: in real life services will
   be more than one compiled file, even when statically linked. But
   you get the idea, and it's very easy to extend the example above to
   include any additional, auxiliary files in the portable service
   image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The service is very nicely sandboxed during runtime: while it runs
   as regular service on the host (and you thus can watch its logs or
   do resource management on it like you would do for all other
   systemd services), it runs in a very restricted environment under a
   dynamically assigned UID that ceases to exist when the service is
   stopped again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Originally I wanted to make the service not only socket activatable
   but also implement exit-on-idle, i.e. add a logic so that the
   service terminates on its own when there's no ongoing HTTP
   connection for a while. I couldn't figure out how to do this
   race-freely in Go though, but I am sure an interested reader might
   want to add that? By combining socket activation with exit-on-idle
   we can turn this project into an excercise of putting together an
   extremely resource-friendly and robust service architecture: the
   service is started only when needed and terminates when no longer
   needed. This would allow to pack services at a much higher density
   even on systems with few resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While the basic concepts of portable services have been around
   since systemd 239, it's best to try the above with systemd 241 or
   newer since the portable service logic received a number of fixes
   since then.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;A low-level document introducing Portable Services is &lt;a href="https://systemd.io/PORTABLE_SERVICES"&gt;shipped along
with systemd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please have a look at the &lt;a href="http://0pointer.net/blog/walkthrough-for-portable-services.html"&gt;blog story from a few months
ago&lt;/a&gt;
that did something very similar with a service written in C.&lt;/p&gt;
&lt;p&gt;There are also relevant manual pages:
&lt;a href="https://www.freedesktop.org/software/systemd/man/portablectl.html"&gt;&lt;code&gt;portablectl(1)&lt;/code&gt;&lt;/a&gt;
and
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-portabled.service.html"&gt;&lt;code&gt;systemd-portabled(8)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 03 Apr 2019 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2019-04-03:/blog/walkthrough-for-portable-services-in-go.html</guid><category>projects</category></item><item><title>ASG! 2018 Tickets</title><link>https://0pointer.net/blog/asg-2018-tickets.html</link><description>&lt;p&gt;&lt;large&gt;&lt;b&gt;All Systems Go! 2018 Tickets Selling Out Quickly!&lt;/b&gt;&lt;/large&gt;&lt;/p&gt;
&lt;p&gt;Buy your tickets for &lt;a href="https://all-systems-go.io/"&gt;All Systems Go!
2018&lt;/a&gt; soon, they are quickly selling out!
The conference takes place on &lt;em&gt;September 28-30&lt;/em&gt;, in &lt;em&gt;Berlin&lt;/em&gt;, Germany, in
a bit over two weeks.&lt;/p&gt;
&lt;p&gt;Why should you attend? If you are interested in low-level Linux
userspace, then All Systems Go! is the right conference for you. It
covers all topics relevant to foundational open-source Linux
technologies. For details on the covered topics see our schedule &lt;a href="https://cfp.all-systems-go.io/en/ASG2018/public/schedule/2"&gt;for day #1&lt;/a&gt;
and &lt;a href="https://cfp.all-systems-go.io/en/ASG2018/public/schedule/3"&gt;for day #2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information please visit &lt;a href="https://all-systems-go.io/"&gt;our conference
website&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;See you in Berlin!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 11 Sep 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2018-09-11:/blog/asg-2018-tickets.html</guid><category>projects</category></item><item><title>ASG! 2018 CfP Closes TODAY</title><link>https://0pointer.net/blog/asg-2018-cfp-closes-today.html</link><description>&lt;p&gt;&lt;large&gt;&lt;b&gt;The All Systems Go! 2018 Call for Participation Closes TODAY!&lt;/b&gt;&lt;/large&gt;&lt;/p&gt;
&lt;p&gt;The Call for Participation (CFP) for &lt;a href="https://all-systems-go.io/"&gt;All Systems Go!
2018&lt;/a&gt; will close &lt;em&gt;TODAY&lt;/em&gt;, on 30th of
July! We‚Äôd like to invite you to submit your proposals for
consideration to &lt;a href="https://cfp.all-systems-go.io/de/ASG2018/cfp"&gt;the CFP submission
site&lt;/a&gt; quickly!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://scontent-frx5-1.xx.fbcdn.net/v/t1.0-9/32372869_2062729060632451_4411941877062828032_o.jpg?_nc_cat=0&amp;oh=112809c076e808ede4dee6e50afe2b99&amp;oe=5B8ACDDF" alt="ASG image" width="512" height="256"/&gt;&lt;/p&gt;
&lt;p&gt;All Systems Go! is everybody's favourite low-level Userspace Linux
conference, taking place in Berlin, Germany in September 28-30, 2018.&lt;/p&gt;
&lt;p&gt;For more information please visit &lt;a href="https://all-systems-go.io/"&gt;our conference
website&lt;/a&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 30 Jul 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2018-07-30:/blog/asg-2018-cfp-closes-today.html</guid><category>projects</category></item><item><title>ASG! 2018 CfP Closes Soon</title><link>https://0pointer.net/blog/asg-2018-cfp-closes-soon.html</link><description>&lt;p&gt;&lt;large&gt;&lt;b&gt;The All Systems Go! 2018 Call for Participation Closes in One Week!&lt;/b&gt;&lt;/large&gt;&lt;/p&gt;
&lt;p&gt;The Call for Participation (CFP) for &lt;a href="https://all-systems-go.io/"&gt;All Systems Go!
2018&lt;/a&gt; will close &lt;em&gt;in one week&lt;/em&gt;, on 30th of
July! We‚Äôd like to invite you to submit your proposals for
consideration to &lt;a href="https://cfp.all-systems-go.io/de/ASG2018/cfp"&gt;the CFP submission
site&lt;/a&gt; quickly!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://scontent-frx5-1.xx.fbcdn.net/v/t1.0-9/32372869_2062729060632451_4411941877062828032_o.jpg?_nc_cat=0&amp;oh=112809c076e808ede4dee6e50afe2b99&amp;oe=5B8ACDDF" alt="ASG image" width="512" height="256"/&gt;&lt;/p&gt;
&lt;p&gt;Notification of acceptance and non-acceptance will go out within 7
days of the closing of the CFP.&lt;/p&gt;
&lt;p&gt;All topics relevant to foundational open-source Linux technologies are
welcome. In particular, however, we are looking for proposals
including, but not limited to, the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Low-level container executors and infrastructure&lt;/li&gt;
&lt;li&gt;IoT and embedded OS infrastructure&lt;/li&gt;
&lt;li&gt;BPF and eBPF filtering&lt;/li&gt;
&lt;li&gt;OS, container, IoT image delivery and updating&lt;/li&gt;
&lt;li&gt;Building Linux devices and applications&lt;/li&gt;
&lt;li&gt;Low-level desktop technologies&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;System and service management&lt;/li&gt;
&lt;li&gt;Tracing and performance measuring&lt;/li&gt;
&lt;li&gt;IPC and RPC systems&lt;/li&gt;
&lt;li&gt;Security and Sandboxing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While our focus is definitely more on the user-space side of things,
talks about kernel projects are welcome, as long as they have a clear
and direct relevance for user-space.&lt;/p&gt;
&lt;p&gt;For more information please visit &lt;a href="https://all-systems-go.io/"&gt;our conference
website&lt;/a&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 23 Jul 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2018-07-23:/blog/asg-2018-cfp-closes-soon.html</guid><category>projects</category></item><item><title>Walkthrough for Portable Services</title><link>https://0pointer.net/blog/walkthrough-for-portable-services.html</link><description>&lt;h1&gt;Portable Services with systemd v239&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://lists.freedesktop.org/archives/systemd-devel/2018-June/040879.html"&gt;systemd
v239&lt;/a&gt;
contains a great number of new features. One of them is first class
support for &lt;a href="https://systemd.io/PORTABLE_SERVICES"&gt;Portable
Services&lt;/a&gt;. In this blog story
I'd like to shed some light on what they are and why they might be
interesting for your application.&lt;/p&gt;
&lt;h2&gt;What are "Portable Services"?&lt;/h2&gt;
&lt;p&gt;The "Portable Service" concept takes inspiration from classic
&lt;code&gt;chroot()&lt;/code&gt; environments as well as container management and brings a
number of their features to more regular system service management.&lt;/p&gt;
&lt;p&gt;While the definition of what a "container" really is is hotly debated,
I figure people can generally agree that the "container" concept
primarily provides two major features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Resource bundling: a container generally brings its own file system
   tree along, bundling any shared libraries and other resources it
   might need along with the main service executables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Isolation and sand-boxing: a container operates in a name-spaced
   environment that is relatively detached from the host. Besides
   living in its own file system namespace it usually also has its own
   user database, process tree and so on. Access from the container to
   the host is limited with various security technologies.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of these two concepts the first one is also what traditional UNIX
&lt;code&gt;chroot()&lt;/code&gt; environments are about.&lt;/p&gt;
&lt;p&gt;Both resource bundling and isolation/sand-boxing are concepts systemd
has implemented to varying degrees for a longer time. Specifically,
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RootDirectory="&gt;&lt;code&gt;RootDirectory=&lt;/code&gt;&lt;/a&gt;
and
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RootImage="&gt;&lt;code&gt;RootImage=&lt;/code&gt;&lt;/a&gt;
have been around for a long time, and so have been the various
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#Sandboxing"&gt;sand-boxing
features&lt;/a&gt;
systemd provides. The Portable Services concept builds on that,
putting these features together in a new, integrated way to make them
more accessible and usable.&lt;/p&gt;
&lt;h2&gt;OK, so what precisely is a "Portable Service"?&lt;/h2&gt;
&lt;p&gt;Much like a container image, a portable service on disk can be just a
directory tree that contains service executables and all their
dependencies, in a hierarchy resembling the normal Linux directory
hierarchy. A portable service can also be a raw disk image, containing
a file system containing such a tree (which can be mounted via a
loop-back block device), or multiple file systems (in which case they
need to follow the &lt;a href="https://www.freedesktop.org/wiki/Specifications/DiscoverablePartitionsSpec/"&gt;Discoverable Partitions
Specification&lt;/a&gt;
and be located within a GPT partition table). Regardless whether the
portable service on disk is a simple directory tree or a raw disk
image, let's call this concept the portable service &lt;em&gt;image&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Such images can be generated with any tool typically used for the
purpose of installing OSes inside some directory, for example &lt;code&gt;dnf
--installroot=&lt;/code&gt; or &lt;code&gt;debootstrap&lt;/code&gt;. There are very few requirements made
on these trees, except the following two:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The tree should carry &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;systemd unit
   files&lt;/a&gt;
   for relevant services in them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The tree should carry
&lt;a href="https://www.freedesktop.org/software/systemd/man/os-release.html"&gt;&lt;code&gt;/usr/lib/os-release&lt;/code&gt;&lt;/a&gt;
(or &lt;code&gt;/etc/os-release&lt;/code&gt;) OS release information.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, as you might notice, OS trees generated from any of today's
big distributions generally qualify for these two requirements without
any further modification, as pretty much all of them adopted
&lt;code&gt;/usr/lib/os-release&lt;/code&gt; and tend to ship their major services with
systemd unit files.&lt;/p&gt;
&lt;p&gt;A portable service image generated like this can be "attached" or
"detached" from a host:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;"Attaching" an image to a host is done through the new
   &lt;a href="https://www.freedesktop.org/software/systemd/man/portablectl.html"&gt;&lt;code&gt;portablectl
   attach&lt;/code&gt;&lt;/a&gt;
   command. This command dissects the image, reading the &lt;code&gt;os-release&lt;/code&gt;
   information, and searching for unit files in them. It then copies
   relevant unit files out of the images and into
   &lt;code&gt;/etc/systemd/system/&lt;/code&gt;. After that it augments any copied service
   unit files in two ways: a drop-in adding a &lt;code&gt;RootDirectory=&lt;/code&gt; or
   &lt;code&gt;RootImage=&lt;/code&gt; line is added in so that even though the unit files
   are now available on the host when started they run the referenced
   binaries from the image. It also symlinks in a second drop-in which
   is called a "profile", which is supposed to carry additional
   security settings to enforce on the attached services, to ensure
   the right amount of sand-boxing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;"Detaching" an image from the host is done through &lt;code&gt;portable
   detach&lt;/code&gt;. It reverses the steps above: the unit files copied out are
   removed again, and so are the two drop-in files generated for them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While a portable service is attached its relevant unit files are made
available on the host like any others: they will appear in &lt;code&gt;systemctl
list-unit-files&lt;/code&gt;, you can enable and disable them, you can start them
and stop them. You can extend them with &lt;code&gt;systemctl edit&lt;/code&gt;. You can
introspect them. You can apply resource management to them like to any
other service, and you can process their logs like any other service
and so on. That's because they really &lt;em&gt;are&lt;/em&gt; native systemd services,
except that they have 'twist' if you so will: they have tougher
security by default and store their resources in a root directory or
image.&lt;/p&gt;
&lt;p&gt;And that's already the essence of what Portable Services are.&lt;/p&gt;
&lt;p&gt;A couple of interesting points:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Even though the focus is on shipping &lt;em&gt;service&lt;/em&gt; unit files in
   portable service images, you can actually ship timer units, socket
   units, target units, path units in portable services too. This
   means you can very naturally do time, socket and path based
   activation. It's also entirely fine to ship multiple service units
   in the same image, in case you have more complex applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This concept introduces zero new metadata. Unit files are an
   existing concept, as are &lt;code&gt;os-release&lt;/code&gt; files, and ‚Äî in case you opt
   for raw disk images ‚Äî GPT partition tables are already established
   too. This also means existing tools to generate images can be
   reused for building portable service images to a large degree as no
   completely new artifact types need to be generated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because the Portable Service concepts introduces zero new metadata
   and just builds on existing security and resource bundling
   features of systemd it's implemented in a set of distinct tools,
   relatively disconnected from the rest of systemd. Specifically, the
   main user-facing command is
   &lt;a href="https://www.freedesktop.org/software/systemd/man/portablectl.html"&gt;&lt;code&gt;portablectl&lt;/code&gt;&lt;/a&gt;,
   and the actual operations are implemented in
   &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-portabled.service.html"&gt;&lt;code&gt;systemd-portabled.service&lt;/code&gt;&lt;/a&gt;. If
   you so will, portable services are a true add-on to systemd, just
   making a specific work-flow nicer to use than with the basic
   operations systemd otherwise provides. Also note that
   &lt;code&gt;systemd-portabled&lt;/code&gt; provides bus APIs accessible to any program
   that wants to interface with it, &lt;code&gt;portablectl&lt;/code&gt; is just one tool
   that happens to be shipped along with systemd.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since Portable Services are a feature we only added very recently
   we wanted to keep some freedom to make changes still. Due to that
   we decided to install the &lt;code&gt;portablectl&lt;/code&gt; command into
   &lt;code&gt;/usr/lib/systemd/&lt;/code&gt; for now, so that it does not appear in &lt;code&gt;$PATH&lt;/code&gt;
   by default. This means, for now you have to invoke it with a full
   path: &lt;code&gt;/usr/lib/systemd/portablectl&lt;/code&gt;. We expect to move it into
   &lt;code&gt;/usr/bin/&lt;/code&gt; very soon though, and make it a fully supported
   interface of systemd.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You may wonder which unit files contained in a portable service
   image are the ones considered "relevant" and are actually copied
   out by the &lt;code&gt;portablectl attach&lt;/code&gt; operation. Currently, this is
   derived from the image name. Let's say you have an image stored in
   a directory &lt;code&gt;/var/lib/portables/foobar_4711/&lt;/code&gt; (or alternatively in
   a raw image &lt;code&gt;/var/lib/portables/foobar_4711.raw&lt;/code&gt;). In that case the
   unit files copied out match the pattern &lt;code&gt;foobar*.service&lt;/code&gt;,
   &lt;code&gt;foobar*.socket&lt;/code&gt;, &lt;code&gt;foobar*.target&lt;/code&gt;, &lt;code&gt;foobar*.path&lt;/code&gt;,
   &lt;code&gt;foobar*.timer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Portable Services concept does not define any specific method
   how images get on the deployment machines, that's entirely up to
   administrators. You can just &lt;code&gt;scp&lt;/code&gt; them there, or &lt;code&gt;wget&lt;/code&gt; them. You
   could even package them as RPMs and then deploy them with &lt;code&gt;dnf&lt;/code&gt; if
   you feel adventurous.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Portable service images can reside in any directory you
   like. However, if you place them in &lt;code&gt;/var/lib/portables/&lt;/code&gt; then
   &lt;code&gt;portablectl&lt;/code&gt; will find them easily and can show you a list of
   images you can attach and suchlike.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Attaching a portable service image can be done persistently, so
   that it remains attached on subsequent boots (which is the default),
   or it can be attached only until the next reboot, by passing
   &lt;code&gt;--runtime&lt;/code&gt; to &lt;code&gt;portablectl&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because portable service images are ultimately just regular OS
   images, it's natural and easy to build a single image that can be
   used in three different ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It can be attached to any host as a portable service image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can be booted as OS container, for example in a container
   manager like &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-nspawn.html"&gt;&lt;code&gt;systemd-nspawn&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can be booted as host system, for example on bare metal or
   in a VM manager.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, to qualify for the latter two the image needs to
contain more than just the service binaries, the &lt;code&gt;os-release&lt;/code&gt; file
and the unit files. To be bootable an OS container manager such as
&lt;code&gt;systemd-nspawn&lt;/code&gt; the image needs to contain an init system of some
form, for example
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.html"&gt;&lt;code&gt;systemd&lt;/code&gt;&lt;/a&gt;. To
be bootable on bare metal or as VM it also needs a boot loader of
some form, for example
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-boot.html"&gt;&lt;code&gt;systemd-boot&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Profiles&lt;/h2&gt;
&lt;p&gt;In the previous section the "profile" concept was briefly
mentioned. Since they are a major feature of the Portable Services
concept, they deserve some focus. A "profile" is ultimately just a
pre-defined drop-in file for unit files that are attached to a
host. They are supposed to mostly contain sand-boxing and security
settings, but may actually contain any other settings, too. When a
portable service is attached a suitable profile has to be selected. If
none is selected explicitly, the default profile called &lt;code&gt;default&lt;/code&gt; is
used. systemd ships with four different profiles out of the box:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The
&lt;a href="https://github.com/systemd/systemd/blob/master/src/portable/profile/default/service.conf"&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;
profile provides a medium level of security. It contains settings to
drop capabilities, enforce system call filters, restrict many kernel
interfaces and mount various file systems read-only.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The
&lt;a href="https://github.com/systemd/systemd/blob/master/src/portable/profile/strict/service.conf"&gt;&lt;code&gt;strict&lt;/code&gt;&lt;/a&gt;
profile is similar to the &lt;code&gt;default&lt;/code&gt; profile, but generally uses the
most restrictive sand-boxing settings. For example networking is turned
off and access to &lt;code&gt;AF_NETLINK&lt;/code&gt; sockets is prohibited.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The
&lt;a href="https://github.com/systemd/systemd/blob/master/src/portable/profile/trusted/service.conf"&gt;&lt;code&gt;trusted&lt;/code&gt;&lt;/a&gt;
profile is the least strict of them all. In fact it makes almost no
restrictions at all. A service run with this profile has basically
full access to the host system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The
&lt;a href="https://github.com/systemd/systemd/blob/master/src/portable/profile/nonetwork/service.conf"&gt;&lt;code&gt;nonetwork&lt;/code&gt;&lt;/a&gt;
profile is mostly identical to &lt;code&gt;default&lt;/code&gt;, but also turns off network access.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that the profile is selected at the time the portable service
image is attached, and it applies to all service files attached, in
case multiple are shipped in the same image. Thus, the sand-boxing
restriction to enforce are selected by the administrator attaching the
image and not the image vendor.&lt;/p&gt;
&lt;p&gt;Additional profiles can be defined easily by the administrator, if
needed. We might also add additional profiles sooner or later to be
shipped with systemd out of the box.&lt;/p&gt;
&lt;h2&gt;What's the use-case for this? If I have containers, why should I bother?&lt;/h2&gt;
&lt;p&gt;Portable Services are primarily intended to cover use-cases where code
should more feel like "extensions" to the host system rather than live
in disconnected, separate worlds. The profile concept is
supposed to be tunable to the exact right amount of integration or
isolation needed for an application.&lt;/p&gt;
&lt;p&gt;In the container world the concept of "super-privileged containers"
has been touted a lot, i.e. containers that run with full
privileges. It's precisely that use-case that portable services are
intended for: extensions to the host OS, that default to isolation,
but can optionally get as much access to the host as needed, and can
naturally take benefit of the full functionality of the host. The
concept should hence be useful for all kinds of low-level system
software that isn't shipped with the OS itself but needs varying
degrees of integration with it. Besides servers and appliances this
should be particularly interesting for IoT and embedded devices.&lt;/p&gt;
&lt;p&gt;Because portable services are just a relatively small extension to the
way system services are otherwise managed, they can be treated like
regular service for almost all use-cases: they will appear along
regular services in all tools that can introspect systemd unit data,
and can be managed the same way when it comes to logging, resource
management, runtime life-cycles and so on.&lt;/p&gt;
&lt;p&gt;Portable services are a very generic concept. While the original
use-case is OS extensions, it's of course entirely up to you and other
users to use them in a suitable way of your choice.&lt;/p&gt;
&lt;h2&gt;Walkthrough&lt;/h2&gt;
&lt;p&gt;Let's have a look how this all can be used. We'll start with building
a portable service image from scratch, before we attach, enable and
start it on a host.&lt;/p&gt;
&lt;h3&gt;Building a Portable Service image&lt;/h3&gt;
&lt;p&gt;As mentioned, you can use any tool you like that can create OS trees
or raw images for building Portable Service images, for example
&lt;code&gt;debootstrap&lt;/code&gt; or &lt;code&gt;dnf --installroot=&lt;/code&gt;. For this example walkthrough
run we'll use &lt;a href="https://github.com/systemd/mkosi"&gt;&lt;code&gt;mkosi&lt;/code&gt;&lt;/a&gt;, which is
ultimately just a fancy wrapper around &lt;code&gt;dnf&lt;/code&gt; and &lt;code&gt;debootstrap&lt;/code&gt; but
makes a number of things particularly easy when repetitively building
images from source trees.&lt;/p&gt;
&lt;p&gt;I have pushed everything necessary to reproduce this walkthrough
locally to &lt;a href="https://github.com/systemd/portable-walkthrough"&gt;a GitHub
repository&lt;/a&gt;. Let's check it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ git clone https://github.com/systemd/portable-walkthrough.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's have a look in the repository:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First of all,
   &lt;a href="https://github.com/systemd/portable-walkthrough/blob/master/walkthroughd.c"&gt;&lt;code&gt;walkthroughd.c&lt;/code&gt;&lt;/a&gt;
   is the main source file of our little service. To keep things
   simple it's written in C, but it could be in any language of your
   choice. The daemon as implemented won't do much: it just starts up
   and waits for &lt;code&gt;SIGTERM&lt;/code&gt;, at which point it will shut down. It's
   ultimately useless, but hopefully illustrates how this all fits
   together. The C code has no dependencies besides libc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/systemd/portable-walkthrough/blob/master/walkthroughd.service"&gt;&lt;code&gt;walkthroughd.service&lt;/code&gt;&lt;/a&gt;
   is a systemd unit file that starts our little daemon. It's a simple
   service, hence the unit file is trivial.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/systemd/portable-walkthrough/blob/master/Makefile"&gt;&lt;code&gt;Makefile&lt;/code&gt;&lt;/a&gt;
   is a short make build script to build the daemon binary. It's
   pretty trivial, too: it just takes the C file and builds a binary
   from it. It can also install the daemon. It places the binary in
   &lt;code&gt;/usr/local/lib/walkthroughd/walkthroughd&lt;/code&gt; (why not in
   &lt;code&gt;/usr/local/bin&lt;/code&gt;? because it's not a user-facing binary but a system
   service binary), and its unit file in
   &lt;code&gt;/usr/local/lib/systemd/walkthroughd.service&lt;/code&gt;. If you want to test
   the daemon on the host we can now simply run &lt;code&gt;make&lt;/code&gt; and then
   &lt;code&gt;./walkthroughd&lt;/code&gt; in order to check everything works.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/systemd/portable-walkthrough/blob/master/mkosi.default"&gt;&lt;code&gt;mkosi.default&lt;/code&gt;&lt;/a&gt;
   is file that tells &lt;code&gt;mkosi&lt;/code&gt; how to build the image. We opt for a
   Fedora-based image here (but we might as well have used Debian
   here, or any other supported distribution). We need no particular
   packages during runtime (after all we only depend on libc), but
   during the build phase we need gcc and make, hence these are the
   only packages we list in &lt;code&gt;BuildPackages=&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/systemd/portable-walkthrough/blob/master/mkosi.build"&gt;&lt;code&gt;mkosi.build&lt;/code&gt;&lt;/a&gt;
   is a shell script that is invoked during mkosi's build logic. All
   it does is invoke &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;make install&lt;/code&gt; to build and install
   our little daemon, and afterwards it extends the
   distribution-supplied &lt;code&gt;/etc/os-release&lt;/code&gt; file with an additional
   field that describes our portable service a bit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let's now use this to build the portable service image. For that we
use the &lt;a href="https://github.com/systemd/mkosi"&gt;mkosi&lt;/a&gt; tool. It's
sufficient to invoke it without parameter to build the first image: it
will automatically discover &lt;code&gt;mkosi.default&lt;/code&gt; and &lt;code&gt;mkosi.build&lt;/code&gt; which
tells it what to do. (Note that if you work on a project like this for
a longer time, &lt;code&gt;mkosi -if&lt;/code&gt; is probably the better command to use, as
it that speeds up building substantially by using an incremental build
mode). &lt;code&gt;mkosi&lt;/code&gt; will download the necessary RPMs, and put them all
together. It will build our little daemon inside the image and after
all that's done it will output the resulting image:
&lt;code&gt;walkthroughd_1.raw&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because we opted to build a GPT raw disk image in &lt;code&gt;mkosi.default&lt;/code&gt; this
file is actually a raw disk image containing a GPT partition
table. You can use &lt;code&gt;fdisk -l walkthroughd_1.raw&lt;/code&gt; to enumerate the
partition table. You can also use &lt;code&gt;systemd-nspawn -i
walkthroughd_1.raw&lt;/code&gt; to explore the image quickly if you need.&lt;/p&gt;
&lt;h2&gt;Using the Portable Service Image&lt;/h2&gt;
&lt;p&gt;Now that we have a portable service image, let's see how we can
attach, enable and start the service included within it.&lt;/p&gt;
&lt;p&gt;First, let's attach the image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;/usr/lib/systemd/portablectl attach ./walkthroughd_1.raw
&lt;span class="gp gp-VirtualEnv"&gt;(Matching unit files with prefix &amp;#39;walkthroughd&amp;#39;.)&lt;/span&gt;
&lt;span class="go"&gt;Created directory /etc/systemd/system/walkthroughd.service.d.&lt;/span&gt;
&lt;span class="go"&gt;Written /etc/systemd/system/walkthroughd.service.d/20-portable.conf.&lt;/span&gt;
&lt;span class="go"&gt;Created symlink /etc/systemd/system/walkthroughd.service.d/10-profile.conf ‚Üí /usr/lib/systemd/portable/profile/default/service.conf.&lt;/span&gt;
&lt;span class="go"&gt;Copied /etc/systemd/system/walkthroughd.service.&lt;/span&gt;
&lt;span class="go"&gt;Created symlink /etc/portables/walkthroughd_1.raw ‚Üí /home/lennart/projects/portable-walkthrough/walkthroughd_1.raw.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The command will show you exactly what is has been doing: it just
copied the main service file out, and added the two drop-ins, as
expected.&lt;/p&gt;
&lt;p&gt;Let's see if the unit is now available on the host, just like a regular unit, as promised:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemctl status walkthroughd.service
&lt;span class="go"&gt;‚óè walkthroughd.service - A simple example service&lt;/span&gt;
&lt;span class="go"&gt;   Loaded: loaded (/etc/systemd/system/walkthroughd.service; disabled; vendor preset: disabled)&lt;/span&gt;
&lt;span class="go"&gt;  Drop-In: /etc/systemd/system/walkthroughd.service.d&lt;/span&gt;
&lt;span class="go"&gt;           ‚îî‚îÄ10-profile.conf, 20-portable.conf&lt;/span&gt;
&lt;span class="go"&gt;   Active: inactive (dead)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nice, it worked. We see that the unit file is available and that
systemd correctly discovered the two drop-ins. The unit is neither
enabled nor started however. Yes, attaching a portable service image
doesn't imply enabling nor starting. It just means the unit files
contained in the image are made available to the host. It's up to the
administrator to then enable them (so that they are automatically
started when needed, for example at boot), and/or start them (in case
they shall run right-away).&lt;/p&gt;
&lt;p&gt;Let's now enable and start the service in one step:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; --now walkthroughd.service
&lt;span class="go"&gt;Created symlink /etc/systemd/system/multi-user.target.wants/walkthroughd.service ‚Üí /etc/systemd/system/walkthroughd.service.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's check if it's running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemctl status walkthroughd.service
&lt;span class="go"&gt;‚óè walkthroughd.service - A simple example service&lt;/span&gt;
&lt;span class="go"&gt;   Loaded: loaded (/etc/systemd/system/walkthroughd.service; enabled; vendor preset: disabled)&lt;/span&gt;
&lt;span class="go"&gt;  Drop-In: /etc/systemd/system/walkthroughd.service.d&lt;/span&gt;
&lt;span class="go"&gt;           ‚îî‚îÄ10-profile.conf, 20-portable.conf&lt;/span&gt;
&lt;span class="go"&gt;   Active: active (running) since Wed 2018-06-27 17:55:30 CEST; 4s ago&lt;/span&gt;
&lt;span class="go"&gt; Main PID: 45003 (walkthroughd)&lt;/span&gt;
&lt;span class="go"&gt;    Tasks: 1 (limit: 4915)&lt;/span&gt;
&lt;span class="go"&gt;   Memory: 4.3M&lt;/span&gt;
&lt;span class="go"&gt;   CGroup: /system.slice/walkthroughd.service&lt;/span&gt;
&lt;span class="go"&gt;           ‚îî‚îÄ45003 /usr/local/lib/walkthroughd/walkthroughd&lt;/span&gt;

&lt;span class="go"&gt;Jun 27 17:55:30 sigma walkthroughd[45003]: Initializing.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Perfect! We can see that the service is now enabled and running. The daemon is running as PID 45003.&lt;/p&gt;
&lt;p&gt;Now that we verified that all is good, let's stop, disable and detach the service again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemctl disable --now walkthroughd.service
&lt;span class="go"&gt;Removed /etc/systemd/system/multi-user.target.wants/walkthroughd.service.&lt;/span&gt;
&lt;span class="gp"&gt;# &lt;/span&gt;/usr/lib/systemd/portablectl detach ./walkthroughd_1.raw
&lt;span class="go"&gt;Removed /etc/systemd/system/walkthroughd.service.&lt;/span&gt;
&lt;span class="go"&gt;Removed /etc/systemd/system/walkthroughd.service.d/10-profile.conf.&lt;/span&gt;
&lt;span class="go"&gt;Removed /etc/systemd/system/walkthroughd.service.d/20-portable.conf.&lt;/span&gt;
&lt;span class="go"&gt;Removed /etc/systemd/system/walkthroughd.service.d.&lt;/span&gt;
&lt;span class="go"&gt;Removed /etc/portables/walkthroughd_1.raw.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, let's see that it's really gone:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;systemctl status walkthroughd
&lt;span class="go"&gt;Unit walkthroughd.service could not be found.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Perfect! It worked!&lt;/p&gt;
&lt;p&gt;I hope the above gets you started with Portable Services. If you have
further questions, please contact &lt;a href="https://lists.freedesktop.org/mailman/listinfo/systemd-devel"&gt;our mailing
list&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;A more low-level document explaining details is &lt;a href="https://systemd.io/PORTABLE_SERVICES"&gt;shipped
along with systemd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are also relevant manual pages:
&lt;a href="https://www.freedesktop.org/software/systemd/man/portablectl.html"&gt;&lt;code&gt;portablectl(1)&lt;/code&gt;&lt;/a&gt;
and
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-portabled.service.html"&gt;&lt;code&gt;systemd-portabled(8)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For further information about &lt;code&gt;mkosi&lt;/code&gt; see &lt;a href="https://github.com/systemd/mkosi"&gt;its homepage&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 27 Jun 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2018-06-27:/blog/walkthrough-for-portable-services.html</guid><category>projects</category></item><item><title>All Systems Go! 2018 CfP Open</title><link>https://0pointer.net/blog/all-systems-go-2018-cfp-open.html</link><description>&lt;p&gt;&lt;large&gt;&lt;b&gt;The All Systems Go! 2018 Call for Participation is Now Open!&lt;/b&gt;&lt;/large&gt;&lt;/p&gt;
&lt;p&gt;The Call for Participation (CFP) for &lt;a href="https://all-systems-go.io/"&gt;All Systems Go!
2018&lt;/a&gt; is now open. We‚Äôd like to invite you
to submit your proposals for consideration to &lt;a href="https://cfp.all-systems-go.io/de/ASG2018/cfp"&gt;the CFP submission
site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://scontent-frx5-1.xx.fbcdn.net/v/t1.0-9/32372869_2062729060632451_4411941877062828032_o.jpg?_nc_cat=0&amp;oh=112809c076e808ede4dee6e50afe2b99&amp;oe=5B8ACDDF" alt="ASG image" width="512" height="256"/&gt;&lt;/p&gt;
&lt;p&gt;The CFP will close on July 30th. Notification of acceptance and
non-acceptance will go out within 7 days of the closing of the CFP.&lt;/p&gt;
&lt;p&gt;All topics relevant to foundational open-source Linux technologies are
welcome. In particular, however, we are looking for proposals
including, but not limited to, the following topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Low-level container executors and infrastructure&lt;/li&gt;
&lt;li&gt;IoT and embedded OS infrastructure&lt;/li&gt;
&lt;li&gt;BPF and eBPF filtering&lt;/li&gt;
&lt;li&gt;OS, container, IoT image delivery and updating&lt;/li&gt;
&lt;li&gt;Building Linux devices and applications&lt;/li&gt;
&lt;li&gt;Low-level desktop technologies&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;System and service management&lt;/li&gt;
&lt;li&gt;Tracing and performance measuring&lt;/li&gt;
&lt;li&gt;IPC and RPC systems&lt;/li&gt;
&lt;li&gt;Security and Sandboxing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While our focus is definitely more on the user-space side of things,
talks about kernel projects are welcome, as long as they have a clear
and direct relevance for user-space.&lt;/p&gt;
&lt;p&gt;For more information please visit &lt;a href="https://all-systems-go.io/"&gt;our conference
website&lt;/a&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 21 May 2018 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2018-05-21:/blog/all-systems-go-2018-cfp-open.html</guid><category>projects</category></item><item><title>All Systems Go! 2017 Videos Online!</title><link>https://0pointer.net/blog/all-systems-go-2017-videos-online.html</link><description>&lt;p&gt;For those living under a rock, the videos from everybody's favourite
Userspace Linux Conference &lt;a href="https://all-systems-go.io/"&gt;&lt;em&gt;All Systems Go!&lt;/em&gt;
2017&lt;/a&gt; are now available online.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://media.ccc.de/b/conferences/all_systems_go/2017"&gt;All videos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The videos for my own two talks are available here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://media.ccc.de/v/ASG2017-125-synchronizing_images_with_casync"&gt;Synchronizing Images with
casync&lt;/a&gt;
(&lt;a href="http://0pointer.de/public/casync-asg2017.pdf"&gt;Slides&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://media.ccc.de/v/ASG2017-101-containers_without_a_container_manager_with_systemd"&gt;Containers without a Container Manager, with
systemd&lt;/a&gt;
(&lt;a href="http://0pointer.de/public/systemd-asg2017.pdf"&gt;Slides&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Of course, this is the stellar work of the &lt;a href="https://c3voc.de/"&gt;CCC
VOC&lt;/a&gt; folks, who are hard to beat when it comes to
videotaping of community conferences.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://all-systems-go.io/"&gt;&lt;img src="https://all-systems-go.io/img/header-graphic.png" width="600" height="195" border="5"/&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 24 Oct 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-10-24:/blog/all-systems-go-2017-videos-online.html</guid><category>projects</category></item><item><title>Attending and Speaking at GNOME.Asia 2017 Summit</title><link>https://0pointer.net/blog/attending-and-speaking-at-gnomeasia-2017-summit.html</link><description>&lt;p&gt;The &lt;a href="https://2017.gnome.asia/"&gt;GNOME.Asia Summit 2017&lt;/a&gt; organizers
invited to me to speak at their conference in Chongqing/China, and it
was an excellent event! Here's my brief report:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://wiki.gnome.org/Travel/Policy?action=AttachFile&amp;do=get&amp;target=sponsored-badge-shadow.png" width="230" height="230"/&gt;&lt;/p&gt;
&lt;p&gt;Because we arrived one day early in Chongqing, my GNOME friends Sri,
Matthias, Jonathan, David and I started our journey with an excursion
to the &lt;a href="https://en.wikipedia.org/wiki/Dazu_Rock_Carvings"&gt;Dazu Rock
Carvings&lt;/a&gt;, a short
bus trip from Chongqing, and an excellent (and sometimes quite
surprising) sight. I mean, where else can you see a buddha with 1000+
hands, and centuries old, holding a cell Nexus 5 cell phone? Here's
proof:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0234.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0234.jpg" width="167" height="250"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The GNOME.Asia schedule was excellent, with various good talks,
including some about Flatpak, Endless OS, rpm-ostree, Blockchains and
more. My own talk was about &lt;em&gt;The Path to a Fully Protected GNOME
Desktop OS Image&lt;/em&gt; (&lt;a href="http://0pointer.de/public/systemd-gnomeasia2017.pdf"&gt;Slides available
here&lt;/a&gt;). In the
hallway track I did my best to advocate
&lt;a href="https://github.com/systemd/casync"&gt;casync&lt;/a&gt; to whoever was willing to
listen, and I think enough were ;-). As we all know attending
conferences is at least as much about the hallway track as about the
talks, and GNOME.Asia was a fantastic way to meet the Chinese GNOME
and Open Source communities.&lt;/p&gt;
&lt;p&gt;The day after the conference the organizers of GNOME.Asia organized a
Chongqing day trip. A particular highlight was the ubiqutious hot pot,
sometimes with the local speciality: fresh pig brain.&lt;/p&gt;
&lt;p&gt;Here some random photos from the trip: sights, food, social event and
more.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0409.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0409.jpg" width="135" height="250"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0265.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0265.jpg" width="167" height="250"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0183.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0183.jpg" width="177" height="250"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/handy/esel.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/handy/esel-klein.jpg" width="240" height="320"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0273.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0273.jpg" width="167" height="250"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0164.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0164.jpg" width="167" height="250"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/handy/hotpot.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/handy/hotpot-klein.jpg" width="240" height="320"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0176.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0176.jpg" width="250" height="152"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0150.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0150.jpg" width="250" height="195"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0216.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0216.jpg" width="250" height="167"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0326.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0326.jpg" width="250" height="169"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0371.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0371.jpg" width="250" height="167"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0442.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0442.jpg" width="250" height="167"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0480.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0480.jpg" width="250" height="177"/&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/public/chongqing/big/IMG_0536.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/small/IMG_0536.jpg" width="250" height="94"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'd like to thank the GNOME Foundation for funding my trip to
GNOME.Asia. And that's all for now. But let me close with an old
chinese wisdom:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/public/chongqing/handy/wahlspruch.jpg"&gt;&lt;img src="http://0pointer.de/public/chongqing/handy/wahlspruch-klein.jpg" width="320" height="210"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;big&gt;&lt;i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;The Trials Of A Long Journey Always Feeling, Civilized Travel Pass Reputation.&lt;/i&gt;&lt;/big&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 24 Oct 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-10-24:/blog/attending-and-speaking-at-gnomeasia-2017-summit.html</guid><category>projects</category></item><item><title>IP Accounting and Access Lists with systemd</title><link>https://0pointer.net/blog/ip-accounting-and-access-lists-with-systemd.html</link><description>&lt;p&gt;&lt;em&gt;TL;DR: systemd now can do per-service IP traffic accounting, as well
as access control for IP address ranges.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Last Friday we released &lt;a href="https://lists.freedesktop.org/archives/systemd-devel/2017-October/039589.html"&gt;systemd
235&lt;/a&gt;. &lt;a href="http://0pointer.net/blog/dynamic-users-with-systemd.html"&gt;I
already blogged about its Dynamic User feature in
detail&lt;/a&gt;, but
there's one more piece of new functionality that I think deserves special
attention: IP accounting and access control.&lt;/p&gt;
&lt;p&gt;Before v235 systemd already provided per-unit resource management
hooks for a number of different kinds of resources: consumed CPU time,
disk I/O, memory usage and number of tasks. With v235 another kind of
resource can be controlled per-unit with systemd: network traffic
(specifically IP).&lt;/p&gt;
&lt;p&gt;Three new unit file settings have been added in this context:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html#IPAccounting="&gt;&lt;code&gt;IPAccounting=&lt;/code&gt;&lt;/a&gt; is a boolean setting. If enabled for a unit, all IP
traffic sent and received by processes associated with it is counted
both in terms of bytes and of packets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html#IPAddressAllow=ADDDRESS%5B/PREFIXLENGTH%5D%E2%80%A6"&gt;&lt;code&gt;IPAddressDeny=&lt;/code&gt;&lt;/a&gt; takes an IP address prefix (that means: an IP
address with a network mask). All traffic from and to this address will be
prohibited for processes of the service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.resource-control.html#IPAddressAllow=ADDDRESS%5B/PREFIXLENGTH%5D%E2%80%A6"&gt;&lt;code&gt;IPAddressAllow=&lt;/code&gt;&lt;/a&gt; is the matching positive counterpart to
&lt;code&gt;IPAddressDeny=&lt;/code&gt;. All traffic matching this IP address/network mask
combination will be allowed, even if otherwise listed in
&lt;code&gt;IPAddressDeny=&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The three options are thin wrappers around kernel functionality
introduced with Linux 4.11: the control group eBPF hooks. The actual
work is done by the kernel, systemd just provides a number of new
settings to configure this facet of it. Note that cgroup/eBPF is
unrelated to classic Linux firewalling,
i.e. NetFilter/&lt;code&gt;iptables&lt;/code&gt;. It's up to you whether you use one or the
other, or both in combination (or of course neither).&lt;/p&gt;
&lt;h1&gt;IP Accounting&lt;/h1&gt;
&lt;p&gt;Let's have a closer look at the IP accounting logic mentioned
above. Let's write a simple unit
&lt;code&gt;/etc/systemd/system/ip-accounting-test.service&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Service]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/ping 8.8.8.8&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;IPAccounting&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This simple unit invokes the
&lt;a href="http://man7.org/linux/man-pages/man8/ping.8.html"&gt;ping(8)&lt;/a&gt; command to
send a series of ICMP/IP ping packets to the IP address 8.8.8.8 (which
is the Google DNS server IP; we use it for testing here, since it's
easy to remember, reachable everywhere and known to react to ICMP
pings; any other IP address responding to pings would be fine to use,
too). The &lt;code&gt;IPAccounting=&lt;/code&gt; option is used to turn on IP accounting for
the unit.&lt;/p&gt;
&lt;p&gt;Let's start this service after writing the file. Let's then have a
look at the status output of &lt;code&gt;systemctl&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# systemctl daemon-reload&lt;/span&gt;
&lt;span class="c1"&gt;# systemctl start ip-accounting-test&lt;/span&gt;
&lt;span class="c1"&gt;# systemctl status ip-accounting-test&lt;/span&gt;
‚óè ip-accounting-test.service
   Loaded: loaded &lt;span class="o"&gt;(&lt;/span&gt;/etc/systemd/system/ip-accounting-test.service&lt;span class="p"&gt;;&lt;/span&gt; static&lt;span class="p"&gt;;&lt;/span&gt; vendor preset: disabled&lt;span class="o"&gt;)&lt;/span&gt;
   Active: active &lt;span class="o"&gt;(&lt;/span&gt;running&lt;span class="o"&gt;)&lt;/span&gt; since Mon &lt;span class="m"&gt;2017&lt;/span&gt;-10-09 &lt;span class="m"&gt;18&lt;/span&gt;:05:47 CEST&lt;span class="p"&gt;;&lt;/span&gt; 1s ago
 Main PID: &lt;span class="m"&gt;32152&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ping&lt;span class="o"&gt;)&lt;/span&gt;
       IP: 168B &lt;span class="k"&gt;in&lt;/span&gt;, 168B out
    Tasks: &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;limit: &lt;span class="m"&gt;4915&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   CGroup: /system.slice/ip-accounting-test.service
           ‚îî‚îÄ32152 /usr/bin/ping &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8

Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:05:47 sigma systemd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Started ip-accounting-test.service.
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:05:47 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: PING &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.8.8.8&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;84&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; bytes of data.
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:05:47 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;.2 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:05:48 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;.0 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This shows the &lt;code&gt;ping&lt;/code&gt; command running ‚Äî it's currently at its second
ping cycle as we can see in the logs at the end of the output. More
interesting however is the &lt;code&gt;IP:&lt;/code&gt; line further up showing the current
IP byte counters. It currently shows 168 bytes have been received, and
168 bytes have been sent. That the two counters are at the same value
is not surprising: ICMP ping requests and responses are supposed to
have the same size. Note that this line is shown only if
&lt;code&gt;IPAccounting=&lt;/code&gt; is turned on for the service, as only then this data
is collected.&lt;/p&gt;
&lt;p&gt;Let's wait a bit, and invoke &lt;code&gt;systemctl status&lt;/code&gt; again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# systemctl status ip-accounting-test&lt;/span&gt;
‚óè ip-accounting-test.service
   Loaded: loaded &lt;span class="o"&gt;(&lt;/span&gt;/etc/systemd/system/ip-accounting-test.service&lt;span class="p"&gt;;&lt;/span&gt; static&lt;span class="p"&gt;;&lt;/span&gt; vendor preset: disabled&lt;span class="o"&gt;)&lt;/span&gt;
   Active: active &lt;span class="o"&gt;(&lt;/span&gt;running&lt;span class="o"&gt;)&lt;/span&gt; since Mon &lt;span class="m"&gt;2017&lt;/span&gt;-10-09 &lt;span class="m"&gt;18&lt;/span&gt;:05:47 CEST&lt;span class="p"&gt;;&lt;/span&gt; 4min 28s ago
 Main PID: &lt;span class="m"&gt;32152&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ping&lt;span class="o"&gt;)&lt;/span&gt;
       IP: &lt;span class="m"&gt;22&lt;/span&gt;.2K &lt;span class="k"&gt;in&lt;/span&gt;, &lt;span class="m"&gt;22&lt;/span&gt;.2K out
    Tasks: &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;limit: &lt;span class="m"&gt;4915&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   CGroup: /system.slice/ip-accounting-test.service
           ‚îî‚îÄ32152 /usr/bin/ping &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8

Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:10:07 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;260&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;.7 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:10:08 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;261&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;28&lt;/span&gt;.0 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:10:09 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;262&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;33&lt;/span&gt;.8 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:10:10 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;263&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;48&lt;/span&gt;.9 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:10:11 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;264&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;.2 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:10:12 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;265&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;.0 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:10:13 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;266&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;26&lt;/span&gt;.8 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:10:14 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;267&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;.4 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:10:15 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;268&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;29&lt;/span&gt;.7 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:10:16 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;269&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;.6 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we can see, after 269 pings the counters are much higher: at 22K.&lt;/p&gt;
&lt;p&gt;Note that while &lt;code&gt;systemctl status&lt;/code&gt; shows only the byte counters,
packet counters are kept as well. Use the low-level &lt;code&gt;systemctl show&lt;/code&gt;
command to query the current raw values of the in and out packet and
byte counters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# systemctl show ip-accounting-test -p IPIngressBytes -p IPIngressPackets -p IPEgressBytes -p IPEgressPackets&lt;/span&gt;
&lt;span class="nv"&gt;IPIngressBytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;37776&lt;/span&gt;
&lt;span class="nv"&gt;IPIngressPackets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;449&lt;/span&gt;
&lt;span class="nv"&gt;IPEgressBytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;37776&lt;/span&gt;
&lt;span class="nv"&gt;IPEgressPackets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;449&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, the same information is also available via the D-Bus
APIs. If you want to process this data further consider talking proper
D-Bus, rather than scraping the output of &lt;code&gt;systemctl show&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, let's stop the service again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# systemctl stop ip-accounting-test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When a service with such accounting turned on terminates, a log line
about all its consumed resources is written to the logs. Let's check
with &lt;code&gt;journalctl&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# journalctl -u ip-accounting-test -n 5&lt;/span&gt;
-- Logs begin at Thu &lt;span class="m"&gt;2016&lt;/span&gt;-08-18 &lt;span class="m"&gt;23&lt;/span&gt;:09:37 CEST, end at Mon &lt;span class="m"&gt;2017&lt;/span&gt;-10-09 &lt;span class="m"&gt;18&lt;/span&gt;:17:02 CEST. --
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:15:50 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;603&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;26&lt;/span&gt;.9 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:15:51 sigma ping&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;32152&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;604&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;.2 ms
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:15:52 sigma systemd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Stopping ip-accounting-test.service...
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:15:52 sigma systemd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Stopped ip-accounting-test.service.
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:15:52 sigma systemd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: ip-accounting-test.service: Received &lt;span class="m"&gt;49&lt;/span&gt;.5K IP traffic, sent &lt;span class="m"&gt;49&lt;/span&gt;.5K IP traffic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last line shown is the interesting one, that shows the accounting
data. It's actually a structured log message, and among its metadata
fields it contains the more comprehensive raw data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# journalctl -u ip-accounting-test -n 1 -o verbose&lt;/span&gt;
-- Logs begin at Thu &lt;span class="m"&gt;2016&lt;/span&gt;-08-18 &lt;span class="m"&gt;23&lt;/span&gt;:09:37 CEST, end at Mon &lt;span class="m"&gt;2017&lt;/span&gt;-10-09 &lt;span class="m"&gt;18&lt;/span&gt;:18:50 CEST. --
Mon &lt;span class="m"&gt;2017&lt;/span&gt;-10-09 &lt;span class="m"&gt;18&lt;/span&gt;:15:52.649028 CEST &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;89a2cc877fdf4dafb2269a7631afedad&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;14d7&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4c7e7adcba0c45b69d612857270716d3&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;137592e75e&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;55b1f81298605&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;c3c9b57b28c9490e&lt;span class="o"&gt;]&lt;/span&gt;
    &lt;span class="nv"&gt;PRIORITY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;
    &lt;span class="nv"&gt;_BOOT_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4c7e7adcba0c45b69d612857270716d3
    &lt;span class="nv"&gt;_MACHINE_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;e87bfd866aea4ae4b761aff06c9c3cb3
    &lt;span class="nv"&gt;_HOSTNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sigma
    &lt;span class="nv"&gt;SYSLOG_FACILITY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
    &lt;span class="nv"&gt;SYSLOG_IDENTIFIER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;systemd
    &lt;span class="nv"&gt;_UID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="nv"&gt;_GID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="nv"&gt;_TRANSPORT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;journal
    &lt;span class="nv"&gt;_PID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="nv"&gt;_COMM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;systemd
    &lt;span class="nv"&gt;_EXE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/systemd/systemd
    &lt;span class="nv"&gt;_CAP_EFFECTIVE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3fffffffff
    &lt;span class="nv"&gt;_SYSTEMD_CGROUP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/init.scope
    &lt;span class="nv"&gt;_SYSTEMD_UNIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;init.scope
    &lt;span class="nv"&gt;_SYSTEMD_SLICE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-.slice
    &lt;span class="nv"&gt;CODE_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;../src/core/unit.c
    &lt;span class="nv"&gt;_CMDLINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/systemd/systemd --switched-root --system --deserialize &lt;span class="m"&gt;25&lt;/span&gt;
    &lt;span class="nv"&gt;_SELINUX_CONTEXT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;system_u:system_r:init_t:s0
    &lt;span class="nv"&gt;UNIT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ip-accounting-test.service
    &lt;span class="nv"&gt;CODE_LINE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2115&lt;/span&gt;
    &lt;span class="nv"&gt;CODE_FUNC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;unit_log_resources
    &lt;span class="nv"&gt;MESSAGE_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ae8f7b866b0347b9af31fe1c80b127c0
    &lt;span class="nv"&gt;INVOCATION_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;98a6e756fa9d421d8dfc82b6df06a9c3
    &lt;span class="nv"&gt;IP_METRIC_INGRESS_BYTES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50880&lt;/span&gt;
    &lt;span class="nv"&gt;IP_METRIC_INGRESS_PACKETS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;605&lt;/span&gt;
    &lt;span class="nv"&gt;IP_METRIC_EGRESS_BYTES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;50880&lt;/span&gt;
    &lt;span class="nv"&gt;IP_METRIC_EGRESS_PACKETS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;605&lt;/span&gt;
    &lt;span class="nv"&gt;MESSAGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ip-accounting-test.service: Received &lt;span class="m"&gt;49&lt;/span&gt;.6K IP traffic, sent &lt;span class="m"&gt;49&lt;/span&gt;.6K IP traffic
    &lt;span class="nv"&gt;_SOURCE_REALTIME_TIMESTAMP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1507565752649028&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The interesting fields of this log message are of course
&lt;code&gt;IP_METRIC_INGRESS_BYTES=&lt;/code&gt;, &lt;code&gt;IP_METRIC_INGRESS_PACKETS=&lt;/code&gt;,
&lt;code&gt;IP_METRIC_EGRESS_BYTES=&lt;/code&gt;, &lt;code&gt;IP_METRIC_EGRESS_PACKETS=&lt;/code&gt; that show the
consumed data.&lt;/p&gt;
&lt;p&gt;The log message carries a &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html#MESSAGE_ID="&gt;message
ID&lt;/a&gt;
that may be used to quickly search for all such resource log messages
(&lt;code&gt;ae8f7b866b0347b9af31fe1c80b127c0&lt;/code&gt;). We can combine a search term for
messages of this ID with &lt;code&gt;journalctl&lt;/code&gt;'s &lt;code&gt;-u&lt;/code&gt; switch to quickly find
out about the resource usage of any invocation of a specific
service. Let's try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# journalctl -u ip-accounting-test MESSAGE_ID=ae8f7b866b0347b9af31fe1c80b127c0&lt;/span&gt;
-- Logs begin at Thu &lt;span class="m"&gt;2016&lt;/span&gt;-08-18 &lt;span class="m"&gt;23&lt;/span&gt;:09:37 CEST, end at Mon &lt;span class="m"&gt;2017&lt;/span&gt;-10-09 &lt;span class="m"&gt;18&lt;/span&gt;:25:27 CEST. --
Okt &lt;span class="m"&gt;09&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:15:52 sigma systemd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: ip-accounting-test.service: Received &lt;span class="m"&gt;49&lt;/span&gt;.6K IP traffic, sent &lt;span class="m"&gt;49&lt;/span&gt;.6K IP traffic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, the output above shows only one message at the moment,
since we started the service only once, but a new one will appear
every time you start and stop it again.&lt;/p&gt;
&lt;p&gt;The IP accounting logic is also hooked up with
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-run.html"&gt;&lt;code&gt;systemd-run&lt;/code&gt;&lt;/a&gt;,
which is useful for transiently running a command as systemd service
with IP accounting turned on. Let's try it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# systemd-run -p IPAccounting=yes --wait wget https://cfp.all-systems-go.io/en/ASG2017/public/schedule/2.pdf&lt;/span&gt;
Running as unit: run-u2761.service
Finished with result: success
Main processes terminated with: &lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited/status&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
Service runtime: 878ms
IP traffic received: &lt;span class="m"&gt;231&lt;/span&gt;.0K
IP traffic sent: &lt;span class="m"&gt;3&lt;/span&gt;.7K
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This uses &lt;a href="https://linux.die.net/man/1/wget"&gt;&lt;code&gt;wget&lt;/code&gt;&lt;/a&gt; to download &lt;a href="https://cfp.all-systems-go.io/en/ASG2017/public/schedule/2.pdf"&gt;the
PDF version of the 2nd day
schedule&lt;/a&gt;
of everybody's favorite Linux user-space conference &lt;a href="https://all-systems-go.io/"&gt;All Systems Go!
2017&lt;/a&gt; (BTW, have you already &lt;a href="https://all-systems-go.io/#tickets"&gt;booked your
ticket&lt;/a&gt;? We are very close to
selling out, be quick!). The IP traffic this command generated was
231K ingress and 4K egress. In the &lt;code&gt;systemd-run&lt;/code&gt; command line two
parameters are important. First of all, we use &lt;code&gt;-p IPAccounting=yes&lt;/code&gt;
to turn on IP accounting for the transient service (as above). And
secondly we use &lt;code&gt;--wait&lt;/code&gt; to tell &lt;code&gt;systemd-run&lt;/code&gt; to wait for the service
to exit. If &lt;code&gt;--wait&lt;/code&gt; is used, &lt;code&gt;systemd-run&lt;/code&gt; will also show you various
statistics about the service that just ran and terminated, including
the IP statistics you are seeing if IP accounting has been turned on.&lt;/p&gt;
&lt;p&gt;It's fun to combine this sort of IP accounting with interactive
transient units. Let's try that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# systemd-run -p IPAccounting=1 -t /bin/sh&lt;/span&gt;
Running as unit: run-u2779.service
Press ^&lt;span class="o"&gt;]&lt;/span&gt; three &lt;span class="nb"&gt;times&lt;/span&gt; within 1s to disconnect TTY.
sh-4.4# dnf update
‚Ä¶
sh-4.4# dnf install firefox
‚Ä¶
sh-4.4# &lt;span class="nb"&gt;exit&lt;/span&gt;
Finished with result: success
Main processes terminated with: &lt;span class="nv"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;exited/status&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
Service runtime: &lt;span class="m"&gt;5&lt;/span&gt;.297s
IP traffic received: ‚Ä¶B
IP traffic sent: ‚Ä¶B
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This uses &lt;code&gt;systemd-run&lt;/code&gt;'s &lt;code&gt;--pty&lt;/code&gt; switch (or short: &lt;code&gt;-t&lt;/code&gt;), which opens
an interactive pseudo-TTY connection to the invoked service process,
which is a bourne shell in this case. Doing this means we have a full,
comprehensive shell with job control and everything. Since the shell
is running as part of a service with IP accounting turned on, all IP
traffic we generate or receive will be accounted for. And as soon as
we exit the shell, we'll see what it consumed. (For the sake of
brevity I actually didn't paste the whole output above, but truncated
core parts. Try it out for yourself, if you want to see the output in
full.)&lt;/p&gt;
&lt;p&gt;Sometimes it might make sense to turn on IP accounting for a unit that
is already running. For that, use &lt;code&gt;systemctl set-property
foobar.service IPAccounting=yes&lt;/code&gt;, which will instantly turn on
accounting for it. Note that it won't count retroactively though: only
the traffic sent/received after the point in time you turned it on
will be collected. You may turn off accounting for the unit with the
same command.&lt;/p&gt;
&lt;p&gt;Of course, sometimes it's interesting to collect IP accounting data
for all services, and turning on &lt;code&gt;IPAccounting=yes&lt;/code&gt; in every single
unit is cumbersome. To deal with that there's a global option
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-system.conf.html#DefaultCPUAccounting="&gt;&lt;code&gt;DefaultIPAccounting=&lt;/code&gt;&lt;/a&gt;
available which can be set in &lt;code&gt;/etc/systemd/system.conf&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;IP Access Lists&lt;/h1&gt;
&lt;p&gt;So much about IP accounting. Let's now have a look at IP access
control with systemd 235. As mentioned above, the two new unit file
settings, &lt;code&gt;IPAddressAllow=&lt;/code&gt; and &lt;code&gt;IPAddressDeny=&lt;/code&gt; maybe be used for
that. They operate in the following way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If the source address of an incoming packet or the destination
address of an outgoing packet matches one of the IP addresses/network
masks in the relevant unit's &lt;code&gt;IPAddressAllow=&lt;/code&gt; setting then it will be
allowed to go through.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Otherwise, if a packet matches an &lt;code&gt;IPAddressDeny=&lt;/code&gt; entry configured
for the service it is dropped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the packet matches neither of the above it is allowed to go
through.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Or in other words, &lt;code&gt;IPAddressDeny=&lt;/code&gt; implements a blacklist, but
&lt;code&gt;IPAddressAllow=&lt;/code&gt; takes precedence.&lt;/p&gt;
&lt;p&gt;Let's try that out. Let's modify our last example above in order to
get a transient service running an interactive shell which has such an
access list set:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# systemd-run -p IPAddressDeny=any -p IPAddressAllow=8.8.8.8 -p IPAddressAllow=127.0.0.0/8 -t /bin/sh&lt;/span&gt;
Running as unit: run-u2850.service
Press ^&lt;span class="o"&gt;]&lt;/span&gt; three &lt;span class="nb"&gt;times&lt;/span&gt; within 1s to disconnect TTY.
sh-4.4# ping &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8 -c1
PING &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.8.8.8&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;84&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; bytes of data.
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;27&lt;/span&gt;.9 ms

--- &lt;span class="m"&gt;8&lt;/span&gt;.8.8.8 ping statistics ---
&lt;span class="m"&gt;1&lt;/span&gt; packets transmitted, &lt;span class="m"&gt;1&lt;/span&gt; received, &lt;span class="m"&gt;0&lt;/span&gt;% packet loss, &lt;span class="nb"&gt;time&lt;/span&gt; 0ms
rtt min/avg/max/mdev &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;27&lt;/span&gt;.957/27.957/27.957/0.000 ms
sh-4.4# ping &lt;span class="m"&gt;8&lt;/span&gt;.8.4.4 -c1
PING &lt;span class="m"&gt;8&lt;/span&gt;.8.4.4 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.8.4.4&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;84&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; bytes of data.
ping: sendmsg: Operation not permitted
^C
--- &lt;span class="m"&gt;8&lt;/span&gt;.8.4.4 ping statistics ---
&lt;span class="m"&gt;1&lt;/span&gt; packets transmitted, &lt;span class="m"&gt;0&lt;/span&gt; received, &lt;span class="m"&gt;100&lt;/span&gt;% packet loss, &lt;span class="nb"&gt;time&lt;/span&gt; 0ms
sh-4.4# ping &lt;span class="m"&gt;127&lt;/span&gt;.0.0.2 -c1
PING &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;56&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;84&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; bytes of data.
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &lt;span class="m"&gt;127&lt;/span&gt;.0.0.2: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt; &lt;span class="nv"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.116 ms

--- &lt;span class="m"&gt;127&lt;/span&gt;.0.0.2 ping statistics ---
&lt;span class="m"&gt;1&lt;/span&gt; packets transmitted, &lt;span class="m"&gt;1&lt;/span&gt; received, &lt;span class="m"&gt;0&lt;/span&gt;% packet loss, &lt;span class="nb"&gt;time&lt;/span&gt; 0ms
rtt min/avg/max/mdev &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.116/0.116/0.116/0.000 ms
sh-4.4# &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The access list we set up uses &lt;code&gt;IPAddressDeny=any&lt;/code&gt; in order to define
an IP white-list: all traffic will be prohibited for the session,
except for what is explicitly white-listed. In this command line, we
white-listed two address prefixes: 8.8.8.8 (with no explicit network
mask, which means the mask with all bits turned on is implied,
i.e. &lt;code&gt;/32&lt;/code&gt;), and 127.0.0.0/8. Thus, the service can communicate with
Google's DNS server and everything on the local loop-back, but nothing
else. The commands run in this interactive shell show this: First we
try pinging 8.8.8.8 which happily responds. Then, we try to ping
8.8.4.4 (that's Google's other DNS server, but excluded from this
white-list), and as we see it is immediately refused with an &lt;em&gt;Operation
not permitted&lt;/em&gt; error. As last step we ping 127.0.0.2 (which is on the
local loop-back), and we see it works fine again, as expected.&lt;/p&gt;
&lt;p&gt;In the example above we used &lt;code&gt;IPAddressDeny=any&lt;/code&gt;. The &lt;code&gt;any&lt;/code&gt;
identifier is a shortcut for writing 0.0.0.0/0 ::/0, i.e. it's a
shortcut for &lt;em&gt;everything&lt;/em&gt;, on both IPv4 and IPv6. A number of other
such shortcuts exist. For example, instead of spelling out
&lt;code&gt;127.0.0.0/8&lt;/code&gt; we could also have used the more descriptive shortcut
&lt;code&gt;localhost&lt;/code&gt; which is expanded to 127.0.0.0/8 ::1/128, i.e. everything
on the local loopback device, on both IPv4 and IPv6.&lt;/p&gt;
&lt;p&gt;Being able to configure IP access lists individually for each unit is
pretty nice already. However, typically one wants to configure this
comprehensively, not just for individual units, but for a set of units
in one go or even the system as a whole. In systemd, that's possible
by making use of
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.slice.html"&gt;&lt;code&gt;.slice&lt;/code&gt;&lt;/a&gt;
units (for those who don't know systemd that well, slice units are a
concept for organizing services in hierarchical tree for the purpose of
resource management): the IP access list in effect for a unit is the
combination of the individual IP access lists configured for the unit
itself and those of all slice units it is contained in.&lt;/p&gt;
&lt;p&gt;By default, system services are assigned to
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.special.html#system.slice"&gt;&lt;code&gt;system.slice&lt;/code&gt;&lt;/a&gt;,
which in turn is a child of the root slice
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.special.html#-.slice"&gt;&lt;code&gt;-.slice&lt;/code&gt;&lt;/a&gt;. Either
of these two slice units are hence suitable for locking down &lt;em&gt;all&lt;/em&gt;
system services at once. If an access list is configured on
&lt;code&gt;system.slice&lt;/code&gt; it will only apply to system services, however, if
configured on &lt;code&gt;-.slice&lt;/code&gt; it will apply to all user processes of the
system, including all user session processes (i.e. which are by
default assigned to &lt;code&gt;user.slice&lt;/code&gt; which is a child of &lt;code&gt;-.slice&lt;/code&gt;) in
addition to the system services.&lt;/p&gt;
&lt;p&gt;Let's make use of this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# systemctl set-property system.slice IPAddressDeny=any IPAddressAllow=localhost
# systemctl set-property apache.service IPAddressAllow=10.0.0.0/8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The two commands above are a very powerful way to first turn off all
IP communication for all system services (with the exception of
loop-back traffic), followed by an explicit white-listing of
10.0.0.0/8 (which could refer to the local company network, you get
the idea) but only for the Apache service.&lt;/p&gt;
&lt;h1&gt;Use-cases&lt;/h1&gt;
&lt;p&gt;After playing around a bit with this, let's talk about use-cases. Here
are a few ideas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The IP access list logic can in many ways provide a more modern
replacement for the venerable &lt;a href="https://en.wikipedia.org/wiki/TCP_Wrapper"&gt;TCP
Wrapper&lt;/a&gt;, but unlike it it
applies to all IP sockets of a service unconditionally, and requires
no explicit support in any way in the service's code: no patching
required. On the other hand, TCP wrappers have a number of features
this scheme cannot cover, most importantly systemd's IP access lists
operate solely on the level of IP addresses and network masks, there
is no way to configure access by DNS name (though quite frankly, that
is a very dubious feature anyway, as doing networking ‚Äî unsecured
networking even ‚Äì in order to restrict networking sounds quite
questionable, at least to me).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It can also replace (or augment) some facets of IP firewalling,
i.e. Linux NetFilter/&lt;code&gt;iptables&lt;/code&gt;. Right now, systemd's access lists are
of course a lot more minimal than NetFilter, but they have one major
benefit: they understand the service concept, and thus are a lot more
context-aware than NetFilter. Classic firewalls, such as NetFilter,
derive most service context from the IP port number alone, but we live
in a world where IP port numbers are a lot more dynamic than they used
to be. As one example, a BitTorrent client or server may use any IP
port it likes for its file transfer, and writing IP firewalling rules
matching that precisely is hence hard. With the systemd IP access list
implementing this is easy: just set the list for your BitTorrent
service unit, and all is good.&lt;/p&gt;
&lt;p&gt;Let me stress though that you should be careful when comparing
 NetFilter with systemd's IP address list logic, it's really like
 comparing apples and oranges: to start with, the IP address list
 logic has a clearly local focus, it only knows what a local
 service is and manages access of it. NetFilter on the other hand
 may run on border gateways, at a point where the traffic flowing
 through is pure IP, carrying no information about a systemd unit
 concept or anything like that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It's a simple way to lock down distribution/vendor supplied system
services by default. For example, if you ship a service that you know
never needs to access the network, then simply set &lt;code&gt;IPAddressDeny=any&lt;/code&gt;
(possibly combined with &lt;code&gt;IPAddressAllow=localhost&lt;/code&gt;) for it, and it
will live in a very tight networking sand-box it cannot escape
from. systemd itself makes use of this for a number of its services by
default now. For example, the logging service
&lt;code&gt;systemd-journald.service&lt;/code&gt;, the login manager &lt;code&gt;systemd-logind&lt;/code&gt; or the
core-dump processing unit &lt;code&gt;systemd-coredump@.service&lt;/code&gt; all have such a
rule set out-of-the-box, because we know that neither of these
services should be able to access the network, under any
circumstances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because the IP access list logic can be combined with transient
units, it can be used to quickly and effectively sandbox arbitrary
commands, and even include them in shell pipelines and such. For
example, let's say we don't trust our
&lt;a href="https://linux.die.net/man/1/curl"&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/a&gt; implementation (maybe it
got modified locally by a hacker, and phones home?), but want to use
it anyway to download the &lt;a href="http://0pointer.de/public/casync-kinvolk2017.pdf"&gt;the slides of my most recent casync
talk&lt;/a&gt; in order to
print it, but want to make sure it doesn't connect anywhere except
where we tell it to (and to make this even more fun, let's minimize
privileges further, by setting
&lt;a href="http://0pointer.net/blog/dynamic-users-with-systemd.html"&gt;&lt;code&gt;DynamicUser=yes&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# systemd-resolve 0pointer.de
0pointer.de: 85.214.157.71
             2a01:238:43ed:c300:10c3:bcf3:3266:da74
-- Information acquired via protocol DNS in 2.8ms.
-- Data is authenticated: no
# systemd-run --pipe -p IPAddressDeny=any \
                     -p IPAddressAllow=85.214.157.71 \
                     -p IPAddressAllow=2a01:238:43ed:c300:10c3:bcf3:3266:da74 \
                     -p DynamicUser=yes \
                     curl http://0pointer.de/public/casync-kinvolk2017.pdf | lp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So much about use-cases. This is by no means a comprehensive list of
what you can do with it, after all both IP accounting and IP access
lists are very generic concepts. But I do hope the above inspires your
fantasy.&lt;/p&gt;
&lt;h1&gt;What does that mean for packagers?&lt;/h1&gt;
&lt;p&gt;IP accounting and IP access control are primarily concepts for the
local administrator. However, As suggested above, it's a very good
idea to ship services that by design have no network-facing
functionality with an access list of &lt;code&gt;IPAddressDeny=any&lt;/code&gt; (and possibly
&lt;code&gt;IPAddressAllow=localhost&lt;/code&gt;), in order to improve the out-of-the-box
security of our systems.&lt;/p&gt;
&lt;p&gt;An option for security-minded distributions might be a more radical
approach: ship the system with &lt;code&gt;-.slice&lt;/code&gt; or &lt;code&gt;system.slice&lt;/code&gt; configured
to &lt;code&gt;IPAddressDeny=any&lt;/code&gt; by default, and ask the administrator to punch
holes into that for each network facing service with &lt;code&gt;systemctl
set-property ‚Ä¶ IPAddressAllow=‚Ä¶&lt;/code&gt;. But of course, that's only an
option for distributions willing to break compatibility with what was
before.&lt;/p&gt;
&lt;h1&gt;Notes&lt;/h1&gt;
&lt;p&gt;A couple of additional notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;IP accounting and access lists may be mixed with socket
activation. In this case, it's a good idea to configure access lists
and accounting for both the socket unit that activates and the service
unit that is activated, as both units maintain fully separate
settings. Note that IP accounting and access lists configured on the
socket unit applies to all sockets created on behalf of that unit, and
even if these sockets are passed on to the activated services, they
will still remain in effect and belong to the socket unit. This also
means that IP traffic done on such sockets will be accounted to the
socket unit, not the service unit. The fact that IP access lists are
maintained separately for the kernel sockets created on behalf of the
socket unit and for the kernel sockets created by the service code
itself enables some interesting uses. For example, it's possible to
set a relatively open access list on the socket unit, but a very
restrictive access list on the service unit, thus making the sockets
configured through the socket unit the only way in and out of the
service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;systemd's IP accounting and access lists apply to IP sockets only,
not to sockets of any other address families. That also means that
&lt;code&gt;AF_PACKET&lt;/code&gt; (i.e. raw) sockets are not covered. This means it's a good
idea to combine IP access lists with &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RestrictAddressFamilies="&gt;&lt;code&gt;RestrictAddressFamilies=AF_UNIX
AF_INET
AF_INET6&lt;/code&gt;&lt;/a&gt;
in order to lock this down.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You may wonder if the per-unit resource log message and
&lt;code&gt;systemd-run --wait&lt;/code&gt; may also show you details about other types or
resources consumed by a service. The answer is yes: if you turn on
&lt;code&gt;CPUAccounting=&lt;/code&gt; for a service, you'll also see a summary of consumed
CPU time in the log message and the command output. And we are
planning to hook-up &lt;code&gt;IOAccounting=&lt;/code&gt; the same way too, soon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that IP accounting and access lists aren't entirely
free. systemd inserts an eBPF program into the IP pipeline to make
this functionality work. However, eBPF execution has been optimized
for speed in the last kernel versions already, and given that it
currently is in the focus of interest to many I'd expect to be
optimized even further, so that the cost for enabling these features
will be negligible, if it isn't already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IP accounting is currently not recursive. That means you cannot use
a slice unit to join the accounting of multiple units into one. This
is something we definitely want to add, but requires some more kernel
work first.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You might wonder how the
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#PrivateNetwork="&gt;&lt;code&gt;PrivateNetwork=&lt;/code&gt;&lt;/a&gt;
setting relates to &lt;code&gt;IPAccessDeny=any&lt;/code&gt;. Superficially they have similar
effects: they make the network unavailable to services. However,
looking more closely there are a number of
differences. &lt;code&gt;PrivateNetwork=&lt;/code&gt; is implemented using Linux network
name-spaces. As such it entirely detaches all networking of a service
from the host, including non-IP networking. It does so by creating a
private little environment the service lives in where communication
with itself is still allowed though. In addition using the
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.unit.html#JoinsNamespaceOf="&gt;&lt;code&gt;JoinsNamespaceOf=&lt;/code&gt;&lt;/a&gt;
dependency additional services may be added to the same environment,
thus permitting communication with each other but not with anything
outside of this group. &lt;code&gt;IPAddressAllow=&lt;/code&gt; and &lt;code&gt;IPAddressDeny=&lt;/code&gt; are much
less invasive. First of all they apply to IP networking only, and can
match against specific IP addresses. A service running with
&lt;code&gt;PrivateNetwork=&lt;/code&gt; turned off but &lt;code&gt;IPAddressDeny=any&lt;/code&gt; turned on, may
enumerate the network interfaces and their IP configured even though
it cannot actually do any IP communication. On the other hand if you
turn on &lt;code&gt;PrivateNetwork=&lt;/code&gt; all network interfaces besides &lt;code&gt;lo&lt;/code&gt;
disappear. Long story short: depending on your use-case one, the other,
both or neither might be suitable for sand-boxing of your service. If
possible I'd always turn on both, for best security, and that's what
we do for all of systemd's own long-running services.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's all for now. Have fun with per-unit IP accounting and
access lists!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 09 Oct 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-10-09:/blog/ip-accounting-and-access-lists-with-systemd.html</guid><category>projects</category></item><item><title>Dynamic Users with systemd</title><link>https://0pointer.net/blog/dynamic-users-with-systemd.html</link><description>&lt;p&gt;&lt;em&gt;TL;DR: you may now configure systemd to dynamically allocate a UNIX
user ID for service processes when it starts them and release it when
it stops them. It's pretty secure, mixes well with transient services,
socket activated services and service templating.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Today we released &lt;a href="https://lists.freedesktop.org/archives/systemd-devel/2017-October/039589.html"&gt;systemd
235&lt;/a&gt;. Among
other improvements this greatly extends the dynamic user logic of
systemd. Dynamic users are a powerful but little known concept,
supported in its basic form since systemd 232. With this blog story I
hope to make it a bit better known.&lt;/p&gt;
&lt;p&gt;The UNIX &lt;em&gt;user&lt;/em&gt; concept is the most basic and well-understood security
concept in POSIX operating systems. It is UNIX/POSIX' primary security
concept, the one everybody can agree on, and most security concepts
that came after it (such as process capabilities, SELinux and other
MACs, user name-spaces, ‚Ä¶)  in some form or another build on it, extend
it or at least interface with it. If you build a Linux kernel with all
security features turned off, the user concept is pretty much the one
you'll still retain.&lt;/p&gt;
&lt;p&gt;Originally, the user concept was introduced to make multi-user systems
a reality, i.e. systems enabling multiple &lt;em&gt;human&lt;/em&gt; users to share the
same system at the same time, cleanly separating their resources and
protecting them from each other. The majority of today's UNIX systems
don't really use the user concept like that anymore though. Most of
today's systems probably have only one actual human user (or even
less!), but their user databases (&lt;code&gt;/etc/passwd&lt;/code&gt;) list a good number
more entries than that. Today, the majority of UNIX users in most
environments are &lt;em&gt;system users&lt;/em&gt;, i.e. users that are not the technical
representation of a human sitting in front of a PC anymore, but the
security identity a system service ‚Äî an executable program ‚Äî runs
as. Even though traditional, simultaneous multi-user systems slowly
became less relevant, their ground-breaking basic concept became the
cornerstone of UNIX security.  The OS is nowadays partitioned into
isolated services ‚Äî and each service runs as its own system user, and
thus within its own, minimal security context.&lt;/p&gt;
&lt;p&gt;The people behind the Android OS realized the relevance of the UNIX
user concept as the primary security concept on UNIX, and took its use
even further: on Android not only system services take benefit of the
UNIX user concept, but each UI app gets its own, individual user
identity too ‚Äî thus neatly separating app resources from each other,
and protecting app processes from each other, too.&lt;/p&gt;
&lt;p&gt;Back in the more traditional Linux world things are a bit less
advanced in this area. Even though users are the quintessential UNIX
security concept, allocation and management of system users is still a
pretty limited, raw and static affair. In most cases, RPM or DEB
package installation scripts allocate a fixed number of (usually one)
system users when you install the package of a service that wants to
take benefit of the user concept, and from that point on the system
user remains allocated on the system and is never deallocated again,
even if the package is later removed again. Most Linux distributions
limit the number of system users to 1000 (which isn't particularly a
lot). Allocating a system user is hence expensive: the number of
available users is limited, and there's no defined way to dispose of
them after use. If you make use of system users too liberally, you are
very likely to run out of them sooner rather than later.&lt;/p&gt;
&lt;p&gt;You may wonder why system users are generally not deallocated when the
package that registered them is uninstalled from a system (at least on
most distributions). The reason for that is one relevant property of
the user concept (you might even want to call this a &lt;em&gt;design flaw&lt;/em&gt;):
user IDs are &lt;em&gt;sticky&lt;/em&gt; to files (and other objects such as IPC
objects). If a service running as a specific system user creates a
file at some location, and is then terminated and its package and user
removed, then the created file still belongs to the numeric ID ("UID")
the system user originally got assigned. When the next system user is
allocated and ‚Äî due to ID recycling ‚Äî happens to get assigned the same
numeric ID, then it will also gain access to the file, and that's
generally considered a problem, given that the file belonged to a
potentially very different service once upon a time, and likely should
not be readable or changeable by anything coming after
it. Distributions hence tend to avoid UID recycling which means system
users remain registered forever on a system after they have been
allocated once.&lt;/p&gt;
&lt;p&gt;The above is a description of the status quo ante. Let's now focus on
what systemd's dynamic user concept brings to the table, to improve
the situation.&lt;/p&gt;
&lt;h1&gt;Introducing Dynamic Users&lt;/h1&gt;
&lt;p&gt;With systemd dynamic users we hope to make make it easier and cheaper
to allocate system users on-the-fly, thus substantially increasing the
possible uses of this core UNIX security concept.&lt;/p&gt;
&lt;p&gt;If you write a systemd service unit file, you may enable the dynamic
user logic for it by setting the
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#DynamicUser="&gt;&lt;code&gt;DynamicUser=&lt;/code&gt;&lt;/a&gt;
option in its &lt;code&gt;[Service]&lt;/code&gt; section to &lt;code&gt;yes&lt;/code&gt;. If you do a system user is
dynamically allocated the instant the service binary is invoked, and
released again when the service terminates. The user is automatically
allocated from the UID range 61184‚Äì65519, by looking for a so far
unused UID.&lt;/p&gt;
&lt;p&gt;Now you may wonder, how does this concept deal with the sticky user
issue discussed above? In order to counter the problem, two strategies
easily come to mind:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Prohibit the service from creating any files/directories or IPC objects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatically removing the files/directories or IPC objects the
service created when it shuts down.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In systemd we implemented both strategies, but for different parts of
the execution environment. Specifically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Setting &lt;code&gt;DynamicUser=yes&lt;/code&gt; implies
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#ProtectSystem="&gt;&lt;code&gt;ProtectSystem=strict&lt;/code&gt;&lt;/a&gt;
and
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#ProtectHome="&gt;&lt;code&gt;ProtectHome=read-only&lt;/code&gt;&lt;/a&gt;. These
sand-boxing options turn off write access to pretty much the whole OS
directory tree, with a few relevant exceptions, such as the API file
systems &lt;code&gt;/proc&lt;/code&gt;, &lt;code&gt;/sys&lt;/code&gt; and so on, as well as &lt;code&gt;/tmp&lt;/code&gt; and
&lt;code&gt;/var/tmp&lt;/code&gt;. (BTW: setting these two options on your regular services
that do not use &lt;code&gt;DynamicUser=&lt;/code&gt; is a good idea too, as it drastically
reduces the exposure of the system to exploited services.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setting &lt;code&gt;DynamicUser=yes&lt;/code&gt; implies
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#PrivateTmp="&gt;&lt;code&gt;PrivateTmp=yes&lt;/code&gt;&lt;/a&gt;. This
option sets up &lt;code&gt;/tmp&lt;/code&gt; and &lt;code&gt;/var/tmp&lt;/code&gt; for the service in a way that it
gets its own, disconnected version of these directories, that are not
shared by other services, and whose life-cycle is bound to the
service's own life-cycle. Thus if the service goes down, the user is
removed and all its temporary files and directories with it. (BTW: as
above, consider setting this option for your regular services that do
not use &lt;code&gt;DynamicUser=&lt;/code&gt; too, it's a great way to lock things down
security-wise.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setting &lt;code&gt;DynamicUser=yes&lt;/code&gt; implies
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RemoveIPC="&gt;&lt;code&gt;RemoveIPC=yes&lt;/code&gt;&lt;/a&gt;. This
option ensures that when the service goes down all SysV and POSIX IPC
objects (shared memory, message queues, semaphores) owned by the
service's user are removed. Thus, the life-cycle of the IPC objects is
bound to the life-cycle of the dynamic user and service, too. (BTW:
yes, here too, consider using this in your regular services, too!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With these four settings in effect, services with dynamic users are
nicely sand-boxed. They cannot create files or directories, except in
&lt;code&gt;/tmp&lt;/code&gt; and &lt;code&gt;/var/tmp&lt;/code&gt;, where they will be removed automatically when
the service shuts down, as will any IPC objects created. Sticky
ownership of files/directories and IPC objects is hence dealt with
effectively.&lt;/p&gt;
&lt;p&gt;The
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RuntimeDirectory="&gt;&lt;code&gt;RuntimeDirectory=&lt;/code&gt;&lt;/a&gt;
option may be used to open up a bit the sandbox to external
programs. If you set it to a directory name of your choice, it will be
created below &lt;code&gt;/run&lt;/code&gt; when the service is started, and removed in its
entirety when it is terminated. The ownership of the directory is
assigned to the service's dynamic user. This way, a dynamic user
service can expose API interfaces (AF_UNIX sockets, ‚Ä¶) to other
services at a well-defined place and again bind the life-cycle of it to
the service's own run-time. Example: set &lt;code&gt;RuntimeDirectory=foobar&lt;/code&gt; in
your service, and watch how a directory &lt;code&gt;/run/foobar&lt;/code&gt; appears at the
moment you start the service, and disappears the moment you stop
it again. (BTW: Much like the other settings discussed above,
&lt;code&gt;RuntimeDirectory=&lt;/code&gt; may be used outside of the &lt;code&gt;DynamicUser=&lt;/code&gt; context
too, and is a nice way to run any service with a properly owned,
life-cycle-managed run-time directory.)&lt;/p&gt;
&lt;h1&gt;Persistent Data&lt;/h1&gt;
&lt;p&gt;Of course, a service running in such an environment (although already
very useful for many cases!), has a major limitation: it cannot leave
persistent data around it can reuse on a later run. As pretty much the
whole OS directory tree is read-only to it, there's simply no place it
could put the data that survives from one service invocation to the
next.&lt;/p&gt;
&lt;p&gt;With systemd 235 this limitation is removed: there are now three new
settings:
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RuntimeDirectory="&gt;&lt;code&gt;StateDirectory=&lt;/code&gt;&lt;/a&gt;,
&lt;code&gt;LogsDirectory=&lt;/code&gt; and &lt;code&gt;CacheDirectory=&lt;/code&gt;. In many ways they operate like
&lt;code&gt;RuntimeDirectory=&lt;/code&gt;, but create sub-directories below &lt;code&gt;/var/lib&lt;/code&gt;,
&lt;code&gt;/var/log&lt;/code&gt; and &lt;code&gt;/var/cache&lt;/code&gt;, respectively. There's one major
difference beyond that however: directories created that way are
&lt;em&gt;persistent&lt;/em&gt;, they will survive the run-time cycle of a service, and
thus may be used to store data that is supposed to stay around between
invocations of the service.&lt;/p&gt;
&lt;p&gt;Of course, the obvious question to ask now is: how do these three
settings deal with the &lt;em&gt;sticky file ownership problem&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;For that we lifted a concept from container managers. Container
managers have a very similar problem: each container and the host
typically end up using a very similar set of numeric UIDs, and unless
user name-spacing is deployed this means that host users might be able
to access the data of specific containers that also have a user by the
same numeric UID assigned, even though it actually refers to a very
different identity in a different context. (Actually, it's even worse
than just getting access, due to the existence of &lt;code&gt;setuid&lt;/code&gt; file bits,
access might translate to privilege elevation.) The way container
managers protect the container images from the host (and from each
other to some level) is by placing the container trees below a
&lt;em&gt;boundary&lt;/em&gt; directory, with very restrictive access modes and ownership
(0700 and &lt;code&gt;root:root&lt;/code&gt; or so). A host user hence cannot take advantage
of the files/directories of a container user of the same UID inside of
a local container tree, simply because the boundary directory makes it
impossible to even reference files in it. After all on UNIX, in order
to get access to a specific path you need access to every single
component of it.&lt;/p&gt;
&lt;p&gt;How is that applied to dynamic user services? Let's say
&lt;code&gt;StateDirectory=foobar&lt;/code&gt; is set for a service that has &lt;code&gt;DynamicUser=&lt;/code&gt;
turned off. The instant the service is started, &lt;code&gt;/var/lib/foobar&lt;/code&gt; is
created as state directory, owned by the service's user and remains in
existence when the service is stopped. If the same service now is run
with &lt;code&gt;DynamicUser=&lt;/code&gt; turned on, the implementation is slightly
altered. Instead of a directory &lt;code&gt;/var/lib/foobar&lt;/code&gt; a symbolic link by
the same path is created (owned by root), pointing to
&lt;code&gt;/var/lib/private/foobar&lt;/code&gt; (the latter being owned by the service's
dynamic user). The &lt;code&gt;/var/lib/private&lt;/code&gt; directory is created as boundary
directory: it's owned by &lt;code&gt;root:root&lt;/code&gt;, and has a restrictive access
mode of 0700. Both the symlink and the service's state directory will
survive the service's life-cycle, but the state directory will remain,
and continues to be owned by the now disposed dynamic UID ‚Äî however it
is protected from other host users (and other services which might get
the same dynamic UID assigned due to UID recycling) by the boundary
directory.&lt;/p&gt;
&lt;p&gt;The obvious question to ask now is: but if the boundary directory
prohibits access to the directory from unprivileged processes, how can
the service itself which runs under its own dynamic UID access it
anyway? This is achieved by invoking the service process in a slightly
modified mount name-space: it will see most of the file hierarchy the
same way as everything else on the system (modulo &lt;code&gt;/tmp&lt;/code&gt; and
&lt;code&gt;/var/tmp&lt;/code&gt; as mentioned above), except for &lt;code&gt;/var/lib/private&lt;/code&gt;, which
is over-mounted with a read-only &lt;code&gt;tmpfs&lt;/code&gt; file system instance, with a
slightly more liberal access mode permitting the service read
access. Inside of this &lt;code&gt;tmpfs&lt;/code&gt; file system instance another mount is
placed: a bind mount to the host's real &lt;code&gt;/var/lib/private/foobar&lt;/code&gt;
directory, onto the same name. Putting this together these means that
superficially everything looks the same and is available at the same
place on the host and from inside the service, but two important
changes have been made: the &lt;code&gt;/var/lib/private&lt;/code&gt; boundary directory lost
its restrictive character inside the service, and has been emptied of
the state directories of any other service, thus making the protection
complete. Note that the symlink &lt;code&gt;/var/lib/foobar&lt;/code&gt; hides the fact that
the boundary directory is used (making it little more than an
implementation detail), as the directory is available this way under
the same name as it would be if &lt;code&gt;DynamicUser=&lt;/code&gt; was not used. Long
story short: for the daemon and from the view from the host the
indirection through &lt;code&gt;/var/lib/private&lt;/code&gt; is mostly transparent.&lt;/p&gt;
&lt;p&gt;This logic of course raises another question: what happens to the
state directory if a dynamic user service is started with a state
directory configured, gets UID X assigned on this first invocation,
then terminates and is restarted and now gets UID Y assigned on the
second invocation, with X ‚â† Y? On the second invocation the directory
‚Äî and all the files and directories below it ‚Äî will still be owned by
the original UID X so how could the second instance running as Y
access it? Our way out is simple: systemd will recursively change the
ownership of the directory and everything contained within it to UID Y
before invoking the service's executable.&lt;/p&gt;
&lt;p&gt;Of course, such recursive ownership changing (&lt;code&gt;chown()&lt;/code&gt;ing) of whole
directory trees can become expensive (though according to my
experiences, IRL and for most services it's much cheaper than you
might think), hence in order to optimize behavior in this regard, the
allocation of dynamic UIDs has been tweaked in two ways to avoid the
necessity to do this expensive operation in most cases: firstly, when
a dynamic UID is allocated for a service an allocation loop is
employed that starts out with a UID hashed from the service's
name. This means a service by the same name is likely to always use
the same numeric UID. That means that a stable service name translates
into a stable dynamic UID, and that means recursive file ownership
adjustments can be skipped (of course, after validation). Secondly, if
the configured state directory already exists, and is owned by a
suitable currently unused dynamic UID, it's preferably used above
everything else, thus maximizing the chance we can avoid the
&lt;code&gt;chown()&lt;/code&gt;ing. (That all said, ultimately we have to face it, the
currently available UID space of 4K+ is very small still, and
conflicts are pretty likely sooner or later, thus a chown()ing has to
be expected every now and then when this feature is used extensively).&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;CacheDirectory=&lt;/code&gt; and &lt;code&gt;LogsDirectory=&lt;/code&gt; work very similar to
&lt;code&gt;StateDirectory=&lt;/code&gt;. The only difference is that they manage directories
below the &lt;code&gt;/var/cache&lt;/code&gt; and &lt;code&gt;/var/logs&lt;/code&gt; directories, and their boundary
directory hence is &lt;code&gt;/var/cache/private&lt;/code&gt; and &lt;code&gt;/var/log/private&lt;/code&gt;,
respectively.&lt;/p&gt;
&lt;h1&gt;Examples&lt;/h1&gt;
&lt;p&gt;So, after all this introduction, let's have a look how this all can be
put together. Here's a trivial example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cat &amp;gt; /etc/systemd/system/dynamic-user-test.service &amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/sleep &lt;span class="m"&gt;4711&lt;/span&gt;
&lt;span class="nv"&gt;DynamicUser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
EOF
&lt;span class="c1"&gt;# systemctl daemon-reload&lt;/span&gt;
&lt;span class="c1"&gt;# systemctl start dynamic-user-test&lt;/span&gt;
&lt;span class="c1"&gt;# systemctl status dynamic-user-test&lt;/span&gt;
‚óè dynamic-user-test.service
   Loaded: loaded &lt;span class="o"&gt;(&lt;/span&gt;/etc/systemd/system/dynamic-user-test.service&lt;span class="p"&gt;;&lt;/span&gt; static&lt;span class="p"&gt;;&lt;/span&gt; vendor preset: disabled&lt;span class="o"&gt;)&lt;/span&gt;
   Active: active &lt;span class="o"&gt;(&lt;/span&gt;running&lt;span class="o"&gt;)&lt;/span&gt; since Fri &lt;span class="m"&gt;2017&lt;/span&gt;-10-06 &lt;span class="m"&gt;13&lt;/span&gt;:12:25 CEST&lt;span class="p"&gt;;&lt;/span&gt; 3s ago
 Main PID: &lt;span class="m"&gt;2967&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;sleep&lt;span class="o"&gt;)&lt;/span&gt;
    Tasks: &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;limit: &lt;span class="m"&gt;4915&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   CGroup: /system.slice/dynamic-user-test.service
           ‚îî‚îÄ2967 /usr/bin/sleep &lt;span class="m"&gt;4711&lt;/span&gt;

Okt &lt;span class="m"&gt;06&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;:12:25 sigma systemd&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Started dynamic-user-test.service.
&lt;span class="c1"&gt;# ps -e -o pid,comm,user | grep 2967&lt;/span&gt;
 &lt;span class="m"&gt;2967&lt;/span&gt; sleep           dynamic-user-test
&lt;span class="c1"&gt;# id dynamic-user-test&lt;/span&gt;
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64642&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;dynamic-user-test&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64642&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;dynamic-user-test&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;64642&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;dynamic-user-test&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# systemctl stop dynamic-user-test&lt;/span&gt;
&lt;span class="c1"&gt;# id dynamic-user-test&lt;/span&gt;
id: ‚Äòdynamic-user-test‚Äô: no such user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example, we create a unit file with &lt;code&gt;DynamicUser=&lt;/code&gt; turned on,
start it, check if it's running correctly, have a look at the service
process' user (which is named like the service; systemd does this
automatically if the service name is suitable as user name, and you
didn't configure any user name to use explicitly), stop the service
and verify that the user ceased to exist too.&lt;/p&gt;
&lt;p&gt;That's already pretty cool. Let's step it up a notch, by doing the
same in an interactive &lt;em&gt;transient&lt;/em&gt; service (for those who don't know
systemd well: a transient service is a service that is defined and
started dynamically at run-time, for example via the
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd-run.html"&gt;&lt;code&gt;systemd-run&lt;/code&gt;&lt;/a&gt;
command from the shell. Think: run a service without having to write a
unit file first):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# systemd-run --pty --property=DynamicUser=yes --property=StateDirectory=wuff /bin/sh&lt;/span&gt;
Running as unit: run-u15750.service
Press ^&lt;span class="o"&gt;]&lt;/span&gt; three &lt;span class="nb"&gt;times&lt;/span&gt; within 1s to disconnect TTY.
sh-4.4$ id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;63122&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;run-u15750&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;63122&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;run-u15750&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;63122&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;run-u15750&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;system_u:system_r:initrc_t:s0
sh-4.4$ ls -al /var/lib/private/
total &lt;span class="m"&gt;0&lt;/span&gt;
drwxr-xr-x. &lt;span class="m"&gt;3&lt;/span&gt; root       root        &lt;span class="m"&gt;60&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:21 .
drwxr-xr-x. &lt;span class="m"&gt;1&lt;/span&gt; root       root       &lt;span class="m"&gt;852&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:21 ..
drwxr-xr-x. &lt;span class="m"&gt;1&lt;/span&gt; run-u15750 run-u15750   &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:22 wuff
sh-4.4$ ls -ld /var/lib/wuff
lrwxrwxrwx. &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;12&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:21 /var/lib/wuff -&amp;gt; private/wuff
sh-4.4$ ls -ld /var/lib/wuff/
drwxr-xr-x. &lt;span class="m"&gt;1&lt;/span&gt; run-u15750 run-u15750 &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:21 /var/lib/wuff/
sh-4.4$ &lt;span class="nb"&gt;echo&lt;/span&gt; hello &amp;gt; /var/lib/wuff/test
sh-4.4$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="c1"&gt;# id run-u15750&lt;/span&gt;
id: ‚Äòrun-u15750‚Äô: no such user
&lt;span class="c1"&gt;# ls -al /var/lib/private&lt;/span&gt;
total &lt;span class="m"&gt;0&lt;/span&gt;
drwx------. &lt;span class="m"&gt;1&lt;/span&gt; root  root   &lt;span class="m"&gt;66&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:21 .
drwxr-xr-x. &lt;span class="m"&gt;1&lt;/span&gt; root  root  &lt;span class="m"&gt;852&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:21 ..
drwxr-xr-x. &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;63122&lt;/span&gt; &lt;span class="m"&gt;63122&lt;/span&gt;   &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:22 wuff
&lt;span class="c1"&gt;# ls -ld /var/lib/wuff&lt;/span&gt;
lrwxrwxrwx. &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;12&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:21 /var/lib/wuff -&amp;gt; private/wuff
&lt;span class="c1"&gt;# ls -ld /var/lib/wuff/&lt;/span&gt;
drwxr-xr-x. &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;63122&lt;/span&gt; &lt;span class="m"&gt;63122&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:22 /var/lib/wuff/
&lt;span class="c1"&gt;# cat /var/lib/wuff/test&lt;/span&gt;
hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above invokes an interactive shell as transient service
&lt;code&gt;run-u15750.service&lt;/code&gt; (&lt;code&gt;systemd-run&lt;/code&gt; picked that name automatically,
since we didn't specify anything explicitly) with a dynamic user whose
name is derived automatically from the service name. Because
&lt;code&gt;StateDirectory=wuff&lt;/code&gt; is used, a persistent state directory for the
service is made available as &lt;code&gt;/var/lib/wuff&lt;/code&gt;. In the interactive shell
running inside the service, the &lt;code&gt;ls&lt;/code&gt; commands show the
&lt;code&gt;/var/lib/private&lt;/code&gt; boundary directory and its contents, as well as the
symlink that is placed for the service. Finally, before exiting the
shell, a file is created in the state directory. Back in the original
command shell we check if the user is still allocated: it is not, of
course, since the service ceased to exist when we exited the shell and
with it the dynamic user associated with it. From the host we check
the state directory of the service, with similar commands as we did
from inside of it. We see that things are set up pretty much the same
way in both cases, except for two things: first of all the user/group
of the files is now shown as raw numeric UIDs instead of the
user/group names derived from the unit name. That's because the user
ceased to exist at this point, and "ls" shows the raw UID for files
owned by users that don't exist. Secondly, the access mode of the
boundary directory is different: when we look at it from outside of
the service it is not readable by anyone but root, when we looked from
inside we saw it it being world readable.&lt;/p&gt;
&lt;p&gt;Now, let's see how things look if we start another transient service,
reusing the state directory from the first invocation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# systemd-run --pty --property=DynamicUser=yes --property=StateDirectory=wuff /bin/sh&lt;/span&gt;
Running as unit: run-u16087.service
Press ^&lt;span class="o"&gt;]&lt;/span&gt; three &lt;span class="nb"&gt;times&lt;/span&gt; within 1s to disconnect TTY.
sh-4.4$ cat /var/lib/wuff/test
hello
sh-4.4$ ls -al /var/lib/wuff/
total &lt;span class="m"&gt;4&lt;/span&gt;
drwxr-xr-x. &lt;span class="m"&gt;1&lt;/span&gt; run-u16087 run-u16087  &lt;span class="m"&gt;8&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:22 .
drwxr-xr-x. &lt;span class="m"&gt;3&lt;/span&gt; root       root       &lt;span class="m"&gt;60&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;15&lt;/span&gt;:42 ..
-rw-r--r--. &lt;span class="m"&gt;1&lt;/span&gt; run-u16087 run-u16087  &lt;span class="m"&gt;6&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;. Okt &lt;span class="m"&gt;13&lt;/span&gt;:22 &lt;span class="nb"&gt;test&lt;/span&gt;
sh-4.4$ id
&lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;63122&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;run-u16087&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;63122&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;run-u16087&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;groups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;63122&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;run-u16087&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;system_u:system_r:initrc_t:s0
sh-4.4$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;systemd-run&lt;/code&gt; picked a different auto-generated unit name, but
the used dynamic UID is still the same, as it was read from the
pre-existing state directory, and was otherwise unused. As we can see
the test file we generated earlier is accessible and still contains
the data we left in there. Do note that the user name is different
this time (as it is derived from the unit name, which is different),
but the UID it is assigned to is the same one as on the first
invocation. We can thus see that the mentioned optimization of the UID
allocation logic (i.e. that we start the allocation loop from the UID
owner of any existing state directory) took effect, so that no
recursive &lt;code&gt;chown()&lt;/code&gt;ing was required.&lt;/p&gt;
&lt;p&gt;And that's the end of our example, which hopefully illustrated a bit
how this concept and implementation works.&lt;/p&gt;
&lt;h1&gt;Use-cases&lt;/h1&gt;
&lt;p&gt;Now that we had a look at how to enable this logic for a unit and how
it is implemented, let's discuss where this actually could be useful
in real life.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;One major benefit of dynamic user IDs is that running a
privilege-separated service leaves no artifacts in the system. A
system user is allocated and made use of, but it is discarded
automatically in a safe and secure way after use, in a fashion that is
safe for later recycling. Thus, quickly invoking a short-lived service
for processing some job can be protected properly through a user ID
without having to pre-allocate it and without this draining the
available UID pool any longer than necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In many cases, starting a service no longer requires
package-specific preparation. Or in other words, quite often
&lt;code&gt;useradd&lt;/code&gt;/&lt;code&gt;mkdir&lt;/code&gt;/&lt;code&gt;chown&lt;/code&gt;/&lt;code&gt;chmod&lt;/code&gt; invocations in "&lt;code&gt;post-inst&lt;/code&gt;" package
scripts, as well as
&lt;a href="https://www.freedesktop.org/software/systemd/man/sysusers.d.html"&gt;&lt;code&gt;sysusers.d&lt;/code&gt;&lt;/a&gt;
and
&lt;a href="https://www.freedesktop.org/software/systemd/man/tmpfiles.d.html"&gt;&lt;code&gt;tmpfiles.d&lt;/code&gt;&lt;/a&gt;
drop-ins become unnecessary, as the &lt;code&gt;DynamicUser=&lt;/code&gt; and
&lt;code&gt;StateDirectory=&lt;/code&gt;/&lt;code&gt;CacheDirectory=&lt;/code&gt;/&lt;code&gt;LogsDirectory=&lt;/code&gt; logic can do the
necessary work automatically, on-demand and with a well-defined
life-cycle.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By combining dynamic user IDs with the transient unit concept, new
creative ways of sand-boxing are made available. For example, let's say
you don't trust the correct implementation of the &lt;code&gt;sort&lt;/code&gt; command. You
can now lock it into a simple, robust, dynamic UID sandbox with a
simple &lt;code&gt;systemd-run&lt;/code&gt; and still integrate it into a shell pipeline like
any other command. Here's an example, showcasing a shell pipeline
whose middle element runs as a dynamically on-the-fly allocated UID,
that is released when the pipelines ends.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# cat some-file.txt | systemd-run ---pipe --property=DynamicUser=1 sort -u | grep -i foobar &amp;gt; some-other-file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By combining dynamic user IDs with the systemd templating logic it
is now possible to do much more fine-grained and fully automatic UID
management. For example, let's say you have a template unit file
&lt;code&gt;/etc/systemd/system/foobard@.service&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Service]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/bin/myfoobarserviced&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;DynamicUser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;StateDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;foobar/%i&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let's say you want to start one instance of this service for
 each of your customers. All you need to do now for that is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foobard&lt;/span&gt;&lt;span class="nv"&gt;@customerxyz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And you are done. (Invoke this as many times as you like, each time
 replacing &lt;code&gt;customerxyz&lt;/code&gt; by some customer identifier, you get the
 idea.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By combining dynamic user IDs with socket activation you may easily
implement a system where each incoming connection is served by a
process instance running as a different, fresh, newly allocated UID
within its own sandbox. Here's an example &lt;code&gt;waldo.socket&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Socket]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;ListenStream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2048&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With a matching &lt;code&gt;waldo@.service&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Service]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;-/usr/bin/myservicebinary&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="na"&gt;DynamicUser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the two unit files above, systemd will listen on TCP/IP port
2048, and for each incoming connection invoke a fresh instance of
&lt;code&gt;waldo@.service&lt;/code&gt;, each time utilizing a different, new,
dynamically allocated UID, neatly isolated from any other
instance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dynamic user IDs combine very well with state-less systems,
i.e. systems that come up with an unpopulated &lt;code&gt;/etc&lt;/code&gt; and &lt;code&gt;/var&lt;/code&gt;. A
service using dynamic user IDs and the &lt;code&gt;StateDirectory=&lt;/code&gt;,
&lt;code&gt;CacheDirectory=&lt;/code&gt;, &lt;code&gt;LogsDirectory=&lt;/code&gt; and &lt;code&gt;RuntimeDirectory=&lt;/code&gt; concepts
will implicitly allocate the users and directories it needs for
running, right at the moment where it needs it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dynamic users are a very generic concept, hence a multitude of other
uses are thinkable; the list above is just supposed to trigger your
imagination.&lt;/p&gt;
&lt;h1&gt;What does this mean for you as a packager?&lt;/h1&gt;
&lt;p&gt;I am pretty sure that a large number of services shipped with today's
distributions could benefit from using &lt;code&gt;DynamicUser=&lt;/code&gt; and
&lt;code&gt;StateDirectory=&lt;/code&gt; (and related settings). It often allows removal of
&lt;code&gt;post-inst&lt;/code&gt; packaging scripts altogether, as well as any &lt;code&gt;sysusers.d&lt;/code&gt;
and &lt;code&gt;tmpfiles.d&lt;/code&gt; drop-ins by unifying the needed declarations in the
unit file itself. Hence, as a packager please consider switching your
unit files over. That said, there are a number of conditions where
&lt;code&gt;DynamicUser=&lt;/code&gt; and &lt;code&gt;StateDirectory=&lt;/code&gt; (and friends) cannot or should
not be used. To name a few:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Service that need to write to files outside of &lt;code&gt;/run/&amp;lt;package&amp;gt;&lt;/code&gt;,
&lt;code&gt;/var/lib/&amp;lt;package&amp;gt;&lt;/code&gt;, &lt;code&gt;/var/cache/&amp;lt;package&amp;gt;&lt;/code&gt;, &lt;code&gt;/var/log/&amp;lt;package&amp;gt;&lt;/code&gt;,
&lt;code&gt;/var/tmp&lt;/code&gt;, &lt;code&gt;/tmp&lt;/code&gt;, &lt;code&gt;/dev/shm&lt;/code&gt; are generally incompatible with this
scheme. This rules out daemons that upgrade the system as one example,
as that involves writing to &lt;code&gt;/usr&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Services that maintain a herd of processes with different user
IDs. Some SMTP services are like this. If your service has such a
&lt;em&gt;super-server&lt;/em&gt; design, UID management needs to be done by the
super-server itself, which rules out systemd doing its dynamic UID
magic for it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Services which run as root (obviously‚Ä¶) or are otherwise
privileged.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Services that need to live in the same mount name-space as the host
system (for example, because they want to establish mount points
visible system-wide). As mentioned &lt;code&gt;DynamicUser=&lt;/code&gt; implies
&lt;code&gt;ProtectSystem=&lt;/code&gt;, &lt;code&gt;PrivateTmp=&lt;/code&gt; and related options, which all require
the service to run in its own mount name-space.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your focus is older distributions, i.e. distributions that do not
have systemd 232 (for &lt;code&gt;DynamicUser=&lt;/code&gt;) or systemd 235 (for
&lt;code&gt;StateDirectory=&lt;/code&gt; and friends) yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If your distribution's packaging guides don't allow it. Consult
your packaging guides, and possibly start a discussion on your
distribution's mailing list about this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Notes&lt;/h1&gt;
&lt;p&gt;A couple of additional, random notes about the implementation and use
of these features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Do note that allocating or deallocating a dynamic user leaves
&lt;code&gt;/etc/passwd&lt;/code&gt; untouched. A dynamic user is added into the user
database through the glibc NSS module
&lt;a href="https://www.freedesktop.org/software/systemd/man/nss-systemd.html"&gt;&lt;code&gt;nss-systemd&lt;/code&gt;&lt;/a&gt;,
and this information never hits the disk.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On traditional UNIX systems it was the job of the daemon process
itself to drop privileges, while the &lt;code&gt;DynamicUser=&lt;/code&gt; concept is
designed around the service manager (i.e. systemd) being responsible
for that. That said, since v235 there's a way to marry &lt;code&gt;DynamicUser=&lt;/code&gt;
and such services which want to drop privileges on their own. For
that, turn on &lt;code&gt;DynamicUser=&lt;/code&gt; and set
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#User="&gt;&lt;code&gt;User=&lt;/code&gt;&lt;/a&gt;
to the user name the service wants to &lt;code&gt;setuid()&lt;/code&gt; to. This has the
effect that systemd will allocate the dynamic user under the specified
name when the service is started. Then, prefix the command line you
specify in
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.service.html#ExecStart="&gt;&lt;code&gt;ExecStart=&lt;/code&gt;&lt;/a&gt;
with a single &lt;code&gt;!&lt;/code&gt; character. If you do, the user is allocated for the
service, but the daemon binary is invoked as &lt;code&gt;root&lt;/code&gt; instead of the
allocated user, under the assumption that the daemon changes its UID
on its own the right way. Note that after registration the user will
show up instantly in the user database, and is hence resolvable like
any other by the daemon process. Example:
&lt;code&gt;ExecStart=!/usr/bin/mydaemond&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You may wonder why systemd uses the UID range 61184‚Äì65519 for its
dynamic user allocations (side note: in hexadecimal this reads as
0xEF00‚Äì0xFFEF). That's because distributions (specifically Fedora)
tend to allocate regular users from below the 60000 range, and we
don't want to step into that. We also want to stay away from 65535 and
a bit around it, as some of these UIDs have special meanings (65535 is
often used as special value for "invalid" or "no" UID, as it is
identical to the 16bit value -1; 65534 is generally mapped to the
"nobody" user, and is where some kernel subsystems map unmappable
UIDs). Finally, we want to stay within the 16bit range. In a user
name-spacing world each container tends to have much less than the full
32bit UID range available that Linux kernels theoretically
provide. Everybody apparently can agree that a container should at
least cover the 16bit range though ‚Äî already to include a &lt;code&gt;nobody&lt;/code&gt;
user. (And quite frankly, I am pretty sure assigning 64K UIDs per
container is nicely systematic, as the the higher 16bit of the 32bit
UID values this way become a container ID, while the lower 16bit
become the logical UID within each container, if you still follow what
I am babbling here‚Ä¶). And before you ask: no this range cannot be
changed right now, it's compiled in. We might change that eventually
however.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You might wonder what happens if you already used UIDs from the
61184‚Äì65519 range on your system for other purposes. systemd should
handle that mostly fine, as long as that usage is properly registered
in the user database: when allocating a dynamic user we pick a UID,
see if it is currently used somehow, and if yes pick a different one,
until we find a free one. Whether a UID is used right now or not is
checked through NSS calls. Moreover the IPC object lists are checked to
see if there are any objects owned by the UID we are about to
pick. This means systemd will avoid using UIDs you have assigned
otherwise. Note however that this of course makes the pool of
available UIDs smaller, and in the worst cases this means that
allocating a dynamic user might fail because there simply are no
unused UIDs in the range.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If not specified otherwise the name for a dynamically allocated
user is derived from the service name. Not everything that's valid in
a service name is valid in a user-name however, and in some cases a
randomized name is used instead to deal with this. Often it makes
sense to pick the user names to register explicitly. For that use
&lt;code&gt;User=&lt;/code&gt; and choose whatever you like.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you pick a user name with &lt;code&gt;User=&lt;/code&gt; and combine it with
&lt;code&gt;DynamicUser=&lt;/code&gt; and the user already exists statically it will be used
for the service and the dynamic user logic is automatically
disabled. This permits automatic up- and downgrades between static and
dynamic UIDs. For example, it provides a nice way to move a system
from static to dynamic UIDs in a compatible way: as long as you select
the same &lt;code&gt;User=&lt;/code&gt; value before and after switching &lt;code&gt;DynamicUser=&lt;/code&gt; on,
the service will continue to use the statically allocated user if it
exists, and only operates in the dynamic mode if it does not. This is
useful for other cases as well, for example to adapt a service that
normally would use a dynamic user to concepts that require statically
assigned UIDs, for example to marry classic UID-based file system
quota with such services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;systemd always allocates a pair of dynamic UID and GID at the same
time, with the same numeric ID.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the Linux kernel had a "shiftfs" or similar functionality,
i.e. a way to mount an existing directory to a second place, but map
the exposed UIDs/GIDs in some way configurable at mount time, this
would be excellent for the implementation of &lt;code&gt;StateDirectory=&lt;/code&gt; in
conjunction with &lt;code&gt;DynamicUser=&lt;/code&gt;.  It would make the recursive
&lt;code&gt;chown()&lt;/code&gt;ing step unnecessary, as the host version of the state
directory could simply be mounted into a the service's mount
name-space, with a shift applied that maps the directory's owner to the
services' UID/GID. But I don't have high hopes in this regard, as all
work being done in this area appears to be bound to user name-spacing
‚Äî which is a concept not used here (and I guess one could say user
name-spacing is probably more a source of problems than a solution to
one, but you are welcome to disagree on that).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that's all for now. Enjoy your dynamic users!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-10-06:/blog/dynamic-users-with-systemd.html</guid><category>projects</category></item><item><title>All Systems Go! 2017 Schedule Published</title><link>https://0pointer.net/blog/all-systems-go-2017-schedule-published.html</link><description>&lt;p&gt;&lt;large&gt;&lt;b&gt;The All Systems Go! 2017 schedule has been published!&lt;/b&gt;&lt;/large&gt;&lt;/p&gt;
&lt;p&gt;I am happy to announce that we have published the &lt;a
href="https://all-systems-go.io/"&gt;All Systems Go! 2017&lt;/a&gt; schedule!
We are very happy with the large number and the quality of the
submissions we got, and the resulting schedule is exceptionally
strong.&lt;/p&gt;
&lt;p&gt;Without further ado:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cfp.all-systems-go.io/en/ASG2017/public/schedule/2"&gt;Here's the schedule for the first day (Saturday, 21st of October).&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cfp.all-systems-go.io/en/ASG2017/public/schedule/3"&gt;And here's the schedule for the second day (Sunday, 22nd of October).&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here are a couple of keywords from the topics of the talks:
&lt;strong&gt;1password&lt;/strong&gt;, &lt;strong&gt;azure&lt;/strong&gt;, &lt;strong&gt;bluetooth&lt;/strong&gt;, &lt;strong&gt;build systems&lt;/strong&gt;,
&lt;strong&gt;casync&lt;/strong&gt;, &lt;strong&gt;cgroups&lt;/strong&gt;, &lt;strong&gt;cilium&lt;/strong&gt;, &lt;strong&gt;cockpit&lt;/strong&gt;, &lt;strong&gt;containers&lt;/strong&gt;,
&lt;strong&gt;ebpf&lt;/strong&gt;, &lt;strong&gt;flatpak&lt;/strong&gt;, &lt;strong&gt;habitat&lt;/strong&gt;, &lt;strong&gt;IoT&lt;/strong&gt;, &lt;strong&gt;kubernetes&lt;/strong&gt;,
&lt;strong&gt;landlock&lt;/strong&gt;, &lt;strong&gt;meson&lt;/strong&gt;, &lt;strong&gt;OCI&lt;/strong&gt;, &lt;strong&gt;rkt&lt;/strong&gt;, &lt;strong&gt;rust&lt;/strong&gt;, &lt;strong&gt;secureboot&lt;/strong&gt;,
&lt;strong&gt;skydive&lt;/strong&gt;, &lt;strong&gt;systemd&lt;/strong&gt;, &lt;strong&gt;testing&lt;/strong&gt;, &lt;strong&gt;tor&lt;/strong&gt;, &lt;strong&gt;varlink&lt;/strong&gt;,
&lt;strong&gt;virtualization&lt;/strong&gt;, &lt;strong&gt;wifi&lt;/strong&gt;, and more.&lt;/p&gt;
&lt;p&gt;Our speakers are from all across the industry: Chef CoreOS, Covalent,
Facebook, Google, Intel, Kinvolk, Microsoft, Mozilla, Pantheon,
Pengutronix, Red Hat, SUSE and more.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://all-systems-go.io/"&gt;&lt;img src="https://all-systems-go.io/img/header-graphic.png" width="600" height="195" border="5"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For further information about All Systems Go! visit our &lt;a href="http://all-systems-go.io/"&gt;conference web site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Make sure to buy your ticket for All Systems Go! 2017 now! A limited
number of tickets are left at this point, so make sure you get yours
before we are all sold out!  &lt;a
href="https://all-systems-go.io/#tickets"&gt;Find all details here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See you in Berlin!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 27 Sep 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-09-27:/blog/all-systems-go-2017-schedule-published.html</guid><category>projects</category></item><item><title>All Systems Go! 2017 CfP Closes Soon!</title><link>https://0pointer.net/blog/all-systems-go-2017-cfp-closes-soon.html</link><description>&lt;p&gt;&lt;large&gt;&lt;b&gt;The All Systems Go! 2017 Call for Participation is Closing on September 3rd!&lt;/b&gt;&lt;/large&gt;&lt;/p&gt;
&lt;p&gt;Please make sure to get your presentation proprosals for&lt;i&gt;All Systems Go! 2017&lt;/i&gt; in now! The CfP closes on sunday!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://all-systems-go.io/"&gt;&lt;img src="https://all-systems-go.io/img/header-graphic.png" width="600" height="195" border="5"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case you haven't heard about &lt;i&gt;All Systems Go!&lt;/i&gt; yet, here's a quick reminder what kind of conference it is, and why you should attend and speak there:&lt;/p&gt;
&lt;p&gt;&lt;i&gt;All Systems Go!&lt;/i&gt; is an Open Source community conference focused
on the projects and technologies at the foundation of modern Linux
systems ‚Äî specifically low-level user-space technologies. Its goal is
to provide a friendly and collaborative gathering place for
individuals and communities working to push these technologies
forward. &lt;i&gt;All Systems Go! 2017&lt;/i&gt; takes place in &lt;b&gt;Berlin,
Germany&lt;/b&gt; on &lt;b&gt;October 21st+22nd&lt;/b&gt;. &lt;i&gt;All Systems Go!&lt;/i&gt; is a
2-day event with 2-3 talks happening in parallel. Full presentation
slots are 30-45 minutes in length and lightning talk slots are 5-10
minutes.&lt;/p&gt;
&lt;p&gt;In particular, we are looking for sessions including, but not limited to, the following topics:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Low-level container executors and infrastructure&lt;/li&gt;
&lt;li&gt;IoT and embedded OS infrastructure&lt;/li&gt;
&lt;li&gt;OS, container, IoT image delivery and updating&lt;/li&gt;
&lt;li&gt;Building Linux devices and applications&lt;/li&gt;
&lt;li&gt;Low-level desktop technologies&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;System and service management&lt;/li&gt;
&lt;li&gt;Tracing and performance measuring&lt;/li&gt;
&lt;li&gt;IPC and RPC systems&lt;/li&gt;
&lt;li&gt;Security and Sandboxing&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;While our focus is definitely more on the user-space side of things,
talks about kernel projects are welcome too, as long as they have a
clear and direct relevance for user-space.&lt;/p&gt;
&lt;p&gt;To submit your proposal now please visit our &lt;a href="https://cfp.all-systems-go.io/en/ASG2017/events/new"&gt;CFP submission web site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For further information about All Systems Go! visit our &lt;a href="http://all-systems-go.io/"&gt;conference web site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;systemd.conf&lt;/i&gt; will not take place this year in lieu of &lt;i&gt;All
Systems Go!&lt;/i&gt;. &lt;i&gt;All Systems Go!&lt;/i&gt; welcomes all projects that
contribute to Linux user space, which, of course, includes
systemd. Thus, anything you think was appropriate for submission to
&lt;i&gt;systemd.conf&lt;/i&gt; is also fitting for &lt;i&gt;All Systems Go&lt;/i&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 30 Aug 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-08-30:/blog/all-systems-go-2017-cfp-closes-soon.html</guid><category>projects</category></item><item><title>All Systems Go! 2017 Speakers</title><link>https://0pointer.net/blog/all-systems-go-2017-speakers.html</link><description>&lt;p&gt;&lt;large&gt;&lt;b&gt;The All Systems Go! 2017 Headline Speakers Announced!&lt;/b&gt;&lt;/large&gt;&lt;/p&gt;
&lt;p&gt;Don't forget to send in your submissions to the All Systems Go! 2017 CfP! Proposals are accepted until &lt;b&gt;September 3rd&lt;/b&gt;!&lt;/p&gt;
&lt;p&gt;A couple of headline speakers have been announced now:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;&lt;b&gt;Alban Crequy&lt;/b&gt; (Kinvolk)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Brian "Redbeard" Harrington&lt;/b&gt; (CoreOS)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Gianluca Borello&lt;/b&gt; (Sysdig)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Jon Boulle&lt;/b&gt; (NStack/CoreOS)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Martin Pitt&lt;/b&gt; (Debian)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Thomas Graf&lt;/b&gt; (covalent.io/Cilium)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Vincent Batts&lt;/b&gt; (Red Hat/OCI)&lt;/li&gt;
&lt;li&gt;(and yours truly)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These folks will also review your submissions as part of the papers committee!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://all-systems-go.io/"&gt;&lt;img src="https://all-systems-go.io/img/header-graphic.png" width="600" height="195" border="5"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;All Systems Go!&lt;/i&gt; is an Open Source community conference focused on the projects and technologies at the foundation of modern Linux systems ‚Äî specifically low-level user-space technologies. Its goal is to provide a friendly and collaborative gathering place for individuals and communities working to push these technologies forward.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;All Systems Go! 2017&lt;/i&gt; takes place in &lt;b&gt;Berlin, Germany&lt;/b&gt; on &lt;b&gt;October 21st+22nd&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;To submit your proposal now please visit our &lt;a href="https://cfp.all-systems-go.io/en/ASG2017/events/new"&gt;CFP submission web site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For further information about All Systems Go! visit our &lt;a href="http://all-systems-go.io/"&gt;conference web site&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 10 Aug 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-08-10:/blog/all-systems-go-2017-speakers.html</guid><category>projects</category></item><item><title>casync Video</title><link>https://0pointer.net/blog/casync-video.html</link><description>&lt;h1&gt;Video of my casync Presentation @ kinvolk&lt;/h1&gt;
&lt;p&gt;The great folks at &lt;a href="https://kinvolk.io/"&gt;kinvolk&lt;/a&gt; have uploaded a
&lt;a href="https://www.youtube.com/watch?v=JnNkBJ6pr9s"&gt;video of my casync presentation at their offices last
week&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/JnNkBJ6pr9s" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The &lt;a href="http://0pointer.de/public/casync-kinvolk2017.pdf"&gt;slides are
available&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 18 Jul 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-07-18:/blog/casync-video.html</guid><category>projects</category></item><item><title>mkosi ‚Äî A Tool for Generating OS Images</title><link>https://0pointer.net/blog/mkosi-a-tool-for-generating-os-images.html</link><description>&lt;h1&gt;Introducing mkosi&lt;/h1&gt;
&lt;p&gt;After blogging about
&lt;a href="http://0pointer.net/blog/casync-a-tool-for-distributing-file-system-images.html"&gt;&lt;code&gt;casync&lt;/code&gt;&lt;/a&gt;
I realized I never blogged about the
&lt;a href="https://github.com/systemd/mkosi"&gt;&lt;code&gt;mkosi&lt;/code&gt;&lt;/a&gt; tool that combines nicely
with it. &lt;code&gt;mkosi&lt;/code&gt; has been around for a while already, and its time to
make it a bit better known. &lt;code&gt;mkosi&lt;/code&gt; stands for &lt;em&gt;Make Operating System
Image&lt;/em&gt;, and is a tool for precisely that: generating an OS tree or
image that can be booted.&lt;/p&gt;
&lt;p&gt;Yes, there are many tools like &lt;code&gt;mkosi&lt;/code&gt;, and a number of them are quite
well known and popular. But &lt;code&gt;mkosi&lt;/code&gt; has a number of features that I
think make it interesting for a variety of use-cases that other tools
don't cover that well.&lt;/p&gt;
&lt;h1&gt;What is mkosi?&lt;/h1&gt;
&lt;p&gt;What are those use-cases, and what does &lt;code&gt;mkosi&lt;/code&gt; precisely set apart?
&lt;code&gt;mkosi&lt;/code&gt; is definitely a tool with a focus on developer's needs for
building OS images, for testing and debugging, but also for generating
production images with cryptographic protection. A typical use-case
would be to add a &lt;code&gt;mkosi.default&lt;/code&gt; file to an existing project (for
example, one written in C or Python), and thus making it easy to
generate an OS image for it. &lt;code&gt;mkosi&lt;/code&gt; will put together the image with
development headers and tools, compile your code in it, run your test
suite, then throw away the image again, and build a new one, this time
without development headers and tools, and install your build
artifacts in it. This final image is then "production-ready", and only
contains your built program and the minimal set of packages you
configured otherwise. Such an image could then be deployed with
&lt;code&gt;casync&lt;/code&gt; (or any other tool of course) to be delivered to your set of
servers, or IoT devices or whatever you are building.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mkosi&lt;/code&gt; is supposed to be &lt;em&gt;legacy-free&lt;/em&gt;: the focus is clearly on
today's technology, not yesteryear's. Specifically this means that
we'll generate GPT partition tables, not MBR/DOS ones. When you tell
&lt;code&gt;mkosi&lt;/code&gt; to generate a bootable image for you, it will make it bootable
on EFI, not on legacy BIOS. The GPT images generated follow
specifications such as the &lt;a href="https://www.freedesktop.org/wiki/Specifications/DiscoverablePartitionsSpec/"&gt;Discoverable Partitions
Specification&lt;/a&gt;,
so that &lt;code&gt;/etc/fstab&lt;/code&gt; can remain unpopulated and tools such as
&lt;code&gt;systemd-nspawn&lt;/code&gt; can automatically dissect the image and boot from
them.&lt;/p&gt;
&lt;p&gt;So, let's have a look on the specific images it can generate:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Raw GPT disk image, with ext4 as root&lt;/li&gt;
&lt;li&gt;Raw GPT disk image, with btrfs as root&lt;/li&gt;
&lt;li&gt;Raw GPT disk image, with a read-only squashfs as root&lt;/li&gt;
&lt;li&gt;A plain directory on disk containing the OS tree directly (this is useful for creating generic container images)&lt;/li&gt;
&lt;li&gt;A btrfs subvolume on disk, similar to the plain directory&lt;/li&gt;
&lt;li&gt;A tarball of a plain directory&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When any of the GPT choices above are selected, a couple of additional
options are available:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A swap partition may be added in&lt;/li&gt;
&lt;li&gt;The system may be made bootable on EFI systems&lt;/li&gt;
&lt;li&gt;Separate partitions for &lt;code&gt;/home&lt;/code&gt; and &lt;code&gt;/srv&lt;/code&gt; may be added in&lt;/li&gt;
&lt;li&gt;The root, &lt;code&gt;/home&lt;/code&gt; and &lt;code&gt;/srv&lt;/code&gt; partitions may be optionally encrypted with LUKS&lt;/li&gt;
&lt;li&gt;The root partition may be protected using &lt;code&gt;dm-verity&lt;/code&gt;, thus making offline attacks on the generated system hard&lt;/li&gt;
&lt;li&gt;If the image is made bootable, the &lt;code&gt;dm-verity&lt;/code&gt; root hash is automatically added to the kernel command line, and the kernel together with its initial RAM disk and the kernel command line is optionally cryptographically signed for UEFI SecureBoot&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that &lt;code&gt;mkosi&lt;/code&gt; is distribution-agnostic. It currently can build
images based on the following Linux distributions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fedora&lt;/li&gt;
&lt;li&gt;Debian&lt;/li&gt;
&lt;li&gt;Ubuntu&lt;/li&gt;
&lt;li&gt;ArchLinux&lt;/li&gt;
&lt;li&gt;openSUSE&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note though that not all distributions are supported at the same
feature level currently. Also, as &lt;code&gt;mkosi&lt;/code&gt; is based on &lt;code&gt;dnf
--installroot&lt;/code&gt;, &lt;code&gt;debootstrap&lt;/code&gt;, &lt;code&gt;pacstrap&lt;/code&gt; and &lt;code&gt;zypper&lt;/code&gt;, and those
packages are not packaged universally on all distributions, you might
not be able to build images for all those distributions on arbitrary
host distributions.&lt;/p&gt;
&lt;p&gt;The GPT images are put together in a way that they aren't just
compatible with UEFI systems, but also with VM and container managers
(that is, at least the smart ones, i.e. VM managers that know UEFI,
and container managers that grok GPT disk images) to a large
degree. In fact, the idea is that you can use &lt;code&gt;mkosi&lt;/code&gt; to build a
single GPT image that may be used to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Boot on bare-metal boxes&lt;/li&gt;
&lt;li&gt;Boot in a VM&lt;/li&gt;
&lt;li&gt;Boot in a &lt;code&gt;systemd-nspawn&lt;/code&gt; container&lt;/li&gt;
&lt;li&gt;Directly run a systemd service off, using systemd's &lt;code&gt;RootImage=&lt;/code&gt; unit file setting&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that in all four cases the &lt;code&gt;dm-verity&lt;/code&gt; data is automatically used
if available to ensure the image is not tampered with (yes, you read
that right, &lt;code&gt;systemd-nspawn&lt;/code&gt; and systemd's &lt;code&gt;RootImage=&lt;/code&gt; setting
automatically do &lt;code&gt;dm-verity&lt;/code&gt; these days if the image has it.)&lt;/p&gt;
&lt;h1&gt;Mode of Operation&lt;/h1&gt;
&lt;p&gt;The simplest usage of &lt;code&gt;mkosi&lt;/code&gt; is by simply invoking it without
parameters (as root):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# mkosi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without any configuration this will create a GPT disk image for you,
will call it &lt;code&gt;image.raw&lt;/code&gt; and drop it in the current directory. The
distribution used will be the same one as your host runs.&lt;/p&gt;
&lt;p&gt;Of course in most cases you want more control about how the image is
put together, i.e. select package sets, select the distribution, size
partitions and so on. Most of that you can actually specify on the
command line, but it is recommended to instead create a couple of
&lt;code&gt;mkosi.$SOMETHING&lt;/code&gt; files and directories in some directory. Then,
simply change to that directory and run &lt;code&gt;mkosi&lt;/code&gt; without any further
arguments. The tool will then look in the current working directory
for these files and directories and make use of them (similar to how
&lt;code&gt;make&lt;/code&gt; looks for a &lt;code&gt;Makefile&lt;/code&gt;‚Ä¶). Every single file/directory is
optional, but if they exist they are honored. Here's a list of the
files/directories &lt;code&gt;mkosi&lt;/code&gt; currently looks for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkosi.default&lt;/code&gt; ‚Äî This is the main configuration file, here you
 can configure what kind of image you want, which distribution, which
 packages and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkosi.extra/&lt;/code&gt; ‚Äî If this directory exists, then &lt;code&gt;mkosi&lt;/code&gt; will copy
 everything inside it into the images built. You can place arbitrary
 directory hierarchies in here, and they'll be copied over whatever is
 already in the image, after it was put together by the distribution's
 package manager. This is the best way to drop additional static files
 into the image, or override distribution-supplied ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkosi.build&lt;/code&gt; ‚Äî This executable file is supposed to be a build
 script. When it exists, &lt;code&gt;mkosi&lt;/code&gt; will build two images, one after the
 other in the mode already mentioned above: the first version is the
 build image, and may include various build-time dependencies such as
 a compiler or development headers. The build script is also copied
 into it, and then run inside it. The script should then build
 whatever shall be built and place the result in &lt;code&gt;$DESTDIR&lt;/code&gt; (don't
 worry, popular build tools such as Automake or Meson all honor
 &lt;code&gt;$DESTDIR&lt;/code&gt; anyway, so there's not much to do here explicitly). It may
 also run a test suite, or anything else you like. After the script
 finished, the build image is removed again, and a second image (the
 &lt;em&gt;final&lt;/em&gt; image) is built. This time, no development packages are
 included, and the build script is not copied into the image again ‚Äî
 however, the build artifacts from the first run (i.e. those placed in
 &lt;code&gt;$DESTDIR&lt;/code&gt;) are copied into the image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkosi.postinst&lt;/code&gt; ‚Äî If this executable script exists, it is invoked
 inside the image (inside a &lt;code&gt;systemd-nspawn&lt;/code&gt; invocation) and can
 adjust the image as it likes at a very late point in the image
 preparation. If &lt;code&gt;mkosi.build&lt;/code&gt; exists, i.e. the dual-phased
 development build process used, then this script will be invoked
 twice: once inside the build image and once inside the final
 image. The first parameter passed to the script clarifies which phase
 it is run in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkosi.nspawn&lt;/code&gt; ‚Äî If this file exists, it should contain a
 container configuration file for &lt;code&gt;systemd-nspawn&lt;/code&gt; (see
 &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.nspawn.html"&gt;systemd.nspawn(5)&lt;/a&gt;
 for details), which shall be shipped along with the final image and
 shall be included in the check-sum calculations (see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkosi.cache/&lt;/code&gt; ‚Äî If this directory exists, it is used as package
 cache directory for the builds. This directory is effectively bind
 mounted into the image at build time, in order to speed up building
 images. The package installers of the various distributions will
 place their package files here, so that subsequent runs can reuse
 them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkosi.passphrase&lt;/code&gt; ‚Äî If this file exists, it should contain a
 pass-phrase to use for the LUKS encryption (if that's enabled for the
 image built). This file should not be readable to other users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkosi.secure-boot.crt&lt;/code&gt; and &lt;code&gt;mkosi.secure-boot.key&lt;/code&gt; should be an
 X.509 key pair to use for signing the kernel and initrd for UEFI
 SecureBoot, if that's enabled.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;How to use it&lt;/h1&gt;
&lt;p&gt;So, let's come back to our most trivial example, without any of the
&lt;code&gt;mkosi.$SOMETHING&lt;/code&gt; files around:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# mkosi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As mentioned, this will create a build file &lt;code&gt;image.raw&lt;/code&gt; in the current
directory. How do we use it? Of course, we could &lt;code&gt;dd&lt;/code&gt; it onto some USB
stick and boot it on a bare-metal device. However, it's much simpler
to first run it in a container for testing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# systemd-nspawn -bi image.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there you go: the image should boot up, and just work for you.&lt;/p&gt;
&lt;p&gt;Now, let's make things more interesting. Let's still not use any of
the &lt;code&gt;mkosi.$SOMETHING&lt;/code&gt; files around:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# mkosi -t raw_btrfs --bootable -o foobar.raw
# systemd-nspawn -bi foobar.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is similar as the above, but we made three changes: it's no
longer GPT + &lt;code&gt;ext4&lt;/code&gt;, but GPT + &lt;code&gt;btrfs&lt;/code&gt;. Moreover, the system is made
bootable on UEFI systems, and finally, the output is now called
&lt;code&gt;foobar.raw&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because this system is bootable on UEFI systems, we can run it in KVM:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;qemu-kvm -m 512 -smp 2 -bios /usr/share/edk2/ovmf/OVMF_CODE.fd -drive format=raw,file=foobar.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will look very similar to the &lt;code&gt;systemd-nspawn&lt;/code&gt; invocation, except
that this uses full VM virtualization rather than container
virtualization. (Note that the way to run a UEFI qemu/kvm instance
appears to change all the time and is different on the various
distributions. It's quite annoying, and I can't really tell you what
the right qemu command line is to make this work on your system.)&lt;/p&gt;
&lt;p&gt;Of course, it's not all raw GPT disk images with &lt;code&gt;mkosi&lt;/code&gt;. Let's try
a plain directory image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# mkosi -d fedora -t directory -o quux
# systemd-nspawn -bD quux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, if you generate the image as plain directory you can't boot
it on bare-metal just like that, nor run it in a VM.&lt;/p&gt;
&lt;p&gt;A more complex command line is the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# mkosi -d fedora -t raw_squashfs --checksum --xz --package=openssh-clients --package=emacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this mode we explicitly pick Fedora as the distribution to use, ask
&lt;code&gt;mkosi&lt;/code&gt; to generate a compressed GPT image with a root squashfs,
compress the result with &lt;code&gt;xz&lt;/code&gt;, and generate a &lt;code&gt;SHA256SUMS&lt;/code&gt; file with
the hashes of the generated artifacts. The package will contain the
SSH client as well as everybody's favorite editor.&lt;/p&gt;
&lt;p&gt;Now, let's make use of the various &lt;code&gt;mkosi.$SOMETHING&lt;/code&gt; files. Let's
say we are working on some Automake-based project and want to make it
easy to generate a disk image off the development tree with the
version you are hacking on. Create a configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mkosi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Distribution&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Distribution&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fedora&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;Release&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nf"&gt;Format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;raw_btrfs&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Bootable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Packages&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;appear&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;both&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;image&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;openssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;httpd&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;appear&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;but&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;absent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;image&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;BuildPackages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gcc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;libcurl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devel&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And let's add a build script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# cat &amp;gt; mkosi.build &amp;lt;&amp;lt;EOF&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;#!/bin/sh&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;autogen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n n-Quoted"&gt;`nproc`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;install&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;EOF&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;# chmod +x mkosi.build&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And with all that in place we can now build our project into a disk image, simply by typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# mkosi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's try it out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# systemd-nspawn -bi image.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, if you do this you'll notice that building an image like
this can be quite slow. And slow build times are actively hurtful to
your productivity as a developer. Hence let's make things a bit
faster. First, let's make use of a package cache shared between runs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# mkdir mkosi.cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Building images now should already be substantially faster (and
generate less network traffic) as the packages will now be downloaded
only once and reused. However, you'll notice that unpacking all those
packages and the rest of the work is still quite slow. But &lt;code&gt;mkosi&lt;/code&gt; can
help you with that. Simply use &lt;code&gt;mkosi&lt;/code&gt;'s incremental build feature. In
this mode &lt;code&gt;mkosi&lt;/code&gt; will make a copy of the build and final images
immediately before dropping in your build sources or artifacts, so
that building an image becomes a lot quicker: instead of always
starting totally from scratch a build will now reuse everything it can
reuse from a previous run, and immediately begin with building your
sources rather than the build image to build your sources in. To
enable the incremental build feature use &lt;code&gt;-i&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# mkosi -i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that if you use this option, the package list is not updated
anymore from your distribution's servers, as the cached copy is made
after all packages are installed, and hence until you actually delete
the cached copy the distribution's network servers aren't contacted
again and no RPMs or DEBs are downloaded. This means the distribution
you use becomes "frozen in time" this way. (Which might be a bad
thing, but also a good thing, as it makes things kinda reproducible.)&lt;/p&gt;
&lt;p&gt;Of course, if you run &lt;code&gt;mkosi&lt;/code&gt; a couple of times you'll notice that it
won't overwrite the generated image when it already exists. You can
either delete the file yourself first (&lt;code&gt;rm image.raw&lt;/code&gt;) or let &lt;code&gt;mkosi&lt;/code&gt;
do it for you right before building a new image, with &lt;code&gt;mkosi -f&lt;/code&gt;. You
can also tell &lt;code&gt;mkosi&lt;/code&gt; to not only remove any such pre-existing images,
but also remove any cached copies of the incremental feature, by using
&lt;code&gt;-f&lt;/code&gt; twice.&lt;/p&gt;
&lt;p&gt;I wrote &lt;code&gt;mkosi&lt;/code&gt; originally in order to test systemd, and quickly
generate a disk image of various distributions with the most current
systemd version from git, without all that affecting my host system. I
regularly use &lt;code&gt;mkosi&lt;/code&gt; for that today, in incremental mode. The two
commands I use most in that context are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# &lt;span class="nv"&gt;mkosi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;nspawn&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;bi&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt;.&lt;span class="nv"&gt;raw&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And sometimes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# mkosi -iff &amp;amp;&amp;amp; systemd-nspawn -bi image.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The latter I use only if I want to regenerate everything based on the
very newest set of RPMs provided by Fedora, instead of a cached
snapshot of it.&lt;/p&gt;
&lt;p&gt;BTW, the &lt;code&gt;mkosi&lt;/code&gt; files for systemd are included in the systemd git
tree:
&lt;a href="https://github.com/systemd/systemd/blob/master/.mkosi/mkosi.fedora"&gt;&lt;code&gt;mkosi.default&lt;/code&gt;&lt;/a&gt;
and
&lt;a href="https://github.com/systemd/systemd/blob/master/mkosi.build"&gt;&lt;code&gt;mkosi.build&lt;/code&gt;&lt;/a&gt;. This
way, any developer who wants to quickly test something with current
systemd git, or wants to prepare a patch based on it and test it can
check out the systemd repository and simply run &lt;code&gt;mkosi&lt;/code&gt; in it and a
few minutes later he has a bootable image he can test in
&lt;code&gt;systemd-nspawn&lt;/code&gt; or KVM. &lt;code&gt;casync&lt;/code&gt; has similar files:
&lt;a href="https://github.com/systemd/casync/blob/master/mkosi.default"&gt;&lt;code&gt;mkosi.default&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://github.com/systemd/casync/blob/master/mkosi.build"&gt;&lt;code&gt;mkosi.build&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Random Interesting Features&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;As mentioned already, &lt;code&gt;mkosi&lt;/code&gt; will generate &lt;code&gt;dm-verity&lt;/code&gt; enabled
 disk images if you ask for it. For that use the &lt;code&gt;--verity&lt;/code&gt; switch on
 the command line or &lt;code&gt;Verity=&lt;/code&gt; setting in &lt;code&gt;mkosi.default&lt;/code&gt;. Of course,
 &lt;code&gt;dm-verity&lt;/code&gt; implies that the root volume is read-only. In this mode
 the top-level &lt;code&gt;dm-verity&lt;/code&gt; hash will be placed along-side the output
 disk image in a file named the same way, but with the &lt;code&gt;.roothash&lt;/code&gt;
 suffix. If the image is to be created bootable, the root hash is also
 included on the kernel command line in the &lt;code&gt;roothash=&lt;/code&gt; parameter,
 which current systemd versions can use to both find and activate the
 root partition in a &lt;code&gt;dm-verity&lt;/code&gt; protected way. BTW: it's a good idea
 to combine this &lt;code&gt;dm-verity&lt;/code&gt; mode with the &lt;code&gt;raw_squashfs&lt;/code&gt; image mode,
 to generate a genuinely protected, compressed image suitable for
 running in your IoT device.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As indicated above, &lt;code&gt;mkosi&lt;/code&gt; can automatically create a check-sum
 file &lt;code&gt;SHA256SUMS&lt;/code&gt; for you (&lt;code&gt;--checksum&lt;/code&gt;) covering all the files it
 outputs (which could be the image file itself, a matching &lt;code&gt;.nspawn&lt;/code&gt;
 file using the &lt;code&gt;mkosi.nspawn&lt;/code&gt; file mentioned above, as well as the
 &lt;code&gt;.roothash&lt;/code&gt; file for the &lt;code&gt;dm-verity&lt;/code&gt; root hash.) It can then
 optionally sign this with &lt;code&gt;gpg&lt;/code&gt; (&lt;code&gt;--sign&lt;/code&gt;). Note that &lt;code&gt;systemd&lt;/code&gt;'s
 &lt;code&gt;machinectl pull-tar&lt;/code&gt; and &lt;code&gt;machinectl pull-raw&lt;/code&gt; command can download
 these files and the &lt;code&gt;SHA256SUMS&lt;/code&gt; file automatically and verify things
 on download. With other words: what &lt;code&gt;mkosi&lt;/code&gt; outputs is perfectly
 ready for downloads using these two &lt;code&gt;systemd&lt;/code&gt; commands.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;As mentioned, &lt;code&gt;mkosi&lt;/code&gt; is big on supporting UEFI SecureBoot. To
 make use of that, place your X.509 key pair in two files
 &lt;code&gt;mkosi.secureboot.crt&lt;/code&gt; and &lt;code&gt;mkosi.secureboot.key&lt;/code&gt;, and set
 &lt;code&gt;SecureBoot=&lt;/code&gt; or &lt;code&gt;--secure-boot&lt;/code&gt;. If so, &lt;code&gt;mkosi&lt;/code&gt; will sign the
 kernel/initrd/kernel command line combination during the build. Of
 course, if you use this mode, you should also use
 &lt;code&gt;Verity=&lt;/code&gt;/&lt;code&gt;--verity=&lt;/code&gt;, otherwise the setup makes only partial
 sense. Note that &lt;code&gt;mkosi&lt;/code&gt; will not help you with actually enrolling
 the keys you use in your UEFI BIOS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mkosi&lt;/code&gt; has minimal support for GIT checkouts: when it recognizes
 it is run in a git checkout and you use the &lt;code&gt;mkosi.build&lt;/code&gt; script
 stuff, the source tree will be copied into the build image, but will
 all files excluded by &lt;code&gt;.gitignore&lt;/code&gt; removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There's support for encryption in place. Use &lt;code&gt;--encrypt=&lt;/code&gt; or
 &lt;code&gt;Encrypt=&lt;/code&gt;. Note that the UEFI ESP is never encrypted though, and the
 root partition only if explicitly requested. The &lt;code&gt;/home&lt;/code&gt; and &lt;code&gt;/srv&lt;/code&gt;
 partitions are unconditionally encrypted if that's enabled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Images may be built with all documentation removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The password for the root user and additional kernel command line
 arguments may be configured for the image to generate.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Minimum Requirements&lt;/h1&gt;
&lt;p&gt;Current &lt;code&gt;mkosi&lt;/code&gt; requires Python 3.5, and has a number of dependencies,
listed in the
&lt;a href="https://github.com/systemd/mkosi/blob/master/README.md"&gt;&lt;code&gt;README&lt;/code&gt;&lt;/a&gt;. Most
notably you need a somewhat recent systemd version to make use of its
full feature set: systemd 233. Older versions are already packaged for
various distributions, but much of what I describe above is only
available in the most recent release &lt;code&gt;mkosi 3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The UEFI SecureBoot support requires &lt;code&gt;sbsign&lt;/code&gt; which currently isn't
available in Fedora, but there's &lt;a href="https://copr.fedorainfracloud.org/coprs/msekleta/sbsigntool/"&gt;a
COPR&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Future&lt;/h1&gt;
&lt;p&gt;It is my intention to continue turning &lt;code&gt;mkosi&lt;/code&gt; into a tool suitable
for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Testing and debugging projects&lt;/li&gt;
&lt;li&gt;Building images for secure devices&lt;/li&gt;
&lt;li&gt;Building portable service images&lt;/li&gt;
&lt;li&gt;Building images for secure VMs and containers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One of the biggest goals I have for the future is to teach &lt;code&gt;mkosi&lt;/code&gt; and
&lt;code&gt;systemd&lt;/code&gt;/&lt;code&gt;sd-boot&lt;/code&gt; native support for A/B IoT style partition
setups. The idea is that the combination of &lt;code&gt;systemd&lt;/code&gt;, &lt;code&gt;casync&lt;/code&gt; and
&lt;code&gt;mkosi&lt;/code&gt; provides generic building blocks for building secure,
auto-updating devices in a generic way from, even though all pieces
may be used individually, too.&lt;/p&gt;
&lt;h1&gt;FAQ&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why are you reinventing the wheel again? This is exactly like
 &lt;code&gt;$SOMEOTHERPROJECT&lt;/code&gt;!&lt;/strong&gt; ‚Äî Well, to my knowledge there's no tool that
 integrates this nicely with your project's development tree, and can
 do &lt;code&gt;dm-verity&lt;/code&gt; and UEFI SecureBoot and all that stuff for you. So
 nope, I don't think this exactly like &lt;code&gt;$SOMEOTHERPROJECT&lt;/code&gt;, thank you
 very much.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;What about creating MBR/DOS partition images?&lt;/strong&gt; ‚Äî That's really
 out of focus to me. This is an exercise in figuring out how generic
 OSes and devices in the future should be built and an attempt to
 commoditize OS image building. And no, the future doesn't speak MBR,
 sorry. That said, I'd be quite interested in adding support for
 booting on Raspberry Pi, possibly using a hybrid approach, i.e. using
 a GPT disk label, but arranging things in a way that the Raspberry Pi
 boot protocol (which is built around DOS partition tables), can still
 work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Is this portable?&lt;/strong&gt; ‚Äî Well, depends what you mean by
 &lt;em&gt;portable&lt;/em&gt;. No, this tool runs on Linux only, and as it uses
 &lt;code&gt;systemd-nspawn&lt;/code&gt; during the build process it doesn't run on
 non-&lt;code&gt;systemd&lt;/code&gt; systems either. But then again, you should be able to
 create images for any architecture you like with it, but of course if
 you want the image bootable on bare-metal systems only systems doing
 UEFI are supported (but &lt;code&gt;systemd-nspawn&lt;/code&gt; should still work fine on
 them).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Where can I get this stuff?&lt;/strong&gt; ‚Äî Try
 &lt;a href="https://github.com/systemd/mkosi"&gt;GitHub&lt;/a&gt;. And some distributions
 carry packaged versions, but I think none of them the current v3
 yet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Is this a systemd project?&lt;/strong&gt; ‚Äî Yes, it's hosted under the
 &lt;a href="https://github.com/systemd"&gt;systemd GitHub umbrella&lt;/a&gt;. And yes,
 during run-time &lt;code&gt;systemd-nspawn&lt;/code&gt; in a current version is required. But
 no, the code-bases are separate otherwise, already because &lt;code&gt;systemd&lt;/code&gt;
 is a C project, and &lt;code&gt;mkosi&lt;/code&gt; Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requiring systemd 233 is a pretty steep requirement, no?&lt;/strong&gt; ‚Äî
 Yes, but the feature we need kind of matters (&lt;code&gt;systemd-nspawn&lt;/code&gt;'s
 &lt;code&gt;--overlay=&lt;/code&gt; switch), and again, this isn't supposed to be a tool for
 legacy systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Can I run the resulting images in LXC or Docker?&lt;/strong&gt; ‚Äî Humm, I am
 not an LXC nor Docker guy. If you select &lt;code&gt;directory&lt;/code&gt; or &lt;code&gt;subvolume&lt;/code&gt;
 as image type, LXC should be able to boot the generated images just
 fine, but I didn't try. Last time I looked, Docker doesn't permit
 running proper init systems as PID 1 inside the container, as they
 define their own run-time without intention to emulate a proper
 system. Hence, no I don't think it will work, at least not with an
 unpatched Docker version. That said, again, don't ask me questions
 about Docker, it's not precisely my area of expertise, and quite
 frankly I am not a fan. To my knowledge neither LXC nor Docker are
 able to run containers directly off GPT disk images, hence the
 various &lt;code&gt;raw_xyz&lt;/code&gt; image types are definitely not compatible with
 either. That means if you want to generate a single raw disk image
 that can be booted unmodified both in a container and on bare-metal,
 then &lt;code&gt;systemd-nspawn&lt;/code&gt; is the container manager to go for
 (specifically, its &lt;code&gt;-i&lt;/code&gt;/&lt;code&gt;--image=&lt;/code&gt; switch).&lt;/li&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Should you care? Is this a tool for you?&lt;/h1&gt;
&lt;p&gt;Well, that's up to you really.&lt;/p&gt;
&lt;p&gt;If you hack on some complex project and need a quick way to compile
and run your project on a specific current Linux distribution, then
&lt;code&gt;mkosi&lt;/code&gt; is an excellent way to do that. Simply drop the &lt;code&gt;mkosi.default&lt;/code&gt;
and &lt;code&gt;mkosi.build&lt;/code&gt; files in your &lt;code&gt;git&lt;/code&gt; tree and everything will be
easy. (And of course, as indicated above: if the project you are
hacking on happens to be called &lt;code&gt;systemd&lt;/code&gt; or &lt;code&gt;casync&lt;/code&gt; be aware that
those files are already part of the git tree ‚Äî you can just use them.)&lt;/p&gt;
&lt;p&gt;If you hack on some embedded or IoT device, then &lt;code&gt;mkosi&lt;/code&gt; is a great
choice too, as it will make it reasonably easy to generate secure
images that are protected against offline modification, by using
&lt;code&gt;dm-verity&lt;/code&gt; and UEFI SecureBoot.&lt;/p&gt;
&lt;p&gt;If you are an administrator and need a nice way to build images for a
VM or &lt;code&gt;systemd-nspawn&lt;/code&gt; container, or a portable service then &lt;code&gt;mkosi&lt;/code&gt;
is an excellent choice too.&lt;/p&gt;
&lt;p&gt;If you care about legacy computers, old distributions, non-&lt;code&gt;systemd&lt;/code&gt;
init systems, old VM managers, Docker, ‚Ä¶ then no, &lt;code&gt;mkosi&lt;/code&gt; is not for
you, but there are plenty of well-established alternatives around that
cover that nicely.&lt;/p&gt;
&lt;p&gt;And never forget: &lt;code&gt;mkosi&lt;/code&gt; is an Open Source project. We are happy to
accept your patches and other contributions.&lt;/p&gt;
&lt;p&gt;Oh, and one unrelated last thing: don't forget to &lt;a href="https://cfp.all-systems-go.io/en/ASG2017/events/new"&gt;submit your talk
proposal&lt;/a&gt;
and/or &lt;a href="https://ti.to/all-systems-go/all-systems-go"&gt;buy a ticket&lt;/a&gt; for
&lt;a href="https://all-systems-go.io/"&gt;All Systems Go! 2017 in Berlin&lt;/a&gt; ‚Äî the
conference where things like &lt;code&gt;systemd&lt;/code&gt;, &lt;code&gt;casync&lt;/code&gt; and &lt;code&gt;mkosi&lt;/code&gt; are
discussed, along with a variety of other Linux userspace projects used
for building systems.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 28 Jun 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-06-28:/blog/mkosi-a-tool-for-generating-os-images.html</guid><category>projects</category></item><item><title>All Systems Go! 2017 CfP Open</title><link>https://0pointer.net/blog/all-systems-go-2017-cfp-open.html</link><description>&lt;p&gt;&lt;large&gt;&lt;b&gt;The All Systems Go! 2017 Call for Participation is Now Open!&lt;/b&gt;&lt;/large&gt;&lt;/p&gt;
&lt;p&gt;We‚Äôd like to invite presentation proposals for &lt;i&gt;All Systems Go! 2017&lt;/i&gt;!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://all-systems-go.io/"&gt;&lt;img src="https://all-systems-go.io/img/header-graphic.png" width="600" height="195" border="5"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;All Systems Go!&lt;/i&gt; is an Open Source community conference focused on the projects and technologies at the foundation of modern Linux systems ‚Äî specifically low-level user-space technologies. Its goal is to provide a friendly and collaborative gathering place for individuals and communities working to push these technologies forward.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;All Systems Go! 2017&lt;/i&gt; takes place in &lt;b&gt;Berlin, Germany&lt;/b&gt; on &lt;b&gt;October 21st+22nd&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;All Systems Go!&lt;/i&gt; is a 2-day event with 2-3 talks happening in parallel. Full presentation slots are 30-45 minutes in length and lightning talk slots are 5-10 minutes.&lt;/p&gt;
&lt;p&gt;We are now accepting submissions for presentation proposals. In particular, we are looking for sessions including, but not limited to, the following topics:&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;Low-level container executors and infrastructure&lt;/li&gt;
&lt;li&gt;IoT and embedded OS infrastructure&lt;/li&gt;
&lt;li&gt;OS, container, IoT image delivery and updating&lt;/li&gt;
&lt;li&gt;Building Linux devices and applications&lt;/li&gt;
&lt;li&gt;Low-level desktop technologies&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;System and service management&lt;/li&gt;
&lt;li&gt;Tracing and performance measuring&lt;/li&gt;
&lt;li&gt;IPC and RPC systems&lt;/li&gt;
&lt;li&gt;Security and Sandboxing&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;While our focus is definitely more on the user-space side of things, talks about kernel projects are welcome too, as long as they have a clear and direct relevance for user-space.&lt;/p&gt;
&lt;p&gt;Please submit your proposals by &lt;b&gt;September 3rd&lt;/b&gt;. Notification of acceptance will be sent out 1-2 weeks later.&lt;/p&gt;
&lt;p&gt;To submit your proposal now please visit our &lt;a href="https://cfp.all-systems-go.io/en/ASG2017/events/new"&gt;CFP submission web site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For further information about All Systems Go! visit our &lt;a href="http://all-systems-go.io/"&gt;conference web site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;systemd.conf&lt;/i&gt; will not take place this year in lieu of &lt;i&gt;All Systems Go!&lt;/i&gt;. &lt;i&gt;All Systems Go!&lt;/i&gt; welcomes all projects that contribute to Linux user space, which, of course, includes systemd. Thus, anything you think was appropriate for submission to &lt;i&gt;systemd.conf&lt;/i&gt; is also fitting for &lt;i&gt;All Systems Go&lt;/i&gt;!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 20 Jun 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-06-20:/blog/all-systems-go-2017-cfp-open.html</guid><category>projects</category></item><item><title>casync ‚Äî A tool for distributing file system images</title><link>https://0pointer.net/blog/casync-a-tool-for-distributing-file-system-images.html</link><description>&lt;h1&gt;Introducing casync&lt;/h1&gt;
&lt;p&gt;In the past months I have been working on a new project:
&lt;a href="https://github.com/systemd/casync/"&gt;&lt;code&gt;casync&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;casync&lt;/code&gt; takes
inspiration from the popular &lt;a href="https://rsync.samba.org/"&gt;&lt;code&gt;rsync&lt;/code&gt;&lt;/a&gt; file
synchronization tool as well as the probably even more popular
&lt;a href="https://git-scm.com/"&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt; revision control system. It combines the
idea of the &lt;code&gt;rsync&lt;/code&gt; algorithm with the idea of &lt;code&gt;git&lt;/code&gt;-style
content-addressable file systems, and creates a new system for
efficiently storing and delivering file system images, optimized for
high-frequency update cycles over the Internet. Its current focus is
on delivering IoT, container, VM, application, portable service or OS
images, but I hope to extend it later in a generic fashion to become
useful for backups and home directory synchronization as well (but
more about that later).&lt;/p&gt;
&lt;p&gt;The basic technological building blocks &lt;code&gt;casync&lt;/code&gt; is built from are
neither new nor particularly innovative (at least not anymore),
however the way &lt;code&gt;casync&lt;/code&gt; combines them is different from existing tools,
and that's what makes it useful for a variety of use-cases that other
tools can't cover that well.&lt;/p&gt;
&lt;h1&gt;Why?&lt;/h1&gt;
&lt;p&gt;I created &lt;code&gt;casync&lt;/code&gt; after studying how today's popular tools store and
deliver file system images. To briefly name a few: Docker has a
layered tarball approach,
&lt;a href="https://ostree.readthedocs.io/en/latest/"&gt;OSTree&lt;/a&gt; serves the
individual files directly via HTTP and maintains packed deltas to
speed up updates, while other systems operate on the block layer and
place raw &lt;code&gt;squashfs&lt;/code&gt; images (or other archival file systems, such as
IS09660) for download on HTTP shares (in the better cases combined
with &lt;a href="http://zsync.moria.org.uk/"&gt;&lt;code&gt;zsync&lt;/code&gt;&lt;/a&gt; data).&lt;/p&gt;
&lt;p&gt;Neither of these approaches appeared fully convincing to me when used
in high-frequency update cycle systems. In such systems, it is
important to optimize towards a couple of goals:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Most importantly, make updates cheap traffic-wise (for this most tools use image deltas of some form)&lt;/li&gt;
&lt;li&gt;Put boundaries on disk space usage on servers (keeping deltas between all version combinations clients might want to run updates between, would suggest keeping an exponentially growing amount of deltas on servers)&lt;/li&gt;
&lt;li&gt;Put boundaries on disk space usage on clients&lt;/li&gt;
&lt;li&gt;Be friendly to Content Delivery Networks (CDNs), i.e. serve neither too many small nor too many overly large files, and only require the most basic form of HTTP. Provide the repository administrator with high-level knobs to tune the average file size delivered.&lt;/li&gt;
&lt;li&gt;Simplicity to use for users, repository administrators and developers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I don't think any of the tools mentioned above are really good on more
than a small subset of these points.&lt;/p&gt;
&lt;p&gt;Specifically: Docker's layered tarball approach dumps the "delta"
question onto the feet of the image creators: the best way to make
your image downloads minimal is basing your work on an existing image
clients might already have, and inherit its resources, maintaining full
history. Here, revision control (a tool for the developer) is
intermingled with update management (a concept for optimizing
production delivery). As container histories grow individual deltas
are likely to stay small, but on the other hand a brand-new deployment
usually requires downloading the full history onto the deployment
system, even though there's no use for it there, and likely requires
substantially more disk space and download sizes.&lt;/p&gt;
&lt;p&gt;OSTree's serving of individual files is unfriendly to CDNs (as many
small files in file trees cause an explosion of HTTP GET
requests). To counter that OSTree supports placing pre-calculated
delta images between selected revisions on the delivery servers, which
means a certain amount of revision management, that leaks into the
clients.&lt;/p&gt;
&lt;p&gt;Delivering direct &lt;code&gt;squashfs&lt;/code&gt; (or other file system) images is almost
beautifully simple, but of course means every update requires a full
download of the newest image, which is both bad for disk usage and
generated traffic. Enhancing it with &lt;code&gt;zsync&lt;/code&gt; makes this a much better
option, as it can reduce generated traffic substantially at very
little cost of history/meta-data (no explicit deltas between a large
number of versions need to be prepared server side). On the other hand
server requirements in disk space and functionality (HTTP Range
requests) are minus points for the use-case I am interested in.&lt;/p&gt;
&lt;p&gt;(Note: all the mentioned systems have great properties, and it's not
my intention to badmouth them. They only point I am trying to make is
that for the use case I care about ‚Äî file system image delivery with
high high frequency update-cycles ‚Äî each system comes with certain
drawbacks.)&lt;/p&gt;
&lt;h1&gt;Security &amp;amp; Reproducibility&lt;/h1&gt;
&lt;p&gt;Besides the issues pointed out above I wasn't happy with the security
and reproducibility properties of these systems. In today's world
where security breaches involving hacking and breaking into connected
systems happen every day, an image delivery system that cannot make
strong guarantees regarding data integrity is out of
date. Specifically, the tarball format is famously nondeterministic:
the very same file tree can result in any number of different
valid serializations depending on the tool used, its version and the
underlying OS and file system. Some &lt;code&gt;tar&lt;/code&gt; implementations attempt to
correct that by guaranteeing that each file tree maps to exactly
one valid serialization, but such a property is always only specific
to the tool used. I strongly believe that any good update system must
guarantee on every single link of the chain that there's only one
valid representation of the data to deliver, that can easily be
verified.&lt;/p&gt;
&lt;h1&gt;What casync Is&lt;/h1&gt;
&lt;p&gt;So much about the background why I created &lt;code&gt;casync&lt;/code&gt;. Now, let's have a
look what &lt;code&gt;casync&lt;/code&gt; actually is like, and what it does. Here's the brief
technical overview:&lt;/p&gt;
&lt;p&gt;Encoding: Let's take a large linear data stream, split it into
variable-sized chunks (the size of each being a function of the
chunk's contents), and store these chunks in individual, compressed
files in some directory, each file named after a strong hash value of
its contents, so that the hash value may be used to as key for
retrieving the full chunk data. Let's call this directory a "chunk
store". At the same time, generate a "chunk index" file that lists
these chunk hash values plus their respective chunk sizes in a simple
linear array. The chunking algorithm is supposed to create variable,
but similarly sized chunks from the data stream, and do so in a way
that the same data results in the same chunks even if placed at
varying offsets. For more information &lt;a href="https://moinakg.wordpress.com/2013/06/22/high-performance-content-defined-chunking/"&gt;see this blog
story&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Decoding: Let's take the chunk index file, and reassemble the large
linear data stream by concatenating the uncompressed chunks retrieved
from the chunk store, keyed by the listed chunk hash values.&lt;/p&gt;
&lt;p&gt;As an extra twist, we introduce a well-defined, reproducible,
random-access serialization format for file trees (think: a more
modern &lt;code&gt;tar&lt;/code&gt;), to permit efficient, stable storage of complete file
trees in the system, simply by serializing them and then passing them
into the encoding step explained above.&lt;/p&gt;
&lt;p&gt;Finally, let's put all this on the network: for each image you want to
deliver, generate a chunk index file and place it on an HTTP
server. Do the same with the chunk store, and share it between the
various index files you intend to deliver.&lt;/p&gt;
&lt;p&gt;Why bother with all of this? Streams with similar contents will result
in mostly the same chunk files in the chunk store. This means it is
very efficient to store many related versions of a data stream in the
same chunk store, thus minimizing disk usage. Moreover, when
transferring linear data streams chunks already known on the receiving
side can be made use of, thus minimizing network traffic.&lt;/p&gt;
&lt;p&gt;Why is this different from &lt;code&gt;rsync&lt;/code&gt; or OSTree, or similar tools? Well,
one major difference between &lt;code&gt;casync&lt;/code&gt; and those tools is that we
remove file boundaries before chunking things up. This means that
small files are lumped together with their siblings and large files
are chopped into pieces, which permits us to recognize similarities in
files and directories beyond file boundaries, and makes sure our chunk
sizes are pretty evenly distributed, without the file boundaries
affecting them.&lt;/p&gt;
&lt;p&gt;The "chunking" algorithm is based on a the buzhash rolling hash
function. SHA256 is used as strong hash function to generate digests
of the chunks. xz is used to compress the individual chunks.&lt;/p&gt;
&lt;p&gt;Here's a diagram, hopefully explaining a bit how the encoding process
works, wasn't it for my crappy drawing skills:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/public/casync.png"&gt;&lt;img src="http://0pointer.de/public/casync.png" width="800" height="862" alt="Diagram"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The diagram shows the encoding process from top to bottom. It starts
with a block device or a file tree, which is then serialized and
chunked up into variable sized blocks. The compressed chunks are then
placed in the chunk store, while a chunk index file is written listing
the chunk hashes in order. (The original SVG of this graphic may be
found &lt;a href="http://0pointer.de/public/casync.svg"&gt;here&lt;/a&gt;.)&lt;/p&gt;
&lt;h1&gt;Details&lt;/h1&gt;
&lt;p&gt;Note that &lt;code&gt;casync&lt;/code&gt; operates on two different layers, depending on the
use-case of the user:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You may use it on the block layer. In this case the raw block data
on disk is taken as-is, read directly from the block device, split
into chunks as described above, compressed, stored and delivered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You may use it on the file system layer. In this case, the
file tree serialization format mentioned above comes into play:
the file tree is serialized depth-first (much like &lt;code&gt;tar&lt;/code&gt; would do
it) and then split into chunks, compressed, stored and delivered.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The fact that it may be used on both the block and file system layer
opens it up for a variety of different use-cases. In the VM and IoT
ecosystems shipping images as block-level serializations is more
common, while in the container and application world file-system-level
serializations are more typically used.&lt;/p&gt;
&lt;p&gt;Chunk index files referring to block-layer serializations carry the
&lt;code&gt;.caibx&lt;/code&gt; suffix, while chunk index files referring to file system
serializations carry the &lt;code&gt;.caidx&lt;/code&gt; suffix. Note that you may also use
&lt;code&gt;casync&lt;/code&gt; as direct &lt;code&gt;tar&lt;/code&gt; replacement, i.e. without the chunking, just
generating the plain linear file tree serialization. Such files
carry the &lt;code&gt;.catar&lt;/code&gt; suffix. Internally &lt;code&gt;.caibx&lt;/code&gt; are identical to
&lt;code&gt;.caidx&lt;/code&gt; files, the only difference is semantical: &lt;code&gt;.caidx&lt;/code&gt; files
describe a &lt;code&gt;.catar&lt;/code&gt; file, while &lt;code&gt;.caibx&lt;/code&gt; files may describe any other
blob. Finally, chunk stores are directories carrying the &lt;code&gt;.castr&lt;/code&gt;
suffix.&lt;/p&gt;
&lt;h1&gt;Features&lt;/h1&gt;
&lt;p&gt;Here are a couple of other features &lt;code&gt;casync&lt;/code&gt; has:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When downloading a new image you may use &lt;code&gt;casync&lt;/code&gt;'s &lt;code&gt;--seed=&lt;/code&gt;
feature: each block device, file, or directory specified is processed
using the same chunking logic described above, and is used as
preferred source when putting together the downloaded image locally,
avoiding network transfer of it. This of course is useful whenever
updating an image: simply specify one or more old versions as seed and
only download the chunks that truly changed since then. Note that
using seeds requires no history relationship between seed and the new
image to download. This has major benefits: you can even use it to
speed up downloads of relatively foreign and unrelated data. For
example, when downloading a container image built using Ubuntu you can
use your Fedora host OS tree in &lt;code&gt;/usr&lt;/code&gt; as seed, and &lt;code&gt;casync&lt;/code&gt; will
automatically use whatever it can from that tree, for example timezone
and locale data that tends to be identical between
distributions. Example: &lt;code&gt;casync extract
http://example.com/myimage.caibx --seed=/dev/sda1 /dev/sda2&lt;/code&gt;. This
will place the block-layer image described by the indicated URL in the
&lt;code&gt;/dev/sda2&lt;/code&gt; partition, using the existing &lt;code&gt;/dev/sda1&lt;/code&gt; data as seeding
source. An invocation like this could be typically used by IoT systems
with an A/B partition setup. Example 2: &lt;code&gt;casync extract
http://example.com/mycontainer-v3.caidx --seed=/srv/container-v1
--seed=/srv/container-v2 /src/container-v3&lt;/code&gt;, is very similar but
operates on the file system layer, and uses two old container versions
to seed the new version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When operating on the file system level, the user has fine-grained
control on the meta-data included in the serialization. This is
relevant since different use-cases tend to require a different set of
saved/restored meta-data. For example, when shipping OS images, file
access bits/ACLs and ownership matter, while file modification times
hurt. When doing personal backups OTOH file ownership matters little
but file modification times are important. Moreover different backing
file systems support different feature sets, and storing more
information than necessary might make it impossible to validate a tree
against an image if the meta-data cannot be replayed in full. Due to
this, &lt;code&gt;casync&lt;/code&gt; provides a set of &lt;code&gt;--with=&lt;/code&gt; and &lt;code&gt;--without=&lt;/code&gt; parameters
that allow fine-grained control of the data stored in the file tree
serialization, including the granularity of modification times and
more. The precise set of selected meta-data features is also always
part of the serialization, so that seeding can work correctly and
automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;casync&lt;/code&gt; tries to be as accurate as possible when storing file
system meta-data. This means that besides the usual baseline of file
meta-data (file ownership and access bits), and more advanced features
(extended attributes, ACLs, file capabilities) a number of more exotic
data is stored as well, including Linux
&lt;a href="https://linux.die.net/man/1/chattr"&gt;chattr(1)&lt;/a&gt; file attributes, as
well as &lt;a href="https://en.wikipedia.org/wiki/File_attribute#DOS_and_Windows"&gt;FAT file
attributes&lt;/a&gt;
(you may wonder why the latter? ‚Äî EFI is FAT, and &lt;code&gt;/efi&lt;/code&gt; is part of
the comprehensive serialization of any host). In the future I intend
to extend this further, for example storing &lt;code&gt;btrfs&lt;/code&gt; sub-volume
information where available. Note that as described above every single
type of meta-data may be turned off and on individually, hence if you
don't need FAT file bits (and I figure it's pretty likely you don't),
then they won't be stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user creating &lt;code&gt;.caidx&lt;/code&gt; or &lt;code&gt;.caibx&lt;/code&gt; files may control the desired
average chunk length (before compression) freely, using the
&lt;code&gt;--chunk-size=&lt;/code&gt; parameter. Smaller chunks increase the number of
generated files in the chunk store and increase HTTP GET load on the
server, but also ensure that sharing between similar images is
improved, as identical patterns in the images stored are more likely
to be recognized. By default &lt;code&gt;casync&lt;/code&gt; will use a 64K average chunk
size. Tweaking this can be particularly useful when adapting the
system to specific CDNs, or when delivering compressed disk images
such as &lt;code&gt;squashfs&lt;/code&gt; (see below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emphasis is placed on making all invocations reproducible,
well-defined and strictly deterministic. As mentioned above this is a
requirement to reach the intended security guarantees, but is also
useful for many other use-cases. For example, the &lt;code&gt;casync digest&lt;/code&gt;
command may be used to calculate a hash value identifying a specific
directory in all desired detail (use &lt;code&gt;--with=&lt;/code&gt; and &lt;code&gt;--without&lt;/code&gt; to pick
the desired detail). Moreover the &lt;code&gt;casync mtree&lt;/code&gt; command may be used
to generate a BSD &lt;a href="https://www.freebsd.org/cgi/man.cgi?mtree(5)"&gt;mtree(5)&lt;/a&gt; compatible manifest of a directory tree,
&lt;code&gt;.caidx&lt;/code&gt; or &lt;code&gt;.catar&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The file system serialization format is nicely composable. By this
I mean that the serialization of a file tree is the concatenation of
the serializations of all files and file sub-trees located at the
top of the tree, with zero meta-data references from any of these
serializations into the others. This property is essential to ensure
maximum reuse of chunks when similar trees are serialized.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When extracting file trees or disk image files, &lt;code&gt;casync&lt;/code&gt;
will automatically create
&lt;a href="http://man7.org/linux/man-pages/man2/ioctl_ficlonerange.2.html"&gt;reflinks&lt;/a&gt;
from any specified seeds if the underlying file system supports it
(such as &lt;code&gt;btrfs&lt;/code&gt;, &lt;code&gt;ocfs&lt;/code&gt;, and future &lt;code&gt;xfs&lt;/code&gt;). After all, instead of
copying the desired data from the seed, we can just tell the file
system to link up the relevant blocks. This works both when extracting
&lt;code&gt;.caidx&lt;/code&gt; and &lt;code&gt;.caibx&lt;/code&gt; files ‚Äî the latter of course only when the
extracted disk image is placed in a regular raw image file on disk,
rather than directly on a plain block device, as plain block devices
do not know the concept of reflinks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally, when extracting file trees, &lt;code&gt;casync&lt;/code&gt; can
create traditional UNIX hard-links for identical files in specified
seeds (&lt;code&gt;--hardlink=yes&lt;/code&gt;). This works on all UNIX file systems, and can
save substantial amounts of disk space. However, this only works for
very specific use-cases where disk images are considered read-only
after extraction, as any changes made to one tree will propagate to
all other trees sharing the same hard-linked files, as that's the
nature of hard-links. In this mode, &lt;code&gt;casync&lt;/code&gt; exposes OSTree-like
behavior, which is built heavily around read-only hard-link trees.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;casync&lt;/code&gt; tries to be smart when choosing what to include in file
system images. Implicitly, file systems such as procfs and sysfs are
excluded from serialization, as they expose API objects, not real
files. Moreover, the "nodump" (&lt;code&gt;+d&lt;/code&gt;)
&lt;a href="https://linux.die.net/man/1/chattr"&gt;chattr(1)&lt;/a&gt; flag is honored by
default, permitting users to mark files to exclude from serialization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When creating and extracting file trees &lt;code&gt;casync&lt;/code&gt; may apply an
automatic or explicit UID/GID shift. This is particularly useful when
transferring container image for use with Linux user name-spacing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In addition to local operation, &lt;code&gt;casync&lt;/code&gt; currently supports HTTP,
HTTPS, FTP and ssh natively for downloading chunk index files and
chunks (the ssh mode requires installing &lt;code&gt;casync&lt;/code&gt; on the remote host,
though, but an sftp mode not requiring that should be easy to
add). When creating index files or chunks, only ssh is supported as
remote back-end.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When operating on block-layer images, you may expose locally or
remotely stored images as local block devices. Example: &lt;code&gt;casync mkdev
http://example.com/myimage.caibx&lt;/code&gt; exposes the disk image described by
the indicated URL as local block device in &lt;code&gt;/dev&lt;/code&gt;, which you then may
use the usual block device tools on, such as mount or fdisk (only
read-only though). Chunks are downloaded on access with high priority,
and at low priority when idle in the background. Note that in this
mode, &lt;code&gt;casync&lt;/code&gt; also plays a role similar to "dm-verity", as all blocks
are validated against the strong digests in the chunk index file
before passing them on to the kernel's block layer. This feature is
implemented though Linux' NBD kernel facility.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similar, when operating on file-system-layer images, you may mount
locally or remotely stored images as regular file systems. Example:
&lt;code&gt;casync mount http://example.com/mytree.caidx /srv/mytree&lt;/code&gt; mounts the
file tree image described by the indicated URL as a local directory
&lt;code&gt;/srv/mytree&lt;/code&gt;. This feature is implemented though Linux' FUSE kernel
facility. Note that special care is taken that the images exposed this
way can be packed up again with &lt;code&gt;casync make&lt;/code&gt; and are guaranteed to
return the bit-by-bit exact same serialization again that it was
mounted from. No data is lost or changed while passing things through
FUSE (OK, strictly speaking this is a lie, we do lose ACLs, but that's
hopefully just a temporary gap to be fixed soon).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In IoT A/B fixed size partition setups the file systems placed in
the two partitions are usually much shorter than the partition size,
in order to keep some room for later, larger updates. &lt;code&gt;casync&lt;/code&gt; is able
to analyze the super-block of a number of common file systems in order
to determine the actual size of a file system stored on a block
device, so that writing a file system to such a partition and reading
it back again will result in reproducible data. Moreover this speeds
up the seeding process, as there's little point in seeding the
white-space after the file system within the partition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Example Command Lines&lt;/h1&gt;
&lt;p&gt;Here's how to use &lt;code&gt;casync&lt;/code&gt;, explained with a few examples:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync make foobar.caidx /some/directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create a chunk index file &lt;code&gt;foobar.caidx&lt;/code&gt; in the local
directory, and populate the chunk store directory &lt;code&gt;default.castr&lt;/code&gt;
located next to it with the chunks of the serialization (you can
change the name for the store directory with &lt;code&gt;--store=&lt;/code&gt; if you
like). This command operates on the file-system level. A similar
command operating on the block level:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync make foobar.caibx /dev/sda1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command creates a chunk index file &lt;code&gt;foobar.caibx&lt;/code&gt; in the local
directory describing the current contents of the &lt;code&gt;/dev/sda1&lt;/code&gt; block
device, and populates &lt;code&gt;default.castr&lt;/code&gt; in the same way as above. Note
that you may as well read a raw disk image from a file instead of a
block device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync make foobar.caibx myimage.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To reconstruct the original file tree from the &lt;code&gt;.caidx&lt;/code&gt; file and
the chunk store of the first command, use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync extract foobar.caidx /some/other/directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And similar for the block-layer version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync extract foobar.caibx /dev/sdb1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or, to extract the block-layer version into a raw disk image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync extract foobar.caibx myotherimage.raw
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above are the most basic commands, operating on local data
only. Now let's make this more interesting, and reference remote
resources:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync extract http://example.com/images/foobar.caidx /some/other/directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This extracts the specified &lt;code&gt;.caidx&lt;/code&gt; onto a local directory. This of
course assumes that &lt;code&gt;foobar.caidx&lt;/code&gt; was uploaded to the HTTP server in
the first place, along with the chunk store. You can use any command
you like to accomplish that, for example &lt;code&gt;scp&lt;/code&gt; or
&lt;code&gt;rsync&lt;/code&gt;. Alternatively, you can let &lt;code&gt;casync&lt;/code&gt; do this directly when
generating the chunk index:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync make ssh.example.com:images/foobar.caidx /some/directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will use ssh to connect to the &lt;code&gt;ssh.example.com&lt;/code&gt; server, and then
places the &lt;code&gt;.caidx&lt;/code&gt; file and the chunks on it. Note that this mode of
operation is "smart": this scheme will only upload chunks currently
missing on the server side, and not re-transmit what already is
available.&lt;/p&gt;
&lt;p&gt;Note that you can always configure the precise path or URL of the
chunk store via the &lt;code&gt;--store=&lt;/code&gt; option. If you do not do that, then the
store path is automatically derived from the path or URL: the last
component of the path or URL is replaced by &lt;code&gt;default.castr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, when extracting &lt;code&gt;.caidx&lt;/code&gt; or &lt;code&gt;.caibx&lt;/code&gt; files from remote sources,
using a local seed is advisable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync extract http://example.com/images/foobar.caidx --seed&lt;span class="o"&gt;=&lt;/span&gt;/some/exising/directory /some/other/directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or on the block layer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync extract http://example.com/images/foobar.caibx --seed&lt;span class="o"&gt;=&lt;/span&gt;/dev/sda1 /dev/sdb2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When creating chunk indexes on the file system layer &lt;code&gt;casync&lt;/code&gt; will by
default store meta-data as accurately as possible. Let's create a chunk
index with reduced meta-data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync make foobar.caidx --with&lt;span class="o"&gt;=&lt;/span&gt;sec-time --with&lt;span class="o"&gt;=&lt;/span&gt;symlinks --with&lt;span class="o"&gt;=&lt;/span&gt;read-only /some/dir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command will create a chunk index for a file tree serialization
that has three features above the absolute baseline supported: 1s
granularity time-stamps, symbolic links and a single read-only bit. In
this mode, all the other meta-data bits are not stored, including
nanosecond time-stamps, full UNIX permission bits, file ownership or
even ACLs or extended attributes.&lt;/p&gt;
&lt;p&gt;Now let's make a &lt;code&gt;.caidx&lt;/code&gt; file available locally as a mounted file
system, without extracting it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync mount http://example.comf/images/foobar.caidx /mnt/foobar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And similar, let's make a &lt;code&gt;.caibx&lt;/code&gt; file available locally as a block device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync mkdev http://example.comf/images/foobar.caibx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create a block device in &lt;code&gt;/dev&lt;/code&gt; and print the used device
node path to STDOUT.&lt;/p&gt;
&lt;p&gt;As mentioned, &lt;code&gt;casync&lt;/code&gt; is big about reproducibility. Let's make use of
that to calculate the a digest identifying a very specific version of
a file tree:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync digest .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This digest will include all meta-data bits &lt;code&gt;casync&lt;/code&gt; and the underlying
file system know about. Usually, to make this useful you want to
configure exactly what meta-data to include:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync digest --with&lt;span class="o"&gt;=&lt;/span&gt;unix .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This makes use of the &lt;code&gt;--with=unix&lt;/code&gt; shortcut for selecting meta-data
fields. Specifying &lt;code&gt;--with-unix=&lt;/code&gt; selects all meta-data that
traditional UNIX file systems support. It is a shortcut for writing out:
&lt;code&gt;--with=16bit-uids --with=permissions --with=sec-time --with=symlinks
--with=device-nodes --with=fifos --with=sockets&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that when calculating digests or creating chunk indexes you may
also use the negative &lt;code&gt;--without=&lt;/code&gt; option to remove specific features
but start from the most precise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync digest --without&lt;span class="o"&gt;=&lt;/span&gt;flag-immutable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This generates a digest with the most accurate meta-data, but leaves
one feature out: &lt;a href="https://linux.die.net/man/1/chattr"&gt;chattr(1)&lt;/a&gt;'s
immutable (&lt;code&gt;+i&lt;/code&gt;) file flag.&lt;/p&gt;
&lt;p&gt;To list the contents of a &lt;code&gt;.caidx&lt;/code&gt; file use a command like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync list http://example.com/images/foobar.caidx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ casync mtree http://example.com/images/foobar.caidx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The former command will generate a brief list of files and
directories, not too different from &lt;code&gt;tar t&lt;/code&gt; or &lt;code&gt;ls -al&lt;/code&gt; in its
output. The latter command will generate a BSD
&lt;a href="https://www.freebsd.org/cgi/man.cgi?mtree(5)"&gt;mtree(5)&lt;/a&gt; compatible
manifest. Note that &lt;code&gt;casync&lt;/code&gt; actually stores substantially more file
meta-data than &lt;code&gt;mtree&lt;/code&gt; files can express, though.&lt;/p&gt;
&lt;h1&gt;What casync isn't&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;casync&lt;/code&gt; is not an attempt to minimize serialization and downloaded
deltas to the extreme. Instead, the tool is supposed to find a good
middle ground, that is good on traffic and disk space, but not at the
price of convenience or requiring explicit revision control. If you
care about updates that are absolutely minimal, there are binary delta
systems around that might be an option for you, such as &lt;a href="https://www.chromium.org/developers/design-documents/software-updates-courgette"&gt;Google's
Courgette&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;casync&lt;/code&gt; is not a replacement for &lt;code&gt;rsync&lt;/code&gt;, or &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;zsync&lt;/code&gt; or
anything like that. They have very different use-cases and
semantics. For example, &lt;code&gt;rsync&lt;/code&gt; permits you to directly synchronize two
file trees remotely. &lt;code&gt;casync&lt;/code&gt; just cannot do that, and it is unlikely
it every will.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Where next?&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;casync&lt;/code&gt; is supposed to be a generic synchronization tool. Its primary
focus for now is delivery of OS images, but I'd like to make it useful
for a couple other use-cases, too. Specifically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To make the tool useful for backups, encryption is missing. I have
pretty concrete plans how to add that. When implemented, the tool
might become an alternative to &lt;a href="https://restic.github.io/"&gt;&lt;code&gt;restic&lt;/code&gt;&lt;/a&gt;,
&lt;a href="https://borgbackup.readthedocs.io/"&gt;BorgBackup&lt;/a&gt; or
&lt;a href="https://www.tarsnap.com/"&gt;&lt;code&gt;tarsnap&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Right now, if you want to deploy &lt;code&gt;casync&lt;/code&gt; in real-life, you still
need to validate the downloaded &lt;code&gt;.caidx&lt;/code&gt; or &lt;code&gt;.caibx&lt;/code&gt; file yourself, for
example with some &lt;code&gt;gpg&lt;/code&gt; signature. It is my intention to integrate with
&lt;code&gt;gpg&lt;/code&gt; in a minimal way so that signing and verifying chunk index files
is done automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the longer run, I'd like to build an automatic synchronizer for
&lt;code&gt;$HOME&lt;/code&gt; between systems from this. Each &lt;code&gt;$HOME&lt;/code&gt; instance would be
stored automatically in regular intervals in the cloud using casync,
and conflicts would be resolved locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;casync&lt;/code&gt; is written in a shared library style, but it is not yet
built as one. Specifically this means that almost all of &lt;code&gt;casync&lt;/code&gt;'s
functionality is supposed to be available as C API soon, and
applications can process &lt;code&gt;casync&lt;/code&gt; files on every level. It is my
intention to make this library useful enough so that it will be easy
to write a module for GNOME's &lt;code&gt;gvfs&lt;/code&gt; subsystem in order to make remote
or local &lt;code&gt;.caidx&lt;/code&gt; files directly available to applications (as an
alternative to &lt;code&gt;casync mount&lt;/code&gt;). In fact the idea is to make this all
flexible enough that even the remoting back-ends can be replaced
easily, for example to replace &lt;code&gt;casync&lt;/code&gt;'s default HTTP/HTTPS back-ends
built on CURL with GNOME's own HTTP implementation, in order to share
cookies, certificates, ‚Ä¶ There's also an alternative method to
integrate with &lt;code&gt;casync&lt;/code&gt; in place already: simply invoke &lt;code&gt;casync&lt;/code&gt; as a
sub-process. &lt;code&gt;casync&lt;/code&gt; will inform you about a certain set of state
changes using a mechanism compatible with
&lt;a href="https://www.freedesktop.org/software/systemd/man/sd_notify.html"&gt;sd_notify(3)&lt;/a&gt;. In
future it will also propagate progress data this way and more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I intend to a add a new seeding back-end that sources chunks from
the local network. After downloading the new &lt;code&gt;.caidx&lt;/code&gt; file off the
Internet &lt;code&gt;casync&lt;/code&gt; would then search for the listed chunks on the local
network first before retrieving them from the Internet. This should
speed things up on all installations that have multiple similar
systems deployed in the same network.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Further plans are listed tersely in the
&lt;a href="https://github.com/systemd/casync/blob/master/TODO"&gt;TODO&lt;/a&gt; file.&lt;/p&gt;
&lt;h1&gt;FAQ:&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is this a systemd project?&lt;/em&gt;&lt;/strong&gt; ‚Äî &lt;code&gt;casync&lt;/code&gt; is hosted under the
github &lt;a href="https://github.com/systemd/systemd"&gt;systemd&lt;/a&gt; umbrella, and the
projects share the same coding style. However, the code-bases are
distinct and without interdependencies, and &lt;code&gt;casync&lt;/code&gt; works fine both
on systemd systems and systems without it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is &lt;code&gt;casync&lt;/code&gt; portable?&lt;/em&gt;&lt;/strong&gt; ‚Äî At the moment: no. I only run Linux and
that's what I code for. That said, I am open to accepting portability
patches (unlike for systemd, which doesn't really make sense on
non-Linux systems), as long as they don't interfere too much with the
way &lt;code&gt;casync&lt;/code&gt; works. Specifically this means that I am not too
enthusiastic about merging portability patches for OSes lacking the
&lt;a href="http://man7.org/linux/man-pages/man2/open.2.html"&gt;openat(2)&lt;/a&gt; family
of APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Does &lt;code&gt;casync&lt;/code&gt; require reflink-capable file systems to work, such
as &lt;code&gt;btrfs&lt;/code&gt;?&lt;/em&gt;&lt;/strong&gt; ‚Äî No it doesn't. The reflink magic in &lt;code&gt;casync&lt;/code&gt; is
employed when the file system permits it, and it's good to have it,
but it's not a requirement, and &lt;code&gt;casync&lt;/code&gt; will implicitly fall back to
copying when it isn't available. Note that &lt;code&gt;casync&lt;/code&gt; supports a number
of file system features on a variety of file systems that aren't
available everywhere, for example FAT's system/hidden file flags or
&lt;code&gt;xfs&lt;/code&gt;'s &lt;code&gt;projinherit&lt;/code&gt; file flag.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Is &lt;code&gt;casync&lt;/code&gt; stable?&lt;/em&gt;&lt;/strong&gt; ‚Äî I just tagged the first, initial
release. While I have been working on it since quite some time and it
is quite featureful, this is the first time I advertise it publicly,
and it hence received very little testing outside of its own test
suite. I am also not fully ready to commit to the stability of the
current serialization or chunk index format. I don't see any breakages
coming for it though. &lt;code&gt;casync&lt;/code&gt; is pretty light on documentation right
now, and does not even have a man page. I also intend to correct that
soon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Are the &lt;code&gt;.caidx&lt;/code&gt;/&lt;code&gt;.caibx&lt;/code&gt; and &lt;code&gt;.catar&lt;/code&gt; file formats open and
documented?&lt;/em&gt;&lt;/strong&gt; ‚Äî &lt;code&gt;casync&lt;/code&gt; is Open Source, so if you want to know the
precise format, have a look at the sources for now. It's definitely my
intention to add comprehensive docs for both formats however. Don't
forget this is just the initial version right now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;code&gt;casync&lt;/code&gt; is just like &lt;code&gt;$SOMEOTHERTOOL&lt;/code&gt;! Why are you reinventing
the wheel (again)?&lt;/em&gt;&lt;/strong&gt; ‚Äî Well, because &lt;code&gt;casync&lt;/code&gt; &lt;em&gt;isn't&lt;/em&gt; "just like" some
other tool. I am pretty sure I did my homework, and that there is no
tool just like &lt;code&gt;casync&lt;/code&gt; right now. The tools coming closest are probably
&lt;code&gt;rsync&lt;/code&gt;, &lt;code&gt;zsync&lt;/code&gt;, &lt;code&gt;tarsnap&lt;/code&gt;, &lt;code&gt;restic&lt;/code&gt;, but they are quite different beasts
each.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Why did you invent your own serialization format for file trees?
Why don't you just use &lt;code&gt;tar&lt;/code&gt;?&lt;/em&gt;&lt;/strong&gt; ‚Äî That's a good question, and other
systems ‚Äî most prominently &lt;code&gt;tarsnap&lt;/code&gt; ‚Äî do that. However, as mentioned
above &lt;code&gt;tar&lt;/code&gt; doesn't enforce reproducibility. It also doesn't really do
random access: if you want to access some specific file you need to
read every single byte stored before it in the &lt;code&gt;tar&lt;/code&gt; archive to find
it, which is of course very expensive. The serialization &lt;code&gt;casync&lt;/code&gt;
implements places a focus on reproducibility, random access, and
meta-data control. Much like traditional &lt;code&gt;tar&lt;/code&gt; it can still be
generated and extracted in a stream fashion though.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Does &lt;code&gt;casync&lt;/code&gt; save/restore SELinux/SMACK file labels?&lt;/em&gt;&lt;/strong&gt; ‚Äî At the
moment not. That's not because I wouldn't want it to, but simply
because I am not a guru of either of these systems, and didn't want to
implement something I do not fully grok nor can test. If you look at
the sources you'll find that there's already some definitions in place
that keep room for them though. I'd be delighted to accept a patch
implementing this fully.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What about delivering &lt;code&gt;squashfs&lt;/code&gt; images? How well does chunking
work on compressed serializations?&lt;/em&gt;&lt;/strong&gt; ‚Äì That's a very good point!
Usually, if you apply the a chunking algorithm to a compressed data
stream (let's say a &lt;code&gt;tar.gz&lt;/code&gt; file), then changing a single bit at the
front will propagate into the entire remainder of the file, so that
minimal changes will explode into major changes. Thankfully this
doesn't apply that strictly to &lt;code&gt;squashfs&lt;/code&gt; images, as it provides
random access to files and directories and thus breaks up the
compression streams in regular intervals to make seeking easy. This
fact is beneficial for systems employing chunking, such as &lt;code&gt;casync&lt;/code&gt; as
this means single bit changes might affect their vicinity but will not
explode in an unbounded fashion. In order achieve best results when
delivering &lt;code&gt;squashfs&lt;/code&gt; images through &lt;code&gt;casync&lt;/code&gt; the block sizes of
&lt;code&gt;squashfs&lt;/code&gt; and the chunks sizes of &lt;code&gt;casync&lt;/code&gt; should be matched up
(using &lt;code&gt;casync&lt;/code&gt;'s &lt;code&gt;--chunk-size=&lt;/code&gt; option). How precisely to choose
both values is left a research subject for the user, for now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;What does the name &lt;code&gt;casync&lt;/code&gt; mean?&lt;/em&gt;&lt;/strong&gt; ‚Äì It's a synchronizing
tool, hence the &lt;code&gt;-sync&lt;/code&gt; suffix, following &lt;code&gt;rsync&lt;/code&gt;'s naming. It makes
use of the content-addressable concept of &lt;code&gt;git&lt;/code&gt; hence the &lt;code&gt;ca-&lt;/code&gt;
prefix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Where can I get this stuff? Is it already packaged? &lt;/em&gt;&lt;/strong&gt; ‚Äì Check
out the sources on &lt;a href="https://github.com/systemd/casync/"&gt;GitHub&lt;/a&gt;. I
just tagged the &lt;a href="https://github.com/systemd/casync/releases/tag/v1"&gt;first
version&lt;/a&gt;. Martin
Pitt has &lt;a href="https://plus.google.com/+MartinPitti/posts/8YMp3xNh1q7"&gt;packaged &lt;code&gt;casync&lt;/code&gt; for
Ubuntu&lt;/a&gt;. There
is also an &lt;a href="https://aur.archlinux.org/packages/casync-git/"&gt;ArchLinux
package&lt;/a&gt;. Zbigniew
Jƒôdrzejewski-Szmek has prepared a &lt;a href="https://apps.fedoraproject.org/packages/casync"&gt;Fedora
RPM&lt;/a&gt; that hopefully
will soon be included in the distribution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Should you care? Is this a tool for you?&lt;/h1&gt;
&lt;p&gt;Well, that's up to you really. If you are involved with projects that
need to deliver IoT, VM, container, application or OS images, then
maybe this is a great tool for you ‚Äî but other options exist, some of
which are linked above.&lt;/p&gt;
&lt;p&gt;Note that &lt;code&gt;casync&lt;/code&gt; is an Open Source project: if it doesn't do exactly
what you need, prepare a patch that adds what you need, and we'll
consider it.&lt;/p&gt;
&lt;p&gt;If you are interested in the project and would like to talk about this
in person, I'll be presenting &lt;code&gt;casync&lt;/code&gt; soon at &lt;a href="https://www.meetup.com/linux-technologies-berlin/events/240909087/"&gt;Kinvolk's Linux
Technologies
Meetup&lt;/a&gt;
in Berlin, Germany. You are invited. I also intend to talk about it at
&lt;a href="https://all-systems-go.io/"&gt;All Systems Go!&lt;/a&gt;, also in Berlin.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 20 Jun 2017 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2017-06-20:/blog/casync-a-tool-for-distributing-file-system-images.html</guid><category>projects</category></item><item><title>Avoiding CVE-2016-8655 with systemd</title><link>https://0pointer.net/blog/avoiding-cve-2016-8655-with-systemd.html</link><description>&lt;h1&gt;Avoiding CVE-2016-8655 with systemd&lt;/h1&gt;
&lt;p&gt;Just a quick note: on recent versions of
&lt;a href="https://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; it is
relatively easy to block the vulnerability described in
&lt;a href="http://seclists.org/oss-sec/2016/q4/607"&gt;CVE-2016-8655&lt;/a&gt; for
individual services.&lt;/p&gt;
&lt;p&gt;Since systemd release v211 there's an option
&lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#RestrictAddressFamilies="&gt;&lt;code&gt;RestrictAddressFamilies=&lt;/code&gt;&lt;/a&gt;
for service unit files which takes away the right to create sockets of
specific address families for processes of the service. In your unit
file, add &lt;code&gt;RestrictAddressFamilies=~AF_PACKET&lt;/code&gt; to the &lt;code&gt;[Service]&lt;/code&gt;
section to make &lt;code&gt;AF_PACKET&lt;/code&gt; unavailable to it (i.e. a blacklist),
which is sufficient to close the attack path. Safer of course is a
whitelist of address families whch you can define by dropping the &lt;code&gt;~&lt;/code&gt;
character from the assignment. Here's a trivial example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mydaemon&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;RestrictAddressFamilies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AF_INET6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AF_UNIX&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;‚Ä¶&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This restricts access to socket families, so that the service may
access only &lt;code&gt;AF_INET&lt;/code&gt;, &lt;code&gt;AF_INET6&lt;/code&gt; or &lt;code&gt;AF_UNIX&lt;/code&gt; sockets, which is
usually the right, minimal set for most system daemons. (&lt;code&gt;AF_INET&lt;/code&gt; is
the low-level name for the IPv4 address family, &lt;code&gt;AF_INET6&lt;/code&gt; for the
IPv6 address family, and &lt;code&gt;AF_UNIX&lt;/code&gt; for local UNIX socket IPC).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/systemd/systemd/blob/8e458bfe4e2aa36c939db62561b2a59206d78577/NEWS#L45"&gt;Starting with systemd v232&lt;/a&gt; we added &lt;code&gt;RestrictAddressFamilies=&lt;/code&gt; to all
of systemd's own unit files, always with the minimal set of socket
address families appropriate.&lt;/p&gt;
&lt;p&gt;With the upcoming v233 release we'll provide a second method for
blocking this vulnerability. Using
&lt;a href="https://github.com/systemd/systemd/pull/4536"&gt;&lt;code&gt;RestrictNamespaces=&lt;/code&gt;&lt;/a&gt;
it is possible to limit which types of Linux namespaces a service may
get access to. Use &lt;code&gt;RestrictNamespaces=yes&lt;/code&gt; to prohibit access to any
kind of namespace, or set &lt;code&gt;RestrictNamespaces=net ipc&lt;/code&gt; (or similar) to
restrict access to a specific set (in this case: network and IPC
namespaces). Given that user namespaces have been a major source of
security vulnerabilities in the past months it's probably a good idea
to block namespaces on all services which don't need them (which is
probably most of them).&lt;/p&gt;
&lt;p&gt;Of course, ideally, distributions such as Fedora, as well as upstream
developers would turn on the various sandboxing settings systemd
provides like these ones by default, since they know best which kind
of address families or namespaces a specific daemon needs.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 07 Dec 2016 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2016-12-07:/blog/avoiding-cve-2016-8655-with-systemd.html</guid><category>projects</category></item><item><title>systemd.conf 2016 Over Now</title><link>https://0pointer.net/blog/systemdconf-2016-over-now.html</link><description>&lt;h1&gt;systemd.conf 2016 is Over Now!&lt;/h1&gt;
&lt;p&gt;A few days ago &lt;a href="https://systemd.io/"&gt;systemd.conf 2016&lt;/a&gt; ended, our
second conference of this kind. I personally enjoyed this conference a
lot: the talks, the atmosphere, the audience, the organization, the
location, they all were excellent!&lt;/p&gt;
&lt;p&gt;I'd like to take the opportunity to thanks everybody involved. In
particular I'd like to thank &lt;em&gt;Chris&lt;/em&gt;, &lt;em&gt;Daniel&lt;/em&gt;, &lt;em&gt;Sandra&lt;/em&gt; and &lt;em&gt;Henrike&lt;/em&gt;
for organizing the conference, your work was stellar!&lt;/p&gt;
&lt;p&gt;I'd also like to thank our sponsors, without which the conference
couldn't take place like this, of course. In particular I'd like to
thank our gold sponsor, &lt;strong&gt;Red Hat&lt;/strong&gt;, our organizing sponsor &lt;strong&gt;Kinvolk&lt;/strong&gt;, as
well as our silver sponsors &lt;strong&gt;CoreOS&lt;/strong&gt; and &lt;strong&gt;Facebook&lt;/strong&gt;. I'd also like to
thank our bronze sponsors &lt;strong&gt;Collabora&lt;/strong&gt;, &lt;strong&gt;OpenSUSE&lt;/strong&gt;, &lt;strong&gt;Pantheon&lt;/strong&gt;, &lt;strong&gt;Pengutronix&lt;/strong&gt;,
our supporting sponsor &lt;strong&gt;Codethink&lt;/strong&gt; and last but not least our media
sponsor &lt;strong&gt;Linux Magazin&lt;/strong&gt;. Thank you all!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://conf.systemd.io/media/imgs/sponsors/redhat.png" width="300" height="97"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://conf.systemd.io/media/imgs/sponsors/kinvolk_logo.png" width="300" height="187"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://conf.systemd.io/media/imgs/sponsors/coreos.png" width="300" height="116"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://conf.systemd.io/media/imgs/sponsors/facebook-logo.png" width="300" height="113"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://conf.systemd.io/media/imgs/sponsors/collabora.png" width="300" height="169"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://conf.systemd.io/media/imgs/sponsors/opensuse-logo.png" width="300" height="190"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://conf.systemd.io/media/imgs/sponsors/pantheon.png" width="300" height="106"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://conf.systemd.io/media/imgs/sponsors/pengutronix.png" width="300" height="84"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://conf.systemd.io/media/imgs/sponsors/codethink-logo.png" width="300" height="88"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://conf.systemd.io/media/imgs/sponsors/linux-magazin.png" width="300" height="126"&gt;&lt;/p&gt;
&lt;p&gt;I'd also like to thank the &lt;a href="https://c3voc.de/"&gt;Video Operation Center
("VOC")&lt;/a&gt; for their amazing work on live-streaming
the conference and making all talks available on YouTube. It's amazing
how efficient the VOC is, it's simply stunning! Thank you guys!&lt;/p&gt;
&lt;p&gt;In case you missed this year's iteration of the conference, please
have a look at our &lt;strong&gt;&lt;a href="https://www.youtube.com/channel/UCvq_RgZp3kljp9X8Io9Z1DA"&gt;YouTube
Channel&lt;/a&gt;&lt;/strong&gt;. You'll
find all of this year's talks there, as well the ones from last
year. (For example, my welcome talk is available
&lt;a href="https://www.youtube.com/watch?v=DUUbFGNZ1vI"&gt;here&lt;/a&gt;). Enjoy!&lt;/p&gt;
&lt;p&gt;We hope to see you again next year, for systemd.conf 2017 in Berlin!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 05 Oct 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2016-10-05:/blog/systemdconf-2016-over-now.html</guid><category>projects</category></item><item><title>systemd.conf 2016 Workshop Tickets Available</title><link>https://0pointer.net/blog/systemdconf-2016-workshop-tickets-available.html</link><description>&lt;h1&gt;Tickets for systemd 2016 Workshop day still available!&lt;/h1&gt;
&lt;p&gt;We still have a number of ticket for the workshop day of &lt;a href="https://conf.systemd.io/"&gt;systemd.conf
2016&lt;/a&gt; available. If you are a newcomer to
systemd, and would like to learn about various systemd facilities, or
if you already know your way around, but would like to know more: this
is the best chance to do so. The workshop day is the 28th of
September, one day before the main conference, at the betahaus in
Berlin, Germany. The schedule for the day is available
&lt;a href="https://cfp.systemd.io/en/systemdconf_2016/public/schedule/0"&gt;here&lt;/a&gt;. There
are five interesting, extensive sessions, run by the systemd hackers
themselves. Who better to learn systemd from, than the folks who wrote
it?&lt;/p&gt;
&lt;p&gt;Note that the workshop day and the main conference days require
different tickets. (Also note: there are still a few tickets available for
the main conference!).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ti.to/systemdconf/systemdconf-2016"&gt;Buy a ticket here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See you in Berlin!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 18 Sep 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2016-09-18:/blog/systemdconf-2016-workshop-tickets-available.html</guid><category>projects</category></item><item><title>Preliminary systemd.conf 2016 Schedule</title><link>https://0pointer.net/blog/preliminary-systemdconf-2016-now-available.html</link><description>&lt;h1&gt;A Preliminary systemd.conf 2016 Schedule is Now Available!&lt;/h1&gt;
&lt;p&gt;We have just published a first, preliminary version of the
&lt;a href="https://cfp.systemd.io/en/systemdconf_2016/public/schedule/1"&gt;systemd.conf 2016
schedule&lt;/a&gt;. There
is a small number of white slots in the schedule still, because we're
missing confirmation from a small number of presenters. The missing
talks will be added in as soon as they are confirmed.&lt;/p&gt;
&lt;p&gt;The schedule consists of 5 workshops by high-profile speakers during
the workshop day, 22 exciting talks during the main conference days,
followed by one full day of hackfests.&lt;/p&gt;
&lt;p&gt;Please sign up for the conference soon! Only a limited number of
tickets are available, hence make sure to secure yours quickly before
they run out! (Last year we sold out.) &lt;a href="https://ti.to/systemdconf/systemdconf-2016"&gt;Please sign up here for the
conference!&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 16 Aug 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2016-08-16:/blog/preliminary-systemdconf-2016-now-available.html</guid><category>projects</category></item><item><title>FINAL REMINDER! systemd.conf 2016 CfP Ends on Monday!</title><link>https://0pointer.net/blog/final-reminder-systemdconf-2016-cfp-ends-on-monday.html</link><description>&lt;p&gt;Please note that the &lt;a href="https://conf.systemd.io/"&gt;systemd.conf 2016&lt;/a&gt;
Call for Participation ends on Monday, on &lt;strong&gt;Aug. 1st&lt;/strong&gt;!  Please send
in your talk proposal by then! We‚Äôve already got a good number of
excellent submissions, but we are very interested in yours, too!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://systemd.io/"&gt;&lt;img src="http://0pointer.de/public/systemdconf2016.png" width="750" height="349" border="0"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We are looking for talks on all facets of systemd: deployment,
maintenance, administration, development. Regardless of whether you
use it in the cloud, on embedded, on IoT, on the desktop, on mobile,
in a container or on the server: we are interested in your
submissions!&lt;/p&gt;
&lt;p&gt;In addition to proposals for talks for the main conference, we are
looking for proposals for &lt;strong&gt;workshop sessions&lt;/strong&gt; held during our
Workshop Day (the first day of the conference). The workshop format
consists of a day of 2-3h training sessions, that may cover any
systemd-related topic you'd like. We are both interested in
submissions from the developer community as well as submissions from
organizations making use of systemd! Introductory workshop sessions
are particularly welcome, as the Workshop Day is intended to open up
our conference to newcomers and people who aren't systemd gurus yet,
but would like to become more fluent.&lt;/p&gt;
&lt;p&gt;For further details on the submissions we are looking for and the CfP
process, please consult the &lt;a href="https://cfp.systemd.io/en/systemdconf_2016/cfp/session/new"&gt;CfP
page&lt;/a&gt; and
submit your proposal using the provided form!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ALSO:&lt;/strong&gt; Please sign up for the conference soon! Only a
&lt;strong&gt;limited&lt;/strong&gt; number of tickets are available, hence make sure to secure
yours quickly before they run out! (Last year we sold out.) &lt;a href="https://ti.to/systemdconf/systemdconf-2016"&gt;Please
sign up here for the
conference!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AND OF COURSE:&lt;/strong&gt; We are also looking for more sponsors for
systemd.conf!  If you are working on systemd-related projects, or make
use of it in your company, &lt;a href="https://conf.systemd.io/files/systemdconf2016SponsorshipProspectus.pdf"&gt;please consider &lt;strong&gt;becoming a sponsor&lt;/strong&gt; of
systemd.conf
2016&lt;/a&gt;!
Without our sponsors we couldn't organize systemd.conf 2016!&lt;/p&gt;
&lt;p&gt;Thank you very much, and see you in Berlin!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 28 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2016-07-28:/blog/final-reminder-systemdconf-2016-cfp-ends-on-monday.html</guid><category>projects</category></item><item><title>REMINDER! systemd.conf 2016 CfP Ends in Two Weeks!</title><link>https://0pointer.net/blog/reminder-systemdconf-2016-cfp-ends-in-two-weeks.html</link><description>&lt;p&gt;Please note that the &lt;a href="https://conf.systemd.io/"&gt;systemd.conf 2016&lt;/a&gt;
Call for Participation ends in less than two weeks, on &lt;strong&gt;Aug. 1st&lt;/strong&gt;!
Please send in your talk proposal by then! We‚Äôve already got a good
number of excellent submissions, but we are interested in yours even
more!&lt;/p&gt;
&lt;p&gt;We are looking for talks on all facets of systemd: deployment,
maintenance, administration, development. Regardless of whether you
use it in the cloud, on embedded, on IoT, on the desktop, on mobile,
in a container or on the server: we are interested in your
submissions!&lt;/p&gt;
&lt;p&gt;In addition to proposals for talks for the main conference, we are
looking for proposals for &lt;strong&gt;workshop sessions&lt;/strong&gt; held during our
Workshop Day (the first day of the conference). The workshop format
consists of a day of 2-3h training sessions, that may cover any
systemd-related topic you'd like. We are both interested in
submissions from the developer community as well as submissions from
organizations making use of systemd! Introductory workshop sessions
are particularly welcome, as the Workshop Day is intended to open up
our conference to newcomers and people who aren't systemd gurus yet,
but would like to become more fluent.&lt;/p&gt;
&lt;p&gt;For further details on the submissions we are looking for and the CfP
process, please consult the &lt;a href="https://cfp.systemd.io/en/systemdconf_2016/cfp/session/new"&gt;CfP
page&lt;/a&gt; and
submit your proposal using the provided form!&lt;/p&gt;
&lt;p&gt;And keep in mind:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REMINDER:&lt;/strong&gt; Please sign up for the conference soon! Only a
&lt;strong&gt;limited&lt;/strong&gt; number of tickets are available, hence make sure to secure
yours quickly before they run out! (Last year we sold out.) &lt;a href="https://ti.to/systemdconf/systemdconf-2016"&gt;Please
sign up here for the
conference!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AND OF COURSE:&lt;/strong&gt; We are also looking for more sponsors for
systemd.conf!  If you are working on systemd-related projects, or make
use of it in your company, &lt;a href="https://conf.systemd.io/files/systemdconf2016SponsorshipProspectus.pdf"&gt;please consider &lt;strong&gt;becoming a sponsor&lt;/strong&gt; of
systemd.conf
2016&lt;/a&gt;!
Without our sponsors we couldn't organize systemd.conf 2016!&lt;/p&gt;
&lt;p&gt;Thank you very much, and see you in Berlin!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 19 Jul 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2016-07-19:/blog/reminder-systemdconf-2016-cfp-ends-in-two-weeks.html</guid><category>projects</category></item><item><title>CfP is now open</title><link>https://0pointer.net/blog/cfp-is-now-open.html</link><description>&lt;h1&gt;The systemd.conf 2016 Call for Participation is Now Open!&lt;/h1&gt;
&lt;p&gt;We‚Äôd like to invite presentation and workshop proposals for &lt;a href="https://systemd.io/"&gt;systemd.conf 2016&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The conference will consist of three parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One day of &lt;b&gt;workshops&lt;/b&gt;, consisting of in-depth (2-3hr) training and learning-by-doing sessions (Sept. 28th)&lt;/li&gt;
&lt;li&gt;Two days of regular &lt;b&gt;talks&lt;/b&gt; (Sept. 29th-30th)&lt;/li&gt;
&lt;li&gt;One day of &lt;b&gt;hackfest&lt;/b&gt; (Oct. 1st)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are now accepting submissions for the first three days: proposals
for workshops, training sessions and regular talks. In particular, we
are looking for sessions including, but not limited to, the following
topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Cases: systemd in today‚Äôs and tomorrow‚Äôs &lt;b&gt;devices&lt;/b&gt; and &lt;b&gt;applications&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;systemd and &lt;b&gt;containers&lt;/b&gt;, in the cloud and on &lt;b&gt;servers&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;systemd in &lt;b&gt;distributions&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Embedded&lt;/b&gt; systemd and in &lt;b&gt;IoT&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;systemd on the &lt;b&gt;desktop&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Networking&lt;/b&gt; with systemd&lt;/li&gt;
&lt;li&gt;‚Ä¶ and everything else related to &lt;a href="https://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please submit your proposals by &lt;strong&gt;August 1st, 2016&lt;/strong&gt;. Notification of acceptance will be sent out 1-2 weeks later.&lt;/p&gt;
&lt;p&gt;If submitting a workshop proposal please contact &lt;a href="mailto:info@systemd.io"&gt;the organizers&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;To submit a talk, please visit &lt;a href="https://cfp.systemd.io/en/systemdconf_2016/cfp/session/new"&gt;our CfP submission page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For further information on systemd.conf 2016, please visit &lt;a href="https://systemd.io/"&gt;our conference web site&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 12 May 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2016-05-12:/blog/cfp-is-now-open.html</guid><category>projects</category></item><item><title>Announcing systemd.conf 2016</title><link>https://0pointer.net/blog/announcing-systemdconf-2016.html</link><description>&lt;h1&gt;Announcing systemd.conf 2016&lt;/h1&gt;
&lt;p&gt;We are happy to announce the 2016 installment of systemd.conf, the conference of the systemd project!&lt;/p&gt;
&lt;p&gt;After our successful first conference 2015 we‚Äôd like to repeat the event in 2016 for the second time. The conference will take place on &lt;strong&gt;September 28th&lt;/strong&gt; until &lt;strong&gt;October 1st&lt;/strong&gt;, 2016 at &lt;strong&gt;betahaus&lt;/strong&gt; in &lt;strong&gt;Berlin, Germany&lt;/strong&gt;. The event is a few days before LinuxCon Europe, which also is located in Berlin this year. This year, the conference will consist of two days of presentations, a one-day hackfest and one day of hands-on training sessions.&lt;/p&gt;
&lt;p&gt;The website is online now, please visit &lt;a href="https://conf.systemd.io"&gt;https://conf.systemd.io/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tickets at early-bird prices are available already. Purchase them at &lt;a href="https://ti.to/systemdconf/systemdconf-2016"&gt;https://ti.to/systemdconf/systemdconf-2016&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Call for Presentations will open soon, we are looking forward to your submissions! A separate announcement will be published as soon as the CfP is open.&lt;/p&gt;
&lt;p&gt;systemd.conf 2016 is a organized jointly by the &lt;strong&gt;systemd community&lt;/strong&gt; and &lt;strong&gt;kinvolk.io&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We are looking for sponsors! We‚Äôve got early commitments from some of last year‚Äôs sponsors: &lt;strong&gt;Collabora&lt;/strong&gt;, &lt;strong&gt;Pengutronix&lt;/strong&gt; &amp;amp; &lt;strong&gt;Red Hat&lt;/strong&gt;.  Please see the web site for details about how your company may become a sponsor, too.&lt;/p&gt;
&lt;p&gt;If you have any questions, please contact us at &lt;a href="mailto:info@systemd.io"&gt;info@systemd.io&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 04 Apr 2016 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2016-04-04:/blog/announcing-systemdconf-2016.html</guid><category>projects</category></item><item><title>Introducing sd-event</title><link>https://0pointer.net/blog/introducing-sd-event.html</link><description>&lt;h1&gt;The Event Loop API of libsystemd&lt;/h1&gt;
&lt;p&gt;When we began working on
&lt;a href="https://wiki.freedesktop.org/www/Software/systemd/"&gt;systemd&lt;/a&gt; we built
it around a hand-written ad-hoc event loop, wrapping &lt;a href="http://man7.org/linux/man-pages/man7/epoll.7.html"&gt;Linux
epoll&lt;/a&gt;. The more
our project grew the more we realized the limitations of using raw
epoll:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As we used
  &lt;a href="http://man7.org/linux/man-pages/man2/timerfd_create.2.html"&gt;timerfd&lt;/a&gt;
  for our timer events, each event source cost one file descriptor and
  we had many of them! File descriptors are a scarce resource on UNIX,
  as
  &lt;a href="http://man7.org/linux/man-pages/man2/setrlimit.2.html"&gt;RLIMIT_NOFILE&lt;/a&gt;
  is typically set to 1024 or similar, limiting the number of
  available file descriptors per process to 1021, which isn't
  particularly a lot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ordering of event dispatching became a nightmare. In many cases, we
  wanted to make sure that a certain kind of event would always be
  dispatched before another kind of event, if both happen at the same
  time. For example, when the last process of a service dies, we might
  be notified about that via a SIGCHLD signal, via an
  &lt;a href="http://www.freedesktop.org/software/systemd/man/sd_notify.html"&gt;sd_notify() "STATUS="&lt;/a&gt;
  message, and via a control group notification. We wanted to get
  these events in the right order, to know when it's safe to process
  and subsequently release the runtime data systemd keeps about the
  service or process: it shouldn't be done if there are still events
  about it pending.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For each program we added to the systemd project we noticed we were
  adding similar code, over and over again, to work with epoll's
  complex interfaces. For example, finding the right file descriptor
  and callback function to dispatch an epoll event to, without running
  into invalidated pointer issues is outright difficult and requires
  non-trivial code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrating child process watching into our event loops was much
  more complex than one could hope, and even more so if child process
  events should be ordered against each other and unrelated kinds of
  events.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eventually, we started working on
&lt;a href="the-new-sd-bus-api-of-systemd.html"&gt;sd-bus&lt;/a&gt;. At
the same time we decided to seize the opportunity, put together a
proper event loop API in C, and then not only port sd-bus on top of
it, but also the rest of systemd. The result of this is
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd-event.html"&gt;sd-event&lt;/a&gt;. After
almost two years of development we declared sd-event stable in systemd
version 221, and published it as official API of libsystemd.&lt;/p&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/systemd/systemd/blob/master/src/systemd/sd-event.h"&gt;sd-event.h&lt;/a&gt;,
of course, is not the first event loop API around, and it doesn't
implement any really novel concepts. When we started working on it we
tried to do our homework, and checked the various existing event loop
APIs, maybe looking for candidates to adopt instead of doing our own,
and to learn about the strengths and weaknesses of the various
implementations existing. Ultimately, we found no implementation that
could deliver what we needed, or where it would be easy to add the
missing bits: as usual in the systemd project, we wanted something
that allows us access to all the Linux-specific bits, instead of
limiting itself to the least common denominator of UNIX. We weren't
looking for an abstraction API, but simply one that makes epoll usable
in system code.&lt;/p&gt;
&lt;p&gt;With this blog story I'd like to take the opportunity to introduce you
to sd-event, and explain why it might be a good candidate to adopt as
event loop implementation in your project, too.&lt;/p&gt;
&lt;p&gt;So, here are some features it provides:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I/O event sources, based on epoll's file descriptor watching,
  including edge triggered events (EPOLLET). See
  &lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_add_io.html"&gt;sd_event_add_io(3)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Timer event sources, based on &lt;code&gt;timerfd_create()&lt;/code&gt;, supporting the
  &lt;code&gt;CLOCK_MONOTONIC&lt;/code&gt;, &lt;code&gt;CLOCK_REALTIME&lt;/code&gt;, &lt;code&gt;CLOCK_BOOTIME&lt;/code&gt; clocks, as well
  as the &lt;code&gt;CLOCK_REALTIME_ALARM&lt;/code&gt; and &lt;code&gt;CLOCK_BOOTTIME_ALARM&lt;/code&gt; clocks that
  can resume the system from suspend. When creating timer events a
  required accuracy parameter may be specified which allows coalescing
  of timer events to minimize power consumption. For each clock only a
  single timer file descriptor is kept, and all timer events are
  multiplexed with a priority queue. See
  &lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_add_time.html"&gt;sd_event_add_time(3)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UNIX process signal events, based on
  &lt;a href="http://man7.org/linux/man-pages/man2/signalfd.2.html"&gt;signalfd(2)&lt;/a&gt;,
  including full support for real-time signals, and queued
  parameters. See &lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_add_signal.html"&gt;sd_event_add_signal(3)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Child process state change events, based on
  &lt;a href="http://man7.org/linux/man-pages/man2/waitid.2.html"&gt;waitid(2)&lt;/a&gt;. See
  &lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_add_child.html"&gt;sd_event_add_child(3)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static event sources, of three types: defer, post and exit, for
  invoking calls in each event loop, after other event sources or at
  event loop termination. See
  &lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_add_defer.html"&gt;sd_event_add_defer(3)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Event sources may be assigned a 64bit priority value, that controls
  the order in which event sources are dispatched if multiple are
  pending simultanously. See
  &lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_source_set_priority.html"&gt;sd_event_source_set_priority(3)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The event loop may automatically send watchdog notification messages
  to the service manager. See &lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_set_watchdog.html"&gt;sd_event_set_watchdog(3)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The event loop may be integrated into foreign event loops, such as
  the GLib one. The event loop API is hence composable, the same way
  the underlying epoll logic is. See
  &lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_get_fd.html"&gt;sd_event_get_fd(3)&lt;/a&gt;
  for an example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The API is fully OOM safe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A complete set of documentation in UNIX man page format is
  available, with
  &lt;a href="http://www.freedesktop.org/software/systemd/man/sd-event.html"&gt;sd-event(3)&lt;/a&gt;
  as the entry page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It's pretty widely available, and requires no extra
  dependencies. Since systemd is built on it, most major distributions
  ship the library in their default install set.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After two years of development, and after being used in all of
  systemd's components, it has received a fair share of testing already,
  even though we only recently decided to declare it stable and turned
  it into a public API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that sd-event has some potential drawbacks too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If portability is essential to you, sd-event is not your best
  option. sd-event is a wrapper around Linux-specific APIs, and that's
  visible in the API. For example: our event callbacks receive
  structures defined by Linux-specific APIs such as signalfd.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It's a low-level C API, and it doesn't isolate you from the OS
  underpinnings. While I like to think that it is relatively nice and
  easy to use from C, it doesn't compromise on exposing the low-level
  functionality. It just fills the gaps in what's missing between
  epoll, timerfd, signalfd and related concepts, and it does not hide
  that away.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Either way, I believe that sd-event is a great choice when looking for
an event loop API, in particular if you work on system-level software
and embedded, where functionality like timer coalescing or
watchdog support matter.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Here's a short example how to use sd-event in a simple daemon. In this
example, we'll not just use &lt;a href="https://github.com/systemd/systemd/blob/master/src/systemd/sd-event.h"&gt;sd-event.h&lt;/a&gt;, but also &lt;a href="https://github.com/systemd/systemd/blob/master/src/systemd/sd-daemon.h"&gt;sd-daemon.h&lt;/a&gt; to
implement a system service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;alloca.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;endian.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/ioctl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;systemd/sd-daemon.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;systemd/sd-event.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;io_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd_event_source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;revents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;userdata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;ssize_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* UDP enforces a somewhat reasonable maximum datagram size of 64K, we can just allocate the buffer on the stack */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ioctl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FIONREAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;alloca&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EAGAIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;memcmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;EXIT&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="cm"&gt;/* Request a clean exit */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;sd_event_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd_event_source_get_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fwrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fflush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;union&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;sockaddr_in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;sockaddr&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_event_source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;event_source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;sigset_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_event_default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sigemptyset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;sigaddset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;sigaddset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Block SIGTERM first, so that the event loop can handle it */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sigprocmask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SIG_BLOCK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Let&amp;#39;s make use of the default handler and &amp;quot;floating&amp;quot; reference features of sd_event_add_signal() */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_event_add_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_event_add_signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SIGINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Enable automatic service watchdog support */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_event_set_watchdog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;SOCK_CLOEXEC&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;SOCK_NONBLOCK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;sockaddr_in&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;htobe16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7777&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_event_add_io&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;event_source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;io_handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_notifyf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;READY=1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;STATUS=Daemon startup completed, processing events.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_event_loop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;event_source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_event_source_unref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_event_unref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failure: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The example above shows how to write a minimal UDP/IP server, that
listens on port 7777. Whenever a datagram is received it outputs its
contents to STDOUT, unless it is precisely the string &lt;code&gt;EXIT\n&lt;/code&gt; in
which case the service exits. The service will react to SIGTERM and
SIGINT and do a clean exit then. It also notifies the service manager
about its completed startup, if it runs under a service
manager. Finally, it sends watchdog keep-alive messages to the service
manager if it asked for that, and if it runs under a service manager.&lt;/p&gt;
&lt;p&gt;When run as systemd service this service's STDOUT will be connected to
the logging framework of course, which means the service can act as a
minimal UDP-based remote logging service.&lt;/p&gt;
&lt;p&gt;To compile and link this example, save it as &lt;code&gt;event-example.c&lt;/code&gt;, then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ gcc event-example.c -o event-example &lt;span class="sb"&gt;`&lt;/span&gt;pkg-config --cflags --libs libsystemd&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For a first test, simply run the resulting binary from the command
line, and test it against the following netcat command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ nc -u localhost &lt;span class="m"&gt;7777&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the sake of brevity error checking is minimal, and in a real-world
application should, of course, be more comprehensive. However, it
hopefully gets the idea across how to write a daemon that reacts to
external events with sd-event.&lt;/p&gt;
&lt;p&gt;For further details on the functions used in the example above, please
consult the manual pages:
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd-event.html"&gt;sd-event(3)&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_exit.html"&gt;sd_event_exit(3)&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_source_get_event.html"&gt;sd_event_source_get_event(3)&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_default.html"&gt;sd_event_default(3)&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_add_signal.html"&gt;sd_event_add_signal(3)&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_set_watchdog.html"&gt;sd_event_set_watchdog(3)&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_add_io.html"&gt;sd_event_add_io(3)&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_notifyf.html"&gt;sd_notifyf(3)&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_loop.html"&gt;sd_event_loop(3)&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_source_unref.html"&gt;sd_event_source_unref(3)&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_event_unref.html"&gt;sd_event_unref(3)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So, is this the event loop to end all other event loops? Certainly
not. I actually believe in "event loop plurality". There are many
reasons for that, but most importantly: sd-event is supposed to be an
event loop suitable for writing a wide range of applications, but it's
definitely not going to solve all event loop problems. For example,
while the priority logic is important for many usecase it comes with
drawbacks for others: if not used carefully high-priority event
sources can easily starve low-priority event sources. Also, in order
to implement the priority logic, sd-event needs to linearly iterate
through the event structures returned by
&lt;a href="http://man7.org/linux/man-pages/man2/epoll_wait.2.html"&gt;epoll_wait(2)&lt;/a&gt;
to sort the events by their priority, resulting in worst case
O(n*log(n)) complexity on each event loop wakeup (for n = number of
file descriptors). Then, to implement priorities fully, sd-event only
dispatches a single event before going back to the kernel and asking
for new events. sd-event will hence not provide the theoretically
possible best scalability to huge numbers of file descriptors. Of
course, this could be optimized, by improving epoll, and making it
support how todays's event loops actually work (after, all, this is
the problem set all event loops that implement priorities -- including
GLib's -- have to deal with), but even then: the design of sd-event is focussed on
running one event loop per thread, and it dispatches events strictly
ordered. In many other important usecases a very different design is
preferable: one where events are distributed to a set of worker threads
and are dispatched out-of-order.&lt;/p&gt;
&lt;p&gt;Hence, don't mistake sd-event for what it isn't. It's not supposed to
unify everybody on a single event loop. It's just supposed to be a
very good implementation of an event loop suitable for a large part of
the typical usecases.&lt;/p&gt;
&lt;p&gt;Note that our APIs, including
&lt;a href="the-new-sd-bus-api-of-systemd.html"&gt;sd-bus&lt;/a&gt;, integrate nicely into
sd-event event loops, but do not require it, and may be integrated
into other event loops too, as long as they support watching for time
and I/O events.&lt;/p&gt;
&lt;p&gt;And that's all for now. If you are considering using sd-event for your
project and need help or have questions, please direct them to the
&lt;a href="http://lists.freedesktop.org/mailman/listinfo/systemd-devel"&gt;systemd mailing list&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 19 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2015-11-19:/blog/introducing-sd-event.html</guid><category>projects</category></item><item><title>systemd.conf 2015 Summary</title><link>https://0pointer.net/blog/systemdconf-2015-summary.html</link><description>&lt;h1&gt;systemd.conf 2015 is Over Now!&lt;/h1&gt;
&lt;p&gt;Last week our first &lt;a href="https://systemd.events/"&gt;systemd.conf&lt;/a&gt; conference
took place at betahaus, in Berlin, Germany. With almost 100 attendees,
a dense schedule of 23 high-quality talks stuffed into a single track
on just two days, a productive hackfest and numerous consumed
Club-Mates I believe it was quite a success!&lt;/p&gt;
&lt;p&gt;If you couldn't attend the conference, you may watch all talks on our
&lt;a href="https://www.youtube.com/channel/UCvq_RgZp3kljp9X8Io9Z1DA"&gt;YouTube
Channel&lt;/a&gt;. The
slides are &lt;a href="https://drive.google.com/open?id=0B-UWEwsUY5PJZXQ2emdsVXJ4OTA"&gt;available
online&lt;/a&gt;,
too.&lt;/p&gt;
&lt;p&gt;Many photos from the conference are available on the &lt;a href="https://plus.google.com/events/gallery/cilbcdfrpbk12h2qe8o18fn7m04"&gt;Google Events
Page&lt;/a&gt;. Enjoy!&lt;/p&gt;
&lt;p&gt;I'd specifically like to thank Daniel Mack, Chris K√ºhl and Nils Magnus
for running the conference, and making sure that it worked out as
smoothly as it did! Thank you very much, you did a fantastic job!&lt;/p&gt;
&lt;p&gt;I'd also specifically like to thank the &lt;a href="http://c3voc.de/"&gt;CCC Video Operation
Center&lt;/a&gt; folks for the excellent video coverage of
the conference. Not only did they implement a live-stream for the
entire talks part of the conference, but also cut and uploaded videos
of all talks to our &lt;a href="https://www.youtube.com/channel/UCvq_RgZp3kljp9X8Io9Z1DA"&gt;YouTube
Channel&lt;/a&gt;
within the same day (in fact, within a few hours after the talks
finished). That's quite an impressive feat!&lt;/p&gt;
&lt;p&gt;The folks from LinuxTag e.V. put a lot of time and energy in the
organization. It was great to see how well this all worked out!
Excellent work!&lt;/p&gt;
&lt;p&gt;(BTW, LinuxTag e.V. and the CCC Video Operation Center folks are
willing to help with the organization of Free Software community
events in Germany (and Europe?). Hence, if you need an entity that can
do the financial work and other stuff for your Free Software project's
conference, consider pinging LinuxTag, they might be willing to
help. Similar, if you are organizing such an event and are thinking
about providing video coverage, consider pinging the the CCC VOC
folks! Both of them get our best recommendations!)&lt;/p&gt;
&lt;p&gt;I'd also like to thank &lt;a href="https://systemd.events/systemdconf-2015/sponsors"&gt;our conference
sponsors&lt;/a&gt;!
Specifically, we'd like to thank our Gold Sponsors &lt;strong&gt;Red Hat&lt;/strong&gt; and
&lt;strong&gt;CoreOS&lt;/strong&gt; for their support. We'd also like to thank our Silver
Sponsor &lt;strong&gt;Codethink&lt;/strong&gt;, and our Bronze Sponsors &lt;strong&gt;Pengutronix&lt;/strong&gt;,
&lt;strong&gt;Pantheon&lt;/strong&gt;, &lt;strong&gt;Collabora&lt;/strong&gt;, &lt;strong&gt;Endocode&lt;/strong&gt;, the &lt;strong&gt;Linux Foundation&lt;/strong&gt;,
&lt;strong&gt;Samsung&lt;/strong&gt; and &lt;strong&gt;Travelping&lt;/strong&gt;, as well as our Cooperation Partners
&lt;strong&gt;LinuxTag&lt;/strong&gt; and &lt;strong&gt;kinvolk.io&lt;/strong&gt;, and our Media Partner &lt;strong&gt;Golem.de&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least I'd really like to thank our speakers and attendees
for presenting and participating in the conference. Of course, the
conference we put together specifically for you, and we really hope
you had as much fun at it as we did!&lt;/p&gt;
&lt;p&gt;Thank you all for attending, supporting, and organizing &lt;a href="https://systemd.events/"&gt;systemd.conf
2015&lt;/a&gt;! We are looking forward to seeing you
and working with you again at systemd.conf 2016!&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 09 Nov 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2015-11-09:/blog/systemdconf-2015-summary.html</guid><category>projects</category></item><item><title>Second Round of systemd.conf 2015 Sponsors</title><link>https://0pointer.net/blog/second-round-of-systemdconf-2015-sponsors.html</link><description>&lt;h1&gt;Second Round of systemd.conf 2015 Sponsors&lt;/h1&gt;
&lt;p&gt;We are happy to announce the second round of &lt;a href="https://systemd.events/"&gt;systemd.conf
2015&lt;/a&gt; sponsors! In addition to those from
&lt;a href="http://0pointer.net/blog/first-round-of-systemdconf-2015-sponsors.html"&gt;the first
announcement&lt;/a&gt;, we have:&lt;/p&gt;
&lt;p&gt;Our second &lt;strong&gt;Gold&lt;/strong&gt; sponsor is Red Hat!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/red"&gt;&lt;img src="https://systemd.events/sites/default/files/Red_Hat_RGB-220.png" width="220" height="85"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What began as a better way to build software‚Äîopenness, transparency, collaboration‚Äîsoon shifted the balance of power in an entire industry. The revolution of choice continues. Today Red Hat¬Æ is the world's leading provider of open source solutions, using a community-powered approach to provide reliable and high-performing cloud, virtualization, storage, Linux¬Æ, and middleware technologies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Bronze&lt;/strong&gt; sponsor is &lt;em&gt;Samsung&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/samsung-poland-rd-center"&gt;&lt;img src="https://systemd.events/sites/default/files/samsung_logo.png" width="220" height="86"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From the beginning we have established a very fast pace and are currently one of the biggest and fastest growing modern-technology R&amp;amp;D centers in East-Central Europe.
We have started with designing subsystems for digital satellite television, however, we have quickly expanded the scope of our interest. Currently, it includes advanced systems of digital television, platform convergence, mobile systems, smart solutions, and enterprise solutions.
Also a vital role in our activity plays the quality and certification center, which controls the conformity of Samsung Electronics products with the highest standards of quality and reliability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Bronze&lt;/strong&gt; sponsor is &lt;em&gt;travelping&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/travelping"&gt;&lt;img src="https://systemd.events/sites/default/files/travelping_logo.png" width="220" height="60"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Travelping is passionate about networks, communications and devices. We empower our customers to deploy and operate networks using our state of the art products, solutions and services.
Our products and solutions are based on our industry proven physical and virtual appliance platforms. These purpose built platforms ensure best in class performance, scalability and reliability combined with consistent end to end management capabilities.
To build this products, Travelping has developed a own embedded, cross platform Linux distribution called CAROS.io which incorporates the systemd service manager and tools.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Bronze&lt;/strong&gt; sponsor is &lt;em&gt;Collabora&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/collabora"&gt;&lt;img src="https://systemd.events/sites/default/files/collabora-logo.png" width="220" height="124"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Collabora has over 10 years of experience working with top tier OEMs &amp;amp; silicon manufacturers worldwide to develop products based on Open Source software. Through the use of Open Source technologies and methodologies, Collabora helps clients in multiple market segments gain faster time to market and save millions of dollars in licensing and maintenance costs. Collabora has already brought to market several products relying on systemd extensively.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Bronze&lt;/strong&gt; sponsor is &lt;em&gt;Endocode&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/endocode"&gt;&lt;img src="https://systemd.events/sites/default/files/endocode-logo.png" width="220" height="52"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Endocode AG. An employee-owned, software engineering company from Berlin. Open Source is our heart and soul.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Bronze&lt;/strong&gt; sponsor is the &lt;em&gt;Linux&lt;/em&gt; &lt;em&gt;Foundation&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/linux-foundation"&gt;&lt;img src="https://systemd.events/sites/default/files/Linux_Foundation-logo.png" width="220" height="95"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Linux Foundation advances the growth of Linux and offers its collaborative principles and practices to any endeavor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are &lt;strong&gt;Cooperating&lt;/strong&gt; with &lt;em&gt;LinuxTag&lt;/em&gt; &lt;em&gt;e.V.&lt;/em&gt; on the organization:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/linuxtag-ev"&gt;&lt;img src="https://systemd.events/sites/default/files/Linuxtag-logo.png" width="220" height="149"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LinuxTag is Europe's leading organizer of Linux and Open Source events. Born of the community and in business for 20 years, we organize LinuxTag, an annual conference and exhibition attracting thousands of visitors. We also participate and cooperate in organizing workshops, tutorials, seminars, and other events together with and for the Open Source community. Selected events include non-profit workshops, the German Kernel Summit at FrOSCon, participation in the Open Tech Summit, and others. We take care of the organizational framework of systemd.conf 2015. LinuxTag e.V. is a non-profit organization and welcomes donations of ideas and workforce.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Media&lt;/strong&gt; Partner is &lt;em&gt;Golem&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/golem"&gt;&lt;img src="https://systemd.events/sites/default/files/golem_logo.png" width="220" height="220"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Golem.de is an up to date online-publication intended for professional computer users. It provides technology insights of the IT and telecommunications industry. Golem.de offers profound and up to date information on significant and trending topics. Online- and IT-Professionals, marketing managers, purchasers, and readers inspired by technology receive substantial information on product, market and branding potentials through tests, interviews und market analysis.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We'd like to thank our sponsors for their support! Without sponsors our conference would not be possible!&lt;/p&gt;
&lt;p&gt;The Conference s SOLD OUT since a few weeks. We no longer accept registrations, nor paper submissions.&lt;/p&gt;
&lt;p&gt;For further details about systemd.conf consult the &lt;a href="https://systemd.events/"&gt;conference website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the &lt;a href="http://0pointer.net/blog/first-round-of-systemdconf-2015-sponsors.html"&gt;the first round of sponsor announcements&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;See you in Berlin!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 19 Oct 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2015-10-19:/blog/second-round-of-systemdconf-2015-sponsors.html</guid><category>projects</category></item><item><title>systemd.conf close to being sold out!</title><link>https://0pointer.net/blog/systemdconf-close-to-being-sold-out.html</link><description>&lt;h1&gt;Only 14 tickets still available!&lt;/h1&gt;
&lt;p&gt;systemd.conf 2015 is close to being sold out, there are &lt;em&gt;only&lt;/em&gt; &lt;em&gt;14&lt;/em&gt;
&lt;em&gt;tickets&lt;/em&gt; &lt;em&gt;left&lt;/em&gt; now. If you haven't bought your ticket yet, now is
the time to do it, because otherwise it will be too late and all
tickets will be gone!&lt;/p&gt;
&lt;p&gt;Why attend? At this conference you'll get to meet everybody who is
involved with the systemd project and learn what they are working on,
and where the project will go next. You'll hear from major users and
projects working with systemd. It's the primary forum where you can
make yourself heard and get first hand access to everybody who's
working on the future of the core Linux userspace!&lt;/p&gt;
&lt;p&gt;To get an idea about the schedule, please consult our &lt;a href="https://systemd.events/systemdconf-2015/schedule"&gt;preliminary
schedule&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to &lt;strong&gt;register&lt;/strong&gt; for the conference, please visit &lt;a href="https://systemd.events/systemdconf-2015/registration"&gt;the
registration
page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are still looking for sponsors. If you'd like to join the ranks of
systemd.conf 2015 sponsors, please have a look at our &lt;a href="https://systemd.events/systemdconf-2015/become-sponsor"&gt;Becoming a
Sponsor&lt;/a&gt; page!&lt;/p&gt;
&lt;p&gt;For further details about systemd.conf consult the &lt;a href="https://systemd.events/"&gt;conference
website&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 23 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2015-09-23:/blog/systemdconf-close-to-being-sold-out.html</guid><category>projects</category></item><item><title>Preliminary systemd.conf 2015 Schedule</title><link>https://0pointer.net/blog/preliminary-systemdconf-2015-schedule.html</link><description>&lt;h1&gt;A Preliminary systemd.conf 2015 Schedule is Now Online!&lt;/h1&gt;
&lt;p&gt;We are happy to announce that an initial, preliminary version of the
&lt;a href="https://systemd.events/systemdconf-2015/schedule"&gt;systemd.conf 2015
schedule&lt;/a&gt; is now
online! (Please ignore that some rows in the schedule link the same
session twice on that page. That's a bug in the web site CMS we are
working on to fix.)&lt;/p&gt;
&lt;p&gt;We got an overwhelming number of high-quality submissions during the
CfP!  Because there were so many good talks we really wanted to
accept, we decided to do two full days of talks now, leaving one more
day for the hackfest and BoFs. We also shortened many of the slots, to
make room for more. All in all we now have a schedule packed with
fantastic presentations!&lt;/p&gt;
&lt;p&gt;The areas covered range from containers, to system provisioning,
stateless systems, distributed init systems, the kdbus IPC, control
groups, systemd on the desktop, systemd in embedded devices,
configuration management and systemd, and systemd in downstream
distributions.&lt;/p&gt;
&lt;p&gt;We'd like to thank everybody who submited a presentation proposal!&lt;/p&gt;
&lt;p&gt;Also, don't forget to &lt;strong&gt;register&lt;/strong&gt; for the conference! Only a limited number of
registrations are available due to space constraints!
&lt;a href="https://systemd.events/systemdconf-2015/registration"&gt;Register here!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are still looking for sponsors. If you'd like to join the ranks of
systemd.conf 2015 sponsors, please have a look at our &lt;a href="https://systemd.events/systemdconf-2015/become-sponsor"&gt;Becoming a
Sponsor&lt;/a&gt; page!&lt;/p&gt;
&lt;p&gt;For further details about systemd.conf consult the &lt;a href="https://systemd.events/"&gt;conference
website&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 16 Sep 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2015-09-16:/blog/preliminary-systemdconf-2015-schedule.html</guid><category>projects</category></item><item><title>systemd.conf 2015 CfP REMINDER</title><link>https://0pointer.net/blog/systemdconf-2015-cfp-reminder.html</link><description>&lt;h1&gt;LAST REMINDER! systemd.conf 2015 Call for Presentations ends August 31st!&lt;/h1&gt;
&lt;p&gt;Here's the last reminder that the systemd.conf 2015 CfP ends on August
31st 11:59:59pm Central European Time (that's monday next week)! Make
sure to submit your proposals until then!&lt;/p&gt;
&lt;p&gt;Please submit your proposals &lt;a href="https://systemd.events/systemdconf-2015/call-presentations"&gt;on our
website&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;And don't forget to register for the conference! Only a limited number of
registrations are available due to space constraints!
&lt;a href="https://systemd.events/systemdconf-2015/registration"&gt;Register here!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For further details about systemd.conf consult the &lt;a href="https://systemd.events/"&gt;conference website&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 28 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2015-08-28:/blog/systemdconf-2015-cfp-reminder.html</guid><category>projects</category></item><item><title>First Round of systemd.conf 2015 Sponsors</title><link>https://0pointer.net/blog/first-round-of-systemdconf-2015-sponsors.html</link><description>&lt;h1&gt;First Round of systemd.conf 2015 Sponsors&lt;/h1&gt;
&lt;p&gt;We are happy to announce the first round of &lt;a href="https://systemd.events/"&gt;systemd.conf
2015&lt;/a&gt; sponsors!&lt;/p&gt;
&lt;p&gt;Our first &lt;strong&gt;Gold&lt;/strong&gt; sponsor is CoreOS!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/coreos"&gt;&lt;img src="https://systemd.events/sites/default/files/coreos-logo.png" width="240" height="105"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CoreOS develops software for modern infrastructure that delivers a consistent operating environment for distributed applications. CoreOS's commercial offering, Tectonic, is an enterprise-ready platform that combines Kubernetes and the CoreOS stack to run Linux containers. In addition CoreOS is the creator and maintainer of open source projects such as CoreOS Linux, etcd, fleet, flannel and rkt. The strategies and architectures that influence CoreOS allow companies like Google, Facebook and Twitter to run their services at scale with high resilience. Learn more about CoreOS here https://coreos.com/, Tectonic here, https://tectonic.com/ or follow CoreOS on Twitter @coreoslinux.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Silver&lt;/strong&gt; sponsor is &lt;em&gt;Codethink&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/codethink"&gt;&lt;img src="https://systemd.events/sites/default/files/codethink-logo_0.png" width="220" height="64"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Codethink is a software services consultancy, focusing on engineering reliable systems for long-term deployment with open source technologies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Bronze&lt;/strong&gt; sponsor is &lt;em&gt;Pantheon&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/pantheon"&gt;&lt;img src="https://systemd.events/sites/default/files/Pantheon_logo.png" width="220" height="91"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pantheon is a platform for professional website development, testing, and deployment. Supporting Drupal and WordPress, Pantheon runs over 100,000 websites for the world's top brands, universities, and media organizations on top of over a million containers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;strong&gt;Bronze&lt;/strong&gt; sponsor is &lt;em&gt;Pengutronix&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://systemd.events/systemdconf-2015/sponsors/pengutronix"&gt;&lt;img src="https://systemd.events/sites/default/files/pengutronix_0.png" width="220" height="76"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pengutronix provides consulting, training and development services for Embedded Linux to customers from the industry. The Kernel Team ports Linux to customer hardware and has more than 3100 patches in the official mainline kernel. In addition to lowlevel ports, the Pengutronix Application Team is responsible for board support packages based on PTXdist or Yocto and deals with system integration (this is where systemd plays an important role). The Graphics Team works on accelerated multimedia tasks, based on the Linux kernel, GStreamer, Qt and web technologies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We'd like to thank our sponsors for their support! Without sponsors our conference would not be possible!&lt;/p&gt;
&lt;p&gt;We'll shortly announce our second round of sponsors, please stay tuned!&lt;/p&gt;
&lt;p&gt;If you'd like to join the ranks of systemd.conf 2015 sponsors, please have a look at our &lt;a href="https://systemd.events/systemdconf-2015/become-sponsor"&gt;Becoming a Sponsor&lt;/a&gt; page!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reminder!&lt;/strong&gt; The systemd.conf 2015 Call for Presentations ends on monday, &lt;strong&gt;August 31st&lt;/strong&gt;! Please make sure to submit your proposals on the &lt;a href="https://systemd.events/systemdconf-2015/call-presentations"&gt;CfP page&lt;/a&gt; until then!&lt;/p&gt;
&lt;p&gt;Also, don't forget to &lt;strong&gt;register&lt;/strong&gt; for the conference! Only a limited number of
registrations are available due to space constraints!
&lt;a href="https://systemd.events/systemdconf-2015/registration"&gt;Register here!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For further details about systemd.conf consult the &lt;a href="https://systemd.events/"&gt;conference website&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 25 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2015-08-25:/blog/first-round-of-systemdconf-2015-sponsors.html</guid><category>projects</category></item><item><title>systemd.conf 2015 Call for Presentations</title><link>https://0pointer.net/blog/systemdconf-2015-call-for-presentations.html</link><description>&lt;h1&gt;REMINDER! systemd.conf 2015 Call for Presentations ends August 31st!&lt;/h1&gt;
&lt;p&gt;We'd like to remind you that the systemd.conf 2015 Call for Presentations ends
on &lt;strong&gt;August 31st&lt;/strong&gt;! Please submit your presentation proposals before that data
&lt;a href="https://systemd.events/systemdconf-2015/call-presentations"&gt;on our website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are specifically interested in submissions from projects and vendors building
today's and tomorrow's &lt;strong&gt;products&lt;/strong&gt;, &lt;strong&gt;services&lt;/strong&gt; and &lt;strong&gt;devices&lt;/strong&gt; with systemd. We'd like to
learn about the problems you encounter and the benefits you see! Hence, if
you work for a company using systemd, please submit a presentation!&lt;/p&gt;
&lt;p&gt;We are also specifically interested in submissions from &lt;strong&gt;downstream&lt;/strong&gt; &lt;strong&gt;distribution&lt;/strong&gt;
&lt;strong&gt;maintainers&lt;/strong&gt; of systemd! If you develop or maintain systemd packages in a
distribution, please submit a presentation reporting about the state, future
and the problems of systemd packaging so that we can improve downstream
collaboration!&lt;/p&gt;
&lt;p&gt;And of course, all talks regarding systemd usage in &lt;strong&gt;containers&lt;/strong&gt;, in the &lt;strong&gt;cloud&lt;/strong&gt;,
on &lt;strong&gt;servers&lt;/strong&gt;, on the &lt;strong&gt;desktop&lt;/strong&gt;, in &lt;strong&gt;mobile&lt;/strong&gt; and in &lt;strong&gt;embedded&lt;/strong&gt; are highly welcome! Talks
about systemd &lt;strong&gt;networking&lt;/strong&gt; and &lt;strong&gt;kdbus&lt;/strong&gt; IPC are very welcome too!&lt;/p&gt;
&lt;p&gt;Please submit your presentations until &lt;em&gt;August 31st&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;And don't forget to register for the conference! Only a limited number of
registrations are available due to space constraints!
&lt;a href="https://systemd.events/systemdconf-2015/registration"&gt;Register here!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, limited travel and entry fee sponsorship is available for community contributors. Please contact us for details!&lt;/p&gt;
&lt;p&gt;For further details about the CfP consult the &lt;a href="https://systemd.events/systemdconf-2015/call-presentations"&gt;CfP page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For further details about systemd.conf consult the &lt;a href="https://systemd.events/"&gt;conference website&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 19 Aug 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2015-08-19:/blog/systemdconf-2015-call-for-presentations.html</guid><category>projects</category></item><item><title>Announcing systemd.conf 2015</title><link>https://0pointer.net/blog/announcing-systemdconf-2015.html</link><description>&lt;h1&gt;Announcing systemd.conf 2015&lt;/h1&gt;
&lt;p&gt;We are happy to announce the inaugural &lt;a href="https://systemd.events/"&gt;systemd.conf 2015&lt;/a&gt; conference of the &lt;a href="https://wiki.freedesktop.org/www/Software/systemd/"&gt;systemd project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The conference takes place November 5th-7th, 2015 in Berlin, Germany.&lt;/p&gt;
&lt;p&gt;Only a limited number of tickets are available, hence make sure to sign up quickly.&lt;/p&gt;
&lt;p&gt;For further details consult the &lt;a href="https://systemd.events/"&gt;conference website&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 29 Jul 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2015-07-29:/blog/announcing-systemdconf-2015.html</guid><category>projects</category></item><item><title>The new sd-bus API of systemd</title><link>https://0pointer.net/blog/the-new-sd-bus-api-of-systemd.html</link><description>&lt;p&gt;With the new &lt;a href="http://lists.freedesktop.org/archives/systemd-devel/2015-June/033170.html"&gt;v221 release of
systemd&lt;/a&gt;
we are declaring the
&lt;a href="https://github.com/systemd/systemd/blob/master/src/systemd/sd-bus.h"&gt;sd-bus&lt;/a&gt;
API shipped with
&lt;a href="https://wiki.freedesktop.org/www/Software/systemd/"&gt;systemd&lt;/a&gt;
stable. sd-bus is our minimal &lt;a href="https://en.wikipedia.org/wiki/D-Bus"&gt;D-Bus
IPC&lt;/a&gt; C library, supporting as
back-ends both classic socket-based D-Bus and
&lt;a href="https://github.com/systemd/kdbus"&gt;kdbus&lt;/a&gt;. The library has been been
part of systemd for a while, but has only been used internally, since
we wanted to have the liberty to still make API changes without
affecting external consumers of the library. However, now we are
confident to commit to a stable API for it, starting with v221.&lt;/p&gt;
&lt;p&gt;In this blog story I hope to provide you with a quick overview on
sd-bus, a short reiteration on D-Bus and its concepts, as well as a
few simple examples how to write D-Bus clients and services with it.&lt;/p&gt;
&lt;h1&gt;What is D-Bus again?&lt;/h1&gt;
&lt;p&gt;Let's start with a quick reminder what
&lt;a href="https://en.wikipedia.org/wiki/D-Bus"&gt;D-Bus&lt;/a&gt; actually is: it's a
powerful, generic IPC system for Linux and other operating systems. It
knows concepts like buses, objects, interfaces, methods, signals,
properties. It provides you with fine-grained access control, a rich
type system, discoverability, introspection, monitoring, reliable
multicasting, service activation, file descriptor passing, and
more. There are bindings for numerous programming languages that are
used on Linux.&lt;/p&gt;
&lt;p&gt;D-Bus has been a core component of Linux systems since more than 10
years. It is certainly the most widely established high-level local
IPC system on Linux. Since systemd's inception it has been the IPC
system it exposes its interfaces on. And even before systemd, it was
the IPC system Upstart used to expose its interfaces. It is used by
GNOME, by KDE and by a variety of system components.&lt;/p&gt;
&lt;p&gt;D-Bus refers to both &lt;a href="http://dbus.freedesktop.org/doc/dbus-specification.html"&gt;a
specification&lt;/a&gt;,
and &lt;a href="https://wiki.freedesktop.org/www/Software/dbus/"&gt;a reference
implementation&lt;/a&gt;. The
reference implementation provides both a bus server component, as well
as a client library. While there are multiple other, popular
reimplementations of the client library ‚Äì for both C and other
programming languages ‚Äì, the only commonly used server side is the
one from the reference implementation. (However, the kdbus project is
working on providing an alternative to this server implementation as a
kernel component.)&lt;/p&gt;
&lt;p&gt;D-Bus is mostly used as local IPC, on top of AF_UNIX sockets. However,
the protocol may be used on top of TCP/IP as well. It does not
natively support encryption, hence using D-Bus directly on TCP is
usually not a good idea. It is possible to combine D-Bus with a
transport like ssh in order to secure it. systemd uses this to make
many of its APIs accessible remotely.&lt;/p&gt;
&lt;p&gt;A frequently asked question about D-Bus is why it exists at all,
given that AF_UNIX sockets and FIFOs already exist on UNIX and have
been used for a long time successfully. To answer this question let's
make a comparison with popular web technology of today: what
AF_UNIX/FIFOs are to D-Bus, TCP is to HTTP/REST. While AF_UNIX
sockets/FIFOs only shovel raw bytes between processes, D-Bus defines
actual message encoding and adds concepts like method call
transactions, an object system, security mechanisms, multicasting and
more.&lt;/p&gt;
&lt;p&gt;From our 10year+ experience with D-Bus we know today that while there
are some areas where we can improve things (and we are working on
that, both with kdbus and sd-bus), it generally appears to be a very
well designed system, that stood the test of time, aged well and is
widely established. Today, if we'd sit down and design a completely
new IPC system incorporating all the experience and knowledge we
gained with D-Bus, I am sure the result would be very close to what
D-Bus already is.&lt;/p&gt;
&lt;p&gt;Or in short: D-Bus is great. If you hack on a Linux project and need a
local IPC, it should be your first choice. Not only because D-Bus is
well designed, but also because there aren't many alternatives that
can cover similar functionality.&lt;/p&gt;
&lt;h1&gt;Where does sd-bus fit in?&lt;/h1&gt;
&lt;p&gt;Let's discuss why sd-bus exists, how it compares with the other
existing C D-Bus libraries and why it might be a library to consider
for your project.&lt;/p&gt;
&lt;p&gt;For C, there are two established, popular D-Bus libraries: libdbus, as
it is shipped in the reference implementation of D-Bus, as well as
GDBus, a component of GLib, the low-level tool library of GNOME.&lt;/p&gt;
&lt;p&gt;Of the two libdbus is the much older one, as it was written at the
time the specification was put together. The library was written with
a focus on being portable and to be useful as back-end for higher-level
language bindings. Both of these goals required the API to be very
generic, resulting in a relatively baroque, hard-to-use API that lacks
the bits that make it easy and fun to use from C. It provides the
building blocks, but few tools to actually make it straightforward to
build a house from them. On the other hand, the library is suitable
for most use-cases (for example, it is OOM-safe making it suitable for
writing lowest level system software), and is portable to operating
systems like Windows or more exotic UNIXes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developer.gnome.org/gio/stable/gdbus-convenience.html"&gt;GDBus&lt;/a&gt;
is a much newer implementation. It has been written after considerable
experience with using a GLib/GObject wrapper around libdbus. GDBus is
implemented from scratch, shares no code with libdbus. Its design
differs substantially from libdbus, it contains code generators to
make it specifically easy to expose GObject objects on the bus, or
talking to D-Bus objects as GObject objects. It translates D-Bus data
types to GVariant, which is GLib's powerful data serialization
format. If you are used to GLib-style programming then you'll feel
right at home, hacking D-Bus services and clients with it is a lot
simpler than using libdbus.&lt;/p&gt;
&lt;p&gt;With sd-bus we now provide a third implementation, sharing no code
with either libdbus or GDBus. For us, the focus was on providing kind
of a middle ground between libdbus and GDBus: a low-level C library
that actually is fun to work with, that has enough syntactic sugar to
make it easy to write clients and services with, but on the other hand
is more low-level than GDBus/GLib/GObject/GVariant. To be able to use
it in systemd's various system-level components it needed to be
OOM-safe and minimal. Another major point we wanted to focus on was
supporting a kdbus back-end right from the beginning, in addition to
the socket transport of the original D-Bus specification ("dbus1"). In
fact, we wanted to design the library closer to kdbus' semantics than
to dbus1's, wherever they are different, but still cover both
transports nicely. In contrast to libdbus or GDBus portability is not
a priority for sd-bus, instead we try to make the best of the Linux
platform and expose specific Linux concepts wherever that is
beneficial. Finally, performance was also an issue (though a secondary
one): neither libdbus nor GDBus will win any speed records. We wanted
to improve on performance (throughput and latency) -- but simplicity
and correctness are more important to us. We believe the result of our
work delivers our goals quite nicely: the library is fun to use,
supports kdbus and sockets as back-end, is relatively minimal, and the
&lt;a href="http://lists.freedesktop.org/archives/systemd-devel/2015-May/031418.html"&gt;performance is substantially
better&lt;/a&gt;
than both libdbus and GDBus.&lt;/p&gt;
&lt;p&gt;To decide which of the three APIs to use for you C project, here are
short guidelines:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you hack on a GLib/GObject project, GDBus is definitely your
  first choice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If portability to non-Linux kernels -- including Windows, Mac OS and
  other UNIXes -- is important to you, use either GDBus (which more or
  less means buying into GLib/GObject) or libdbus (which requires a
  lot of manual work).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Otherwise, sd-bus would be my recommended choice.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I am not covering C++ specifically here, this is all about plain C
only. But do note: if you use Qt, then QtDBus is the D-Bus API of
choice, being a wrapper around libdbus.)&lt;/p&gt;
&lt;h1&gt;Introduction to D-Bus Concepts&lt;/h1&gt;
&lt;p&gt;To the uninitiated D-Bus usually appears to be a relatively opaque
technology. It uses lots of concepts that appear unnecessarily complex
and redundant on first sight. But actually, they make a lot of
sense. Let's have a look:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;bus&lt;/em&gt; is where you look for IPC services. There are usually two
   kinds of buses: a system bus, of which there's exactly one per
   system, and which is where you'd look for system services; and a
   user bus, of which there's one per user, and which is where you'd
   look for user services, like the address book service or the mail
   program. (Originally, the user bus was actually a session bus -- so
   that you get multiple of them if you log in many times as the same
   user --, and on most setups it still is, but we are working on
   moving things to a true user bus, of which there is only one per
   user on a system, regardless how many times that user happens to
   log in.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;service&lt;/em&gt; is a program that offers some IPC API on a bus. A
   service is identified by a name in reverse domain name
   notation. Thus, the &lt;code&gt;org.freedesktop.NetworkManager&lt;/code&gt; service on the
   system bus is where NetworkManager's APIs are available and
   &lt;code&gt;org.freedesktop.login1&lt;/code&gt; on the system bus is where
   &lt;code&gt;systemd-logind&lt;/code&gt;'s APIs are exposed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;client&lt;/em&gt; is a program that makes use of some IPC API on a bus. It
   talks to a service, monitors it and generally doesn't provide any
   services on its own. That said, lines are blurry and many services
   are also clients to other services. Frequently the term &lt;em&gt;peer&lt;/em&gt; is
   used as a generalization to refer to either a service or a client.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &lt;em&gt;object path&lt;/em&gt; is an identifier for an object on a specific
   service. In a way this is comparable to a C pointer, since that's
   how you generally reference a C object, if you hack object-oriented
   programs in C. However, C pointers are just memory addresses, and
   passing memory addresses around to other processes would make
   little sense, since they of course refer to the address space of
   the service, the client couldn't make sense of it. Thus, the D-Bus
   designers came up with the object path concept, which is just a
   string that looks like a file system path. Example:
   &lt;code&gt;/org/freedesktop/login1&lt;/code&gt; is the object path of the 'manager'
   object of the &lt;code&gt;org.freedesktop.login1&lt;/code&gt; service (which, as we
   remember from above, is still the service &lt;code&gt;systemd-logind&lt;/code&gt;
   exposes). Because object paths are structured like file system
   paths they can be neatly arranged in a tree, so that you end up
   with a venerable tree of objects. For example, you'll find all user
   sessions &lt;code&gt;systemd-logind&lt;/code&gt; manages below the
   &lt;code&gt;/org/freedesktop/login1/session&lt;/code&gt; sub-tree, for example called
   &lt;code&gt;/org/freedesktop/login1/session/_7&lt;/code&gt;,
   &lt;code&gt;/org/freedesktop/login1/session/_55&lt;/code&gt; and so on. How services
   precisely label their objects and arrange them in a tree is
   completely up to the developers of the services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each object that is identified by an object path has one or more
   &lt;em&gt;interfaces&lt;/em&gt;. An interface is a collection of signals, methods, and
   properties (collectively called &lt;em&gt;members&lt;/em&gt;), that belong
   together. The concept of a D-Bus interface is actually pretty
   much identical to what you know from programming languages such as
   Java, which also know an interface concept. Which interfaces an
   object implements are up the developers of the service. Interface
   names are in reverse domain name notation, much like service
   names. (Yes, that's admittedly confusing, in particular since it's
   pretty common for simpler services to reuse the service name string
   also as an interface name.) A couple of interfaces are standardized
   though and you'll find them available on many of the objects
   offered by the various services. Specifically, those are
   &lt;code&gt;org.freedesktop.DBus.Introspectable&lt;/code&gt;, &lt;code&gt;org.freedesktop.DBus.Peer&lt;/code&gt;
   and &lt;code&gt;org.freedesktop.DBus.Properties&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An interface can contain &lt;em&gt;methods&lt;/em&gt;. The word "method" is more or
   less just a fancy word for "function", and is a term used pretty
   much the same way in object-oriented languages such as Java. The
   most common interaction between D-Bus peers is that one peer
   invokes one of these methods on another peer and gets a reply. A
   D-Bus method takes a couple of parameters, and returns others. The
   parameters are transmitted in a type-safe way, and the type
   information is included in the introspection data you can query
   from each object. Usually, method names (and the other member
   types) follow a &lt;em&gt;CamelCase&lt;/em&gt; syntax. For example, &lt;code&gt;systemd-logind&lt;/code&gt;
   exposes an &lt;code&gt;ActivateSession&lt;/code&gt; method on the
   &lt;code&gt;org.freedesktop.login1.Manager&lt;/code&gt; interface that is available on the
   &lt;code&gt;/org/freedesktop/login1&lt;/code&gt; object of the &lt;code&gt;org.freedesktop.login1&lt;/code&gt;
   service.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;signature&lt;/em&gt; describes a set of parameters a function (or signal,
   property, see below) takes or returns. It's a series of characters
   that each encode one parameter by its type. The set of types
   available is pretty powerful. For example, there are simpler types
   like &lt;code&gt;s&lt;/code&gt; for string, or &lt;code&gt;u&lt;/code&gt; for 32bit integer, but also complex
   types such as &lt;code&gt;as&lt;/code&gt; for an array of strings or &lt;code&gt;a(sb)&lt;/code&gt; for an array
   of structures consisting of one string and one boolean each.  See
   &lt;a href="http://dbus.freedesktop.org/doc/dbus-specification.html#type-system"&gt;the D-Bus specification&lt;/a&gt;
   for the full explanation of the type system.  The
   &lt;code&gt;ActivateSession&lt;/code&gt; method mentioned above takes a single string as
   parameter (the parameter signature is hence &lt;code&gt;s&lt;/code&gt;), and returns
   nothing (the return signature is hence the empty string). Of
   course, the signature can get a lot more complex, see below for
   more examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;signal&lt;/em&gt; is another member type that the D-Bus object system
   knows. Much like a method it has a signature. However, they serve
   different purposes. While in a method call a single client issues a
   request on a single service, and that service sends back a response
   to the client, signals are for general notification of
   peers. Services send them out when they want to tell one or more
   peers on the bus that something happened or changed. In contrast to
   method calls and their replies they are hence usually broadcast
   over a bus. While method calls/replies are used for duplex
   one-to-one communication, signals are usually used for simplex
   one-to-many communication (note however that that's not a
   requirement, they can also be used one-to-one). Example:
   &lt;code&gt;systemd-logind&lt;/code&gt; broadcasts a &lt;code&gt;SessionNew&lt;/code&gt; signal from its manager
   object each time a user logs in, and a &lt;code&gt;SessionRemoved&lt;/code&gt; signal
   every time a user logs out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;em&gt;property&lt;/em&gt; is the third member type that the D-Bus object system
   knows. It's similar to the property concept known by languages like
   C#. Properties also have a signature, and are more or less just
   variables that an object exposes, that can be read or altered by
   clients. Example: &lt;code&gt;systemd-logind&lt;/code&gt; exposes a property &lt;code&gt;Docked&lt;/code&gt; of
   the signature &lt;code&gt;b&lt;/code&gt; (a boolean). It reflects whether &lt;code&gt;systemd-logind&lt;/code&gt;
   thinks the system is currently in a docking station of some form
   (only applies to laptops ‚Ä¶).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So much for the various concepts D-Bus knows. Of course, all these new
concepts might be overwhelming. Let's look at them from a different
perspective. I assume many of the readers have an understanding of
today's web technology, specifically HTTP and REST. Let's try to
compare the concept of a HTTP request with the concept of a D-Bus
method call:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A HTTP request you issue on a specific network. It could be the
   Internet, or it could be your local LAN, or a company
   VPN. Depending on which network you issue the request on, you'll be
   able to talk to a different set of servers. This is not unlike the
   "bus" concept of D-Bus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the network you then pick a specific HTTP server to talk
   to. That's roughly comparable to picking a service on a specific bus.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the HTTP server you then ask for a specific URL. The "path" part
   of the URL (by which I mean everything after the host name of the
   server, up to the last "/") is pretty similar to a D-Bus object path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The "file" part of the URL (by which I mean everything after the
   last slash, following the path, as described above), then defines
   the actual call to make. In D-Bus this could be mapped to an
   interface and method name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, the parameters of a HTTP call follow the path after the
   "?", they map to the signature of the D-Bus call.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, comparing an HTTP request to a D-Bus method call is a bit
comparing apples and oranges. However, I think it's still useful to
get a bit of a feeling of what maps to what.&lt;/p&gt;
&lt;h1&gt;From the shell&lt;/h1&gt;
&lt;p&gt;So much about the concepts and the gray theory behind them. Let's make
this exciting, let's actually see how this feels on a real system.&lt;/p&gt;
&lt;p&gt;Since a while systemd has included a tool &lt;code&gt;busctl&lt;/code&gt; that is useful to
explore and interact with the D-Bus object system. When invoked
without parameters, it will show you a list of all peers connected to
the system bus. (Use &lt;code&gt;--user&lt;/code&gt; to see the peers of your user bus
instead):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;busctl
&lt;span class="go"&gt;NAME                                       PID PROCESS         USER             CONNECTION    UNIT                      SESSION    DESCRIPTION&lt;/span&gt;
&lt;span class="go"&gt;:1.1                                         1 systemd         root             :1.1          -                         -          -&lt;/span&gt;
&lt;span class="go"&gt;:1.11                                      705 NetworkManager  root             :1.11         NetworkManager.service    -          -&lt;/span&gt;
&lt;span class="go"&gt;:1.14                                      744 gdm             root             :1.14         gdm.service               -          -&lt;/span&gt;
&lt;span class="go"&gt;:1.4                                       708 systemd-logind  root             :1.4          systemd-logind.service    -          -&lt;/span&gt;
&lt;span class="go"&gt;:1.7200                                  17563 busctl          lennart          :1.7200       session-1.scope           1          -&lt;/span&gt;
&lt;span class="go"&gt;[‚Ä¶]&lt;/span&gt;
&lt;span class="go"&gt;org.freedesktop.NetworkManager             705 NetworkManager  root             :1.11         NetworkManager.service    -          -&lt;/span&gt;
&lt;span class="go"&gt;org.freedesktop.login1                     708 systemd-logind  root             :1.4          systemd-logind.service    -          -&lt;/span&gt;
&lt;span class="go"&gt;org.freedesktop.systemd1                     1 systemd         root             :1.1          -                         -          -&lt;/span&gt;
&lt;span class="go"&gt;org.gnome.DisplayManager                   744 gdm             root             :1.14         gdm.service               -          -&lt;/span&gt;
&lt;span class="go"&gt;[‚Ä¶]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(I have shortened the output a bit, to make keep things brief).&lt;/p&gt;
&lt;p&gt;The list begins with a list of all peers currently connected to the
bus. They are identified by peer names like ":1.11". These are called
&lt;em&gt;unique names&lt;/em&gt; in D-Bus nomenclature. Basically, every peer has a
unique name, and they are assigned automatically when a peer connects
to the bus. They are much like an IP address if you so will. You'll
notice that a couple of peers are already connected, including our
little busctl tool itself as well as a number of system services. The
list then shows all actual services on the bus, identified by their
service names (as discussed above; to discern them from the unique
names these are also called &lt;em&gt;well-known names&lt;/em&gt;). In many ways
well-known names are similar to DNS host names, i.e. they are a
friendlier way to reference a peer, but on the lower level they just
map to an IP address, or in this comparison the unique name. Much like
you can connect to a host on the Internet by either its host name or
its IP address, you can also connect to a bus peer either by its
unique or its well-known name. (Note that each peer can have as many
well-known names as it likes, much like an IP address can have
multiple host names referring to it).&lt;/p&gt;
&lt;p&gt;OK, that's already kinda cool. Try it for yourself, on your local
machine (all you need is a recent, systemd-based distribution).&lt;/p&gt;
&lt;p&gt;Let's now go the next step. Let's see which objects the
&lt;code&gt;org.freedesktop.login1&lt;/code&gt; service actually offers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;busctl tree org.freedesktop.login1
&lt;span class="go"&gt;‚îî‚îÄ/org/freedesktop/login1&lt;/span&gt;
&lt;span class="go"&gt;  ‚îú‚îÄ/org/freedesktop/login1/seat&lt;/span&gt;
&lt;span class="go"&gt;  ‚îÇ ‚îú‚îÄ/org/freedesktop/login1/seat/seat0&lt;/span&gt;
&lt;span class="go"&gt;  ‚îÇ ‚îî‚îÄ/org/freedesktop/login1/seat/self&lt;/span&gt;
&lt;span class="go"&gt;  ‚îú‚îÄ/org/freedesktop/login1/session&lt;/span&gt;
&lt;span class="go"&gt;  ‚îÇ ‚îú‚îÄ/org/freedesktop/login1/session/_31&lt;/span&gt;
&lt;span class="go"&gt;  ‚îÇ ‚îî‚îÄ/org/freedesktop/login1/session/self&lt;/span&gt;
&lt;span class="go"&gt;  ‚îî‚îÄ/org/freedesktop/login1/user&lt;/span&gt;
&lt;span class="go"&gt;    ‚îú‚îÄ/org/freedesktop/login1/user/_1000&lt;/span&gt;
&lt;span class="go"&gt;    ‚îî‚îÄ/org/freedesktop/login1/user/self&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Pretty, isn't it? What's actually even nicer, and which the output
does &lt;em&gt;not&lt;/em&gt; show is that there's full command line completion
available: as you press TAB the shell will auto-complete the service
names for you. It's a real pleasure to explore your D-Bus objects that
way!&lt;/p&gt;
&lt;p&gt;The output shows some objects that you might recognize from the
explanations above. Now, let's go further. Let's see what interfaces,
methods, signals and properties one of these objects actually exposes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;busctl introspect org.freedesktop.login1 /org/freedesktop/login1/session/_31
&lt;span class="go"&gt;NAME                                TYPE      SIGNATURE RESULT/VALUE                             FLAGS&lt;/span&gt;
&lt;span class="go"&gt;org.freedesktop.DBus.Introspectable interface -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.Introspect                         method    -         s                                        -&lt;/span&gt;
&lt;span class="go"&gt;org.freedesktop.DBus.Peer           interface -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.GetMachineId                       method    -         s                                        -&lt;/span&gt;
&lt;span class="go"&gt;.Ping                               method    -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;org.freedesktop.DBus.Properties     interface -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.Get                                method    ss        v                                        -&lt;/span&gt;
&lt;span class="go"&gt;.GetAll                             method    s         a{sv}                                    -&lt;/span&gt;
&lt;span class="go"&gt;.Set                                method    ssv       -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.PropertiesChanged                  signal    sa{sv}as  -                                        -&lt;/span&gt;
&lt;span class="go"&gt;org.freedesktop.login1.Session      interface -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.Activate                           method    -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.Kill                               method    si        -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.Lock                               method    -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.PauseDeviceComplete                method    uu        -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.ReleaseControl                     method    -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.ReleaseDevice                      method    uu        -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.SetIdleHint                        method    b         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.TakeControl                        method    b         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.TakeDevice                         method    uu        hb                                       -&lt;/span&gt;
&lt;span class="go"&gt;.Terminate                          method    -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.Unlock                             method    -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.Active                             property  b         true                                     emits-change&lt;/span&gt;
&lt;span class="go"&gt;.Audit                              property  u         1                                        const&lt;/span&gt;
&lt;span class="go"&gt;.Class                              property  s         &amp;quot;user&amp;quot;                                   const&lt;/span&gt;
&lt;span class="go"&gt;.Desktop                            property  s         &amp;quot;&amp;quot;                                       const&lt;/span&gt;
&lt;span class="go"&gt;.Display                            property  s         &amp;quot;&amp;quot;                                       const&lt;/span&gt;
&lt;span class="go"&gt;.Id                                 property  s         &amp;quot;1&amp;quot;                                      const&lt;/span&gt;
&lt;span class="go"&gt;.IdleHint                           property  b         true                                     emits-change&lt;/span&gt;
&lt;span class="go"&gt;.IdleSinceHint                      property  t         1434494624206001                         emits-change&lt;/span&gt;
&lt;span class="go"&gt;.IdleSinceHintMonotonic             property  t         0                                        emits-change&lt;/span&gt;
&lt;span class="go"&gt;.Leader                             property  u         762                                      const&lt;/span&gt;
&lt;span class="go"&gt;.Name                               property  s         &amp;quot;lennart&amp;quot;                                const&lt;/span&gt;
&lt;span class="go"&gt;.Remote                             property  b         false                                    const&lt;/span&gt;
&lt;span class="go"&gt;.RemoteHost                         property  s         &amp;quot;&amp;quot;                                       const&lt;/span&gt;
&lt;span class="go"&gt;.RemoteUser                         property  s         &amp;quot;&amp;quot;                                       const&lt;/span&gt;
&lt;span class="go"&gt;.Scope                              property  s         &amp;quot;session-1.scope&amp;quot;                        const&lt;/span&gt;
&lt;span class="go"&gt;.Seat                               property  (so)      &amp;quot;seat0&amp;quot; &amp;quot;/org/freedesktop/login1/seat... const&lt;/span&gt;
&lt;span class="go"&gt;.Service                            property  s         &amp;quot;gdm-autologin&amp;quot;                          const&lt;/span&gt;
&lt;span class="go"&gt;.State                              property  s         &amp;quot;active&amp;quot;                                 -&lt;/span&gt;
&lt;span class="go"&gt;.TTY                                property  s         &amp;quot;/dev/tty1&amp;quot;                              const&lt;/span&gt;
&lt;span class="go"&gt;.Timestamp                          property  t         1434494630344367                         const&lt;/span&gt;
&lt;span class="go"&gt;.TimestampMonotonic                 property  t         34814579                                 const&lt;/span&gt;
&lt;span class="go"&gt;.Type                               property  s         &amp;quot;x11&amp;quot;                                    const&lt;/span&gt;
&lt;span class="go"&gt;.User                               property  (uo)      1000 &amp;quot;/org/freedesktop/login1/user/_1... const&lt;/span&gt;
&lt;span class="go"&gt;.VTNr                               property  u         1                                        const&lt;/span&gt;
&lt;span class="go"&gt;.Lock                               signal    -         -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.PauseDevice                        signal    uus       -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.ResumeDevice                       signal    uuh       -                                        -&lt;/span&gt;
&lt;span class="go"&gt;.Unlock                             signal    -         -                                        -&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As before, the busctl command supports command line completion, hence
both the service name and the object path used are easily put together
on the shell simply by pressing TAB. The output shows the methods,
properties, signals of one of the session objects that are currently
made available by &lt;code&gt;systemd-logind&lt;/code&gt;. There's a section for each
interface the object knows. The second column tells you what kind of
member is shown in the line. The third column shows the signature of
the member. In case of method calls that's the input parameters, the
fourth column shows what is returned. For properties, the fourth
column encodes the current value of them.&lt;/p&gt;
&lt;p&gt;So far, we just explored. Let's take the next step now: let's become
active - let's call a method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;busctl call org.freedesktop.login1 /org/freedesktop/login1/session/_31 org.freedesktop.login1.Session Lock
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I don't think I need to mention this anymore, but anyway: again
there's full command line completion available. The third argument is
the interface name, the fourth the method name, both can be easily
completed by pressing TAB. In this case we picked the &lt;code&gt;Lock&lt;/code&gt; method,
which activates the screen lock for the specific session. And yupp,
the instant I pressed enter on this line my screen lock turned on
(this only works on DEs that correctly hook into &lt;code&gt;systemd-logind&lt;/code&gt; for
this to work. GNOME works fine, and KDE should work too).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Lock&lt;/code&gt; method call we picked is very simple, as it takes no
parameters and returns none. Of course, it can get more complicated
for some calls. Here's another example, this time using one of
systemd's own bus calls, to start an arbitrary system unit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;busctl call org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager StartUnit ss &lt;span class="s2"&gt;&amp;quot;cups.service&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replace&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;o &amp;quot;/org/freedesktop/systemd1/job/42684&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This call takes two strings as input parameters, as we denote in the
signature string that follows the method name (as usual, command line
completion helps you getting this right). Following the signature the
next two parameters are simply the two strings to pass. The specified
signature string hence indicates what comes next. systemd's StartUnit
method call takes the unit name to start as first parameter, and the
mode in which to start it as second. The call returned a single object
path value. It is encoded the same way as the input parameter: a
signature (just &lt;code&gt;o&lt;/code&gt; for the object path) followed by the actual value.&lt;/p&gt;
&lt;p&gt;Of course, some method call parameters can get a ton more complex, but
with &lt;code&gt;busctl&lt;/code&gt; it's relatively easy to encode them all. See &lt;a href="http://www.freedesktop.org/software/systemd/man/busctl.html"&gt;the man
page&lt;/a&gt; for
details.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;busctl&lt;/code&gt; knows a number of other operations. For example, you can use
it to monitor D-Bus traffic as it happens (including generating a
&lt;code&gt;.cap&lt;/code&gt; file for use with Wireshark!) or you can set or get specific
properties. However, this blog story was supposed to be about sd-bus,
not &lt;code&gt;busctl&lt;/code&gt;, hence let's cut this short here, and let me direct you
to the man page in case you want to know more about the tool.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;busctl&lt;/code&gt; (like the rest of system) is implemented using the sd-bus
API. Thus it exposes many of the features of sd-bus itself. For
example, you can use to connect to remote or container buses. It
understands both kdbus and classic D-Bus, and more!&lt;/p&gt;
&lt;h1&gt;sd-bus&lt;/h1&gt;
&lt;p&gt;But enough! Let's get back on topic, let's talk about sd-bus itself.&lt;/p&gt;
&lt;p&gt;The sd-bus set of APIs is mostly contained in the header file
&lt;a href="https://github.com/systemd/systemd/blob/master/src/systemd/sd-bus.h"&gt;sd-bus.h&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's a random selection of features of the library, that make it
compare well with the other implementations available.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Supports both kdbus and dbus1 as back-end.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Has high-level support for connecting to remote buses via ssh, and
   to buses of local OS containers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Powerful credential model, to implement authentication of clients
   in services. Currently 34 individual fields are supported, from the
   PID of the client to the cgroup or capability sets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for tracking the life-cycle of peers in order to release
   local objects automatically when all peers referencing them
   disconnected.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The client builds an efficient decision tree to determine which
   handlers to deliver an incoming bus message to.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automatically translates D-Bus errors into UNIX style errors and
   back (this is lossy though), to ensure best integration of D-Bus
   into low-level Linux programs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Powerful but lightweight object model for exposing local objects on
   the bus. Automatically generates introspection as necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The API is currently not fully documented, but we are working on
completing the set of manual pages. For details
&lt;a href="http://www.freedesktop.org/software/systemd/man/index.html#S"&gt;see all pages starting with &lt;code&gt;sd_bus_&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Invoking a Method, from C, with sd-bus&lt;/h1&gt;
&lt;p&gt;So much about the library in general. Here's an example for connecting
to the bus and issuing a method call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;systemd/sd-bus.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_bus_error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SD_BUS_ERROR_NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_bus_message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_bus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Connect to the system bus */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_open_system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to connect to system bus: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Issue the method call and store the respons message in m */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_call_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.freedesktop.systemd1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="cm"&gt;/* service to contact */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/org/freedesktop/systemd1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="cm"&gt;/* object path */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.freedesktop.systemd1.Manager&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cm"&gt;/* interface name */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;StartUnit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;                          &lt;/span&gt;&lt;span class="cm"&gt;/* method name */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="cm"&gt;/* object to return error in */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;                                   &lt;/span&gt;&lt;span class="cm"&gt;/* return message on success */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;                                 &lt;/span&gt;&lt;span class="cm"&gt;/* input signature */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;cups.service&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="cm"&gt;/* first argument */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                               &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;replace&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;                           &lt;/span&gt;&lt;span class="cm"&gt;/* second argument */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to issue method call: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Parse the response message */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_message_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to parse response message: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Queued service job as %s.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_bus_error_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_bus_message_unref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_bus_unref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Save this example as &lt;code&gt;bus-client.c&lt;/code&gt;, then build it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gcc bus-client.c -o bus-client &lt;span class="sb"&gt;`&lt;/span&gt;pkg-config --cflags --libs libsystemd&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will generate a binary &lt;code&gt;bus-client&lt;/code&gt; you can now run. Make sure to
run it as root though, since access to the &lt;code&gt;StartUnit&lt;/code&gt; method is
privileged:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;# &lt;/span&gt;./bus-client
&lt;span class="go"&gt;Queued service job as /org/freedesktop/systemd1/job/3586.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that's it already, our first example. It showed how we invoked a
method call on the bus. The actual function call of the method is very
close to the &lt;code&gt;busctl&lt;/code&gt; command line we used before. I hope the code
excerpt needs little further explanation. It's supposed to give you a
taste how to write D-Bus clients with sd-bus. For more more
information please have a look at the header file, the man page or
even the sd-bus sources.&lt;/p&gt;
&lt;h1&gt;Implementing a Service, in C, with sd-bus&lt;/h1&gt;
&lt;p&gt;Of course, just calling a single method is a rather simplistic
example. Let's have a look on how to write a bus service. We'll write
a small calculator service, that exposes a single object, which
implements an interface that exposes two methods: one to multiply two
64bit signed integers, and one to divide one 64bit signed integer by
another.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;systemd/sd-bus.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;method_multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd_bus_message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;userdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ret_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int64_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Read the parameters */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_message_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to parse parameters: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Reply with the response */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_reply_method_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;method_divide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sd_bus_message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;userdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ret_error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int64_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Read the parameters */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_message_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to parse parameters: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Return an error on division by zero */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;sd_bus_error_set_const&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret_error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;net.poettering.DivisionByZero&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sorry, can&amp;#39;t allow division by zero.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;EINVAL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_reply_method_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cm"&gt;/* The vtable of our little object, implements the net.poettering.Calculator interface */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_vtable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;calculator_vtable&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;SD_BUS_VTABLE_START&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;SD_BUS_METHOD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Multiply&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;method_multiply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SD_BUS_VTABLE_UNPRIVILEGED&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;SD_BUS_METHOD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Divide&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;method_divide&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;SD_BUS_VTABLE_UNPRIVILEGED&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;SD_BUS_VTABLE_END&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_bus_slot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_bus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Connect to the user bus this time */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_open_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to connect to system bus: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Install the object */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_add_object_vtable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                     &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                     &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/net/poettering/Calculator&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cm"&gt;/* object path */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                     &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;net.poettering.Calculator&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="cm"&gt;/* interface name */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                     &lt;/span&gt;&lt;span class="n"&gt;calculator_vtable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                                     &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to issue method call: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cm"&gt;/* Take a well-known service name so that clients can find us */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_request_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;net.poettering.Calculator&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to acquire service name: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(;;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="cm"&gt;/* Process requests */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to process bus: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cm"&gt;/* we processed a request, try to process another one, right-away */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="cm"&gt;/* Wait for the next request to process */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sd_bus_wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to wait on bus: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="k"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nl"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_bus_slot_unref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;sd_bus_unref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Save this example as &lt;code&gt;bus-service.c&lt;/code&gt;, then build it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;gcc bus-service.c -o bus-service &lt;span class="sb"&gt;`&lt;/span&gt;pkg-config --cflags --libs libsystemd&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let's run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;./bus-service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In another terminal, let's try to talk to it. Note that this service
is now on the user bus, not on the system bus as before. We do this
for simplicity reasons: on the system bus access to services is
tightly controlled so unprivileged clients cannot request privileged
operations. On the user bus however things are simpler: as only
processes of the user owning the bus can connect no further policy
enforcement will complicate this example. Because the service is on
the user bus, we have to pass the &lt;code&gt;--user&lt;/code&gt; switch on the &lt;code&gt;busctl&lt;/code&gt;
command line. Let's start with looking at the service's object tree.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;busctl --user tree net.poettering.Calculator
&lt;span class="go"&gt;‚îî‚îÄ/net/poettering/Calculator&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we can see, there's only a single object on the service, which is
not surprising, given that our code above only registered one. Let's
see the interfaces and the members this object exposes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;busctl --user introspect net.poettering.Calculator /net/poettering/Calculator
&lt;span class="go"&gt;NAME                                TYPE      SIGNATURE RESULT/VALUE FLAGS&lt;/span&gt;
&lt;span class="go"&gt;net.poettering.Calculator           interface -         -            -&lt;/span&gt;
&lt;span class="go"&gt;.Divide                             method    xx        x            -&lt;/span&gt;
&lt;span class="go"&gt;.Multiply                           method    xx        x            -&lt;/span&gt;
&lt;span class="go"&gt;org.freedesktop.DBus.Introspectable interface -         -            -&lt;/span&gt;
&lt;span class="go"&gt;.Introspect                         method    -         s            -&lt;/span&gt;
&lt;span class="go"&gt;org.freedesktop.DBus.Peer           interface -         -            -&lt;/span&gt;
&lt;span class="go"&gt;.GetMachineId                       method    -         s            -&lt;/span&gt;
&lt;span class="go"&gt;.Ping                               method    -         -            -&lt;/span&gt;
&lt;span class="go"&gt;org.freedesktop.DBus.Properties     interface -         -            -&lt;/span&gt;
&lt;span class="go"&gt;.Get                                method    ss        v            -&lt;/span&gt;
&lt;span class="go"&gt;.GetAll                             method    s         a{sv}        -&lt;/span&gt;
&lt;span class="go"&gt;.Set                                method    ssv       -            -&lt;/span&gt;
&lt;span class="go"&gt;.PropertiesChanged                  signal    sa{sv}as  -            -&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The sd-bus library automatically added a couple of generic interfaces,
as mentioned above. But the first interface we see is actually the one
we added! It shows our two methods, and both take "xx" (two 64bit
signed integers) as input parameters, and return one "x". Great! But
does it work?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;busctl --user call net.poettering.Calculator /net/poettering/Calculator net.poettering.Calculator Multiply xx &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;
&lt;span class="go"&gt;x 35&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Woohoo! We passed the two integers 5 and 7, and the service actually
multiplied them for us and returned a single integer 35! Let's try the
other method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;busctl --user call net.poettering.Calculator /net/poettering/Calculator net.poettering.Calculator Divide xx &lt;span class="m"&gt;99&lt;/span&gt; &lt;span class="m"&gt;17&lt;/span&gt;
&lt;span class="go"&gt;x 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Oh, wow! It can even do integer division! Fantastic! But let's trick
it into dividing by zero:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;busctl --user call net.poettering.Calculator /net/poettering/Calculator net.poettering.Calculator Divide xx &lt;span class="m"&gt;43&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="go"&gt;Sorry, can&amp;#39;t allow division by zero.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nice! It detected this nicely and returned a clean error about it. If
you look in the source code example above you'll see how precisely we
generated the error.&lt;/p&gt;
&lt;p&gt;And that's really all I have for today. Of course, the examples I
showed are short, and I don't get into detail here on what precisely
each line does. However, this is supposed to be a short introduction
into D-Bus and sd-bus, and it's already way too long for that ‚Ä¶&lt;/p&gt;
&lt;p&gt;I hope this blog story was useful to you. If you are interested in
using sd-bus for your own programs, I hope this gets you started. If
you have further questions, check the (incomplete) man pages, and
inquire us on IRC or the systemd mailing list. If you need more
examples, have a look at the systemd source tree, all of systemd's
many bus services use sd-bus extensively.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2015-06-19:/blog/the-new-sd-bus-api-of-systemd.html</guid><category>projects</category></item><item><title>Revisiting How We Put Together Linux Systems</title><link>https://0pointer.net/blog/revisiting-how-we-put-together-linux-systems.html</link><description>&lt;p&gt;In a previous blog story I discussed
&lt;a href="http://0pointer.net/blog/projects/stateless.html"&gt;Factory Reset, Stateless Systems, Reproducible Systems &amp;amp; Verifiable Systems&lt;/a&gt;,
I now want to take the opportunity to explain a bit where we want to
take this with
&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; in the
longer run, and what we want to build out of it. This is going to be a
longer story, so better grab a cold bottle of
&lt;a href="https://en.wikipedia.org/wiki/Club-Mate"&gt;Club Mate&lt;/a&gt; before you start
reading.&lt;/p&gt;
&lt;p&gt;Traditional Linux distributions are built around packaging systems
like RPM or dpkg, and an organization model where upstream developers
and downstream packagers are relatively clearly separated: an upstream
developer writes code, and puts it somewhere online, in a tarball. A
packager than grabs it and turns it into RPMs/DEBs. The user then
grabs these RPMs/DEBs and installs them locally on the system. For a
variety of uses this is a fantastic scheme: users have a large
selection of readily packaged software available, in mostly uniform
packaging, from a single source they can trust. In this scheme the
distribution vets all software it packages, and as long as the user
trusts the distribution all should be good. The distribution takes the
responsibility of ensuring the software is not malicious, of timely
fixing security problems and helping the user if something is wrong.&lt;/p&gt;
&lt;h1&gt;Upstream Projects&lt;/h1&gt;
&lt;p&gt;However, this scheme also has a number of problems, and doesn't fit
many use-cases of our software particularly well. Let's have a look at
the problems of this scheme for many upstreams:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Upstream software vendors are fully dependent on downstream
  distributions to package their stuff. It's the downstream
  distribution that decides on schedules, packaging details, and how
  to handle support. Often upstream vendors want much faster release
  cycles then the downstream distributions follow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Realistic testing is extremely unreliable and next to
  impossible. Since the end-user can run a variety of different
  package versions together, and expects the software he runs to just
  work on any combination, the test matrix explodes. If upstream tests
  its version on distribution X release Y, then there's no guarantee
  that that's the precise combination of packages that the end user
  will eventually run. In fact, it is very unlikely that the end user
  will, since most distributions probably updated a number of
  libraries the package relies on by the time the package ends up being
  made available to the user. The fact that each package can be
  individually updated by the user, and each user can combine library
  versions, plug-ins and executables relatively freely, results in a high
  risk of something going wrong.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since there are so many different distributions in so many different
  versions around, if upstream tries to build and test software for
  them it needs to do so for a large number of distributions, which is
  a massive effort.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The distributions are actually quite different in many ways. In
  fact, they are different in a lot of the most basic
  functionality. For example, the path where to put x86-64 libraries
  is different on Fedora and Debian derived systems..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Developing software for a number of distributions and versions is
  hard: if you want to do it, you need to actually install them, each
  one of them, manually, and then build your software for each.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since most downstream distributions have strict licensing and
  trademark requirements (and rightly so), any kind of closed source
  software (or otherwise non-free) does not fit into this scheme at
  all.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This all together makes it really hard for many upstreams to work
nicely with the current way how Linux works. Often they try to improve
the situation for them, for example by bundling libraries, to make
their test and build matrices smaller.&lt;/p&gt;
&lt;h1&gt;System Vendors&lt;/h1&gt;
&lt;p&gt;The &lt;em&gt;toolbox&lt;/em&gt; approach of classic Linux distributions is fantastic for
people who want to put together their individual system, nicely
adjusted to exactly what they need. However, this is not really how
many of today's Linux systems are built, installed or updated. If you
build any kind of embedded device, a server system, or even user
systems, you frequently do your work based on complete system images,
that are linearly versioned. You build these images somewhere, and
then you replicate them atomically to a larger number of systems. On
these systems, you don't install or remove packages, you get a defined
set of files, and besides installing or updating the system there are
no ways how to change the set of tools you get.&lt;/p&gt;
&lt;p&gt;The current Linux distributions are not particularly good at providing
for this major use-case of Linux. Their strict focus on individual
packages as well as package managers as end-user install and update
tool is incompatible with what many system vendors want.&lt;/p&gt;
&lt;h1&gt;Users&lt;/h1&gt;
&lt;p&gt;The classic Linux distribution scheme is frequently not what end users
want, either. Many users are used to app markets like Android, Windows
or iOS/Mac have. Markets are a platform that doesn't package, build or
maintain software like distributions do, but simply allows users to
quickly find and download the software they need, with the app vendor
responsible for keeping the app updated, secured, and all that on the
vendor's release cycle. Users tend to be impatient. They want their
software quickly, and the fine distinction between trusting a single
distribution or a myriad of app developers individually is usually not
important for them. The companies behind the marketplaces usually try
to improve this trust problem by providing sand-boxing technologies: as
a replacement for the distribution that audits, vets, builds and
packages the software and thus allows users to trust it to a certain
level, these vendors try to find technical solutions to ensure that
the software they offer for download can't be malicious.&lt;/p&gt;
&lt;h1&gt;Existing Approaches To Fix These Problems&lt;/h1&gt;
&lt;p&gt;Now, all the issues pointed out above are not new, and there are
sometimes quite successful attempts to do something about it. Ubuntu
Apps, Docker, Software Collections, ChromeOS, CoreOS all fix part of
this problem set, usually with a strict focus on one facet of Linux
systems. For example, Ubuntu Apps focus strictly on end user (desktop)
applications, and don't care about how we built/update/install the OS
itself, or containers. Docker OTOH focuses on containers only, and
doesn't care about end-user apps. Software Collections tries to focus
on the development environments. ChromeOS focuses on the OS itself,
but only for end-user devices. CoreOS also focuses on the OS, but
only for server systems.&lt;/p&gt;
&lt;p&gt;The approaches they find are usually good at specific things, and use
a variety of different technologies, on different layers. However,
none of these projects tried to fix this problems in a generic way,
for all uses, right in the core components of the OS itself.&lt;/p&gt;
&lt;p&gt;Linux has come to tremendous successes because its kernel is so
generic: you can build supercomputers and tiny embedded devices out of
it. It's time we come up with a basic, reusable scheme how to solve
the problem set described above, that is equally generic.&lt;/p&gt;
&lt;h1&gt;What We Want&lt;/h1&gt;
&lt;p&gt;The systemd cabal (Kay Sievers, Harald Hoyer, Daniel Mack, Tom
Gundersen, David Herrmann, and yours truly) recently met in Berlin
about all these things, and tried to come up with a scheme that is
somewhat simple, but tries to solve the issues generically, for all
use-cases, as part of the systemd project. All that in a way that is
somewhat compatible with the current scheme of distributions, to allow
a slow, gradual adoption. Also, and that's something one cannot stress
enough: the &lt;em&gt;toolbox&lt;/em&gt; scheme of classic Linux distributions is
actually a good one, and for many cases the right one. However, we
need to make sure we make distributions relevant again for &lt;em&gt;all&lt;/em&gt;
use-cases, not just those of highly individualized systems.&lt;/p&gt;
&lt;p&gt;Anyway, so let's summarize what we are trying to do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We want an efficient way that allows vendors to package their
  software (regardless if just an app, or the whole OS) directly for
  the end user, and know the precise combination of libraries and
  packages it will operate with.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want to allow end users and administrators to install these
  packages on their systems, regardless which distribution they have
  installed on it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want a unified solution that ultimately can cover updates for
  full systems, OS containers, end user apps, programming ABIs, and
  more. These updates shall be double-buffered, (at least). This is an
  absolute necessity if we want to prepare the ground for operating
  systems that manage themselves, that can update safely without
  administrator involvement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want our images to be trustable (i.e. signed). In fact we want a
  fully trustable OS, with images that can be verified by a full
  trust chain from the firmware (EFI SecureBoot!), through the boot loader, through the
  kernel, and initrd. Cryptographically secure verification of the
  code we execute is relevant on the desktop (like ChromeOS does), but
  also for apps, for embedded devices and even on servers (in a post-Snowden
  world, in particular).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What We Propose&lt;/h1&gt;
&lt;p&gt;So much about the set of problems, and what we are trying to do. So,
now, let's discuss the technical bits we came up with:&lt;/p&gt;
&lt;p&gt;The scheme we propose is built around the variety of concepts of btrfs
and Linux file system name-spacing. btrfs at this point already has a
large number of features that fit neatly in our concept, and the
maintainers are busy working on a couple of others we want to
eventually make use of.&lt;/p&gt;
&lt;p&gt;As first part of our proposal we make heavy use of btrfs sub-volumes and
introduce a clear naming scheme for them. We name snapshots like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;usr:&amp;lt;vendorid&amp;gt;:&amp;lt;architecture&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt; -- This refers to a full
  vendor operating system tree. It's basically a /usr tree (and no
  other directories), in a specific version, with everything you need to boot
  it up inside it. The &lt;code&gt;&amp;lt;vendorid&amp;gt;&lt;/code&gt; field is replaced by some vendor
  identifier, maybe a scheme like
  &lt;code&gt;org.fedoraproject.FedoraWorkstation&lt;/code&gt;. The &lt;code&gt;&amp;lt;architecture&amp;gt;&lt;/code&gt; field
  specifies a CPU architecture the OS is designed for, for example
  &lt;code&gt;x86-64&lt;/code&gt;. The &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; field specifies a specific OS version, for
  example &lt;code&gt;23.4&lt;/code&gt;. An example sub-volume name could hence look like this:
  &lt;code&gt;usr:org.fedoraproject.FedoraWorkstation:x86_64:23.4&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;root:&amp;lt;name&amp;gt;:&amp;lt;vendorid&amp;gt;:&amp;lt;architecture&amp;gt;&lt;/code&gt; -- This refers to an
  &lt;em&gt;instance&lt;/em&gt; of an operating system. Its basically a root directory,
  containing primarily /etc and /var (but possibly more). Sub-volumes
  of this type do not contain a populated /usr tree though. The
  &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; field refers to some instance name (maybe the host name of
  the instance). The other fields are defined as above. An example
  sub-volume name is
  &lt;code&gt;root:revolution:org.fedoraproject.FedoraWorkstation:x86_64&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;runtime:&amp;lt;vendorid&amp;gt;:&amp;lt;architecture&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt; -- This refers to a
  vendor &lt;em&gt;runtime&lt;/em&gt;. A runtime here is supposed to be a set of
  libraries and other resources that are needed to run apps (for the
  concept of &lt;em&gt;apps&lt;/em&gt; see below), all in a /usr tree. In this regard this
  is very similar to the &lt;code&gt;usr&lt;/code&gt; sub-volumes explained above, however,
  while a &lt;code&gt;usr&lt;/code&gt; sub-volume is a full OS and contains everything
  necessary to boot, a runtime is really only a set of
  libraries. You cannot boot it, but you can run apps with it. An
  example sub-volume name is: &lt;code&gt;runtime:org.gnome.GNOME3_20:x86_64:3.20.1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;framework:&amp;lt;vendorid&amp;gt;:&amp;lt;architecture&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt; -- This is very
  similar to a vendor runtime, as described above, it contains just a
  /usr tree, but goes one step further: it additionally contains all
  development headers, compilers and build tools, that allow
  developing against a specific runtime. For each runtime there should
  be a framework. When you develop against a specific framework in a
  specific architecture, then the resulting app will be compatible
  with the runtime of the same vendor ID and architecture. Example:
  &lt;code&gt;framework:org.gnome.GNOME3_20:x86_64:3.20.1&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;app:&amp;lt;vendorid&amp;gt;:&amp;lt;runtime&amp;gt;:&amp;lt;architecture&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt; -- This
  encapsulates an application bundle. It contains a tree that at
  runtime is mounted to &lt;code&gt;/opt/&amp;lt;vendorid&amp;gt;&lt;/code&gt;, and contains all the
  application's resources. The &lt;code&gt;&amp;lt;vendorid&amp;gt;&lt;/code&gt; could be a string like
  &lt;code&gt;org.libreoffice.LibreOffice&lt;/code&gt;, the &lt;code&gt;&amp;lt;runtime&amp;gt;&lt;/code&gt; refers to one the
  vendor id of one specific runtime the application is built for, for
  example &lt;code&gt;org.gnome.GNOME3_20:3.20.1&lt;/code&gt;. The &lt;code&gt;&amp;lt;architecture&amp;gt;&lt;/code&gt; and
  &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; refer to the architecture the application is built for,
  and of course its version. Example:
  &lt;code&gt;app:org.libreoffice.LibreOffice:GNOME3_20:x86_64:133&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;home:&amp;lt;user&amp;gt;:&amp;lt;uid&amp;gt;:&amp;lt;gid&amp;gt;&lt;/code&gt; -- This sub-volume shall refer to the home
  directory of the specific user. The &lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt; field contains the user
  name, the &lt;code&gt;&amp;lt;uid&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;gid&amp;gt;&lt;/code&gt; fields the numeric Unix UIDs and GIDs
  of the user. The idea here is that in the long run the list of
  sub-volumes is sufficient as a user database (but see
  below). Example: &lt;code&gt;home:lennart:1000:1000&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;btrfs partitions that adhere to this naming scheme should be clearly
identifiable. It is our intention to introduce a new GPT partition type
ID for this.&lt;/p&gt;
&lt;h1&gt;How To Use It&lt;/h1&gt;
&lt;p&gt;After we introduced this naming scheme let's see what we can build of
this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When booting up a system we mount the root directory from one of the
  &lt;code&gt;root&lt;/code&gt; sub-volumes, and then mount /usr from a matching &lt;code&gt;usr&lt;/code&gt;
  sub-volume. &lt;em&gt;Matching&lt;/em&gt; here means it carries the same &lt;code&gt;&amp;lt;vendor-id&amp;gt;&lt;/code&gt;
  and &lt;code&gt;&amp;lt;architecture&amp;gt;&lt;/code&gt;. Of course, by default we should pick the
  matching &lt;code&gt;usr&lt;/code&gt; sub-volume with the newest version by default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we boot up an OS container, we do exactly the same as the when
  we boot up a regular system: we simply combine a &lt;code&gt;usr&lt;/code&gt; sub-volume
  with a &lt;code&gt;root&lt;/code&gt; sub-volume.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we enumerate the system's users we simply go through the
  list of &lt;code&gt;home&lt;/code&gt; snapshots.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a user authenticates and logs in we mount his home
  directory from his snapshot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When an app is run, we set up a new file system name-space, mount the
  &lt;code&gt;app&lt;/code&gt; sub-volume to &lt;code&gt;/opt/&amp;lt;vendorid&amp;gt;/&lt;/code&gt;, and the appropriate &lt;code&gt;runtime&lt;/code&gt;
  sub-volume the app picked to &lt;code&gt;/usr&lt;/code&gt;, as well as the user's
  &lt;code&gt;/home/$USER&lt;/code&gt; to its place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When a developer wants to develop against a specific runtime he
  installs the right framework, and then temporarily transitions into
  a name space where &lt;code&gt;/usr&lt;/code&gt;is mounted from the framework sub-volume, and
  &lt;code&gt;/home/$USER&lt;/code&gt; from his own home directory. In this name space he then
  runs his build commands. He can build in multiple name spaces at the
  same time, if he intends to builds software for multiple runtimes or
  architectures at the same time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instantiating a new system or OS container (which is exactly the same
in this scheme) just consists of creating a new appropriately named
&lt;code&gt;root&lt;/code&gt; sub-volume. Completely naturally you can share one vendor OS
copy in one specific version with a multitude of container instances.&lt;/p&gt;
&lt;p&gt;Everything is &lt;em&gt;double-buffered&lt;/em&gt; (or actually, n-fold-buffered), because
&lt;code&gt;usr&lt;/code&gt;, &lt;code&gt;runtime&lt;/code&gt;, &lt;code&gt;framework&lt;/code&gt;, &lt;code&gt;app&lt;/code&gt; sub-volumes can exist in multiple
versions. Of course, by default the execution logic should always pick
the newest release of each sub-volume, but it is up to the user keep
multiple versions around, and possibly execute older versions, if he
desires to do so. In fact, like on ChromeOS this could even be handled
automatically: if a system fails to boot with a newer snapshot, the
boot loader can automatically revert back to an older version of the
OS.&lt;/p&gt;
&lt;h1&gt;An Example&lt;/h1&gt;
&lt;p&gt;Note that in result this allows installing not only multiple end-user
applications into the same btrfs volume, but also multiple operating
systems, multiple system instances, multiple runtimes, multiple
frameworks. Or to spell this out in an example:&lt;/p&gt;
&lt;p&gt;Let's say Fedora, Mageia and ArchLinux all implement this scheme,
and provide ready-made end-user images. Also, the GNOME, KDE, SDL
projects all define a runtime+framework to develop against. Finally,
both LibreOffice and Firefox provide their stuff according to this
scheme. You can now trivially install of these into the same btrfs
volume:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;usr:org.fedoraproject.WorkStation:x86_64:24.7&lt;/li&gt;
&lt;li&gt;usr:org.fedoraproject.WorkStation:x86_64:24.8&lt;/li&gt;
&lt;li&gt;usr:org.fedoraproject.WorkStation:x86_64:24.9&lt;/li&gt;
&lt;li&gt;usr:org.fedoraproject.WorkStation:x86_64:25beta&lt;/li&gt;
&lt;li&gt;usr:org.mageia.Client:i386:39.3&lt;/li&gt;
&lt;li&gt;usr:org.mageia.Client:i386:39.4&lt;/li&gt;
&lt;li&gt;usr:org.mageia.Client:i386:39.6&lt;/li&gt;
&lt;li&gt;usr:org.archlinux.Desktop:x86_64:302.7.8&lt;/li&gt;
&lt;li&gt;usr:org.archlinux.Desktop:x86_64:302.7.9&lt;/li&gt;
&lt;li&gt;usr:org.archlinux.Desktop:x86_64:302.7.10&lt;/li&gt;
&lt;li&gt;root:revolution:org.fedoraproject.WorkStation:x86_64&lt;/li&gt;
&lt;li&gt;root:testmachine:org.fedoraproject.WorkStation:x86_64&lt;/li&gt;
&lt;li&gt;root:foo:org.mageia.Client:i386&lt;/li&gt;
&lt;li&gt;root:bar:org.archlinux.Desktop:x86_64&lt;/li&gt;
&lt;li&gt;runtime:org.gnome.GNOME3_20:x86_64:3.20.1&lt;/li&gt;
&lt;li&gt;runtime:org.gnome.GNOME3_20:x86_64:3.20.4&lt;/li&gt;
&lt;li&gt;runtime:org.gnome.GNOME3_20:x86_64:3.20.5&lt;/li&gt;
&lt;li&gt;runtime:org.gnome.GNOME3_22:x86_64:3.22.0&lt;/li&gt;
&lt;li&gt;runtime:org.kde.KDE5_6:x86_64:5.6.0&lt;/li&gt;
&lt;li&gt;framework:org.gnome.GNOME3_22:x86_64:3.22.0&lt;/li&gt;
&lt;li&gt;framework:org.kde.KDE5_6:x86_64:5.6.0&lt;/li&gt;
&lt;li&gt;app:org.libreoffice.LibreOffice:GNOME3_20:x86_64:133&lt;/li&gt;
&lt;li&gt;app:org.libreoffice.LibreOffice:GNOME3_22:x86_64:166&lt;/li&gt;
&lt;li&gt;app:org.mozilla.Firefox:GNOME3_20:x86_64:39&lt;/li&gt;
&lt;li&gt;app:org.mozilla.Firefox:GNOME3_20:x86_64:40&lt;/li&gt;
&lt;li&gt;home:lennart:1000:1000&lt;/li&gt;
&lt;li&gt;home:hrundivbakshi:1001:1001&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the example above, we have three vendor operating systems
installed. All of them in three versions, and one even in a beta
version. We have four system instances around. Two of them of Fedora,
maybe one of them we usually boot from, the other we run for very
specific purposes in an OS container. We also have the runtimes for
two GNOME releases in multiple versions, plus one for KDE. Then, we
have the development trees for one version of KDE and GNOME around, as
well as two apps, that make use of two releases of the GNOME
runtime. Finally, we have the home directories of two users.&lt;/p&gt;
&lt;p&gt;Now, with the name-spacing concepts we introduced above, we can
actually relatively freely mix and match apps and OSes, or develop
against specific frameworks in specific versions on any operating
system. It doesn't matter if you booted your ArchLinux instance, or
your Fedora one, you can execute both LibreOffice and Firefox just
fine, because at execution time they get matched up with the right
runtime, and all of them are available from all the operating systems
you installed. You get the precise runtime that the upstream vendor of
Firefox/LibreOffice did their testing with. It doesn't matter anymore
which distribution you run, and which distribution the vendor prefers.&lt;/p&gt;
&lt;p&gt;Also, given that the user database is actually encoded in the
sub-volume list, it doesn't matter which system you boot, the
distribution should be able to find your local users automatically,
without any configuration in /etc/passwd.&lt;/p&gt;
&lt;h1&gt;Building Blocks&lt;/h1&gt;
&lt;p&gt;With this naming scheme plus the way how we can combine them on
execution we already came quite far, but how do we actually get these
sub-volumes onto the final machines, and how do we update them? Well,
btrfs has a feature they call "send-and-receive". It basically allows
you to "diff" two file system versions, and generate a binary
delta. You can generate these deltas on a developer's machine and then
push them into the user's system, and he'll get the exact same
sub-volume too. This is how we envision installation and updating of
operating systems, applications, runtimes, frameworks. At installation
time, we simply deserialize an initial send-and-receive delta into
our btrfs volume, and later, when a new version is released we just
add in the few bits that are new, by dropping in another
send-and-receive delta under a new sub-volume name. And we do it
exactly the same for the OS itself, for a runtime, a framework or an
app. There's no technical distinction anymore. The underlying
operation for installing apps, runtime, frameworks, vendor OSes, as well
as the operation for updating them is done the exact same way for all.&lt;/p&gt;
&lt;p&gt;Of course, keeping multiple full /usr trees around sounds like an
awful lot of waste, after all they will contain a lot of very similar
data, since a lot of resources are shared between distributions,
frameworks and runtimes. However, thankfully btrfs actually is able to
de-duplicate this for us. If we add in a new app snapshot, this simply
adds in the new files that changed. Moreover different runtimes and
operating systems might actually end up sharing the same tree.&lt;/p&gt;
&lt;p&gt;Even though the example above focuses primarily on the end-user,
desktop side of things, the concept is also extremely powerful in
server scenarios. For example, it is easy to build your own &lt;code&gt;usr&lt;/code&gt;
trees and deliver them to your hosts using this scheme. The &lt;code&gt;usr&lt;/code&gt;
sub-volumes are supposed to be something that administrators can put
together. After deserializing them into a couple of hosts, you can
trivially instantiate them as OS containers there, simply by adding a
new &lt;code&gt;root&lt;/code&gt; sub-volume for each instance, referencing the &lt;code&gt;usr&lt;/code&gt; tree you
just put together. Instantiating OS containers hence becomes as easy
as creating a new btrfs sub-volume. And you can still update the images
nicely, get fully double-buffered updates and everything.&lt;/p&gt;
&lt;p&gt;And of course, this scheme also applies great to embedded
use-cases. Regardless if you build a TV, an IVI system or a phone: you
can put together you OS versions as &lt;code&gt;usr&lt;/code&gt; trees, and then use
btrfs-send-and-receive facilities to deliver them to the systems, and
update them there.&lt;/p&gt;
&lt;p&gt;Many people when they hear the word "btrfs" instantly reply with "is
it ready yet?". Thankfully, most of the functionality we really need
here is strictly read-only. With the exception of the &lt;code&gt;home&lt;/code&gt;
sub-volumes (see below) all snapshots are strictly read-only, and are
delivered as immutable vendor trees onto the devices. They never are
changed. Even if btrfs might still be immature, for this kind of
read-only logic it should be more than good enough.&lt;/p&gt;
&lt;p&gt;Note that this scheme also enables doing &lt;em&gt;fat&lt;/em&gt; systems: for example,
an installer image could include a Fedora version compiled for x86-64,
one for i386, one for ARM, all in the same btrfs volume. Due to btrfs'
de-duplication they will share as much as possible, and when the image
is booted up the right sub-volume is automatically picked. Something
similar of course applies to the apps too!&lt;/p&gt;
&lt;p&gt;This also allows us to implement something that we like to call
&lt;em&gt;Operating-System-As-A-Virus&lt;/em&gt;. Installing a new system is little more
than:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating a new GPT partition table&lt;/li&gt;
&lt;li&gt;Adding an EFI System Partition (FAT) to it&lt;/li&gt;
&lt;li&gt;Adding a new btrfs volume to it&lt;/li&gt;
&lt;li&gt;Deserializing a single &lt;code&gt;usr&lt;/code&gt; sub-volume into the btrfs volume&lt;/li&gt;
&lt;li&gt;Installing a boot loader into the EFI System Partition&lt;/li&gt;
&lt;li&gt;Rebooting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, since the only real vendor data you need is the &lt;code&gt;usr&lt;/code&gt; sub-volume,
you can trivially duplicate this onto any block device you want. Let's
say you are a happy Fedora user, and you want to provide a friend with
his own installation of this awesome system, all on a USB stick. All
you have to do for this is do the steps above, using your installed
&lt;code&gt;usr&lt;/code&gt; tree as source to copy. And there you go! And you don't have to
be afraid that any of your personal data is copied too, as the &lt;code&gt;usr&lt;/code&gt;
sub-volume is the exact version your vendor provided you with. Or with
other words: there's no distinction anymore between installer images
and installed systems. It's all the same. Installation becomes
replication, not more. Live-CDs and installed systems can be fully
identical.&lt;/p&gt;
&lt;p&gt;Note that in this design apps are actually developed against a single,
very specific runtime, that contains all libraries it can link against
(including a specific glibc version!). Any library that is not
included in the runtime the developer picked must be included in the
app itself. This is similar how apps on Android declare one very
specific Android version they are developed against. This greatly
simplifies application installation, as there's no dependency hell:
each app pulls in one runtime, and the app is actually free to pick
which one, as you can have multiple installed, though only one is used
by each app.&lt;/p&gt;
&lt;p&gt;Also note that operating systems built this way will never see
"half-updated" systems, as it is common when a system is updated using
RPM/dpkg. When updating the system the code will either run the old or
the new version, but it will never see part of the old files and part
of the new files. This is the same for apps, runtimes, and frameworks,
too.&lt;/p&gt;
&lt;h1&gt;Where We Are Now&lt;/h1&gt;
&lt;p&gt;We are currently working on a lot of the groundwork necessary for
this. This scheme relies on the ability to monopolize the
vendor OS resources in /usr, which is the key of what I described in
&lt;a href="http://0pointer.net/blog/projects/stateless.html"&gt;Factory Reset, Stateless Systems, Reproducible Systems &amp;amp; Verifiable Systems&lt;/a&gt;
a few weeks back. Then, of course, for the full desktop app concept we
need a strong sandbox, that does more than just hiding files from the
file system view. After all with an app concept like the above the
primary interfacing between the executed desktop apps and the rest of the
system is via IPC (which is why we work on kdbus and teach it all
kinds of sand-boxing features), and the kernel itself. Harald Hoyer has
started working on generating the btrfs send-and-receive images based
on Fedora.&lt;/p&gt;
&lt;p&gt;Getting to the full scheme will take a while. Currently we have many
of the building blocks ready, but some major items are missing. For
example, we push quite a few problems into btrfs, that other solutions
try to solve in user space. One of them is actually
signing/verification of images. The btrfs maintainers are working on
adding this to the code base, but currently nothing exists. This
functionality is essential though to come to a fully verified system
where a trust chain exists all the way from the firmware to the
apps. Also, to make the &lt;code&gt;home&lt;/code&gt; sub-volume scheme fully workable we
actually need encrypted sub-volumes, so that the sub-volume's
pass-phrase can be used for authenticating users in PAM. This doesn't
exist either.&lt;/p&gt;
&lt;p&gt;Working towards this scheme is a gradual process. Many of the steps we
require for this are useful outside of the grand scheme though, which
means we can slowly work towards the goal, and our users can already
take benefit of what we are working on as we go.&lt;/p&gt;
&lt;p&gt;Also, and most importantly, this is not really a departure from
traditional operating systems:&lt;/p&gt;
&lt;p&gt;Each app, each OS and each app sees a traditional Unix hierarchy with
/usr, /home, /opt, /var, /etc. It executes in an environment that is
pretty much identical to how it would be run on traditional systems.&lt;/p&gt;
&lt;p&gt;There's no need to fully move to a system that uses only btrfs and
follows strictly this sub-volume scheme. For example, we intend to
provide implicit support for systems that are installed on ext4 or
xfs, or that are put together with traditional packaging tools such as
RPM or dpkg: if the the user tries to install a
runtime/app/framework/os image on a system that doesn't use btrfs so
far, it can just create a loop-back btrfs image in /var, and push the
data into that. Even us developers will run our stuff like this for a
while, after all this new scheme is not particularly useful for highly
individualized systems, and we developers usually tend to run
systems like that.&lt;/p&gt;
&lt;p&gt;Also note that this in no way a departure from packaging systems like
RPM or DEB. Even if the new scheme we propose is used for installing
and updating a specific system, it is RPM/DEB that is used to put
together the vendor OS tree initially. Hence, even in this scheme
RPM/DEB are highly relevant, though not strictly as an end-user tool
anymore, but as a build tool.&lt;/p&gt;
&lt;h1&gt;So Let's Summarize Again What We Propose&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We want a unified scheme, how we can install and update OS images,
  user apps, runtimes and frameworks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want a unified scheme how you can relatively freely mix OS
  images, apps, runtimes and frameworks on the same system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want a fully trusted system, where cryptographic verification of
  all executed code can be done, all the way to the firmware, as
  standard feature of the system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want to allow app vendors to write their programs against very
  specific frameworks, under the knowledge that they will end up being
  executed with the exact same set of libraries chosen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want to allow parallel installation of multiple OSes and versions
  of them, multiple runtimes in multiple versions, as well as multiple
  frameworks in multiple versions. And of course, multiple apps in
  multiple versions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want everything &lt;em&gt;double buffered&lt;/em&gt; (or actually n-fold buffered), to
  ensure we can reliably update/rollback versions, in particular to
  safely do automatic updates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want a system where updating a runtime, OS, framework, or OS
  container is as simple as adding in a new snapshot and restarting
  the runtime/OS/framework/OS container.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want a system where we can easily instantiate a number of OS
  instances from a single vendor tree, with zero difference for doing
  this on order to be able to boot it on bare metal/VM or as a
  container.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We want to enable Linux to have an open scheme that people can use
  to build app markets and similar schemes, not restricted to a
  specific vendor.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Final Words&lt;/h1&gt;
&lt;p&gt;I'll be talking about this at LinuxCon Europe in October. I originally
intended to discuss this at the Linux Plumbers Conference (which I
assumed was the right forum for this kind of major plumbing level
improvement), and at linux.conf.au, but there was no interest in my
session submissions there...&lt;/p&gt;
&lt;p&gt;Of course this is all work in progress. These are our current ideas we
are working towards. As we progress we will likely change a number of
things. For example, the precise naming of the sub-volumes might look
very different in the end.&lt;/p&gt;
&lt;p&gt;Of course, we are developers of the systemd project. Implementing this
scheme is not just a job for the systemd developers. This is a
reinvention how distributions work, and hence needs great support from
the distributions. We really hope we can trigger some interest by
publishing this proposal now, to get the distributions on board. This
after all is explicitly not supposed to be a solution for one specific
project and one specific vendor product, we care about making this
open, and solving it for the generic case, without cutting corners.&lt;/p&gt;
&lt;p&gt;If you have any questions about this, you know how you can reach us
(IRC, mail, G+, ...).&lt;/p&gt;
&lt;p&gt;The future is going to be awesome!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 01 Sep 2014 00:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2014-09-01:/blog/revisiting-how-we-put-together-linux-systems.html</guid><category>projects</category></item><item><title>FUDCON + GNOME.Asia Beijing 2014</title><link>https://0pointer.net/blog/projects/fudcon-gnomeasia.html</link><description>
                
&lt;p&gt;Thanks to the funding from FUDCON I had the chance to attend and
keynote at the combined &lt;a href="https://fedoraproject.org/wiki/FUDCon:Beijing_2014"&gt;FUDCON Beijing 2014&lt;/a&gt;
and &lt;a href="http://2014.gnome.asia/"&gt;GNOME.Asia 2014&lt;/a&gt; conference in
Beijing, China.&lt;/p&gt;

&lt;p&gt;My talk was about systemd's present and future, what we achieved
and where we are going. In my talk I tried to explain a bit where we
are coming from, and how we changed focus from being purely an init
system, to more being a set of basic building blocks to build an OS
from. Most of the talk I talked about where we still intend to take
systemd, which areas we believe should be covered by systemd, and of
course, also the always difficult question, on where to draw the line
and what clearly is outside of the focus of systemd. The slides of my
talk you &lt;a href="http://0pointer.de/public/gnomeasia2014.pdf"&gt;find
online&lt;/a&gt;. (No video recording I am aware of, sorry.)&lt;/p&gt;

&lt;p&gt;The combined conferences were a lot of fun, and as usual, the best
discussions I had in the hallway track, discussing Linux and
systemd.&lt;/p&gt;

&lt;p&gt;A number of pictures of the conference are &lt;a href="https://plus.google.com/events/gallery/cqsjvgg7o125tkli6up5d60f83g"&gt;now
online&lt;/a&gt;. Enjoy!&lt;/p&gt;

&lt;p&gt;After the conference I stayed for a few more days in Beijing, doing
a bit of sightseeing. What a fantastic city! The food was amazing, we
tried all kinds of fantastic stuff, from Peking duck, to Bullfrog
Sechuan style. Yummy. And one of those days I am sure I will find the
time to actually sort my photos and put them online, too.&lt;/p&gt;

&lt;p&gt;I am really looking forward to the next FUDCON/GNOME.Asia!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 04 Jul 2014 18:43:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2014-07-04:/blog/projects/fudcon-gnomeasia.html</guid><category>projects</category></item><item><title>Factory Reset, Stateless Systems, Reproducible Systems &amp; Verifiable Systems</title><link>https://0pointer.net/blog/projects/stateless.html</link><description>
                
&lt;p&gt;&lt;small&gt;(Just a small heads-up: I don't blog as much as I used to, I
nowadays update my &lt;a href="https://plus.google.com/u/0/+LennartPoetteringTheOneAndOnly/posts"&gt;Google+
page&lt;/a&gt; a lot more frequently. You might want to subscribe that if
you are interested in more frequent technical updates on what we are
working on.)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;In the past weeks we have been working on a couple of features for
&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;
that enable a number of new usecases I'd like to shed some light
on. Taking benefit of the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/TheCaseForTheUsrMerge/"&gt;&lt;tt&gt;/usr&lt;/tt&gt;
merge&lt;/a&gt; that a number of distributions have completed we want to
bring runtime behaviour of Linux systems to the next level. With the
&lt;tt&gt;/usr&lt;/tt&gt; merge completed most static vendor-supplied OS data is
found exclusively in &lt;tt&gt;/usr&lt;/tt&gt;, only a few additional bits in
&lt;tt&gt;/var&lt;/tt&gt; and &lt;tt&gt;/etc&lt;/tt&gt; are necessary to make a system
boot. On this we can build to enable a couple of new features:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;A mechanism we call &lt;i&gt;Factory Reset&lt;/i&gt; shall flush out
&lt;tt&gt;/etc&lt;/tt&gt; and &lt;tt&gt;/var&lt;/tt&gt;, but keep the vendor-supplied
&lt;tt&gt;/usr&lt;/tt&gt;, bringing the system back into a well-defined, pristine
vendor state with no local state or configuration. This functionality
is useful across the board from servers, to desktops, to embedded
devices.&lt;/li&gt;

&lt;li&gt;A &lt;i&gt;Stateless System&lt;/i&gt; goes one step further: a system like
this never stores &lt;tt&gt;/etc&lt;/tt&gt; or &lt;tt&gt;/var&lt;/tt&gt; on persistent
storage, but always comes up with pristine vendor state. On systems
like this every reboot acts as factor reset. This functionality is
particularly useful for simple containers or systems that boot off the
network or read-only media, and receive all configuration they need
during runtime from vendor packages or protocols like DHCP or are
capable of discovering their parameters automatically from the
available hardware or periphery.&lt;/li&gt;

&lt;li&gt;&lt;i&gt;Reproducible Systems&lt;/i&gt; multiply a vendor image into many
containers or systems. Only local configuration or state is stored
per-system, while the vendor operating system is pulled in from the
same, immutable, shared snapshot. Each system hence has its private
&lt;tt&gt;/etc&lt;/tt&gt; and &lt;tt&gt;/var&lt;/tt&gt; for receiving local configuration,
however the OS tree in &lt;tt&gt;/usr&lt;/tt&gt; is pulled in via bind mounts (in
case of containers) or technologies like NFS (in case of physical
systems), or btrfs snapshots from a &lt;i&gt;golden master&lt;/i&gt; image. This is
particular interesting for containers where the goal is to run
thousands of container images from the same OS tree. However, it also
has a number of other usecases, for example thin client systems, which
can boot the same NFS share a number of times. Furthermore this
mechanism is useful to implement very simple OS installers, that
simply unserialize a &lt;tt&gt;/usr&lt;/tt&gt; snapshot into a file system,
install a boot loader, and reboot.&lt;/li&gt;

&lt;li&gt;&lt;i&gt;Verifiable Systems&lt;/i&gt; are closely related to stateless
systems: if the underlying storage technology can cryptographically
ensure that the vendor-supplied OS is trusted and in a consistent
state, then it must be made sure that &lt;tt&gt;/etc&lt;/tt&gt; or &lt;tt&gt;/var&lt;/tt&gt;
are either included in the OS image, or simply unnecessary for booting.&lt;/li&gt;

&lt;/ol&gt;

&lt;h3&gt;Concepts&lt;/h3&gt;

&lt;p&gt;A number of Linux-based operating systems have tried to implement
some of the schemes described out above in one way or
another. Particularly interesting are &lt;a href="https://wiki.gnome.org/Projects/OSTree"&gt;GNOME's OSTree&lt;/a&gt;, &lt;a href="https://coreos.com/"&gt;CoreOS&lt;/a&gt; and Google's Android and
ChromeOS. They generally found different solutions for the specific
problems you have when implementing schemes like this, sometimes taking
shortcuts that keep only the specific case in mind, and cannot cover
the general purpose. With systemd now being at the core of so many
distributions and deeply involved in bringing up and maintaining the
system we came to the conclusion that we should attempt to add generic
support for setups like this to systemd itself, to open this up for
the general purpose distributions to build on. We decided to focus on
three kinds of systems:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;The &lt;i&gt;stateful&lt;/i&gt; system, the traditional system as we know it with
machine-specific &lt;tt&gt;/etc&lt;/tt&gt;, &lt;tt&gt;/usr&lt;/tt&gt; and &lt;tt&gt;/var&lt;/tt&gt;, all
properly populated.&lt;/li&gt;

&lt;li&gt;Startup without a populated &lt;tt&gt;/var&lt;/tt&gt;, but with configured
&lt;tt&gt;/etc&lt;/tt&gt;. (We will call these &lt;i&gt;volatile&lt;/i&gt; systems.)&lt;/li&gt;

&lt;li&gt;Startup without either &lt;tt&gt;/etc&lt;/tt&gt; or &lt;tt&gt;/var&lt;/tt&gt;. (We will
call these &lt;i&gt;stateless&lt;/i&gt; systems.)&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;A factory reset is just a special case of the latter two modes,
where the system boots up without &lt;tt&gt;/var&lt;/tt&gt; and &lt;tt&gt;/etc&lt;/tt&gt; but
the next boot is a normal stateful boot like like the first described
mode. Note that a mode where &lt;tt&gt;/etc&lt;/tt&gt; is flushed, but
&lt;tt&gt;/var&lt;/tt&gt; is not is nothing we intend to cover (why? well, the
user ID question becomes much harder, see below, and we simply saw no
usecase for it worth the trouble).&lt;/p&gt;

&lt;h4&gt;Problems&lt;/h4&gt;

&lt;p&gt;Booting up a system without a populated &lt;tt&gt;/var&lt;/tt&gt; is relatively
straight-forward. With &lt;a href="http://cgit.freedesktop.org/systemd/systemd/plain/tmpfiles.d/var.conf"&gt;a
few lines of tmpfiles configuration&lt;/a&gt; it is possible to populate
&lt;tt&gt;/var&lt;/tt&gt; with its basic structure in a way that is sufficient to
make a system boot cleanly. systemd version 214 and newer ship with
support for this. Of course, support for this scheme in systemd is
only a small part of the solution. While a lot of software
reconstructs the directory hierarchy it needs in &lt;tt&gt;/var&lt;/tt&gt;
automatically, many software does not. In case like this it is
necessary to ship a couple of additional tmpfiles lines that setup up
at boot-time the necessary files or directories in &lt;tt&gt;/var&lt;/tt&gt; to
make the software operate, similar to what RPM or DEB packages would
set up at installation time.&lt;/p&gt;

&lt;p&gt;Booting up a system without a populated &lt;tt&gt;/etc&lt;/tt&gt; is a more
difficult task. In &lt;tt&gt;/etc&lt;/tt&gt; we have a lot of configuration bits
that are essential for the system to operate, for example and most
importantly system user and group information in &lt;tt&gt;/etc/passwd&lt;/tt&gt;
and &lt;tt&gt;/etc/group&lt;/tt&gt;. If the system boots up without &lt;tt&gt;/etc&lt;/tt&gt;
there must be a way to replicate the minimal information necessary in
it, so that the system manages to boot up fully.&lt;/p&gt;

&lt;p&gt;To make this even more complex, in order to support "offline"
updates of &lt;tt&gt;/usr&lt;/tt&gt; that are replicated into a number of systems
possessing private &lt;tt&gt;/etc&lt;/tt&gt; and &lt;tt&gt;/var&lt;/tt&gt; there needs to be a
way how these directories can be upgraded transparently when
necessary, for example by recreating caches like
&lt;tt&gt;/etc/ld.so.cache&lt;/tt&gt; or adding missing system users to
&lt;tt&gt;/etc/passwd&lt;/tt&gt; on next reboot.&lt;/p&gt;

&lt;p&gt;Starting with systemd 215 (yet unreleased, as I type this) we will
ship with a number of features in systemd that make &lt;tt&gt;/etc&lt;/tt&gt;-less
boots functional:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;p&gt;A new tool &lt;tt&gt;systemd-sysusers&lt;/tt&gt; as been added. It introduces
a new drop-in directory &lt;tt&gt;/usr/lib/sysusers.d/&lt;/tt&gt;. Minimal
descriptions of necessary system users and groups can be placed
there. Whenever the tool is invoked it will create these users in
&lt;tt&gt;/etc/passwd&lt;/tt&gt; and &lt;tt&gt;/etc/group&lt;/tt&gt; should they be
missing. It is only suitable for creating system users and groups, not
for normal users. It will write to the files directly via the
appropriate glibc APIs, which is the right thing to do for system
users. (For normal users no such APIs exist, as the users might be
stored centrally on LDAP or suchlike, and they are out of focus for
our usecase.) The major benefit of this tool is that system user
definition can happen offline: a package simply has to drop in a new
file to register a user. This makes system user registration
&lt;i&gt;declarative&lt;/i&gt; instead of &lt;i&gt;imperative&lt;/i&gt; -- which is the way
how system users are traditionally created from RPM or DEB
installation scripts. By being declarative it is easy to replicate the
users on next boot to a number of system instances.&lt;/p&gt;

&lt;p&gt;To make this new
tool interesting for packaging scripts we make it easy to
alternatively invoke it during package installation time, thus being a
good alternative to invocations of &lt;tt&gt;useradd -r&lt;/tt&gt; and
&lt;tt&gt;groupadd -r&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Some OS designs use a static, fixed user/group list stored in
&lt;tt&gt;/usr&lt;/tt&gt; as primary database for users/groups, which fixed
UID/GID mappings. While this works for specific systems, this cannot
cover the general purpose. As the UID/GID range for system
users/groups is very small (only containing 998 users and groups on most systems), the
best has to be made from this space and only UIDs/GIDs necessary on
the specific system should be allocated. This means allocation has to
be dynamic and adjust to what is necessary.&lt;/p&gt;

&lt;p&gt;Also note that this tool has
one very nice feature: in addition to fully dynamic, and fully static
UID/GID assignment for the users to create, it supports reading
UID/GID numbers off existing files in &lt;tt&gt;/usr&lt;/tt&gt;, so that vendors
can make use of setuid/setgid binaries owned by specific users.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;We also added a &lt;a href="http://cgit.freedesktop.org/systemd/systemd/plain/sysusers.d/systemd.conf.in"&gt;default
user definition list&lt;/a&gt; which creates the most basic users the system
and systemd need. Of course, very likely downstream distributions
might need to alter this default list, add new entries and possibly
map specific users to particular numeric UIDs.&lt;/li&gt;

&lt;li&gt;A new condition &lt;tt&gt;ConditionNeedsUpdate=&lt;/tt&gt; has been
added. With this mechanism it is possible to conditionalize execution
of services depending on whether &lt;tt&gt;/usr&lt;/tt&gt; is newer than
&lt;tt&gt;/etc&lt;/tt&gt; or &lt;tt&gt;/var&lt;/tt&gt;. The idea is that various services that
need to be added into the boot process on upgrades make use of this to
not delay boot-ups on normal boots, but run as necessary should
&lt;tt&gt;/usr&lt;/tt&gt; have been update since the last boot. This is
implemented based on the &lt;tt&gt;mtime&lt;/tt&gt; timestamp of the
&lt;tt&gt;/usr&lt;/tt&gt;: if the OS has been updated the packaging software
should &lt;i&gt;touch&lt;/i&gt; the directory, thus informing all instances that
an upgrade of &lt;tt&gt;/etc&lt;/tt&gt; and &lt;tt&gt;/var&lt;/tt&gt; might be necessary.&lt;/li&gt;

&lt;li&gt;We added a number of service files, that make use of the new
&lt;tt&gt;ConditionNeedsUpdate=&lt;/tt&gt; switch, and run a couple of services
after each update. Among them are the aforementiond
&lt;tt&gt;systemd-sysusers&lt;/tt&gt; tool, as well as services that rebuild the
udev hardware database, the journal catalog database and the library
cache in &lt;tt&gt;/etc/ld.so.cache&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;If systemd detects an empty &lt;tt&gt;/etc&lt;/tt&gt; at early boot it will
now use the &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.preset.html"&gt;unit
preset&lt;/a&gt; information to enable all services by default that the
vendor or packager declared. It will then proceed booting.&lt;/li&gt;

&lt;li&gt;We added &lt;a href="http://cgit.freedesktop.org/systemd/systemd/plain/tmpfiles.d/etc.conf"&gt;a
new tmpfiles snippet&lt;/a&gt; that is able to reconstruct the
most basic structure of &lt;tt&gt;/etc&lt;/tt&gt; if it is missing.&lt;/li&gt;

&lt;li&gt;tmpfiles also gained the ability copy entire directory trees into
place should they be missing. This is particularly useful for copying
certain essential files or directories into &lt;tt&gt;/etc&lt;/tt&gt; without
which the system refuses to boot. Currently the most prominent
candidates for this are &lt;tt&gt;/etc/pam.d&lt;/tt&gt; and
&lt;tt&gt;/etc/dbus-1&lt;/tt&gt;. In the long run we hope that packages can be
fixed so that they always work correctly without configuration in
&lt;tt&gt;/etc&lt;/tt&gt;. Depending on the software this means that they should
come with compiled-in defaults that just work should their
configuration file be missing, or that they should fall back to static
vendor-supplied configuration in &lt;tt&gt;/usr&lt;/tt&gt; that is used whenever
&lt;tt&gt;/etc&lt;/tt&gt; doesn't have any configuration. Both the PAM and the
D-Bus case are probably candidates for the latter. Given that there
are probably many cases like this we are working with a number of
folks to introduce a new directory called &lt;tt&gt;/usr/share/etc&lt;/tt&gt;
(name is not settled yet) to major distributions, that always
contain the full, original, vendor-supplied configuration of all
packages. This is very useful here, so that there's an obvious place
to copy the original configuration from, but it is also useful
completely independently as this provides administrators with an easy
place to &lt;tt&gt;diff&lt;/tt&gt; their own configuration in &lt;tt&gt;/etc&lt;/tt&gt;
against to see what local changes are in place.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We added a new &lt;tt&gt;--tmpfs=&lt;/tt&gt; switch to &lt;tt&gt;systemd-nspawn&lt;/tt&gt;
to make testing of systems with unpopulated &lt;tt&gt;/etc&lt;/tt&gt; and
&lt;tt&gt;/var&lt;/tt&gt; easy. For example, to run a fully state-less container, use a command line like this:&lt;/p&gt;

&lt;pre&gt;# system-nspawn -D /srv/mycontainer --read-only --tmpfs=/var --tmpfs=/etc -b&lt;/pre&gt;

&lt;p&gt;This command line will invoke the container tree stored in
&lt;tt&gt;/srv/mycontainer&lt;/tt&gt; in a read-only way, but with a (writable)
tmpfs mounted to &lt;tt&gt;/var&lt;/tt&gt; and &lt;tt&gt;/etc&lt;/tt&gt;. With a very recent
git snapshot of systemd invoking a Fedora rawhide system should mostly
work OK, modulo the D-Bus and PAM problems mentioned above. A later
version of &lt;tt&gt;systemd-nspawn&lt;/tt&gt; is likely to gain a high-level
switch &lt;tt&gt;--mode={stateful|volatile|stateless}&lt;/tt&gt; that sets
combines this into simple switches reusing the vocabulary introduced
earlier.&lt;/p&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;h3&gt;What's Next&lt;/h3&gt;

&lt;p&gt;Pulling this all together we are very close to making boots with
empty &lt;tt&gt;/etc&lt;/tt&gt; and &lt;tt&gt;/var&lt;/tt&gt; on general purpose Linux
operating systems a reality. Of course, while doing the groundwork in
systemd gets us some distance, there's a lot of work left. Most
importantly: the majority of Linux packages are simply incomptible
with this scheme the way they are currently set up. They do not work
without configuration in &lt;tt&gt;/etc&lt;/tt&gt; or state directories in
&lt;tt&gt;/var&lt;/tt&gt;; they do not drop system user information in
&lt;tt&gt;/usr/lib/sysusers.d&lt;/tt&gt;. However, we believe it's our job to do
the groundwork, and to start somewhere.&lt;/p&gt;

&lt;p&gt;So what does this mean for the next steps? Of course, currently
very little of this is available in any distribution (simply already
because 215 isn't even released yet). However, this will hopefully
change quickly. As soon as that is accomplished we can start working
on making the other components of the OS work nicely in this
scheme. If you are an upstream developer, please consider making your
software work correctly if &lt;tt&gt;/etc&lt;/tt&gt; and/or &lt;tt&gt;/var&lt;/tt&gt; are not
populated. This means:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;When you need a state directory in &lt;tt&gt;/var&lt;/tt&gt; and it is missing,
create it first. If you cannot do that, because you dropped priviliges
or suchlike, please consider dropping in a tmpfiles snippet that
creates the directory with the right permissions early at boot, should
it be missing.&lt;/li&gt;

&lt;li&gt;When you need configuration files in &lt;tt&gt;/etc&lt;/tt&gt; to work
properly, consider changing your application to work nicely when these
files are missing, and automatically fall back to either built-in
defaults, or to static vendor-supplied configuration files shipped in
&lt;tt&gt;/usr&lt;/tt&gt;, so that administrators can override configuration in
&lt;tt&gt;/etc&lt;/tt&gt; but if they don't the default configuration counts.&lt;/li&gt;

&lt;li&gt;When you need a system user or group, consider dropping in a file
into &lt;tt&gt;/usr/lib/sysusers.d&lt;/tt&gt; describing the users. (Currently
documentation on this is minimal, we will provide more docs on this
shortly.)&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;If you are a packager, you can also help on making this all work:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Ask upstream to implement what we describe above, possibly even preparing a patch for this.&lt;/li&gt;

&lt;li&gt;If upstream will not make these changes, then consider dropping in
tmpfiles snippets that copy the bare minimum of configuration files to
make your software work from somewhere in &lt;tt&gt;/usr&lt;/tt&gt; into
&lt;tt&gt;/etc&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;Consider moving from imperative &lt;tt&gt;useradd&lt;/tt&gt; commands in
packaging scripts, to declarative &lt;tt&gt;sysusers&lt;/tt&gt; files. Ideally,
this is shipped upstream too, but if that's not possible then simply
adding this to packages should be good enough.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Of course, before moving to declarative system user definitions you
should consult with your distribution whether their packaging policy
even allows that. Currently, most distributions will not, so we have
to work to get this changed first.&lt;/p&gt;

&lt;p&gt;Anyway, so much about what we have been working on and where we want to take this.&lt;/p&gt;

&lt;h4&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Before we finish, let me stress again why we are doing all
this:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;For end-user machines like desktops, tablets or mobile phones, we
want a generic way to implement factory reset, which the user can make
use of when the system is broken (saves you support costs), or when he
wants to sell it and get rid of his private data, and renew that "fresh
car smell".&lt;/li&gt;

&lt;li&gt;For embedded machines we want a generic way how to reset
devices. We also want a way how every single boot can be identical to
a factory reset, in a stateless system design.&lt;/li&gt;

&lt;li&gt;For all kinds of systems we want to centralize vendor data in
&lt;tt&gt;/usr&lt;/tt&gt; so that it can be strictly read-only, and fully
cryptographically verified as one unit.&lt;/li&gt;

&lt;li&gt;We want to enable new kinds of OS installers that simply
deserialize a vendor OS &lt;tt&gt;/usr&lt;/tt&gt; snapshot into a new file system,
install a boot loader and reboot, leaving all first-time configuration
to the next boot.&lt;/li&gt;

&lt;li&gt;We want to enable new kinds of OS updaters that build on this, and
manage a number of vendor OS &lt;tt&gt;/usr&lt;/tt&gt; snapshots in verified states, and
which can then update &lt;tt&gt;/etc&lt;/tt&gt; and &lt;tt&gt;/var&lt;/tt&gt; simply by
rebooting into a newer version.&lt;/li&gt;

&lt;li&gt;We wanto to scale container setups naturally, by sharing a single
&lt;i&gt;golden master&lt;/i&gt; &lt;tt&gt;/usr&lt;/tt&gt; tree with a large number of instances that
simply maintain their own private &lt;tt&gt;/etc&lt;/tt&gt; and &lt;tt&gt;/var&lt;/tt&gt; for
their private configuration and state, while still allowing clean
updates of &lt;tt&gt;/usr&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;We want to make thin clients that share &lt;tt&gt;/usr&lt;/tt&gt; across the
network work by allowing stateless bootups. During all discussions on
how &lt;tt&gt;/usr&lt;/tt&gt; was to be organized this was fequently mentioned. A
setup like this so far only worked in very specific cases, with this
scheme we want to make this work in general case.&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;Of course, we have no illusions, just doing the groundwork for all
of this in systemd doesn't make this all a real-life solution
yet. Also, it's very unlikely that all of Fedora (or any other general
purpose distribution) will support this scheme for all its packages
soon, however, we are quite confident that the idea is convincing,
that we need to start somewhere, and that getting the most core
packages adapted to this shouldn't be out of reach.&lt;/p&gt;

&lt;p&gt;Oh, and of course, the concepts behind this are really not new, we
know that. However, what's new here is that we try to make them
available in a general purpose OS core, instead of special purpose
systems.&lt;/p&gt;

&lt;p&gt;Anyway, let's get the ball rolling! Late's make stateless systems a
reality!&lt;/p&gt;

&lt;p&gt;And that's all I have for now. I am sure this leaves a lot of
questions open. If you have any, join us on IRC on &lt;tt&gt;#systemd&lt;/tt&gt;
on freenode or comment on &lt;a href="https://plus.google.com/+LennartPoetteringTheOneAndOnly/posts/hT4jsCkmQzv"&gt;Google+&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 17 Jun 2014 18:13:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2014-06-17:/blog/projects/stateless.html</guid><category>projects</category></item><item><title>Upcoming Events</title><link>https://0pointer.net/blog/projects/dates.html</link><description>
                
&lt;p&gt;You are invited to three events:&lt;/p&gt;

&lt;p&gt;Christoph Wickert set up a &lt;a href="https://plus.google.com/events/cgbotu8inedql8qlecjo3a6glk8"&gt;Fedora 19
Release Party&lt;/a&gt; here in Berlin! Please join us on &lt;b&gt;Tuesday, July
2nd&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;We'll have another &lt;a href="https://plus.google.com/events/ck4p957u79bgm3jeiq8meh1b2ns"&gt;Berlin Open
Source Meetup&lt;/a&gt; on &lt;b&gt;Sunday, July 14th&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;And finally, theres' going to be another &lt;a href="https://plus.google.com/events/cb1urr7jt5p4voutfelci14c5qc"&gt;systemd
Hackfest&lt;/a&gt;, this time colocated with &lt;a href="https://www.guadec.org/"&gt;GUADEC&lt;/a&gt;, on &lt;b&gt;Tuesday/Wednesday, August 6th/7th&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;See you soon!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 01 Jul 2013 01:04:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2013-07-01:/blog/projects/dates.html</guid><category>projects</category></item><item><title>GNOME.Asia and LinuxCon Japan</title><link>https://0pointer.net/blog/projects/asia-2013.html</link><description>
                
&lt;p&gt;Two weeks ago I attended GNOME.Asia/Seoul and LinuxCon Japan/Tokyo, thanks
to sponsoring by the GNOME Foundation and the Linux Foundation. At GNOME.Asia I
spoke about &lt;a href="http://0pointer.de/public/gnome-asia-2013-apps.pdf"&gt;Sandboxed
Applications for GNOME&lt;/a&gt;, and at LinuxCon Japan about &lt;a href="http://0pointer.de/public/linuxcon-japan-2013-systemd.pdf"&gt;the first
three years of systemd&lt;/a&gt;. (I think at least the latter one was videotaped,
and recordings might show up on the net eventually). I like to believe both
talks went pretty well, and helped getting the message across to community what
we are working on and what the roadmap for us is, and what we expect from the
various projects, and especially GNOME.  However, for me personally the
&lt;i&gt;hallway track&lt;/i&gt; was the most interesting part. The personal Q&amp;amp;A regarding
our work on kdbus, cgroups, systemd and related projects where highly
interesting. In fact, at both conferences we had something like impromptu
hackfests on the topics of kdbus and cgroups, with some conferences attendees.
I also enjoyed the opportunity to be on Karen's upcoming GNOME podcast,
recorded in a session at Gyeongbokgung Palace in Seoul (what better place could
there be for a podcast recording?).&lt;/p&gt;

&lt;p&gt;I'd like to thank the GNOME and Linux foundations for sponsoring my attendance to these conferences. I'd especially like to thank the organizers of GNOME.Asia for their perfectly organized conference!&lt;/p&gt;

&lt;p&gt;&lt;img src="https://live.gnome.org/Travel/Policy?action=AttachFile&amp;amp;do=get&amp;amp;target=sponsored-badge-simple.png" alt="GNOME Travel Badge" /&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 09 Jun 2013 16:30:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2013-06-09:/blog/projects/asia-2013.html</guid><category>projects</category></item><item><title>It's Time Again!</title><link>https://0pointer.net/blog/projects/berlin-open-source-meetup-4.html</link><description>
                
&lt;p&gt;My fellow Berliners! There's another &lt;a href="https://plus.google.com/events/cnikpv83amqf0mr8cf0ag7f2qus"&gt;Berlin
Open Source Meetup&lt;/a&gt; scheduled for this Sunday! You are invited!&lt;/p&gt;

&lt;p&gt;See you on Sunday!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 08 Apr 2013 10:58:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2013-04-08:/blog/projects/berlin-open-source-meetup-4.html</guid><category>projects</category></item><item><title>What Are We Breaking Now?</title><link>https://0pointer.net/blog/projects/brno.html</link><description>
                
&lt;p&gt;End of February &lt;a href="http://www.devconf.cz/"&gt;devconf.cz&lt;/a&gt;
took place in Brno, Czech Republic. At the conference Kay Sievers,
Harald Hoyer and I did two presentations about our work on &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;
and about the systemd Journal. These talks were taped and the
recordings are now available online.&lt;/p&gt;

&lt;p&gt;First, here's our talk about &lt;a href="https://www.youtube.com/watch?v=_rrpjYD373A"&gt;&lt;i&gt;What Are We
Breaking Now?&lt;/i&gt;&lt;/a&gt;, in which we try to give an overview on what we
are working on currently in the systemd context, and what we expect to
do in the next few months. We cover &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames"&gt;Predictable Network Interface
Names&lt;/a&gt;, the &lt;a href="http://www.freedesktop.org/wiki/Specifications/BootLoaderSpec"&gt;Boot
Loader Spec&lt;/a&gt;, kdbus, the Apps framework, and more.&lt;/p&gt;

&lt;object width="420" height="315"&gt;&lt;param name="movie" value="http://www.youtube.com/v/_rrpjYD373A?hl=en_US&amp;amp;version=3"&gt;&lt;/param&gt;&lt;param name="allowFullScreen" value="true"&gt;&lt;/param&gt;&lt;param name="allowscriptaccess" value="always"&gt;&lt;/param&gt;&lt;embed src="http://www.youtube.com/v/_rrpjYD373A?hl=en_US&amp;amp;version=3" type="application/x-shockwave-flash" width="420" height="315" allowscriptaccess="always" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;

&lt;p&gt;And then, I did my second talk about &lt;a href="https://www.youtube.com/watch?v=i4CACB7paLc"&gt;&lt;i&gt;The systemd
Journal&lt;/i&gt;&lt;/a&gt;, with a focus on how to practically make use of
&lt;tt&gt;journalctl&lt;/tt&gt;, as a day-to-day tool for administrators (these practical
bits start around 28:40). The commands demoed here are all explained in an &lt;a href="http://0pointer.de/blog/projects/journalctl.html"&gt;earlier blog story of
mine&lt;/a&gt;.&lt;/p&gt;

&lt;object width="420" height="315"&gt;&lt;param name="movie" value="http://www.youtube.com/v/i4CACB7paLc?hl=en_US&amp;amp;version=3"&gt;&lt;/param&gt;&lt;param name="allowFullScreen" value="true"&gt;&lt;/param&gt;&lt;param name="allowscriptaccess" value="always"&gt;&lt;/param&gt;&lt;embed src="http://www.youtube.com/v/i4CACB7paLc?hl=en_US&amp;amp;version=3" type="application/x-shockwave-flash" width="420" height="315" allowscriptaccess="always" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;

&lt;p&gt;Unfortunately, the audience questions are sometimes hard or
impossible to understand from the videos, and sometimes the text on
the slides is hard to read, but I still believe that the two talks are
quite interesting.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 14 Mar 2013 16:58:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2013-03-14:/blog/projects/brno.html</guid><category>projects</category></item><item><title>systemd Hackfest!</title><link>https://0pointer.net/blog/projects/hackfest.html</link><description>
                
&lt;p&gt;Hey, you, systemd hacker, Fedora hacker! Listen up! This Thu/Fri is the &lt;a href="https://plus.google.com/u/0/events/cnklef88b85tb6tgf6ue3hn32lg"&gt;systemd
Hackfest&lt;/a&gt; in Brno/Czech Rep, right before &lt;a href="http://www.devconf.cz/"&gt;devconf.cz&lt;/a&gt;!  On thursday we'll talk about
(and hack on) all things systemd. And the hackfest friday is going to be a &lt;a href="https://fedoraproject.org/wiki/FAD_systemd_2013"&gt;Fedora Activity Day&lt;/a&gt;,
so we'll have a focus on systemd integration into Fedora.&lt;/p&gt;

&lt;p&gt;You are invited!&lt;/p&gt;

&lt;p&gt;See you in Brno!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 18 Feb 2013 18:59:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2013-02-18:/blog/projects/hackfest.html</guid><category>projects</category></item><item><title>The Biggest Myths</title><link>https://0pointer.net/blog/projects/the-biggest-myths.html</link><description>
                
&lt;p&gt;Since we first proposed &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;
for inclusion in the distributions it has been frequently discussed in
many forums, mailing lists and conferences. In these discussions one
can often hear certain myths about systemd, that are repeated over and
over again, but certainly don't gain any truth by constant
repetition. Let's take the time to debunk a few of them:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is monolithic.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;If you build systemd with all configuration options enabled you
will build 69 individual binaries. These binaries all serve different
tasks, and are neatly separated for a number of reasons. For example,
we designed systemd with security in mind, hence most daemons run at
minimal privileges (using kernel capabilities, for example) and are
responsible for very specific tasks only, to minimize their security
surface and impact. Also, systemd parallelizes the boot more than any
prior solution. This parallization happens by running more processes
in parallel. Thus it is essential that systemd is nicely split up into
many binaries and thus processes. In fact, many of these
binaries&lt;sup&gt;[1]&lt;/sup&gt; are separated out so nicely, that they are very
useful outside of systemd, too.&lt;/p&gt;

&lt;p&gt;A package involving 69 individual binaries can hardly be called
&lt;i&gt;monolithic&lt;/i&gt;. What is different from prior solutions however,
is that we ship more components in a single tarball, and maintain them
upstream in a single repository with a unified release cycle.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is about speed.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Yes, systemd is fast (&lt;a href="https://plus.google.com/108087225644395745666/posts/LyPQgKdntgA"&gt;A
pretty complete userspace boot-up in ~900ms, anyone?&lt;/a&gt;), but that's
primarily just a side-effect of doing things &lt;i&gt;right&lt;/i&gt;. In fact, we
never really sat down and optimized the last tiny bit of performance
out of systemd. Instead, we actually frequently knowingly picked the
slightly slower code paths in order to keep the code more
readable. This doesn't mean being fast was irrelevant for us, but
reducing systemd to its speed is certainly quite a misconception,
since that is certainly not anywhere near the top of our list of
goals.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd's fast boot-up is irrelevant for
servers.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;That is just completely not true. Many administrators actually are
keen on reduced downtimes during maintenance windows. In High
Availability setups it's kinda nice if the failed machine comes back
up really fast. In cloud setups with a large number of VMs or
containers the price of slow boots multiplies with the number of
instances. Spending minutes of CPU and IO on really slow boots of
hundreds of VMs or containers reduces your system's density
drastically, heck, it even costs you more energy. Slow boots can be
quite financially expensive. Then, fast booting of containers allows
you to implement a logic such as &lt;a href="http://0pointer.de/blog/projects/socket-activated-containers.html"&gt;socket
activated containers&lt;/a&gt;, allowing you to drastically increase the
density of your cloud system.&lt;/p&gt;

&lt;p&gt;Of course, in many server setups boot-up is indeed irrelevant, but
systemd is supposed to cover the whole range. And yes, I am aware
that often it is the server firmware that costs the most time at
boot-up, and the OS anyways fast compared to that, but well, systemd
is still supposed to cover the whole range (see above...), and no,
not all servers have such bad firmware, and certainly not VMs and
containers, which are servers of a kind, too.&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is incompatible with shell scripts.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This is entirely bogus. &lt;i&gt;We&lt;/i&gt; just don't use them for the boot
process, because we believe they aren't the best tool for that
specific purpose, but that doesn't mean systemd was incompatible with
them. You can easily run shell scripts as systemd services, heck, you
can run scripts written in &lt;i&gt;any&lt;/i&gt; language as systemd services,
systemd doesn't care the slightest bit what's inside your
executable. Moreover, we heavily use shell scripts for our own
purposes, for installing, building, testing systemd. And you can stick
your scripts in the early boot process, use them for normal services,
you can run them at latest shutdown, there are practically no
limits.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is difficult.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This also is entire non-sense. A systemd platform is actually much
simpler than traditional Linuxes because it unifies
system objects and their dependencies as systemd units. The
configuration file language is very simple, and redundant
configuration files we got rid of. We provide uniform tools for much
of the configuration of the system. The system is much less
conglomerate than traditional Linuxes are. We also have pretty
comprehensive documentation (&lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;all linked
from the homepage&lt;/a&gt;) about pretty much every detail of systemd, and
this not only covers admin/user-facing interfaces, but also developer
APIs.&lt;/p&gt;

&lt;p&gt;systemd certainly comes with a learning curve. Everything
does. However, we like to believe that it is actually simpler to
understand systemd than a Shell-based boot for most people. Surprised
we say that? Well, as it turns out, Shell is not a pretty language to
learn, it's syntax is arcane and complex. systemd unit files are
substantially easier to understand, they do not expose a programming
language, but are simple and declarative by nature. That all said, if
you are experienced in shell, then yes, adopting systemd will take a
bit of learning.&lt;/p&gt;

&lt;p&gt;To make learning easy we tried hard to provide the maximum
compatibility to previous solutions. But not only that, on many
distributions you'll find that some of the traditional tools will now
even tell you -- while executing what you are asking for -- how you
could do it with the newer tools instead, in a possibly nicer way.&lt;/p&gt;

&lt;p&gt;Anyway, the take-away is probably that systemd is probably as
simple as such a system can be, and that we try hard to make it easy
to learn. But yes, if you know sysvinit then adopting systemd will
require a bit learning, but quite frankly if you mastered sysvinit,
then systemd should be easy for you.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is not modular.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Not true at all. At compile time you have a number of
&lt;tt&gt;configure&lt;/tt&gt; switches to select what you want to build, and what
not. And &lt;a href="http://freedesktop.org/wiki/Software/systemd/MinimalBuilds"&gt;we
document&lt;/a&gt; how you can select in even more detail what you need,
going beyond our configure switches.&lt;/p&gt;

&lt;p&gt;This modularity is not totally unlike the one of the Linux kernel,
where you can select many features individually at compile time. If the
kernel is modular enough for you then systemd should be pretty close,
too.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is only for desktops.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;That is certainly not true. With systemd we try to cover pretty
much the same range as Linux itself does. While we care for desktop
uses, we also care pretty much the same way for server uses, and
embedded uses as well. You can bet that Red Hat wouldn't make it a
core piece of RHEL7 if it wasn't the best option for managing services
on servers.&lt;/p&gt;

&lt;p&gt;People from numerous companies work on systemd. Car manufactureres
build it into cars, Red Hat uses it for a server operating system, and
GNOME uses many of its interfaces for improving the desktop. You find
it in toys, in space telescopes, and in wind turbines.&lt;/p&gt;

&lt;p&gt;Most features I most recently worked on are probably relevant
primarily on servers, such as &lt;a href="http://0pointer.de/blog/projects/socket-activated-containers.html"&gt;container
support&lt;/a&gt;, &lt;a href="http://0pointer.de/blog/projects/resources.html"&gt;resource
management&lt;/a&gt; or the &lt;a href="http://0pointer.de/blog/projects/security.html"&gt;security
features&lt;/a&gt;. We cover desktop systems pretty well already, and there
are number of companies doing systemd development for embedded, some
even offer consulting services in it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd was created as result of the NIH syndrome.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This is not true. Before we began working on systemd we were
pushing for Canonical's Upstart to be widely adopted (and Fedora/RHEL
used it too for a while). However, we eventually came to the
conclusion that its design was inherently flawed at its core (at least
in our eyes: most fundamentally, it leaves dependency management to
the admin/developer, instead of solving this hard problem in code),
and if something's wrong in the core you better replace it, rather
than fix it. This was hardly the only reason though, other things that
came into play, such as the licensing/contribution agreement mess
around it. NIH wasn't one of the reasons, though...&lt;sup&gt;[3]&lt;/sup&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is a freedesktop.org project.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Well, systemd is certainly hosted at fdo, but freedesktop.org is
little else but a repository for code and documentation. Pretty much
any coder can request a repository there and dump his stuff there (as
long as it's somewhat relevant for the infrastructure of free
systems). There's no cabal involved, no "standardization" scheme, no
project vetting, nothing. It's just a nice, free, reliable place to
have your repository. In that regard it's a bit like SourceForge,
github, kernel.org, just not commercial and without over-the-top
requirements, and hence a good place to keep our stuff.&lt;/p&gt;

&lt;p&gt;So yes, we host our stuff at fdo, but the implied assumption of
this myth in that there was a group of people who meet and then agree
on how the future free systems look like, is entirely bogus.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is not UNIX.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;There's certainly some truth in that. systemd's sources do not
contain a single line of code originating from original UNIX. However,
we derive inspiration from UNIX, and thus there's a ton of UNIX in
systemd. For example, the UNIX idea of "everything is a file" finds
reflection in that in systemd all services are exposed at runtime in a
kernel file system, the &lt;tt&gt;cgroupfs&lt;/tt&gt;. Then, one of the original
features of UNIX was multi-seat support, based on built-in terminal
support. Text terminals are hardly the state of the art how you
interface with your computer these days however. With systemd we
brought native &lt;a href="http://0pointer.de/blog/projects/multi-seat.html"&gt;multi-seat&lt;/a&gt;
support back, but this time with full support for today's hardware,
covering graphics, mice, audio, webcams and more, and all that fully
automatic, hotplug-capable and without configuration. In fact the
design of systemd as a suite of integrated tools that each have their
individual purposes but when used together are more than just the sum
of the parts, that's pretty much at the core of UNIX philosophy. Then,
the way our project is handled (i.e. maintaining much of the core OS
in a single git repository) is much closer to the BSD model (which is
a true UNIX, unlike Linux) of doing things (where most of the core OS
is kept in a single CVS/SVN repository) than things on Linux ever
were.&lt;/p&gt;

&lt;p&gt;Ultimately, UNIX is something different for everybody. For us
systemd maintainers it is something we derive inspiration from. For
others it is a religion, and much like the other world religions there
are different readings and understandings of it. Some define UNIX
based on specific pieces of code heritage, others see it just as a set
of ideas, others as a set of commands or APIs, and even others as a
definition of behaviours. Of course, it is impossible to ever make all
these people happy.&lt;/p&gt;

&lt;p&gt;Ultimately the question whether something is UNIX or not matters
very little. Being technically excellent is hardly exclusive to
UNIX. For us, UNIX is a major influence (heck, the biggest one), but
we also have other influences. Hence in some areas systemd will be
very UNIXy, and in others a little bit less.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is complex.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;There's certainly some truth in that. Modern computers are complex
beasts, and the OS running on it will hence have to be complex
too. However, systemd is certainly not more complex than prior
implementations of the same components. Much rather, it's simpler, and
has less redundancy (see above). Moreover, building a simple OS based
on systemd will involve much fewer packages than a traditional Linux
did. Fewer packages makes it easier to build your system, gets rid of
interdependencies and of much of the different behaviour of every
component involved.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is bloated.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Well, &lt;i&gt;bloated&lt;/i&gt; certainly has many different definitions. But in
most definitions systemd is probably the opposite of bloat. Since
systemd components share a common code base, they tend to share much
more code for common code paths. Here's an example: in a traditional
Linux setup, sysvinit, start-stop-daemon, inetd, cron, dbus, all
implemented a scheme to execute processes with various configuration
options in a certain, hopefully clean environment. On systemd the code
paths for all of this, for the configuration parsing, as well as the
actual execution is shared. This means less code, less place for
mistakes, less memory and cache pressure, and is thus a very good
thing. And as a side-effect you actually get a ton more functionality
for it...&lt;/p&gt;

&lt;p&gt;As mentioned above, systemd is also pretty modular. You can choose
at build time which components you need, and which you don't
need. People can hence specifically choose the level of "bloat" they
want.&lt;/p&gt;

&lt;p&gt;When you build systemd, it only requires three dependencies: glibc,
libcap and dbus. That's it. It can make use of more dependencies, but
these are entirely optional.&lt;/p&gt;

&lt;p&gt;So, yeah, whichever way you look at it, it's really not
&lt;i&gt;bloated&lt;/i&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd being Linux-only is not nice to the BSDs.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Completely wrong. The BSD folks are pretty much uninterested in
systemd. If systemd was portable, this would change nothing, they
still wouldn't adopt it. And the same is true for the other Unixes in
the world. Solaris has SMF, BSD has their own "rc" system, and they
always maintained it separately from Linux. The init system is very
close to the core of the entire OS. And these other operating systems
hence define themselves among other things by their core
userspace. The assumption that they'd adopt our core userspace if we
just made it portable, is completely without any foundation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd being Linux-only makes it impossible for Debian to adopt it as default.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Debian supports non-Linux kernels in their distribution. systemd
won't run on those. Is that a problem though, and should that hinder
them to adopt system as default? Not really. The folks who ported
Debian to these other kernels were willing to invest time in a massive
porting effort, they set up test and build systems, and patched and
built numerous packages for their goal. The maintainance of both a
systemd unit file and a classic init script for the packaged services
is a negligable amount of work compared to that, especially since
those scripts more often than not exist already.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd could be ported to other kernels if its maintainers just wanted to.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;That is simply not true. Porting systemd to other kernel is not
feasible. We just use too many Linux-specific interfaces. For a few
one might find replacements on other kernels, some features one might
want to turn off, but for most this is nor really possible. Here's a
small, very incomprehensive list: &lt;tt&gt;cgroups, fanotify, umount2(),
/proc/self/mountinfo &lt;/tt&gt;(including notification)&lt;tt&gt;, /dev/swaps &lt;/tt&gt;(same)&lt;tt&gt;,
udev, netlink, &lt;/tt&gt;the structure of&lt;tt&gt; /sys, /proc/$PID/comm,
/proc/$PID/cmdline, /proc/$PID/loginuid, /proc/$PID/stat,
/proc/$PID/session, /proc/$PID/exe, /proc/$PID/fd, tmpfs, devtmpfs,
&lt;/tt&gt;capabilities, namespaces of all kinds, various&lt;tt&gt; prctl()s, &lt;/tt&gt;numerous&lt;tt&gt;
ioctls, &lt;/tt&gt;the&lt;tt&gt; mount() &lt;/tt&gt;system call and its semantics&lt;tt&gt;, selinux, audit,
inotify, statfs, O_DIRECTORY, O_NOATIME, /proc/$PID/root, waitid(),
SCM_CREDENTIALS, SCM_RIGHTS, mkostemp(), /dev/input, ...&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;And no, if you look at this list and pick out the few where you can
think of obvious counterparts on other kernels, then think again, and
look at the others you didn't pick, and the complexity of replacing
them.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is not portable for no reason.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Non-sense! We use the Linux-specific functionality because we need
it to implement what we want. Linux has so many features that
UNIX/POSIX didn't have, and we want to empower the user with
them. These features are incredibly useful, but only if they are
actually exposed in a friendly way to the user, and that's what we do
with systemd.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd uses binary configuration files.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;No idea who came up with this crazy myth, but it's absolutely not
true. systemd is configured pretty much exclusively via simple text
files. A few settings you can also alter with the kernel command line
and via environment variables. There's nothing binary in its
configuration (not even XML). Just plain, simple, easy-to-read text
files.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is a feature creep.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Well, systemd certainly covers more ground that it used to. It's
not just an init system anymore, but the basic userspace building
block to build an OS from, but we carefully make sure to keep most of
the features optional. You can turn a lot off at compile time, and
even more at runtime. Thus you can choose freely how much feature
creeping you want.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd forces you to do something.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;systemd is not the mafia. It's Free Software, you can do with it
whatever you want, and that includes not using it. That's pretty much
the opposite of "forcing".&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd makes it impossible to run syslog.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Not true, we carefully made sure when &lt;a href="http://0pointer.de/blog/projects/the-journal.html"&gt;we introduced
the journal&lt;/a&gt; that all data is also passed on to any syslog daemon
running. In fact, if something changed, then only that syslog gets
more complete data now than it got before, since we now cover early
boot stuff as well as STDOUT/STDERR of any system service.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is incompatible.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;We try very hard to provide the best possible compatibility with
sysvinit. In fact, the vast majority of init scripts should work just
fine on systemd, unmodified. However, there actually are indeed a few
incompatibilities, but we try to &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/Incompatibilities"&gt;document
these&lt;/a&gt; and explain what to do about them. Ultimately every system
that is not actually sysvinit itself will have a certain amount of
incompatibilities with it since it will not share the exect same code
paths.&lt;/p&gt;

&lt;p&gt;It is our goal to ensure that differences between the various
distributions are kept at a minimum. That means unit files usually
work just fine on a different distribution than you wrote it on, which
is a big improvement over classic init scripts which are very hard to
write in a way that they run on multiple Linux distributions, due to
numerous incompatibilities between them.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is not scriptable, because of its D-Bus use.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Not true. Pretty much every single D-Bus interface systemd provides
is also available in a command line tool, for example in &lt;a href="http://www.freedesktop.org/software/systemd/man/systemctl.html"&gt;&lt;tt&gt;systemctl&lt;/tt&gt;&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/loginctl.html"&gt;&lt;tt&gt;loginctl&lt;/tt&gt;&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/timedatectl.html"&gt;&lt;tt&gt;timedatectl&lt;/tt&gt;&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/hostnamectl.html"&gt;&lt;tt&gt;hostnamectl&lt;/tt&gt;&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/localectl.html"&gt;&lt;tt&gt;localectl&lt;/tt&gt;&lt;/a&gt;
and suchlike. You can easily call these tools from shell scripts, they
open up pretty much the entire API from the command line with
easy-to-use commands.&lt;/p&gt;

&lt;p&gt;That said, D-Bus actually has bindings for almost any scripting
language this world knows. Even from the shell you can invoke
arbitrary D-Bus methods with &lt;a href="http://dbus.freedesktop.org/doc/dbus-send.1.html"&gt;dbus-send&lt;/a&gt;
or &lt;a href="http://developer.gnome.org/gio/unstable/gdbus.html"&gt;gdbus&lt;/a&gt;. If
anything, this improves scriptability due to the good support of D-Bus
in the various scripting languages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd requires you to use some arcane configuration
tools instead of allowing you to edit your configuration files
directly.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Not true at all. We offer some configuration tools, and using them
gets you a bit of additional functionality (for example, command line
completion for all settings!), but there's no need at all to use
them. You can always edit the files in question directly if you wish,
and that's fully supported. Of course sometimes you need to explicitly
reload configuration of some daemon after editing the configuration,
but that's pretty much true for most UNIX services.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is unstable and buggy.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Certainly not according to our data. We have been monitoring the
Fedora bug tracker (and some others) closely for a long long time. The
number of bugs is very low for such a central component of the OS,
especially if you discount the numerous RFE bugs we track for the
project. We are pretty good in keeping systemd out of the list of
blocker bugs of the distribution. We have a relatively fast
development cycle with mostly incremental changes to keep quality and
stability high.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is not debuggable.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;False. Some people try to imply that the shell was a good
debugger. Well, it isn't really. In systemd we provide you with actual
debugging features instead. For example: interactive debugging,
verbose tracing, the ability to mask any component during boot, and
more. Also, we provide &lt;a href="http://freedesktop.org/wiki/Software/systemd/Debugging"&gt;documentation
for it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's certainly well debuggable, we needed that for our own
development work, after all. But we'll grant you one thing: it uses
different debugging tools, we believe more appropriate ones for the
purpose, though.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd makes changes for the changes' sake.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Very much untrue. We pretty much exclusively have technical
reasons for the changes we make, and we explain them in the various
pieces of documentation, wiki pages, blog articles, mailing list
announcements. We try hard to avoid making incompatible changes, and
if we do we try to document the why and how in detail. And if you
wonder about something, just ask us!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd is a Red-Hat-only project, is private property
of some smart-ass developers, who use it to push their views to the
world.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Not true. Currently, there are 16 hackers with commit powers to the
systemd git tree. Of these 16 only six are employed by Red Hat. The 10
others are folks from ArchLinux, from Debian, from Intel, even from
Canonical, Mandriva, Pantheon and a number of community folks with
full commit rights. And they frequently commit big stuff, major
changes. Then, there are 374 individuals with patches in our tree, and
they too came from a number of different companies and backgrounds,
and many of those have way more than one patch in the tree. The
discussions about where we want to take systemd are done in the open,
on our IRC channel (&lt;tt&gt;#systemd&lt;/tt&gt; on freenode, you are always
weclome), on our &lt;a href="http://lists.freedesktop.org/mailman/listinfo/systemd-devel"&gt;mailing
list&lt;/a&gt;, and on public hackfests (&lt;a href="https://plus.google.com/events/cnklef88b85tb6tgf6ue3hn32lg"&gt;such
as our next one in Brno&lt;/a&gt;, you are invited). We regularly attend
various conferences, to collect feedback, to explain what we are doing
and why, like few others do. We &lt;a href="http://0pointer.de/blog"&gt;maintain blogs&lt;/a&gt;, engage in social
networks (&lt;a href="https://plus.google.com/104232583922197692623/posts"&gt;we actually
have some pretty interesting content on Google+&lt;/a&gt;, and our &lt;a href="https://plus.google.com/communities/114587707547576757881"&gt;Google+
Community is pretty alive, too&lt;/a&gt;.), and try really hard to explain
the why and the how how we do things, and to listen to feedback and
figure out where the current issues are (for example, from that
feedback we compiled this lists of often heard myths about
systemd...).&lt;/p&gt;

&lt;p&gt;What most systemd contributors probably share is a rough idea how a
good OS should look like, and the desire to make it happen. However,
by the very nature of the project being Open Source, and rooted in the
community systemd is just what people want it to be, and if it's not
what they want then they can drive the direction with patches and
code, and if that's not feasible, then there are numerous other
options to use, too, systemd is never exclusive.&lt;/p&gt;

&lt;p&gt;One goal of systemd is to unify the dispersed Linux landscape a
bit. We try to get rid of many of the more pointless differences of
the various distributions in various areas of the core OS. As part of
that we sometimes adopt schemes that were previously used by only one
of the distributions and push it to a level where it's the default of
systemd, trying to gently push everybody towards the same set of basic
configuration. This is never exclusive though, distributions can
continue to deviate from that if they wish, however, if they end-up
using the well-supported default their work becomes much easier and
they might gain a feature or two. Now, as it turns out, more
frequently than not we actually adopted schemes that where Debianisms,
rather than Fedoraisms/Redhatisms as best supported scheme by
systemd. For example, systems running systemd now generally store
their hostname in &lt;tt&gt;/etc/hostname&lt;/tt&gt;, something that used to be
specific to Debian and now is used across distributions.&lt;/p&gt;

&lt;p&gt;One thing we'll grant you though, we sometimes can be
smart-asses. We try to be prepared whenever we open our mouth, in
order to be able to back-up with facts what we claim. That might make
us appear as smart-asses.&lt;/p&gt;

&lt;p&gt;But in general, yes, some of the more influental contributors of
systemd work for Red Hat, but they are in the minority, and systemd is
a healthy, open community with different interests, different
backgrounds, just unified by a few rough ideas where the trip should
go, a community where code and its design counts, and certainly not
company affiliation.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd doesn't support &lt;tt&gt;/usr&lt;/tt&gt; split from the root directory.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Non-sense. Since its beginnings systemd supports the
&lt;tt&gt;--with-rootprefix=&lt;/tt&gt; option to its &lt;tt&gt;configure&lt;/tt&gt; script
which allows you to tell systemd to neatly split up the stuff needed
for early boot and the stuff needed for later on. All this logic is
fully present and we keep it up-to-date right there in systemd's build
system.&lt;/p&gt;

&lt;p&gt;Of course, we still don't think that &lt;a href="http://freedesktop.org/wiki/Software/systemd/separate-usr-is-broken"&gt;actually
booting with &lt;tt&gt;/usr&lt;/tt&gt; unavailable is a good idea&lt;/a&gt;, but we
support this just fine in our build system. This won't fix the
inherent problems of the scheme that you'll encounter all across the
board, but you can't blame that on systemd, because in systemd we
support this just fine.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd doesn't allow your to replace its components.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Not true, you can turn off and replace pretty much any part of
systemd, with very few exceptions. And those exceptions (such as
journald) generally allow you to run an alternative side by side to
it, while cooperating nicely with it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;b&gt;Myth: systemd's use of D-Bus instead of sockets makes it intransparent.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;This claim is already contradictory in itself: D-Bus uses sockets
as transport, too. Hence whenever D-Bus is used to send something
around, a socket is used for that too. D-Bus is mostly a standardized
serialization of messages to send over these sockets. If anything this
makes it more transparent, since this serialization is well
documented, understood and there are numerous tracing tools and
language bindings for it. This is very much unlike the usual
homegrown protocols the various classic UNIX daemons use to
communicate locally.&lt;/p&gt;&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;Hmm, did I write I just wanted to debunk a "few" myths? Maybe these
were more than just a few... Anyway, I hope I managed to clear up a
couple of misconceptions. Thanks for your time.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] For example, &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-detect-virt.html"&gt;&lt;tt&gt;systemd-detect-virt&lt;/tt&gt;&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-tmpfiles.html"&gt;&lt;tt&gt;systemd-tmpfiles&lt;/tt&gt;&lt;/a&gt;,
&lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-udevd.service.html"&gt;&lt;tt&gt;systemd-udevd&lt;/tt&gt;&lt;/a&gt; are.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] Also, we are trying to do our little part on maybe
making this better. By exposing boot-time performance of the firmware
more prominently in systemd's boot output we hope to shame the
firmware writers to clean up their stuff.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[3] And anyways, guess which project includes a library "lib&lt;i&gt;nih&lt;/i&gt;" -- Upstart or systemd?&lt;sup&gt;[4]&lt;/sup&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[4] Hint: it's not systemd!&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 26 Jan 2013 02:43:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2013-01-26:/blog/projects/the-biggest-myths.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part XX</title><link>https://0pointer.net/blog/projects/socket-activated-containers.html</link><description>
                
&lt;p&gt; &lt;a href="http://0pointer.de/blog/projects/detect-virt.html"&gt;This is&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/resources.html"&gt;no&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/journalctl.html"&gt;time&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/serial-console.html"&gt;for&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/watchdog.html"&gt;procrastination,&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/self-documented-boot.html"&gt;here&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemctl-journal.html"&gt;is&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/security.html"&gt;already&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/inetd.html"&gt;the&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;twentieth&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;

&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;Socket Activated Internet Services and OS Containers&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/socket-activation.html"&gt;Socket&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/socket-activation2.html"&gt;Activation&lt;/a&gt;
is an important feature of &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;. When
we &lt;a href="http://0pointer.de/blog/projects/systemd.html"&gt;first
announced&lt;/a&gt; systemd we already tried to make the point how great
socket activation is for increasing parallelization and robustness of
socket services, but also for simplifying the dependency logic of the
boot. In this episode I'd like to explain why socket activation is an
important tool for drastically improving how many services and even
containers you can run on a single system with the same resource
usage. Or in other words, how you can drive up the density of customer
sites on a system while spending less on new hardware.&lt;/p&gt;

&lt;h5&gt;Socket Activated Internet Services&lt;/h5&gt;

&lt;p&gt;First, let's take a step back. What was &lt;i&gt;socket activation&lt;/i&gt; again? --
Basically, socket activation simply means that systemd sets up
listening sockets (IP or otherwise) on behalf of your services
(without these running yet), and then starts (&lt;i&gt;activates&lt;/i&gt;) the
services as soon as the first connection comes in. Depending on the
technology the services might idle for a while after having processed
the connection and possible follow-up connections before they exit on
their own, so that systemd will again listen on the sockets and
activate the services again the next time they are connected to. For
the client it is not visible whether the service it is interested in
is currently running or not. The service's IP socket stays continously
connectable, no connection attempt ever fails, and all connects will
be processed promptly.&lt;/p&gt;

&lt;p&gt;A setup like this lowers resource usage: as services are only
running when needed they only consume resources when required. Many
internet sites and services can benefit from that. For example, web
site hosters will have noticed that of the multitude of web sites that
are on the Internet only a tiny fraction gets a continous stream of
requests: the huge majority of web sites still needs to be available
all the time but gets requests only very unfrequently. With a scheme
like socket activation you take benefit of this. By hosting many of
these sites on a single system like this and only activating their
services as necessary allows a large degree of over-commit: you can
run more sites on your system than the available resources actually
allow. Of course, one shouldn't over-commit too much to avoid
contention during peak times.&lt;/p&gt;

&lt;p&gt;Socket activation like this is easy to use in systemd. Many modern
Internet daemons already support socket activation out of the box (and
for those which don't yet it's &lt;a href="http://0pointer.de/blog/projects/socket-activation.html"&gt;not&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/socket-activation2.html"&gt;hard&lt;/a&gt;
to add). Together with systemd's &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;instantiated
units support&lt;/a&gt; it is easy to write a pair of service and socket
templates that then may be instantiated multiple times, once for each
site. Then, (optionally) make use of some of the &lt;a href="http://0pointer.de/blog/projects/security.html"&gt;security
features&lt;/a&gt; of systemd to nicely isolate the customer's site's
services from each other (think: each customer's service should only
see the home directory of the customer, everybody else's directories
should be invisible), and there you go: you now have a highly scalable
and reliable server system, that serves a maximum of securely
sandboxed services at a minimum of resources, and all nicely done with
built-in technology of your OS.&lt;/p&gt;

&lt;p&gt;This kind of setup is already in production use in a number of
companies. For example, the great folks at &lt;a href="https://www.getpantheon.com/"&gt;Pantheon&lt;/a&gt; are running their
scalable instant Drupal system on a setup that is similar to this. (In
fact, Pantheon's David Strauss pioneered this scheme. David, you
rock!)&lt;/p&gt;

&lt;h5&gt;Socket Activated OS Containers&lt;/h5&gt;

&lt;p&gt;All of the above can already be done with older versions of
systemd. If you use a distribution that is based on systemd, you can
right-away set up a system like the one explained above. But let's
take this one step further. With systemd 197 (to be included in Fedora
19), we added support for socket activating not only individual
services, but &lt;i&gt;entire&lt;/i&gt; OS containers. And I really have to say it
at this point: this is stuff I am really excited
about. ;-)&lt;/p&gt;

&lt;p&gt;Basically, with socket activated OS containers, the host's systemd
instance will listen on a number of ports on behalf of a container,
for example one for SSH, one for web and one for the database, and as
soon as the first connection comes in, it will spawn the container
this is intended for, and pass to it all three sockets. Inside of the
container, another systemd is running and will accept the sockets and
then distribute them further, to the services running inside the
container using normal socket activation. The SSH, web and database
services will only see the inside of the container, even though they
have been activated by sockets that were originally created on the
host! Again, to the clients this all is not visible. That an entire OS
container is spawned, triggered by simple network connection is entirely
transparent to the client side.&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The OS containers may contain (as the name suggests) a full
operating system, that might even be a different distribution than is
running on the host. For example, you could run your host on Fedora,
but run a number of Debian containers inside of it. The OS containers
will have their own systemd init system, their own SSH instances,
their own process tree, and so on, but will share a number of other
facilities (such as memory management) with the host.&lt;/p&gt;

&lt;p&gt;For now, only systemd's own trivial container manager, &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;systemd-nspawn&lt;/a&gt;
has been updated to support this kind of socket activation. We hope
that &lt;a href="http://libvirt.org/drvlxc.html"&gt;libvirt-lxc&lt;/a&gt; will
soon gain similar functionality. At this point, let's see in more
detail how such a setup is configured in systemd using nspawn:&lt;/p&gt;

&lt;p&gt;First, please use a tool such as &lt;tt&gt;debootstrap&lt;/tt&gt; or yum's
&lt;tt&gt;--installroot&lt;/tt&gt; to set up a container OS
tree&lt;sup&gt;[2]&lt;/sup&gt;. The details of that are a bit out-of-focus
for this story, there's plenty of documentation around how to do
this. Of course, make sure you have systemd v197 installed inside
the container. For accessing the container from the command line,
consider using &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;systemd-nspawn&lt;/a&gt;
itself. After you configured everything properly, try to boot it up
from the command line with systemd-nspawn's &lt;tt&gt;-b&lt;/tt&gt; switch.&lt;/p&gt;

&lt;p&gt;Assuming you now have a working container that boots up fine, let's
write a service file for it, to turn the container into a systemd
service on the host you can start and stop. Let's create
&lt;tt&gt;/etc/systemd/system/mycontainer.service&lt;/tt&gt; on the host:&lt;/p&gt;

&lt;pre&gt;
[Unit]
Description=My little container

[Service]
ExecStart=/usr/bin/systemd-nspawn -jbD /srv/mycontainer 3
KillMode=process
&lt;/pre&gt;

&lt;p&gt;This service can already be started and stopped via &lt;tt&gt;systemctl
start&lt;/tt&gt; and &lt;tt&gt;systemctl stop&lt;/tt&gt;. However, there's no nice way
to actually get a shell prompt inside the container. So let's add SSH
to it, and even more: let's configure SSH so that a connection to the
container's SSH port will socket-activate the entire container. First,
let's begin with telling the host that it shall now listen on the SSH
port of the container. Let's create
&lt;tt&gt;/etc/systemd/system/mycontainer.socket&lt;/tt&gt; on the host:&lt;/p&gt;

&lt;pre&gt;
[Unit]
Description=The SSH socket of my little container

[Socket]
ListenStream=23
&lt;/pre&gt;

&lt;p&gt;If we start this unit with &lt;tt&gt;systemctl start&lt;/tt&gt; on the host
then it will listen on port 23, and as soon as a connection comes in
it will activate our container service we defined above. We pick port
23 here, instead of the usual 22, as our host's SSH is already
listening on that. nspawn virtualizes the process list and the file
system tree, but does not actually virtualize the network stack, hence
we just pick different ports for the host and the various containers
here.&lt;/p&gt;

&lt;p&gt;Of course, the system inside the container doesn't yet know what to
do with the socket it gets passed due to socket activation. If you'd
now try to connect to the port, the container would start-up but the
incoming connection would be immediately closed since the container
can't handle it yet. Let's fix that!&lt;/p&gt;

&lt;p&gt;All that's necessary for that is teach SSH inside the container
socket activation. For that let's simply write a pair of socket and
service units for SSH. Let's create
&lt;tt&gt;/etc/systemd/system/sshd.socket&lt;/tt&gt; in the container:&lt;/p&gt;

&lt;pre&gt;[Unit]
Description=SSH Socket for Per-Connection Servers

[Socket]
ListenStream=23
Accept=yes&lt;/pre&gt;

&lt;p&gt;Then, let's add the matching SSH service file
&lt;tt&gt;/etc/systemd/system/sshd@.service&lt;/tt&gt; in the container:&lt;/p&gt;

&lt;pre&gt;[Unit]
Description=SSH Per-Connection Server for %I

[Service]
ExecStart=-/usr/sbin/sshd -i
StandardInput=socket&lt;/pre&gt;

&lt;p&gt;Then, make sure to hook &lt;tt&gt;sshd.socket&lt;/tt&gt; into the
&lt;tt&gt;sockets.target&lt;/tt&gt; so that unit is started automatically when the
container boots up:&lt;/p&gt;

&lt;pre&gt;ln -s /etc/systemd/system/sshd.socket /etc/systemd/system/sockets.target.wants/&lt;/pre&gt;

&lt;p&gt;And that's it. If we now activate &lt;tt&gt;mycontainer.socket&lt;/tt&gt; on
the host, the host's systemd will bind the socket and we can connect
to it. If we do this, the host's systemd will activate the container,
and pass the socket in to it. The container's systemd will then take
the socket, match it up with &lt;tt&gt;sshd.socket&lt;/tt&gt; inside the
container. As there's still our incoming connection queued on it, it
will then immediately trigger an instance of &lt;tt&gt;sshd@.service&lt;/tt&gt;,
and we'll have our login.&lt;/p&gt;

&lt;p&gt;And that's already everything there is to it. You can easily add
additional sockets to listen on to
&lt;tt&gt;mycontainer.socket&lt;/tt&gt;. Everything listed therein will be passed
to the container on activation, and will be matched up as good as
possible with all socket units configured inside the
container. Sockets that cannot be matched up will be closed, and
sockets that aren't passed in but are configured for listening will be
bound be the container's systemd instance.&lt;/p&gt;

&lt;p&gt;So, let's take a step back again. What did we gain through all of
this? Well, basically, we can now offer a number of full OS containers
on a single host, and the containers can offer their services without
running continously. The density of OS containers on the host can
hence be increased drastically.&lt;/p&gt;

&lt;p&gt;Of course, this only works for kernel-based virtualization, not for
hardware virtualization. i.e. something like this can only be
implemented on systems such as libvirt-lxc or nspawn, but not in
qemu/kvm.&lt;/p&gt;

&lt;p&gt;If you have a number of containers set up like this, here's one
cool thing the journal allows you to do. If you pass &lt;tt&gt;-m&lt;/tt&gt; to
&lt;tt&gt;journalctl&lt;/tt&gt; on the host, it will automatically discover the
journals of all local containers and interleave them on
display. Nifty, eh?&lt;/p&gt;

&lt;p&gt;With systemd 197 you have everything to set up your own socket
activated OS containers on-board. However, there are a couple of
improvements we're likely to add soon: for example, right now even if
all services inside the container exit on idle, the container still
will stay around, and we really should make it exit on idle too, if
all its services exited and no logins are around. As it turns out we
already have much of the infrastructure for this around: we can reuse
the auto-suspend functionality we added for laptops: detecting when a
laptop is idle and suspending it then is a very similar problem to
detecting when a container is idle and shutting it down then.&lt;/p&gt;

&lt;p&gt;Anyway, this blog story is already way too long. I hope I haven't
lost you half-way already with all this talk of virtualization,
sockets, services, different OSes and stuff. I hope this blog story is
a good starting point for setting up powerful highly scalable server
systems. If you want to know more, consult the documentation and drop
by our IRC channel. Thank you!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] And BTW, &lt;a href="https://plus.google.com/115547683951727699051/posts/cVrLAJ8HYaP"&gt;this
is another reason&lt;/a&gt; why fast boot times the way systemd offers them
are actually a really good thing on servers, too.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] To make it easy: you need a command line such as &lt;tt&gt;yum
--releasever=19 --nogpg --installroot=/srv/mycontainer/ --disablerepo='*'
--enablerepo=fedora install systemd passwd yum fedora-release vim-minimal &lt;/tt&gt;
to install Fedora, and &lt;tt&gt;debootstrap --arch=amd64 unstable
/srv/mycontainer/&lt;/tt&gt; to install Debian. Also see the bottom of &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-nspawn.html"&gt;systemd-nspawn(1)&lt;/a&gt;.
Also note that auditing is currently broken for containers, and if enabled in
the kernel will cause all kinds of errors in the container. Use
&lt;tt&gt;audit=0&lt;/tt&gt; on the host's kernel command line to turn it off.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 09 Jan 2013 18:58:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2013-01-09:/blog/projects/socket-activated-containers.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part XIX</title><link>https://0pointer.net/blog/projects/detect-virt.html</link><description>
                
&lt;p&gt; &lt;a href="http://0pointer.de/blog/projects/resources.html"&gt;Happy&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/journalctl.html"&gt;new&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/serial-console.html"&gt;year&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/watchdog.html"&gt;2013!&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/self-documented-boot.html"&gt;Here&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemctl-journal.html"&gt;is&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/security.html"&gt;now&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/inetd.html"&gt;the&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;nineteenth&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;

&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;Detecting Virtualization&lt;/h4&gt;

&lt;p&gt;When we started working on &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;
we had a closer look on what the various existing init scripts used on
Linux where actually doing. Among other things we noticed that a
number of them where checking explicitly whether they were running in
a virtualized environment (i.e. in a kvm, VMWare, LXC guest or
suchlike) or not. Some init scripts disabled themselves in such
cases&lt;sup&gt;[1]&lt;/sup&gt;, others enabled themselves only in such
cases&lt;sup&gt;[2]&lt;/sup&gt;. Frequently, it would probably have been a better
idea to check for other conditions rather than explicitly checking for
virtualization, but after looking at this from all sides we came to
the conclusion that in many cases explicitly conditionalizing services
based on detected virtualization is a valid thing to do. As a result
we added a new configuration option to systemd that can be used to
conditionalize services this way: &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;&lt;tt&gt;ConditionVirtualization&lt;/tt&gt;&lt;/a&gt;;
we also added a small tool that can be used in shell scripts to detect
virtualization: &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-detect-virt.html"&gt;&lt;tt&gt;systemd-detect-virt(1)&lt;/tt&gt;&lt;/a&gt;;
and finally, we added a minimal bus interface to query this from other
applications.&lt;/p&gt;

&lt;p&gt;Detecting whether your code is run inside a virtualized environment
&lt;a href="http://cgit.freedesktop.org/systemd/systemd/tree/src/shared/virt.c#n30"&gt;is
actually not that hard&lt;/a&gt;. Depending on what precisely you want to
detect it's little more than running the CPUID instruction and maybe
checking a few files in &lt;tt&gt;/sys&lt;/tt&gt; and &lt;tt&gt;/proc&lt;/tt&gt;. The
complexity is mostly about knowing the strings to look for, and
keeping this list up-to-date. Currently, the the virtualization
detection code in systemd can detect the following virtualization
systems:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;p&gt;Hardware virtualization (i.e. VMs):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;qemu&lt;/li&gt;
&lt;li&gt;kvm&lt;/li&gt;
&lt;li&gt;vmware&lt;/li&gt;
&lt;li&gt;microsoft&lt;/li&gt;
&lt;li&gt;oracle&lt;/li&gt;
&lt;li&gt;xen&lt;/li&gt;
&lt;li&gt;bochs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Same-kernel virtualization (i.e. containers):&lt;/p&gt;
&lt;ul&gt;&lt;li&gt;chroot&lt;/li&gt;
&lt;li&gt;openvz&lt;/li&gt;
&lt;li&gt;lxc&lt;/li&gt;
&lt;li&gt;lxc-libvirt&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;systemd-nspawn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Let's have a look how one may make use if this functionality.&lt;/p&gt;

&lt;h5&gt;Conditionalizing Units&lt;/h5&gt;

&lt;p&gt;Adding &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;&lt;tt&gt;ConditionVirtualization&lt;/tt&gt;&lt;/a&gt;
to the &lt;tt&gt;[Unit]&lt;/tt&gt; section of a unit file is enough to
conditionalize it depending on which virtualization is used or whether
one is used at all. Here's an example:&lt;/p&gt;

&lt;pre&gt;[Unit]
Name=My Foobar Service (runs only only on guests)
ConditionVirtualization=yes

[Service]
ExecStart=/usr/bin/foobard&lt;/pre&gt;

&lt;p&gt;Instead of specifiying "&lt;tt&gt;yes&lt;/tt&gt;" or "&lt;tt&gt;no&lt;/tt&gt;" it is possible
to specify the ID of a specific virtualization solution (Example:
"&lt;tt&gt;kvm&lt;/tt&gt;", "&lt;tt&gt;vmware&lt;/tt&gt;", ...), or either
"&lt;tt&gt;container&lt;/tt&gt;" or "&lt;tt&gt;vm&lt;/tt&gt;" to check whether the kernel is
virtualized or the hardware. Also, checks can be prefixed with an exclamation mark ("!") to invert a check. For further details see the &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;manual page&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;In Shell Scripts&lt;/h5&gt;

&lt;p&gt;In shell scripts it is easy to check for virtualized systems with
the &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-detect-virt.html"&gt;&lt;tt&gt;systemd-detect-virt(1)&lt;/tt&gt;&lt;/a&gt;
tool. Here's an example:&lt;/p&gt;

&lt;pre&gt;
if systemd-detect-virt -q ; then
        echo "Virtualization is used:" `systemd-detect-virt`
else
        echo "No virtualization is used."
fi&lt;/pre&gt;

&lt;p&gt;If this tool is run it will return with an exit code of zero
(success) if a virtualization solution has been found, non-zero
otherwise. It will also print a short identifier of the used
virtualization solution, which can be suppressed with
&lt;tt&gt;-q&lt;/tt&gt;. Also, with the &lt;tt&gt;-c&lt;/tt&gt; and &lt;tt&gt;-v&lt;/tt&gt; parameters it is
possible to detect only kernel or only hardware virtualization
environments. For further details see the &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-detect-virt.html"&gt;manual
page&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;In Programs&lt;/h5&gt;

&lt;p&gt;Whether virtualization is available is also exported on the system bus:&lt;/p&gt;

&lt;pre&gt;$ gdbus call --system --dest org.freedesktop.systemd1 --object-path /org/freedesktop/systemd1 --method org.freedesktop.DBus.Properties.Get org.freedesktop.systemd1.Manager Virtualization
(&amp;lt;'systemd-nspawn'&amp;gt;,)&lt;/pre&gt;

&lt;p&gt;This property contains the empty string if no virtualization is
detected. Note that some container environments cannot be detected
directly from unprivileged code. That's why we expose this property on
the bus rather than providing a library -- the bus implicitly solves
the privilege problem quite nicely.&lt;/p&gt;

&lt;p&gt;Note that all of this will only ever detect and return information
about the "inner-most" virtualization solution. If you stack
virtualization ("We must go deeper!") then these interfaces will
expose the one the code is most directly interfacing
with. Specifically that means that if a container solution is used
inside of a VM, then only the container is generally detected and
returned.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footonotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] For example: running certain device management service in a
container environment that has no access to any physical hardware makes little sense.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] For example: some VM solutions work best if certain
vendor-specific userspace components are running that connect the
guest with the host in some way.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 08 Jan 2013 21:19:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2013-01-08:/blog/projects/detect-virt.html</guid><category>projects</category></item><item><title>Third Berlin Open Source Meetup</title><link>https://0pointer.net/blog/projects/berlin-open-source-meetup-3.html</link><description>
                
&lt;p&gt;The Third &lt;a href="https://plus.google.com/u/0/events/c3f3a8go99cn72n8rsosbj7djks"&gt;Berlin Open Source Meetup&lt;/a&gt; is going to take place on Sunday, January 20th. You are invited!&lt;/p&gt;

&lt;p&gt;It's a public event, so everybody is welcome, and please feel free to invite others!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 03 Jan 2013 23:20:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2013-01-03:/blog/projects/berlin-open-source-meetup-3.html</guid><category>projects</category></item><item><title>foss.in Needs Your Funding!</title><link>https://0pointer.net/blog/projects/fossin2012-2.html</link><description>
                
&lt;p&gt;One of the most exciting conferences in the Free Software world, &lt;a href="http://foss.in/"&gt;foss.in&lt;/a&gt; in Bangalore, India has &lt;a href="http://atulchitnis.net/2012/sponsoring-foss-in/"&gt;trouble finding enough
sponsoring&lt;/a&gt; for this year's edition. &lt;a href="http://foss.in/2012/take-one-speakers-at-foss-in2012"&gt;Many speakers from
all around the Free Software world&lt;/a&gt; (including yours truly) have signed up
to present at the event, and the conference would appreciate any corporate
funding they can get!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://atulchitnis.net/2012/sponsoring-foss-in/"&gt;Please check if
your company can help&lt;/a&gt; and &lt;a href="http://foss.in/sponsors"&gt;contact the
organizers&lt;/a&gt; for details!&lt;/p&gt;

&lt;p&gt;See you in Bangalore!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://foss.in"&gt;&lt;img src="http://foss.in/wp-content/uploads/2008/11/speaking_250px.jpg" alt="FOSS.IN" width="250" height="250" border="0" /&gt;&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 15 Nov 2012 13:05:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-11-15:/blog/projects/fossin2012-2.html</guid><category>projects</category></item><item><title>systemd for Developers III</title><link>https://0pointer.net/blog/projects/journal-submit.html</link><description>
                
&lt;p&gt;Here's the third episode of &lt;a href="http://0pointer.de/blog/projects/socket-activation.html"&gt;of my&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/socket-activation2.html"&gt;&lt;i&gt;systemd for Developers&lt;/i&gt;&lt;/a&gt; series.&lt;/p&gt;

&lt;h4&gt;Logging to the Journal&lt;/h4&gt;

&lt;p&gt;In a &lt;a href="http://0pointer.de/blog/projects/journalctl.html"&gt;recent blog
story&lt;/a&gt; intended for administrators I shed some light on how to use
the &lt;a href="http://www.freedesktop.org/software/systemd/man/journalctl.html"&gt;journalctl(1)&lt;/a&gt;
tool to browse and search the systemd journal. In this blog story for developers
I want to explain a little how to get log data into the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;
Journal in the first place.&lt;/p&gt;

&lt;p&gt;The good thing is that getting log data into the Journal is not
particularly hard, since there's a good chance the Journal already
collects it anyway and writes it to disk. The journal collects:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;All data logged via libc &lt;tt&gt;syslog()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;The data from the kernel logged with &lt;tt&gt;printk()&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Everything written to STDOUT/STDERR of any system service&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This covers pretty much all of the traditional log output of a
Linux system, including messages from the kernel initialization phase,
the initial RAM disk, the early boot logic, and the main system
runtime.&lt;/p&gt;

&lt;h4&gt;syslog()&lt;/h4&gt;

&lt;p&gt;Let's have a quick look how &lt;tt&gt;syslog()&lt;/tt&gt; is used again. Let's
write a journal message using this call:&lt;/p&gt;

&lt;pre&gt;#include &amp;lt;syslog.h&amp;gt;

int main(int argc, char *argv[]) {
        syslog(LOG_NOTICE, "Hello World");
        return 0;
}&lt;/pre&gt;

&lt;p&gt;This is C code, of course. Many higher level languages provide APIs
that allow writing local syslog messages. Regardless which language
you choose, all data written like this ends up in the Journal.&lt;/p&gt;

&lt;p&gt;Let's have a look how this looks after it has been written into the
journal (this is the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/json"&gt;JSON
output&lt;/a&gt; &lt;tt&gt;journalctl -o json-pretty&lt;/tt&gt; generates):&lt;/p&gt;

&lt;pre&gt;{
        "_BOOT_ID" : "5335e9cf5d954633bb99aefc0ec38c25",
        "_TRANSPORT" : "syslog",
        "PRIORITY" : "5",
        "_UID" : "500",
        "_GID" : "500",
        "_AUDIT_SESSION" : "2",
        "_AUDIT_LOGINUID" : "500",
        "_SYSTEMD_CGROUP" : "/user/lennart/2",
        "_SYSTEMD_SESSION" : "2",
        "_SELINUX_CONTEXT" : "unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023",
        "_MACHINE_ID" : "a91663387a90b89f185d4e860000001a",
        "_HOSTNAME" : "epsilon",
        "_COMM" : "test-journal-su",
        "_CMDLINE" : "./test-journal-submit",
        "SYSLOG_FACILITY" : "1",
        "_EXE" : "/home/lennart/projects/systemd/test-journal-submit",
        "_PID" : "3068",
        "SYSLOG_IDENTIFIER" : "test-journal-submit",
        "MESSAGE" : "Hello World!",
        "_SOURCE_REALTIME_TIMESTAMP" : "1351126905014938"
}&lt;/pre&gt;

&lt;p&gt;This nicely shows how the Journal implicitly augmented our little
log message with various meta data fields which describe in more
detail the context our message was generated from. For an explanation
of the various fields, please refer to &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html"&gt;systemd.journal-fields(7)&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;printf()&lt;/h4&gt;

&lt;p&gt;If you are writing code that is run as a systemd service, generating journal
messages is even easier:&lt;/p&gt;

&lt;pre&gt;#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char *argv[]) {
        printf("Hello World\n");
        return 0;
}&lt;/pre&gt;

&lt;p&gt;Yupp, that's easy, indeed.&lt;/p&gt;

&lt;p&gt;The printed string in this example is logged at a default log
priority of LOG_INFO&lt;sup&gt;[1]&lt;/sup&gt;. Sometimes it is useful to change
the log priority for such a printed string. When systemd parses
STDOUT/STDERR of a service it will look for priority values enclosed
in &amp;lt; &amp;gt; at the beginning of each line&lt;sup&gt;[2]&lt;/sup&gt;, following the scheme
used by the kernel's &lt;tt&gt;printk()&lt;/tt&gt; which in turn took
inspiration from the BSD syslog network serialization of messages. We
can make use of this systemd feature like this:&lt;/p&gt;

&lt;pre&gt;#include &amp;lt;stdio.h&amp;gt;

#define PREFIX_NOTICE "&amp;lt;5&amp;gt;"

int main(int argc, char *argv[]) {
        printf(PREFIX_NOTICE "Hello World\n");
        return 0;
}&lt;/pre&gt;

&lt;p&gt;Nice! Logging with nothing but &lt;tt&gt;printf()&lt;/tt&gt; but we still get
log priorities!&lt;/p&gt;

&lt;p&gt;This scheme works with any programming language, including, of course, shell:&lt;/p&gt;

&lt;pre&gt;#!/bin/bash

echo "&amp;lt;5&amp;gt;Hellow world"&lt;/pre&gt;

&lt;h4&gt;Native Messages&lt;/h4&gt;

&lt;p&gt;Now, what I explained above is not particularly exciting: the
take-away is pretty much only that things end up in the journal if
they are output using the traditional message printing APIs. Yaaawn!&lt;/p&gt;

&lt;p&gt;Let's make this more interesting, let's look at what the Journal
provides as native APIs for logging, and let's see what its benefits
are. Let's translate our little example into the 1:1 counterpart
using the Journal's logging API &lt;a href="http://0pointer.de/public/systemd-man/sd_journal_print.html"&gt;&lt;tt&gt;sd_journal_print(3)&lt;/tt&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;#include &amp;lt;systemd/sd-journal.h&amp;gt;

int main(int argc, char *argv[]) {
        sd_journal_print(LOG_NOTICE, "Hello World");
        return 0;
}&lt;/pre&gt;

&lt;p&gt;This doesn't look much more interesting than the two examples
above, right? After compiling this with &lt;tt&gt;`pkg-config --cflags
--libs libsystemd-journal`&lt;/tt&gt; appended to the compiler parameters,
let's have a closer look at the JSON representation of the journal
entry this generates:&lt;/p&gt;

&lt;pre&gt; {
        "_BOOT_ID" : "5335e9cf5d954633bb99aefc0ec38c25",
        "PRIORITY" : "5",
        "_UID" : "500",
        "_GID" : "500",
        "_AUDIT_SESSION" : "2",
        "_AUDIT_LOGINUID" : "500",
        "_SYSTEMD_CGROUP" : "/user/lennart/2",
        "_SYSTEMD_SESSION" : "2",
        "_SELINUX_CONTEXT" : "unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023",
        "_MACHINE_ID" : "a91663387a90b89f185d4e860000001a",
        "_HOSTNAME" : "epsilon",
&lt;b&gt;        "CODE_FUNC" : "main",&lt;/b&gt;
        "_TRANSPORT" : "journal",
        "_COMM" : "test-journal-su",
        "_CMDLINE" : "./test-journal-submit",
&lt;b&gt;        "CODE_FILE" : "src/journal/test-journal-submit.c",&lt;/b&gt;
        "_EXE" : "/home/lennart/projects/systemd/test-journal-submit",
        "MESSAGE" : "Hello World",
&lt;b&gt;        "CODE_LINE" : "4",&lt;/b&gt;
        "_PID" : "3516",
        "_SOURCE_REALTIME_TIMESTAMP" : "1351128226954170"
}&lt;/pre&gt;

&lt;p&gt;This looks pretty much the same, right? Almost! I highlighted three new
lines compared to the earlier output. Yes, you guessed it, by using
&lt;tt&gt;sd_journal_print()&lt;/tt&gt; meta information about the generating
source code location is implicitly appended to each
message&lt;sup&gt;[3]&lt;/sup&gt;, which is helpful for a developer to identify
the source of a problem.&lt;/p&gt;

&lt;p&gt;The primary reason for using the Journal's native logging APIs is a
not just the source code location however: it is to allow
passing additional structured log messages from the program into the
journal. This additional log data may the be used to search the
journal for, is available for consumption for other programs, and
might help the administrator to track down issues beyond what is
expressed in the human readable message text. Here's and example how
to do that with &lt;tt&gt;sd_journal_send()&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;#include &amp;lt;systemd/sd-journal.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(int argc, char *argv[]) {
        sd_journal_send("MESSAGE=Hello World!",
                        "MESSAGE_ID=52fb62f99e2c49d89cfbf9d6de5e3555",
                        "PRIORITY=5",
                        "HOME=%s", getenv("HOME"),
                        "TERM=%s", getenv("TERM"),
                        "PAGE_SIZE=%li", sysconf(_SC_PAGESIZE),
                        "N_CPUS=%li", sysconf(_SC_NPROCESSORS_ONLN),
                        NULL);
        return 0;
}&lt;/pre&gt;

&lt;p&gt;This will write a log message to the journal much like the earlier
examples. However, this times a few additional, structured fields are
attached:&lt;/p&gt;

&lt;pre&gt;{
        "__CURSOR" : "s=ac9e9c423355411d87bf0ba1a9b424e8;i=5930;b=5335e9cf5d954633bb99aefc0ec38c25;m=16544f875b;t=4ccd863cdc4f0;x=896defe53cc1a96a",
        "__REALTIME_TIMESTAMP" : "1351129666274544",
        "__MONOTONIC_TIMESTAMP" : "95903778651",
        "_BOOT_ID" : "5335e9cf5d954633bb99aefc0ec38c25",
        "PRIORITY" : "5",
        "_UID" : "500",
        "_GID" : "500",
        "_AUDIT_SESSION" : "2",
        "_AUDIT_LOGINUID" : "500",
        "_SYSTEMD_CGROUP" : "/user/lennart/2",
        "_SYSTEMD_SESSION" : "2",
        "_SELINUX_CONTEXT" : "unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023",
        "_MACHINE_ID" : "a91663387a90b89f185d4e860000001a",
        "_HOSTNAME" : "epsilon",
        "CODE_FUNC" : "main",
        "_TRANSPORT" : "journal",
        "_COMM" : "test-journal-su",
        "_CMDLINE" : "./test-journal-submit",
        "CODE_FILE" : "src/journal/test-journal-submit.c",
        "_EXE" : "/home/lennart/projects/systemd/test-journal-submit",
        "MESSAGE" : "Hello World!",
        "_PID" : "4049",
        "CODE_LINE" : "6",
&lt;b&gt;        "MESSAGE_ID" : "52fb62f99e2c49d89cfbf9d6de5e3555",&lt;/b&gt;
&lt;b&gt;        "HOME" : "/home/lennart",&lt;/b&gt;
&lt;b&gt;        "TERM" : "xterm-256color",&lt;/b&gt;
&lt;b&gt;        "PAGE_SIZE" : "4096",&lt;/b&gt;
&lt;b&gt;        "N_CPUS" : "4",&lt;/b&gt;
        "_SOURCE_REALTIME_TIMESTAMP" : "1351129666241467"
}&lt;/pre&gt;

&lt;p&gt;Awesome! Our simple example worked! The five meta data fields we
attached to our message appeared in the journal. We used &lt;a href="http://0pointer.de/public/systemd-man/sd_journal_print.html"&gt;&lt;tt&gt;sd_journal_send()&lt;/tt&gt;&lt;/a&gt;
for this which works much like &lt;tt&gt;sd_journal_print()&lt;/tt&gt; but takes a
NULL terminated list of format strings each followed by its
arguments. The format strings must include the field name and a '='
before the values.&lt;/p&gt;

&lt;p&gt;Our little structured message included seven fields. The first three we passed are well-known fields:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;tt&gt;MESSAGE=&lt;/tt&gt; is the actual human readable message part of the structured message.&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;PRIORITY=&lt;/tt&gt; is the numeric message priority value as known from BSD syslog formatted as an integer string.&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;MESSAGE_ID=&lt;/tt&gt; is a 128bit ID that identifies our specific
message call, formatted as hexadecimal string. We randomly generated
this string with &lt;tt&gt;journalctl --new-id128&lt;/tt&gt;. This can be used by
applications to track down all occasions of this specific
message. The 128bit can be a UUID, but this is not a requirement or enforced.&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;Applications may relatively freely define additional fields as they
see fit (we defined four pretty arbitrary ones in our example). A
complete list of the currently well-known fields is available in &lt;a href="http://0pointer.de/public/systemd-man/systemd.journal-fields.html"&gt;systemd.journal-fields(7)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's see how the message ID helps us finding this message and all
its occasions in the journal:&lt;/p&gt;

&lt;pre&gt;
$ journalctl MESSAGE_ID=52fb62f99e2c49d89cfbf9d6de5e3555
-- Logs begin at Thu, 2012-10-18 04:07:03 CEST, end at Thu, 2012-10-25 04:48:21 CEST. --
Oct 25 03:47:46 epsilon test-journal-se[4049]: Hello World!
Oct 25 04:40:36 epsilon test-journal-se[4480]: Hello World!
&lt;/pre&gt;

&lt;p&gt;Seems I already invoked this example tool twice!&lt;/p&gt;

&lt;p&gt;Many messages systemd itself generates &lt;a href="http://cgit.freedesktop.org/systemd/systemd/plain/src/systemd/sd-messages.h"&gt;have
message IDs&lt;/a&gt;. This is useful for example, to find all occasions
where a program dumped core (&lt;tt&gt;journalctl
MESSAGE_ID=fc2e22bc6ee647b6b90729ab34a250b1&lt;/tt&gt;), or when a user
logged in (&lt;tt&gt;journalctl
MESSAGE_ID=8d45620c1a4348dbb17410da57c60c66&lt;/tt&gt;). If your application
generates a message that might be interesting to recognize in the
journal stream later on, we recommend attaching such a message ID to
it. You can easily allocate a new one for your message with &lt;tt&gt;journalctl
--new-id128&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;This example shows how we can use the Journal's native APIs to
generate structured, recognizable messages. You can do much more than
this with the C API. For example, you may store binary data in journal
fields as well, which is useful to attach coredumps or hard disk SMART
states to events where this applies. In order to make this blog story
not longer than it already is we'll not go into detail about how to do
this, an I ask you to check out &lt;a href="http://0pointer.de/public/systemd-man/sd_journal_print.html"&gt;&lt;tt&gt;sd_journal_send(3)&lt;/tt&gt;&lt;/a&gt;
for further information on this.&lt;/p&gt;

&lt;h4&gt;Python&lt;/h4&gt;

&lt;p&gt;The examples above focus on C. Structured logging to the Journal is
also available from other languages. Along with systemd itself we ship
bindings for Python. Here's an example how to use this:&lt;/p&gt;

&lt;pre&gt;from systemd import journal
journal.send('Hello world')
journal.send('Hello, again, world', FIELD2='Greetings!', FIELD3='Guten tag')&lt;/pre&gt;

&lt;p&gt;Other binding exist for &lt;a href="http://fourkitchens.com/blog/2012/09/25/nodejs-extension-systemd"&gt;Node.js&lt;/a&gt;,
&lt;a href="https://github.com/systemd/php-systemd"&gt;PHP&lt;/a&gt;, &lt;a href="https://github.com/philips/luvit-systemd-journal"&gt;Lua&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Portability&lt;/h4&gt;

&lt;p&gt;Generating structured data is a very useful feature for services to
make their logs more accessible both for administrators and other
programs. In addition to the &lt;i&gt;implicit&lt;/i&gt; structure the Journal
adds to all logged messages it is highly beneficial if the various
components of our stack also provide &lt;i&gt;explicit&lt;/i&gt; structure
in their messages, coming from within the processes themselves.&lt;/p&gt;

&lt;p&gt;Porting an existing program to the Journal's logging APIs comes
with one pitfall though: the Journal is Linux-only. If non-Linux
portability matters for your project it's a good idea to provide an
alternative log output, and make it selectable at compile-time.&lt;/p&gt;

&lt;p&gt;Regardless which way to log you choose, in all cases we'll forward
the message to a classic syslog daemon running side-by-side with the
Journal, if there is one. However, much of the structured meta data of
the message is not forwarded since the classic syslog protocol simply
has no generally accepted way to encode this and we shouldn't attempt
to serialize meta data into classic syslog messages which might turn
&lt;tt&gt;/var/log/messages&lt;/tt&gt; into an unreadable dump of machine
data. Anyway, to summarize this: regardless if you log with
&lt;tt&gt;syslog()&lt;/tt&gt;, &lt;tt&gt;printf()&lt;/tt&gt;, &lt;tt&gt;sd_journal_print()&lt;/tt&gt; or
&lt;tt&gt;sd_journal_send()&lt;/tt&gt;, the message will be stored and indexed by
the journal and it will also be forwarded to classic syslog.&lt;/p&gt;

&lt;p&gt;And that's it for today. In a follow-up episode we'll focus on
retrieving messages from the Journal using the C API, possibly
filtering for a specific subset of messages. Later on, I hope to give
a real-life example how to port an existing service to the Journal's
logging APIs. Stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] This can be changed with the &lt;tt&gt;SyslogLevel=&lt;/tt&gt; service
setting. See &lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;systemd.exec(5)&lt;/a&gt;
for details.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] Interpretation of the &amp;lt; &amp;gt; prefixes of logged lines
may be disabled with the &lt;tt&gt;SyslogLevelPrefix=&lt;/tt&gt; service setting. See &lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;systemd.exec(5)&lt;/a&gt;
for details.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[3] Appending the code location to the log messages can be
turned off at compile time by defining
-DSD_JOURNAL_SUPPRESS_LOCATION.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 25 Oct 2012 04:29:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-10-25:/blog/projects/journal-submit.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part XVIII</title><link>https://0pointer.net/blog/projects/resources.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/journalctl.html"&gt;Hot
on&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/serial-console.html"&gt;the
heels&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/watchdog.html"&gt;of
the &lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/self-documented-boot.html"&gt;previous
story&lt;/a&gt;, &lt;a href="http://0pointer.de/blog/projects/systemctl-journal.html"&gt;here's&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/security.html"&gt;now&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/inetd.html"&gt;the&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;eighteenth&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;

&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;Managing Resources&lt;/h4&gt;

&lt;p&gt;An important facet of modern computing is resource management: if
you run more than one program on a single machine you want to assign
the available resources to them enforcing particular policies. This is
particularly crucial on smaller, embedded or mobile systems where the
scarce resources are the main constraint, but equally for large
installations such as cloud setups, where resources are plenty, but
the number of programs/services/containers on a single node is
drastically higher.&lt;/p&gt;

&lt;p&gt;Traditionally, on Linux only one policy was really available: all
processes got about the same CPU time, or IO bandwith, modulated a bit
via the process &lt;i&gt;nice&lt;/i&gt; value. This approach is very simple and
covered the various uses for Linux quite well for a long
time. However, it has drawbacks: not all all processes deserve to be
even, and services involving lots of processes (think: Apache with a
lot of CGI workers) this way would get more resources than services
whith very few (think: syslog).&lt;/p&gt;

&lt;p&gt;When thinking about service management for systemd, we quickly
realized that resource management must be core functionality of it. In
a modern world -- regardless if server or embedded -- controlling CPU,
Memory, and IO resources of the various services cannot be an
afterthought, but must be built-in as first-class service settings. And
it must be per-service and not per-process as the traditional nice
values or &lt;a href="http://linux.die.net/man/2/setrlimit"&gt;POSIX
Resource Limits&lt;/a&gt; were.&lt;/p&gt;

&lt;p&gt;In this story I want to shed some light on what you can do to
enforce resource policies on systemd services. Resource Management in
one way or another has been available in systemd for a while already,
so it's really time we introduce this to the broader audience.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/cgroups-vs-cgroups.html"&gt;In an
earlier blog post&lt;/a&gt; I highlighted the difference between Linux
Control Croups (cgroups) as a labelled, hierarchal grouping mechanism,
and Linux cgroups as a resource controlling subsystem. While systemd
requires the former, the latter is optional. And this optional latter
part is now what we can make use of to manage per-service
resources. (At this points, it's probably a good idea to read up on &lt;a href="https://en.wikipedia.org/wiki/Cgroups"&gt;cgroups&lt;/a&gt; before
reading on, to get at least a basic idea what they are and what they
accomplish. Even thought the explanations below will be pretty
high-level, it all makes a lot more sense if you grok the background a
bit.)&lt;/p&gt;

&lt;p&gt;The main Linux cgroup controllers for resource management are &lt;a href="http://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt"&gt;cpu&lt;/a&gt;,
&lt;a href="http://www.kernel.org/doc/Documentation/cgroups/memory.txt"&gt;memory&lt;/a&gt;
and &lt;a href="http://www.kernel.org/doc/Documentation/cgroups/blkio-controller.txt"&gt;blkio&lt;/a&gt;. To
make use of these, they need to be enabled in the kernel, which many
distributions (including Fedora) do. systemd exposes a couple of high-level service
settings to make use of these controllers without requiring too much
knowledge of the gory kernel details. &lt;/p&gt;

&lt;h4&gt;Managing CPU&lt;/h4&gt;

&lt;p&gt;As a nice default, if the &lt;tt&gt;cpu&lt;/tt&gt; controller is enabled in the
kernel, systemd will create a cgroup for each service when starting
it. Without any further configuration this already has one nice
effect: on a systemd system every system service will get an even
amount of CPU, regardless how many processes it consists off. Or in
other words: on your web server MySQL will get the roughly same amount
of CPU as Apache, even if the latter consists a 1000 CGI script
processes, but the former only of a few worker tasks. (This behavior can
be turned off, see &lt;a href="http://0pointer.de/public/systemd-man/systemd.conf.html"&gt;DefaultControllers=&lt;/a&gt;
in &lt;tt&gt;/etc/systemd/system.conf&lt;/tt&gt;.)&lt;/p&gt;

&lt;p&gt;On top of this default, it is possible to explicitly configure the
CPU shares a service gets with the &lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;CPUShares=&lt;/a&gt;
setting. The default value is 1024, if you increase this number you'll
assign more CPU to a service than an unaltered one at 1024, if you decrease it, less.&lt;/p&gt;

&lt;p&gt;Let's see in more detail, how we can make use of this. Let's say we
want to assign Apache 1500 CPU shares instead of the default of
1024. For that, let's create a new administrator service file for
Apache in &lt;tt&gt;/etc/systemd/system/httpd.service&lt;/tt&gt;, overriding the
vendor supplied one in &lt;tt&gt;/usr/lib/systemd/system/httpd.service&lt;/tt&gt;,
but let's change the &lt;tt&gt;CPUShares=&lt;/tt&gt; parameter:&lt;/p&gt;

&lt;pre&gt;.include /usr/lib/systemd/system/httpd.service

[Service]
CPUShares=1500&lt;/pre&gt;

&lt;p&gt;The first line will pull in the vendor service file. Now, lets's
reload systemd's configuration and restart Apache so that the new
service file is taken into account:&lt;/p&gt;

&lt;pre&gt;systemctl daemon-reload
systemctl restart httpd.service&lt;/pre&gt;

&lt;p&gt;And yeah, that's already it, you are done!&lt;/p&gt;

&lt;p&gt;(Note that setting &lt;tt&gt;CPUShares=&lt;/tt&gt; in a unit file will cause the
specific service to get its own cgroup in the &lt;tt&gt;cpu&lt;/tt&gt; hierarchy,
even if &lt;tt&gt;cpu&lt;/tt&gt; is not included in
&lt;tt&gt;DefaultControllers=&lt;/tt&gt;.)&lt;/p&gt;

&lt;h4&gt;Analyzing Resource usage&lt;/h4&gt;

&lt;p&gt;Of course, changing resource assignments without actually
understanding the resource usage of the services in questions is like
blind flying. To help you understand the resource usage of all
services, we created the tool &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-cgtop.html"&gt;systemd-cgtop&lt;/a&gt;,
that will enumerate all cgroups of the system, determine their
resource usage (CPU, Memory, and IO) and present them in a &lt;a href="http://linux.die.net/man/1/top"&gt;top&lt;/a&gt;-like fashion. Building
on the fact that systemd services are managed in cgroups this tool
hence can present to you for services what top shows you for
processes.&lt;/p&gt;

&lt;p&gt;Unfortunately, by default &lt;tt&gt;cgtop&lt;/tt&gt; will only be able to chart
CPU usage per-service for you, IO and Memory are only tracked as total
for the entire machine. The reason for this is simply that by default
there are no per-service cgroups in the &lt;tt&gt;blkio&lt;/tt&gt; and
&lt;tt&gt;memory&lt;/tt&gt; controller hierarchies but that's what we need to
determine the resource usage. The best way to get this data for all
services is to simply add the &lt;tt&gt;memory&lt;/tt&gt; and &lt;tt&gt;blkio&lt;/tt&gt;
controllers to the aforementioned &lt;tt&gt;DefaultControllers=&lt;/tt&gt; setting
in &lt;tt&gt;system.conf&lt;/tt&gt;.&lt;/p&gt;

&lt;h4&gt;Managing Memory&lt;/h4&gt;

&lt;p&gt;To enforce limits on memory systemd provides the
&lt;tt&gt;MemoryLimit=&lt;/tt&gt;, and &lt;tt&gt;MemorySoftLimit=&lt;/tt&gt; settings for
services, summing up the memory of all its processes. These settings
take memory sizes in bytes that are the total memory limit for the
service. This setting understands the usual K, M, G, T suffixes for
Kilobyte, Megabyte, Gigabyte, Terabyte (to the base of 1024).&lt;/p&gt;

&lt;pre&gt;.include /usr/lib/systemd/system/httpd.service

[Service]
MemoryLimit=1G&lt;/pre&gt;

&lt;p&gt;(Analogue to &lt;tt&gt;CPUShares=&lt;/tt&gt; above setting this option will cause
the service to get its own cgroup in the &lt;tt&gt;memory&lt;/tt&gt; cgroup
hierarchy.)&lt;/p&gt;

&lt;h4&gt;Managing Block IO&lt;/h4&gt;

&lt;p&gt;To control block IO multiple settings are available. First of all
&lt;tt&gt;BlockIOWeight=&lt;/tt&gt; may be used which assigns an IO &lt;i&gt;weight&lt;/i&gt;
to a specific service. In behaviour the &lt;i&gt;weight&lt;/i&gt; concept is not
unlike the &lt;i&gt;shares&lt;/i&gt; concept of CPU resource control (see
above). However, the default weight is 1000, and the valid range is
from 10 to 1000:&lt;/p&gt;

&lt;pre&gt;.include /usr/lib/systemd/system/httpd.service

[Service]
BlockIOWeight=500&lt;/pre&gt;

&lt;p&gt;Optionally, per-device weights can be specified:&lt;/p&gt;

&lt;pre&gt;.include /usr/lib/systemd/system/httpd.service

[Service]
BlockIOWeight=/dev/disk/by-id/ata-SAMSUNG_MMCRE28G8MXP-0VBL1_DC06K01009SE009B5252 750&lt;/pre&gt;

&lt;p&gt;Instead of specifiying an actual device node you also specify any
path in the file system:&lt;/p&gt;

&lt;pre&gt;.include /usr/lib/systemd/system/httpd.service

[Service]
BlockIOWeight=/home/lennart 750&lt;/pre&gt;

&lt;p&gt;If the specified path does not refer to a device node systemd will
determine the block device &lt;tt&gt;/home/lennart&lt;/tt&gt; is on, and assign
the bandwith weight to it.&lt;/p&gt;

&lt;p&gt;You can even add per-device and normal lines at the same time,
which will set the per-device weight for the device, and the other
value as default for everything else.&lt;/p&gt;

&lt;p&gt;Alternatively one may control explicit bandwith limits with the
&lt;tt&gt;BlockIOReadBandwidth=&lt;/tt&gt; and &lt;tt&gt;BlockIOWriteBandwidth=&lt;/tt&gt;
settings. These settings take a pair of device node and bandwith rate
(in bytes per second) or of a file path and bandwith rate:&lt;/p&gt;

&lt;pre&gt;.include /usr/lib/systemd/system/httpd.service

[Service]
BlockIOReadBandwith=/var/log 5M&lt;/pre&gt;

&lt;p&gt;This sets the maximum read bandwith on the block device backing
&lt;tt&gt;/var/log&lt;/tt&gt; to 5Mb/s.&lt;/p&gt;

&lt;p&gt;(Analogue to &lt;tt&gt;CPUShares=&lt;/tt&gt; and &lt;tt&gt;MemoryLimit=&lt;/tt&gt; using
any of these three settings will result in the service getting its own
cgroup in the &lt;tt&gt;blkio&lt;/tt&gt; hierarchy.)&lt;/p&gt;

&lt;h4&gt;Managing Other Resource Parameters&lt;/h4&gt;

&lt;p&gt;The options described above cover only a small subset of the
available controls the various Linux control group controllers
expose. We picked these and added high-level options for them since we
assumed that these are the most relevant for most folks, and that they
really needed a nice interface that can handle units properly and
resolve block device names.&lt;/p&gt;

&lt;p&gt;In many cases the options explained above might not be sufficient
for your usecase, but a low-level kernel cgroup setting might help. It
is easy to make use of these options from systemd unit files, without
having them covered with a high-level setting. For example, sometimes
it might be useful to set the &lt;i&gt;swappiness&lt;/i&gt; of a service. The
kernel makes this controllable via the &lt;tt&gt;memory.swappiness&lt;/tt&gt;
cgroup attribute, but systemd does not expose it as a high-level
option. Here's how you use it nonetheless, using the low-level
&lt;tt&gt;ControlGroupAttribute=&lt;/tt&gt; setting:&lt;/p&gt;

&lt;pre&gt;.include /usr/lib/systemd/system/httpd.service

[Service]
ControlGroupAttribute=memory.swappiness 70&lt;/pre&gt;

&lt;p&gt;(Analogue to the other cases this too causes the service to be
added to the memory hierarchy.)&lt;/p&gt;

&lt;p&gt;Later on we might add more high-level controls for the
various cgroup attributes. In fact, please ping us if you frequently
use one and believe it deserves more focus. We'll consider adding a
high-level option for it then. (Even better: send us a patch!)&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Disclaimer:&lt;/i&gt; note that making use of the various resource
controllers does have a runtime impact on the system. Enforcing
resource limits comes at a price. If you do use them, certain
operations do get slower. Especially the &lt;tt&gt;memory&lt;/tt&gt; controller
has (used to have?) a bad reputation to come at a performance
cost.&lt;/p&gt;

&lt;p&gt;For more details on all of this, please have a look at the
documenation of the &lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;mentioned
unit settings&lt;/a&gt;, and of the &lt;a href="http://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt"&gt;cpu&lt;/a&gt;,
&lt;a href="http://www.kernel.org/doc/Documentation/cgroups/memory.txt"&gt;memory&lt;/a&gt;
and &lt;a href="http://www.kernel.org/doc/Documentation/cgroups/blkio-controller.txt"&gt;blkio&lt;/a&gt;
controllers.&lt;/p&gt;

&lt;p&gt;And that's it for now. Of course, this blog story only focussed on
the per-&lt;i&gt;service&lt;/i&gt; resource settings. On top this, you can also
set the more traditional, well-known per-&lt;i&gt;process&lt;/i&gt; resource
settings, which will then be inherited by the various subprocesses,
but always only be enforced per-process. More specifically that's
&lt;tt&gt;IOSchedulingClass=&lt;/tt&gt;, &lt;tt&gt;IOSchedulingPriority=&lt;/tt&gt;,
&lt;tt&gt;CPUSchedulingPolicy=&lt;/tt&gt;, &lt;tt&gt;CPUSchedulingPriority=&lt;/tt&gt;,
&lt;tt&gt;CPUAffinity=&lt;/tt&gt;, &lt;tt&gt;LimitCPU=&lt;/tt&gt; and related. These do not
make use of cgroup controllers and have a much lower performance
cost. We might cover those in a later article in more detail.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 24 Oct 2012 04:11:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-10-24:/blog/projects/resources.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part XVII</title><link>https://0pointer.net/blog/projects/journalctl.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/serial-console.html"&gt;It's&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/watchdog.html"&gt;that&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/self-documented-boot.html"&gt;time again&lt;/a&gt;,
&lt;a href="http://0pointer.de/blog/projects/systemctl-journal.html"&gt;here's&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/security.html"&gt;now&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/inetd.html"&gt;the&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;seventeenth&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;

&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;Using the Journal&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/systemctl-journal.html"&gt;A
while back I already&lt;/a&gt; posted a blog story introducing some
functionality of the journal, and how it is exposed in
&lt;tt&gt;systemctl&lt;/tt&gt;. In this episode I want to explain a few more uses
of the journal, and how you can make it work for you.&lt;/p&gt;

&lt;p&gt;If you are wondering what the journal is, here's an explanation in
a few words to get you up to speed: the journal is a component of &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;,
that captures Syslog messages, Kernel log messages, initial RAM disk
and early boot messages as well as messages written to STDOUT/STDERR
of all services, indexes them and makes this available to the user. It
can be used in parallel, or in place of a traditional syslog daemon,
such as rsyslog or syslog-ng. For more information, see &lt;a href="http://0pointer.de/blog/projects/the-journal.html"&gt;the initial
announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The journal has been part of Fedora since F17. With Fedora 18 it
now has grown into a reliable, powerful tool to handle your logs. Note
however, that on F17 and F18 the journal is configured by default to
store logs only in a small ring-buffer in &lt;tt&gt;/run/log/journal&lt;/tt&gt;,
i.e. not persistent. This of course limits its usefulness quite
drastically but is sufficient to show a bit of recent log history in
&lt;tt&gt;systemctl status&lt;/tt&gt;. For Fedora 19, we plan to change this, and
enable persistent logging by default. Then, journal files will be
stored in &lt;tt&gt;/var/log/journal&lt;/tt&gt; and can grow much larger, thus
making the journal a lot more useful.&lt;/p&gt;

&lt;h4&gt;Enabling Persistency&lt;/h4&gt;

&lt;p&gt;In the meantime, on F17 or F18, you can enable journald's persistent storage manually:&lt;/p&gt;

&lt;pre&gt;# mkdir -p /var/log/journal&lt;/pre&gt;

&lt;p&gt;After that, it's a good idea to reboot, to get some useful
structured data into your journal to play with. Oh, and since you have
the journal now, you don't need syslog anymore (unless having
&lt;tt&gt;/var/log/messages&lt;/tt&gt; as text file is a necessity for you.), so
you can choose to deinstall rsyslog:&lt;/p&gt;

&lt;pre&gt;# yum remove rsyslog&lt;/pre&gt;

&lt;h4&gt;Basics&lt;/h4&gt;

&lt;p&gt;Now we are ready to go. The following text shows a lot of features
of systemd 195 as it will be included in Fedora 18&lt;sup&gt;[1]&lt;/sup&gt;, so
if your F17 can't do the tricks you see, please wait for F18. First,
let's start with some basics. To access the logs of the journal use
the &lt;a href="http://www.freedesktop.org/software/systemd/man/journalctl.html"&gt;journalctl(1)&lt;/a&gt;
tool. To have a first look at the logs, just type in:&lt;/p&gt;

&lt;pre&gt;# journalctl&lt;/pre&gt;

&lt;p&gt;If you run this as root you will see all logs generated on the
system, from system components the same way as for logged in
users. The output you will get looks like a pixel-perfect copy of the
traditional &lt;tt&gt;/var/log/messages&lt;/tt&gt; format, but actually has a
couple of improvements over it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lines of error priority (and higher) will be highlighted red.&lt;/li&gt;
&lt;li&gt;Lines of notice/warning priority will be highlighted bold.&lt;/li&gt;
&lt;li&gt;The timestamps are converted into your local time-zone.&lt;/li&gt;
&lt;li&gt;The output is auto-paged with your pager of choice (defaults to &lt;tt&gt;less&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;This will show &lt;i&gt;all&lt;/i&gt; available data, including rotated logs.&lt;/li&gt;
&lt;li&gt;Between the output of each boot we'll add a line clarifying that a new boot begins now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that in this blog story I will not actually show you any of
the output this generates, I cut that out for brevity -- and to give
you a reason to try it out yourself with a current image for F18's
development version with systemd 195. But I do hope you get the idea
anyway.&lt;/p&gt;

&lt;h4&gt;Access Control&lt;/h4&gt;

&lt;p&gt;Browsing logs this way is already pretty nice. But requiring to be
root sucks of course, even administrators tend to do most of their
work as unprivileged users these days. By default, Journal users can
only watch their own logs, unless they are root or in the &lt;tt&gt;adm&lt;/tt&gt;
group. To make watching system logs more fun, let's add ourselves to
&lt;tt&gt;adm&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;# usermod -a -G adm lennart&lt;/pre&gt;

&lt;p&gt;After logging out and back in as &lt;tt&gt;lennart&lt;/tt&gt; I know have access
to the full journal of the system and all users:&lt;/p&gt;

&lt;pre&gt;$ journalctl&lt;/pre&gt;

&lt;h4&gt;Live View&lt;/h4&gt;

&lt;p&gt;If invoked without parameters journalctl will show me the current
log database. Sometimes one needs to watch logs as they grow, where
one previously used &lt;tt&gt;tail -f /var/log/messages&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;$ journalctl -f&lt;/pre&gt;

&lt;p&gt;Yes, this does exactly what you expect it to do: it will show you
the last ten logs lines and then wait for changes and show them as
they take place.&lt;/p&gt;

&lt;h4&gt;Basic Filtering&lt;/h4&gt;

&lt;p&gt;When invoking &lt;tt&gt;journalctl&lt;/tt&gt; without parameters you'll see the
whole set of logs, beginning with the oldest message stored. That of
course, can be a lot of data. Much more useful is just viewing the
logs of the current boot:&lt;/p&gt;

&lt;pre&gt;$ journalctl -b&lt;/pre&gt;

&lt;p&gt;This will show you only the logs of the current boot, with all the
aforementioned gimmicks mentioned. But sometimes even this is way too
much data to process. So what about just listing all the real issues
to care about: all messages of priority levels ERROR and worse, from
the current boot:&lt;/p&gt;

&lt;pre&gt;$ journalctl -b -p err&lt;/pre&gt;

&lt;p&gt;If you reboot only seldom the &lt;tt&gt;-b&lt;/tt&gt; makes little sense,
filtering based on time is much more useful:&lt;/p&gt;

&lt;pre&gt;$ journalctl --since=yesterday&lt;/pre&gt;

&lt;p&gt;And there you go, all log messages from the day before at 00:00 in
the morning until right now. Awesome! Of course, we can combine this with
&lt;tt&gt;-p err&lt;/tt&gt; or a similar match. But humm, we are looking for
something that happened on the 15th of October, or was it the 16th?&lt;/p&gt;

&lt;pre&gt;$ journalctl --since=2012-10-15 --until="2011-10-16 23:59:59"&lt;/pre&gt;

&lt;p&gt;Yupp, there we go, we found what we were looking for. But humm, I
noticed that some CGI script in Apache was acting up earlier today,
let's see what Apache logged at that time:&lt;/p&gt;

&lt;pre&gt;$ journalctl -u httpd --since=00:00 --until=9:30&lt;/pre&gt;

&lt;p&gt;Oh, yeah, there we found it. But hey, wasn't there an issue with
that disk &lt;tt&gt;/dev/sdc&lt;/tt&gt;? Let's figure out what was going on there:&lt;/p&gt;

&lt;pre&gt;$ journalctl /dev/sdc&lt;/pre&gt;

&lt;p&gt;OMG, a disk error!&lt;sup&gt;[2]&lt;/sup&gt; Hmm, let's quickly replace the
disk before we lose data. Done! Next! -- Hmm, didn't I see that the vpnc binary made a booboo? Let's
check for that:&lt;/p&gt;

&lt;pre&gt;$ journalctl /usr/sbin/vpnc&lt;/pre&gt;

&lt;p&gt;Hmm, I don't get this, this seems to be some weird interaction with
&lt;tt&gt;dhclient&lt;/tt&gt;, let's see both outputs, interleaved:&lt;/p&gt;

&lt;pre&gt;$ journalctl /usr/sbin/vpnc /usr/sbin/dhclient&lt;/pre&gt;

&lt;p&gt;That did it! Found it!&lt;/p&gt;

&lt;h4&gt;Advanced Filtering&lt;/h4&gt;

&lt;p&gt;Whew! That was awesome already, but let's turn this up a
notch. Internally systemd stores each log entry with a set of
&lt;i&gt;implicit&lt;/i&gt; meta data. This meta data looks a lot like an
environment block, but actually is a bit more powerful: values can
take binary, large values (though this is the exception, and usually
they just contain UTF-8), and fields can have multiple values assigned
(an exception too, usually they only have one value). This implicit
meta data is collected for each and every log message, without user
intervention. The data will be there, and wait to be used by
you. Let's see how this looks:&lt;/p&gt;

&lt;pre&gt;$ journalctl -o verbose -n
[...]
Tue, 2012-10-23 23:51:38 CEST [s=ac9e9c423355411d87bf0ba1a9b424e8;i=4301;b=5335e9cf5d954633bb99aefc0ec38c25;m=882ee28d2;t=4ccc0f98326e6;x=f21e8b1b0994d7ee]
        PRIORITY=6
        SYSLOG_FACILITY=3
        _MACHINE_ID=a91663387a90b89f185d4e860000001a
        _HOSTNAME=epsilon
        _TRANSPORT=syslog
        SYSLOG_IDENTIFIER=avahi-daemon
        _COMM=avahi-daemon
        _EXE=/usr/sbin/avahi-daemon
        _SYSTEMD_CGROUP=/system/avahi-daemon.service
        _SYSTEMD_UNIT=avahi-daemon.service
        _SELINUX_CONTEXT=system_u:system_r:avahi_t:s0
        _UID=70
        _GID=70
        _CMDLINE=avahi-daemon: registering [epsilon.local]
        MESSAGE=Joining mDNS multicast group on interface wlan0.IPv4 with address 172.31.0.53.
        _BOOT_ID=5335e9cf5d954633bb99aefc0ec38c25
        _PID=27937
        SYSLOG_PID=27937
        _SOURCE_REALTIME_TIMESTAMP=1351029098747042
&lt;/pre&gt;

&lt;p&gt;(I cut out a lot of noise here, I don't want to make this story
overly long. &lt;tt&gt;-n&lt;/tt&gt; without parameter shows you the last 10 log
entries, but I cut out all but the last.)&lt;/p&gt;

&lt;p&gt;With the &lt;tt&gt;-o verbose&lt;/tt&gt; switch we enabled verbose
output. Instead of showing a pixel-perfect copy of classic
&lt;tt&gt;/var/log/messages&lt;/tt&gt; that only includes a minimimal subset of
what is available we now see all the gory details the journal has
about each entry. But it's highly interesting: there is user credential
information, SELinux bits, machine information and more. For a full
list of common, well-known fields, see &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.journal-fields.html"&gt;the
man page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, as it turns out the journal database is indexed by &lt;i&gt;all&lt;/i&gt;
of these fields, out-of-the-box! Let's try this out:&lt;/p&gt;

&lt;pre&gt;$ journalctl _UID=70&lt;/pre&gt;

&lt;p&gt;And there you go, this will show all log messages logged from Linux
user ID 70. As it turns out one can easily combine these matches:&lt;/p&gt;

&lt;pre&gt;$ journalctl _UID=70 _UID=71&lt;/pre&gt;

&lt;p&gt;Specifying two matches for the same field will result in a logical
OR combination of the matches. All entries matching either will be
shown, i.e. all messages from either UID 70 or 71.&lt;/p&gt;

&lt;pre&gt;$ journalctl _HOSTNAME=epsilon _COMM=avahi-daemon&lt;/pre&gt;

&lt;p&gt;You guessed it, if you specify two matches for different field
names, they will be combined with a logical AND. All entries matching
both will be shown now, meaning that all messages from processes named
&lt;tt&gt;avahi-daemon&lt;/tt&gt; &lt;i&gt;and&lt;/i&gt; host &lt;tt&gt;epsilon&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;But of course, that's
not fancy enough for us. We are computer nerds after all, we live off
logical expressions. We must go deeper!&lt;/p&gt;

&lt;pre&gt;$ journalctl _HOSTNAME=theta _UID=70 + _HOSTNAME=epsilon _COMM=avahi-daemon&lt;/pre&gt;

&lt;p&gt;The + is an explicit OR you can use in addition to the implied OR when
you match the same field twice. The line above hence means: show me
everything from host &lt;tt&gt;theta&lt;/tt&gt; with UID 70, or of host
&lt;tt&gt;epsilon&lt;/tt&gt; with a process name of &lt;tt&gt;avahi-daemon&lt;/tt&gt;.&lt;/p&gt;

&lt;h4&gt;And now, it becomes magic!&lt;/h4&gt;

&lt;p&gt;That was already pretty cool, right? Righ! But heck, who can
remember all those values a field can take in the journal, I mean,
seriously, who has thaaaat kind of photographic memory? Well, the
journal has:&lt;/p&gt;

&lt;pre&gt;$ journalctl -F _SYSTEMD_UNIT&lt;/pre&gt;

&lt;p&gt;This will show us all values the field _SYSTEMD_UNIT takes in the
database, or in other words: the names of all systemd services which
ever logged into the journal. This makes it super-easy to build nice
matches. But wait, turns out this all is actually hooked up with shell
completion on bash! This gets even more awesome: as you type your
match expression you will get a list of well-known field names, and of
the values they can take! Let's figure out how to filter for SELinux
labels again. We remember the field name was something with SELINUX in
it, let's try that:&lt;/p&gt;

&lt;pre&gt;$ journalctl _SE&lt;b&gt;&amp;lt;TAB&amp;gt;&lt;/b&gt;&lt;/pre&gt;

&lt;p&gt;And yupp, it's immediately completed:&lt;/p&gt;

&lt;pre&gt;$ journalctl _SELINUX_CONTEXT=&lt;/pre&gt;

&lt;p&gt;Cool, but what's the label again we wanted to match for?&lt;/p&gt;

&lt;pre&gt;$ journalctl _SELINUX_CONTEXT=&lt;b&gt;&amp;lt;TAB&amp;gt;&amp;lt;TAB&amp;gt;&lt;/b&gt;
kernel                                                       system_u:system_r:local_login_t:s0-s0:c0.c1023               system_u:system_r:udev_t:s0-s0:c0.c1023
system_u:system_r:accountsd_t:s0                             system_u:system_r:lvm_t:s0                                   system_u:system_r:virtd_t:s0-s0:c0.c1023
system_u:system_r:avahi_t:s0                                 system_u:system_r:modemmanager_t:s0-s0:c0.c1023              system_u:system_r:vpnc_t:s0
system_u:system_r:bluetooth_t:s0                             system_u:system_r:NetworkManager_t:s0                        system_u:system_r:xdm_t:s0-s0:c0.c1023
system_u:system_r:chkpwd_t:s0-s0:c0.c1023                    system_u:system_r:policykit_t:s0                             unconfined_u:system_r:rpm_t:s0-s0:c0.c1023
system_u:system_r:chronyd_t:s0                               system_u:system_r:rtkit_daemon_t:s0                          unconfined_u:system_r:unconfined_t:s0-s0:c0.c1023
system_u:system_r:crond_t:s0-s0:c0.c1023                     system_u:system_r:syslogd_t:s0                               unconfined_u:system_r:useradd_t:s0-s0:c0.c1023
system_u:system_r:devicekit_disk_t:s0                        system_u:system_r:system_cronjob_t:s0-s0:c0.c1023            unconfined_u:unconfined_r:unconfined_dbusd_t:s0-s0:c0.c1023
system_u:system_r:dhcpc_t:s0                                 system_u:system_r:system_dbusd_t:s0-s0:c0.c1023              unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
system_u:system_r:dnsmasq_t:s0-s0:c0.c1023                   system_u:system_r:systemd_logind_t:s0
system_u:system_r:init_t:s0                                  system_u:system_r:systemd_tmpfiles_t:s0&lt;/pre&gt;

&lt;p&gt;Ah! Right! We wanted to see everything logged under PolicyKit's security label:&lt;/p&gt;

&lt;pre&gt;$ journalctl _SELINUX_CONTEXT=system_u:system_r:policykit_t:s0&lt;/pre&gt;

&lt;p&gt;Wow! That was easy! I didn't know anything related to SELinux could
be thaaat easy! ;-) Of course this kind of completion works with any
field, not just SELinux labels.&lt;/p&gt;

&lt;p&gt;So much for now. There's a lot more cool stuff in &lt;a href="http://www.freedesktop.org/software/systemd/man/journalctl.html"&gt;journalctl(1)&lt;/a&gt;
than this. For example, it generates JSON output for you! You can match
against kernel fields! You can get simple
&lt;tt&gt;/var/log/messages&lt;/tt&gt;-like output but with &lt;i&gt;relative&lt;/i&gt; timestamps!
And so much more!&lt;/p&gt;

&lt;p&gt;Anyway, in the next weeks I hope to post more stories about all the
cool things the journal can do for you. This is just the beginning,
stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Footnotes&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] systemd 195 is currently still in &lt;a href="https://admin.fedoraproject.org/updates/FEDORA-2012-16709/systemd-195-1.fc18"&gt;Bodhi&lt;/a&gt;
but hopefully will get into F18 proper soon, and definitely before the
release of Fedora 18.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] OK, I cheated here, indexing by block device is not in
the kernel yet, but on its way due to &lt;a href="http://www.spinics.net/lists/linux-scsi/msg62499.html"&gt;Hannes'
fantastic work&lt;/a&gt;, and I hope it will make appearence in
F18.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 24 Oct 2012 00:16:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-10-24:/blog/projects/journalctl.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part XVI</title><link>https://0pointer.net/blog/projects/serial-console.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/watchdog.html"&gt;And,&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/self-documented-boot.html"&gt;yes,&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemctl-journal.html"&gt;here's&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/security.html"&gt;now&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/inetd.html"&gt;the&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;sixteenth&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;

&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;Gettys on Serial Consoles (and Elsewhere)&lt;/h4&gt;

&lt;p&gt;&lt;i&gt;TL;DR: To make use of a serial console, just use
&lt;tt&gt;console=ttyS0&lt;/tt&gt; on the kernel command line, and systemd will
automatically start a getty on it for you.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;While physical &lt;a href="https://en.wikipedia.org/wiki/RS-232"&gt;RS232&lt;/a&gt; serial ports
have become exotic in today's PCs they play an important role in
modern servers and embedded hardware. They provide a relatively robust
and minimalistic way to access the console of your device, that works
even when the network is hosed, or the primary UI is unresponsive. VMs
frequently emulate a serial port as well.&lt;/p&gt;

&lt;p&gt;Of course, Linux has always had good support for serial consoles,
but with &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; we
tried to make serial console support even simpler to use. In the
following text I'll try to give an overview how serial console &lt;a href="https://en.wikipedia.org/wiki/Getty_%28Unix%29"&gt;gettys&lt;/a&gt; on
systemd work, and how TTYs of any kind are handled.&lt;/p&gt;

&lt;p&gt;Let's start with the key take-away: in most cases, to get a login
prompt on your serial prompt you don't need to do anything. systemd
checks the kernel configuration for the selected kernel console and
will simply spawn a serial getty on it. That way it is entirely
sufficient to configure your kernel console properly (for example, by
adding &lt;tt&gt;console=ttyS0&lt;/tt&gt; to the kernel command line) and that's
it. But let's have a look at the details:&lt;/p&gt;

&lt;p&gt;In systemd, two template units are responsible for bringing up a
login prompt on text consoles:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;&lt;tt&gt;getty@.service&lt;/tt&gt; is responsible for &lt;a href="https://en.wikipedia.org/wiki/Virtual_console"&gt;virtual
terminal&lt;/a&gt; (VT) login prompts, i.e. those on your VGA screen as
exposed in &lt;tt&gt;/dev/tty1&lt;/tt&gt; and similar devices.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;serial-getty@.service&lt;/tt&gt; is responsible for all other
terminals, including serial ports such as &lt;tt&gt;/dev/ttyS0&lt;/tt&gt;. It
differs in a couple of ways from &lt;tt&gt;getty@.service&lt;/tt&gt;: among other
things the &lt;tt&gt;$TERM&lt;/tt&gt; environment variable is set to
&lt;tt&gt;vt102&lt;/tt&gt; (hopefully a good default for most serial terminals)
rather than &lt;tt&gt;linux&lt;/tt&gt; (which is the right choice for VTs only),
and a special logic that clears the VT scrollback buffer (and only
work on VTs) is skipped.&lt;/li&gt;

&lt;/ol&gt;

&lt;h5&gt;Virtual Terminals&lt;/h5&gt;

&lt;p&gt;Let's have a closer look how &lt;tt&gt;getty@.service&lt;/tt&gt; is started,
i.e. how login prompts on the virtual terminal (i.e. non-serial TTYs)
work. Traditionally, the init system on Linux machines was configured
to spawn a fixed number login prompts at boot. In most cases six
instances of the getty program were spawned, on the first six VTs,
&lt;tt&gt;tty1&lt;/tt&gt; to &lt;tt&gt;tty6&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;In a systemd world we made this more dynamic: in order to make
things more efficient login prompts are now started on demand only. As
you switch to the VTs the getty service is instantiated to
&lt;tt&gt;getty@tty2.service&lt;/tt&gt;, &lt;tt&gt;getty@tty5.service&lt;/tt&gt; and so
on. Since we don't have to unconditionally start the getty processes
anymore this allows us to save a bit of resources, and makes start-up
a bit faster. This behaviour is mostly transparent to the user: if the
user activates a VT the getty is started right-away, so that the user
will hardly notice that it wasn't running all the time. If he then
logs in and types &lt;tt&gt;ps&lt;/tt&gt; he'll notice however that getty
instances are only running for the VTs he so far switched to.&lt;/p&gt;

&lt;p&gt;By default this automatic spawning is done for the VTs up to VT6
only (in order to be close to the traditional default configuration of
Linux systems)&lt;sup&gt;[1]&lt;/sup&gt;.  Note that the auto-spawning of gettys
is only attempted if no other subsystem took possession of the VTs
yet. More specifically, if a user makes frequent use of &lt;a href="https://en.wikipedia.org/wiki/Fast_user_switching"&gt;fast user
switching&lt;/a&gt; via GNOME he'll get his X sessions on the first six VTs,
too, since the lowest available VT is allocated for each session.&lt;/p&gt;

&lt;p&gt;Two VTs are handled specially by the auto-spawning logic: firstly
&lt;tt&gt;tty1&lt;/tt&gt; gets special treatment: if we boot into graphical mode
the display manager takes possession of this VT. If we boot into
multi-user (text) mode a getty is started on it -- unconditionally,
without any on-demand logic&lt;sup&gt;[2]&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Secondly, &lt;tt&gt;tty6&lt;/tt&gt; is
especially reserved for auto-spawned gettys and unavailable to other
subsystems such as X&lt;sup&gt;[3]&lt;/sup&gt;. This is done in order to ensure
that there's always a way to get a text login, even if due to
fast user switching X took possession of more than 5 VTs.&lt;/p&gt;

&lt;h5&gt;Serial Terminals&lt;/h5&gt;

&lt;p&gt;Handling of login prompts on serial terminals (and all other kind
of non-VT terminals) is different from that of VTs. By default systemd
will instantiate one &lt;tt&gt;serial-getty@.service&lt;/tt&gt; on the main
kernel&lt;sup&gt;[4]&lt;/sup&gt; console, if it is not a virtual terminal. The
kernel console is where the kernel outputs its own log messages and is
usually configured on the kernel command line in the boot loader via
an argument such as &lt;tt&gt;console=ttyS0&lt;/tt&gt;&lt;sup&gt;[5]&lt;/sup&gt;. This logic ensures that
when the user asks the kernel to redirect its output onto a certain
serial terminal, he will automatically also get a login prompt on it
as the boot completes&lt;sup&gt;[6]&lt;/sup&gt;. systemd will also spawn a login
prompt on the first special VM console (that's &lt;tt&gt;/dev/hvc0&lt;/tt&gt;,
&lt;tt&gt;/dev/xvc0&lt;/tt&gt;, &lt;tt&gt;/dev/hvsi0&lt;/tt&gt;), if the system is run in a VM
that provides these devices. This logic is implemented in a &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/Generators"&gt;generator&lt;/a&gt;
called &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-getty-generator.html"&gt;systemd-getty-generator&lt;/a&gt;
that is run early at boot and pulls in the necessary services
depending on the execution environment.&lt;/p&gt;

&lt;p&gt;In many cases, this automatic logic should already suffice to get
you a login prompt when you need one, without any specific
configuration of systemd. However, sometimes there's the need to
manually configure a serial getty, for example, if more than one
serial login prompt is needed or the kernel console should be
redirected to a different terminal than the login prompt. To
facilitate this it is sufficient to instantiate
&lt;tt&gt;serial-getty@.service&lt;/tt&gt; once for each serial port you want it
to run on&lt;sup&gt;[7]&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;# systemctl enable serial-getty@ttyS2.service
# systemctl start serial-getty@ttyS2.service&lt;/pre&gt;

&lt;p&gt;And that's it. This will make sure you get the login prompt on the
chosen port on all subsequent boots, and starts it right-away
too.&lt;/p&gt;

&lt;p&gt;Sometimes, there's the need to configure the login prompt in even
more detail. For example, if the default baud rate configured by the
kernel is not correct or other &lt;tt&gt;agetty&lt;/tt&gt; parameters need to
be changed. In such a case simply copy the default unit template to
&lt;tt&gt;/etc/systemd/system&lt;/tt&gt; and edit it there:&lt;/p&gt;

&lt;pre&gt;# cp /usr/lib/systemd/system/serial-getty@.service /etc/systemd/system/serial-getty@ttyS2.service
# vi /etc/systemd/system/serial-getty@ttyS2.service
 .... now make your changes to the agetty command line ...
# ln -s /etc/systemd/system/serial-getty@ttyS2.service /etc/systemd/system/getty.target.wants/
# systemctl daemon-reload
# systemctl start serial-getty@ttyS2.service&lt;/pre&gt;

&lt;p&gt;This creates a unit file that is specific to serial port
&lt;tt&gt;ttyS2&lt;/tt&gt;, so that you can make specific changes to this port and
this port only.&lt;/p&gt;

&lt;p&gt;And this is pretty much all there's to say about serial ports, VTs
and login prompts on them. I hope this was interesting, and please
come back soon for the next installment of this series!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] You can easily modify this by changing
&lt;tt&gt;NAutoVTs=&lt;/tt&gt; in &lt;a href="http://www.freedesktop.org/software/systemd/man/logind.conf.html"&gt;logind.conf&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] Note that whether the getty on VT1 is started on-demand
or not hardly makes a difference, since VT1 is the default active VT
anyway, so the demand is there anyway at boot.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[3] You can easily change this special reserved VT by
modifying &lt;tt&gt;ReserveVT=&lt;/tt&gt; in &lt;a href="http://www.freedesktop.org/software/systemd/man/logind.conf.html"&gt;logind.conf&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[4] If multiple kernel consoles are used simultaneously, the
&lt;i&gt;main&lt;/i&gt; console is the one listed &lt;i&gt;first&lt;/i&gt; in
&lt;tt&gt;/sys/class/tty/console/active&lt;/tt&gt;, which is the &lt;i&gt;last&lt;/i&gt; one
listed on the kernel command line.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[5] See &lt;a href="https://www.kernel.org/doc/Documentation/kernel-parameters.txt"&gt;kernel-parameters.txt&lt;/a&gt;
for more information on this kernel command line
option.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[6] Note that &lt;tt&gt;agetty -s&lt;/tt&gt; is used here so that the
baud rate configured at the kernel command line is not altered and
continued to be used by the login prompt.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[7] Note that this &lt;tt&gt;systemctl enable&lt;/tt&gt; syntax only
works with systemd 188 and newer (i.e. F18). On older versions use
&lt;tt&gt;ln -s /usr/lib/systemd/system/serial-getty@.service
/etc/systemd/system/getty.target.wants/serial-getty@ttyS2.service ; systemctl
daemon-reload&lt;/tt&gt; instead.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 13 Oct 2012 02:56:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-10-13:/blog/projects/serial-console.html</guid><category>projects</category></item><item><title>Berlin Open Source Meetup</title><link>https://0pointer.net/blog/projects/berlin-open-source-meetup.html</link><description>
                
&lt;p&gt;&lt;a href="http://blixtra.org/blog/2012/08/06/berlin-open-source-meetup/"&gt;&lt;img src="http://blixtra.org/blog/wp-content/uploads/2012/08/Prater.jpg" width="500" height="375" alt="Prater" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chris K&amp;uuml;hl and I are organizing a &lt;a href="http://blixtra.org/blog/2012/08/06/berlin-open-source-meetup/"&gt;Berlin
Open Source Meetup&lt;/a&gt; on Aug 19th at the Prater Biergarten in Prenzlauer Berg.
If you live in Berlin (or are passing by) and are involved in or interested in
Open Source then you are invited!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://plus.google.com/u/0/events/c9ffkptmk6kbjkgn7nb7bh5i1ek/107949128852701224835"&gt;There's also a Google+ event for the meetup.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's a public event, so everybody is welcome, and please feel free to invite others!&lt;/p&gt;

&lt;p&gt;See you at the Prater!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 06 Aug 2012 14:59:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-08-06:/blog/projects/berlin-open-source-meetup.html</guid><category>projects</category></item><item><title>Upcoming Hackfests/Sprints</title><link>https://0pointer.net/blog/hackfests.html</link><description>
                
&lt;p&gt;The &lt;a href="http://www.linuxplumbersconf.org/2012/"&gt;Linux Plumbers
Conference 2012&lt;/a&gt; will take place August 29th to 31st in San Diego,
California. We, the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;
developers, would like to invite you to two hackfests/sprints that will happen
around LPC:&lt;/p&gt;

&lt;h4&gt;San Diego: libvirt/LXC/systemd/SELinux Integration Hackfest&lt;/h4&gt;

&lt;p&gt;On &lt;b&gt;28th of August&lt;/b&gt; we'll have a hackfest on the topic of closer
integration of libvirt, LXC, systemd and SELinux, colocated with LPC in
San Diego, California. We'll have a number of key people from these projects
participating, including Dan Walsh, Eric Paris, Daniel P. Berrange, Kay
Sievers and myself.&lt;/p&gt;

&lt;p&gt;Topics we'll cover: making Fedora/Linux boot entirely cleanly in
normal containers, teaching systemd's control tools minimal
container-awareness (such as being able to list all services of all
containers in one go, in addition to those running on the host
system), unified journal logging across multiple containers, the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/ContainerInterface"&gt;systemd
container interface&lt;/a&gt;, auditing and containers, running multiple
instances from the same &lt;tt&gt;/usr&lt;/tt&gt; tree, and a lot more...&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Who should attend?&lt;/b&gt; Everybody hacking on the mentioned
projects who wants to help integrating them with the
goal of turning them into a secure, reliable, powerful container
solution for Linux.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Who should not attend?&lt;/b&gt; If you don't hack on any of these
projects, or if you are not interested in closer integration of at
least two of these projects.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;How to register?&lt;/b&gt; Just show up. You get extra points however
for letting us know in advance (just send us an email). Attendance is
free.&lt;/p&gt;

&lt;p&gt;&amp;#10149; See also: &lt;a href="https://plus.google.com/u/0/events/cvs9oi2q802vh57o1vr9le7tsjc/115547683951727699051"&gt;Google+ Event&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;San Francisco: systemd Journal Sprint&lt;/h4&gt;

&lt;p&gt;On &lt;b&gt;September 3-7&lt;/b&gt; we'll have a sprint on the topic of the systemd
Journal. It's going to take place at the &lt;a href="https://www.getpantheon.com/"&gt;Pantheon&lt;/a&gt; headquarters in San
Francisco, California. Among others, Kay Sievers, David Strauss and I will participate.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Who should attend?&lt;/b&gt; Everybody who wants to help improving the
systemd Journal, regardless if in its core itself, in client software
for it, hooking up other projects or writing library bindings for
it. Also, if you are using or planning to use the journal for a
project, we'd be very interested in high-bandwith face-to-face
feedback regarding what you are missing, what you don't like so much, and what
you find awesome in the Journal.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;How to register?&lt;/b&gt; Please sign up at &lt;a href="http://systemd.eventbrite.com/"&gt;EventBrite&lt;/a&gt;. Attendance is
free. For more information see the &lt;a href="http://lists.freedesktop.org/archives/systemd-devel/2012-July/005803.html"&gt;invitation
mail&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;#10149; See also: &lt;a href="https://plus.google.com/u/0/events/cee28a21tk5lfv0u224kj6pa930/115547683951727699051"&gt;Google+ Event&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;See you in California!&lt;/i&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 20 Jul 2012 02:52:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-07-20:/blog/hackfests.html</guid><category>misc</category></item><item><title>foss.in 2012 CFP Ends in a Few Hours</title><link>https://0pointer.net/blog/projects/fossin2012.html</link><description>
                
&lt;p&gt;&lt;a href="http://foss.in/"&gt;foss.in 2012 in Bangalore&lt;/a&gt; takes place again after a
hiatus of some years. It has always been a fantastic conference, and a great opportunity to
visit Bangalore and India. I just submitted my talk proposals, so, hurry up, and &lt;a href="http://foss.in/participate/call-for-participation"&gt;submit yours&lt;/a&gt;!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 08 Jul 2012 15:47:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-07-08:/blog/projects/fossin2012.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part XV</title><link>https://0pointer.net/blog/projects/watchdog.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/self-documented-boot.html"&gt;Quickly
following the previous iteration&lt;/a&gt;, &lt;a href="http://0pointer.de/blog/projects/systemctl-journal.html"&gt;here's&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/security.html"&gt;now&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/inetd.html"&gt;the&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;fifteenth&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;

&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;Watchdogs&lt;/h4&gt;

&lt;p&gt;There are three big target audiences we try to cover with &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt;:
the embedded/mobile folks, the desktop people and the server
folks. While the systems used by embedded/mobile tend to be
underpowered and have few resources are available, desktops tend to be
much more powerful machines -- but still much less resourceful than
servers. Nonetheless there are surprisingly many features that matter
to both extremes of this axis (embedded and servers), but not the
center (desktops). On of them is support for &lt;a href="https://en.wikipedia.org/wiki/Watchdog_timer"&gt;watchdogs&lt;/a&gt; in
hardware and software.&lt;/p&gt;

&lt;p&gt;Embedded devices frequently rely on watchdog hardware that resets
it automatically if software stops responding (more specifically,
stops signalling the hardware in fixed intervals that it is still
alive). This is required to increase reliability and make sure that
regardless what happens the best is attempted to get the system
working again. Functionality like this makes little sense on the
desktop&lt;sup&gt;[1]&lt;/sup&gt;. However, on
high-availability servers watchdogs are frequently used, again.&lt;/p&gt;

&lt;p&gt;Starting with version 183 systemd provides full support for
hardware watchdogs (as exposed in &lt;tt&gt;/dev/watchdog&lt;/tt&gt; to
userspace), as well as supervisor (software) watchdog support for
invidual system services. The basic idea is the following: if enabled,
systemd will regularly ping the watchdog hardware. If systemd or the
kernel hang this ping will not happen anymore and the hardware will
automatically reset the system. This way systemd and the kernel are
protected from boundless hangs -- by the hardware. To make the chain
complete, systemd then exposes a software watchdog interface for
individual services so that they can also be restarted (or some other
action taken) if they begin to hang. This software watchdog logic can
be configured individually for each service in the ping frequency and
the action to take. Putting both parts together (i.e. hardware
watchdogs supervising systemd and the kernel, as well as systemd
supervising all other services) we have a reliable way to watchdog
every single component of the system.&lt;/p&gt;

&lt;p&gt;To make use of the hardware watchdog it is sufficient to set the
&lt;tt&gt;RuntimeWatchdogSec=&lt;/tt&gt; option in
&lt;tt&gt;/etc/systemd/system.conf&lt;/tt&gt;. It defaults to 0 (i.e. no hardware
watchdog use). Set it to a value like 20s and the watchdog is
enabled. After 20s of no keep-alive pings the hardware will reset
itself. Note that systemd will send a ping to the hardware at half the
specified interval, i.e. every 10s. And that's already all there is to
it. By enabling this single, simple option you have turned on
supervision by the hardware of systemd and the kernel beneath
it.&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Note that the hardware watchdog device (&lt;tt&gt;/dev/watchdog&lt;/tt&gt;) is
single-user only. That means that you can either enable this
functionality in systemd, or use a separate external watchdog daemon,
such as the aptly named &lt;a href="http://linux.die.net/man/8/watchdog"&gt;watchdog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;ShutdownWatchdogSec=&lt;/tt&gt; is another option that can be
configured in &lt;tt&gt;/etc/systemd/system.conf&lt;/tt&gt;. It controls the
watchdog interval to use during reboots. It defaults to 10min, and
adds extra reliability to the system reboot logic: if a clean reboot
is not possible and shutdown hangs, we rely on the watchdog hardware
to reset the system abruptly, as extra safety net.&lt;/p&gt;

&lt;p&gt;So much about the hardware watchdog logic. These two options are
really everything that is necessary to make use of the hardware
watchdogs. Now, let's have a look how to add watchdog logic to
individual services.&lt;/p&gt;

&lt;p&gt;First of all, to make software watchdog-supervisable it needs to be
patched to send out "I am alive" signals in regular intervals in its
event loop. Patching this is relatively easy. First, a daemon needs to
read the &lt;tt&gt;WATCHDOG_USEC=&lt;/tt&gt; environment variable. If it is set,
it will contain the watchdog interval in usec formatted as ASCII text
string, as it is configured for the service. The daemon should then
issue &lt;tt&gt;&lt;a href="http://www.freedesktop.org/software/systemd/man/sd_notify.html"&gt;sd_notify&lt;/a&gt;("WATCHDOG=1")&lt;/tt&gt;
calls every half of that interval. A daemon patched this way should
transparently support watchdog functionality by checking whether the
environment variable is set and honouring the value it is set to.&lt;/p&gt;

&lt;p&gt;To enable the software watchdog logic for a service (which has been
patched to support the logic pointed out above) it is sufficient to
set the &lt;tt&gt;WatchdogSec=&lt;/tt&gt; to the desired failure latency. See &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.service.html"&gt;systemd.service(5)&lt;/a&gt;
for details on this setting. This causes &lt;tt&gt;WATCHDOG_USEC=&lt;/tt&gt; to be
set for the service's processes and will cause the service to enter a
failure state as soon as no keep-alive ping is received within the
configured interval.&lt;/p&gt;

&lt;p&gt;If a service enters a failure state as soon as the watchdog logic
detects a hang, then this is hardly sufficient to build a reliable
system. The next step is to configure whether the service shall be
restarted and how often, and what to do if it then still fails. To
enable automatic service restarts on failure set
&lt;tt&gt;Restart=on-failure&lt;/tt&gt; for the service. To configure how many
times a service shall be attempted to be restarted use the combination
of &lt;tt&gt;StartLimitBurst=&lt;/tt&gt; and &lt;tt&gt;StartLimitInterval=&lt;/tt&gt; which
allow you to configure how often a service may restart within a time
interval. If that limit is reached, a special action can be
taken. This action is configured with &lt;tt&gt;StartLimitAction=&lt;/tt&gt;. The
default is a &lt;tt&gt;none&lt;/tt&gt;, i.e. that no further action is taken and
the service simply remains in the failure state without any further
attempted restarts. The other three possible values are
&lt;tt&gt;reboot&lt;/tt&gt;, &lt;tt&gt;reboot-force&lt;/tt&gt; and
&lt;tt&gt;reboot-immediate&lt;/tt&gt;. &lt;tt&gt;reboot&lt;/tt&gt; attempts a clean reboot,
going through the usual, clean shutdown logic. &lt;tt&gt;reboot-force&lt;/tt&gt;
is more abrupt: it will not actually try to cleanly shutdown any
services, but immediately kills all remaining services and unmounts
all file systems and then forcibly reboots (this way all file systems
will be clean but reboot will still be very fast). Finally,
&lt;tt&gt;reboot-immediate&lt;/tt&gt; does not attempt to kill any process or
unmount any file systems. Instead it just hard reboots the machine
without delay. &lt;tt&gt;reboot-immediate&lt;/tt&gt; hence comes closest to a
reboot triggered by a hardware watchdog. All these settings are
documented in &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.service.html"&gt;systemd.service(5)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Putting this all together we now have pretty flexible options to
watchdog-supervise a specific service and configure automatic restarts
of the service if it hangs, plus take ultimate action if that doesn't
help.&lt;/p&gt;

&lt;p&gt;Here's an example unit file:&lt;/p&gt;

&lt;pre&gt;[Unit]
Description=My Little Daemon
Documentation=man:mylittled(8)

[Service]
ExecStart=/usr/bin/mylittled
WatchdogSec=30s
Restart=on-failure
StartLimitInterval=5min
StartLimitBurst=4
StartLimitAction=reboot-force
&lt;/pre&gt;

&lt;p&gt;This service will automatically be restarted if it hasn't pinged
the system manager for longer than 30s or if it fails otherwise. If it
is restarted this way more often than 4 times in 5min action is taken
and the system quickly rebooted, with all file systems being clean
when it comes up again.&lt;/p&gt;

&lt;p&gt;And that's already all I wanted to tell you about! With hardware
watchdog support right in PID 1, as well as supervisor watchdog
support for individual services we should provide everything you need
for most watchdog usecases. Regardless if you are building an embedded
or mobile applience, or if your are working with high-availability
servers, please give this a try!&lt;/p&gt;

&lt;p&gt;(Oh, and if you wonder why in heaven PID 1 needs to deal with
&lt;tt&gt;/dev/watchdog&lt;/tt&gt;, and why this shouldn't be kept in a separate
daemon, then please read this again and try to understand that this is
all about the supervisor chain we are building here, where the hardware watchdog
supervises systemd, and systemd supervises the individual
services. Also, we believe that a service not responding should be
treated in a similar way as any other service error. Finally, pinging
&lt;tt&gt;/dev/watchdog&lt;/tt&gt; is one of the most trivial operations in the OS
(basically little more than a ioctl() call), to the support for this
is not more than a handful lines of code. Maintaining this externally
with complex IPC between PID 1 (and the daemons) and this watchdog
daemon would be drastically more complex, error-prone and resource
intensive.)&lt;/p&gt;

&lt;p&gt;Note that the built-in hardware watchdog support of systemd does
not conflict with other watchdog software by default. systemd does not
make use of &lt;tt&gt;/dev/watchdog&lt;/tt&gt; by default, and you are welcome to
use external watchdog daemons in conjunction with systemd, if this
better suits your needs.&lt;/p&gt;

&lt;p&gt;And one last thing: if you wonder whether your hardware has a
watchdog, then the answer is: almost definitely yes -- if it is anything more
recent than a few years. If you want to verify this, try the &lt;a href="http://karelzak.blogspot.de/2012/05/eject1-sulogin1-wdctl1.html"&gt;wdctl&lt;/a&gt;
tool from recent util-linux, which shows you everything you need to
know about your watchdog hardware.&lt;/p&gt;

&lt;p&gt;I'd like to thank the great folks from &lt;a href="http://www.pengutronix.de/"&gt;Pengutronix&lt;/a&gt; for contributing
most of the watchdog logic. Thank you!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Though actually most desktops tend to include watchdog
hardware these days too, as this is cheap to build and available in
most modern PC chipsets.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] So, here's a free tip for you if you hack on the core
OS: don't enable this feature while you hack. Otherwise your system
might suddenly reboot if you are in the middle of tracing through PID
1 with gdb and cause it to be stopped for a moment, so that no
hardware ping can be done...&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 28 Jun 2012 00:07:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-06-28:/blog/projects/watchdog.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part XIV</title><link>https://0pointer.net/blog/projects/self-documented-boot.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/systemctl-journal.html"&gt;And&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/security.html"&gt;here's&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/inetd.html"&gt;the&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;fourteenth&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;

&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;The Self-Explanatory Boot&lt;/h4&gt;

&lt;p&gt;One complaint we often hear about &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; is
that its boot process was hard to understand, even
incomprehensible. In general I can only disagree with this sentiment, I
even believe in quite the opposite: in comparison to what we had
before -- where to even remotely understand what was going on you had
to have a decent comprehension of the programming language that is
Bourne Shell&lt;sup&gt;[1]&lt;/sup&gt; -- understanding systemd's boot process is
substantially easier. However, like in many complaints there is some
truth in this frequently heard discomfort: for a seasoned Unix
administrator there indeed is a bit of learning to do when the switch
to &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; is
made. And as systemd developers it is our duty to make the learning
curve shallow, introduce as few surprises as we can, and provide
good documentation where that is not possible.&lt;/p&gt;

&lt;p&gt;systemd always had huge body of documentation &lt;a href="http://www.freedesktop.org/software/systemd/man/"&gt;as manual
pages&lt;/a&gt; (nearly 100 individual pages now!), in the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;Wiki&lt;/a&gt; and
the various blog stories I posted. However, any amount of
documentation alone is not enough to make software easily
understood. In fact, thick manuals sometimes appear intimidating and
make the reader wonder where to start reading, if all he was
interested in was this one simple concept of the whole system.&lt;/p&gt;

&lt;p&gt;Acknowledging all this we have now added a new, neat, little
feature to systemd: the self-explanatory boot process. What do we mean
by that? Simply that each and every single component of our boot comes
with documentation and that this documentation is closely linked to
its component, so that it is easy to find.&lt;/p&gt;

&lt;p&gt;More specifically, all units in systemd (which are what
encapsulate the components of the boot) now include references to
their documentation, the documentation of their configuration files
and further applicable manuals. A user who is trying to understand the
purpose of a unit, how it fits into the boot process and how to
configure it can now easily look up this documentation with the
well-known &lt;tt&gt;systemctl status&lt;/tt&gt; command. Here's an example how
this looks for &lt;tt&gt;systemd-logind.service&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;
$ systemctl status systemd-logind.service
systemd-logind.service - Login Service
	  Loaded: loaded (/usr/lib/systemd/system/systemd-logind.service; static)
	  Active: active (running) since Mon, 25 Jun 2012 22:39:24 +0200; 1 day and 18h ago
	    Docs: &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-logind.service.html"&gt;man:systemd-logind.service(7)&lt;/a&gt;
	          &lt;a href="http://www.freedesktop.org/software/systemd/man/logind.conf.html"&gt;man:logind.conf(5)&lt;/a&gt;
	          &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/multiseat"&gt;http://www.freedesktop.org/wiki/Software/systemd/multiseat&lt;/a&gt;
	Main PID: 562 (systemd-logind)
	  CGroup: name=systemd:/system/systemd-logind.service
		  ‚îî 562 /usr/lib/systemd/systemd-logind

Jun 25 22:39:24 epsilon systemd-logind[562]: Watching system buttons on /dev/input/event2 (Power Button)
Jun 25 22:39:24 epsilon systemd-logind[562]: Watching system buttons on /dev/input/event6 (Video Bus)
Jun 25 22:39:24 epsilon systemd-logind[562]: Watching system buttons on /dev/input/event0 (Lid Switch)
Jun 25 22:39:24 epsilon systemd-logind[562]: Watching system buttons on /dev/input/event1 (Sleep Button)
Jun 25 22:39:24 epsilon systemd-logind[562]: Watching system buttons on /dev/input/event7 (ThinkPad Extra Buttons)
Jun 25 22:39:25 epsilon systemd-logind[562]: New session 1 of user gdm.
Jun 25 22:39:25 epsilon systemd-logind[562]: Linked /tmp/.X11-unix/X0 to /run/user/42/X11-display.
Jun 25 22:39:32 epsilon systemd-logind[562]: New session 2 of user lennart.
Jun 25 22:39:32 epsilon systemd-logind[562]: Linked /tmp/.X11-unix/X0 to /run/user/500/X11-display.
Jun 25 22:39:54 epsilon systemd-logind[562]: Removed session 1.
&lt;/pre&gt;

&lt;p&gt;On the first look this output changed very little. If you look
closer however you will find that it now includes one new field:
&lt;tt&gt;Docs&lt;/tt&gt; lists references to the documentation of this
service. In this case there are two man page URIs and one web URL
specified. The man pages describe the purpose and configuration of
this service, the web URL includes an introduction to the basic
concepts of this service.&lt;/p&gt;

&lt;p&gt;If the user uses a recent graphical terminal implementation it is
sufficient to click on the URIs shown to get the respective
documentation&lt;sup&gt;[2]&lt;/sup&gt;. With other words: it never has been that
easy to figure out what a specific component of our boot is about:
just use &lt;tt&gt;systemctl status&lt;/tt&gt; to get more information about it
and click on the links shown to find the documentation.&lt;/p&gt;

&lt;p&gt;The past days I have written man pages and added these references
for every single unit we ship with systemd. This means, with
&lt;tt&gt;systemctl status&lt;/tt&gt; you now have a very easy way to find out
more about every single service of the core OS.&lt;/p&gt;

&lt;p&gt;If you are not using a graphical terminal (where you can just click
on URIs), a man page URI in the middle of the output of &lt;tt&gt;systemctl
status&lt;/tt&gt; is not the most useful thing to have. To make reading the
referenced man pages easier we have also added a new command:&lt;/p&gt;

&lt;pre&gt;systemctl help systemd-logind.service&lt;/pre&gt;

&lt;p&gt;Which will open the listed man pages right-away, without the need
to click anything or copy/paste an URI.&lt;/p&gt;

&lt;p&gt;The URIs are in the formats documented by the &lt;a href="https://www.kernel.org/doc/man-pages/online/pages/man7/url.7.html"&gt;uri(7)&lt;/a&gt;
man page. Units may reference http and https URLs, as well as man and
info pages.&lt;/p&gt;

&lt;p&gt;Of course all this doesn't make everything self-explanatory, simply
because the user still has to find out about &lt;tt&gt;systemctl status&lt;/tt&gt;
(and even &lt;tt&gt;systemctl&lt;/tt&gt; in the first place so that he even knows
what units there are); however with this basic knowledge further
help on specific units is in very easy reach.&lt;/p&gt;

&lt;p&gt;We hope that this kind of interlinking of runtime behaviour and the
matching documentation is a big step forward to make our boot easier
to understand.&lt;/p&gt;

&lt;p&gt;This functionality is partially already available in Fedora 17, and
will show up in complete form in Fedora 18.&lt;/p&gt;

&lt;p&gt;That all said, credit where credit is due: this kind of references
to documentation within the service descriptions is not new, Solaris'
SMF had similar functionality for quite some time. However, we believe
this new systemd feature is certainly a novelty on Linux, and with
systemd we now offer you the best documented and best self-explaining
init system.&lt;/p&gt;

&lt;p&gt;Of course, if you are writing unit files for your own packages,
please consider also including references to the documentation of your
services and its configuration. This is really easy to do, just list
the URIs in the new &lt;tt&gt;Documentation=&lt;/tt&gt; field in the
&lt;tt&gt;[Unit]&lt;/tt&gt; section of your unit files. For details see &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd.unit.html"&gt;systemd.unit(5)&lt;/a&gt;. The
more comprehensively we include links to documentation in our OS
services the easier the work of administrators becomes. (To make sure
Fedora makes comprehensive use of this functionality &lt;a href="https://fedorahosted.org/fpc/ticket/192"&gt;I filed a bug on
FPC&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Oh, and BTW: if you are looking for a rough overview of systemd's
boot process &lt;a href="http://www.freedesktop.org/software/systemd/man/bootup.html"&gt;here's
another new man page we recently added&lt;/a&gt;, which includes a pretty
ASCII flow chart of the boot process and the units involved.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Which TBH is a pretty crufty, strange one on top.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] Well, &lt;a href="https://bugzilla.gnome.org/show_bug.cgi?id=676452"&gt;a terminal
where this bug is fixed&lt;/a&gt; (used together with &lt;a href="https://bugzilla.gnome.org/show_bug.cgi?id=676482"&gt;a help
browser where this one is fixed&lt;/a&gt;).&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 27 Jun 2012 17:45:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-06-27:/blog/projects/self-documented-boot.html</guid><category>projects</category></item><item><title>Presentation in Warsaw</title><link>https://0pointer.net/blog/projects/warsaw.html</link><description>
                
&lt;p&gt;I recently had the chance to speak about &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;
and other projects, as well as the politics behind them at a &lt;a href="http://osec.pl/barcamp/lennart"&gt;Bar Camp in Warsaw&lt;/a&gt;,
organized by the fine people of &lt;a href="http://osec.pl/"&gt;OSEC&lt;/a&gt;. The presentation has been recorded,
and has now been posted online. It's a very long recording (1:43h),
but it's quite interesting (as I'd like to believe) and contains a bit
of background where we are coming from and where are going to. Anyway,
please have a look. Enjoy!&lt;/p&gt;

&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/9UnEV9SPuw8" frameborder="0" allowfullscreen="1"&gt;&lt;/iframe&gt;

&lt;p&gt;I'd like to thank the organizers for this great event and for
publishing the recording online.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 24 May 2012 22:06:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-05-24:/blog/projects/warsaw.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part XIII</title><link>https://0pointer.net/blog/projects/systemctl-journal.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/security.html"&gt;Here's&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/inetd.html"&gt;the&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;thirteenth&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;

&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;Log and Service Status&lt;/h4&gt;

&lt;p&gt;This one is a short episode. One of the most commonly used commands
on a &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;
system is &lt;tt&gt;systemctl status&lt;/tt&gt; which may be used to determine the
status of a service (or other unit). It always has been a valuable
tool to figure out the processes, runtime information and other meta
data of a daemon running on the system.&lt;/p&gt;

&lt;p&gt;With Fedora 17 we introduced &lt;a href="http://0pointer.de/blog/projects/the-journal.html"&gt;the
journal&lt;/a&gt;, our new logging scheme that provides structured, indexed
and reliable logging on systemd systems, while providing a certain
degree of compatibility with classic syslog implementations. The
original reason we started to work on the journal was one specific
feature idea, that to the outsider might appear simple but without the
journal is difficult and inefficient to implement: along with the
output of &lt;tt&gt;systemctl status&lt;/tt&gt; we wanted to show the last 10 log
messages of the daemon. Log data is some of the most essential bits of
information we have on the status of a service. Hence it it is an
obvious choice to show next to the general status of the
service.&lt;/p&gt;

&lt;p&gt;And now to make it short: at the same time as we integrated the
journal into &lt;tt&gt;systemd&lt;/tt&gt; and Fedora we also hooked up
&lt;tt&gt;systemctl&lt;/tt&gt; with it. Here's an example output:&lt;/p&gt;

&lt;pre&gt;$ systemctl status avahi-daemon.service
avahi-daemon.service - Avahi mDNS/DNS-SD Stack
	  Loaded: loaded (/usr/lib/systemd/system/avahi-daemon.service; enabled)
	  Active: active (running) since Fri, 18 May 2012 12:27:37 +0200; 14s ago
	Main PID: 8216 (avahi-daemon)
	  Status: "avahi-daemon 0.6.30 starting up."
	  CGroup: name=systemd:/system/avahi-daemon.service
		  ‚îú 8216 avahi-daemon: running [omega.local]
		  ‚îî 8217 avahi-daemon: chroot helper

May 18 12:27:37 omega avahi-daemon[8216]: Joining mDNS multicast group on interface eth1.IPv4 with address 172.31.0.52.
May 18 12:27:37 omega avahi-daemon[8216]: New relevant interface eth1.IPv4 for mDNS.
May 18 12:27:37 omega avahi-daemon[8216]: Network interface enumeration completed.
May 18 12:27:37 omega avahi-daemon[8216]: Registering new address record for 192.168.122.1 on virbr0.IPv4.
May 18 12:27:37 omega avahi-daemon[8216]: Registering new address record for fd00::e269:95ff:fe87:e282 on eth1.*.
May 18 12:27:37 omega avahi-daemon[8216]: Registering new address record for 172.31.0.52 on eth1.IPv4.
May 18 12:27:37 omega avahi-daemon[8216]: Registering HINFO record with values 'X86_64'/'LINUX'.
May 18 12:27:38 omega avahi-daemon[8216]: Server startup complete. Host name is omega.local. Local service cookie is 3555095952.
May 18 12:27:38 omega avahi-daemon[8216]: Service "omega" (/services/ssh.service) successfully established.
May 18 12:27:38 omega avahi-daemon[8216]: Service "omega" (/services/sftp-ssh.service) successfully established.&lt;/pre&gt;

&lt;p&gt;This, of course, shows the status of everybody's favourite
mDNS/DNS-SD daemon with a list of its processes, along with -- as
promised -- the 10 most recent log lines. Mission accomplished!&lt;/p&gt;

&lt;p&gt;There are a couple of switches available to alter the output
slightly and adjust it to your needs. The two most interesting
switches are &lt;tt&gt;-f&lt;/tt&gt; to enable follow mode (as in &lt;tt&gt;tail
-f&lt;/tt&gt;) and &lt;tt&gt;-n&lt;/tt&gt; to change the number of lines to show (you
guessed it, as in &lt;tt&gt;tail -n&lt;/tt&gt;).&lt;/p&gt;

&lt;p&gt;The log data shown comes from three sources: everything any of the
daemon's processes logged with libc's &lt;tt&gt;syslog()&lt;/tt&gt; call,
everything submitted using the native Journal API, plus everything any
of the daemon's processes logged to STDOUT or STDERR. In short:
everything the daemon generates as log data is collected, properly
interleaved and shown in the same format.&lt;/p&gt;

&lt;p&gt;And that's it already for today. It's a very simple feature, but an
immensely useful one for every administrator. One of the kind "Why didn't
we already do this 15 years ago?".&lt;/p&gt;

&lt;p&gt;Stay tuned for the next installment!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 18 May 2012 12:37:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-05-18:/blog/projects/systemctl-journal.html</guid><category>projects</category></item><item><title>Boot &amp; Base OS Miniconf at Linux Plumbers Conference 2012, San Diego</title><link>https://0pointer.net/blog/projects/lpc2012.html</link><description>
                
&lt;p style="text-align: center"&gt;&lt;a href="http://www.linuxplumbersconf.org/2012/"&gt;&lt;img src="http://www.linuxplumbersconf.org/2012/style/tagline.png" width="493" height="90" alt="Linux Plumbers Conference Logo" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are working on putting together &lt;a href="http://wiki.linuxplumbersconf.org/2012:boot_and_base_os"&gt;a miniconf on
the topic of Boot &amp;amp; Base OS&lt;/a&gt; for the Linux Plumbers Conference 2012 in San
Diego (Aug 29-31). And we need your submission!&lt;/p&gt;

&lt;p&gt;Are you working on some exciting project related to Boot and Base OS and
would like to present your work? Then please submit something &lt;a href="http://www.linuxplumbersconf.org/2012/2012-lpc-call-for-proposals-take-2/"&gt;following
these guidelines&lt;/a&gt;, but please CC Kay Sievers and Lennart Poettering.&lt;/p&gt;

&lt;p&gt;I hope that at this point the Linux Plumbers Conference
needs little introduction, so I will spare any further prose on how great and
useful and the best conference ever it is for everybody who works on the plumbing
layer of Linux. However, there's one conference that will be co-located with
LPC that is still little known, because it happens for the first time: &lt;a href="http://www.cconf.org/"&gt;The C Conference&lt;/a&gt;, organized by Brandon Philips
and friends. It covers all things C, and they are still looking for more
topics, in a &lt;a href="http://www.cconf.org/pfc/"&gt;reverse CFP&lt;/a&gt;. Please
consider submitting a proposal and registering to the conference!&lt;/p&gt;

&lt;p style="text-align: center"&gt;&lt;a href="http://www.cconf.org/"&gt;&lt;img src="http://www.cconf.org/assets/cconf.png" width="270" height="270" alt="C
Conference Logo" /&gt;&lt;/a&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 03 May 2012 20:42:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-05-03:/blog/projects/lpc2012.html</guid><category>projects</category></item><item><title>The Most Awesome, Least-Advertised Fedora 17 Feature</title><link>https://0pointer.net/blog/projects/multi-seat.html</link><description>
                
&lt;p&gt;There's one feature In the upcoming Fedora 17 release that is
immensly useful but very little known, since its &lt;a href="https://fedoraproject.org/wiki/Features/ckremoval"&gt;feature page
'ckremoval'&lt;/a&gt; does not explicitly refer to it in its name: true
&lt;i&gt;automatic multi-seat&lt;/i&gt; support for Linux.&lt;/p&gt;

&lt;p&gt;A multi-seat computer is a system that offers not only one local
seat for a user, but multiple, at the same time. A seat refers to a
combination of a screen, a set of input devices (such as mice and
keyboards), and maybe an audio card or webcam, as individual local
workplace for a user. A multi-seat computer can drive an entire class
room of seats with only a fraction of the cost in hardware, energy,
administration and space: you only have one PC, which usually has way
enough CPU power to drive 10 or more workplaces. (In fact, even a
Netbook has fast enough to drive a couple of seats!) &lt;i&gt;Automatic
multi-seat&lt;/i&gt; refers to an entirely automatically managed seat setup:
whenever a new seat is plugged in a new login screen immediately
appears -- without any manual configuration --, and when the seat is
unplugged all user sessions on it are removed without delay.&lt;/p&gt;

&lt;p&gt;In Fedora 17 we added this functionality to the low-level user and
device tracking of systemd, replacing the previous ConsoleKit logic
that lacked support for automatic multi-seat. With all the ground work
done in systemd, udev and the other components of our plumbing layer
the last remaining bits were surprisingly easy to add.&lt;/p&gt;

&lt;p&gt;Currently, the automatic multi-seat logic works best with the USB
multi-seat hardware from &lt;a href="http://www.amazon.com/Plugable-Universal-DisplayLink-1920x1080-High-Speed/dp/B002PONXAI/ref=sr_1_3?ie=UTF8&amp;amp;qid=1335904746&amp;amp;sr=8-3"&gt;Plugable&lt;/a&gt;
you can buy cheaply on &lt;a href="http://www.amazon.com/Plugable-DC-125-Docking-Station-Multiseat/dp/B004PXPPNA/ref=sr_1_10?ie=UTF8&amp;amp;qid=1335904746&amp;amp;sr=8-10"&gt;Amazon
(US)&lt;/a&gt;. These devices require exactly zero configuration with the
new scheme implemented in Fedora 17: just plug them in at any time,
login screens pop up on them, and you have your additional
seats. Alternatively you can also assemble your seat manually with a
few easy &lt;a href="http://www.freedesktop.org/software/systemd/man/loginctl.html"&gt;loginctl
attach&lt;/a&gt; commands, from any kind of hardware you might have lying
around. To get a full seat you need multiple graphics cards, keyboards
and mice: one set for each seat. (Later on we'll probably have a graphical
setup utility for additional seats, but that's not a pressing issue we
believe, as the plug-n-play multi-seat support with the Plugable
devices is so awesomely nice.)&lt;/p&gt;

&lt;p&gt;Plugable provided us for free with hardware for testing
multi-seat. They are also involved with the upstream development of
the USB DisplayLink driver for Linux. Due to their positive
involvement with Linux we can only recommend to buy their
hardware. They are good guys, and support Free Software the way all
hardware vendors should! (And besides that, their hardware is also
nicely put together. For example, in contrast to most similar vendors
they actually assign proper vendor/product IDs to their USB hardware
so that we can easily recognize their hardware when plugged in to set
up automatic seats.)&lt;/p&gt;

&lt;p&gt;Currently, all this magic is only implemented in the GNOME stack
with the biggest component getting updated being the GNOME Display
Manager. On the Plugable USB hardware you get a full GNOME Shell
session with all the usual graphical gimmicks, the same way as on any
other hardware. (Yes, GNOME 3 works perfectly fine on simpler graphics
cards such as these USB devices!) If you are hacking on a different
desktop environment, or on a different display manager, please have a
look at &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/multiseat"&gt;the
multi-seat documentation&lt;/a&gt; we put together, and particularly at
our short piece about &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/writing-display-managers"&gt;writing
display managers&lt;/a&gt; which are multi-seat capable.&lt;/p&gt;

&lt;p&gt;If you work on a major desktop environment or display manager and
would like to implement multi-seat support for it, but lack the
aforementioned Plugable hardware, we might be able to provide you with
the hardware for free. Please contact us directly, and we might be
able to send you a device. Note that we don't have unlimited devices
available, hence we'll probably not be able to pass hardware to
everybody who asks, and we will pass the hardware preferably to people
who work on well-known software or otherwise have contributed good
code to the community already. Anyway, if in doubt, ping us, and
explain to us why you should get the hardware, and we'll consider you!
(Oh, and this not only applies to display managers, if you hack on some other
software where multi-seat awareness would be truly useful, then don't
hesitate and ping us!)&lt;/p&gt;

&lt;p&gt;Phoronix has &lt;a href="http://www.phoronix.com/scan.php?page=article&amp;amp;item=plugable_multiseat_kick"&gt;this
story about this new multi-seat&lt;/a&gt; support which is quite interesting and
full of pictures. Please have a look.&lt;/p&gt;

&lt;p&gt;Plugable started a &lt;a href="http://www.kickstarter.com/projects/1666707630/plugable-thin-client-the-50-computer"&gt;Pledge
drive&lt;/a&gt; to lower the price of the Plugable USB multi-seat terminals
further. It's full of pictures (&lt;a href="http://www.kickstarter.com/projects/1666707630/plugable-thin-client-the-50-computer/widget/video.html"&gt;&lt;b&gt;and a video showing all this in action!&lt;/b&gt;&lt;/a&gt;), and uses the code we now make
available in Fedora 17 as base. Please consider pledging a few
bucks.&lt;/p&gt;

&lt;p&gt;Recently David Zeuthen &lt;a href="https://plus.google.com/110773474140772402317/posts/NqPUifsFUYH"&gt;added
multi-seat support to udisks&lt;/a&gt; as well. With this in place, a user
logged in on a specific seat can only see the USB storage plugged into
his individual seat, but does not see any USB storage plugged into any
other local seat. With this in place we closed the last missing bit of
multi-seat support in our desktop stack.&lt;/p&gt;

&lt;p&gt;With this code in Fedora 17 we cover the big use cases of
multi-seat already: internet cafes, class rooms and similar
installations can provide PC workplaces cheaply and easily without any
manual configuration. Later on we want to build on this and make this
useful for different uses too: for example, the ability to get a login
screen as easily as plugging in a USB connector makes this not useful
only for saving money in setups for many people, but also in embedded
environments (consider monitoring/debugging screens made available via
this hotplug logic) or servers (get trivially quick local access to
your otherwise head-less server). To be truly useful in these areas we
need one more thing though: the ability to run a simply getty
(i.e. text login) on the seat, without necessarily involving a
graphical UI.&lt;/p&gt;

&lt;p&gt;The well-known X successor Wayland already comes out of the box with multi-seat
support based on this logic.&lt;/p&gt;

&lt;p&gt;Oh, and BTW, as Ubuntu appears to be "&lt;i&gt;focussing&lt;/i&gt;" on "&lt;i&gt;clarity&lt;/i&gt;" in the
"&lt;i&gt;cloud&lt;/i&gt;" now ;-), and chose Upstart instead of systemd, this feature
won't be available in Ubuntu any time soon. That's (one detail of) the
price Ubuntu has to pay for choosing to maintain it's own (largely
legacy, such as ConsoleKit) plumbing stack.&lt;/p&gt;

&lt;p&gt;Multi-seat has a long history on Unix. Since the earliest days Unix
systems could be accessed by multiple local terminals at the same
time. Since then local terminal support (and hence multi-seat)
gradually moved out of view in computing. The fewest machines these
days have more than one seat, the concept of terminals survived almost
exclusively in the context of PTYs (i.e. fully virtualized API
objects, disconnected from any real hardware seat) and VCs (i.e. a
single virtualized local seat), but almost not in any other way (well,
server setups still use serial terminals for emergency remote access,
but they almost never have more than one serial terminal). All what we
do in systemd is based on the ideas originally brought forward in
Unix; with systemd we now try to bring back a number of the good ideas
of Unix that since the old times were lost on the roadside. For
example, in true Unix style we already started to expose the concept
of a service in the file system (in
&lt;tt&gt;/sys/fs/cgroup/systemd/system/&lt;/tt&gt;), something where on Linux the
(often misunderstood) "&lt;i&gt;everything is a file&lt;/i&gt;" mantra previously
fell short. With automatic multi-seat support we bring back support
for terminals, but updated with all the features of today's desktops:
plug and play, zero configuration, full graphics, and not limited to
input devices and screens, but extending to all kinds of devices, such
as audio, webcams or USB memory sticks.&lt;/p&gt;

&lt;p&gt;Anyway, this is all for now; I'd like to thank everybody who was
involved with making multi-seat work so nicely and natively on the
Linux platform. You know who you are! Thanks a ton!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 01 May 2012 23:07:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-05-01:/blog/projects/multi-seat.html</guid><category>projects</category></item><item><title>systemd Status Update</title><link>https://0pointer.net/blog/projects/systemd-update-3.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/systemd-update-2.html"&gt;It
has been way too long since my last status update on
systemd&lt;/a&gt;. Here's another short, incomprehensive status update on
what we worked on for &lt;a href="http://freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; since
then.&lt;/p&gt;

&lt;p&gt;We have been working hard to turn systemd into the most viable set
of components to build operating systems, appliances and devices from,
and make it the best choice for servers, for desktops and for embedded
environments alike. I think we have a really convincing set of
features now, but we are actively working on making it even
better.&lt;/p&gt;

&lt;p&gt;Here's a list of some more and some less interesting features, in
no particular order:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;We added an automatic pager to &lt;tt&gt;systemctl&lt;/tt&gt; (and related tools), similar
to how &lt;tt&gt;git&lt;/tt&gt; has it.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;systemctl&lt;/tt&gt; learnt a new switch &lt;tt&gt;--failed&lt;/tt&gt;, to show only
failed services.&lt;/li&gt;

&lt;li&gt;You may now start services immediately, overrding all dependency
logic by passing &lt;tt&gt;--ignore-dependencies&lt;/tt&gt; to
&lt;tt&gt;systemctl&lt;/tt&gt;. This is mostly a debugging tool and nothing people
should use in real life.&lt;/li&gt;

&lt;li&gt;Sending &lt;tt&gt;SIGKILL&lt;/tt&gt; as final part of the implicit shutdown
logic of services is now optional and may be configured with the
&lt;tt&gt;SendSIGKILL=&lt;/tt&gt; option individually for each service.&lt;/li&gt;

&lt;li&gt;We split off the Vala/Gtk tools into its own project &lt;tt&gt;systemd-ui&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;systemd-tmpfiles&lt;/tt&gt; learnt file globbing and creating FIFO
special files as well as character and block device nodes, and
symlinks. It also is capable of relabelling certain directories at
boot now (in the SELinux sense).&lt;/li&gt;

&lt;li&gt;Immediately before shuttding dow we will now invoke all binaries
found in &lt;tt&gt;/lib/systemd/system-shutdown/&lt;/tt&gt;, which is useful for
debugging late shutdown.&lt;/li&gt;

&lt;li&gt;You may now globally control where STDOUT/STDERR of services goes
(unless individual service configuration overrides it).&lt;/li&gt;

&lt;li&gt;There's a new &lt;tt&gt;ConditionVirtualization=&lt;/tt&gt; option, that makes
systemd skip a specific service if a certain virtualization technology
is found or not found. Similar, we now have a new option to detect
whether a certain security technology (such as SELinux) is available,
called &lt;tt&gt;ConditionSecurity=&lt;/tt&gt;. There's also
&lt;tt&gt;ConditionCapability=&lt;/tt&gt; to check whether a certain process
capability is in the capability bounding set of the system. There's
also a new &lt;tt&gt;ConditionFileIsExecutable=&lt;/tt&gt;,
&lt;tt&gt;ConditionPathIsMountPoint=&lt;/tt&gt;,
&lt;tt&gt;ConditionPathIsReadWrite=&lt;/tt&gt;,
&lt;tt&gt;ConditionPathIsSymbolicLink=&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;The file system condition directives now support globbing.&lt;/li&gt;

&lt;li&gt;Service conditions may now be "triggering" and "mandatory", meaning that
they can be a necessary requirement to hold for a service to start, or
simply one trigger among many.&lt;/li&gt;

&lt;li&gt;At boot time we now print warnings if: &lt;a href="http://freedesktop.org/wiki/Software/systemd/separate-usr-is-broken"&gt;&lt;tt&gt;/usr&lt;/tt&gt;
is on a split-off partition but not already mounted by an initrd&lt;/a&gt;;
if &lt;tt&gt;/etc/mtab&lt;/tt&gt; is not a symlink to &lt;tt&gt;/proc/mounts&lt;/tt&gt;; &lt;a href="http://0pointer.de/blog/projects/cgroups-vs-cgroups.html"&gt;CONFIG_CGROUPS
is not enabled in the kernel&lt;/a&gt;. We'll also expose this as
&lt;i&gt;tainted&lt;/i&gt; flag on the bus.&lt;/li&gt;

&lt;li&gt;You may now boot the same OS image on a bare metal machine and in
Linux namespace containers and will get a clean boot in both
cases. This is more complicated than it sounds since device management
with udev or write access to &lt;tt&gt;/sys&lt;/tt&gt;, &lt;tt&gt;/proc/sys&lt;/tt&gt; or
things like &lt;tt&gt;/dev/kmsg&lt;/tt&gt; is not available in a container. This
makes systemd a first-class choice for managing thin container
setups. This is all tested with systemd's own &lt;tt&gt;systemd-nspawn&lt;/tt&gt;
tool but should work fine in LXC setups, too. Basically this means
that you do not have to adjust your OS manually to make it work in a
container environment, but will just work out of the box. It also
makes it easier to convert real systems into containers.&lt;/li&gt;

&lt;li&gt;We now automatically spawn gettys on HVC ttys when booting in VMs.&lt;/li&gt;

&lt;li&gt;We introduced &lt;tt&gt;/etc/machine-id&lt;/tt&gt; as a generalization of
D-Bus machine ID logic. See &lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;this
blog story for more information&lt;/a&gt;. On stateless/read-only systems
the machine ID is initialized randomly at boot. In virtualized
environments it may be passed in from the machine manager (with qemu's
&lt;tt&gt;-uuid&lt;/tt&gt; switch, or via the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/ContainerInterface"&gt;container
interface&lt;/a&gt;).&lt;/li&gt;

&lt;li&gt;All of the systemd-specific &lt;tt&gt;/etc/fstab&lt;/tt&gt; mount options are
now in the &lt;tt&gt;x-systemd-&lt;i&gt;xyz&lt;/i&gt;&lt;/tt&gt; format.&lt;/li&gt;

&lt;li&gt;To make it easy to find non-converted services we will now
implicitly prefix all LSB and SysV init script descriptions with the
strings "&lt;tt&gt;LSB:&lt;/tt&gt;" resp. "&lt;tt&gt;SYSV:&lt;/tt&gt;".&lt;/li&gt;

&lt;li&gt;We introduced &lt;tt&gt;/run&lt;/tt&gt; and made it a hard dependency of
systemd. This directory is now widely accepted and implemented on all
relevant Linux distributions.&lt;/li&gt;

&lt;li&gt;systemctl can now execute all its operations remotely too (&lt;tt&gt;-H&lt;/tt&gt; switch).&lt;/li&gt;

&lt;li&gt;We now ship &lt;a href="http://0pointer.de/blog/projects/changing-roots.html"&gt;systemd-nspawn&lt;/a&gt;,
a really powerful tool that can be used to start containers for
debugging, building and testing, much like chroot(1). It is useful to
just get a shell inside a build tree, but is good enough to boot up a
full system in it, too.&lt;/li&gt;

&lt;li&gt;If we query the user for a hard disk password at boot he may hit
TAB to hide the asterisks we normally show for each key that is
entered, for extra paranoia.&lt;/li&gt;

&lt;li&gt;We don't enable &lt;tt&gt;udev-settle.service&lt;/tt&gt; anymore, which is
only required for certain legacy software that still hasn't been
updated to follow devices coming and going cleanly.&lt;/li&gt;

&lt;li&gt;We now include a tool that can plot boot speed graphs, similar to
bootchartd, called &lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;&lt;tt&gt;systemd-analyze&lt;/tt&gt;&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;At boot, we now initialize the kernel's &lt;tt&gt;binfmt_misc&lt;/tt&gt; logic with the data from &lt;tt&gt;/etc/binfmt.d&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;systemctl&lt;/tt&gt; now recognizes if it is run in a &lt;tt&gt;chroot()&lt;/tt&gt;
environment and will work accordingly (i.e. apply changes to the tree
it is run in, instead of talking to the actual PID 1 for this). It also has a new &lt;tt&gt;--root=&lt;/tt&gt; switch to work on an OS tree from outside of it.&lt;/li&gt;

&lt;li&gt;There's a new unit dependency type &lt;tt&gt;OnFailureIsolate=&lt;/tt&gt; that
allows entering a different target whenever a certain unit fails. For
example, this is interesting to enter emergency mode if file system
checks of crucial file systems failed.&lt;/li&gt;

&lt;li&gt;Socket units may now listen on Netlink sockets, special files
from &lt;tt&gt;/proc&lt;/tt&gt; and POSIX message queues, too.&lt;/li&gt;

&lt;li&gt;There's a new &lt;tt&gt;IgnoreOnIsolate=&lt;/tt&gt; flag which may be used to
ensure certain units are left untouched by isolation requests. There's
a new &lt;tt&gt;IgnoreOnSnapshot=&lt;/tt&gt; flag which may be used to exclude
certain units from snapshot units when they are created.&lt;/li&gt;

&lt;li&gt;There's now small mechanism services &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/hostnamed"&gt;for
changing the local hostname and other host meta data&lt;/a&gt;, &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/localed"&gt;changing
the system locale and console settings&lt;/a&gt; and the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/timedated"&gt;system
clock&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;We now limit the capability bounding set for a number of our
internal services by default.&lt;/li&gt;

&lt;li&gt;Plymouth may now be disabled globally with
&lt;tt&gt;plymouth.enable=0&lt;/tt&gt; on the kernel command line.&lt;/li&gt;

&lt;li&gt;We now disallocate VTs when a getty finished running (and
optionally other tools run on VTs). This adds extra security since it
clears up the scrollback buffer so that subsequent users cannot get
access to a user's session output.&lt;/li&gt;

&lt;li&gt;In socket units there are now options to control the
&lt;tt&gt;IP_TRANSPARENT&lt;/tt&gt;, &lt;tt&gt;SO_BROADCAST&lt;/tt&gt;, &lt;tt&gt;SO_PASSCRED&lt;/tt&gt;,
&lt;tt&gt;SO_PASSSEC&lt;/tt&gt; socket options.&lt;/li&gt;

&lt;li&gt;The receive and send buffers of socket units may now be set larger
than the default system settings if needed by using
SO_{RCV,SND}BUFFORCE.&lt;/li&gt;

&lt;li&gt;We now set the hardware timezone as one of the first things in PID
1, in order to avoid time jumps during normal userspace operation, and
to guarantee sensible times on all generated logs. We also no longer
save the system clock to the RTC on shutdown, assuming that this is
done by the clock control tool when the user modifies the time, or
automatically by the kernel if NTP is enabled.&lt;/li&gt;

&lt;li&gt;The SELinux directory got moved from &lt;tt&gt;/selinux&lt;/tt&gt; to
&lt;tt&gt;/sys/fs/selinux&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;We added a small service &lt;tt&gt;systemd-logind&lt;/tt&gt; that keeps tracks
of logged in users and their sessions. It creates control groups for
them, implements the &lt;a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"&gt;XDG_RUNTIME_DIR
specification&lt;/a&gt; for them, maintains seats and device node ACLs and
implements shutdown/idle inhibiting for clients. It auto-spawns gettys
on all local VTs when the user switches to them (instead of starting
six of them unconditionally), thus reducing the resource foot print by
default. It has a D-Bus interface as well as &lt;a href="http://www.freedesktop.org/software/systemd/man/sd-login.html"&gt;a
simple synchronous library interface&lt;/a&gt;. This mechanism obsoletes
ConsoleKit which is now deprecated and should no longer be used.&lt;/li&gt;

&lt;li&gt;There's now full, automatic multi-seat support, and this is
enabled in GNOME 3.4. Just by pluging in new seat hardware you get a
new login screen on your seat's screen.&lt;/li&gt;

&lt;li&gt;There is now an option &lt;tt&gt;ControlGroupModify=&lt;/tt&gt; to allow
services to change the properties of their control groups dynamically,
and one to make control groups persistent in the tree
(&lt;tt&gt;ControlGroupPersistent=&lt;/tt&gt;) so that they can be created and
maintained by external tools.&lt;/li&gt;

&lt;li&gt;We now jump back into the &lt;tt&gt;initrd&lt;/tt&gt; in shutdown, so that it can
detach the root file system and the storage devices backing it. This
allows (for the first time!) to reliably undo complex storage setups
on shutdown and leave them in a clean state.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;systemctl&lt;/tt&gt; now supports &lt;i&gt;presets&lt;/i&gt;, a way for distributions and
administrators to define their own policies on whether services should
be enabled or disabled by default on package installation.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;systemctl&lt;/tt&gt; now has high-level verbs for masking/unmasking
units. There's also a new command (&lt;tt&gt;systemctl list-unit-files&lt;/tt&gt;)
for determining the list of all installed unit file files and whether
they are enabled or not.&lt;/li&gt;

&lt;li&gt;We now apply &lt;tt&gt;sysctl&lt;/tt&gt; variables to each new network device, as it
appears. This makes &lt;tt&gt;/etc/sysctl.d&lt;/tt&gt; compatible with hot-plug
network devices.&lt;/li&gt;

&lt;li&gt;There's limited profiling for SELinux start-up perfomance built
into PID 1.&lt;/li&gt;

&lt;li&gt;There's a new switch &lt;a href="http://0pointer.de/blog/projects/security.html"&gt;&lt;tt&gt;PrivateNetwork=&lt;/tt&gt;&lt;/a&gt;
to turn of any network access for a specific service.&lt;/li&gt;

&lt;li&gt;Service units may now include configuration for control group
parameters. A few (such as &lt;tt&gt;MemoryLimit=&lt;/tt&gt;) are exposed with
high-level options, and all others are available via the generic
&lt;tt&gt;ControlGroupAttribute=&lt;/tt&gt; setting.&lt;/li&gt;

&lt;li&gt;There's now the option to mount certain cgroup controllers
jointly at boot. We do this now for &lt;tt&gt;cpu&lt;/tt&gt; and
&lt;tt&gt;cpuacct&lt;/tt&gt; by default.&lt;/li&gt;

&lt;li&gt;We added &lt;a href="https://docs.google.com/document/pub?id=1IC9yOXj7j6cdLLxWEBAGRL6wl97tFxgjLUEHIX3MSTs"&gt;the
journal&lt;/a&gt; and turned it on by default.&lt;/li&gt;

&lt;li&gt;All service output is now written to the Journal by default,
regardless whether it is sent via syslog or simply written to
stdout/stderr. Both message streams end up in the same location and
are interleaved the way they should. All log messages even from the
kernel and from early boot end up in the journal. Now, no service
output gets unnoticed and is saved and indexed at the same
location.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;systemctl status&lt;/tt&gt; will now show the last 10 log lines for
each service, directly from the journal.&lt;/li&gt;

&lt;li&gt;We now show the progress of &lt;tt&gt;fsck&lt;/tt&gt; at boot on the console,
again. We also show the much loved colorful &lt;tt&gt;[ OK ]&lt;/tt&gt; status
messages at boot again, as known from most SysV implementations.&lt;/li&gt;

&lt;li&gt;We merged udev into systemd.&lt;/li&gt;

&lt;li&gt;We implemented and documented interfaces to &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/ContainerInterface"&gt;container
managers&lt;/a&gt; and &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/InitrdInterface"&gt;initrds&lt;/a&gt;
for passing execution data to systemd. We also implemented and
documented &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/RootStorageDaemons"&gt;an
interface for storage daemons that are required to back the root file
system&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;There are two new options in service files to propagate reload requests between several units.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;systemd-cgls&lt;/tt&gt; won't show kernel threads by default anymore, or show empty control groups.&lt;/li&gt;

&lt;li&gt;We added a new tool &lt;tt&gt;systemd-cgtop&lt;/tt&gt; that shows resource
usage of whole services in a top(1) like fasion.&lt;/li&gt;

&lt;li&gt;systemd may now supervise services in watchdog style. If enabled
for a service the daemon daemon has to ping PID 1 in regular intervals
or is otherwise considered failed (which might then result in
restarting it, or even rebooting the machine, as configured). Also,
PID 1 is capable of pinging a hardware watchdog. Putting this
together, the hardware watchdogs PID 1 and PID 1 then watchdogs
specific services. This is highly useful for high-availability servers
as well as embedded machines. Since watchdog hardware is noawadays
built into all modern chipsets (including desktop chipsets), this
should hopefully help to make this a more widely used
functionality.&lt;/li&gt;

&lt;li&gt;We added support for a new kernel command line option
&lt;tt&gt;systemd.setenv=&lt;/tt&gt; to set an environment variable
system-wide.&lt;/li&gt;

&lt;li&gt;By default services which are started by systemd will have SIGPIPE
set to ignored. The Unix SIGPIPE logic is used to reliably implement
shell pipelines and when left enabled in services is usually just a
source of bugs and problems.&lt;/li&gt;

&lt;li&gt;You may now configure the rate limiting that is applied to
restarts of specific services. Previously the rate limiting parameters
were hard-coded (similar to SysV).&lt;/li&gt;

&lt;li&gt;There's now support for loading the IMA integrity policy into the
kernel early in PID 1, similar to how we already did it with the
SELinux policy.&lt;/li&gt;

&lt;li&gt;There's now an official API to schedule and query scheduled shutdowns.&lt;/li&gt;

&lt;li&gt;We changed the license from GPL2+ to LGPL2.1+.&lt;/li&gt;

&lt;li&gt;We made &lt;a href="http://www.freedesktop.org/software/systemd/man/systemd-detect-virt.html"&gt;&lt;tt&gt;systemd-detect-virt&lt;/tt&gt;&lt;/a&gt;
an official tool in the tool set. Since we already had code to detect
certain VM and container environments we now added an official tool
for administrators to make use of in shell scripts and suchlike.&lt;/li&gt;

&lt;li&gt;We documented &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/InterfacePortabilityAndStabilityChart"&gt;numerous
interfaces&lt;/a&gt; systemd introduced.&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;Much of the stuff above is already available in Fedora 15 and 16,
or will be made available in the upcoming Fedora 17.&lt;/p&gt;

&lt;p&gt;And that's it for now. There's a lot of other stuff in the git commits, but
most of it is smaller and I will it thus spare you.&lt;/p&gt;

&lt;p&gt;I'd like to thank everybody who contributed to systemd over the past years.&lt;/p&gt;

&lt;p&gt;Thanks for your interest!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 21 Apr 2012 00:17:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-04-21:/blog/projects/systemd-update-3.html</guid><category>projects</category></item><item><title>Control Groups vs. Control Groups</title><link>https://0pointer.net/blog/projects/cgroups-vs-cgroups.html</link><description>
                
&lt;p&gt;&lt;i&gt;TL;DR: &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/"&gt;systemd&lt;/a&gt; does not
require the performance-sensitive bits of Linux control groups enabled in the kernel.
However, it does require some non-performance-sensitive bits of the control
group logic.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;In some areas of the community there's still some confusion about Linux
control groups and their performance impact, and what precisely it is that
systemd requires of them. In the hope to clear this up a bit, I'd like to point
out a few things:&lt;/p&gt;

&lt;p&gt;Control Groups are two things: &lt;b&gt;(A)&lt;/b&gt; &lt;i&gt;a way to hierarchally group and
label processes&lt;/i&gt;, and &lt;b&gt;(B)&lt;/b&gt; &lt;i&gt;a way to then apply resource limits&lt;/i&gt;
to these groups. systemd only requires the former (A), and not the latter (B).
That means you can compile your kernel without any control group resource
controllers (B) and systemd will work perfectly on it. However, if you in
addition disable the grouping feature entirely (A) then systemd will loudly
complain at boot and proceed only reluctantly with a big warning and in a
limited functionality mode.&lt;/p&gt;

&lt;p&gt;At compile time, the grouping/labelling feature in the kernel is enabled by
CONFIG_CGROUPS=y, the individual controllers by CONFIG_CGROUP_FREEZER=y,
CONFIG_CGROUP_DEVICE=y, CONFIG_CGROUP_CPUACCT=y, CONFIG_CGROUP_MEM_RES_CTLR=y,
CONFIG_CGROUP_MEM_RES_CTLR_SWAP=y, CONFIG_CGROUP_MEM_RES_CTLR_KMEM=y,
CONFIG_CGROUP_PERF=y, CONFIG_CGROUP_SCHED=y, CONFIG_BLK_CGROUP=y,
CONFIG_NET_CLS_CGROUP=y, CONFIG_NETPRIO_CGROUP=y. And since (as mentioned) we
only need the former (A), not the latter (B) you may disable all of the latter
options while enabling CONFIG_CGROUPS=y, if you want to run systemd on your
system.&lt;/p&gt;

&lt;p&gt;What about the performance impact of these options? Well, every bit of code
comes at some price, so none of these options come entirely for free. However,
the grouping feature (A) alters the general logic very little, it just sticks
hierarchial labels on processes, and its impact is minimal since that is
usually not in any hot path of the OS.  This is different for the various
controllers (B) which have a much bigger impact since they influence the resource
management of the OS and are full of hot paths. This means that the kernel
feature that systemd mandatorily requires (A) has a minimal effect on system
performance, but the actually performance-sensitive features of control groups
(B) are entirely optional.&lt;/p&gt;

&lt;p&gt;On boot, systemd will mount all controller hierarchies it finds enabled
in the kernel to individual directories below &lt;tt&gt;/sys/fs/cgroup/&lt;/tt&gt;. This is
the official place where kernel controllers are mounted to these days. The
&lt;tt&gt;/sys/fs/cgroup/&lt;/tt&gt; mount point in the kernel was created precisely for
this purpose. Since the control group controllers are a shared facility that
might be used by a number of different subsystems &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/PaxControlGroups"&gt;a few
projects have agreed on a set of rules in order to avoid that the various bits
of code step on each other's toes when using these directories&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;systemd will also maintain its own, private, controller-less, named control
group hierarchy which is mounted to &lt;tt&gt;/sys/fs/cgroup/systemd/&lt;/tt&gt;.  This
hierarchy is private property of systemd, and other software should not try to
interfere with it. This hierarchy is how systemd makes use of the naming and
grouping feature of control groups (A) without actually requiring any kernel
controller enabled for that.&lt;/p&gt;

&lt;p&gt;Now, you might notice that by default systemd does create per-service
cgroups in the "cpu" controller if it finds it enabled in the kernel. This is
entirely optional, however. We chose to make use of it by default to even out
CPU usage between system services. Example: On a traditional web server machine
Apache might end up having 100 CGI worker processes around, while MySQL only
has 5 processes running. Without the use of the "cpu" controller this means
that Apache all together ends up having 20x more CPU available than MySQL since
the kernel tries to provide every process with the same amount of CPU time. On
the other hand, if we add these two services to the "cpu" controller in
individual groups by default, Apache and MySQL get the same amount of CPU,
which we think is a good default.&lt;/p&gt;

&lt;p&gt;Note that if the CPU controller is not enabled in the kernel systemd will not
attempt to make use of the "cpu" hierarchy as described above. Also, even if it is enabled in the kernel it
is trivial to tell systemd not to make use of it: Simply edit
&lt;tt&gt;/etc/systemd/system.conf&lt;/tt&gt; and set &lt;tt&gt;DefaultControllers=&lt;/tt&gt; to the
empty string.&lt;/p&gt;

&lt;p&gt;Let's discuss a few frequently heard complaints regarding systemd's use of control groups:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;b&gt;systemd mounts all controllers to &lt;tt&gt;/sys/fs/cgroup/&lt;/tt&gt; even though
my software requires it at &lt;tt&gt;/dev/cgroup/&lt;/tt&gt; (or some other place)!&lt;/b&gt; The
standardization of &lt;tt&gt;/sys/fs/cgroup/&lt;/tt&gt; as mount point of the hierarchies
is a relatively recent change in the kernel. Some software has not been updated
yet for it. If you cannot change the software in question you are welcome to
unmount the hierarchies from &lt;tt&gt;/sys/fs/cgroup/&lt;/tt&gt; and mount them wherever
you need them instead. However, make sure to leave
&lt;tt&gt;/sys/fs/cgroup/systemd/&lt;/tt&gt; untouched.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;systemd makes use of the "cpu" hierarchy, but it should leave its dirty
fingers from it!&lt;/b&gt; As mentioned above, just set the
&lt;tt&gt;DefaultControllers=&lt;/tt&gt; option of systemd to the empty string.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;I need my two controllers "foo" and "bar" mounted into one hierarchy,
but systemd mounts them in two!&lt;/b&gt; Use the &lt;tt&gt;JoinControllers=&lt;/tt&gt; setting
in &lt;tt&gt;/etc/systemd/system.conf&lt;/tt&gt; to mount several controllers into a single
hierarchy.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;Control groups are evil and they make everything slower!&lt;/b&gt; Well,
please read the text above and understand the difference between
"control-groups-as-in-naming-and-grouping" (A) and "cgroups-as-in-controllers"
(B).  Then, please turn off all controllers in you kernel build (B) but leave
CONFIG_CGROUPS=y (A) enabled.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;I have heard &lt;i&gt;some&lt;/i&gt; kernel developers really hate control groups
and think systemd is evil because it requires them!&lt;/b&gt; Well, there are a
couple of things behind the dislike of control groups by some folks.
Primarily, this is probably caused because the hackers in question do not
distuingish the naming-and-grouping bits of the control group logic (A) and the
controllers that are based on it (B). Mainly, their beef is with the latter
(which systemd does not require, which is the key point I am trying to make in
the text above), but there are other issues as well: for example, the code of
the grouping logic is not the most beautiful bit of code ever written by man
(which is thankfully likely to get better now, since the control groups
subsystem now has an active maintainer again). And then for some
developers it is important that they can compare the runtime behaviour of many
historic kernel versions in order to find bugs (git bisect).  Since systemd
requires kernels with basic control group support enabled, and this is a
relatively recent feature addition to the kernel, this makes it difficult for
them to use a newer distribution with all these old kernels
that predate cgroups. Anyway, the summary is probably that what matters to
developers is different from what matters to users and
administrators.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;I hope this explanation was useful for a reader or two! Thank you for your time!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 10 Apr 2012 19:09:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-04-10:/blog/projects/cgroups-vs-cgroups.html</guid><category>projects</category></item><item><title>GUADEC 2012 CFP Ending Soon!</title><link>https://0pointer.net/blog/projects/guadec-2012-cfp.html</link><description>
                
&lt;p&gt;In case you haven't submitted your talk proposal for GUADEC 2012 in A
Coru&amp;ntilde;a, Spain yet, hurry: the deadline is on April 14th, i.e. this
saturday! &lt;a href="http://www.guadec.org/cfp"&gt;Read der Call for
Participation!&lt;/a&gt; &lt;a href="https://www.gpul.org/indico/abstractSubmission.py?confId=0"&gt;Submit a
proposal!&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 10 Apr 2012 17:40:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-04-10:/blog/projects/guadec-2012-cfp.html</guid><category>projects</category></item><item><title>/tmp or not /tmp?</title><link>https://0pointer.net/blog/projects/tmp.html</link><description>
                
&lt;p&gt;A number of Linux distributions have recently switched (or started
switching) to &lt;tt&gt;/tmp&lt;/tt&gt; on tmpfs by default (ArchLinux, Debian among
others). Other distributions have plans/are discussing doing the same (Ubuntu, OpenSUSE).
Since we believe this is a good idea and it's good to keep the delta between
the distributions minimal &lt;a href="https://fedoraproject.org/wiki/Features/tmp-on-tmpfs"&gt;we are proposing
the same for Fedora 18, too&lt;/a&gt;. On Solaris a similar change has already been
implemented in 1994 (and other Unixes have made a similar change long ago,
too). Yet, not all of our software is written in a way that it works nicely
together with &lt;tt&gt;/tmp&lt;/tt&gt; on tmpfs.&lt;/p&gt;

&lt;p&gt;Another &lt;a href="https://fedoraproject.org/wiki/Features/ServicesPrivateTmp"&gt;Fedora
feature (for Fedora 17)&lt;/a&gt; changed the semantics of &lt;tt&gt;/tmp&lt;/tt&gt; for many
system services to make them more secure, by isolating the /tmp namespaces of the
various services. Handling of temporary files in &lt;tt&gt;/tmp&lt;/tt&gt; has been
security sensitive since it has been introduced since it traditionally has been
a world writable, shared namespace and unless all user code safely uses randomized file names
it is vulnerable to DoS attacks and worse.&lt;/p&gt;

&lt;p&gt;In this blog story I'd like to shed some light on proper usage of
&lt;tt&gt;/tmp&lt;/tt&gt; and what your Linux application should use for what purpose. We'll not
discuss why &lt;tt&gt;/tmp&lt;/tt&gt; on tmpfs is a good idea, for that refer to the &lt;a href="https://fedoraproject.org/wiki/Features/tmp-on-tmpfs"&gt;Fedora feature
page&lt;/a&gt;. Here we'll just discuss what &lt;tt&gt;/tmp&lt;/tt&gt; should be used for and for
what it shouldn't be, as well as what should be used instead. All that in order
to make sure your application remains compatible with these new features
introduced to many newer Linux distributions.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;/tmp&lt;/tt&gt; is (as the name suggests) an area where temporary files
applications require during operation may be placed. Of course, temporary files
differ very much in their properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They can be large, or very small&lt;/li&gt;
&lt;li&gt;They might be used for sharing between users, or be private to users&lt;/li&gt;
&lt;li&gt;They might need to be persistent across boots, or very volatile&lt;/li&gt;
&lt;li&gt;They might need to be machine-local or shared on the network&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Traditionally, &lt;tt&gt;/tmp&lt;/tt&gt; has not only been the place where actual
temporary files are stored, but some software used to place (and often still
continues to place) communication primitives such as sockets, FIFOs, shared
memory there as well. Notably X11, but many others too. Usage of world-writable
shared namespaces for communication purposes has always been problematic, since
to establish communication you need stable names, but stable names open the
doors for DoS attacks. This can be corrected partially, by establishing
protected per-app directories for certain services during early boot (like we
do for X11), but this only fixes the problem partially, since this only works
correctly if every package installation is followed by a reboot.&lt;/p&gt;

&lt;p&gt;Besides &lt;tt&gt;/tmp&lt;/tt&gt; there are various other places where temporary files
(or other files that traditionally have been stored in &lt;tt&gt;/tmp&lt;/tt&gt;) can be
stored. Here's a quick overview of the candidates:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;tt&gt;/tmp&lt;/tt&gt;, POSIX suggests this is flushed as boot, FHS says that files
do not need to be persistent between two runs of the application. Old files are
often cleaned up automatically after a time ("aging"). Usually it is
recommended to use $TMPDIR if it is set before falling back to &lt;tt&gt;/tmp&lt;/tt&gt;
directly. As mentioned, this is a tmpfs on many Linuxes/Unixes (and most likely
will be for most soon), and hence should be used only for small files. It's
generally a shared namespace, hence the only APIs for using it should be &lt;a href="http://linux.die.net/man/3/mkstemp"&gt;&lt;tt&gt;mkstemp()&lt;/tt&gt;&lt;/a&gt;, &lt;a href="http://linux.die.net/man/3/mkdtemp"&gt;&lt;tt&gt;mkdtemp()&lt;/tt&gt;&lt;/a&gt; (and friends)
to be entirely safe.&lt;sup&gt;[1]&lt;/sup&gt; Recently, improvements have been made to
turn this shared namespace into a private namespace (see above), but that doesn't
relieve developers from writing secure code that is also safe if &lt;tt&gt;/tmp&lt;/tt&gt; is a shared
namespace. Because &lt;tt&gt;/tmp&lt;/tt&gt; is no longer necessarily a shared namespace it
is generally unsuitable as a location for communication primitives. It is
machine-private and local. It's usually fully featured (locking, ...). This
directory is world writable and thus available for both privileged and
unprivileged code.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;/var/tmp&lt;/tt&gt;, according to FHS "more persistent" than &lt;tt&gt;/tmp&lt;/tt&gt;,
and is less often cleaned up (it's persistent across reboots, for example). It's not on a tmpfs, but on a real disk, and
hence can be used to store much larger files. The same namespace problems apply
as with &lt;tt&gt;/tmp&lt;/tt&gt;, hence also exclusively use
&lt;tt&gt;mkstemp()&lt;/tt&gt;/&lt;tt&gt;mkdtemp()&lt;/tt&gt; for this directory. It is also
automatically cleaned up by time. It is machine-private. It's not necessarily
fully featured (no locking, ...). This directory is world writable and thus
available for both privileged and unprivileged code. We suggest to also check
&lt;tt&gt;$TMPDIR&lt;/tt&gt; before falling back to &lt;tt&gt;/var/tmp&lt;/tt&gt;. That way if
&lt;tt&gt;$TMPDIR&lt;/tt&gt; is set this overrides usage of both &lt;tt&gt;/tmp&lt;/tt&gt; and
&lt;tt&gt;/var/tmp&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;/run&lt;/tt&gt; (traditionally &lt;tt&gt;/var/run&lt;/tt&gt;) where privileged daemons
can store runtime data, such as communication primitives. This is where your
daemon should place its sockets. It's guaranteed to be a shared namespace, but
is only writable by privileged code and hence very safe to use. This file
system is guaranteed to be a tmpfs and is hence automatically flushed at boots.
No automatic clean-up is done beyond that. It is machine-private and local. It
is fully-featured, and provides all functionality the local OS can provide
(locking, sockets, ...).&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"&gt;$XDG_RUNTIME_DIR&lt;/a&gt;&lt;/tt&gt;
where unprivileged user software can store runtime data, such as communication
primitives. This is similar to &lt;tt&gt;/run&lt;/tt&gt; but for user applications. It's a
user private namespace, and hence very safe to use. It's cleaned up
automatically at logout and also is cleaned up by time via "aging". It is
machine-private and fully featured. In GLib applications use
&lt;tt&gt;g_get_user_runtime_dir()&lt;/tt&gt; to query the path of this directory.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html"&gt;$XDG_CACHE_HOME&lt;/a&gt;&lt;/tt&gt;
where unprivileged user software can store non-essential data. It's a private
namespace of the user. It might be shared between machines. It is not
automatically cleaned up, and not fully featured (no locking, and so on, due to
NFS). In GLib applications use &lt;tt&gt;g_get_user_cache_dir()&lt;/tt&gt; to query this
directory.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://freedesktop.org/wiki/Software/xdg-user-dirs"&gt;$XDG_DOWNLOAD_DIR&lt;/a&gt;&lt;/tt&gt;
where unprivileged user software can store downloads and downloads in progress.
It should only be used for downloads, and is a private namespace fo the user,
but might be shared between machines. It is not automatically cleaned up and
not fully featured. In GLib applications use &lt;tt&gt;g_get_user_special_dir()&lt;/tt&gt;
to query the path of this directory.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Now that we have introduced the contestants, here's a rough guide how we
suggest you (a Linux application developer) pick the right directory to use:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;You need a place to put your socket (or other communication primitive) and your code runs privileged: use a subdirectory beneath &lt;tt&gt;/run&lt;/tt&gt;. (Or beneath &lt;tt&gt;/var/run&lt;/tt&gt; for extra compatibility.)&lt;/li&gt;

&lt;li&gt;You need a place to put your socket (or other communication primitive) and your code runs unprivileged: use a subdirectory beneath &lt;tt&gt;$XDG_RUNTIME_DIR&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;You need a place to put your larger downloads and downloads in progress and run unprivileged: use &lt;tt&gt;$XDG_DOWNLOAD_DIR&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;You need a place to put cache files which should be persistent and run unprivileged: use &lt;tt&gt;$XDG_CACHE_HOME&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;Nothing of the above applies and you need to place a small file that needs no persistency: use &lt;tt&gt;$TMPDIR&lt;/tt&gt; with a fallback on &lt;tt&gt;/tmp&lt;/tt&gt;. And use &lt;tt&gt;mkstemp()&lt;/tt&gt;, and &lt;tt&gt;mkdtemp()&lt;/tt&gt; and nothing homegrown.&lt;/li&gt;

&lt;li&gt;Otherwise use &lt;tt&gt;$TMPDIR&lt;/tt&gt; with a fallback on &lt;tt&gt;/var/tmp&lt;/tt&gt;. Also use &lt;tt&gt;mkstemp()&lt;/tt&gt;/&lt;tt&gt;mkdtemp()&lt;/tt&gt;.&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;Note that these rules above are only suggested by us. These rules
take into account everything we know about this topic and avoid problems with
current and future distributions, as far as we can see them. Please consider
updating your projects to follow these rules, and keep them in mind if you
write new code.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;One thing we'd like to stress is that &lt;tt&gt;/tmp&lt;/tt&gt; and &lt;tt&gt;/var/tmp&lt;/tt&gt;
more often than not are actually not the right choice for your usecase. There
are valid uses of these directories, but quite often another directory might
actually be the better place. So, be careful, consider the other options, but
if you do go for &lt;tt&gt;/tmp&lt;/tt&gt; or &lt;tt&gt;/var/tmp&lt;/tt&gt; then at least make sure to
use &lt;tt&gt;mkstemp()&lt;/tt&gt;/&lt;tt&gt;mkdtemp()&lt;/tt&gt;.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Thank you for your interest!&lt;/p&gt;

&lt;p&gt;Oh, and if you now complain that we don't understand Unix, and that we are
morons and worse, then please read this again, and you might notice that this
is just a best practice guide, not a specification we have written. Nothing that
introduces anything new, just something that explains how things are.&lt;/p&gt;

&lt;p&gt;If you want to complain about the &lt;tt&gt;tmp-on-tmpfs&lt;/tt&gt; or
&lt;tt&gt;ServicesPrivateTmp&lt;/tt&gt; feature, then this is not the right place either,
because this blog post is not really about that. Please direct this to
&lt;tt&gt;fedora-devel&lt;/tt&gt; instead. Thank you very much.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;small&gt;Footnotes&lt;/small&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Well, or to turn this around: unless you have a PhD in advanced
Unixology and are not using &lt;tt&gt;mkstemp()&lt;/tt&gt;/&lt;tt&gt;mkdtemp()&lt;/tt&gt; but use
&lt;tt&gt;/tmp&lt;/tt&gt; nonetheless it's very likely you are writing vulnerable
code.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 28 Mar 2012 14:04:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-03-28:/blog/projects/tmp.html</guid><category>projects</category></item><item><title>/etc/os-release</title><link>https://0pointer.net/blog/projects/os-release.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;One of
the new configuration files systemd introduced is &lt;tt&gt;/etc/os-release&lt;/tt&gt;&lt;/a&gt;.
It replaces the multitude of per-distribution release files&lt;sup&gt;[1]&lt;/sup&gt; with
a single one. Yesterday we &lt;a href="http://lists.freedesktop.org/archives/systemd-devel/2012-February/004475.html"&gt;decided
to drop&lt;/a&gt; support for systems lacking &lt;a href="http://www.freedesktop.org/software/systemd/man/os-release.html"&gt;&lt;tt&gt;/etc/os-release&lt;/tt&gt;&lt;/a&gt;
in systemd since recently the majority of the big distributions adopted
&lt;tt&gt;/etc/os-release&lt;/tt&gt; and many small ones did, too&lt;sup&gt;[2]&lt;/sup&gt;.  It's our
hope that by dropping support for non-compliant distributions we gently put
some pressure on the remaining hold-outs to adopt this scheme as well.&lt;/p&gt;

&lt;p&gt;I'd like to take the opportunity to explain a bit what the new file offers,
why application developers should care, and why the distributions should adopt
it. Of course, this file is pretty much a triviality in many ways,
but I guess it's still one that deserves explanation.&lt;/p&gt;

&lt;p&gt;So, you ask why this all?&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;It relieves application developers who just want to know the
distribution they are running on to check for a multitude of individual release files.&lt;/li&gt;

&lt;li&gt;It provides both a "pretty" name (i.e. one to show to the user), and
machine parsable version/OS identifiers (i.e. for use in build systems).&lt;/li&gt;

&lt;li&gt;It is extensible, can easily learn new fields if needed. For example, since
we want to print a welcome message in the color of your distribution at boot
we make it possible to configure the ANSI color for that in the file.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;FAQs&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;There's already the &lt;tt&gt;lsb_release&lt;/tt&gt; tool for this, why don't you
just use that?&lt;/b&gt; Well, it's a very strange interface: a shell script you have
to invoke (and hence spawn asynchronously from your C code), and it's not
written to be extensible. It's an optional package in many distributions, and
nothing we'd be happy to invoke as part of early boot in order to show a
welcome message. (In times with sub-second userspace boot times we really don't
want to invoke a huge shell script for a triviality like showing the welcome
message). The &lt;tt&gt;lsb_release&lt;/tt&gt; tool to us appears to be an attempt of
abstracting distribution checks, where standardization of distribution checks
is needed. It's simply a badly designed interface. In our opinion, it
has its use as an interface to determine the LSB version itself, but not for
checking the distribution or version.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Why haven't you adopted one of the generic release files, such as
Fedora's &lt;tt&gt;/etc/system-release&lt;/tt&gt;?&lt;/b&gt; Well, they are much nicer than
&lt;tt&gt;lsb_release&lt;/tt&gt;, so much is true. However, they are not extensible and
are not really parsable, if the distribution needs to be identified
programmatically or a specific version needs to be verified.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Why didn't you call this file &lt;tt&gt;/etc/bikeshed&lt;/tt&gt; instead? The name
&lt;tt&gt;/etc/os-release&lt;/tt&gt; sucks!&lt;/b&gt; In a way, I think you kind of answered your
own question there already.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Does this mean my distribution can now drop our equivalent of
&lt;tt&gt;/etc/fedora-release&lt;/tt&gt;?&lt;/b&gt; Unlikely, too much code exists that still
checks for the individual release files, and you probably shouldn't break that.
This new file makes things easy for applications, not for distributions:
applications can now rely on a single file only, and use it in a nice way.
Distributions will have to continue to ship the old files unless they are
willing to break compatibility here.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;This is so useless! My application needs to be compatible with distros
from 1998, so how could I ever make use of the new file? I will have to
continue using the old ones!&lt;/b&gt; True, if you need compatibility with really
old distributions you do. But for new code this might not be an issue, and in
general new APIs are new APIs. So if you decide to depend on it, you add a
dependency on it. However, even if you need to stay compatible it might make
sense to check &lt;tt&gt;/etc/os-release&lt;/tt&gt; first and just fall back to the old
files if it doesn't exist. The least it does for you is that you don't need 25+
&lt;tt&gt;open()&lt;/tt&gt; attempts on modern distributions, but just one.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;You evil people are forcing my beloved distro $XYZ to adopt your awful
systemd schemes. I hate you!&lt;/b&gt; You hate too much, my friend. Also, I am
pretty sure it's not difficult to see the benefit of this new file
independently of systemd, and it's truly useful on systems without systemd,
too.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;I hate what you people do, can I just ignore this?&lt;/b&gt; Well, you really
need to work on your constant feelings of hate, my friend. But, to a certain
degree yes, you can ignore this for a while longer. But already, there are a
number of applications making use of this file.  You lose compatibility with
those. Also, you are kinda working towards the further balkanization of the
Linux landscape, but maybe that's your intention?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;You guys add a new file because you think there are already too many? You
guys are so confused!&lt;/b&gt; None of the existing files is generic and extensible
enough to do what we want it to do. Hence we had to introduce a new one. We
acknowledge the irony, however.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The file is extensible? Awesome! I want a new field XYZ= in it!&lt;/b&gt; Sure,
it's extensible, and we are happy if distributions extend it. Please prefix
your keys with your distribution's name however. Or even better: talk to us and
we might be able update the documentation and make your field standard, if you
convince us that it makes sense.&lt;/p&gt;

&lt;p&gt;Anyway, to summarize all this: if you work on an application that needs to
identify the OS it is being built on or is being run on, please consider making
use of this new file, we created it for you. If you work on a distribution, and
your distribution doesn't support this file yet, please consider adopting this
file, too.&lt;/p&gt;

&lt;p&gt;If you are working on a small/embedded distribution, or a legacy-free
distribution we encourage you to adopt only this file and not establish any
other per-distro release file.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.freedesktop.org/software/systemd/man/os-release.html"&gt;Read the documentation for &lt;tt&gt;/etc/os-release&lt;/tt&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Yes, multitude, there's at least: &lt;tt&gt;/etc/redhat-release&lt;/tt&gt;,
&lt;tt&gt;/etc/SuSE-release&lt;/tt&gt;, &lt;tt&gt;/etc/debian_version&lt;/tt&gt;,
&lt;tt&gt;/etc/arch-release&lt;/tt&gt;, &lt;tt&gt;/etc/gentoo-release&lt;/tt&gt;,
&lt;tt&gt;/etc/slackware-version&lt;/tt&gt;, &lt;tt&gt;/etc/frugalware-release&lt;/tt&gt;,
&lt;tt&gt;/etc/altlinux-release&lt;/tt&gt;, &lt;tt&gt;/etc/mandriva-release&lt;/tt&gt;,
&lt;tt&gt;/etc/meego-release&lt;/tt&gt;, &lt;tt&gt;/etc/angstrom-version&lt;/tt&gt;,
&lt;tt&gt;/etc/mageia-release&lt;/tt&gt;. And some distributions even have multiple, for
example Fedora has already four different files.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] To our knowledge at least OpenSUSE, Fedora, ArchLinux, Angstrom,
Frugalware have adopted this. (This list is not comprehensive, there are
probably more.)&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 13 Feb 2012 19:46:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-02-13:/blog/projects/os-release.html</guid><category>projects</category></item><item><title>The Case for the /usr Merge</title><link>https://0pointer.net/blog/projects/the-usr-merge.html</link><description>
                
&lt;p&gt;One of the features of Fedora 17 is &lt;a href="https://fedoraproject.org/wiki/Features/UsrMove"&gt;the /usr merge&lt;/a&gt;, put
forward by Harald Hoyer and Kay Sievers&lt;sup&gt;[1]&lt;/sup&gt;. In the time since this
feature has been proposed repetitive discussions took place all over the various
Free Software communities, and usually the same questions were asked: what the reasons
behind this feature were, and whether it makes sense to adopt the same scheme for
distribution XYZ, too.&lt;/p&gt;

&lt;p&gt;Especially in the Non-Fedora world it appears to be socially unacceptable to
actually have a look at the &lt;a href="https://fedoraproject.org/wiki/Features/UsrMove"&gt;Fedora feature page&lt;/a&gt;
(where many of the questions are already brought up and answered) which is very unfortunate. To
improve the situation I spent some time today to summarize the reasons for the
/usr merge independently. I'd hence like to direct you to this new page I put
up which tries to summarize the reasons for this, with an emphasis on the
compatibility point of view:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/TheCaseForTheUsrMerge"&gt;The Case for the /usr Merge&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that even though this page is in the systemd wiki, what it covers is
mostly orthogonal to systemd. systemd supports both systems with a merged /usr
and with a split /usr, and the /usr merge should be interesting for non-systemd
distributions as well.&lt;/p&gt;

&lt;p&gt;Primarily I put this together to have a nice place to point all those folks
who continue to write me annoyed emails, even though I am actually not even
working on all of this...&lt;/p&gt;

&lt;p&gt;Enjoy the read!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;small&gt;Footnotes:&lt;/small&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] And not actually by me, I am just a supportive spectator and am
not doing any work on it. Unfortunately some tech press folks created the false
impression I was behind this. But credit where credit is due, this is all
Harald's and Kay's work.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 26 Jan 2012 22:29:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-01-26:/blog/projects/the-usr-merge.html</guid><category>projects</category></item><item><title>Plumbers Wishlist, The Third Edition, a.k.a. "The Thank You Edition"</title><link>https://0pointer.net/blog/projects/plumbers-wishlist-3.html</link><description>
                
&lt;p&gt;Last October &lt;a href="http://0pointer.de/blog/projects/plumbers-wishlist-2.html"&gt;we published a
wishlist for plumbing related features&lt;/a&gt; we'd like to see added to the Linux
kernel. Three months later it's time to publish a short update, and explain
what has been implemented in the kernel, what people have started working on,
and what's still missing.&lt;/p&gt;

&lt;p&gt;The full, updated list is &lt;a href="https://docs.google.com/document/pub?id=1RmJrtIoTnivkmR9KCqfJNBnEll4X9Jtu0xj5w6hFGs8"&gt;available
on Google Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In general, I must say that the list turned out to be a great success. It
shows how awesome the Open Source community is: Just ask nicely and there's a
good chance they'll fulfill your wishes! Thank you very much, Linux
community!&lt;/p&gt;

&lt;p&gt;We'd like to thank everybody who worked on any of the features on that list:
Lucas De Marchi, Andi Kleen, Dan Ballard, Li Zefan, Kirill A. Shutemov,
Davidlohr Bueso, Cong Wang, Lennart Poettering, Kay Sievers.&lt;/p&gt;

&lt;p&gt;Of the items on the list 5 have been fully implemented and are already part
of a released kernel, or already merged for inclusion for the next kernels
being released.&lt;/p&gt;

&lt;p&gt;For 4 further items patches have been posted, and I am hoping they'll get
merged eventually. Davidlohr, Wang, Zefan, Kirill, it would be great if you'd
continue working on your patches, as we think they are following the right
approach&lt;sup&gt;[1]&lt;/sup&gt; even if there was some opposition to them on LKML. So,
please keep pushing to solve the outstanding issues and thanks for your work so far!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;small&gt;Footnotes&lt;/small&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Yes, I still believe that tmpfs quota should be implemented via
resource limits, as everything else wouldn't work, as we don't want to
implement complex and fragile userspace infrastructure to racily upload complex
quota data for all current and future UIDs ever used on the system into each
tmpfs mount point at mount time.&lt;/small&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 20 Jan 2012 21:26:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-01-20:/blog/projects/plumbers-wishlist-3.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part XII</title><link>https://0pointer.net/blog/projects/security.html</link><description>
                
&lt;p&gt;Here's &lt;a href="http://0pointer.de/blog/projects/inetd.html"&gt;the&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;twelfth&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;

&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;Securing Your Services&lt;/h4&gt;

&lt;p&gt;One of the core features of Unix systems is the idea of privilege separation
between the different components of the OS. Many system services run under
their own user IDs thus limiting what they can do, and hence the impact they
may have on the OS in case they get exploited.&lt;/p&gt;

&lt;p&gt;This kind of privilege separation only provides very basic protection
however, since in general system services run this way can still do at least as
much as a normal local users, though not as much as root. For security purposes
it is however very interesting to limit even further what services can do, and
shut them off a couple of things that normal users are allowed to do.&lt;/p&gt;

&lt;p&gt;A great way to limit the impact of services is by employing MAC technologies
such as SELinux. If you are interested to secure down your server, running
SELinux is a very good idea. systemd enables developers and administrators to
apply additional restrictions to local services independently of a MAC. Thus,
regardless whether you are able to make use of SELinux you may still enforce
certain security limits on your services.&lt;/p&gt;

&lt;p&gt;In this iteration of the series we want to focus on a couple of these
security features of systemd and how to make use of them in your services.
These features take advantage of a couple of Linux-specific technologies that have
been available in the kernel for a long time, but never have been exposed in a
widely usable fashion. These systemd features have been designed to be as easy to use
as possible, in order to make them attractive to administrators and upstream
developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Isolating services from the network&lt;/li&gt;
&lt;li&gt;Service-private &lt;tt&gt;/tmp&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Making directories appear read-only or inaccessible to services&lt;/li&gt;
&lt;li&gt;Taking away capabilities from services&lt;/li&gt;
&lt;li&gt;Disallowing forking, limiting file creation for services&lt;/li&gt;
&lt;li&gt;Controlling device node access of services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All options described here are documented in systemd's man pages, notably &lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;systemd.exec(5)&lt;/a&gt;.
Please consult these man pages for further details.&lt;/p&gt;

&lt;p&gt;All these options are available on all systemd systems, regardless if
SELinux or any other MAC is enabled, or not.&lt;/p&gt;

&lt;p&gt;All these options are relatively cheap, so if in doubt use them. Even if you
might think that your service doesn't write to &lt;tt&gt;/tmp&lt;/tt&gt; and hence enabling
&lt;tt&gt;PrivateTmp=yes&lt;/tt&gt; (as described below) might not be necessary, due to
today's complex software it's still beneficial to enable this feature, simply
because libraries you link to (and plug-ins to those libraries) which you do
not control might need temporary files after all. Example: you never know what
kind of NSS module your local installation has enabled, and what that NSS module
does with &lt;tt&gt;/tmp&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;These options are hopefully interesting both for administrators to secure
their local systems, and for upstream developers to ship their services secure
by default.  We strongly encourage upstream developers to consider using these
options by default in their upstream service units. They are very easy to make
use of and have major benefits for security.&lt;/p&gt;

&lt;h4&gt;Isolating Services from the Network&lt;/h4&gt;

&lt;p&gt;A very simple but powerful configuration option you may use in systemd
service definitions is &lt;tt&gt;PrivateNetwork=&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;...
[Service]
ExecStart=...
PrivateNetwork=yes
...&lt;/pre&gt;

&lt;p&gt;With this simple switch a service and all the processes it consists of are
entirely disconnected from any kind of networking. Network interfaces became
unavailable to the processes, the only one they'll see is the loopback device
"lo", but it is isolated from the real host loopback. This is a very powerful
protection from network attacks.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Caveat:&lt;/b&gt; Some services require the network to be operational. Of
course, nobody would consider using &lt;tt&gt;PrivateNetwork=yes&lt;/tt&gt; on a
network-facing service such as Apache. However even for non-network-facing
services network support might be necessary and not always obvious. Example: if
the local system is configured for an LDAP-based user database doing glibc name
lookups with calls such as &lt;tt&gt;getpwnam()&lt;/tt&gt; might end up resulting in network access.
That said, even in those cases it is more often than not OK to use
&lt;tt&gt;PrivateNetwork=yes&lt;/tt&gt; since user IDs of system service users are required to
be resolvable even without any network around. That means as long as the only
user IDs your service needs to resolve are below the magic 1000 boundary using
&lt;tt&gt;PrivateNetwork=yes&lt;/tt&gt; should be OK.&lt;/p&gt;

&lt;p&gt;Internally, this feature makes use of network namespaces of the kernel. If
enabled a new network namespace is opened and only the loopback device
configured in it.&lt;/p&gt;

&lt;h4&gt;Service-Private /tmp&lt;/h4&gt;

&lt;p&gt;Another very simple but powerful configuration switch is
&lt;tt&gt;PrivateTmp=&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;...
[Service]
ExecStart=...
PrivateTmp=yes
...&lt;/pre&gt;

&lt;p&gt;If enabled this option will ensure that the &lt;tt&gt;/tmp&lt;/tt&gt; directory the
service will see is private and isolated from the host system's &lt;tt&gt;/tmp&lt;/tt&gt;.
&lt;tt&gt;/tmp&lt;/tt&gt; traditionally has been a shared space for all local services and
users. Over the years it has been a major source of security problems for a
multitude of services. Symlink attacks and DoS vulnerabilities due to guessable
&lt;tt&gt;/tmp&lt;/tt&gt; temporary files are common. By isolating the service's
&lt;tt&gt;/tmp&lt;/tt&gt; from the rest of the host, such vulnerabilities become moot.&lt;/p&gt;

&lt;p&gt;For Fedora 17 a &lt;a href="https://fedoraproject.org/wiki/Features/ServicesPrivateTmp"&gt;feature has
been accepted&lt;/a&gt; in order to enable this option across a large number of
services.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Caveat:&lt;/b&gt; Some services actually misuse &lt;tt&gt;/tmp&lt;/tt&gt; as a location
for IPC sockets and other communication primitives, even though this is almost
always a vulnerability (simply because if you use it for communication you need
guessable names, and guessable names make your code vulnerable to DoS and symlink
attacks) and &lt;tt&gt;/run&lt;/tt&gt; is the much safer replacement for this, simply
because it is not a location writable to unprivileged processes. For example,
X11 places it's communication sockets below &lt;tt&gt;/tmp&lt;/tt&gt; (which is actually
secure -- though still not ideal -- in this exception since it does so in a
safe subdirectory which is created at early boot.) Services which need to
communicate via such communication primitives in &lt;tt&gt;/tmp&lt;/tt&gt; are no
candidates for &lt;tt&gt;PrivateTmp=&lt;/tt&gt;. Thankfully these days only very few
services misusing &lt;tt&gt;/tmp&lt;/tt&gt; like this remain.&lt;/p&gt;

&lt;p&gt;Internally, this feature makes use of file system namespaces of the kernel.
If enabled a new file system namespace is opened inheritng most of the host
hierarchy with the exception of &lt;tt&gt;/tmp&lt;/tt&gt;.&lt;/p&gt;

&lt;h4&gt;Making Directories Appear Read-Only or Inaccessible to Services&lt;/h4&gt;

&lt;p&gt;With the &lt;tt&gt;ReadOnlyDirectories=&lt;/tt&gt; and &lt;tt&gt;InaccessibleDirectories=&lt;/tt&gt;
options it is possible to make the specified directories inaccessible for
writing resp. both reading and writing to the service:&lt;/p&gt;

&lt;pre&gt;...
[Service]
ExecStart=...
InaccessibleDirectories=/home
ReadOnlyDirectories=/var
...
&lt;/pre&gt;

&lt;p&gt;With these two configuration lines the whole tree below &lt;tt&gt;/home&lt;/tt&gt;
becomes inaccessible to the service (i.e. the directory will appear empty and
with 000 access mode), and the tree below &lt;tt&gt;/var&lt;/tt&gt; becomes read-only.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Caveat:&lt;/b&gt; Note that &lt;tt&gt;ReadOnlyDirectories=&lt;/tt&gt; currently is not
recursively applied to submounts of the specified directories (i.e. mounts below
&lt;tt&gt;/var&lt;/tt&gt; in the example above stay writable). This is likely to get fixed
soon.&lt;/p&gt;

&lt;p&gt;Internally, this is also implemented based on file system namspaces.&lt;/p&gt;

&lt;h4&gt;Taking Away Capabilities From Services&lt;/h4&gt;

&lt;p&gt;Another very powerful security option in systemd is
&lt;tt&gt;CapabilityBoundingSet=&lt;/tt&gt; which allows to limit in a relatively fine
grained fashion which kernel capabilities a service started retains:&lt;/p&gt;

&lt;pre&gt;...
[Service]
ExecStart=...
CapabilityBoundingSet=CAP_CHOWN CAP_KILL
...
&lt;/pre&gt;

&lt;p&gt;In the example above only the CAP_CHOWN and CAP_KILL capabilities are
retained by the service, and the service and any processes it might create have
no chance to ever acquire any other capabilities again, not even via setuid
binaries. The list of currently defined capabilities is available in &lt;a href="http://linux.die.net/man/7/capabilities"&gt;capabilities(7)&lt;/a&gt;.
Unfortunately some of the defined capabilities are overly generic (such as
CAP_SYS_ADMIN), however they are still a very useful tool, in particular for
services that otherwise run with full root privileges.&lt;/p&gt;

&lt;p&gt;To identify precisely which capabilities are necessary for a service to run
cleanly is not always easy and requires a bit of testing. To simplify this
process a bit, it is possible to blacklist certain capabilities that are
definitely not needed instead of whitelisting all that might be needed. Example: the
CAP_SYS_PTRACE is a particularly powerful and security relevant capability
needed for the implementation of debuggers, since it allows introspecting and
manipulating any local process on the system. A service like Apache obviously
has no business in being a debugger for other processes, hence it is safe to
remove the capability from it:&lt;/p&gt;

&lt;pre&gt;...
[Service]
ExecStart=...
CapabilityBoundingSet=~CAP_SYS_PTRACE
...&lt;/pre&gt;

&lt;p&gt;The &lt;tt&gt;~&lt;/tt&gt; character the value assignment here is prefixed with inverts
the meaning of the option: instead of listing all capabalities the service
will retain you may list the ones it will not retain.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Caveat:&lt;/b&gt; Some services might react confused if certain capabilities are
made unavailable to them. Thus when determining the right set of capabilities
to keep around you need to do this carefully, and it might be a good idea to talk
to the upstream maintainers since they should know best which operations a
service might need to run successfully.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Caveat 2:&lt;/b&gt; &lt;a href="https://forums.grsecurity.net/viewtopic.php?f=7&amp;amp;t=2522"&gt;Capabilities are
not a magic wand.&lt;/a&gt; You probably want to combine them and use them in
conjunction with other security options in order to make them truly useful.&lt;/p&gt;

&lt;p&gt;To easily check which processes on your system retain which capabilities use
the &lt;tt&gt;pscap&lt;/tt&gt; tool from the &lt;tt&gt;libcap-ng-utils&lt;/tt&gt; package.&lt;/p&gt;

&lt;p&gt;Making use of systemd's &lt;tt&gt;CapabilityBoundingSet=&lt;/tt&gt; option is often a
simple, discoverable and cheap replacement for patching all system daemons
individually to control the capability bounding set on their own.&lt;/p&gt;

&lt;h4&gt;Disallowing Forking, Limiting File Creation for Services&lt;/h4&gt;

&lt;p&gt;Resource Limits may be used to apply certain security limits on services
being run. Primarily, resource limits are useful for resource control (as the
name suggests...) not so much access control. However, two of them can be
useful to disable certain OS features: RLIMIT_NPROC and RLIMIT_FSIZE may be
used to disable forking and disable writing of any files with a size &gt;
0:&lt;/p&gt;

&lt;pre&gt;...
[Service]
ExecStart=...
LimitNPROC=1
LimitFSIZE=0
...&lt;/pre&gt;

&lt;p&gt;Note that this will work only if the service in question drops privileges
and runs under a (non-root) user ID of its own or drops the CAP_SYS_RESOURCE
capability, for example via &lt;tt&gt;CapabilityBoundingSet=&lt;/tt&gt; as discussed above.
Without that a process could simply increase the resource limit again thus
voiding any effect.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Caveat:&lt;/b&gt; &lt;tt&gt;LimitFSIZE=&lt;/tt&gt; is pretty brutal. If the service
attempts to write a file with a size &gt; 0, it will immeidately be killed with
the SIGXFSZ which unless caught terminates the process. Also, creating files
with size 0 is still allowed, even if this option is used.&lt;/p&gt;

&lt;p&gt;For more information on these and other resource limits, see &lt;a href="http://linux.die.net/man/2/setrlimit"&gt;setrlimit(2)&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Controlling Device Node Access of Services&lt;/h4&gt;

&lt;p&gt;Devices nodes are an important interface to the kernel and its drivers.
Since drivers tend to get much less testing and security checking than the core
kernel they often are a major entry point for security hacks. systemd allows
you to control access to devices individually for each service:&lt;/p&gt;

&lt;pre&gt;...
[Service]
ExecStart=...
DeviceAllow=/dev/null rw
...&lt;/pre&gt;

&lt;p&gt;This will limit access to &lt;tt&gt;/dev/null&lt;/tt&gt; and only this device node,
disallowing access to any other device nodes.&lt;/p&gt;

&lt;p&gt;The feature is implemented on top of the &lt;tt&gt;devices&lt;/tt&gt; cgroup controller.&lt;/p&gt;

&lt;h4&gt;Other Options&lt;/h4&gt;

&lt;p&gt;Besides the easy to use options above there are a number of other security
relevant options available. However they usually require a bit of preparation
in the service itself and hence are probably primarily useful for upstream
developers. These options are &lt;tt&gt;RootDirectory=&lt;/tt&gt; (to set up
&lt;tt&gt;chroot()&lt;/tt&gt; environments for a service) as well as &lt;tt&gt;User=&lt;/tt&gt; and
&lt;tt&gt;Group=&lt;/tt&gt; to drop privileges to the specified user and group. These
options are particularly useful to greatly simplify writing daemons, where all
the complexities of securely dropping privileges can be left to systemd, and
kept out of the daemons themselves.&lt;/p&gt;

&lt;p&gt;If you are wondering why these options are not enabled by default: some of
them simply break seamntics of traditional Unix, and to maintain compatibility
we cannot enable them by default. e.g. since traditional Unix enforced that
&lt;tt&gt;/tmp&lt;/tt&gt; was a shared namespace, and processes could use it for IPC we
cannot just go and turn that off globally, just because &lt;tt&gt;/tmp&lt;/tt&gt;'s role in
IPC is now replaced by &lt;tt&gt;/run&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;And that's it for now. If you are working on unit files for upstream or in
your distribution, please consider using one or more of the options listed
above. If you service is secure by default by taking advantage of these options
this will help not only your users but also make the Internet a safer
place.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 20 Jan 2012 02:26:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-01-20:/blog/projects/security.html</guid><category>projects</category></item><item><title>PulseAudio vs. AudioFlinger</title><link>https://0pointer.net/blog/projects/aruns-numbers.html</link><description>
                
&lt;p&gt;&lt;a href="http://arunraghavan.net/2012/01/pulseaudio-vs-audioflinger-fight/"&gt;Arun
put an awesome article up&lt;/a&gt;, detailing how PulseAudio compares to Android's
AudioFlinger in terms of power consumption and suchlike. Suffice to say,
PulseAudio rocks, but go and read the whole thing, it's worth it.&lt;/p&gt;

&lt;p&gt;Apparently, AudioFlinger is a great choice if you want to shorten your
battery life.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 16 Jan 2012 16:31:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2012-01-16:/blog/projects/aruns-numbers.html</guid><category>projects</category></item><item><title>Introducing the Journal</title><link>https://0pointer.net/blog/projects/the-journal.html</link><description>
                
&lt;p&gt;In the past weeks we have been working on a major new addition to systemd
that will hopefully positively change the Linux ecosystem in a number of ways.
But see for yourself, check out the full explanation on what we have
implemented on the &lt;a href="https://docs.google.com/document/pub?id=1IC9yOXj7j6cdLLxWEBAGRL6wl97tFxgjLUEHIX3MSTs"&gt;design
document we put up on Google Docs&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 18 Nov 2011 16:28:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-11-18:/blog/projects/the-journal.html</guid><category>projects</category></item><item><title>Kernel Hackers Panel</title><link>https://0pointer.net/blog/projects/linuxcon-kernel-panel.html</link><description>
                
&lt;p&gt;At LinuxCon Europe/ELCE I had the chance to moderate the &lt;a href="https://events.linuxfoundation.org/events/linuxcon-europe/kernel-panel"&gt;kernel hackers
panel with Linus Torvalds, Alan Cox, Paul McKenney and Thomas Gleixner on
stage&lt;/a&gt;. I like to believe it went quite well, but check it out for yourself, as
a video recording is now available online:&lt;/p&gt;

&lt;video width="800" height="450" controls="1"&gt;
  &lt;source src="http://free-electrons.com/pub/video/2011/elce/elce-2011-torvalds-cox-gleixner-mackenney-kernel-developer-panel-450p.webm" /&gt;
&lt;/video&gt;

&lt;p&gt;For me personally I think the most notable topic covered was Control Groups,
and the clarification that they are something that is needed even though their
implementation right now is in many ways less than perfect. But in the end there is no
reasonable way around it, and much like SMP, technology that complicates things
substantially but is ultimately unavoidable.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://free-electrons.com/blog/elce-2011-videos/"&gt;Other videos from ELCE are online now, too.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 07 Nov 2011 16:53:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-11-07:/blog/projects/linuxcon-kernel-panel.html</guid><category>projects</category></item><item><title>libabc</title><link>https://0pointer.net/blog/projects/libabc.html</link><description>
                
&lt;p&gt;At the Kernel Summit in Prague last week Kay Sievers and I lead a session on
developing shared userspace libraries, for kernel hackers. More and more
userspace interfaces of the kernel (for example many which deal with storage,
audio, resource management, security, file systems or a number of other
subsystems) nowadays rely on a dedicated userspace component. As people who
work primarily in the plumbing layer of the Linux OS we noticed over and over
again that these libraries written by people who usually are at home on the
kernel side of things make the same mistakes repeatedly, thus making life for
the users of the libraries unnecessarily difficult. In our session we tried to
point out a number of these things, and in particular places where the usual
kernel hacking style translates badly into userspace shared library hacking.
Our hope is that maybe a few kernel developers have a look at our list of
recommendations and consider the points we are raising.&lt;/p&gt;

&lt;p&gt;To make things easy we have put together an example skeleton library we
dubbed &lt;tt&gt;libabc&lt;/tt&gt;, whose &lt;a href="https://git.kernel.org/?p=linux/kernel/git/kay/libabc.git;a=blob_plain;f=README"&gt;README&lt;/a&gt;
file includes all our points in terse form. It's available on kernel.org:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://git.kernel.org/?p=linux/kernel/git/kay/libabc.git"&gt;The git repository&lt;/a&gt; and the &lt;a href="https://git.kernel.org/?p=linux/kernel/git/kay/libabc.git;a=blob_plain;f=README"&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This list of recommendations draws inspiration from David Zeuthen's and
Ulrich Drepper's well known papers on the topic of writing shared libraries. In
the README linked above we try to distill this wealth of information into a
terse list of recommendations, with a couple of additions and with a strict
focus on a kernel hacker background.&lt;/p&gt;

&lt;p&gt;Please have a look, and even if you are not a kernel hacker there might be
something useful to know in it, especially if you work on the lower layers of
our stack.&lt;/p&gt;

&lt;p&gt;If you have any questions or additions, just ping us, or comment below!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 01 Nov 2011 01:46:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-11-01:/blog/projects/libabc.html</guid><category>projects</category></item><item><title>Prague</title><link>https://0pointer.net/blog/projects/linuxcon-europe.html</link><description>
                
&lt;p&gt;If you make it to Prague the coming week for the LinuxCon/ELCE/GStreamer/Kernel Summit/... superconference, make sure not to miss:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;The Linux Audio BoF with numerous Linux audio hackers, 5pm, on Sunday (23rd, i.e. today).&lt;/li&gt;

&lt;li&gt;&lt;a href="http://gstreamer.freedesktop.org/conference/speakers.html#raghavan"&gt;Latest
developments in PulseAudio&lt;/a&gt; by Arun Raghavan. 4pm, on Tuesday, GStreamer
Summit&lt;/li&gt;

&lt;li&gt;&lt;a href="https://events.linuxfoundation.org/events/linuxcon-europe/kernel-panel"&gt;Linux
Kernel Developer Panel&lt;/a&gt;, a shared session of LinuxCon and ELCE. Panelists
are Linus Torvalds, Alan Cox, Thomas Gleixner and Paul McKenney. Moderated by
yours truly. 9:30am, on Wednesday&lt;/li&gt;

&lt;li&gt;&lt;a href="https://events.linuxfoundation.org/events/linuxcon-europe/poettering-sievers"&gt;systemd
Administration in the Enterprise&lt;/a&gt; by Kay Sievers and yours truly. 4:15pm, on
Wednesday, LinuxCon&lt;/li&gt;

&lt;li&gt;&lt;a href="https://events.linuxfoundation.org/events/embedded-linux-conference-europe/kooi"&gt;Integrating
systemd: Booting Userspace in Less Than 1 Second&lt;/a&gt; by Koen Kooi. 11:15am, on
Friday, ELCE&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;All of that at the Clarion Hotel. See you in Prague!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 23 Oct 2011 01:31:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-10-23:/blog/projects/linuxcon-europe.html</guid><category>projects</category></item><item><title>Plumbers Wishlist, The Second Edition</title><link>https://0pointer.net/blog/projects/plumbers-wishlist-2.html</link><description>
                
&lt;p&gt;Two weeks ago we published a &lt;a href="http://0pointer.de/blog/projects/plumbers-wishlist.html"&gt;Plumber's
Wishlist for Linux&lt;/a&gt;. So far, this has already created lively discussions in
the community (as reported on LWN among others), and patches for a few of the
items listed have already been posted (thanks a lot to those who worked on
this, your contributions are much appreciated!).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.google.com/document/pub?id=1RmJrtIoTnivkmR9KCqfJNBnEll4X9Jtu0xj5w6hFGs8"&gt;We
have now prepared a second version of the wish list.&lt;/a&gt; It includes a number
of additions (tmpfs quota! hostname change notifications! and more!) and
updates to the previous items, including links to patches, and references to
other interesting material.&lt;/p&gt;

&lt;p&gt;We hope to update this wishlist from time, so stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.google.com/document/pub?id=1RmJrtIoTnivkmR9KCqfJNBnEll4X9Jtu0xj5w6hFGs8"&gt;And now, go and read the new wishlist!&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 20 Oct 2011 20:41:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-10-20:/blog/projects/plumbers-wishlist-2.html</guid><category>projects</category></item><item><title>Google doesn't like my name</title><link>https://0pointer.net/blog/projects/google-doesnt-like-my-name.html</link><description>
                
&lt;p&gt;Nice one, Google suspended my Google+ account because I created it under,
well, my name, which is "Lennart Poettering", and Google+ thinks that wasn't my
name, even though it says so in my passport, and almost every document I own
and I was never aware I had any other name. This is ricidulous. Google, give me
my name back! This is a really uncool move.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 17 Oct 2011 18:50:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-10-17:/blog/projects/google-doesnt-like-my-name.html</guid><category>projects</category></item><item><title>Your Questions for the Kernel Developer Panel at LinuxCon in Prague</title><link>https://0pointer.net/blog/projects/kernel-hacker-panel.html</link><description>
                #nocomments yes

&lt;p&gt;&lt;a href="https://plus.google.com/115547683951727699051/posts/SuTUvbcJ6p9"&gt;I
am currently collecting&lt;/a&gt; questions for the &lt;a href="https://events.linuxfoundation.org/events/linuxcon-europe/kernel-panel"&gt;kernel
developer panel at LinuxCon in Prague&lt;/a&gt;. If there's something you'd like the
panelists to respond to, please post it on &lt;a href="https://plus.google.com/115547683951727699051/posts/SuTUvbcJ6p9"&gt;the
thread&lt;/a&gt;, and I'll see what I can do. Thank you!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 17 Oct 2011 15:38:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-10-17:/blog/projects/kernel-hacker-panel.html</guid><category>projects</category></item><item><title>A Big Loss</title><link>https://0pointer.net/blog/projects/a-big-loss.html</link><description>
                
&lt;p&gt;&lt;a href="http://googleblog.blogspot.com/2011/10/fall-sweep.html"&gt;Google
announced today that they'll be shutting down Google Code Search in
January&lt;/a&gt;. I am quite sure that this would be a massive loss for the Free
Software community.  The ability to learn from other people's code is a key
idea of Free Software.  There's simply no better way to do that than with a
source code search engine.  The day Google Code Search will be shut down will
be a sad day for the Free Software community.&lt;/p&gt;

&lt;p&gt;Of course, there are a couple of alternatives around, but they all have one
thing in common: they, uh, don't even remotely compare to the completeness,
performance and simplicity of the Google Code Search interface, and have
serious usability issues. (For example: koders.com is really really slow, and
splits up identifiers you search for at underscores, which kinda makes it
useless for looking for almost any kind of code.)&lt;/p&gt;

&lt;p&gt;I think it must be of genuine interest to the Free Software community to
have a capable replacement for Google Code Search, for the day it is turned
off. In fact, it probably should be something the various foundations which
promote Free Software should be looking into, like the FSF or the Linux
Foundation. There are very few better ways to get Free Software into the heads
and minds of engineers than by examples -- examples consisting of real life
code they can find with a source code search engine. I believe a source code
search engine is probably among the best vehicles to promote Free Software
towards engineers. In particular if it itself was Free Software (in contrast to
Google Code Search).&lt;/p&gt;

&lt;p&gt;Ideally, all software available on web sites like SourceForge, Freshmeat, or
github should be indexed. But there's also a chance for distributions here:
indexing the sources of all packages a distribution like Debian or Fedora
include would be a great tool for developers. In fact, a distribution offering
this functionality might benefit from such functionality, as it attracts
developer interest in the distribution.&lt;/p&gt;

&lt;p&gt;It's sad that Google Code Search will be gone soon. But maybe there's
something positive in the bad news here, and a chance to create something better,
more comprehensive, that is free, and promotes our ideals better than Google
ever could. Maybe there's a chance here for the Open Source foundations, for
the distributions and for the communities to create a better replacement!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 14 Oct 2011 23:05:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-10-14:/blog/projects/a-big-loss.html</guid><category>projects</category></item><item><title>Dresden, California, Poznan</title><link>https://0pointer.net/blog/photos/california.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/dresden.html"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/dresden-small.jpeg" width="1024" height="291" alt="Hofkirche, Dresden, Saxony, Germany" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Hofkirche, Dresden, Saxony, Germany&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/bastei.html"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/bastei-small.jpeg" width="1024" height="260" alt="Bastei, Saxon Switzerland, Saxony, Germany" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Bastei, Saxon Switzerland, Saxony, Germany&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/dresden2.html"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/dresden2-small.jpeg" width="1024" height="370" alt="F√ºrstenzug, Dresden, Saxony, Germany" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;F&amp;uuml;rstenzug, Dresden, Saxony, Germany&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/california.html"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/california-small.jpeg" width="1024" height="120" alt="Near California State Route 46, California, USA" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Near California State Route 46, California, USA&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/california2.html"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/california2-small.jpeg" width="1024" height="122" alt="Near Generals Highway, California, USA" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Near Generals Highway, California, USA&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/california3.html"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/california3-small.jpeg" width="1024" height="230" alt="Near Generals Highway, California, USA" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Near Generals Highway, California, USA&lt;/i&gt;, a bit further down the road.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/poznan.html"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/poznan-small.jpeg" width="1024" height="183" alt="Parish Church in Poznan, Poland" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Parish Church in Poznan, Poland&lt;/i&gt;&lt;/p&gt;



        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 09 Oct 2011 21:32:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-10-09:/blog/photos/california.html</guid><category>photos</category></item><item><title>A Plumber's Wish List for Linux</title><link>https://0pointer.net/blog/projects/plumbers-wishlist.html</link><description>
                
&lt;p&gt;Here's a &lt;a href="http://thread.gmane.org/gmane.linux.kernel/1200272"&gt;mail
we just sent to LKML&lt;/a&gt;, for your consideration. Enjoy:&lt;/p&gt;

&lt;pre&gt;&lt;b&gt;Subject: A Plumber‚Äôs Wish List for Linux&lt;/b&gt;

We‚Äôd like to share our current wish list of plumbing layer features we
are hoping to see implemented in the near future in the Linux kernel and
associated tools. Some items we can implement on our own, others are not
our area of expertise, and we will need help getting them implemented.

Acknowledging that this wish list of ours only gets longer and not
shorter, even though we have implemented a number of other features on
our own in the previous years, we are posting this list here, in the
hope to find some help.

If you happen to be interested in working on something from this list or
able to help out, we‚Äôd be delighted. Please ping us in case you need
clarifications or more information on specific items.

Thanks,
Kay, Lennart, Harald, in the name of all the other plumbers


An here‚Äôs the wish list, in no particular order:

* (ioctl based?) interface to query and modify the label of a mounted
FAT volume:
A FAT labels is implemented as a hidden directory entry in the file
system which need to be renamed when changing the file system label,
this is impossible to do from userspace without unmounting. Hence we‚Äôd
like to see a kernel interface that is available on the mounted file
system mount point itself. Of course, bonus points if this new interface
can be implemented for other file systems as well, and also covers fs
UUIDs in addition to labels.

* CPU modaliases in /sys/devices/system/cpu/cpuX/modalias:
useful to allow module auto-loading of e.g. cpufreq drivers and KVM
modules. Andy Kleen has a patch to create the alias file itself. CPU
‚Äòstruct sysdev‚Äô needs to be converted to ‚Äòstruct device‚Äô and a ‚Äòstruct
bus_type cpu‚Äô needs to be introduced to allow proper CPU coldplug event
replay at bootup. This is one of the last remaining places where
automatic hardware-triggered module auto-loading is not available. And
we‚Äôd like to see that fix to make numerous ugly userspace work-arounds
to achieve the same go away.

* expose CAP_LAST_CAP somehow in the running kernel at runtime:
Userspace needs to know the highest valid capability of the running
kernel, which right now cannot reliably be retrieved from header files
only. The fact that this value cannot be detected properly right now
creates various problems for libraries compiled on newer header files
which are run on older kernels. They assume capabilities are available
which actually aren‚Äôt. Specifically, libcap-ng claims that all running
processes retain the higher capabilities in this case due to the
‚Äúinverted‚Äù semantics of CapBnd in /proc/$PID/status.

* export ‚Äòstruct device_type fb/fbcon‚Äô of ‚Äòstruct class graphics‚Äô
Userspace wants to easily distinguish ‚Äòfb‚Äô and ‚Äòfbcon‚Äô from each other
without the need to match on the device name.

* allow changing argv[] of a process without mucking with environ[]:
Something like setproctitle() or a prctl() would be ideal. Of course it
is questionable if services like sendmail make use of this, but otoh for
services which fork but do not immediately exec() another binary being
able to rename this child processes in ps is of importance.

* module-init-tools: provide a proper libmodprobe.so from
module-init-tools:
Early boot tools, installers, driver install disks want to access
information about available modules to optimize bootup handling.

* fork throttling mechanism as basic cgroup functionality that is
available in all hierarchies independent of the controllers used:
This is important to implement race-free killing of all members of a
cgroup, so that cgroup member processes cannot fork faster then a cgroup
supervisor process could kill them. This needs to be recursive, so that
not only a cgroup but all its subgroups are covered as well.

* proper cgroup-is-empty notification interface:
The current call_usermodehelper() interface is an unefficient and an
ugly hack. Tools would prefer anything more lightweight like a netlink,
poll() or fanotify interface.

* allow user xattrs to be set on files in the cgroupfs (and maybe
procfs?)

* simple, reliable and future-proof way to detect whether a specific pid
is running in a CLONE_NEWPID container, i.e. not in the root PID
namespace. Currently, there are available a few ugly hacks to detect
this (for example a process wanting to know whether it is running in a
PID namespace could just look for a PID 2 being around and named
kthreadd which is a kernel thread only visible in the root namespace),
however all these solutions encode information and expectations that
better shouldn‚Äôt be encoded in a namespace test like this. This
functionality is needed in particular since the removal of the the ns
cgroup controller which provided the namespace membership information to
user code.

* allow making use of the ‚Äúcpu‚Äù cgroup controller by default without
breaking RT. Right now creating a cgroup in the ‚Äúcpu‚Äù hierarchy that
shall be able to take advantage of RT is impossible for the generic case
since it needs an RT budget configured which is from a limited resource
pool. What we want is the ability to create cgroups in ‚Äúcpu‚Äù whose
processes get an non-RT weight applied, but for RT take advantage of the
parent‚Äôs RT budget. We want the separation of RT and non-RT budget
assignment in the ‚Äúcpu‚Äù hierarchy, because right now, you lose RT
functionality in it unless you assign an RT budget. This issue severely
limits the usefulness of ‚Äúcpu‚Äù hierarchy on general purpose systems
right now.

* Add a timerslack cgroup controller, to allow increasing the timer
slack of user session cgroups when the machine is idle.

* An auxiliary meta data message for AF_UNIX called SCM_CGROUPS (or
something like that), i.e. a way to attach sender cgroup membership to
messages sent via AF_UNIX. This is useful in case services such as
syslog shall be shared among various containers (or service cgroups),
and the syslog implementation needs to be able to distinguish the
sending cgroup in order to separate the logs on disk. Of course stm
SCM_CREDENTIALS can be used to look up the PID of the sender followed by
a check in /proc/$PID/cgroup, but that is necessarily racy, and actually
a very real race in real life.

* SCM_COMM, with a similar use case as SCM_CGROUPS. This auxiliary
control message should carry the process name as available
in /proc/$PID/comm.&lt;/pre&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 07 Oct 2011 01:22:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-10-07:/blog/projects/plumbers-wishlist.html</guid><category>projects</category></item><item><title>What You Need to Know When Becoming a Free Software Hacker</title><link>https://0pointer.net/blog/projects/hinter-den-kulissen.html</link><description>
                
&lt;p&gt;Earlier today I gave a presentation at the Technical University Berlin about
things you need to know, things you should expect and things you shouldn't
expect when your are aspiring to become a successful Free Software Hacker.&lt;/p&gt;

&lt;p&gt;I have put my slides up on Google Docs in case you are interested, either
because you are the target audience (i.e. a university student) or because you
need inspiration for a similar talk about the same topic.&lt;/p&gt;

&lt;p&gt;The first two slides are in German language, so skip over them. The
interesting bits are all in English. I hope it's quite comprehensive (though of
course terse). Enjoy:&lt;/p&gt;

&lt;iframe src="https://docs.google.com/present/embed?id=dd4d9j2z_1r8fjkqc7" frameborder="0" width="410" height="342"&gt;&lt;/iframe&gt;

&lt;p&gt;In case your feed reader/planet messes this up, &lt;a href="https://docs.google.com/present/view?id=dd4d9j2z_1r8fjkqc7"&gt;here's the non-embedded version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh, and thanks to everybody who &lt;a href="https://plus.google.com/115547683951727699051/posts/UqNgFiV3qTx"&gt;reviewed and suggested additions to the the slides on +&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 06 Oct 2011 22:05:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-10-06:/blog/projects/hinter-den-kulissen.html</guid><category>projects</category></item><item><title>PulseAudio 1.0</title><link>https://0pointer.net/blog/projects/pa-one-dot-zero.html</link><description>
                #nocomments y

&lt;p&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/PulseAudio/Notes/1.0"&gt;PulseAudio 1.0 is out now.&lt;/a&gt; It's awesome. Get it while it is hot!&lt;/p&gt;

&lt;p&gt;I'd like to thank Colin Guthrie and Arun Raghavan (and all the others involved) for getting this release out of the door!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 27 Sep 2011 16:07:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-09-27:/blog/projects/pa-one-dot-zero.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part XI</title><link>https://0pointer.net/blog/projects/inetd.html</link><description>
                
&lt;p&gt;Here's the &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;eleventh&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;Converting inetd Services&lt;/h4&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;In a
previous episode of this series&lt;/a&gt; I covered how to convert a SysV
init script to a systemd unit file. In this story I hope to explain
how to convert inetd services into systemd units.&lt;/p&gt;

&lt;p&gt;Let's start with a bit of background. inetd has a long tradition as
one of the classic Unix services. As a superserver it listens on
an Internet socket on behalf of another service and then activate that
service on an incoming connection, thus implementing an on-demand
socket activation system. This allowed Unix machines with limited
resources to provide a large variety of services, without the need to
run processes and invest resources for all of them all of the
time. Over the years a number of independent implementations of inetd
have been shipped on Linux distributions. The most prominent being the
ones based on BSD inetd and xinetd. While inetd used to be installed
on most distributions by default, it nowadays is used only for very
few selected services and the common services are all run
unconditionally at boot, primarily for (perceived) performance
reasons.&lt;/p&gt;

&lt;p&gt;One of the core feature of systemd (and Apple's launchd for the
matter) is socket activation, a scheme pioneered by inetd, however
back then with a different focus. Systemd-style socket activation focusses on
local sockets (AF_UNIX), not so much Internet sockets (AF_INET), even
though both are supported. And more importantly even, socket
activation in systemd is not primarily about the on-demand aspect that
was key in inetd, but more on increasing parallelization (socket
activation allows starting clients and servers of the socket at the
same time), simplicity (since the need to configure explicit
dependencies between services is removed) and robustness (since
services can be restarted or may crash without loss of connectivity of the
socket). However, systemd can also activate services on-demand when
connections are incoming, if configured that way.&lt;/p&gt;

&lt;p&gt;Socket activation of any kind requires support in the services
themselves. systemd provides a very simple interface that services may
implement to provide socket activation, built around &lt;a href="http://0pointer.de/public/systemd-man/sd_listen_fds.html"&gt;sd_listen_fds()&lt;/a&gt;. &lt;a href="http://0pointer.de/blog/projects/socket-activation.html"&gt;As such
it is already a very minimal, simple scheme&lt;/a&gt;. However, the
traditional inetd interface is even simpler. It allows passing only a
single socket to the activated service: the socket fd is simply
duplicated to STDIN and STDOUT of the process spawned, and that's
already it. In order to provide compatibility systemd optionally
offers the same interface to processes, thus taking advantage of the
many services that already support inetd-style socket activation, but not yet
systemd's native activation.&lt;/p&gt;

&lt;p&gt;Before we continue with a concrete example, let's have a look at
three different schemes to make use of socket activation:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;&lt;b&gt;Socket activation for parallelization, simplicity,
robustness:&lt;/b&gt; sockets are bound during early boot and a singleton
service instance to serve all client requests is immediately started
at boot. This is useful for all services that are very likely used
frequently and continously, and hence starting them early and in
parallel with the rest of the system is advisable. Examples: D-Bus,
Syslog.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;On-demand socket activation for singleton services:&lt;/b&gt; sockets
are bound during early boot and a singleton service instance is
executed on incoming traffic. This is useful for services that are
seldom used, where it is advisable to save the resources and time at
boot and delay activation until they are actually needed. Example: CUPS.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;On-demand socket activation for per-connection service
instances:&lt;/b&gt; sockets are bound during early boot and for each
incoming connection a new service instance is instantiated and the
connection socket (and not the listening one) is passed to it. This is
useful for services that are seldom used, and where performance is not
critical, i.e. where the cost of spawning a new service process for
each incoming connection is limited. Example: SSH.&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;The three schemes provide different performance characteristics. After
the service finishes starting up the performance provided by the first two
schemes is identical to a stand-alone service (i.e. one that is
started without a super-server, without socket activation), since the
listening socket is passed to the actual service, and code paths from
then on are identical to those of a stand-alone service and all
connections are processes exactly the same way as they are in a
stand-alone service. On the other hand, performance of the third scheme
is usually not as good: since for each connection a new service needs
to be started the resource cost is much higher. However, it also has a
number of advantages: for example client connections are better
isolated and it is easier to develop services activated this way.&lt;/p&gt;

&lt;p&gt;For systemd primarily the first scheme is in focus, however the
other two schemes are supported as well. (In fact, the blog story &lt;a href="http://0pointer.de/blog/projects/socket-activation2.html"&gt;I
covered the necessary code changes for systemd-style socket activation
in&lt;/a&gt; was about a service of the second type, i.e. CUPS). inetd
primarily focusses on the third scheme, however the second scheme is
supported too. (The first one isn't. Presumably due the focus on the
third scheme inetd got its -- a bit unfair -- reputation for being
"slow".)&lt;/p&gt;

&lt;p&gt;So much about the background, let's cut to the beef now and show an
inetd service can be integrated into systemd's socket
activation. We'll focus on SSH, a very common service that is widely
installed and used but on the vast majority of machines probably not
started more often than 1/h in average (and usually even much
less). SSH has supported inetd-style activation since a long time,
following the third scheme mentioned above. Since it is started only
every now and then and only with a limited number of connections at
the same time it is a very good candidate for this scheme as the extra
resource cost is negligble: if made socket-activatable SSH is
basically free as long as nobody uses it. And as soon as somebody logs
in via SSH it will be started and the moment he or she disconnects all
its resources are freed again. Let's find out how to make SSH
socket-activatable in systemd taking advantage of the provided inetd
compatibility!&lt;/p&gt;

&lt;p&gt;Here's the configuration line used to hook up SSH with classic inetd:&lt;/p&gt;

&lt;pre&gt;ssh stream tcp nowait root /usr/sbin/sshd sshd -i&lt;/pre&gt;

&lt;p&gt;And the same as xinetd configuration fragment:&lt;/p&gt;

&lt;pre&gt;service ssh {
        socket_type = stream
        protocol = tcp
        wait = no
        user = root
        server = /usr/sbin/sshd
        server_args = -i
}&lt;/pre&gt;

&lt;p&gt;Most of this should be fairly easy to understand, as these two
fragments express very much the same information. The non-obvious
parts: the port number (22) is not configured in inetd configuration,
but indirectly via the service database in &lt;tt&gt;/etc/services&lt;/tt&gt;: the
service name is used as lookup key in that database and translated to
a port number. This indirection via &lt;tt&gt;/etc/services&lt;/tt&gt; has been
part of Unix tradition though has been getting more and more out of
fashion, and the newer xinetd hence optionally allows configuration
with explicit port numbers. The most interesting setting here is the
not very intuitively named &lt;tt&gt;nowait&lt;/tt&gt; (resp. &lt;tt&gt;wait=no&lt;/tt&gt;)
option. It configures whether a service is of the second
(&lt;tt&gt;wait&lt;/tt&gt;) resp. third (&lt;tt&gt;nowait&lt;/tt&gt;) scheme mentioned
above. Finally the &lt;tt&gt;-i&lt;/tt&gt; switch is used to enabled inetd mode in
SSH.&lt;/p&gt;

&lt;p&gt;The systemd translation of these configuration fragments are the
following two units. First: &lt;tt&gt;sshd.socket&lt;/tt&gt; is a unit encapsulating
information about a socket to listen on:&lt;/p&gt;

&lt;pre&gt;[Unit]
Description=SSH Socket for Per-Connection Servers

[Socket]
ListenStream=22
Accept=yes

[Install]
WantedBy=sockets.target
&lt;/pre&gt;

&lt;p&gt;Most of this should be self-explanatory. A few notes:
&lt;tt&gt;Accept=yes&lt;/tt&gt; corresponds to &lt;tt&gt;nowait&lt;/tt&gt;. It's hopefully
better named, referring to the fact that for &lt;tt&gt;nowait&lt;/tt&gt; the
superserver calls &lt;tt&gt;accept()&lt;/tt&gt; on the listening socket, where for
&lt;tt&gt;wait&lt;/tt&gt; this is the job of the executed
service process. &lt;tt&gt;WantedBy=sockets.target&lt;/tt&gt; is used to ensure that when
enabled this unit is activated at boot at the right time.&lt;/p&gt;

&lt;p&gt;And here's the matching service file &lt;tt&gt;sshd@.service&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;
[Unit]
Description=SSH Per-Connection Server

[Service]
ExecStart=-/usr/sbin/sshd -i
StandardInput=socket
&lt;/pre&gt;

&lt;p&gt;This too should be mostly self-explanatory. Interesting is
&lt;tt&gt;StandardInput=socket&lt;/tt&gt;, the option that enables inetd
compatibility for this service. &lt;tt&gt;StandardInput=&lt;/tt&gt; may be used to
configure what STDIN of the service should be connected for this
service (see &lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;the man
page for details&lt;/a&gt;). By setting it to &lt;tt&gt;socket&lt;/tt&gt; we make sure
to pass the connection socket here, as expected in the simple inetd
interface. Note that we do not need to explicitly configure
&lt;tt&gt;StandardOutput=&lt;/tt&gt; here, since by default the setting from
&lt;tt&gt;StandardInput=&lt;/tt&gt; is inherited if nothing else is
configured. Important is the "-" in front of the binary name. This
ensures that the exit status of the per-connection sshd process is
forgotten by systemd. Normally, systemd will store the exit status of
a all service instances that die abnormally. SSH will sometimes die
abnormally with an exit code of 1 or similar, and we want to make sure
that this doesn't cause systemd to keep around information for
numerous previous connections that died this way (until this
information is forgotten with &lt;tt&gt;systemctl reset-failed&lt;/tt&gt;).&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;sshd@.service&lt;/tt&gt; is an instantiated service, as described &lt;a href="http://0pointer.de/blog/projects/instances.html"&gt;in the preceeding
installment of this series&lt;/a&gt;. For each incoming connection systemd
will instantiate a new instance of &lt;tt&gt;sshd@.service&lt;/tt&gt;, with the
instance identifier named after the connection credentials.&lt;/p&gt;

&lt;p&gt;You may wonder why in systemd configuration of an inetd service
requires two unit files instead of one. The reason for this is that to
simplify things we want to make sure that the relation between live
units and unit files is obvious, while at the same time we can order
the socket unit and the service units independently in the dependency
graph and control the units as independently as possible. (Think: this
allows you to shutdown the socket independently from the instances,
and each instance individually.)&lt;/p&gt;

&lt;p&gt;Now, let's see how this works in real life. If we drop these files
into &lt;tt&gt;/etc/systemd/system&lt;/tt&gt; we are ready to enable the socket and
start it:&lt;/p&gt;

&lt;pre&gt;# systemctl enable sshd.socket
ln -s '/etc/systemd/system/sshd.socket' '/etc/systemd/system/sockets.target.wants/sshd.socket'
# systemctl start sshd.socket
# systemctl status sshd.socket
sshd.socket - SSH Socket for Per-Connection Servers
	  Loaded: loaded (/etc/systemd/system/sshd.socket; enabled)
	  Active: active (listening) since Mon, 26 Sep 2011 20:24:31 +0200; 14s ago
	Accepted: 0; Connected: 0
	  CGroup: name=systemd:/system/sshd.socket
&lt;/pre&gt;

&lt;p&gt;This shows that the socket is listening, and so far no connections
have been made (&lt;tt&gt;Accepted:&lt;/tt&gt; will show you how many connections
have been made in total since the socket was started,
&lt;tt&gt;Connected:&lt;/tt&gt; how many connections are currently active.)&lt;/p&gt;

&lt;p&gt;Now, let's connect to this from two different hosts, and see which services are now active:&lt;/p&gt;

&lt;pre&gt;
$ systemctl --full | grep ssh
sshd@172.31.0.52:22-172.31.0.4:47779.service  loaded active running       SSH Per-Connection Server
sshd@172.31.0.52:22-172.31.0.54:52985.service loaded active running       SSH Per-Connection Server
sshd.socket                                   loaded active listening     SSH Socket for Per-Connection Servers
&lt;/pre&gt;

&lt;p&gt;As expected, there are now two service instances running, for the
two connections, and they are named after the source and destination
address of the TCP connection as well as the port numbers. (For
AF_UNIX sockets the instance identifier will carry the PID and UID of
the connecting client.) This allows us to invidiually introspect or
kill specific sshd instances, in case you want to terminate the
session of a specific client:&lt;/p&gt;

&lt;pre&gt;# systemctl kill sshd@172.31.0.52:22-172.31.0.4:47779.service&lt;/pre&gt;

&lt;p&gt;And that's probably already most of what you need to know for
hooking up inetd services with systemd and how to use them afterwards.&lt;/p&gt;

&lt;p&gt;In the case of SSH it is probably a good suggestion for most
distributions in order to save resources to default to this kind of
inetd-style socket activation, but provide a stand-alone unit file to
sshd as well which can be enabled optionally. I'll soon file a
wishlist bug about this against our SSH package in Fedora.&lt;/p&gt;

&lt;p&gt;A few final notes on how xinetd and systemd compare feature-wise,
and whether xinetd is fully obsoleted by systemd. The short answer
here is that systemd does not provide the full xinetd feature set and
that is does not fully obsolete xinetd. The longer answer is a bit
more complex: if you look at the &lt;a href="http://linux.die.net/man/5/xinetd.conf"&gt;multitude of options&lt;/a&gt;
xinetd provides you'll notice that systemd does not compare. For
example, systemd does not come with built-in &lt;tt&gt;echo&lt;/tt&gt;,
&lt;tt&gt;time&lt;/tt&gt;, &lt;tt&gt;daytime&lt;/tt&gt; or &lt;tt&gt;discard&lt;/tt&gt; servers, and never
will include those. TCPMUX is not supported, and neither are RPC
services. However, you will also find that most of these are either
irrelevant on today's Internet or became other way out-of-fashion. The
vast majority of inetd services do not directly take advantage of
these additional features. In fact, none of the xinetd services
shipped on Fedora make use of these options. That said, there are a
couple of useful features that systemd does not support, for example
IP ACL management. However, most administrators will probably agree
that firewalls are the better solution for these kinds of problems and
on top of that, systemd supports ACL management via tcpwrap for those
who indulge in retro technologies like this. On the other hand systemd
also provides numerous features &lt;tt&gt;xinetd&lt;/tt&gt; does not provide,
starting with the individual control of instances shown above, or the
more expressive configurability of the &lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;execution
context for the instances&lt;/a&gt;. I believe that what systemd provides is
quite comprehensive, comes with little legacy cruft but should provide
you with everything you need. And if there's something systemd does
not cover, &lt;tt&gt;xinetd&lt;/tt&gt; will always be there to fill the void as
you can easily run it in conjunction with &lt;tt&gt;systemd&lt;/tt&gt;. For the
majority of uses systemd should cover what is necessary, and allows
you cut down on the required components to build your system from. In
a way, systemd brings back the functionality of classic Unix inetd and
turns it again into a center piece of a Linux system.&lt;/p&gt;

&lt;p&gt;And that's all for now. Thanks for reading this long piece. And
now, get going and convert your services over! Even better, do this
work in the individual packages upstream or in your distribution!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 26 Sep 2011 20:46:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-09-26:/blog/projects/inetd.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part X</title><link>https://0pointer.net/blog/projects/instances.html</link><description>
                
&lt;p&gt;Here's the tenth &lt;a href="http://0pointer.de/blog/projects/on-etc-sysinit.html"&gt;installment&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;Instantiated Services&lt;/h4&gt;

&lt;p&gt;Most services on Linux/Unix are &lt;i&gt;singleton&lt;/i&gt; services: there's
usually only one instance of Syslog, Postfix, or Apache running on a
specific system at the same time. On the other hand some select
services may run in multiple instances on the same host. For example,
an Internet service like the Dovecot IMAP service could run in
multiple instances on different IP ports or different local IP
addresses. A more common example that exists on all installations is
&lt;i&gt;getty&lt;/i&gt;, the mini service that runs once for each TTY and
presents a login prompt on it. On most systems this service is
instantiated once for each of the first six virtual consoles
&lt;tt&gt;tty1&lt;/tt&gt; to &lt;tt&gt;tty6&lt;/tt&gt;. On some servers depending on
administrator configuration or boot-time parameters an additional
getty is instantiated for a serial or virtualizer console. Another
common instantiated service in the systemd world is &lt;i&gt;fsck&lt;/i&gt;, the
file system checker that is instantiated once for each block device
that needs to be checked. Finally, in systemd socket activated
per-connection services (think classic inetd!) are also implemented
via instantiated services: a new instance is created for each incoming
connection. In this installment I hope to explain a bit how systemd
implements instantiated services and how to take advantage of them as
an administrator.&lt;/p&gt;

&lt;p&gt;If you followed the previous episodes of this series you are
probably aware that services in systemd are named according to the
pattern &lt;tt&gt;&lt;i&gt;foobar&lt;/i&gt;.service&lt;/tt&gt;, where &lt;i&gt;foobar&lt;/i&gt; is an
identification string for the service, and &lt;tt&gt;.service&lt;/tt&gt; simply a
fixed suffix that is identical for all service units. The definition files
for these services are searched for in &lt;tt&gt;/etc/systemd/system&lt;/tt&gt;
and &lt;tt&gt;/lib/systemd/system&lt;/tt&gt; (and possibly other directories) under this name. For
instantiated services this pattern is extended a bit: the service name becomes
&lt;tt&gt;&lt;i&gt;foobar&lt;/i&gt;@&lt;i&gt;quux&lt;/i&gt;.service&lt;/tt&gt; where &lt;i&gt;foobar&lt;/i&gt; is the
common service identifier, and &lt;i&gt;quux&lt;/i&gt; the instance
identifier. Example: &lt;tt&gt;serial-getty@ttyS2.service&lt;/tt&gt; is the serial
getty service instantiated for &lt;tt&gt;ttyS2&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Service instances can be created dynamically as needed. Without
further configuration you may easily start a new getty on a serial
port simply by invoking a &lt;tt&gt;systemctl start&lt;/tt&gt; command for the new
instance:&lt;/p&gt;

&lt;pre&gt;# systemctl start serial-getty@ttyUSB0.service&lt;/pre&gt;

&lt;p&gt;If a command like the above is run systemd will first look for a
unit configuration file by the exact name you requested. If this
service file is not found (and usually it isn't if you use
instantiated services like this) then the instance id is removed from
the name and a unit configuration file by the resulting
&lt;i&gt;template&lt;/i&gt; name searched. In other words, in the above example,
if the precise &lt;tt&gt;serial-getty@ttyUSB0.service&lt;/tt&gt; unit file cannot
be found, &lt;tt&gt;serial-getty@.service&lt;/tt&gt; is loaded instead. This unit
template file will hence be common for all instances of this
service. For the serial getty we ship a template unit file in systemd
(&lt;tt&gt;/lib/systemd/system/serial-getty@.service&lt;/tt&gt;) that looks
something like this:&lt;/p&gt;

&lt;pre&gt;[Unit]
Description=Serial Getty on %I
BindTo=dev-%i.device
After=dev-%i.device systemd-user-sessions.service

[Service]
ExecStart=-/sbin/agetty -s %I 115200,38400,9600
Restart=always
RestartSec=0
&lt;/pre&gt;

&lt;p&gt;(Note that the unit template file we actually ship along with
systemd for the serial gettys is a bit longer. If you are interested,
have a look at the &lt;a href="http://cgit.freedesktop.org/systemd/plain/units/serial-getty@.service.m4"&gt;actual
file&lt;/a&gt; which includes additional directives for compatibility with
SysV, to clear the screen and remove previous users from the TTY
device. To keep things simple I have shortened the unit file to the
relevant lines here.)&lt;/p&gt;

&lt;p&gt;This file looks mostly like any other unit file, with one
distinction: the specifiers &lt;tt&gt;%I&lt;/tt&gt; and &lt;tt&gt;%i&lt;/tt&gt; are used at
multiple locations. At unit load time &lt;tt&gt;%I&lt;/tt&gt; and &lt;tt&gt;%i&lt;/tt&gt; are
replaced by systemd with the instance identifier of the service. In
our example above, if a service is instantiated as
&lt;tt&gt;serial-getty@ttyUSB0.service&lt;/tt&gt; the specifiers &lt;tt&gt;%I&lt;/tt&gt; and
&lt;tt&gt;%i&lt;/tt&gt; will be replaced by &lt;tt&gt;ttyUSB0&lt;/tt&gt;. If you introspect
the instanciated unit with &lt;tt&gt;systemctl status
serial-getty@ttyUSB0.service&lt;/tt&gt; you will see these replacements
having taken place:&lt;/p&gt;

&lt;pre&gt;$ systemctl status serial-getty@ttyUSB0.service
serial-getty@ttyUSB0.service - Getty on ttyUSB0
	  Loaded: loaded (/lib/systemd/system/serial-getty@.service; static)
	  Active: active (running) since Mon, 26 Sep 2011 04:20:44 +0200; 2s ago
	Main PID: 5443 (agetty)
	  CGroup: name=systemd:/system/getty@.service/ttyUSB0
		  ‚îî 5443 /sbin/agetty -s ttyUSB0 115200,38400,9600
&lt;/pre&gt;

&lt;p&gt;And that is already the core idea of instantiated services in
systemd. As you can see systemd provides a very simple templating
system, which can be used to dynamically instantiate services as
needed. To make effective use of this, a few more notes:&lt;/p&gt;

&lt;p&gt;You may instantiate these services &lt;i&gt;on-the-fly&lt;/i&gt; in
&lt;tt&gt;.wants/&lt;/tt&gt; symbolic links in the file system. For example, to
make sure the serial getty on &lt;tt&gt;ttyUSB0&lt;/tt&gt; is started
automatically at every boot, create a symlink like this:&lt;/p&gt;

&lt;pre&gt;# ln -s /lib/systemd/system/serial-getty@.service /etc/systemd/system/getty.target.wants/serial-getty@&lt;b&gt;ttyUSB0&lt;/b&gt;.service&lt;/pre&gt;

&lt;p&gt;systemd will instantiate the symlinked unit file with the
instance name specified in the symlink name.&lt;/p&gt;

&lt;p&gt;You cannot instantiate a unit template without specifying an
instance identifier. In other words &lt;tt&gt;systemctl start
serial-getty@.service&lt;/tt&gt; will necessarily fail since the instance
name was left unspecified.&lt;/p&gt;

&lt;p&gt;Sometimes it is useful to &lt;i&gt;opt-out&lt;/i&gt; of the generic template
for one specific instance. For these cases make use of the fact that
systemd always searches first for the full instance file name before
falling back to the template file name: make sure to place a unit file
under the fully instantiated name in &lt;tt&gt;/etc/systemd/system&lt;/tt&gt; and
it will override the generic templated version for this specific
instance.&lt;/p&gt;

&lt;p&gt;The unit file shown above uses &lt;tt&gt;%i&lt;/tt&gt; at some places and
&lt;tt&gt;%I&lt;/tt&gt; at others. You may wonder what the difference between
these specifiers are. &lt;tt&gt;%i&lt;/tt&gt; is replaced by the exact characters
of the instance identifier. For &lt;tt&gt;%I&lt;/tt&gt; on the other hand the
instance identifier is first passed through a simple unescaping
algorithm. In the case of a simple instance identifier like
&lt;tt&gt;ttyUSB0&lt;/tt&gt; there is no effective difference. However, if the
device name includes one or more slashes ("&lt;tt&gt;/&lt;/tt&gt;") this cannot be
part of a unit name (or Unix file name). Before such a device name can
be used as instance identifier it needs to be escaped so that "/"
becomes "-" and most other special characters (including "-") are
replaced by "\xAB" where AB is the ASCII code of the character in
hexadecimal notation&lt;sup&gt;[1]&lt;/sup&gt;. Example: to refer to a USB serial port by its
bus path we want to use a port name like
&lt;tt&gt;serial/by-path/pci-0000:00:1d.0-usb-0:1.4:1.1-port0&lt;/tt&gt;. The
escaped version of this name is
&lt;tt&gt;serial-by\x2dpath-pci\x2d0000:00:1d.0\x2dusb\x2d0:1.4:1.1\x2dport0&lt;/tt&gt;. &lt;tt&gt;%I&lt;/tt&gt;
will then refer to former, &lt;tt&gt;%i&lt;/tt&gt; to the latter. Effectively this
means &lt;tt&gt;%i&lt;/tt&gt; is useful wherever it is necessary to refer to other
units, for example to express additional dependencies. On the other
hand &lt;tt&gt;%I&lt;/tt&gt; is useful for usage in command lines, or inclusion in
pretty description strings. Let's check how this looks with the above unit file:&lt;/p&gt;

&lt;pre&gt;# systemctl start 'serial-getty@serial-by\x2dpath-pci\x2d0000:00:1d.0\x2dusb\x2d0:1.4:1.1\x2dport0.service'
# systemctl status 'serial-getty@serial-by\x2dpath-pci\x2d0000:00:1d.0\x2dusb\x2d0:1.4:1.1\x2dport0.service'
serial-getty@serial-by\x2dpath-pci\x2d0000:00:1d.0\x2dusb\x2d0:1.4:1.1\x2dport0.service - Serial Getty on serial/by-path/pci-0000:00:1d.0-usb-0:1.4:1.1-port0
	  Loaded: loaded (/lib/systemd/system/serial-getty@.service; static)
	  Active: active (running) since Mon, 26 Sep 2011 05:08:52 +0200; 1s ago
	Main PID: 5788 (agetty)
	  CGroup: name=systemd:/system/serial-getty@.service/serial-by\x2dpath-pci\x2d0000:00:1d.0\x2dusb\x2d0:1.4:1.1\x2dport0
		  ‚îî 5788 /sbin/agetty -s serial/by-path/pci-0000:00:1d.0-usb-0:1.4:1.1-port0 115200 38400 9600
&lt;/pre&gt;

&lt;p&gt;As we can see the while the instance identifier is the escaped
string the command line and the description string actually use the
unescaped version, as expected.&lt;/p&gt;

&lt;p&gt;(Side note: there are more specifiers available than just
&lt;tt&gt;%i&lt;/tt&gt; and &lt;tt&gt;%I&lt;/tt&gt;, and many of them are actually
available in all unit files, not just templates for service
instances. For more details see the &lt;a href="http://0pointer.de/public/systemd-man/systemd.unit.html"&gt;man
page&lt;/a&gt; which includes a full list and terse explanations.)&lt;/p&gt;

&lt;p&gt;And at this point this shall be all for now. Stay tuned for a
follow-up article on how instantiated services are used for
&lt;tt&gt;inetd&lt;/tt&gt;-style socket activation.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Yupp, this escaping algorithm doesn't really result in
particularly pretty escaped strings, but then again, most escaping
algorithms don't help readability. The algorithm we used here is
inspired by what udev does in a similar case, with one change. In the
end, we had to pick something. If you'll plan to comment on the
escaping algorithm please also mention where you live so that I can
come around and paint your bike shed yellow with blue stripes. Thanks!&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 26 Sep 2011 05:11:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-09-26:/blog/projects/instances.html</guid><category>projects</category></item><item><title>Boot/Init LPC MC Summary at LWN</title><link>https://0pointer.net/blog/projects/lwn-lpc-2011.html</link><description>
                
&lt;p&gt;Make sure to read the summary of the &lt;a href="http://lwn.net/SubscriberLink/458789/3ae00c9827889929/"&gt;Boot &amp;amp; Init
Microconf at the Linux Plumbers Conference 2011 In Santa Rosa, CA&lt;/a&gt;. It was a
fantastic conference (at the social event we took busses from the appetizers to
the mains...), and this summary should give you quite a good idea what
we discussed there. Highly recommended read.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 17 Sep 2011 17:56:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-09-17:/blog/projects/lwn-lpc-2011.html</guid><category>projects</category></item><item><title>systemd US Tour Dates</title><link>https://0pointer.net/blog/projects/us-tour-dates.html</link><description>
                
&lt;p&gt;Kay Sievers, Harald Hoyer and I will tour the US in the next weeks. If you
have any questions on systemd, udev or dracut (or any of the related
technologies), then please do get in touch with us on the following occasions:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Linux Plumbers Conference, Santa Rosa, CA, Sep 7-9th&lt;br /&gt;
Google, Googleplex, Mountain View, CA, Sep 12th&lt;br /&gt;
Red Hat, Westford, MA, Sep 13-14th&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As usual LPC is going to rock, so make sure to be there!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 01 Sep 2011 15:37:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-09-01:/blog/projects/us-tour-dates.html</guid><category>projects</category></item><item><title>How to Write syslog Daemons Which Cooperate Nicely With systemd</title><link>https://0pointer.net/blog/projects/syslog.html</link><description>
                
&lt;p&gt;I just finished putting together a text on the systemd wiki explaining what
to do to write a syslog service that is nicely integrated with systemd, and
does all the right things. It's supposed to be a checklist for all syslog
hackers:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/syslog"&gt;Read it now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;rsyslog already implements everything on this list afaics, and that's
pretty cool. If other implementations want to catch up, please consider
following these recommendations, too.&lt;/p&gt;

&lt;p&gt;I put this together since I have changed systemd 35 to set
&lt;tt&gt;StandardOutput=syslog&lt;/tt&gt; as default, so that all stdout/stderr of all
services automatically ends up in syslog. And since that change requires some
(minimal) changes to all syslog implementations I decided to document this all
properly (if you are curious: they need to set &lt;tt&gt;StandardOutput=null&lt;/tt&gt; to
opt out of this default in order to avoid logging loops).&lt;/p&gt;

&lt;p&gt;Anyway, please have a peek and comment if you spot a mistake or
something I forgot. Or if you have questions, just ask.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 30 Aug 2011 23:14:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-08-30:/blog/projects/syslog.html</guid><category>projects</category></item><item><title>How to Behave Nicely in the cgroup Trees</title><link>https://0pointer.net/blog/projects/pax-cgroups.html</link><description>
                
&lt;p&gt;The Linux cgroup hierarchies of the various kernel controllers are a shared
resource. Recently many components of Linux userspace started making use of these
hierarchies. In order to avoid that the various programs step on each others
toes while manipulating this shared resource we have put together a list of
recommendations. Programs following these guidelines should work together
nicely without interfering with other users of the hierarchies.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/PaxControlGroups"&gt;These
guidelines are available in the systemd wiki.&lt;/a&gt; I'd be very interested in
feedback, and would like to ask you to ping me in case we forgot something or left something too vague.&lt;/p&gt;

&lt;p&gt;And please, if you are writing software that interfaces with the cgroup
tree consider following these recommendations. Thank you.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 19 Aug 2011 16:25:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-08-19:/blog/projects/pax-cgroups.html</guid><category>projects</category></item><item><title>The Desktop Summit Wiki Is Full Of Interesting Stuff</title><link>https://0pointer.net/blog/projects/ds-wiki.html</link><description>
                
&lt;p&gt;Just wanted to draw your attention to the &lt;a href="http://wiki.desktopsummit.org/Main_Page"&gt;Desktop Summit Wiki&lt;/a&gt;. If you
are attending the Desktop Summit in Berlin you might find some
interesting information in the Wiki.&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;If you are arriving by plane and want to share a ride (even
S-Bahn trains/bus) from ether of the two airports, consider adding your name to &lt;a href="http://wiki.desktopsummit.org/Attendee_Arrival_Dates"&gt;this list.&lt;/a&gt; It's
still a bit empty (since I just set it up 3min ago) but that'll hopefully
change quickly.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://wiki.desktopsummit.org/Getting_around"&gt;Some information on getting around in Berlin&lt;/a&gt; (i.e. which public transport tickets to buy)&lt;/li&gt;

&lt;li&gt;&lt;a href="http://wiki.desktopsummit.org/Pre-paid_SIM"&gt;Where to get a SIM card for your phone&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://wiki.desktopsummit.org/Sight-seeing"&gt;Some sights to see&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://wiki.desktopsummit.org/Going_out"&gt;Where to get wasted&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://wiki.desktopsummit.org/Food"&gt;Where to eat&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://wiki.desktopsummit.org/Main_Page"&gt;Go to the main page of
the Wiki here.&lt;/a&gt; You are welcome to edit and add additional information to
the Wiki. To edit the Wiki authenticate with the same credentials you used to
sign up for the conference at the Desktop Summit web site.&lt;/p&gt;

&lt;p&gt;See you on friday!&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 02 Aug 2011 22:56:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-08-02:/blog/projects/ds-wiki.html</guid><category>projects</category></item><item><title>Desktop Summit Announcements, Part II</title><link>https://0pointer.net/blog/projects/desktop-summit-announce2.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/desktop-summit-announce.html"&gt;Read
the first part of the announcements.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now there are more exciting announcements:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a href="https://desktopsummit.org/news/copyright-assignment-panel"&gt;The
Panel on Copyright Assignement&lt;/a&gt; has been announced, featuring SUSE's &lt;b&gt;Michael Meeks&lt;/b&gt;,
Canonical's &lt;b&gt;Mark Shuttleworth&lt;/b&gt; and
&lt;b&gt;Bradley Kuhn&lt;/b&gt; from the Software Freedom Conservancy. This
session will be moderated by GNOME's &lt;b&gt;Karen Sandler&lt;/b&gt;.&lt;/li&gt;

&lt;li&gt;&lt;a href="https://desktopsummit.org/interviews/nick-richards"&gt;The
fifth and final keynote Interview&lt;/a&gt; has been published, with Nick
Richards from Intel.&lt;/li&gt;

&lt;li&gt;&lt;a href="https://desktopsummit.org/news/conference-attendee-policy-published"&gt;The
conference attendee policy&lt;/a&gt; as been published.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Only 5 days are now left to beginning of the conference. The &lt;a href="https://desktopsummit.org/program/pre-registration"&gt;first event&lt;/a&gt;
will already take place on &lt;b&gt;Friday August 5th&lt;/b&gt;, at &lt;b&gt;&lt;a href="http://www.c-base.org/"&gt;c-base&lt;/a&gt; at U/S Jannowitzbr&amp;uuml;cke&lt;/b&gt;,
starting at 4pm. The conference programme itself will begin on &lt;b&gt;Saturday August
6th, 10am&lt;/b&gt; (though do come earlier, for registration, if you didn't register at
the c-base event already!). Note that the primary entrance to the Desktop
Summit is in the &lt;b&gt;north-eastern corner&lt;/b&gt; of the main building of Humboldt
University. That's on Dorotheenstr./Hegelplatz, and &lt;i&gt;not&lt;/i&gt; on Unter den
Linden.&lt;/p&gt;

&lt;p&gt;See you on Friday at c-base!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 01 Aug 2011 18:08:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-08-01:/blog/projects/desktop-summit-announce2.html</guid><category>projects</category></item><item><title>Desktop Summit Announcements</title><link>https://0pointer.net/blog/projects/desktop-summit-announce.html</link><description>
                
&lt;p&gt;In case you missed them, there have been a couple of exciting announcements
around the Desktop Summit in Berlin, Germany.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://desktopsummit.org/program/keynotes"&gt;The three keynotes have been announced&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;Interviews with the keynote speakers have been published: &lt;a href="https://desktopsummit.org/interviews/thomas-thwaite"&gt;Thomas Twaite&lt;/a&gt;,
&lt;a href="https://desktopsummit.org/interviews/claire-rowland"&gt;Claire
Rowland&lt;/a&gt;, &lt;a href="https://desktopsummit.org/interviews/dirk-hohndel"&gt;Dirk
Hohndel&lt;/a&gt;, &lt;a href="https://desktopsummit.org/%20interviews/stuart-jarvis"&gt;Stuart
Jarvis&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;&lt;a href="https://desktopsummit.org/news/t-shirt-design-chosen"&gt;The Desktop
Summit T-Shirt design has been announced.&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://blixtra.org/blog/2011/07/21/desktop-summit-the-social-events/"&gt;The
Desktop Summit social events have been announced.&lt;/a&gt; One is on an island! In the river Spree! In summer! In Berlin! How awesome is that?&lt;/li&gt;

&lt;li&gt;&lt;a href="https://desktopsummit.org/program/workshops-bofs"&gt;The BoF and workshop schedule has been published.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there will be more exciting announcements coming!&lt;/p&gt;

&lt;p&gt;See you in 14 days! Oh, and if you still haven't registered, &lt;a href="https://desktopsummit.org/register"&gt;do so now&lt;/a&gt;. It's free, and if you don't register you might not get on the WLAN at the conference right-away.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 22 Jul 2011 21:15:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-07-22:/blog/projects/desktop-summit-announce.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part IX</title><link>https://0pointer.net/blog/projects/on-etc-sysinit.html</link><description>
                
&lt;p&gt;Here's the ninth installment
&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;of&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;On /etc/sysconfig and /etc/default&lt;/h4&gt;

&lt;p&gt;So, here's a bit of an opinion piece on the &lt;tt&gt;/etc/sysconfig/&lt;/tt&gt; and
&lt;tt&gt;/etc/default&lt;/tt&gt; directories that exist on the various distributions in
one form or another, and why I believe their use should be faded out.  Like
everything I say on this blog what follows is just my personal opinion, and not
the gospel and has nothing to do with the position of the Fedora project or my
employer. The topic of &lt;tt&gt;/etc/sysconfig&lt;/tt&gt; has been coming up in
discussions over and over again. I hope with this blog story I can explain a
bit what we as systemd upstream think about these files.&lt;/p&gt;

&lt;p&gt;A few lines about the historical context: I wasn't around when
/etc/sysconfig was introduced -- suffice to say it has been around on Red Hat
and SUSE distributions since a long long time. Eventually /etc/default was
introduced on Debian with very similar semantics. Many other distributions know
a directory with similar semantics too, most of them call it either one or the
other way.  In fact, even other Unix-OSes sported a directory like this. (Such
as SCO. If you are interested in the details, I am sure a Unix greybeard of
your trust can fill in what I am leaving vague here.) So, even though a
directory like this has been known widely on Linuxes and Unixes, it never has
been standardized, neither in POSIX nor in LSB/FHS. These directories very much
are something where distributions distuingish themselves from each other.&lt;/p&gt;

&lt;p&gt;The semantics of &lt;tt&gt;/etc/default&lt;/tt&gt; and &lt;tt&gt;/etc/sysconfig&lt;/tt&gt; are very
losely defined only. What almost all files stored in these directories have in common
though is that they are sourcable shell scripts which primarily consist of
environment variable assignments. Most of the files in these directories are
sourced by the SysV init scripts of the same name. The &lt;a href="http://www.debian.org/doc/debian-policy/ch-opersys.html#s-sysvinit"&gt;Debian
Policy Manual (9.3.2)&lt;/a&gt; and the &lt;a href="http://fedoraproject.org/wiki/Packaging:SysVInitScript"&gt;Fedora Packaging
Guidelines&lt;/a&gt; suggest this use of the directories, however both distributions
also have files in them that do not follow this scheme, i.e. that do not have a
matching SysV init script -- or not even are shell scripts at all.&lt;/p&gt;

&lt;p&gt;Why have these files been introduced? On SysV systems services are started
via init scripts in &lt;tt&gt;/etc/rc.d/init.d&lt;/tt&gt; (or a similar directory).
&lt;tt&gt;/etc/&lt;/tt&gt; is (these days) considered the place where system configuration
is stored. Originally these init scripts were subject to customization by the
administrator. But as they grew and become complex most distributions no longer
considered them true configuration files, but more just a special kind of programs.
To make customization easy and guarantee a safe upgrade path the customizable
bits hence have been moved to separate configuration files, which the init
scripts then source.&lt;/p&gt;

&lt;p&gt;Let's have a quick look what kind of configuration you can do with these
files. Here's a short incomprehensive list of various things that can be
configured via environment settings in these source files I found browsing
through the directories on a Fedora and a Debian machine:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Additional command line parameters for the daemon binaries&lt;/li&gt;
&lt;li&gt;Locale settings for a daemon&lt;/li&gt;
&lt;li&gt;Shutdown time-out for a daemon&lt;/li&gt;
&lt;li&gt;Shutdown mode for a daemon&lt;/li&gt;
&lt;li&gt;System configuration like system locale, time zone information, console keyboard&lt;/li&gt;
&lt;li&gt;Redundant system configuration, like whether the RTC is in local timezone&lt;/li&gt;
&lt;li&gt;Firewall configuration data, not in shell format (!)&lt;/li&gt;
&lt;li&gt;CPU affinity for a daemon&lt;/li&gt;
&lt;li&gt;Settings unrelated to boot, for example including information how to install a new kernel package, how to configure nspluginwrap or whether to do library prelinking&lt;/li&gt;
&lt;li&gt;Whether a specific service should be started or not&lt;/li&gt;
&lt;li&gt;Networking configuration&lt;/li&gt;
&lt;li&gt;Which kernel modules to statically load&lt;/li&gt;
&lt;li&gt;Whether to halt or power-off on shutdown&lt;/li&gt;
&lt;li&gt;Access modes for device nodes (!)&lt;/li&gt;
&lt;li&gt;A description string for the SysV service (!)&lt;/li&gt;
&lt;li&gt;The user/group ID, umask to run specific daemons as&lt;/li&gt;
&lt;li&gt;Resource limits to set for a specific daemon&lt;/li&gt;
&lt;li&gt;OOM adjustment to set for a specific daemon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's go where the beef is: what's wrong with &lt;tt&gt;/etc/sysconfig&lt;/tt&gt;
(resp. &lt;tt&gt;/etc/default&lt;/tt&gt;)? Why might it make sense to fade out use of these
files in a systemd world?&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;For the majority of these files the reason for having them simply does not
exist anymore: systemd unit files are not programs like SysV init scripts
were. Unit files are simple, declarative descriptions, that usually do not consist of more
than 6 lines or so. They can easily be generated, parsed without a Bourne
interpreter and understood by the reader. Also, they are very easy to modify:
just copy them from &lt;tt&gt;/lib/systemd/system&lt;/tt&gt; to
&lt;tt&gt;/etc/systemd/system&lt;/tt&gt; and edit them there, where they will not be
modified by the package manager. The need to separate code and configuration
that was the original reason to introduce these files does not exist anymore,
as systemd unit files do not include code. These files hence now are a solution
looking for a problem that no longer exists.&lt;/li&gt;

&lt;li&gt;They are inherently distribution-specific. With systemd we hope to encourage
standardization between distributions. Part of this is that we want that unit files are
supplied with upstream, and not just added by the packager -- how it has usually
been done in the SysV world. Since the location of the directory and the
available variables in the files is very different on each distribution,
supporting &lt;tt&gt;/etc/sysconfig&lt;/tt&gt; files in upstream unit files is not
feasible. Configuration stored in these files works against de-balkanization of
the Linux platform.&lt;/li&gt;

&lt;li&gt;Many settings are fully redundant in a systemd world. For example, various
services support configuration of the process credentials like the user/group
ID, resource limits, CPU affinity or the OOM adjustment settings. However, these settings are
supported only by some SysV init scripts, and often have different names if
supported in multiple of them. OTOH in systemd, all these settings are
available equally and uniformly for all services, with the same configuration
option in unit files.&lt;/li&gt;

&lt;li&gt;Unit files know a large number of easy-to-use process context settings,
that are more comprehensive than what most &lt;tt&gt;/etc/sysconfig&lt;/tt&gt; files offer.&lt;/li&gt;

&lt;li&gt;A number of these settings are entirely questionnabe. For example, the
aforementiond configuration option for the user/group ID a service runs as is
primarily something the distributor has to take care of. There is little to win
for administrators to change these settings, and only the distributor has the
broad overview to make sure that UID/GID and name collisions do not
happen.&lt;/li&gt;

&lt;li&gt;The file format is not ideal. Since the files are usually sourced as shell
scripts, parse errors are very hard to decypher and are not logged along the
other configuration problems of the services. Generally, unknown variable
assignments simply have no effect but this is not warned about. This makes
these files harder to debug than necessary.&lt;/li&gt;

&lt;li&gt;Configuration files sources from shell scripts are subject to the execution
parameters of the interpreter, and it has many: settings like IFS or LANG tend
to modify drastically how shell scripts are parsed and understood. This makes
them fragile.&lt;/li&gt;

&lt;li&gt;Interpretation of these files is slow, since it requires spawning of a
shell, which adds at least one process for each service to be spawned at boot.&lt;/li&gt;

&lt;li&gt;Often, files in &lt;tt&gt;/etc/sysconfig&lt;/tt&gt; are used to "fake" configuration
files for daemons which do not support configuration files natively. This is
done by glueing together command line arguments from these variable assignments
that are then passed to the daemon. In general proper, native configuration
files in these daemons are the much prettier solution however. Command line
options like "-k", "-a" or "-f" are not self-explanatory and have a very
cryptic syntax. Moreover the same switches in many daemons have (due to the
limited vocabulary) often very much contradicting effects. (On one daemon
&lt;tt&gt;-f&lt;/tt&gt; might cause the daemon to daemonize, while on another one this
option turns exactly this behaviour off.) Command lines generally cannot include
sensible comments which most configuration files however can.&lt;/li&gt;

&lt;li&gt;A number of configuration settings in &lt;tt&gt;/etc/sysconfig&lt;/tt&gt; are entirely
redundant: for example, on many distributions it can be controlled via
&lt;tt&gt;/etc/sysconfig&lt;/tt&gt; files whether the RTC is in UTC or local time. Such an
option already exists however in the 3rd line of the &lt;tt&gt;/etc/adjtime&lt;/tt&gt;
(which is known on all distributions). Adding a second, redundant,
distribution-specific option overriding this is hence needless and complicates
things for no benefit.&lt;/li&gt;

&lt;li&gt;Many of the configuration settings in &lt;tt&gt;/etc/sysconfig&lt;/tt&gt; allow
disabling services. By this they basically become a second level of
enabling/disabling over what the init system already offers: when a service is
enabled with &lt;tt&gt;systemctl enable&lt;/tt&gt; or &lt;tt&gt;chkconfig on&lt;/tt&gt; these settings
override this, and turn the daemon of even though the init system was
configured to start it. This of course is very confusing to the
user/administrator, and brings virtually no benefit.&lt;/li&gt;

&lt;li&gt;For options like the configuration of static kernel modules to load: there
are nowadays usually much better ways to load kernel modules at boot. For
example, most modules may now be autoloaded by udev when the right hardware is
found.  This goes very far, and even includes ACPI and other high-level
technologies.  One of the very few exceptions where we currently do not do
kernel module autoloading is CPU feature and model based autoloading which
however will be supported soon too. And even if your specific module cannot be
auto-loaded there's usually a better way to statically load it, for example by
sticking it in &lt;tt&gt;/etc/load-modules.d&lt;/tt&gt; so that the administrator can check
a standardized place for all statically loaded modules.&lt;/li&gt;

&lt;li&gt;Last but not least, /etc already is intended to be the place for system
configuration ("Host-specific system configuration" according to FHS). A
subdirectory beneath it called &lt;tt&gt;sysconfig&lt;/tt&gt; to place system configuration
in is hence entirely redundant, already on the language level.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;What to use instead? Here are a few recommendations of what to do with these
files in the long run in a systemd world:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Just drop them without replacement. If they are fully redundant (like the
local/UTC RTC setting) this is should be a relatively easy way out (well,
ignoring the need for compatibility). If systemd natively supports an
equivalent option in the unit files there is no need to duplicate these
settings in &lt;tt&gt;sysconfig&lt;/tt&gt; files. For a list of execution options you may
set for a service check out the respective man pages: &lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;systemd.exec(5)&lt;/a&gt;
and &lt;a href="http://0pointer.de/public/systemd-man/systemd.service.html"&gt;systemd.service(5)&lt;/a&gt;.
If your setting simply adds another layer where a service can be disabled,
remove it to keep things simple. There's no need to have multiple ways to
disable a service.&lt;/li&gt;

&lt;li&gt;Find a better place for them. For configuration of the system locale or
system timezone we hope to gently push distributions into the right direction,
for more details see &lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;previous
episode of this series&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;Turn these settings into native settings of the daemon. If necessary add
support for reading native configuration files to the daemon. Thankfully, most
of the stuff we run on Linux is Free Software, so this can relatively easily be
done.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Of course, there's one very good reason for supporting these files for a bit
longer: compatibility for upgrades. But that's is really the only one I could
come up with. It's reason enough to keep compatibility for a while, but I think
it is a good idea to phase out usage of these files at least in new packages.&lt;/p&gt;

&lt;p&gt;If compatibility is important, then systemd will still allow you to read
these configuration files even if you otherwise use native systemd unit files.
If your &lt;tt&gt;sysconfig&lt;/tt&gt; file only knows simple options
&lt;tt&gt;EnvironmentFile=-/etc/sysconfig/foobar&lt;/tt&gt; (&lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;See systemd.exec(5) for more information about this option.&lt;/a&gt;) may be used to import the
settings into the environment and use them to put together command lines. If
you need a programming language to make sense of these settings, then use a
programming language like shell. For example, place an short shell script in
&lt;tt&gt;/usr/lib/&lt;i&gt;&amp;lt;your package&amp;gt;&lt;/i&gt;/&lt;/tt&gt; which reads these files for
compatibility, and then &lt;tt&gt;exec&lt;/tt&gt;'s the actual daemon binary. Then spawn
this script instead of the actual daemon binary with &lt;tt&gt;ExecStart=&lt;/tt&gt; in the
unit file.&lt;/p&gt;

&lt;p&gt;And this is all for now. Thank you very much
for your interest.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 18 Jul 2011 00:34:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-07-18:/blog/projects/on-etc-sysinit.html</guid><category>projects</category></item><item><title>Wake up!</title><link>https://0pointer.net/blog/projects/ds-wake-up-call.html</link><description>
                
&lt;p&gt;If you plan to attend Desktop Summit in Berlin this year, then please &lt;a href="https://desktopsummit.org/register"&gt;REGISTER NOW!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you do not register, then this means you will have to wait in the signup
queue at the conference for substantially longer and might miss a talk or two.
You will &lt;b&gt;not get onto the conference WLAN&lt;/b&gt; right from the beginning of
the conference (access is authenticated and personalized, only people who sign
up will get access credentials). Your personal badge will not be ready
right-away. If not enough people register we will also have to &lt;b&gt;cut down on
the available catering and the parties&lt;/b&gt;. We rely on the registration numbers
to plan, and if you come but don't sign up before you make it very hard for us
to plan. Registration is free, so what are you waiting for?&lt;/p&gt;

&lt;p&gt;I am pretty sure you want to avoid all of this right? For your own benefit
and for the benefit of everybody else attending the conference, go and register
for the conference &lt;a href="https://desktopsummit.org/register"&gt;right-away&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Also, we are still looking for more volunteers for session chairs and
runners at the conference. This is your chance to introduce your favourite Open
Source hacker on stage! Please consider volunteering and &lt;a href="https://desktopsummit.org/news/call-for-volunteers"&gt;read the Call for
Volunteers&lt;/a&gt;. Add yourself to &lt;a href="http://wiki.desktopsummit.org/Volunteers"&gt;the list on the wiki page&lt;/a&gt;,
today. If you sign up you'll earn yourself the gratitude of the GNOME and KDE
communities, and you'll receive the exclusive team T-shirts!&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 13 Jul 2011 00:49:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-07-13:/blog/projects/ds-wake-up-call.html</guid><category>projects</category></item><item><title>Yet another interview</title><link>https://0pointer.net/blog/projects/linuxfr.html</link><description>
                
&lt;p&gt;&lt;a href="http://linuxfr.org/news/un-entretien-avec-lennart-poettering"&gt;Here's
yes another interview with yours truly.&lt;/a&gt; It's on LinuxFR, so I hope
you understand some fr_FR.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 05 Jul 2011 15:28:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-07-05:/blog/projects/linuxfr.html</guid><category>projects</category></item><item><title>systemd for Developers II</title><link>https://0pointer.net/blog/projects/socket-activation2.html</link><description>
                
&lt;p&gt;It has been way too long since I posted the &lt;a href="http://0pointer.de/blog/projects/socket-activation.html"&gt;first
episode&lt;/a&gt; of my &lt;i&gt;systemd for Developers&lt;/i&gt; series. Here's finally the
second part. Make sure you read the first episode of the series before
you start with this part since I'll assume the reader grokked the wonders
of socket activation.&lt;/p&gt;

&lt;h4&gt;Socket Activation, Part II&lt;/h4&gt;

&lt;p&gt;This time we'll focus on adding socket activation support to real-life
software, more specifically the CUPS printing server. Most current Linux
desktops run CUPS by default these days, since printing is so basic that it's a
must have, and must just work when the user needs it. However, most desktop
CUPS installations probably don't actually see more than a handful of print
jobs each month. Even if you are a busy office worker you'll unlikely to
generate more than a couple of print jobs an hour on your PC. Also, printing is
not time critical.  Whether a job takes 50ms or 100ms until it reaches the
printer matters little.  As long as it is less than a few seconds the user
probably won't notice.  Finally, printers are usually peripheral hardware: they
aren't built into your laptop, and you don't always carry them around plugged
in. That all together makes CUPS a perfect candidate for lazy activation:
instead of starting it unconditionally at boot we just start it on-demand, when
it is needed.  That way we can save resources, at boot and at runtime. However,
this kind of activation needs to take place transparently, so that the user
doesn't notice that the print server was not actually running yet when he tried
to access it. To achieve that we need to make sure that the print server is
started as soon at least one of three conditions hold:&lt;/p&gt;

&lt;ol&gt; &lt;li&gt;A local client tries to talk to the print server, for example because
a GNOME application opened the printing dialog which tries to enumerate
available printers.&lt;/li&gt;

&lt;li&gt;A printer is being plugged in locally, and it should be configured and
enabled and then optionally the user be informed about it.&lt;/li&gt;

&lt;li&gt;At boot, when there's still an unprinted print job lurking in the queue.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course, the desktop is not the only place where CUPS is used. CUPS can be
run in small and big print servers, too. In that case the amount of print jobs
is substantially higher, and CUPS should be started right away at boot. That
means that (optionally) we still want to start CUPS unconditionally at boot and
not delay its execution until when it is needed.&lt;/p&gt;

&lt;p&gt;Putting this all together we need four kind of activation to make CUPS work
well in all situations at minimal resource usage: socket based activation (to
support condition 1 above), hardware based activation (to support condition 2),
path based activation (for condition 3) and finally boot-time activation (for
the optional server usecase). Let's focus on these kinds of activation in more
detail, and in particular on socket-based activation.&lt;/p&gt;

&lt;h5&gt;Socket Activation in Detail&lt;/h5&gt;

&lt;p&gt;To implement socket-based activation in CUPS we need to make sure that when
sockets are passed from systemd these are used to listen on instead of binding
them directly in the CUPS source code. Fortunately this is relatively easy to
do in the CUPS sources, since it already supports launchd-style socket
activation, as it is used on MacOS X (note that CUPS is nowadays an Apple
project). That means the code already has all the necessary hooks to add
systemd-style socket activation with minimal work.&lt;/p&gt;

&lt;p&gt;To begin with our patching session we check out the CUPS sources.
Unfortunately CUPS is still stuck in unhappy Subversion country and not using
git yet. In order to simplify our patching work our first step is to use
&lt;tt&gt;git-svn&lt;/tt&gt; to check it out locally in a way we can access it with the
usual git tools:&lt;/p&gt;

&lt;pre&gt;git svn clone http://svn.easysw.com/public/cups/trunk/ cups&lt;/pre&gt;

&lt;p&gt;This will take a while. After the command finished we use the wonderful
&lt;tt&gt;git grep&lt;/tt&gt; to look for all occurences of the word "launchd", since
that's probably where we need to add the systemd support too. This reveals &lt;a href="http://svn.easysw.com/public/cups/trunk/scheduler/main.c"&gt;scheduler/main.c&lt;/a&gt;
as main source file which implements launchd interaction.&lt;/p&gt;

&lt;p&gt;Browsing through this file we notice that two functions are primarily
responsible for interfacing with launchd, the appropriately named
&lt;tt&gt;launchd_checkin()&lt;/tt&gt; and &lt;tt&gt;launchd_checkout()&lt;/tt&gt; functions. The
former acquires the sockets from launchd when the daemon starts up, the latter
terminates communication with launchd and is called when the daemon shuts down.
systemd's socket activation interfaces are much simpler than those of launchd.
Due to that we only need an equivalent of the &lt;tt&gt;launchd_checkin()&lt;/tt&gt; call,
and do not need a checkout function. Our own function
&lt;tt&gt;systemd_checkin()&lt;/tt&gt; can be implemented very similar to
&lt;tt&gt;launchd_checkin()&lt;/tt&gt;: we look at the sockets we got passed and try to map
them to the ones configured in the CUPS configuration. If we got more sockets
passed than configured in CUPS we implicitly add configuration for them. If the
CUPS configuration includes definitions for more listening sockets those will
be bound natively in CUPS. That way we'll very robustly listen on all ports
that are listed in either systemd or CUPS configuration.&lt;/p&gt;

&lt;p&gt;Our function &lt;tt&gt;systemd_checkin()&lt;/tt&gt; uses &lt;tt&gt;sd_listen_fds()&lt;/tt&gt; from
&lt;tt&gt;sd-daemon.c&lt;/tt&gt; to acquire the file descriptors. Then, we use
&lt;tt&gt;sd_is_socket()&lt;/tt&gt; to map the sockets to the right listening configuration
of CUPS, in a loop for each passed socket. The loop corresponds very closely to
the loop from &lt;tt&gt;launchd_checkin()&lt;/tt&gt; however is a lot simpler. &lt;a href="http://0pointer.de/public/cups-patch-core.txt"&gt;Our patch so far looks like this.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we can test our patch, we add &lt;a href="http://cgit.freedesktop.org/systemd/plain/src/sd-daemon.c"&gt;sd-daemon.c&lt;/a&gt;
and &lt;a href="http://cgit.freedesktop.org/systemd/plain/src/sd-daemon.h"&gt;sd-daemon.h&lt;/a&gt;
as drop-in files to the package, so that &lt;tt&gt;sd_listen_fds()&lt;/tt&gt; and
&lt;tt&gt;sd_is_socket()&lt;/tt&gt; are available for use. After a few minimal changes to
the &lt;tt&gt;Makefile&lt;/tt&gt; we are almost ready to test our socket activated version
of CUPS. The last missing step is creating two unit files for CUPS, one for the
socket (&lt;a href="http://0pointer.de/public/cups.socket"&gt;cups.socket&lt;/a&gt;), the
other for the service (&lt;a href="http://0pointer.de/public/cups.service"&gt;cups.service&lt;/a&gt;). To make things
simple we just drop them in &lt;tt&gt;/etc/systemd/system&lt;/tt&gt; and make sure systemd
knows about them, with &lt;tt&gt;systemctl daemon-reload&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Now we are ready to test our little patch: we start the socket with
&lt;tt&gt;systemctl start cups.socket&lt;/tt&gt;. This will bind the socket, but won't
start CUPS yet. Next, we simply invoke &lt;tt&gt;lpq&lt;/tt&gt; to test whether CUPS is
transparently started, and yupp, this is exactly what happens. We'll get the
normal output from &lt;tt&gt;lpq&lt;/tt&gt; as if we had started CUPS at boot already, and
if we then check with &lt;tt&gt;systemctl status cups.service&lt;/tt&gt; we see that CUPS
was automatically spawned by our invocation of &lt;tt&gt;lpq&lt;/tt&gt;. Our test
succeeded, socket activation worked!&lt;/p&gt;

&lt;h5&gt;Hardware Activation in Detail&lt;/h5&gt;

&lt;p&gt;The next trigger is hardware activation: we want to make sure that CUPS is
automatically started as soon as a local printer is found, regardless whether
that happens as &lt;i&gt;hotplug&lt;/i&gt; during runtime or as &lt;i&gt;coldplug&lt;/i&gt; during
boot. Hardware activation in systemd is done via udev rules. Any udev device
that is tagged with the &lt;tt&gt;systemd&lt;/tt&gt; tag can pull in units as needed via
the &lt;tt&gt;SYSTEMD_WANTS=&lt;/tt&gt; environment variable. In the case of CUPS we don't
even have to add our own udev rule to the mix, we can simply hook into what
systemd already does out-of-the-box with rules shipped upstream. More
specifically, it ships a udev rules file with the following lines:&lt;/p&gt;

&lt;pre&gt;SUBSYSTEM=="printer", TAG+="systemd", ENV{SYSTEMD_WANTS}="printer.target"
SUBSYSTEM=="usb", KERNEL=="lp*", TAG+="systemd", ENV{SYSTEMD_WANTS}="printer.target"
SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_device", ENV{ID_USB_INTERFACES}=="*:0701??:*", TAG+="systemd", ENV{SYSTEMD_WANTS}="printer.target"&lt;/pre&gt;

&lt;p&gt;This pulls in the target unit &lt;tt&gt;printer.target&lt;/tt&gt; as soon as at least
one printer is plugged in (supporting all kinds of printer ports). All we now
have to do is make sure that our CUPS service is pulled in by
&lt;tt&gt;printer.target&lt;/tt&gt; and we are done. By placing &lt;tt&gt;WantedBy=printer.target
&lt;/tt&gt; line in the &lt;tt&gt;[Install]&lt;/tt&gt; section of the service file, a
&lt;tt&gt;Wants&lt;/tt&gt; dependency is created from &lt;tt&gt;printer.target&lt;/tt&gt; to
&lt;tt&gt;cups.service&lt;/tt&gt; as soon as the latter is enabled with &lt;tt&gt;systemctl
enable&lt;/tt&gt;. The indirection via &lt;tt&gt;printer.target&lt;/tt&gt; provides us with a
simple way to use &lt;tt&gt;systemctl enable&lt;/tt&gt; and &lt;tt&gt;systemctl disable&lt;/tt&gt; to
manage hardware activation of a service.&lt;/p&gt;

&lt;h5&gt;Path-based Activation in Detail&lt;/h5&gt;

&lt;p&gt;To ensure that CUPS is also started when there is a print job still queued
in the printing spool, we write a simple &lt;a href="http://0pointer.de/public/cups.path"&gt;&lt;tt&gt;cups.path&lt;/tt&gt;&lt;/a&gt; that
activates CUPS as soon as we find a file in &lt;tt&gt;/var/spool/cups&lt;/tt&gt;.&lt;/p&gt;

&lt;h5&gt;Boot-based Activation in Detail&lt;/h5&gt;

&lt;p&gt;Well, starting services on boot is obviously the most boring and well-known
way to spawn a service. This entire excercise was about making this unnecessary,
but we still need to support it for explicit print server machines. Since those
are probably the exception and not the common case we do not enable this kind
of activation by default, but leave it to the administrator to add it in when
he deems it necessary, with a simple command (&lt;tt&gt;ln -s
/lib/systemd/system/cups.service
/etc/systemd/system/multi-user.target.wants/&lt;/tt&gt; to be precise).&lt;/p&gt;

&lt;p&gt;So, now we have covered all four kinds of activation. To finalize our patch
we have a closer look at the &lt;tt&gt;[Install]&lt;/tt&gt; section of &lt;a href="http://0pointer.de/public/cups.service"&gt;&lt;tt&gt;cups.service&lt;/tt&gt;&lt;/a&gt;, i.e.
the part of the unit file that controls how &lt;tt&gt;systemctl enable
cups.service&lt;/tt&gt; and &lt;tt&gt;systemctl disable cups.service&lt;/tt&gt; will hook the
service into/unhook the service from the system. Since we don't want to start
cups at boot we do not place &lt;tt&gt;WantedBy=multi-user.target&lt;/tt&gt; in it like we
would do for those services. Instead we just place an &lt;tt&gt;Also=&lt;/tt&gt; line that
makes sure that &lt;a href="http://0pointer.de/public/cups.path"&gt;&lt;tt&gt;cups.path&lt;/tt&gt;&lt;/a&gt; and &lt;a href="http://0pointer.de/public/cups.socket"&gt;&lt;tt&gt;cups.socket&lt;/tt&gt;&lt;/a&gt; are
automatically also enabled if the user asks to enable &lt;tt&gt;cups.service&lt;/tt&gt;
(they are enabled according to the &lt;tt&gt;[Install]&lt;/tt&gt; sections in those unit
files).&lt;/p&gt;

&lt;p&gt;As last step we then integrate our work into the build system. In contrast
to SysV init scripts systemd unit files are supposed to be distribution
independent. Hence it is a good idea to include them in the upstream tarball.
Unfortunately CUPS doesn't use Automake, but Autoconf with a set of handwritten
Makefiles. This requires a bit more work to get our additions integrated, but
is not too difficult either. &lt;a href="http://0pointer.de/public/cups-0001-systemd-add-systemd-socket-activation-and-unit-files.patch"&gt;And
this is how our final patch looks like&lt;/a&gt;, after we commited our work and ran
&lt;tt&gt;git format-patch -1&lt;/tt&gt; on it to generate a pretty git patch.&lt;/p&gt;

&lt;p&gt;The next step of course is to get this patch integrated into the upstream
and Fedora packages (or whatever other distribution floats your boat). To make
this easy I have prepared &lt;a href="http://0pointer.de/public/cups-0001-Add-socket-activation-patch.patch"&gt;a
patch for Tim that makes the necessary packaging changes for Fedora 16&lt;/a&gt;, and
includes the patch intended for upstream linked above. Of course, ideally the
patch is merged upstream, however in the meantime we can already include it in
the Fedora packages.&lt;/p&gt;

&lt;p&gt;Note that CUPS was particularly easy to patch since it already supported
launchd-style activation, patching a service that doesn't support that yet is
only marginally more difficult. (Oh, and we have no plans to offer the complex
launchd API as compatibility kludge on Linux. It simply doesn't translate very
well, so don't even ask... ;-))&lt;/p&gt;

&lt;p&gt;And that finishes our little blog story. I hope this quick walkthrough how to add
socket activation (and the other forms of activation) to a package were
interesting to you, and will help you doing the same for your own packages. If you
have questions, our IRC channel &lt;tt&gt;#systemd&lt;/tt&gt; on freenode and
our &lt;a href="http://lists.freedesktop.org/mailman/listinfo/systemd-devel"&gt;mailing
list&lt;/a&gt; are available, and we are always happy to help!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 05 Jul 2011 00:46:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-07-05:/blog/projects/socket-activation2.html</guid><category>projects</category></item><item><title>Another interview</title><link>https://0pointer.net/blog/projects/developerworks-brasil.html</link><description>
                
&lt;p&gt;&lt;a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/752a690f-8e93-4948-b7a3-c060117e8665/entry/_entrevista_lennart_poettering"&gt;Here's
another interview with yours truly.&lt;/a&gt; It's on IBM developerWorks Brasil, so I hope
you understand some pt_BR.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 03 Jul 2011 16:33:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-07-03:/blog/projects/developerworks-brasil.html</guid><category>projects</category></item><item><title>Reminder!</title><link>https://0pointer.net/blog/projects/reminder.html</link><description>
                
&lt;p&gt;GNOMErs, the Desktop Summit in Berlin, Germany is approaching quickly!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://desktopsummit.org/program/workshops-bofs"&gt;Submit your BoF for the Desktop Summit BoF days NOW!&lt;/a&gt; Deadline is &lt;b&gt;July 3rd&lt;/b&gt;, this sunday!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://desktopsummit.org/news/call-for-volunteers"&gt;Sign up as a volunteer for the Desktop Summit NOW!&lt;/a&gt; Deadline is &lt;b&gt;July 18th&lt;/b&gt;!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 29 Jun 2011 23:20:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-06-29:/blog/projects/reminder.html</guid><category>projects</category></item><item><title>Impressions of Japan, Thailand and India</title><link>https://0pointer.net/blog/photos/india-bangkok-japan.html</link><description>
                
&lt;p&gt;It has been a while since I blogged photos of my various travels, although I
have visited quite a number of countries in the past 12 months, and travelled
overland in a number of them. Here are a few selected shots from three: India
(November/December), Thailand (January), Japan (June).&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=955"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-955.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=1289"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-1289.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=258"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-258.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=203"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-203.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=630"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-630.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=707"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-707.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=795"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-795.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=1038"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-1038.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=616"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-616.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=769"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-769.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=53"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-53.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=681"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-681.jpg" alt="Japan" width="120" height="80" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=1268"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-1268.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=125"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-125.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=1198"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-1198.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=1132"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-1132.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=983"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-983.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=874"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-874.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=387"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-387.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=751"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-751.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=721"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-721.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=1242"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-1242.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=692"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-692.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=632"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-632.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=377"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-377.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=815"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-815.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=163"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-163.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Japan%202011-06&amp;amp;photo=146"&gt;&lt;img src="http://0pointer.de/photos/galleries/Japan%202011-06/thumbs/img-146.jpg" alt="Japan" width="80" height="120" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;These pictures are from Kyoto, Nara and Takayama in Honshu, Japan.&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=821"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-821.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=236"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-236.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=722"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-722.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=717"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-717.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=455"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-455.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=163"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-163.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=261"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-261.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=256"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-256.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=805"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-805.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=547"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-547.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=669"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-669.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=402"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-402.jpg" alt="Thailand" width="120" height="80" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=794"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-794.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=785"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-785.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=771"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-771.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=763"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-763.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=753"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-753.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=776"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-776.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=726"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-726.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=708"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-708.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=200"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-200.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=657"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-657.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=599"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-599.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=613"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-613.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=381"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-381.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=562"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-562.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=441"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-441.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=368"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-368.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=316"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-316.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=687"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-687.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=208"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-208.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=90"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-90.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;All this is Bangkok, Thailand. Particular interest deserve the gold-based patterns used widely to adorn Thai architecture:&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=714"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-714.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=103"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-103.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=693"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-693.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=677"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-677.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=580"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-580.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=699"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-699.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=350"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-350.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=325"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-325.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Thailand%202011-01&amp;amp;photo=269"&gt;&lt;img src="http://0pointer.de/photos/galleries/Thailand%202011-01/thumbs/img-269.jpg" alt="Thailand" width="80" height="120" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;And finally India (one picture NSFW!):&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=108"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-108.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=206"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-206.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=245"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-245.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=274"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-274.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=487"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-487.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=335"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-335.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=428"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-428.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=491"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-491.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=244"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-244.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=689"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-689.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=655"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-655.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=938"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-938.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3600"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3600.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1042"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1042.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1146"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1146.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1248"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1248.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1339"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1339.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1386"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1386.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1380"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1380.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1509"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1509.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1799"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1799.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1871"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1871.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2336"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2336.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2415"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2415.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3403"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3403.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2660"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2660.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2675"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2675.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2715"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2715.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3197"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3197.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2986"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2986.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3064"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3064.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3098"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3098.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3191"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3191.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3234"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3234.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3254"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3254.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2804"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2804.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=977"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-977.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2612"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2612.jpg" alt="India" width="120" height="80" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1406"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1406.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1411"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1411.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=167"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-167.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=181"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-181.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=419"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-419.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=198"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-198.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=192"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-192.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=221"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-221.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=399"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-399.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3185"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3185.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=443"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-443.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3775"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3775.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=494"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-494.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=188"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-188.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1485"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1485.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1544"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1544.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1743"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1743.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3552"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3552.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1828"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1828.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2170"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2170.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2422"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2422.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2440"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2440.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2488"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2488.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2502"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2502.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2623"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2623.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2721"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2721.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=2875"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-2875.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3000"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3000.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3009"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3009.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3101"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3101.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3157"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3157.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=270"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-270.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3223"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3223.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3400"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3400.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3412"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3412.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=1749"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-1749.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3576"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3576.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3716"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3716.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=823"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-823.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202010-11&amp;amp;photo=3825"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%202010-11/thumbs/img-3825.jpg" alt="India" width="80" height="120" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;This is Mumbai, Ellora, Ajanta, Aurangabad (in Maharashtra); Mandu, Sanchi, Gwalior, Khajuraho (Madhya Pradesh); Orchha, Varanasi (Uttar Pradesh); Bangalore, Mysore (Karnataka).&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 25 Jun 2011 19:09:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-06-25:/blog/photos/india-bangkok-japan.html</guid><category>photos</category></item><item><title>Call For Volunteers</title><link>https://0pointer.net/blog/projects/call-for-volunteers.html</link><description>
                
&lt;p&gt;&lt;i&gt;The Desktop Summit 2011 in Berlin, Germany Needs Your Help!&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Are you attending the Desktop Summit? Are you interested in helping the GNOME and KDE communities organize this year's Summit? Do you want to work with other Free Software enthusiasts to make the Desktop Summit rock? Would you like to own one of the exclusive Desktop Summit Team T-Shirts?&lt;/p&gt;

&lt;p&gt;If so, please sign up as a volunteer for the Desktop Summit!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.desktopsummit.org/news/call-for-volunteers"&gt;Read the full &lt;b&gt;Call For Volunteers&lt;/b&gt;!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://psconboard.blogspot.com/2011/06/desktop-summit-2011-call-for-volunteers.html"&gt;Read Patricia's original announcement.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://wiki.desktopsummit.org/Volunteers"&gt;Or go directly and sign up as a volunteer.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 23 Jun 2011 17:32:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-06-23:/blog/projects/call-for-volunteers.html</guid><category>projects</category></item><item><title>Desktop Summit Workshops and BoFs Call for Participation</title><link>https://0pointer.net/blog/projects/dsbofcfp.html</link><description>
                
&lt;p&gt;The Desktop Summit &lt;a href="https://desktopsummit.org/program"&gt;schedule for
the talks and presentations&lt;/a&gt; has been published a couple of weeks ago. Now it
is time to open the 2nd Call for Participation, this time for Workshops and BoFs.&lt;/p&gt;

&lt;p&gt;If you'd like to run a workshop, BoF, hack session or training/teaching
session, then please &lt;a href="https://desktopsummit.org/program/workshops-bofs"&gt;submit it here&lt;/a&gt;. If
you do it will appear in the printed schedule and get a prominent time slot
assigned. BoFs, workshops, hack sessions and training/teaching sessions can
also be added after &lt;b&gt;the deadline of July 3rd&lt;/b&gt;, and even be registered
ad-hoc at the conference, but if you register your slot in advance we can make
sure people will find it in the printed schedule, will know about it, can plan
to attend it and we can do everything to make sure a lot of people show up.&lt;/p&gt;

&lt;p&gt;Note that BoF/workshop proposals are unrestricted, i.e. there is no program
committee that will accept or reject submissions: we have a lot of room and
we'll accept liberally what is submitted.&lt;/p&gt;

&lt;p&gt;For GNOMErs: this part of the conference is supposed to be much like the
Boston GNOME summit, but with a printed schedule. So please be welcome to
submit your sessions like you'd want to have them take place at the GNOME
summit as well.&lt;/p&gt;

&lt;p&gt;Also see &lt;a href="http://www.jonnor.com/2011/06/registration-open-for-workshops-bofs-at-the-desktopsummit-2011/"&gt;Jonnor's original announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, hurry, &lt;a href="https://desktopsummit.org/program/workshops-bofs"&gt;file your session
request right-away&lt;/a&gt; and before &lt;b&gt;July 3rd&lt;/b&gt;!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 20 Jun 2011 09:59:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-06-20:/blog/projects/dsbofcfp.html</guid><category>projects</category></item><item><title>Two Articles In c't</title><link>https://0pointer.net/blog/projects/ct.html</link><description>
                
&lt;p&gt;If you are into computers and live in Germany I am sure you know the c't
computer magazine. &lt;a href="http://www.heise.de/ct/inhalt/2011/13/172/"&gt;The
current edition 13/2011 (p. 172) contains two articles contributed by Thorsten
Leemhuis, Kay Sievers and yours truly on the topic of systemd&lt;/a&gt;. Awesome
read.  Now, run to your local kiosk and grab a c't and study the two articles.
Go now, quick!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 13 Jun 2011 11:45:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-06-13:/blog/projects/ct.html</guid><category>projects</category></item><item><title>Video Interview</title><link>https://0pointer.net/blog/projects/golem-video.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.golem.de/1105/83785.html"&gt;Golem.de has an interview with
yours truly.&lt;/a&gt; When I watched I learned so much! If you understand the German
language then you might too! (and only then because it is in Goethe's tongue).&lt;/p&gt;

&lt;object width="480" height="270"&gt;
&lt;param name="movie" value="http://video.golem.de/player/videoplayer.swf?id=4823&amp;amp;autoPl=false" /&gt;
&lt;param name="allowFullScreen" value="true" /&gt;
&lt;param name="AllowScriptAccess" value="always" /&gt;
&lt;embed src="http://video.golem.de/player/videoplayer.swf?id=4823&amp;amp;autoPl=false" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="480" height="270" /&gt;
&lt;/object&gt;

&lt;div style="width:480px; text-align:center; font-family:verdana,sans-serif;
font-size:0.8em;"&gt;&lt;a href="http://video.golem.de/oss/4823/interview-mit-lennart-poettering-entwickler-systemd.html"&gt;Video:
Interview mit Lennart Poettering, Entwickler Systemd&lt;/a&gt;&amp;nbsp;(7:14)&lt;/div&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 27 May 2011 22:02:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-05-27:/blog/projects/golem-video.html</guid><category>projects</category></item><item><title>systemd Documentation</title><link>https://0pointer.net/blog/projects/systemd-docs.html</link><description>
                
&lt;p&gt;&lt;a href="https://fedoraproject.org/get-fedora"&gt;Fedora 15 is out.&lt;/a&gt; Get it
while it is hot! It is probably the biggest distribution release of a all time
with being first in shipping both &lt;a href="http://gnome3.org/"&gt;GNOME 3&lt;/a&gt; and &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since this is the first distribution release based on systemd, it might be interesting to
read up on what it is all about. Here's a little compilation of the available
documentation for systemd.&lt;/p&gt;

&lt;h4&gt;The Manual Pages&lt;/h4&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/systemd.html"&gt;systemd(1)&lt;/a&gt;, covering general concepts of systemd.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/systemctl.html"&gt;systemctl(1)&lt;/a&gt;, covering the client control utility of systemd.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/systemd-cgls.html"&gt;systemd-cgls(1)&lt;/a&gt;, on a tool to show the systemd cgroup tree.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/systemd.unit.html"&gt;systemd.unit(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;systemd.exec(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.service.html"&gt;systemd.service(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.socket.html"&gt;systemd.socket(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.target.html"&gt;systemd.target(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.timer.html"&gt;systemd.timer(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.swap.html"&gt;systemd.swap(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.snapshot.html"&gt;systemd.snapshot(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.path.html"&gt;systemd.path(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.mount.html"&gt;systemd.mount(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.device.html"&gt;systemd.device(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.automount.html"&gt;systemd.automount(5)&lt;/a&gt;,
for writing systemd unit files.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/systemd-nspawn.html"&gt;systemd-nspawn(1)&lt;/a&gt;, on a tool for running simple containers.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/systemd-notify.html"&gt;systemd-notify(1)&lt;/a&gt;, on a tool for sending notifications to systemd.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/systemd.special.html"&gt;systemd.special(5)&lt;/a&gt;, with a list of systemd's special units.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/daemon.html"&gt;daemon(7)&lt;/a&gt;, on writing daemons.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/pam_systemd.html"&gt;pam_systemd(8)&lt;/a&gt;, on configuring user session settings.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/sd-daemon.html"&gt;sd-daemon(7)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/sd_listen_fds.html"&gt;sd_listen_fds(3)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/sd_notify.html"&gt;sd_notify(3)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/sd_is_fifo.html"&gt;sd_is_fifo(3)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/sd_booted.html"&gt;sd_booted(3)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/sd-readahead.html"&gt;sd-readahead(7)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/sd_readahead.html"&gt;sd_readahead(3)&lt;/a&gt;, covering the systemd API.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/systemd-ask-password.html"&gt;systemd-ask-password(1)&lt;/a&gt;, describing a tool for querying system passwords.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/systemd-tmpfiles.html"&gt;systemd-tmpfiles(8)&lt;/a&gt;, describing a tool for creating, deleting and cleaning up volatile and temporary files and directories.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/systemd.conf.html"&gt;systemd.conf(5)&lt;/a&gt;, describing the systemd main configuration file.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/binfmt.d.html"&gt;binfmt.d(5)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/hostname.html"&gt;hostname(5)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/locale.conf.html"&gt;locale.conf(5)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/machine-id.html"&gt;machine-id(5)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/machine-info.html"&gt;machine-info(5)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/modules-load.d.html"&gt;modules-load.d(5)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/os-release.html"&gt;os-release(5)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/sysctl.d.html"&gt;sysctl.d&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/tmpfiles.d.html"&gt;tmpfiles.d(5)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/vconsole.conf.html"&gt;vconsole.conf(5)&lt;/a&gt;, for the configuration files systemd standardizes.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/systemd-man/halt.html"&gt;halt(8)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/runlevel.html"&gt;runlevel(8)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/shutdown.html"&gt;shutdown(8)&lt;/a&gt;, &lt;a href="http://0pointer.de/public/systemd-man/telinit.html"&gt;telinit(8)&lt;/a&gt;, covering the SysV compatibility tools.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/systemd-man/"&gt;Here's the full list of all man pages.&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;The Blog Stories&lt;/h4&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/systemd.html"&gt;The original announcement blog story&lt;/a&gt;, lining out the ideas of systemd in much detail.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/systemd-update.html"&gt;The two status updates&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/systemd-update-2.html"&gt;since then&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;systemd for Administrators #1: Verifying Bootup&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;systemd for Administrators #2: Which Service Owns Which Processes?&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd for Administrators #3: How Do I Convert A SysV Init Script Into A systemd Service File?&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;systemd for Administrators #4: Killing Services&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/three-levels-of-off"&gt;systemd for Administrators #5: The Three Levels of "Off"&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/changing-roots.html"&gt;systemd for Administrators #6: Changing Roots&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;systemd for Administrators #7: The Blame Game&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files"&gt;systemd for Administrators #8: The New Configuration Files&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/why.html"&gt;Why systemd?&lt;/a&gt;, exploring why distributions should choose (and are choosing) systemd.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/socket-activation.html"&gt;systemd for Developers #1: Socket Activation&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://wiki.opennet.ru/Systemd_%D0%B4%D0%BB%D1%8F_%D0%B0%D0%B4%D0%BC%D0%B8%D0%BD%D0%B8%D1%81%D1%82%D1%80%D0%B0%D1%82%D0%BE%D1%80%D0%BE%D0%B2"&gt;Some of the systemd for Administrators blog posts are available in Russian language, too.&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;Other Documentation&lt;/h4&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/TipsAndTricks"&gt;Tips &amp;amp; Tricks&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/FrequentlyAskedQuestions"&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/InterfaceStabilityPromise"&gt;Interface Stability Promise&lt;/a&gt;, covering what you need to know when developing against systemd interfaces.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/PasswordAgents"&gt;Writing Password Agents&lt;/a&gt;, in case you want to add a systemd compatible password agent to the desktop of your preference.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd/hostnamed"&gt;On hostnamed&lt;/a&gt;, in case you want to add hostname changing UIs to your favourite desktop environment.&lt;/li&gt;

&lt;/ul&gt;

&lt;h4&gt;Fedora Documentation&lt;/h4&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a href="http://fedoraproject.org/wiki/Systemd"&gt;General Overview&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://fedoraproject.org/wiki/SysVinit_to_Systemd_Cheatsheet"&gt;SysVInit to systemd Cheatsheet&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://fedoraproject.org/wiki/How_to_debug_Systemd_problems"&gt;How to Debug systemd Problems&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="https://fedoraproject.org/wiki/Packaging:Guidelines:Systemd"&gt;systemd Packaging Guidelines&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;h4&gt;In The Press&lt;/h4&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a href="http://lwn.net/Articles/389149/"&gt;The original LWN article&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/752a690f-8e93-4948-b7a3-c060117e8665/entry/systemd_parte_1?lang=pt_br"&gt;B&amp;#xea;-&amp;#xe1;-b&amp;#xe1; do systemd&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/blog/projects/systemd-in-the-news.html"&gt;Press articles after the original announcement&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;h4&gt;Other Distributions' Documentation&lt;/h4&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a href="http://en.opensuse.org/SDB:Systemd"&gt;OpenSUSE&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://wiki.debian.org/systemd"&gt;Debian&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="https://wiki.ubuntu.com/systemd"&gt;Ubuntu&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://en.gentoo-wiki.com/wiki/Systemd"&gt;Gentoo&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="https://wiki.archlinux.org/index.php/Systemd"&gt;Arch&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;And, if you still have questions after all of this, &lt;a href="http://lists.freedesktop.org/mailman/listinfo/systemd-devel"&gt;please join
our mailing list&lt;/a&gt;, or our IRC channel &lt;tt&gt;#systemd&lt;/tt&gt; on
&lt;tt&gt;irc.freenode.org&lt;/tt&gt;. Alternatively, if you are looking for paid
consulting services for systemd &lt;a href="http://profusion.mobi/"&gt;contact our
friends at ProFUSION&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 24 May 2011 16:54:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-05-24:/blog/projects/systemd-docs.html</guid><category>projects</category></item><item><title>Desktop Summit Programme Published</title><link>https://0pointer.net/blog/projects/desktop-summit-schedule.html</link><description>
                
&lt;p&gt;The Paper Committee of the Desktop Summit 2011, in Berlin, Germany is happy
to announce that the conference programme is now published.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.desktopsummit.org/program"&gt;Go directly to the schedule.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.desktopsummit.org/press/program-announcement"&gt;Read the full announcement.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And yes, it is an absolutely rocking programme.&lt;/p&gt;

&lt;p&gt;See you in Berlin!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 20 May 2011 17:08:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-05-20:/blog/projects/desktop-summit-schedule.html</guid><category>projects</category></item><item><title>Plumbers Conference 2011</title><link>https://0pointer.net/blog/projects/lpc2011.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.linuxplumbersconf.org/2011/"&gt;The Linux Plumbers
Conference 2011 in Santa Rosa, CA, USA&lt;/a&gt; is coming nearer (Sep. 7-9).
Together with Kay Sievers I am running the Boot&amp;amp;Init track, and together with
Mark Brown the Audio track.&lt;/p&gt;

&lt;p&gt;For both tracks we still need proposals. So if you haven't submitted
anything yet, please consider doing so. And that quickly. i.e. if you can
arrange for it, last sunday would be best, since that was actually the final
deadline. However, the submission form is still open, so if you submit
something really, really quickly we'll ignore the absence of time travel and the calendar for a bit. So, go,
submit something.  Now.&lt;/p&gt;

&lt;p&gt;What are we looking for? Well, here's what I just posted on the &lt;a href="https://tango.0pointer.de/pipermail/pulseaudio-discuss/2011-May/010191.html"&gt;audio
related mailing lists&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;
So, please consider submitting something if you haven't done so yet. We
are looking for all kinds of technical talks covering everything audio
plumbing related: audio drivers, audio APIs, sound servers, pro audio,
consumer audio. If you can propose something audio related -- like talks
on media controller routing, on audio for ASOC/Embedded, submit
something! If you care for low-latency audio, submit something. If you
care about the Linux audio stack in general, submit something.

LPC is probably the most relevant technical conference on the general
Linux platform, so be sure that if you want your project, your work,
your ideas to be heard then this is the right forum for everything
related to the Linux stack. And the Audio track covers everything in our
Audio Stack, regardless whether it is pro or consumer audio.
&lt;/pre&gt;

&lt;p&gt;And here's what I posted to the &lt;a href="http://lists.freedesktop.org/archives/systemd-devel/2011-May/002428.html"&gt;init
related lists&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;So, please consider submitting something if you haven't done so yet. We
are looking for all kinds of technical talks covering everything from
the BIOS (i.e. CoreBoot and friends), over boot loaders (i.e. GRUB and
friends), to initramfs (i.e. Dracut and friends) and init systems
(i.e. systemd and friends). If you have something smart to say about any
of these areas or maybe about related tools (i.e. you wrote a fancy new
tool to measure boot performance) or fancy boot schemes in your
favourite Linux based OS (i.e. the new Meego zero second boot ;-)) then
don't hesitate to submit something on the LPC web site, in the Boot&amp;amp;Init
track!&lt;/pre&gt;

&lt;p&gt;And now, quickly, go to &lt;a href="http://www.linuxplumbersconf.org/2011/"&gt;the
LPC website&lt;/a&gt; and post your session proposal in the Audio resp. Boot&amp;Init; track! Thank you!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 19 May 2011 23:30:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-05-19:/blog/projects/lpc2011.html</guid><category>projects</category></item><item><title>Thanks</title><link>https://0pointer.net/blog/projects/thanks.html</link><description>
                
&lt;p&gt;As some of you might know Fedora 15 went Gold a couple of days ago. The
first big distribution based on systemd will be released 2011-05-24. Mark the date!&lt;/p&gt;

&lt;p&gt;In little over a year systemd went from nowhere to became a core piece of
Fedora. This wasn't possible without the numerous folks who worked with us on
getting systemd right, supplied patches, chased bugs, tested releases and posted
comments and generally made sure everything was in shape for the big
release.&lt;/p&gt;

&lt;p&gt;At this point we'd like to thank everybody who contributed and a few folks in
particular:&lt;/p&gt;

&lt;p&gt;&lt;i&gt;A. Costa
Adrian Spinu
Alexey Shabalin
Andreas Jaeger
Andrew Edmunds
Andrey Borzenkov
Bill Nottingham
Brandon Philips
Brendan Jones
Brett Witherspoon
Chris E Ferron
Christian Ruppert
Conrad Meyer
Daniel J Walsh
Dave Reisner
Eric Paris
Fabian Henze
Fabiano Fid&amp;ecirc;ncio
Florian Kriener
Franz Dietrich
Greg Kroah-Hartman
Gustavo Sverzut Barbieri
Harald Hoyer
James Laska
Jan Engelhardt
Jeff Mahoney
Jesse Zhang
J&amp;oacute;hann B. Gu&amp;eth;mundsson
Karel Zak
Koen Kooi
Lucas De Marchi
Ludwig Nussel
Luis Felipe Strano Moraes
Maarten Lankhorst
Malcolm Studd
Marc-Antoine Perennou
Martin Mikkelsen
Matthew Miller
Matthias Clasen
Matthias Schiffer
Michael Biebl
Michael Olbrich
Michael Tremer
Micha&amp;#322; Piotrowski
Michal Schmidt
Mike Kazantsev
Mike Kelly
Miklos Vajna
Milan Broz
Ozan &amp;Ccedil;a&amp;#287;layan
Paul Menzel
Pavol Rusnak
Rahul Sundaram
Rainer Gerhards
Ran Benita
Ray Strode
Robert Gerus
Sedat Dilek
Tero Roponen
Thierry Reding
Tollef Fog Heen
Tomasz Torcz
Tom Callaway
Tom Gundersen
Toshio Kuratomi
William Jon McCann
Wulf C. Krueger
Zbigniew J&amp;#281;drzejewski-Szmek&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;And everybody else who I (or git shortlog) forgot.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;Lennart and Kay&lt;/p&gt;

&lt;p&gt;BTW, the &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/InterfaceStabilityPromise"&gt;interface stability promise&lt;/a&gt; is valid now.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 19 May 2011 14:01:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-05-19:/blog/projects/thanks.html</guid><category>projects</category></item><item><title>systemd for Developers I</title><link>https://0pointer.net/blog/projects/socket-activation.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;
not only brings improvements for administrators and users, it also
brings a (small) number of new APIs with it. In this blog story (which might
become the first of a series) I hope to shed some light on one of the
most important new APIs in systemd:&lt;/p&gt;

&lt;h4&gt;Socket Activation&lt;/h4&gt;

&lt;p&gt;In the &lt;a href="http://0pointer.de/blog/projects/systemd.html"&gt;original blog
story about systemd&lt;/a&gt; I tried to explain why socket activation is a
wonderful technology to spawn services. Let's reiterate the background
here a bit.&lt;/p&gt;

&lt;p&gt;The basic idea of socket activation is not new. The inetd
superserver was a standard component of most Linux and Unix systems
since time began: instead of spawning all local Internet services
already at boot, the superserver would listen on behalf of the
services and whenever a connection would come in an instance of the
respective service would be spawned. This allowed relatively weak
machines with few resources to offer a big variety of services at the
same time. However it quickly got a reputation for being somewhat
slow: since daemons would be spawned for each incoming connection a
lot of time was spent on forking and initialization of the services
-- once for each connection, instead of once for them all.&lt;/p&gt;

&lt;p&gt;Spawning one instance per connection was how inetd was primarily
used, even though inetd actually understood another mode: on the first
incoming connection it would notice this via &lt;tt&gt;poll()&lt;/tt&gt; (or
&lt;tt&gt;select()&lt;/tt&gt;) and spawn a single instance for all future
connections. (This was controllable with the
&lt;tt&gt;wait&lt;/tt&gt;/&lt;tt&gt;nowait&lt;/tt&gt; options.) That way the first connection
would be slow to set up, but subsequent ones would be as fast as with
a standalone service. In this mode inetd would work in a true
on-demand mode: a service would be made available lazily when it was
required.&lt;/p&gt;

&lt;p&gt;inetd's focus was clearly on AF_INET (i.e. Internet) sockets. As
time progressed and Linux/Unix left the server niche and became
increasingly relevant on desktops, mobile and embedded environments
inetd was somehow lost in the troubles of time. Its reputation for
being slow, and the fact that Linux' focus shifted away from only
Internet servers made a Linux machine running inetd (or one of its newer
implementations, like xinetd) the exception, not the rule.&lt;/p&gt;

&lt;p&gt;When Apple engineers worked on optimizing the MacOS boot time they
found a new way to make use of the idea of socket activation: they
shifted the focus away from AF_INET sockets towards AF_UNIX
sockets. And they noticed that on-demand socket activation was only
part of the story: much more powerful is socket activation when used
for &lt;i&gt;all&lt;/i&gt; local services including those which need to be started
anyway on boot. They implemented these ideas in &lt;a href="http://launchd.macosforge.org/"&gt;launchd&lt;/a&gt;, a central building
block of modern MacOS X systems, and probably the main reason why
MacOS is so fast booting up.&lt;/p&gt;

&lt;p&gt;But, before we continue, let's have a closer look what the benefits
of socket activation for non-on-demand, non-Internet services in
detail are. Consider the four services Syslog, D-Bus, Avahi and the
Bluetooth daemon. D-Bus logs to Syslog, hence on traditional Linux
systems it would get started after Syslog. Similarly, Avahi requires
Syslog and D-Bus, hence would get started after both. Finally
Bluetooth is similar to Avahi and also requires Syslog and D-Bus but
does not interface at all with Avahi. Sinceoin a traditional
SysV-based system only one service can be in the process of getting
started at a time, the following serialization of startup would take
place: Syslog &amp;#x2192; D-Bus &amp;#x2192; Avahi &amp;#x2192; Bluetooth (Of course, Avahi and
Bluetooth could be started in the opposite order too, but we have to
pick one here, so let's simply go alphabetically.). To illustrate
this, here's a plot showing the order of startup beginning with system
startup (at the top).&lt;/p&gt;

&lt;a href="http://0pointer.de/public/parallelization.png"&gt;&lt;img src="http://0pointer.de/public/parallelization-small.png" width="400" height="257" alt="Parallelization plot" /&gt;&lt;/a&gt;

&lt;p&gt;Certain distributions tried to improve this strictly serialized
start-up: since Avahi and Bluetooth are independent from each other,
they can be started simultaneously. The parallelization is increased,
the overall startup time slightly smaller. (This is visualized in the
middle part of the plot.)&lt;/p&gt;

&lt;p&gt;Socket activation makes it possible to start all four services
completely simultaneously, without any kind of ordering. Since the
creation of the listening sockets is moved outside of the daemons
themselves we can start them all at the same time, and they are able
to connect to each other's sockets right-away. I.e. in a single step
the &lt;tt&gt;/dev/log&lt;/tt&gt; and &lt;tt&gt;/run/dbus/system_bus_socket&lt;/tt&gt; sockets
are created, and in the next step all four services are spawned
simultaneously. When D-Bus then wants to log to syslog, it just writes
its messages to &lt;tt&gt;/dev/log&lt;/tt&gt;. As long as the socket buffer does
not run full it can go on immediately with what else it wants to do
for initialization. As soon as the syslog service catches up it will
process the queued messages. And if the socket buffer runs full then
the client logging will temporarily block until the socket is writable
again, and continue the moment it can write its log messages. That
means the scheduling of our services is entirely done by the kernel:
from the userspace perspective all services are run at the same time,
and when one service cannot keep up the others needing it will
temporarily block on their request but go on as soon as these
requests are dispatched. All of this is completely automatic and
invisible to userspace. Socket activation hence allows us to
drastically parallelize start-up, enabling simultaneous start-up of
services which previously were thought to strictly require
serialization. Most Linux services use sockets as communication
channel. Socket activation allows starting of clients and servers of
these channels at the same time.&lt;/p&gt;

&lt;p&gt;But it's not just about parallelization. It offers a number of
other benefits:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;We no longer need to configure dependencies explicitly. Since the
sockets are initialized before all services they are simply available,
and no userspace ordering of service start-up needs to take place
anymore. Socket activation hence drastically simplifies configuration
and development of services.&lt;/li&gt;

&lt;li&gt;If a service dies its listening socket stays around, not losing a
single message. After a restart of the crashed service it can continue
right where it left off.&lt;/li&gt;

&lt;li&gt;If a service is upgraded we can restart the service while keeping
around its sockets, thus ensuring the service is continously
responsive. Not a single connection is lost during the upgrade.&lt;/li&gt;

&lt;li&gt;We can even replace a service during runtime in a way that is
invisible to the client. For example, all systems running systemd
start up with a tiny syslog daemon at boot which passes all log
messages written to &lt;tt&gt;/dev/log&lt;/tt&gt; on to the kernel message
buffer. That way we provide reliable userspace logging starting from
the first instant of boot-up. Then, when the actual rsyslog daemon is
ready to start we terminate the mini daemon and replace it with the
real daemon. And all that while keeping around the original logging
socket and sharing it between the two daemons and not losing a single
message. Since rsyslog flushes the kernel log buffer to disk after
start-up all log messages from the kernel, from early-boot and from
runtime end up on disk.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;For another explanation of this idea consult &lt;a href="http://0pointer.de/blog/projects/systemd.html"&gt;the original blog
story about systemd&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Socket activation has been available in systemd since its
inception. On Fedora 15 a number of services have been modified to
implement socket activation, including Avahi, D-Bus and rsyslog (to continue with the example above).&lt;/p&gt;

&lt;p&gt;systemd's socket activation is quite comprehensive. Not only classic
sockets are support but related technologies as well:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;AF_UNIX sockets, in the flavours SOCK_DGRAM, SOCK_STREAM and SOCK_SEQPACKET; both in the filesystem and in the abstract namespace&lt;/li&gt;

&lt;li&gt;AF_INET sockets, i.e. TCP/IP and UDP/IP; both IPv4 and IPv6&lt;/li&gt;

&lt;li&gt;Unix named pipes/FIFOs in the filesystem&lt;/li&gt;

&lt;li&gt;AF_NETLINK sockets, to subscribe to certain kernel features. This
is currently used by udev, but could be useful for other
netlink-related services too, such as audit.&lt;/li&gt;

&lt;li&gt;Certain special files like &lt;tt&gt;/proc/kmsg&lt;/tt&gt; or device nodes like &lt;tt&gt;/dev/input/*&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;POSIX Message Queues&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;A service capable of socket activation must be able to receive its
preinitialized sockets from systemd, instead of creating them
internally. For most services this requires (minimal)
patching. However, since systemd actually provides inetd compatibility
a service working with inetd will also work with systemd -- which is
quite useful for services like sshd for example.&lt;/p&gt;

&lt;p&gt;So much about the background of socket activation, let's now have a
look how to patch a service to make it socket activatable. Let's start
with a theoretic service &lt;tt&gt;foobard&lt;/tt&gt;. (In a later blog post we'll focus on
real-life example.)&lt;/p&gt;

&lt;p&gt;Our little (theoretic) service includes code like the following for
creating sockets (most services include code like this in one way or
another):&lt;/p&gt;

&lt;pre&gt;
&lt;b&gt;/* Source Code Example #1: ORIGINAL, NOT SOCKET-ACTIVATABLE SERVICE */&lt;/b&gt;
...
union {
        struct sockaddr sa;
        struct sockaddr_un un;
} sa;
int fd;

fd = socket(AF_UNIX, SOCK_STREAM, 0);
if (fd &amp;lt; 0) {
        fprintf(stderr, "socket(): %m\n");
        exit(1);
}

memset(&amp;amp;sa, 0, sizeof(sa));
sa.un.sun_family = AF_UNIX;
strncpy(sa.un.sun_path, "/run/foobar.sk", sizeof(sa.un.sun_path));

if (bind(fd, &amp;amp;sa.sa, sizeof(sa)) &amp;lt; 0) {
        fprintf(stderr, "bind(): %m\n");
        exit(1);
}

if (listen(fd, SOMAXCONN) &amp;lt; 0) {
        fprintf(stderr, "listen(): %m\n");
        exit(1);
}
...
&lt;/pre&gt;

&lt;p&gt;A socket activatable service may use the following code instead:&lt;/p&gt;

&lt;pre&gt;
&lt;b&gt;/* Source Code Example #2: UPDATED, SOCKET-ACTIVATABLE SERVICE */&lt;/b&gt;
...
#include "sd-daemon.h"
...
int fd;

if (sd_listen_fds(0) != 1) {
        fprintf(stderr, "No or too many file descriptors received.\n");
        exit(1);
}

fd = SD_LISTEN_FDS_START + 0;
...
&lt;/pre&gt;

&lt;p&gt;systemd might pass you more than one socket (based on
configuration, see below). In this example we are interested in one
only. &lt;a href="http://0pointer.de/public/systemd-man/sd_listen_fds.html"&gt;sd_listen_fds()&lt;/a&gt;
returns how many file descriptors are passed. We simply compare that
with 1, and fail if we got more or less. The file descriptors systemd
passes to us are inherited one after the other beginning with fd
#3. (SD_LISTEN_FDS_START is a macro defined to 3). Our code hence just
takes possession of fd #3.&lt;/p&gt;

&lt;p&gt;As you can see this code is actually much shorter than the
original. This of course comes at the price that our little service
with this change will no longer work in a non-socket-activation
environment. With minimal changes we can adapt our example to work nicely
both with and without socket activation:&lt;/p&gt;

&lt;pre&gt;
&lt;b&gt;/* Source Code Example #3: UPDATED, SOCKET-ACTIVATABLE SERVICE WITH COMPATIBILITY */&lt;/b&gt;
...
#include "sd-daemon.h"
...
int fd, n;

n = sd_listen_fds(0);
if (n &gt; 1) {
        fprintf(stderr, "Too many file descriptors received.\n");
        exit(1);
} else if (n == 1)
        fd = SD_LISTEN_FDS_START + 0;
else {
        union {
                struct sockaddr sa;
                struct sockaddr_un un;
        } sa;

        fd = socket(AF_UNIX, SOCK_STREAM, 0);
        if (fd &amp;lt; 0) {
                fprintf(stderr, "socket(): %m\n");
                exit(1);
        }

        memset(&amp;amp;sa, 0, sizeof(sa));
        sa.un.sun_family = AF_UNIX;
        strncpy(sa.un.sun_path, "/run/foobar.sk", sizeof(sa.un.sun_path));

        if (bind(fd, &amp;amp;sa.sa, sizeof(sa)) &amp;lt; 0) {
                fprintf(stderr, "bind(): %m\n");
                exit(1);
        }

        if (listen(fd, SOMAXCONN) &amp;lt; 0) {
                fprintf(stderr, "listen(): %m\n");
                exit(1);
        }
}
...
&lt;/pre&gt;

&lt;p&gt;With this simple change our service can now make use of socket
activation but still works unmodified in classic environments. Now,
let's see how we can enable this service in systemd. For this we have
to write two systemd unit files: one describing the socket, the other
describing the service. First, here's &lt;tt&gt;foobar.socket&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;
[Socket]
ListenStream=/run/foobar.sk

[Install]
WantedBy=sockets.target
&lt;/pre&gt;

&lt;p&gt;And here's the matching service file &lt;tt&gt;foobar.service&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;
[Service]
ExecStart=/usr/bin/foobard
&lt;/pre&gt;

&lt;p&gt;If we place these two files in &lt;tt&gt;/etc/systemd/system&lt;/tt&gt; we can
enable and start them:&lt;/p&gt;

&lt;pre&gt;# systemctl enable foobar.socket
# systemctl start foobar.socket&lt;/pre&gt;

&lt;p&gt;Now our little socket is listening, but our service not running
yet. If we now connect to &lt;tt&gt;/run/foobar.sk&lt;/tt&gt; the service will be
automatically spawned, for on-demand service start-up. With a
modification of &lt;tt&gt;foobar.service&lt;/tt&gt; we can start our service
already at startup, thus using socket activation only for
parallelization purposes, not for on-demand auto-spawning anymore:&lt;/p&gt;

&lt;pre&gt;
[Service]
ExecStart=/usr/bin/foobard

&lt;b&gt;[Install]
WantedBy=multi-user.target&lt;/b&gt;
&lt;/pre&gt;

&lt;p&gt;And now let's enable this too:&lt;/p&gt;

&lt;pre&gt;# systemctl enable foobar.service
# systemctl start foobar.service&lt;/pre&gt;

&lt;p&gt;Now our little daemon will be started at boot and on-demand,
whatever comes first. It can be started fully in parallel with its
clients, and when it dies it will be automatically restarted when it
is used the next time.&lt;/p&gt;

&lt;p&gt;A single .socket file can include multiple ListenXXX stanzas, which
is useful for services that listen on more than one socket. In this
case all configured sockets will be passed to the service in the exact
order they are configured in the socket unit file. &lt;a href="http://0pointer.de/public/systemd-man/systemd.socket.html"&gt;Also,
you may configure various socket settings in the .socket
files.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In real life it's a good idea to include description strings in
these unit files, to keep things simple we'll leave this out of our
example. Speaking of real-life: our next installment will cover an
actual real-life example. We'll add socket activation to the CUPS
printing server.&lt;/p&gt;

&lt;p&gt;The &lt;tt&gt;sd_listen_fds()&lt;/tt&gt; function call is defined in &lt;a href="http://cgit.freedesktop.org/systemd/plain/src/sd-daemon.h"&gt;sd-daemon.h&lt;/a&gt;
and &lt;a href="http://cgit.freedesktop.org/systemd/plain/src/sd-daemon.c"&gt;sd-daemon.c&lt;/a&gt;. These
two files are currently drop-in .c sources which projects should
simply copy into their source tree. Eventually we plan to turn this
into a proper shared library, however using the drop-in files allows
you to compile your project in a way that is compatible with socket
activation even without any compile time dependencies on
systemd. &lt;tt&gt;sd-daemon.c&lt;/tt&gt; is liberally licensed, should compile
fine on the most exotic Unixes and the algorithms are trivial enough
to be reimplemented with very little code if the license should
nonetheless be a problem for your project. &lt;tt&gt;sd-daemon.c&lt;/tt&gt;
contains a couple of other API functions besides
&lt;tt&gt;sd_listen_fds()&lt;/tt&gt; that are useful when implementing socket
activation in a project. For example, there's &lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/sd_is_fifo.html"&gt;sd_is_socket()&lt;/a&gt;&lt;/tt&gt;
which can be used to distuingish and identify particular sockets when
a service gets passed more than one.&lt;/p&gt;

&lt;p&gt;Let me point out that the interfaces used here are in no way bound
directly to systemd. They are generic enough to be implemented in
other systems as well. We deliberately designed them as simple and
minimal as possible to make it possible for others to adopt similar
schemes.&lt;/p&gt;

&lt;p&gt;Stay tuned for the next installment. As mentioned, it will cover a
real-life example of turning an existing daemon into a
socket-activatable one: the CUPS printing service. However, I hope
this blog story might already be enough to get you started if you plan
to convert an existing service into a socket activatable one. We
invite everybody to convert upstream projects to this scheme. If you
have any questions join us on &lt;tt&gt;#systemd&lt;/tt&gt; on freenode.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 18 May 2011 22:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-05-18:/blog/projects/socket-activation.html</guid><category>projects</category></item><item><title>B√™-√°-b√° do systemd</title><link>https://0pointer.net/blog/projects/be-a-ba-do-systemd.html</link><description>
                
&lt;p&gt;&lt;a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/752a690f-8e93-4948-b7a3-c060117e8665/entry/systemd_parte_1"&gt;Pablo
Hess&lt;/a&gt; has been posting a series of articles on &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; on IBM DeveloperWorks
Brasil. &lt;a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/752a690f-8e93-4948-b7a3-c060117e8665/entry/systemd_parte_1"&gt;So,
if you&lt;/a&gt; &lt;a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/752a690f-8e93-4948-b7a3-c060117e8665/entry/systemd_parte_2"&gt;speak
portuguese&lt;/a&gt; &lt;a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/752a690f-8e93-4948-b7a3-c060117e8665/entry/systemd_parte_3"&gt;head
over&lt;/a&gt; &lt;a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/752a690f-8e93-4948-b7a3-c060117e8665/entry/systemd_parte_4"&gt;there
and&lt;/a&gt; &lt;a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/752a690f-8e93-4948-b7a3-c060117e8665/entry/systemd_parte_5"&gt;have
a&lt;/a&gt; &lt;a href="https://www.ibm.com/developerworks/mydeveloperworks/blogs/752a690f-8e93-4948-b7a3-c060117e8665/entry/systemd_parte_6"&gt;look&lt;/a&gt;!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 17 May 2011 15:12:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-05-17:/blog/projects/be-a-ba-do-systemd.html</guid><category>projects</category></item><item><title>PulseAudio Saves Power</title><link>https://0pointer.net/blog/projects/pa-and-power.html</link><description>
                #nocomments yes

&lt;p&gt;&lt;a href="http://linux-tipps.blogspot.com/2011/04/power-performance-of-pulseaudio-alsa.html"&gt;D.
Jansen has put up a blog story&lt;/a&gt; including some power saving results when
running &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; on modern HDA drivers.
This shows off some work Pierre-Louis Bossart from Intel did on the HDA drivers
which now enables the timer-based scheduling code in PulseAudio I added quite
some time ago to come to its full potential. You can save half a Watt and
reduce wakeups while playing audio to 1 wakeup/s.&lt;/p&gt;

&lt;p&gt;Previously there was little public profiling data available about the
benefits PA brings you for low-power devices. Thanks to Dennis' data there's now
public data available that hopefully explains why PA is the best choice for
low-power devices as well as desktops. Hopefully this cleans up some misconceptions.&lt;/p&gt;

&lt;p&gt;Pierre-Louis, thanks for your work!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; &lt;a href="http://arunraghavan.net/2011/05/more-pulseaudio-power-goodness/"&gt;Arun Raghavan has posted a follow-up to this.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 16 May 2011 23:58:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-05-16:/blog/projects/pa-and-power.html</guid><category>projects</category></item><item><title>systemd for Administrators as PDF</title><link>https://0pointer.net/blog/projects/systemd-pdf.html</link><description>
                
&lt;p&gt;&lt;a href="http://psankar.blogspot.com/"&gt;Sankarasivasubramanian
Pasupathilingam&lt;/a&gt; &lt;a href="http://0pointer.de/public/systemd-ebook-psankar.pdf"&gt;has put together a
PDF&lt;/a&gt; of my ongoing &lt;a href="http://0pointer.de/blog/projects/the-new-configuration-files.html"&gt;systemd
for Administrators series&lt;/a&gt;. This might be handy for reading on an ebook
reader or similar.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 10 May 2011 17:31:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-05-10:/blog/projects/systemd-pdf.html</guid><category>projects</category></item><item><title>Why systemd?</title><link>https://0pointer.net/blog/projects/why.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; is
still a young project, but it is not a baby anymore. The &lt;a href="http://0pointer.de/blog/projects/systemd.html"&gt;initial
announcement&lt;/a&gt; I posted precisely a year ago. Since then most of the
big distributions have decided to adopt it in one way or another, many
smaller distributions have already switched. The first big
distribution with systemd by default will be Fedora 15, due end of
May. It is expected that the others will follow the lead a bit later
(&lt;a href="http://www.ubuntu.com/"&gt;with one exception&lt;/a&gt;). Many
embedded developers have already adopted it too, and there's even a &lt;a href="http://profusion.mobi/"&gt;company specializing on engineering and
consulting services for systemd&lt;/a&gt;. In short: within one year
systemd became a really successful project.&lt;/p&gt;

&lt;p&gt;However, there are still folks who we haven't won over yet. If you
fall into one of the following categories, then please have a look on
the comparison of init systems below:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;You are working on an embedded project and are wondering whether
it should be based on systemd.&lt;/li&gt;

&lt;li&gt;You are a user or administrator and wondering which distribution
to pick, and are pondering whether it should be based on systemd or
not.&lt;/li&gt;

&lt;li&gt;You are a user or administrator and wondering why your favourite
distribution has switched to systemd, if everything already worked so
well before.&lt;/li&gt;

&lt;li&gt;You are developing a distribution that hasn't switched yet, and
you are wondering whether to invest the work and go systemd.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;And even if you don't fall into any of these categories, you might still
find the comparison interesting.&lt;/p&gt;

&lt;p&gt;We'll be comparing the three most relevant init systems for Linux:
sysvinit, Upstart and systemd. Of course there are other init systems
in existance, but they play virtually no role in the big
picture. Unless you run Android (which is a completely different beast
anyway), you'll almost definitely run one of these three init systems
on your Linux kernel. (OK, or busybox, but then you are basically not
running any init system at all.) Unless you have a soft spot for
exotic init systems there's little need to look further. Also, I am
kinda lazy, and don't want to spend the time on analyzing those other
systems in enough detail to be completely fair to them.&lt;/p&gt;

&lt;p&gt;Speaking of fairness: I am of course one of the creators of
systemd. I will try my best to be fair to the other two contenders,
but in the end, take it with a grain of salt. I am sure though that
should I be grossly unfair or otherwise incorrect somebody will point
it out in the comments of this story, so consider having a look on
those, before you put too much trust in what I say.&lt;/p&gt;

&lt;p&gt;We'll look at the currently implemented features in a released
version. Grand plans don't count.&lt;/p&gt;

&lt;h4&gt;General Features&lt;/h4&gt;

&lt;table border="1"&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;sysvinit&lt;/th&gt;
&lt;th&gt;Upstart&lt;/th&gt;
&lt;th&gt;systemd&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Interfacing via D-Bus&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Shell-free bootup&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Modular C coded early boot services included&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Read-Ahead&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;sup&gt;[1]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Socket-based Activation&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Socket-based Activation: inetd compatibility&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Bus-based Activation&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;sup&gt;[3]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Device-based Activation&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;sup&gt;[4]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Configuration of device dependencies with udev rules&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Path-based Activation (inotify)&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Timer-based Activation&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Mount handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;sup&gt;[5]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fsck handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;sup&gt;[5]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Quota handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Automount handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Swap handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Snapshotting of system state&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;XDG_RUNTIME_DIR Support&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Optionally kills remaining processes of users logging out&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Linux Control Groups Integration&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Audit record generation for started services&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SELinux integration&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PAM integration&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Encrypted hard disk handling (LUKS)&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SSL Certificate/LUKS Password handling, including Plymouth, Console, wall(1), TTY and GNOME agents&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Network Loopback device handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;binfmt_misc handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;System-wide locale handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Console and keyboard setup&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Infrastructure for creating, removing, cleaning up of temporary and volatile files&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Handling for &lt;tt&gt;/proc/sys&lt;/tt&gt; sysctl&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Plymouth integration&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Save/restore random seed&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Static loading of kernel modules&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Automatic serial console handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Unique Machine ID handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Dynamic host name and machine meta data handling&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Reliable termination of services&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Early boot /dev/log logging&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Minimal kmsg-based syslog daemon for embedded use&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Respawning on service crash without losing connectivity&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Gapless service upgrades&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Graphical UI&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Built-In Profiling and Tools&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Instantiated services&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;PolicyKit integration&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Remote access/Cluster support built into client tools&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Can list all processes of a service&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Can identify service of a process&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Automatic per-service CPU cgroups to even out CPU usage between them&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Automatic per-user cgroups&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SysV compatibility&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SysV services controllable like native services&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SysV-compatible /dev/initctl&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Reexecution with full serialization of state&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Interactive boot-up&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;sup&gt;[6]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;sup&gt;[6]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Container support (as advanced chroot() replacement)&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Dependency-based bootup&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;sup&gt;[7]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Disabling of services without editing files&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Masking of services without editing files&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Robust system shutdown within PID 1&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Built-in kexec support&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Dynamic service generation&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Upstream support in various other OS components&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Service files compatible between distributions&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Signal delivery to services&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Reliable termination of user sessions before shutdown&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;utmp/wtmp support&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Easily writable, extensible and parseable service files, suitable for manipulation with enterprise management tools&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;[1]&lt;/sup&gt; Read-Ahead implementation for Upstart available in separate package ureadahead, requires non-standard kernel patch.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;[2]&lt;/sup&gt; Socket activation implementation for Upstart available as preview, lacks parallelization support hence entirely misses the point of socket activation.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;[3]&lt;/sup&gt; Bus activation implementation for Upstart posted as patch, not merged.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;[4]&lt;/sup&gt; udev device event bridge implementation for Upstart available as preview, forwards entire udev database into Upstart, not practical.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;[5]&lt;/sup&gt; Mount handling utility mountall for Upstart available in separate package, covers only boot-time mounts, very limited dependency system.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;[6]&lt;/sup&gt; Some distributions offer this implemented in shell.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;[7]&lt;/sup&gt; LSB init scripts support this, if they are used.&lt;/small&gt;&lt;/p&gt;

&lt;h4&gt;Available Native Service Settings&lt;/h4&gt;

&lt;table border="1"&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;sysvinit&lt;/th&gt;
&lt;th&gt;Upstart&lt;/th&gt;
&lt;th&gt;systemd&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;OOM Adjustment&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;sup&gt;[1]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Working Directory&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Root Directory (chroot())&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Environment Variables&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Environment Variables from external file&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Resource Limits&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td&gt;some&lt;sup&gt;[2]&lt;/sup&gt;&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;umask&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;User/Group/Supplementary Groups&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;IO Scheduling Class/Priority&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CPU Scheduling Nice Value&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CPU Scheduling Policy/Priority&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CPU Scheduling Reset on fork() control&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;CPU affinity&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Timer Slack&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Capabilities Control&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Secure Bits Control&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Control Group Control&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;High-level file system namespace control: making directories inacessible&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;High-level file system namespace control: making directories read-only&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;High-level file system namespace control: private /tmp&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;High-level file system namespace control: mount inheritance&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Input on Console&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Output on Syslog&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Output on kmsg/dmesg&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Output on arbitrary TTY&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Kill signal control&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Conditional execution: by identified CPU virtualization/container&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Conditional execution: by file existance&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Conditional execution: by security framework&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Conditional execution: by kernel command line&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;[1]&lt;/sup&gt; Upstart supports only the deprecated oom_score_adj mechanism, not the current oom_adj logic.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;sup&gt;[2]&lt;/sup&gt; Upstart lacks support for RLIMIT_RTTIME and RLIMIT_RTPRIO.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Note that some of these options are relatively easily added to SysV
init scripts, by editing the shell sources. The table above focusses
on easily accessible options that do not require source code
editing.&lt;/p&gt;

&lt;h4&gt;Miscellaneous&lt;/h4&gt;

&lt;table border="1"&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;sysvinit&lt;/th&gt;
&lt;th&gt;Upstart&lt;/th&gt;
&lt;th&gt;systemd&lt;/th&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Maturity&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;&amp;gt; 15 years&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;6 years&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;1 year&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Specialized professional consulting and engineering services available&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;SCM&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;Subversion&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;Bazaar&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;git&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Copyright-assignment-free contributing&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;td style="background-color: #ff7f7f"&gt;no&lt;/td&gt;
&lt;td style="background-color: #7fff7f"&gt;yes&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;h4&gt;Summary&lt;/h4&gt;

&lt;p&gt;As the tables above hopefully show in all clarity systemd
has left behind both sysvinit and Upstart in almost every
aspect. With the exception of the project's age/maturity systemd wins
in every category. At this point in time it will be very hard for
sysvinit and Upstart to catch up with the features systemd provides
today. In one year we managed to push systemd forward &lt;i&gt;much&lt;/i&gt; further
than Upstart has been pushed in six.&lt;/p&gt;

&lt;p&gt;It is our intention to drive forward the development of the Linux
platform with systemd. In the next release cycle we will focus more
strongly on providing the same features and speed improvement we
already offer for the system to the user login session. This will
bring much closer integration with the other parts of the OS and
applications, making the most of the features the service manager
provides, and making it available to login sessions. Certain
components such as ConsoleKit will be made redundant by these
upgrades, and services relying on them will be updated. The
burden for maintaining these then obsolete components
will be passed on the vendors who plan to continue to rely on
them.&lt;/p&gt;

&lt;p&gt;If you are wondering whether or not to adopt systemd, then systemd
obviously wins when it comes to mere features. Of course that should
not be the only aspect to keep in mind. In the long run, sticking with
the existing infrastructure (such as ConsoleKit) comes at a price:
porting work needs to take place, and additional maintainance work for
bitrotting code needs to be done. Going it on your own means increased
workload.&lt;/p&gt;

&lt;p&gt;That said, adopting systemd is also not free. Especially if you
made investments in the other two solutions adopting systemd means
work. The basic work to adopt systemd is relatively minimal for
porting over SysV systems (since compatibility is provided), but can
mean substantial work when coming from Upstart. If you plan to go for
a 100% systemd system without any SysV compatibility (recommended for
embedded, long run goal for the big distributions) you need to be
willing to invest some work to rewrite init scripts as simple systemd
unit files.&lt;/p&gt;

&lt;p&gt;systemd is in the process of becoming a comprehensive, integrated
and modular platform providing everything needed to bootstrap and
maintain an operating system's userspace. It includes C rewrites of
all basic early boot init scripts that are shipped with the various
distributions. Especially for the embedded case adopting systemd
provides you in one step with almost everything you need, and you can
pick the modules you want. The other two init systems are singular
individual components, which to be useful need a great number of
additional components with differing interfaces. The emphasis of
systemd to provide a platform instead of just a component allows for
closer integration, and cleaner APIs. Sooner or later this will
trickle up to the applications. Already, there are accepted XDG
specifications (e.g. XDG basedir spec, more specifically
XDG_RUNTIME_DIR) that are not supported on the other init systems.&lt;/p&gt;

&lt;p&gt;systemd is also a big opportunity for Linux standardization. Since
it standardizes many interfaces of the system that previously have
been differing on every distribution, on every implementation,
adopting it helps to work against the balkanization of the Linux
interfaces. Choosing systemd means redefining more closely
what the Linux platform is about. This improves the lifes of
programmers, users and administrators alike.&lt;/p&gt;

&lt;p&gt;I believe that momentum is clearly with systemd. We invite you to
join our community and be part of that momentum.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 28 Apr 2011 23:16:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-04-28:/blog/projects/why.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part VIII</title><link>https://0pointer.net/blog/projects/the-new-configuration-files.html</link><description>
                
&lt;p&gt;Another episode of &lt;a href="http://0pointer.de/blog/projects/blame-game.html"&gt;my&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;The New Configuration Files&lt;/h4&gt;

&lt;p&gt;One of the formidable new features of &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; is
that it comes with a complete set of modular early-boot services that are
written in simple, fast, parallelizable and robust C, replacing the
shell "novels" the various distributions featured before. Our little
&lt;i&gt;Project Zero Shell&lt;/i&gt;&lt;sup&gt;[1]&lt;/sup&gt; has been a full success. We currently
cover pretty much everything most desktop and embedded
distributions should need, plus a big part of the server needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checking and mounting of all file systems&lt;/li&gt;
&lt;li&gt;Updating and enabling quota on all file systems&lt;/li&gt;
&lt;li&gt;Setting the host name&lt;/li&gt;
&lt;li&gt;Configuring the loopback network device&lt;/li&gt;
&lt;li&gt;Loading the SELinux policy and relabelling &lt;tt&gt;/run&lt;/tt&gt; and &lt;tt&gt;/dev&lt;/tt&gt; as necessary on boot&lt;/li&gt;
&lt;li&gt;Registering additional binary formats in the kernel, such as Java, Mono and WINE binaries&lt;/li&gt;
&lt;li&gt;Setting the system locale&lt;/li&gt;
&lt;li&gt;Setting up the console font and keyboard map&lt;/li&gt;
&lt;li&gt;Creating, removing and cleaning up of temporary and volatile files and directories&lt;/li&gt;
&lt;li&gt;Applying mount options from &lt;tt&gt;/etc/fstab&lt;/tt&gt; to pre-mounted API VFS&lt;/li&gt;
&lt;li&gt;Applying sysctl kernel settings&lt;/li&gt;
&lt;li&gt;Collecting and replaying readahead information&lt;/li&gt;
&lt;li&gt;Updating &lt;tt&gt;utmp&lt;/tt&gt; boot and shutdown records&lt;/li&gt;
&lt;li&gt;Loading and saving the random seed&lt;/li&gt;
&lt;li&gt;Statically loading specific kernel modules&lt;/li&gt;
&lt;li&gt;Setting up encrypted hard disks and partitions&lt;/li&gt;
&lt;li&gt;Spawning automatic gettys on serial kernel consoles&lt;/li&gt;
&lt;li&gt;Maintenance of Plymouth&lt;/li&gt;
&lt;li&gt;Machine ID maintenance&lt;/li&gt;
&lt;li&gt;Setting of the UTC distance for the system clock&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a standard Fedora 15 install, only a few legacy and storage
services still require shell scripts during early boot. If you don't
need those, you can easily disable them end enjoy your shell-free boot
(like I do every day). The shell-less boot systemd offers you is a
unique feature on Linux.&lt;/p&gt;

&lt;p&gt;Many of these small components are configured via configuration
files in &lt;tt&gt;/etc&lt;/tt&gt;. Some of these are fairly standardized among
distributions and hence supporting them in the C implementations was
easy and obvious. Examples include: &lt;tt&gt;/etc/fstab&lt;/tt&gt;,
&lt;tt&gt;/etc/crypttab&lt;/tt&gt; or &lt;tt&gt;/etc/sysctl.conf&lt;/tt&gt;. However, for
others no standardized file or directory existed which forced us to add
&lt;tt&gt;#ifdef&lt;/tt&gt; orgies to our sources to deal with the different
places the distributions we want to support store these things. All
these configuration files have in common that they are dead-simple and
there is simply no good reason for distributions to distuingish
themselves with them: they all do the very same thing, just
a bit differently.&lt;/p&gt;

&lt;p&gt;To improve the situation and benefit from the unifying force that
systemd is we thus decided to read the per-distribution configuration
files only as &lt;i&gt;fallbacks&lt;/i&gt; -- and to introduce new configuration
files as primary source of configuration wherever applicable. Of
course, where possible these standardized configuration files should
not be new inventions but rather just standardizations of the best
distribution-specific configuration files previously used. Here's a
little overview over these new common configuration files systemd
supports on all distributions:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/hostname.html"&gt;/etc/hostname&lt;/a&gt;&lt;/tt&gt;:
the host name for the system. One of the most basic and trivial
system settings. Nonetheless previously all distributions used
different files for this. Fedora used &lt;tt&gt;/etc/sysconfig/network&lt;/tt&gt;,
OpenSUSE &lt;tt&gt;/etc/HOSTNAME&lt;/tt&gt;. We chose to standardize on the
Debian configuration file &lt;tt&gt;/etc/hostname&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/vconsole.conf.html"&gt;/etc/vconsole.conf&lt;/a&gt;&lt;/tt&gt;:
configuration of the default keyboard mapping and console font.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/locale.conf.html"&gt;/etc/locale.conf&lt;/a&gt;&lt;/tt&gt;:
configuration of the system-wide locale.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/modules-load.d.html"&gt;/etc/modules-load.d/*.conf&lt;/a&gt;&lt;/tt&gt;:
a drop-in directory for kernel modules to statically load at
boot (for the very few that still need this).&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/sysctl.d.html"&gt;/etc/sysctl.d/*.conf&lt;/a&gt;&lt;/tt&gt;:
a drop-in directory for kernel sysctl parameters, extending what you
can already do with &lt;tt&gt;/etc/sysctl.conf&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/tmpfiles.d.html"&gt;/etc/tmpfiles.d/*.conf&lt;/a&gt;&lt;/tt&gt;:
a drop-in directory for configuration of runtime files that need to be
removed/created/cleaned up at boot and during uptime.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/binfmt.d.html"&gt;/etc/binfmt.d/*.conf&lt;/a&gt;&lt;/tt&gt;:
a drop-in directory for registration of additional binary formats for
systems like Java, Mono and WINE.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/os-release.html"&gt;/etc/os-release&lt;/a&gt;&lt;/tt&gt;:
a standardization of the various distribution ID files like
&lt;tt&gt;/etc/fedora-release&lt;/tt&gt; and similar. Really every distribution
introduced their own file here; writing a simple tool that just prints
out the name of the local distribution usually means including a
database of release files to check. The LSB tried to standardize
something like this with the &lt;a href="http://refspecs.freestandards.org/LSB_3.1.0/LSB-Core-generic/LSB-Core-generic/lsbrelease.html"&gt;lsb_release&lt;/a&gt;
tool, but quite frankly the idea of employing a shell script in this
is not the best choice the LSB folks ever made. To rectify this we
just decided to generalize this, so that everybody can use the same
file here.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/machine-id.html"&gt;/etc/machine-id&lt;/a&gt;&lt;/tt&gt;:
a machine ID file, superseding D-Bus' machine ID file. This file is
guaranteed to be existing and valid on a systemd system, covering also
stateless boots. By moving this out of the D-Bus logic it is hopefully
interesting for a lot of additional uses as a unique and stable
machine identifier.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;&lt;a href="http://0pointer.de/public/systemd-man/machine-info.html"&gt;/etc/machine-info&lt;/a&gt;&lt;/tt&gt;:
a new information file encoding meta data about a host, like a pretty
host name and an icon name, replacing stuff like
&lt;tt&gt;/etc/favicon.png&lt;/tt&gt; and suchlike. This is maintained by &lt;a href="http://www.freedesktop.org/wiki/Software/systemd/hostnamed"&gt;systemd-hostnamed&lt;/a&gt;.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;It is our definite intention to convince &lt;i&gt;you&lt;/i&gt; to use these new
configuration files in your configuration tools: if your
configuration frontend writes these files instead of the old ones, it
automatically becomes more portable between Linux distributions, and
you are helping standardizing Linux. This makes things simpler to
understand and more obvious for users and administrators. Of course,
right now, only systemd-based distributions read these files, but that
already covers all important distributions in one way or another, &lt;a href="http://www.ubuntu.com/"&gt;except for one&lt;/a&gt;. And it's a bit of a
chicken-and-egg problem: a standard becomes a standard by being
used. In order to gently push everybody to standardize on these files
we also want to make clear that sooner or later we plan to drop the
fallback support for the old configuration files from
systemd. That means adoption of this new scheme can happen slowly and piece
by piece. But the final goal of only having one set of configuration
files must be clear.&lt;/p&gt;

&lt;p&gt;Many of these configuration files are relevant not only for
configuration tools but also (and sometimes even primarily) in
upstream projects. For example, we invite projects like Mono, Java, or
WINE to install a drop-in file in &lt;tt&gt;/etc/binfmt.d/&lt;/tt&gt; from their
upstream build systems. Per-distribution downstream support for binary
formats would then no longer be necessary and your platform would work
the same on all distributions. Something similar applies to all
software which need creation/cleaning of certain runtime files and
directories at boot, for example beneath the &lt;tt&gt;/run&lt;/tt&gt; hierarchy
(i.e. &lt;tt&gt;/var/run&lt;/tt&gt; as &lt;a href="http://lwn.net/Articles/436012/"&gt;it used to be known&lt;/a&gt;). These
projects should just drop in configuration files in
&lt;tt&gt;/etc/tmpfiles.d&lt;/tt&gt;, also from the upstream build systems. This
also helps speeding up the boot process, as separate per-project SysV
shell scripts which implement trivial things like registering a binary
format or removing/creating temporary/volatile files at boot are no
longer necessary. Or another example, where upstream support would be
fantastic: projects like X11 could probably benefit from reading the
default keyboard mapping for its displays from
&lt;tt&gt;/etc/vconsole.conf&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Of course, I have no doubt that not everybody is happy with our
choice of names (and formats) for these configuration files. In the
end we had to pick something, and from all the choices these appeared
to be the most convincing. The file formats are as simple as they can
be, and usually easily written and read even from shell scripts. That
said, &lt;tt&gt;/etc/bikeshed.conf&lt;/tt&gt; could of course also have been a
fantastic configuration file name!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;So, help us standardizing Linux! Use the new configuration files!
Adopt them upstream, adopt them downstream, adopt them all across the
distributions!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Oh, and in case you are wondering: yes, all of these files were
discussed in one way or another with various folks from the various
distributions. And there has even been some push towards supporting
some of these files even outside of systemd systems.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Our slogan: "&lt;i&gt;The only shell that should get started
during boot is gnome-shell!&lt;/i&gt;" -- Yes, the slogan needs a bit of
work, but you get the idea.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 20 Apr 2011 22:57:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-04-20:/blog/projects/the-new-configuration-files.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part VII</title><link>https://0pointer.net/blog/projects/blame-game.html</link><description>
                
&lt;p&gt;Here's yet another installment of my &lt;a href="http://0pointer.de/blog/projects/changing-roots"&gt;ongoing&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;on
&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;systemd&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;Administrators&lt;/a&gt;:&lt;/p&gt;

&lt;h4&gt;The Blame Game&lt;/h4&gt;

&lt;p&gt;Fedora 15&lt;sup&gt;[1]&lt;/sup&gt; is the first Fedora release to sport &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;. Our
primary goal for F15 was to get everything integrated and working
well. One focus for Fedora 16 will be to further polish and speed up
what we have in the distribution now. To prepare for this cycle we
have implemented a few tools (which are already available in F15),
which can help us pinpoint where exactly the biggest problems in our
boot-up remain. With this blog story I hope to shed some light on how
to figure out what to blame for your slow boot-up, and what to do
about it. We want to allow you to put the blame where the blame
belongs: on the system component responsible.&lt;/p&gt;

&lt;p&gt;The first utility is a very simple one: systemd will automatically
write a log message with the time it needed to syslog/kmsg when it
finished booting up.&lt;/p&gt;

&lt;pre&gt;systemd[1]: Startup finished in 2s 65ms 924us (kernel) + 2s 828ms 195us (initrd) + 11s 900ms 471us (userspace) = 16s 794ms 590us.&lt;/pre&gt;

&lt;p&gt;And here's how you read this: 2s have been spent for kernel
initialization, until the time where the initial RAM disk (initrd,
i.e. dracut) was started. A bit less than 3s have then been spent in
the initrd. Finally, a bit less than 12s have been spent after the
actual system init daemon (systemd) has been invoked by the initrd to
bring up userspace. Summing this up the time that passed since the
boot loader jumped into the kernel code until systemd was finished
doing everything it needed to do at boot was a bit less than 17s. This
number is nice and simple to understand -- and also easy to
misunderstand: it does not include the time that is spent initializing
your GNOME session, as that is outside of the scope of the init
system. Also, in many cases this is just where systemd finished doing
everything it needed to do. Very likely some daemons are still busy
doing whatever &lt;i&gt;they&lt;/i&gt; need to do to finish startup when this time
is elapsed. Hence: while the time logged here is a good indication on
the general boot speed, it is not the time the user might &lt;i&gt;feel&lt;/i&gt;
the boot actually takes.&lt;/p&gt;

&lt;p&gt;Also, it is a pretty superficial value: it gives no insight which
system component systemd was waiting for all the time. To break this
up, we introduced the tool &lt;tt&gt;systemd-analyze blame&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;$ systemd-analyze blame
  6207ms udev-settle.service
  5228ms cryptsetup@luks\x2d9899b85d\x2df790\x2d4d2a\x2da650\x2d8b7d2fb92cc3.service
   735ms NetworkManager.service
   642ms avahi-daemon.service
   600ms abrtd.service
   517ms rtkit-daemon.service
   478ms fedora-storage-init.service
   396ms dbus.service
   390ms rpcidmapd.service
   346ms systemd-tmpfiles-setup.service
   322ms fedora-sysinit-unhack.service
   316ms cups.service
   310ms console-kit-log-system-start.service
   309ms libvirtd.service
   303ms rpcbind.service
   298ms ksmtuned.service
   288ms lvm2-monitor.service
   281ms rpcgssd.service
   277ms sshd.service
   276ms livesys.service
   267ms iscsid.service
   236ms mdmonitor.service
   234ms nfslock.service
   223ms ksm.service
   218ms mcelog.service
...&lt;/pre&gt;

&lt;p&gt;This tool lists which systemd unit needed how much time to finish
initialization at boot, the worst offenders listed first. What we can
see here is that on this boot two services required more than 1s of
boot time: &lt;tt&gt;udev-settle.service&lt;/tt&gt; and
&lt;tt&gt;cryptsetup@luks\x2d9899b85d\x2df790\x2d4d2a\x2da650\x2d8b7d2fb92cc3.service&lt;/tt&gt;. This
tool's output is easily misunderstood as well, it does not shed any
light on why the services in question actually need this much time, it
just determines that they did. Also note that the times listed here
might be spent "in parallel", i.e. two services might be initializing
at the same time and thus the time spent to initialize them both is
much less than the sum of both individual times combined.&lt;/p&gt;

&lt;p&gt;Let's have a closer look at the worst offender on this boot: a
service by the name of &lt;tt&gt;udev-settle.service&lt;/tt&gt;. So why does it
take that much time to initialize, and what can we do about it? This
service actually does very little: it just waits for the device
probing being done by udev to finish and then exits. Device probing
can be slow. In this instance for example, the reason for the device
probing to take more than 6s is the 3G modem built into the machine,
which when not having an inserted SIM card takes this long to respond
to software probe requests. The software probing is part of the logic
that makes ModemManager work and enables NetworkManager to offer easy
3G setup. An obvious reflex might now be to blame ModemManager for
having such a slow prober. But that's actually ill-directed: hardware
probing quite frequently is this slow, and in the case of ModemManager
it's a simple fact that the 3G hardware takes this long. It is an
essential requirement for a proper hardware probing solution that
individual probers can take this much time to finish probing. The
actual culprit is something else: the fact that we actually wait for
the probing, in other words: that &lt;tt&gt;udev-settle.service&lt;/tt&gt; is part
of our boot process.&lt;/p&gt;

&lt;p&gt;So, why is &lt;tt&gt;udev-settle.service&lt;/tt&gt; part of our boot process?
Well, it actually doesn't need to be. It is pulled in by the storage
setup logic of Fedora: to be precise, by the LVM, RAID and Multipath
setup script. These storage services have not been implemented in the
way hardware detection and probing work today: they expect to be
initialized at a point in time where "all devices have been probed",
so that they can simply iterate through the list of available disks
and do their work on it. However, on modern machinery this is not how
things actually work: hardware can come and hardware can go all the
time, during boot and during runtime. For some technologies it is not
even possible to know when the device enumeration is complete
(example: USB, or iSCSI), thus waiting for all storage devices to show
up and be probed must necessarily include a fixed delay when it is
assumed that all devices that can show up have shown up, and got
probed. In this case all this shows very negatively in the boot time: the
storage scripts force us to delay bootup until all potential devices
have shown up and all devices that did got probed -- and all that even
though we don't actually need most devices for anything. In particular
since this machine actually does not make use of LVM, RAID or
Multipath!&lt;sup&gt;[2]&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Knowing what we know now we can go and disable
&lt;tt&gt;udev-settle.service&lt;/tt&gt; for the next boots: since neither LVM,
RAID nor Multipath is used we can mask the services in question and
thus speed up our boot a little:&lt;/p&gt;

&lt;pre&gt;# ln -s /dev/null /etc/systemd/system/udev-settle.service
# ln -s /dev/null /etc/systemd/system/fedora-wait-storage.service
# ln -s /dev/null /etc/systemd/system/fedora-storage-init.service
# systemctl daemon-reload&lt;/pre&gt;

&lt;p&gt;After restarting we can measure that the boot is now about 1s
faster. Why just 1s? Well, the second worst offender is cryptsetup
here: the machine in question has an encrypted
&lt;tt&gt;/home&lt;/tt&gt; directory. For testing purposes I have stored the
passphrase in a file on disk, so that the boot-up is not delayed
because I as the user am a slow typer. The cryptsetup tool
unfortunately still takes more han 5s to set up the encrypted
partition. Being lazy instead of trying to fix
cryptsetup&lt;sup&gt;[3]&lt;/sup&gt; we'll just tape over it here &lt;sup&gt;[4]&lt;/sup&gt;:
systemd will normally wait for all file systems not marked with the
&lt;tt&gt;noauto&lt;/tt&gt; option in /etc/fstab to show up, to be fscked and to
be mounted before proceeding bootup and starting the usual system
services. In the case of &lt;tt&gt;/home&lt;/tt&gt; (unlike for example
&lt;tt&gt;/var&lt;/tt&gt;) we know that it is needed only very late (i.e. when the
user actually logs in). An easy fix is hence to make the mount point
available already during boot, but not actually wait until cryptsetup,
fsck and mount finished running for it. You ask how we can make a
mount point available before actually mounting the file system behind
it? Well, systemd possesses magic powers, in form of the
&lt;tt&gt;comment=systemd.automount&lt;/tt&gt; mount option in
&lt;tt&gt;/etc/fstab&lt;/tt&gt;. If you specify it, systemd will create an
automount point at &lt;tt&gt;/home&lt;/tt&gt; and when at the time of the first
access to the file system it still isn't backed by a proper file
system systemd will wait for the device, fsck and mount it.&lt;/p&gt;

&lt;p&gt;And here's the result with this change to &lt;tt&gt;/etc/fstab&lt;/tt&gt;
made:&lt;/p&gt;

&lt;pre&gt;systemd[1]: Startup finished in 2s 47ms 112us (kernel) + 2s 663ms 942us (initrd) + 5s 540ms 522us (userspace) = 10s 251ms 576us.&lt;/pre&gt;

&lt;p&gt;Nice! With a few fixes we took almost 7s off our boot-time. And
these two changes are only fixes for the two most superficial
problems. With a bit of love and detail work there's a lot of
additional room for improvements. In fact, on a different machine, a
more than two year old X300 laptop (which even back then wasn't the
fastest machine on earth) and a bit of decrufting we have boot times
of around 4s (total) now, with a resonably complete GNOME system. And there's
still a lot of room in it.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;systemd-analyze blame&lt;/tt&gt; is a nice and simple tool for
tracking down slow services. However, it suffers by a big problem: it
does not visualize how the parallel execution of the services actually
diminishes the price one pays for slow starting services. For that we
have prepared &lt;tt&gt;systemd-analyize plot&lt;/tt&gt; for you. Use it like
this:&lt;/p&gt;

&lt;pre&gt;$ systemd-analyze plot &gt; plot.svg
$ eog plot.svg&lt;/pre&gt;

&lt;p&gt;It creates pretty graphs, showing the time services spent to start
up in relation to the other services. It currently doesn't visualize
explicitly which services wait for which ones, but with a bit of guess
work this is easily seen nonetheless.&lt;/p&gt;

&lt;p&gt;To see the effect of our two little optimizations here are two
graphs generated with &lt;tt&gt;systemd-analyze plot&lt;/tt&gt;, the first before
and the other after our change:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/blame.svg"&gt;&lt;img src="http://0pointer.de/public/blame.png" width="128" height="308" alt="Before" /&gt;&lt;/a&gt;&amp;nbsp;&lt;a href="http://0pointer.de/public/blame2.svg"&gt;&lt;img src="http://0pointer.de/public/blame2.png" width="95" height="308" alt="After" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(For the sake of completeness, here are the two complete outputs of
&lt;tt&gt;systemd-analyze blame&lt;/tt&gt; for these two boots: &lt;a href="http://0pointer.de/public/blame.txt"&gt;before&lt;/a&gt; and &lt;a href="http://0pointer.de/public/blame2.txt"&gt;after&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The well-informed reader probably wonders how this relates to &lt;a href="https://github.com/mmeeks/bootchart"&gt;Michael Meeks'
bootchart&lt;/a&gt;. This plot and bootchart do show similar graphs, that is
true. Bootchart is by far the more powerful tool. It plots in all
detail what is happening during the boot, how much CPU and IO is
used. &lt;tt&gt;systemd-analyze plot&lt;/tt&gt; shows more high-level data: which
service took how much time to initialize, and what needed to wait for
it. If you use them both together you'll have a wonderful toolset to
figure out why your boot is not as fast as it could be.&lt;/p&gt;

&lt;p&gt;Now, before you now take these tools and start filing bugs against
the worst boot-up time offenders on your system: think twice. These
tools give you raw data, don't misread it. As my optimization example
above hopefully shows, the blame for the slow bootup was not actually
with &lt;tt&gt;udev-settle.service&lt;/tt&gt;, and not with the ModemManager
prober run by it either. It is with the subsystem that pulled this
service in in the first place. And that's where the problem needs to
be fixed. So, file the bugs at the right places. Put the blame where
the blame belongs.&lt;/p&gt;

&lt;p&gt;As mentioned, these three utilities are available on your Fedora 15
system out-of-the-box.&lt;/p&gt;

&lt;p&gt;And here's what to take home from this little blog story:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;tt&gt;systemd-analyze&lt;/tt&gt; is a wonderful tool and systemd comes
with profiling built in.&lt;/li&gt;

&lt;li&gt;Don't misread the data these tools generate!&lt;/li&gt;

&lt;li&gt;With two simple changes you might be able to speed up your system
by 7s!&lt;/li&gt;

&lt;li&gt;Fix your software if it can't handle dynamic hardware
properly!&lt;/li&gt;

&lt;li&gt;The Fedora default of installing the OS on an enterprise-level
storage managing system might be something to rethink.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;And that's all for now. Thank you for your interest.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Also known as the greatest Free Software OS release
ever.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] The right fix here is to improve the services in
question to actively listen to hotplug events via libudev or similar
and act on the devices showing up as they show up, so that we can
continue with the bootup the instant everything we really need to go
on has shown up. To get a quick bootup we should wait for what we
actually need to proceed, not for everything. Also note that the
storage services are not the only services which do not cope well with
modern dynamic hardware, and assume that the device list is static and
stays unchanged. For example, in this example the reason the initrd is
actually as slow as it is is mostly due to the fact that Plymouth
expects to be executed when all video devices have shown up and have
been probed. For an unknown reason (at least unknown to me) loading
the video kernel modules for my Intel graphics cards takes multiple
seconds, and hence the entire boot is delayed unnecessarily. (Here too
I'd not put the blame on the probing but on the fact that we
wait for it to complete before going on.)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[3] Well, to be precise, I actually did try to get this
fixed. Most of the delay of crypsetup stems from the -- in my eyes --
unnecessarily high default values for &lt;tt&gt;--iter-time&lt;/tt&gt; in
cryptsetup. I tried to convince our cryptsetup maintainers that 100ms
as a default here are not really less secure than 1s, but well, I
failed.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[4] Of course, it's usually not our style to just tape over
problems instead of fixing them, but this is such a nice occasion to
show off yet another cool systemd feature...&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 12 Apr 2011 03:51:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-04-12:/blog/projects/blame-game.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part VI</title><link>https://0pointer.net/blog/projects/changing-roots.html</link><description>
                
&lt;p&gt;Here's another installment &lt;a href="http://0pointer.de/blog/projects/three-levels-of-off.html"&gt;of&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;my&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;ongoing&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;series&lt;/a&gt;
&lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;on
&lt;/a&gt; systemd for Administrators:&lt;/p&gt;

&lt;h4&gt;Changing Roots&lt;/h4&gt;

&lt;p&gt;As administrator or developer sooner or later you'll ecounter &lt;a href="http://linux.die.net/man/1/chroot"&gt;&lt;tt&gt;chroot()&lt;/tt&gt;
environments&lt;/a&gt;. The &lt;tt&gt;chroot()&lt;/tt&gt; system call simply shifts what
a process and all its children consider the root directory /, thus
limiting what the process can see of the file hierarchy to a subtree
of it. Primarily &lt;tt&gt;chroot()&lt;/tt&gt; environments have two uses:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;For security purposes: In this use a specific isolated daemon is
chroot()ed into a private subdirectory, so that when exploited the
attacker can see only the subdirectory instead of the full OS
hierarchy: he is trapped inside the chroot() jail.&lt;/li&gt;

&lt;li&gt;To set up and control a debugging, testing, building, installation
or recovery image of an OS: For this a whole guest operating
system hierarchy is mounted or bootstraped into a subdirectory of the
host OS, and then a shell (or some other application) is started
inside it, with this subdirectory turned into its /. To the shell it
appears as if it was running inside a system that can differ greatly
from the host OS. For example, it might run a different distribution
or even a different architecture (Example: host x86_64, guest
i386). The full hierarchy of the host OS it cannot see.&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;On a classic System-V-based operating system it is relatively easy
to use chroot() environments. For example, to start a specific daemon
for test or other reasons inside a chroot()-based guest OS tree, mount
&lt;tt&gt;/proc&lt;/tt&gt;, &lt;tt&gt;/sys&lt;/tt&gt; and a few other API file systems into
the tree, and then use &lt;tt&gt;chroot(1)&lt;/tt&gt; to enter the chroot, and
finally run the SysV init script via &lt;tt&gt;/sbin/service&lt;/tt&gt; from
inside the chroot.&lt;/p&gt;

&lt;p&gt;On a systemd-based OS things are not that easy anymore. One of the
big advantages of systemd is that all daemons are guaranteed to be
invoked in a completely clean and independent context which is in no
way related to the context of the user asking for the service to be
started. While in sysvinit-based systems a large part of the execution
context (like resource limits, environment variables and suchlike) is
inherited from the user shell invoking the init skript, in systemd the
user just notifies the init daemon, and the init daemon will then fork
off the daemon in a sane, well-defined and pristine execution context
and no inheritance of the user context parameters takes place. While
this is a formidable feature it actually breaks traditional approaches
to invoke a service inside a chroot() environment: since the actual
daemon is always spawned off PID 1 and thus inherits the chroot()
settings from it, it is irrelevant whether the client which asked for
the daemon to start is chroot()ed or not.  On top of that, since
systemd actually places its local communications sockets in
&lt;tt&gt;/run/systemd&lt;/tt&gt; a process in a chroot() environment will not even
be able to talk to the init system (which however is probably a good thing, and the
daring can work around this of course by making use of bind
mounts.)&lt;/p&gt;

&lt;p&gt;This of course opens the question how to use chroot()s properly in
a systemd environment. And here's what we came up with for you, which
hopefully answers this question thoroughly and comprehensively:&lt;/p&gt;

&lt;p&gt;Let's cover the first usecase first: locking a daemon into a
chroot() jail for security purposes. To begin with, chroot() as a
security tool is actually quite dubious, since chroot() is not a
one-way street. It is relatively easy to escape a chroot()
environment, &lt;a href="http://linux.die.net/man/2/chroot"&gt;as even the
man page points out&lt;/a&gt;. Only in combination with a few other
techniques it can be made somewhat secure. Due to that it usually
requires specific support in the applications to chroot() themselves
in a tamper-proof way. On top of that it usually requires a deep
understanding of the chroot()ed service to set up the chroot()
environment properly, for example to know which directories to bind mount from
the host tree, in order to make available all communication channels
in the chroot() the service actually needs. Putting this together,
chroot()ing software for security purposes is almost always done best
in the C code of the daemon itself. The developer knows best (or at
least &lt;i&gt;should&lt;/i&gt; know best) how to properly secure down the
chroot(), and what the minimal set of files, file systems and
directories is the daemon will need inside the chroot(). These days a
number of daemons are capable of doing this, unfortunately however of
those running by default on a normal Fedora installation only two are
doing this: &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; and
RealtimeKit. Both apparently written by the same really smart
dude. Chapeau! ;-) (Verify this easily by running &lt;tt&gt;ls -l
/proc/*/root&lt;/tt&gt; on your system.)&lt;/p&gt;

&lt;p&gt;That all said, systemd of course does offer you a way to chroot()
specific daemons and manage them like any other with the usual
tools. This is supported via the &lt;tt&gt;RootDirectory=&lt;/tt&gt; option in
systemd service files. Here's an example:&lt;/p&gt;

&lt;pre&gt;[Unit]
Description=A chroot()ed Service

[Service]
RootDirectory=/srv/chroot/foobar
ExecStartPre=/usr/local/bin/setup-foobar-chroot.sh
ExecStart=/usr/bin/foobard
RootDirectoryStartOnly=yes&lt;/pre&gt;

&lt;p&gt;In this example, &lt;tt&gt;RootDirectory=&lt;/tt&gt; configures where to
chroot() to before invoking the daemon binary specified with
&lt;tt&gt;ExecStart=&lt;/tt&gt;. Note that the path specified in
&lt;tt&gt;ExecStart=&lt;/tt&gt; needs to refer to the binary inside the chroot(),
it is not a path to the binary in the host tree (i.e. in this example
the binary executed is seen as
&lt;tt&gt;/srv/chroot/foobar/usr/bin/foobard&lt;/tt&gt; from the host OS). Before
the daemon is started a shell script &lt;tt&gt;setup-foobar-chroot.sh&lt;/tt&gt;
is invoked, whose purpose it is to set up the chroot environment as
necessary, i.e. mount &lt;tt&gt;/proc&lt;/tt&gt; and similar file systems into it,
depending on what the service might need. With the
&lt;tt&gt;RootDirectoryStartOnly=&lt;/tt&gt; switch we ensure that only the daemon
as specified in &lt;tt&gt;ExecStart=&lt;/tt&gt; is chrooted, but not the
&lt;tt&gt;ExecStartPre=&lt;/tt&gt; script which needs to have access to the full
OS hierarchy so that it can bind mount directories from there. (For
more information on these switches see the respective &lt;a href="http://0pointer.de/public/systemd-man/systemd.service.html"&gt;man&lt;/a&gt;
&lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;pages&lt;/a&gt;.)
If you place a unit file like this in
&lt;tt&gt;/etc/systemd/system/foobar.service&lt;/tt&gt; you can start your
chroot()ed service by typing &lt;tt&gt;systemctl start
foobar.service&lt;/tt&gt;. You may then introspect it with &lt;tt&gt;systemctl
status foobar.service&lt;/tt&gt;. It is accessible to the administrator like
any other service, the fact that it is chroot()ed does -- unlike on
SysV -- not alter how your monitoring and control tools interact with
it.&lt;/p&gt;

&lt;p&gt;Newer Linux kernels support file system namespaces. These are
similar to &lt;tt&gt;chroot()&lt;/tt&gt; but a lot more powerful, and they do not
suffer by the same security problems as &lt;tt&gt;chroot()&lt;/tt&gt;. systemd
exposes a subset of what you can do with file system namespaces right
in the unit files themselves. Often these are a useful and simpler
alternative to setting up full chroot() environment in a
subdirectory. With the switches &lt;tt&gt;ReadOnlyDirectories=&lt;/tt&gt; and
&lt;tt&gt;InaccessibleDirectories=&lt;/tt&gt; you may setup a file system
namespace jail for your service. Initially, it will be identical to
your host OS' file system namespace. By listing directories in these
directives you may then mark certain directories or mount points of
the host OS as read-only or even completely inaccessible to the
daemon. Example:&lt;/p&gt;

&lt;pre&gt;[Unit]
Description=A Service With No Access to /home

[Service]
ExecStart=/usr/bin/foobard
InaccessibleDirectories=/home&lt;/pre&gt;

&lt;p&gt;This service will have access to the entire file system tree of the
host OS with one exception: /home will not be visible to it, thus
protecting the user's data from potential exploiters. (&lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;See the
man page for details on these options.&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;File system namespaces are in fact a better replacement for
&lt;tt&gt;chroot()&lt;/tt&gt;s in many many ways. Eventually Avahi and RealtimeKit
should probably be updated to make use of namespaces replacing
&lt;tt&gt;chroot()&lt;/tt&gt;s.&lt;/p&gt;

&lt;p&gt;So much about the security usecase. Now, let's look at the other
use case: setting up and controlling OS images for debugging, testing,
building, installing or recovering.&lt;/p&gt;

&lt;p&gt;chroot() environments are relatively simple things: they only
virtualize the file system hierarchy. By chroot()ing into a
subdirectory a process still has complete access to all system calls,
can kill all processes and shares about everything else with the host
it is running on. To run an OS (or a small part of an OS) inside a
chroot() is hence a dangerous affair: the isolation between host and
guest is limited to the file system, everything else can be freely
accessed from inside the chroot(). For example, if you upgrade a
distribution inside a chroot(), and the package scripts send a SIGTERM
to PID 1 to trigger a reexecution of the init system, this will
actually take place in the host OS! On top of that, SysV shared
memory, abstract namespace sockets and other IPC primitives are shared
between host and guest. While a completely secure isolation for
testing, debugging, building, installing or recovering an OS is
probably not necessary, a basic isolation to avoid &lt;i&gt;accidental&lt;/i&gt;
modifications of the host OS from inside the chroot() environment is
desirable: you never know what code package scripts execute which
might interfere with the host OS.&lt;/p&gt;

&lt;p&gt;To deal with chroot() setups for this use systemd offers you a
couple of features:&lt;/p&gt;

&lt;p&gt;First of all, &lt;tt&gt;systemctl&lt;/tt&gt; detects when it is run in a
chroot. If so, most of its operations will become NOPs, with the
exception of &lt;tt&gt;systemctl enable&lt;/tt&gt; and &lt;tt&gt;systemctl
disable&lt;/tt&gt;. If a package installation script hence calls these two
commands, services will be enabled in the guest OS. However, should a
package installation script include a command like &lt;tt&gt;systemctl
restart&lt;/tt&gt; as part of the package upgrade process this will have no
effect at all when run in a chroot() environment.&lt;/p&gt;

&lt;p&gt;More importantly however systemd comes out-of-the-box with the &lt;a href="http://0pointer.de/public/systemd-man/systemd-nspawn.html"&gt;systemd-nspawn&lt;/a&gt;
tool which acts as chroot(1) on steroids: it makes use of file system
and PID namespaces to boot a simple lightweight container on a file
system tree. It can be used almost like chroot(1), except that the
isolation from the host OS is much more complete, a lot more secure
and even easier to use. In fact, &lt;tt&gt;systemd-nspawn&lt;/tt&gt; is capable of
booting a &lt;i&gt;complete&lt;/i&gt; systemd or sysvinit OS in container with a single
command. Since it virtualizes PIDs, the init system in the container
can act as PID 1 and thus do its job as normal. In contrast to
chroot(1) this tool will implicitly mount &lt;tt&gt;/proc&lt;/tt&gt;,
&lt;tt&gt;/sys&lt;/tt&gt; for you.&lt;/p&gt;

&lt;p&gt;Here's an example how in three commands you can boot a Debian OS on
your Fedora machine inside an nspawn container:&lt;/p&gt;

&lt;pre&gt;# yum install debootstrap
# debootstrap --arch=amd64 unstable debian-tree/
# systemd-nspawn -D debian-tree/&lt;/pre&gt;

&lt;p&gt;This will bootstrap the OS directory tree and then simply invoke a
shell in it. If you want to boot a full system in the container, use a
command like this:&lt;/p&gt;

&lt;pre&gt;# systemd-nspawn -D debian-tree/ /sbin/init&lt;/pre&gt;

&lt;p&gt;And after a quick bootup you should have a shell prompt, inside a
complete OS, booted in your container. The container will not be able
to see any of the processes outside of it. It will share the network
configuration, but not be able to modify it. (Expect a couple of
EPERMs during boot for that, which however should not be
fatal). Directories like &lt;tt&gt;/sys&lt;/tt&gt; and &lt;tt&gt;/proc/sys&lt;/tt&gt; are
available in the container, but mounted read-only in order to avoid
that the container can modify kernel or hardware configuration. Note
however that this protects the host OS only from &lt;i&gt;accidental&lt;/i&gt;
changes of its parameters. A process in the container can manually
remount the file systems read-writeable and then change whatever it
wants to change.&lt;/p&gt;

&lt;p&gt;So, what's so great about &lt;tt&gt;systemd-nspawn&lt;/tt&gt; again?&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;It's really easy to use. No need to manually mount &lt;tt&gt;/proc&lt;/tt&gt;
and &lt;tt&gt;/sys&lt;/tt&gt; into your chroot() environment. The tool will do it
for you and the kernel automatically cleans it up when the container
terminates.&lt;/li&gt;

&lt;li&gt;The isolation is much more complete, protecting the host OS from
accidental changes from inside the container.&lt;/li&gt;

&lt;li&gt;It's so good that you can actually boot a full OS in the
container, not just a single lonesome shell.&lt;/li&gt;

&lt;li&gt;It's actually tiny and installed everywhere where systemd is
installed. No complicated installation or setup.&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;systemd itself has been modified to work very well in such a
container. For example, when shutting down and detecting that it is
run in a container, it just calls exit(), instead of reboot() as last
step.&lt;/p&gt;

&lt;p&gt;Note that &lt;tt&gt;systemd-nspawn&lt;/tt&gt; is not a full container
solution. If you need that &lt;a href="http://lxc.sourceforge.net/"&gt;LXC&lt;/a&gt; is the better choice for
you. It uses the same underlying kernel technology but offers a lot
more, including network virtualization. If you so will,
&lt;tt&gt;systemd-nspawn&lt;/tt&gt; is the GNOME 3 of container solutions:
slick and trivially easy to use -- but with few configuration
options. LXC OTOH is more like KDE: more configuration options than lines of
code. I wrote &lt;tt&gt;systemd-nspawn&lt;/tt&gt; specifically to cover testing,
debugging, building, installing, recovering. That's what you should use
it for and what it is really good at, and where it is a much much nicer
alternative to chroot(1).&lt;/p&gt;

&lt;p&gt;So, let's get this finished, this was already long enough. Here's what to take home from
this little blog story:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;Secure chroot()s are best done natively in the C sources of your program.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;ReadOnlyDirectories=&lt;/tt&gt;, &lt;tt&gt;InaccessibleDirectories=&lt;/tt&gt;
might be suitable alternatives to a full chroot() environment.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;RootDirectory=&lt;/tt&gt; is your friend if you want to chroot() a specific service.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;systemd-nspawn&lt;/tt&gt; is made of awesome.&lt;/li&gt;

&lt;li&gt;chroot()s are lame, file system namespaces are totally l33t.&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;All of this is readily available on your Fedora 15 system.&lt;/p&gt;

&lt;p&gt;And that's it for today. See you again for the next installment.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 08 Apr 2011 00:45:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-04-08:/blog/projects/changing-roots.html</guid><category>projects</category></item><item><title>GNOME 3.0 Is Out!</title><link>https://0pointer.net/blog/projects/gnome3.html</link><description>
                
&lt;p&gt;&lt;a href="http://gnome.org/"&gt;The next generation desktop has arrived.&lt;/a&gt; I am running it as I type this, and so should you. &lt;a href="http://gnome3.org/tryit.html"&gt;So, go, get it!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are in &lt;b&gt;Berlin&lt;/b&gt; on Friday you should also attend our &lt;a href="https://live.gnome.org/ThreePointZero/LaunchParty/Germany/Berlin"&gt;GNOME
3.0 Release Party&lt;/a&gt;. It's at the world famous &lt;a href="http://www.c-base.org/"&gt;c-base&lt;/a&gt;, in the remains of an alien spaceship
that crashed into Berlin 4.5 billion years ago (no kidding!). We've got
Ubuntu's &lt;a href="http://daniel.holba.ch/blog/"&gt;Daniel Holbach&lt;/a&gt; as DJ, and a
few folks from the GNOME community will do a talk or two (including that
annoying dude who created Avahi, PulseAudio and systemd). We even got Mirko Boehm
from the KDE side to say a few things. And there are going to be GNOME 3
goodies! How awesome is that? &lt;a href="https://live.gnome.org/ThreePointZero/LaunchParty/Germany/Berlin"&gt;See the
wiki page for further details.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here's your homework until Friday: &lt;a href="http://gnome3.org/tryit.html"&gt;Try out GNOME 3.0!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title="Help promote GNOME 3!" href="https://live.gnome.org/ThreePointZero/Promote"&gt;&lt;img style="vertical-align: top; border: 0" alt="I am GNOME" src="http://www.gnome.org/wp-content/uploads/2011/04/iamgnome.png" width="200" height="200" /&gt;&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 06 Apr 2011 23:02:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-04-06:/blog/projects/gnome3.html</guid><category>projects</category></item><item><title>The GNOME 3.0 Live CD</title><link>https://0pointer.net/blog/projects/live-cd.html</link><description>
                
&lt;p&gt;&lt;a href="http://blogs.fedoraproject.org/wp/mclasen/2011/03/31/another-way-to-try-gnome-3/"&gt;The
Fedora GNOME 3.0 Live CD&lt;/a&gt; is made of awesome. Not just because it showcases
the awesomeness that is GNOME 3, but also because it's built on an awesome
&lt;a href="http://freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;-based OS. Double awesome!&lt;/p&gt;

&lt;p&gt;So, get it, play with it. It's the future of computing: GNOME and systemd
and Linux. Triple awesome!&lt;/p&gt;

&lt;p&gt;And did I mention that F15 is going the &lt;i&gt;awesomest&lt;/i&gt; OS release ever?&lt;/p&gt;

&lt;p&gt;Nope, there's no April 1st joke in here. It's really honestly just ...
&lt;i&gt;awesome&lt;/i&gt;!&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 01 Apr 2011 21:04:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-04-01:/blog/projects/live-cd.html</guid><category>projects</category></item><item><title>Final Reminder</title><link>https://0pointer.net/blog/projects/final-reminder.html</link><description>
                
&lt;p&gt;Citizens! GNOMErs! Only two days are left and the &lt;a href="http://www.desktopsummit.org/"&gt;GUADEC/Desktop Summit&lt;/a&gt; CFP
is over (end date is Friday). &lt;a href="https://www.desktopsummit.org/submit"&gt;Submit your
presentation proposal now&lt;/a&gt;, or it is too late. &lt;a href="https://www.desktopsummit.org/cfp"&gt;Read the CFP.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, and regarding the need for a KDE identity account: due to limited
manpower we decided to reuse existing infrastucture instead of setting up a
completely new one. We do acknowledge that this is not ideal and we'd like to
ask for your understanding. (Creating a KDE identity account is unrestricted,
and you can easily create one even if you never had anything to do with KDE in
your life.)&lt;/p&gt;

&lt;p&gt;Note that we are looking for both &lt;b&gt;lightning talks&lt;/b&gt; and full-length
presentations. If you are interested in doing a lightning talk (and we can only
encourage you to), please use the same form to make your submission.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 23 Mar 2011 18:42:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-03-23:/blog/projects/final-reminder.html</guid><category>projects</category></item><item><title>Desktop Summit/GUADEC 2011 CFP ends in one Week</title><link>https://0pointer.net/blog/projects/cfp-ends-in-one-week.html</link><description>
                
&lt;p&gt;I'd like to remind everybody that only one week is left until the &lt;a href="https://www.desktopsummit.org/"&gt;Desktop Summit (aka GUADEC 2011)&lt;/a&gt; &lt;a href="https://www.desktopsummit.org/cfp"&gt;Call for Participation&lt;/a&gt; ends. We want your talk proposals, and that quickly, before it's too late!&lt;/p&gt;

&lt;p&gt;Berlin in summer is fantastic. You wouldn't want to miss that, would you?&lt;/p&gt;

&lt;p&gt;So, read the &lt;a href="https://www.desktopsummit.org/cfp"&gt;CFP again&lt;/a&gt;, and then &lt;a href="https://www.desktopsummit.org/submit"&gt;submit something.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The CFP ends next friday. So hurry!&lt;/p&gt;

&lt;p&gt;Thank you,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Lennart&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 17 Mar 2011 19:51:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-03-17:/blog/projects/cfp-ends-in-one-week.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part V</title><link>https://0pointer.net/blog/projects/three-levels-of-off.html</link><description>
                
&lt;p&gt;It has been a while since the &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-4.html"&gt;last
installment&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;of
my systemd&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;for
Administrators&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;series&lt;/a&gt;,
but now with the release of Fedora 15 based on systemd looming, here's
a new episode:&lt;/p&gt;

&lt;h4&gt;The Three Levels of "Off"&lt;/h4&gt;

&lt;p&gt;In &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;,
there are three levels of turning off a service (or other unit). Let's
have a look which those are:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt; &lt;p&gt;You can &lt;b&gt;stop&lt;/b&gt; a service. That simply terminates the
running instance of the service and does little else. If due to some
form of activation (such as manual activation, socket activation, bus
activation, activation by system boot or activation by hardware plug)
the service is requested again afterwards it will be started. Stopping
a service is hence a very simple, temporary and superficial
operation. Here's an example how to do this for the NTP service:&lt;/p&gt;

&lt;pre&gt;$ systemctl stop ntpd.service&lt;/pre&gt;

&lt;p&gt;This is roughly equivalent to the following traditional command which is available on most SysV inspired systems:&lt;/p&gt;

&lt;pre&gt;$ service ntpd stop&lt;/pre&gt;

&lt;p&gt;In fact, on Fedora 15, if you execute the latter command it will be transparently converted to the former.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt; &lt;p&gt;You can &lt;b&gt;disable&lt;/b&gt; a service. This unhooks a service from
its activation triggers. That means, that depending on your service it
will no longer be activated on boot, by socket or bus activation or by
hardware plug (or any other trigger that applies to it). However, you
can still start it manually if you wish. If there is already a started
instance disabling a service will &lt;i&gt;not&lt;/i&gt; have the effect of stopping
it. Here's an example how to disable a service:&lt;/p&gt;

&lt;pre&gt;$ systemctl disable ntpd.service&lt;/pre&gt;

&lt;p&gt;On traditional Fedora systems, this is roughly equivalent to the following command:&lt;/p&gt;

&lt;pre&gt;$ chkconfig ntpd off&lt;/pre&gt;

&lt;p&gt;And here too, on Fedora 15, the latter command will be
transparently converted to the former, if necessary.&lt;/p&gt;

&lt;p&gt;Often you want to combine stopping and disabling a service, to
get rid of the current instance and make sure it is not started again (except when manually triggered):&lt;/p&gt;

&lt;pre&gt;$ systemctl disable ntpd.service
$ systemctl stop ntpd.service&lt;/pre&gt;

&lt;p&gt;Commands like this are for example used during package
deinstallation of systemd services on Fedora.&lt;/p&gt;

&lt;p&gt;Disabling a service is a permanent change; until you undo it it
will be kept, even across reboots.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;

&lt;p&gt;You can &lt;b&gt;mask&lt;/b&gt; a service. This is like disabling a service,
but on steroids. It not only makes sure that service is not started
automatically anymore, but even ensures that a service cannot even be
started manually anymore. This is a bit of a hidden feature in
systemd, since it is not commonly useful and might be confusing the
user. But here's how you do it:&lt;/p&gt;

&lt;pre&gt;$ ln -s /dev/null /etc/systemd/system/ntpd.service
$ systemctl daemon-reload&lt;/pre&gt;

&lt;p&gt;By symlinking a service file to &lt;tt&gt;/dev/null&lt;/tt&gt; you tell
systemd to never start the service in question and completely block
its execution. Unit files stored in &lt;tt&gt;/etc/systemd/system&lt;/tt&gt;
override those from &lt;tt&gt;/lib/systemd/system&lt;/tt&gt; that carry the same
name. The former directory is administrator territory, the latter
terroritory of your package manager. By installing your symlink in
&lt;tt&gt;/etc/systemd/system/ntpd.service&lt;/tt&gt; you hence make sure that
systemd will never read the upstream shipped service file
&lt;tt&gt;/lib/systemd/system/ntpd.service&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;systemd will recognize units symlinked to &lt;tt&gt;/dev/null&lt;/tt&gt; and
show them as &lt;i&gt;masked&lt;/i&gt;. If you try to start such a service manually (via
&lt;tt&gt;systemctl start&lt;/tt&gt; for example) this will fail with an
error.&lt;/p&gt;

&lt;p&gt;A similar trick on SysV systems does not (officially) exist. However,
there are a few unofficial hacks, such as editing the init script and
placing an &lt;tt&gt;exit 0&lt;/tt&gt; at the top, or removing its execution
bit. However, these solutions have various drawbacks, for example they
interfere with the package manager.&lt;/p&gt;

&lt;p&gt;Masking a service is a permanent change, much like disabling a service.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we learned how to turn off services on three levels,
there's only one question left: how do we turn them on again? Well,
it's quite symmetric. use &lt;tt&gt;systemctl start&lt;/tt&gt; to undo
&lt;tt&gt;systemctl stop&lt;/tt&gt;. Use &lt;tt&gt;systemctl enable&lt;/tt&gt; to undo
&lt;tt&gt;systemctl disable&lt;/tt&gt; and use &lt;tt&gt;rm&lt;/tt&gt; to undo
&lt;tt&gt;ln&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;And that's all for now. Thank you for your attention!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 02 Mar 2011 21:45:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-03-02:/blog/projects/three-levels-of-off.html</guid><category>projects</category></item><item><title>Desktop Summit 2011 Call For Participation</title><link>https://0pointer.net/blog/projects/guadec-cfp-2011.html</link><description>
                
&lt;p&gt;In case you haven't noticed yet: the &lt;a href="https://www.desktopsummit.org/cfp"&gt;Call For Participation for the Desktop
Summit 2011&lt;/a&gt; (aka GUADEC 2011, aka Akademy 2011) in Berlin, Germany is open
since yesterday. Submissions will be accepted until March 25th, so make sure to
&lt;a href="https://www.desktopsummit.org/submit"&gt;submit your proposals&lt;/a&gt; quickly.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 01 Mar 2011 23:12:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-03-01:/blog/projects/guadec-cfp-2011.html</guid><category>projects</category></item><item><title>FOSDEM Talk on Video</title><link>https://0pointer.net/blog/projects/fosdem2011-video.html</link><description>
                
&lt;p&gt;If you have already watched my &lt;a href="http://0pointer.de/blog/projects/lca2011-video.html"&gt;presentation on
systemd I gave at linux.conf.au 2011&lt;/a&gt; then this video of my talk on
the same topic which I have gave at &lt;a href="http://www.fosdem.org/"&gt;FOSDEM
2011&lt;/a&gt; in Brussels, Belgium will probably not be all new to you, but the
questions from the audience (and hopefully my responses) might answer a
question or two you might still have. So do watch it:&lt;/p&gt;

&lt;object width="640" height="390"&gt;
&lt;param name="movie" value="http://www.youtube.com/v/TyMLi8QF6sw?fs=1&amp;amp;hl=en_US" /&gt;
&lt;param name="allowfullscreen" value="true" /&gt;
&lt;param name="allowscriptaccess" value="always" /&gt;
&lt;embed src="http://www.youtube.com/v/TyMLi8QF6sw?fs=1&amp;amp;hl=en_US" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="390" /&gt;
&lt;/object&gt;

&lt;p&gt;&lt;small&gt;&lt;i&gt;Hmm, seems p.g.o strips the video from the blog post. So either read the original blog story or &lt;a href="http://www.youtube.com/watch?v=TyMLi8QF6sw"&gt;watch it directly on YouTube&lt;/a&gt;.&lt;/i&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Oh, and FOSDEM rocked, like every year!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 18 Feb 2011 00:25:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-02-18:/blog/projects/fosdem2011-video.html</guid><category>projects</category></item><item><title>LCA Talk on Video</title><link>https://0pointer.net/blog/projects/lca2011-video.html</link><description>
                
&lt;p&gt;I won't spare you the video of my talk about &lt;a href="http://freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; at &lt;a href="http://lca2011.linux.org.au/"&gt;linux.conf.au 2011&lt;/a&gt; in Brisbane, Australia last week:&lt;/p&gt;

&lt;object width="480" height="390"&gt;
&lt;param name="movie" value="http://blip.tv/play/AYKf5GsC" /&gt;
&lt;param name="allowfullscreen" value="true" /&gt;
&lt;embed src="http://blip.tv/play/AYKf5GsC" width="480" height="390" /&gt;
&lt;/object&gt;

&lt;p&gt;&lt;small&gt;&lt;i&gt;Hmm, seems p.g.o strips the video from the blog post. So either read the original blog story or &lt;a href="http://linuxconfau.blip.tv/file/4696791/"&gt;watch it directly on blip.tv&lt;/a&gt;.&lt;/i&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;LCA was fantastic and especially impressive given the circumstances of the recent floodings in Queensland. Really good conference, and congratulations to the organizers!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 31 Jan 2011 19:10:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-01-31:/blog/projects/lca2011-video.html</guid><category>projects</category></item><item><title>FOSDEM Interview with Yours Truly</title><link>https://0pointer.net/blog/projects/fosdem2011.html</link><description>
                
&lt;p&gt;The FOSDEM organizers just published &lt;a href="http://fosdem.org/2011/interview/lennart-poettering"&gt;a brief interview with yours
truly&lt;/a&gt; regarding the presentation
about &lt;a href="http://freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;
I will be giving there
on &lt;a href="http://fosdem.org/2011/schedule/event/systemd"&gt;Sat. Feb. 5th,
3pm&lt;/a&gt;. If you come to Brussels make sure to drop by! And even
if you don't have a look on the interview!&lt;/p&gt;

&lt;p&gt;If you don't make it to Brussels, there are two more stops in my
little &lt;i&gt;systemd World Tour&lt;/i&gt; in the next weeks: today
(&lt;a href="https://conf.linux.org.au/programme/schedule/view_talk/150?day=wednesday"&gt;Wed. Jan. 26th,
2:30pm&lt;/a&gt;) I will be speaking at linux.conf.au in Brisbane,
Australia. And
on &lt;a href="http://fedoraproject.org/wiki/DeveloperConference2011"&gt;Fri. Feb. 11th,
1:20pm&lt;/a&gt; I'll be speaking at the Red Hat Developer Conference in
Brno, Czech Republic.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 25 Jan 2011 22:26:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2011-01-25:/blog/projects/fosdem2011.html</guid><category>projects</category></item><item><title>Chorin</title><link>https://0pointer.net/blog/photos/chorin.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/chorin"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/chorin-gimped-small.jpeg" width="1024" height="291" alt="Chorin, Brandenburg, Germany" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Chorin Abbey Church, Brandenburg, Germany&lt;/i&gt;. Yes, indeed, that's a crane.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 21 Nov 2010 00:19:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-11-21:/blog/photos/chorin.html</guid><category>photos</category></item><item><title>systemd for Administrators, Part IV</title><link>https://0pointer.net/blog/projects/systemd-for-admins-4.html</link><description>
                
&lt;p&gt;Here's the fourth installment of my &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;ongoing
series&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;about
systemd&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-3.html"&gt;
for administrators&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Killing Services&lt;/h4&gt;

&lt;p&gt;Killing a system daemon is easy, right? Or is it?&lt;/p&gt;

&lt;p&gt;Sure, as long as your daemon persists only of a single process this might
actually be somewhat true. You type &lt;tt&gt;killall rsyslogd&lt;/tt&gt; and the syslog
daemon is gone. However it is a bit dirty to do it like that given that this
will kill all processes which happen to be called like this, including those an
unlucky user might have named that way by accident. A slightly more correct
version would be to read the &lt;tt&gt;.pid&lt;/tt&gt; file, i.e. &lt;tt&gt;kill `cat
/var/run/syslogd.pid`&lt;/tt&gt;. That already gets us much further, but still, is
this really what we want?&lt;/p&gt;

&lt;p&gt;More often than not it actually isn't. Consider a service like Apache, or
crond, or atd, which as part of their usual operation spawn child processes.
Arbitrary, user configurable child processes, such as cron or at jobs, or CGI
scripts, even full application servers. If you kill the main apache/crond/atd
process this might or might not pull down the child processes too, and it's up
to those processes whether they want to stay around or go down as well.
Basically that means that terminating Apache might very well cause its CGI
scripts to stay around, reassigned to be children of init, and difficult to
track down.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; to
the rescue: With &lt;tt&gt;systemctl kill&lt;/tt&gt; you can easily send a signal to all
processes of a service. Example:&lt;/p&gt;

&lt;pre&gt;# systemctl kill crond.service&lt;/pre&gt;

&lt;p&gt;This will ensure that SIGTERM is delivered to all processes of the crond
service, not just the main process. Of course, you can also send a different
signal if you wish. For example, if you are bad-ass you might want to go for
SIGKILL right-away:&lt;/p&gt;

&lt;pre&gt;# systemctl kill -s SIGKILL crond.service&lt;/pre&gt;

&lt;p&gt;And there you go, the service will be brutally slaughtered in its entirety,
regardless how many times it forked, whether it tried to escape supervision by
double forking or fork bombing.&lt;/p&gt;

&lt;p&gt;Sometimes all you need is to send a specific signal to the main process of a
service, maybe because you want to trigger a reload via SIGHUP. Instead of going via the
PID file, here's an easier way to do this:&lt;/p&gt;

&lt;pre&gt;# systemctl kill -s HUP --kill-who=main crond.service&lt;/pre&gt;

&lt;p&gt;So again, what is so new and fancy about killing services in systemd? Well,
for the first time on Linux we can actually properly do that. Previous
solutions were always depending on the daemons to actually cooperate to bring
down everything they spawned if they themselves terminate. However, usually if
you want to use SIGTERM or SIGKILL you are doing that because they actually do
not cooperate properly with you.&lt;/p&gt;

&lt;p&gt;How does this relate to &lt;tt&gt;systemctl stop&lt;/tt&gt;? &lt;tt&gt;kill&lt;/tt&gt; goes directly
and sends a signal to every process in the group, however &lt;tt&gt;stop&lt;/tt&gt; goes
through the official configured way to shut down a service, i.e. invokes the
stop command configured with &lt;tt&gt;ExecStop=&lt;/tt&gt; in the service file. Usually
&lt;tt&gt;stop&lt;/tt&gt; should be sufficient. &lt;tt&gt;kill&lt;/tt&gt; is the tougher version, for
cases where you either don't want the official shutdown command of a service to
run, or when the service is hosed and hung in other ways.&lt;/p&gt;

&lt;p&gt;(It's up to you BTW to specify signal names with or without the SIG prefix
on the -s switch. Both works.)&lt;/p&gt;

&lt;p&gt;It's a bit surprising that we have come so far on Linux without even being
able to properly kill services. systemd for the first time enables you to do
this properly.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 19 Nov 2010 18:17:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-11-19:/blog/projects/systemd-for-admins-4.html</guid><category>projects</category></item><item><title>systemd Status Update</title><link>https://0pointer.net/blog/projects/systemd-update-2.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/systemd-update.html"&gt;It has been a
while since my last status update on systemd&lt;/a&gt;. Here's another short,
incomprehensive status update on what we worked on for &lt;a href="http://freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; since then.&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Fedora F15 (Rawhide) now includes a split up
&lt;tt&gt;/etc/init.d/rc.sysinit&lt;/tt&gt; (Bill Nottingham). This allows us to keep only
a minimal compatibility set of shell scripts around, and boot otherwise a
system without any shell scripts at all. In fact, shell scripts during early
boot are only used in exceptional cases, i.e. when you enabled autoswapping
(bad idea anyway), when a full SELinux relabel is necessary, during the first
boot after initialization, if you have static kernel modules to load (which are
not configured via the systemd-native way to do that), if you boot from a
read-only NFS server, or when you rely on LVM/RAID/Multipath. If nothing of
this applies to you can easily disable these parts of early boot and
save several seconds on boot. How to do this I will describe in a later blog
story.&lt;/li&gt;

&lt;li&gt;We have a fully C coded shutdown logic that kills all remaining processes,
unmounts all remaining file systems, detaches all loop devices and DM volumes
and does that in the right way to ensure that all these things are properly
teared down even if they depend on each other in arbitrary ways. This is not
only considerably faster then the traditional shell hackery for this, but also
a lot safer, since we try to unmount/remount the remaining file systems with a
little bit of brains. This feature is available via &lt;tt&gt;systemctl --force
poweroff&lt;/tt&gt; to the administrator. The &lt;tt&gt;--force&lt;/tt&gt; controls whether the
usual shutdown of all services is run or whether this is skipped and we
immediately shall enter this final C shutdown logic. Using &lt;tt&gt;--force&lt;/tt&gt;
hence is a much safer replacement for the old &lt;tt&gt;/sbin/reboot -f&lt;/tt&gt; and does
not leave dirty file systems behind. (Thanks to Fabiano Fidencio has his
colleagues from ProFUSION for this).&lt;/li&gt;

&lt;li&gt;systemd now includes a minmalistic readahead implementation, based on
fanotify(), fadvise() and mincore(). It supports btrfs defragmentation and both
SSD and HDD disks. While the effect on boots that are anyway fast (such as most
stuff involving SSD) is minimal, slower and older machines benefit from this
more substantially.&lt;/li&gt;

&lt;li&gt;We now control fsck and quota during early boot with a C tool that ensure
maximum parallelization but properly implements the necessary high-level
administration logic.&lt;/li&gt;

&lt;li&gt;Every service, every user and every user session now gets its own cgroup in
the 'cpu' hierarchy thus creating better fairness between the logged in users
and their sessions.&lt;/li&gt;

&lt;li&gt;We now provide &lt;tt&gt;/dev/log&lt;/tt&gt; logging from early boot to late shutdown.
If no syslog daemon is running the output is passed on to kmsg. As soon as a
proper syslog daemon starts up the kmsg buffer is flushed to syslog, and hence
we will have complete log coverage in syslog even for early boot.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;systemctl kill&lt;/tt&gt; was introduced, an easy command to send a signal to
all processes of a service. Expect a blog story with more details about this
shortly.&lt;/li&gt;

&lt;li&gt;systemd gained the ability to load the SELinux policy if necessary, thus
supporting non-initrd boots and initrd boots from the same binary with no
duplicate work. This is in fact (and surprisingly) a first among Linux init
systems.&lt;/li&gt;

&lt;li&gt;We now initialize and set the system locale inside PID 1 to be inherited by
all services and users.&lt;/li&gt;

&lt;li&gt;systemd has native support for &lt;tt&gt;/etc/crypttab&lt;/tt&gt; and can activate
encrypted LUKS/dm-crypt disks both at boot-up and during runtime. A minimal
password querying infrastructure is available, where multiple agents can be
used to present the password to the user. During boot the password is queried
either via Plymouth or directly on the console. If a system crypto disk is
plugged in after boot you are queried for the password via a GNOME agent, or a
wall(1) agent. Finally, while you run &lt;tt&gt;systemctl start&lt;/tt&gt; (or a similar
command) a minimal TTY password agent is available which asks you for passwords
right-away if this is necessary. The password querying logic is very simple,
additional agents can be implemented in a trivial amount of code (Yupp, KDE folks, you
can add an agent for this, too). Note that the password querying logic in
systemd is only for non-user passwords, i.e. passwords that have no relation to
a specific user, but rather to specific hardware or system software. In future
we hope to extend this so that this can be used to query the password of SSL
certificates when Apache or other servers start.&lt;/li&gt;

&lt;li&gt;We offer a minimal interface that external projects can use to extend the
dependency graph systemd manages. In fact, the cryptsetup logic mentioned above
is implemented via this 'plugin'-like system. Since we did not want to add code
that deals with cryptographic disks into the systemd process itself we
introduced this interface (after all cryptographic volumes are not an essential
feature of a minimal OS, and unncessary on most embedded uses; also the future
might bring us STC which might make this at least partially obsolete). Simply
by dropping a &lt;i&gt;generator&lt;/i&gt; binary into
&lt;tt&gt;/lib/systemd/system-generators&lt;/tt&gt; which should write out systemd unit
files into a temporary directory third-party packages may extend the systemd
dependency tree dynamically. This could be useful for example to automatically
create a systemd service for each KVM machine or LXC container. With that in
place those containers/machines could be managed and supervised with the same
tools as the usual system services.&lt;/li&gt;

&lt;li&gt;We integrated automatic clean-up of directories such as &lt;tt&gt;/tmp&lt;/tt&gt; into
the &lt;tt&gt;tmpfiles&lt;/tt&gt; logic we already had in place that recreates files and
directories on volatile file systems such as &lt;tt&gt;/var/run&lt;/tt&gt;,
&lt;tt&gt;/var/lock&lt;/tt&gt; or &lt;tt&gt;/tmp&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;We now always measure and write to the log files the system startup time we
measured, broken up into how many time was spent on the kernel, the initrd and
the initialization of userspace.&lt;/li&gt;

&lt;li&gt;We now safely destroy all user session before going down. This is a feature
long missing on Linux: since user processes were not killed until the very last
moment the unhealthy situation that user code was running at a time where no
other daemon was remaining was a normal part of shutdown.&lt;/li&gt;

&lt;li&gt;systemd now understands an 'extreme' form of disabling a service: if you
symlink a service name in &lt;tt&gt;/etc/systemd/system&lt;/tt&gt; to &lt;tt&gt;/dev/null&lt;/tt&gt;
then systemd will mark it as &lt;i&gt;masked&lt;/i&gt; and completely refuse starting it,
regardless if this is requested manually or automaticallly. Normally it should
be sufficient to simply call &lt;tt&gt;systemctl disable&lt;/tt&gt; to disable a service
which still allows manual activation but no automatic activation. Masking a
service goes one step further.&lt;/li&gt;

&lt;li&gt;There's now a simple &lt;i&gt;condition&lt;/i&gt; syntax in places which allows
skipping or enabling units depending on the existance of a file, whether a
directory is empty or whether a kernel command line option is set.&lt;/li&gt;

&lt;li&gt;In addition to normal shutdowns for reboot, halt or poweroff we now
similarly support a kexec reboot, that reboots the machine without going though
the BIOS code again.&lt;/li&gt;

&lt;li&gt;We have bash completion support for &lt;tt&gt;systemctl&lt;/tt&gt;. (Ran Benita)&lt;/li&gt;

&lt;li&gt;Andrew Edmunds contributed basic support to boot Ubuntu with systemd.&lt;/li&gt;

&lt;li&gt;Michael Biebl and Tollef Fog Heen have worked on the systemd integration
into Debian to a level that it is now possible to boot a system without having
the old &lt;tt&gt;initscripts&lt;/tt&gt; packaged installed. For more details &lt;a href="http://wiki.debian.org/systemd"&gt;see the Debian Wiki&lt;/a&gt;. Michael even
tested this integration on an Ubuntu Natty system and as it turns out this
works almost equally well on Ubuntu already. If you are interesting in playing
around with this, ping Michael.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;And that's it for now. There's a lot of other stuff in the git commits, but
most of it is smaller and I will it thus spare you.&lt;/p&gt;

&lt;p&gt;We have come quite far in the last year. systemd is about a year old now,
and we are now able to boot a system without legacy shell scripts remaining,
something that appeared to be a task for the distant future.&lt;/p&gt;

&lt;p&gt;All of this is available in systemd 13 and in F15/Rawhide as I type
this. If you want to play around with this then consider installing Rawhide
(it's fun!).&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 19 Nov 2010 04:30:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-11-19:/blog/projects/systemd-update-2.html</guid><category>projects</category></item><item><title>27C3 Fudfest</title><link>https://0pointer.net/blog/projects/ccc-nervt.html</link><description>
                
&lt;p&gt;I really wonder why on earth the 27C3 accepted a &lt;a href="http://events.ccc.de/congress/2010/Fahrplan/events/4017.en.html"&gt;nonsensical
paper like this&lt;/a&gt; into their programme. So .. stupid. You read half the
proposal and it's already kinda obvious that the presenter has no idea what he
is talking of. Fundamental errors, obvious misinterpretations, outdated issues:
this is just FUD.&lt;/p&gt;

&lt;p&gt;And apparently this talk even is anonymous? Such a coward! FUDing around
anonymously is acceptable at the CCC?&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 13 Nov 2010 21:44:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-11-13:/blog/projects/ccc-nervt.html</guid><category>projects</category></item><item><title>Linux Plumbers Conference/Gnome Summit Recap</title><link>https://0pointer.net/blog/projects/lpc2010-recap.html</link><description>
                
&lt;p&gt;Last week &lt;a href="http://www.linuxplumbersconf.org/2010/"&gt;LPC&lt;/a&gt; and &lt;a href="http://live.gnome.org/Boston2010"&gt;GS&lt;/a&gt; 2010 took place in Cambridge,
MA. Like the last years, LPC showed again that -- at least for me -- it is one of
the most relevant Linux conferences in existence, if not the single most
relevant one.&lt;/p&gt;

&lt;p&gt;Here's a terse, incomprehensive report of the different discussions I took
part in with various folks at the conference, in no particular order:&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://wiki.linuxplumbersconf.org/2010:early_boot_and_init_systems"&gt;Boot
and Init&lt;/a&gt; track led by Kay Sievers (Suse) was a great success. We had
exciting talks which I think helped quite a bit in clearing a few things up,
and hopefully helps us in consolidating the full Linux boot process among all
the components involved.  We had talks covering everything from the BIOS boot,
to initrds, graphical boot splashes and &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;.  Kay
Sievers and I spoke about systemd, also covering the state of it in the Fedora
and openSUSE distributions. Gustavo Barbieri (ProFUSION, Gentoo) and Michael
Biebl (Debian) gave interesting talks about systemd adoption in their
respective distributions. I was particularly interested in the various
statistics Michael showed about SysV/LSB init script usage in Debian, because
this gives an idea how much work we have in front of us in the long run. A
longer discussion about the future of initrds and the logic necessary to find
the root file system on boot was quite enlightening. I think this track was
helpful to increase the unification and consolidation of the way Linux systems
boot up and are maintained during runtime.&lt;/p&gt;

&lt;p&gt;Kay and I and some other folks sat down with Arjan van de Ven (Intel), to
talk about the prospects of systemd in Meego. The discussions were very
positive. In particular Arjan hat some great suggestions regarding use of the
&lt;a href="http://www.microsoft.com/whdc/resources/respec/specs/simp_boot.mspx"&gt;Simple
Boot Flag&lt;/a&gt; in systemd (expect this in one of the next versions) and
readahead. Before systemd can find adoption in Meego we'd have to add a short
number of features to systemd first, most of them should be easy to add.&lt;/p&gt;

&lt;p&gt;Similarly, I sat down with Martin Pitt and James Hunt (both Canonical) and
discussed systemd in relation to Ubuntu. I think we managed to clear a lot of
things up, and have a good chance to improve cooperation between Ubuntu and
systemd in relation to APIs and maybe even more.&lt;/p&gt;

&lt;p&gt;We talked to Thomas Gleixner regarding userspace notifications when the
wallclock time jumps relative to the monotonic clock. This is important to
systemd so that we can schedule calendar jobs similar to cron, but without
having to wake up periodically to check whether the wallclock time changed
relatively to the monotonic clock so that we can recalculate the next
point in time a calendar event is triggered. There has been previous work in
this area in the kernel world, but nothing got merged. Thomas' suggestion how to
add this facility should be much easier than anything proposed so far.&lt;/p&gt;

&lt;p&gt;I also tried to talk Andreas Gr&amp;uuml;nbacher into supporting file system
user extended attributes in various virtual file systems such as procfs,
cgroupfs, sysfs and tmpfs. I hope I convinced him that this would be a good
idea, since this would allow setting externally accessible attributes to all
kinds of kernel objects, such as processes and devices. This would not only
have uses in systemd (where we could easily store all meta information systemd
needs to know about a service in the cgroupfs via xattrs, so that systemd could
even crash or go away at any time and we still can read all runtime information
necessary beyond mere cgrouping from the file system when systemd comes to live
again) but also in the desktop environments, so that we could for example
attach the human readable application name, an icon or a desktop file to the
processes currently running, in a simple way where the data we attach follows
the lifecycle of the process itself.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://wiki.linuxplumbersconf.org/2010:audio"&gt;Audio&lt;/a&gt; track
went really well, too. I was particularly excited about Pierre-Louis Bossart's
(Intel) plans regarding AC3 (and other codecs) support in &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt;, and the simplicity of his
approach. Also great was hearing about Laurent Pinchart's project to expose
audio and video device routing to userspace. Finally, I really enjoyed David
Henningsson's and Luke Yelavich's (both Canonical) talk regarding tracking down audio bugs on
Ubuntu. I was really impressed by the elaborate tools they created to test
audio drivers on users machines.  Pretty cool stuff. Maybe this can be extended
into a test suite for driver writers, because the current approach for driver
writers (i.e. "If PulseAudio works correctly, your driver is correct") doesn't
really scale (although I like the idea and take it as a compliment...). I also
liked the timechart profiling results Pierre showed me that he generated for
PulseAudio. Seems PulseAudio is behaving quite nicely these days.&lt;/p&gt;

&lt;p&gt;Together with Harald Hoyer I got a demo of David Zeuthen's disk assembly
daemon (stc), which makes RAID/MD/LVM assembly more dynamic. Great stuff, and I
think we convinced him to leave actual mounting of file systems to systemd
instead of doing it himself.&lt;/p&gt;

&lt;p&gt;Harald and I also hashed out a few things to make integration between dracut
and systemd nicer (i.e. passing along profiling information between the two,
and information regarding the root fsck).&lt;/p&gt;

&lt;p&gt;I also hope I convinced Ray Strode to make Plymouth actively listen to udev
for notifications about DRM devices, so that further synchronization between
udev and plymouth won't be necessary, which both makes things more robust and a
little bit faster.&lt;/p&gt;

&lt;p&gt;Kay and I talked to Greg Kroah-Hartman regarding the brokeness of
VT_WAITEVENT in kernel TTY layer, and discussed what to do about this. After returning from the US Kay now
did the necessary hacking work to provide a minimal sysfs based solution that
allows userspace query to which TTYs &lt;tt&gt;/dev/console&lt;/tt&gt; and
&lt;tt&gt;/dev/tty0&lt;/tt&gt; currently point, and get notifications when this changes.
This should allow us to greatly simplify ConsoleKit and make it possible to
add console-triggered activation to systemd (think: getty gets started the
moment you switch to its virtual terminal, not already at boot).&lt;/p&gt;

&lt;p&gt;I also spent some time discussing the upcoming deadline scheduling kernel
logic with Dario, Dhaval and Tommaso regarding its possible use in PulseAudio.
I believe deadline schedule is a useful tool to hand out real-time scheduling
to applications securely. As an easy path to supporting deadline scheduling in
PulseAudio I suggested patching RealtimeKit to optionally use deadline
scheduling for its clients. This would magically teach PA (and other clients) to
use deadline scheduling without further patching in the clients.&lt;/p&gt;

&lt;p&gt;At GNOME Summit I sat down with Ryan Lortie and Will Thompson to discuss the
the future of the D-Bus session bus and how we can move to a machine/user bus
instead in a nice way. We managed to come to a nice agreement here, and this
should enable us to introduce systemd for session management soonishly. Now we
only need to convince the other folks having stakes in D-Bus that what we
discussed is actually a good idea, expect more about this soon on dbus-devel.
Ryan and I also hashed out our remaining differences regarding the exact
semantics of XDG_RUNTIME_DIR, the result of which you can &lt;a href="http://lists.freedesktop.org/archives/xdg/2010-November/011681.html"&gt;already
see on the XDG mailing list&lt;/a&gt;. Ryan already did the GLib work to introduce
XDG_RUNTIME_DIR and systemd already supports this inofficially since a few
versions.&lt;/p&gt;

&lt;p&gt;I quite appreciate how Michael Meeks &lt;a href="http://lwn.net/Articles/414051/"&gt;quoted me&lt;/a&gt; in his final
keynote. ;-)&lt;/p&gt;

&lt;p&gt;There was a lot of other stuff going on at the conference, and what I
wrote above is in no way complete. And of course, besides all the technical
stuff, it was great meeting all the good Linux folks again, especially my
colleagues from Red Hat.&lt;/p&gt;

&lt;p&gt;I am still amazed how systemd is received so positively and with open arms
all across the board. It's particularly amazing that systemd at this point in
time has already been adopted by various companies in the automotive and
aviation industry.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 09 Nov 2010 21:21:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-11-09:/blog/projects/lpc2010-recap.html</guid><category>projects</category></item><item><title>Off to LPC 2010, Boston</title><link>https://0pointer.net/blog/projects/lpc2010.html</link><description>
                
&lt;p&gt;Later this week the &lt;a href="http://www.linuxplumbersconf.org/2010/"&gt;Linux Plumbers Conference 2010&lt;/a&gt; will take place at the
Hyatt Regency in Cambridge.&lt;/p&gt;

&lt;p&gt;Together with Mark Brown I'll be running the conference track about &lt;a href="http://www.linuxplumbersconf.org/2010/ocw/events/LPC2010MC/tracks/53"&gt;Audio&lt;/a&gt;,
and I believe we managed to put together quite a nice schedule with various
interesting talks covering many areas of what Audio on Linux is about.&lt;/p&gt;

&lt;p&gt;I'll also be around at the &lt;a href="http://wiki.linuxplumbersconf.org/2010:early_boot_and_init_systems"&gt;Boot
and Init Systems&lt;/a&gt; track which Kay Sievers is running. Together with Kay I'll
do a session about &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;,
everybody's favourite system and session manager. We also managed to convince a
number of distribution maintainers of systemd to do short presentations about
the state of systemd adoption in their respective distributions: Michael Biebl
from Debian, Gustavo Barbieri from Gentoo, Kay for openSUSE and yours truly for
Fedora.&lt;/p&gt;

&lt;p&gt;Because there never can be enough systemd coverage at a conference I'll do
another talk about systemd, in Vincent Untz' &lt;a href="http://www.linuxplumbersconf.org/2010/ocw/events/LPC2010MC/tracks/117"&gt;Desktop&lt;/a&gt;
track, this time focussing less on how to boot and maintain a system, but more
on doing the same for desktop sessions, in particular GNOME.&lt;/p&gt;

&lt;p&gt;I'll also stick around for the the first two days of the GNOME Boston Summit.&lt;/p&gt;

&lt;p&gt;See you in Cambridge!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 01 Nov 2010 02:18:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-11-01:/blog/projects/lpc2010.html</guid><category>projects</category></item><item><title>FOSS.in CFP Deadline Approaching!</title><link>https://0pointer.net/blog/projects/foss-in-2010.html</link><description>
                
&lt;p&gt;I just submitted my paper&lt;sup&gt;[1]&lt;/sup&gt; for FOSS.in 2010 in
Bangalore/India. Don't forget to submit yours! The CFP closes on 10th of
October. That's this Sunday!  Hurry up, before it is too late!&lt;/p&gt;

&lt;p&gt;FOSS.in is one of the most amazing Free Software conferences this world has
to offer (hey, and I think I can say that because I have presented at quite a few). A dedicated
audience, flawless organization, magic hospitality, and all this in incredible
India! Both the technical programme and everything around it are impressive. Which
other conference can offer you &lt;a href="http://en.wikipedia.org/wiki/The_Raghu_Dixit_Project"&gt;a concert of one of
India's greatest acts&lt;/a&gt; as part of the schedule? Which other international
conference host city can be such a positive attack on your senses as Bangalore (see
that endless sea of flowers below)? And where else do they serve &lt;a href="http://en.wikipedia.org/wiki/Vark"&gt;pure silver&lt;/a&gt; as part of the conference catering?&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/photos/?gallery=India%20Bangalore%202009-12&amp;amp;photo=139"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%20Bangalore%202009-12/lq/img-139.jpg" width="640" height="427" alt="Bangalore Market" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://foss.in/news/foss-in2010-call-for-participation.html"&gt;Read the CFP!&lt;/a&gt; Or, &lt;a href="http://foss.in/register/speaker"&gt;go straight to submitting a paper.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;small&gt;Footnotes&lt;/small&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;[1]&lt;/sup&gt; About systemd.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 07 Oct 2010 01:45:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-10-07:/blog/projects/foss-in-2010.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part III</title><link>https://0pointer.net/blog/projects/systemd-for-admins-3.html</link><description>
                
&lt;p&gt;Here's the third installment of my &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;ongoing
series about&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-2.html"&gt;systemd
for administrators&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;How Do I Convert A SysV Init Script Into A systemd Service File?&lt;/h4&gt;

&lt;p&gt;Traditionally, Unix and Linux services (&lt;i&gt;daemons&lt;/i&gt;) are started
via SysV init scripts. These are Bourne Shell scripts, usually
residing in a directory such as &lt;tt&gt;/etc/rc.d/init.d/&lt;/tt&gt; which when
called with one of a few standardized arguments (verbs) such as
&lt;tt&gt;start&lt;/tt&gt;, &lt;tt&gt;stop&lt;/tt&gt; or &lt;tt&gt;restart&lt;/tt&gt; controls,
i.e. starts, stops or restarts the service in question. For starts
this usually involves invoking the daemon binary, which then forks a
background process (more precisely &lt;i&gt;daemonizes&lt;/i&gt;). Shell scripts
tend to be slow, needlessly hard to read, very verbose and
fragile. Although they are immensly flexible (after all, they are just
code) some things are very hard to do properly with shell scripts,
such as ordering parallized execution, correctly supervising processes
or just configuring execution contexts in all detail. systemd provides
compatibility with these shell scripts, but due to the shortcomings
pointed out it is recommended to install native systemd service files
for all daemons installed. Also, in contrast to SysV init scripts
which have to be adjusted to the distribution systemd service files
are compatible with any kind of distribution running systemd (which
become more and more these days...). What follows is a terse guide how
to take a SysV init script and translate it into a native systemd
service file. Ideally, upstream projects should ship and install
systemd service files in their tarballs. If you have successfully
converted a SysV script according to the guidelines it might hence be
a good idea to submit the file as patch to upstream. How to prepare a
patch like that will be discussed in a later installment, suffice to
say at this point that the &lt;a href="http://0pointer.de/public/systemd-man/daemon.html"&gt;daemon(7)&lt;/a&gt;
manual page shipping with systemd contains a lot of useful information
regarding this.&lt;/p&gt;

&lt;p&gt;So, let's jump right in. As an example we'll convert the init
script of the ABRT daemon into a systemd service file. ABRT is a
standard component of every Fedora install, and is an acronym for
Automatic Bug Reporting Tool, which pretty much describes what it
does, i.e. it is a service for collecting crash dumps. &lt;a href="http://0pointer.de/public/abrtd"&gt;Its SysV script I have uploaded
here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step when converting such a script is to read it
(surprise surprise!) and distill the useful information from the
usually pretty long script. In almost all cases the script consists of
mostly boilerplate code that is identical or at least very similar in
all init scripts, and usually copied and pasted from one to the
other. So, let's extract the interesting information from the script
linked above:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;A description string for the service is "&lt;i&gt;Daemon to detect
crashing apps&lt;/i&gt;". As it turns out, the header comments include a
redundant number of description strings, some of them describing less
the actual service but the init script to start it. systemd services
include a description too, and it should describe the service and not
the service file.&lt;/li&gt;

&lt;li&gt;The LSB header&lt;sup&gt;[1]&lt;/sup&gt; contains dependency
information. systemd due to its design around socket-based activation
usually needs no (or very little) manually configured
dependencies. (For details regarding socket activation &lt;a href="http://0pointer.de/blog/projects/systemd.html"&gt;see the original
announcement blog post.&lt;/a&gt;) In this case the dependency on
&lt;tt&gt;$syslog&lt;/tt&gt; (which encodes that abrtd requires a syslog daemon),
is the only valuable information. While the header lists another
dependency (&lt;tt&gt;$local_fs&lt;/tt&gt;) this one is redundant with systemd as
normal system services are always started with all local file systems
available.&lt;/li&gt;

&lt;li&gt;The LSB header suggests that this service should be started in
runlevels 3 (multi-user) and 5 (graphical).&lt;/li&gt;

&lt;li&gt;The daemon binary is &lt;tt&gt;/usr/sbin/abrtd&lt;/tt&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;And that's already it. The entire remaining content of this
115-line shell script is simply boilerplate or otherwise redundant
code: code that deals with synchronizing and serializing startup
(i.e. the code regarding lock files) or that outputs status messages
(i.e. the code calling echo), or simply parsing of the verbs (i.e. the
big case block).&lt;/p&gt;

&lt;p&gt;From the information extracted above we can now write our systemd service file:&lt;/p&gt;

&lt;pre&gt;[Unit]
Description=Daemon to detect crashing apps
After=syslog.target

[Service]
ExecStart=/usr/sbin/abrtd
Type=forking

[Install]
WantedBy=multi-user.target&lt;/pre&gt;

&lt;p&gt;A little explanation of the contents of this file: The
&lt;tt&gt;[Unit]&lt;/tt&gt; section contains generic information about the
service. systemd not only manages system services, but also devices,
mount points, timer, and other components of the system. The generic
term for all these objects in systemd is a &lt;i&gt;unit&lt;/i&gt;, and the
&lt;tt&gt;[Unit]&lt;/tt&gt; section encodes information about it that might be
applicable not only to services but also in to the other unit types
systemd maintains. In this case we set the following unit settings: we
set the description string and configure that the daemon shall be
started after Syslog&lt;sup&gt;[2]&lt;/sup&gt;, similar to what is encoded in the
LSB header of the original init script. For this Syslog dependency we
create a dependency of type &lt;tt&gt;After=&lt;/tt&gt; on a systemd unit
&lt;tt&gt;syslog.target&lt;/tt&gt;. The latter is a special target unit in systemd
and is the standardized name to pull in a syslog implementation. For
more information about these standardized names see the &lt;a href="http://0pointer.de/public/systemd-man/systemd.special.html"&gt;systemd.special(7)&lt;/a&gt;. Note
that a dependency of type &lt;tt&gt;After=&lt;/tt&gt; only encodes the suggested
ordering, but does not actually cause syslog to be started when abrtd
is -- and this is exactly what we want, since abrtd actually works
fine even without syslog being around. However, if both are started
(and usually they are) then the order in which they are is controlled
with this dependency.&lt;/p&gt;

&lt;p&gt;The next section is &lt;tt&gt;[Service]&lt;/tt&gt; which encodes information
about the service itself. It contains all those settings that apply
only to services, and not the other kinds of units systemd maintains
(mount points, devices, timers, ...). Two settings are used here:
&lt;tt&gt;ExecStart=&lt;/tt&gt; takes the path to the binary to execute when the
service shall be started up. And with &lt;tt&gt;Type=&lt;/tt&gt; we configure how
the service notifies the init system that it finished starting up. Since
traditional Unix daemons do this by returning to the parent process
after having forked off and initialized the background daemon we set
the type to &lt;tt&gt;forking&lt;/tt&gt; here. That tells systemd to wait until
the start-up binary returns and then consider the processes still
running afterwards the daemon processes.&lt;/p&gt;

&lt;p&gt;The final section is &lt;tt&gt;[Install]&lt;/tt&gt;. It encodes information
about how the suggested installation should look like, i.e. under
which circumstances and by which triggers the service shall be
started. In this case we simply say that this service shall be started
when the &lt;tt&gt;multi-user.target&lt;/tt&gt; unit is activated. This is a
special unit (see above) that basically takes the role of the classic
SysV Runlevel 3&lt;sup&gt;[3]&lt;/sup&gt;. The setting &lt;tt&gt;WantedBy=&lt;/tt&gt; has
little effect on the daemon during runtime. It is only read by the
&lt;tt&gt;systemctl enable&lt;/tt&gt; command, which is the recommended way to
enable a service in systemd. This command will simply ensure that our
little service gets automatically activated as soon as
&lt;tt&gt;multi-user.target&lt;/tt&gt; is requested, which it is on all normal
boots&lt;sup&gt;[4]&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;And that's it. Now we already have a minimal working systemd
service file. To test it we copy it to
&lt;tt&gt;/etc/systemd/system/abrtd.service&lt;/tt&gt; and invoke &lt;tt&gt;systemctl
daemon-reload&lt;/tt&gt;. This will make systemd take notice of it, and now
we can start the service with it: &lt;tt&gt;systemctl start
abrtd.service&lt;/tt&gt;. We can verify the status via &lt;tt&gt;systemctl status
abrtd.service&lt;/tt&gt;. And we can stop it again via &lt;tt&gt;systemctl stop
abrtd.service&lt;/tt&gt;. Finally, we can enable it, so that it is activated
by default on future boots with &lt;tt&gt;systemctl enable
abrtd.service&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The service file above, while sufficient and basically a 1:1
translation (feature- and otherwise) of the SysV init script still has room for
improvement. Here it is a little bit updated:&lt;/p&gt;

&lt;pre&gt;[Unit]
Description=ABRT Automated Bug Reporting Tool
After=syslog.target

[Service]
Type=dbus
BusName=com.redhat.abrt
ExecStart=/usr/sbin/abrtd -d -s

[Install]
WantedBy=multi-user.target&lt;/pre&gt;

&lt;p&gt;So, what did we change? Two things: we improved the description
string a bit. More importantly however, we changed the type of the
service to &lt;tt&gt;dbus&lt;/tt&gt; and configured the D-Bus bus name of the
service. Why did we do this? As mentioned classic SysV services
&lt;i&gt;daemonize&lt;/i&gt; after startup, which usually involves double forking
and detaching from any terminal. While this is useful and necessary
when daemons are invoked via a script, this is unnecessary (and slow)
as well as counterproductive when a proper process babysitter such as
systemd is used. The reason for that is that the forked off daemon
process usually has little relation to the original process started by
systemd (after all the daemonizing scheme's whole idea is to remove
this relation), and hence it is difficult for systemd to figure out
after the fork is finished which process belonging to the service is
actually the main process and which processes might just be
auxiliary. But that information is crucial to implement advanced
babysitting, i.e. supervising the process, automatic respawning on
abnormal termination, collectig crash and exit code information and
suchlike. In order to make it easier for systemd to figure out the
main process of the daemon we changed the service type to
&lt;tt&gt;dbus&lt;/tt&gt;. The semantics of this service type are appropriate for
all services that take a name on the D-Bus system bus as last step of
their initialization&lt;sup&gt;[5]&lt;/sup&gt;. ABRT is one of those. With this setting systemd
will spawn the ABRT process, which will no longer fork (this is
configured via the &lt;tt&gt;-d -s&lt;/tt&gt; switches to the daemon), and systemd
will consider the service fully started up as soon as
&lt;tt&gt;com.redhat.abrt&lt;/tt&gt; appears on the bus. This way the process
spawned by systemd is the main process of the daemon, systemd has a
reliable way to figure out when the daemon is fully started up and
systemd can easily supervise it.&lt;/p&gt;

&lt;p&gt;And that's all there is to it. We have a simple systemd service
file now that encodes in 10 lines more information than the original
SysV init script encoded in 115. And even now there's a lot of room
left for further improvement utilizing more features systemd
offers. For example, we could set &lt;tt&gt;Restart=restart-always&lt;/tt&gt; to
tell systemd to automatically restart this service when it dies. Or,
we could use &lt;tt&gt;OOMScoreAdjust=-500&lt;/tt&gt; to ask the kernel to please
leave this process around when the OOM killer wreaks havoc. Or, we
could use &lt;tt&gt;CPUSchedulingPolicy=idle&lt;/tt&gt; to ensure that abrtd
processes crash dumps in background only, always allowing the kernel
to give preference to whatever else might be running and needing CPU
time.&lt;/p&gt;

&lt;p&gt;For more information about the configuration options mentioned
here, see the respective man pages &lt;a href="http://0pointer.de/public/systemd-man/systemd.unit.html"&gt;systemd.unit(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.service.html"&gt;systemd.service(5)&lt;/a&gt;,
&lt;a href="http://0pointer.de/public/systemd-man/systemd.exec.html"&gt;systemd.exec(5)&lt;/a&gt;. Or,
browse &lt;a href="http://0pointer.de/public/systemd-man/"&gt;all of
systemd's man pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, not all SysV scripts are as easy to convert as this
one. But gladly, as it turns out the vast majority actually are.&lt;/p&gt;

&lt;p&gt;That's it for today, come back soon for the next installment in our series.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] The LSB header of init scripts is a convention of
including meta data about the service in comment blocks at the top of
SysV init scripts and &lt;a href="http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/initscrcomconv.html"&gt;is
defined by the Linux Standard Base&lt;/a&gt;. This was intended to
standardize init scripts between distributions. While most
distributions have adopted this scheme, the handling of the headers
varies greatly between the distributions, and in fact still makes it
necessary to adjust init scripts for every distribution. As such the LSB spec
never kept the promise it made.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] Strictly speaking, this dependency does not even have to
be encoded here, as it is redundant in a system where the Syslog
daemon is socket activatable. Modern syslog systems (for example
rsyslog v5) have been patched upstream to be socket-activatable. If
such a init system is used configuration of the
&lt;tt&gt;After=syslog.target&lt;/tt&gt; dependency is redundant and
implicit. However, to maintain compatibility with syslog services that
have not been updated we include this dependency here.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[3] At least how it used to be defined on Fedora.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[4] Note that in systemd the graphical bootup
(&lt;tt&gt;graphical.target&lt;/tt&gt;, taking the role of SysV runlevel 5) is an
implicit superset of the console-only bootup
(&lt;tt&gt;multi-user.target&lt;/tt&gt;, i.e. like runlevel 3). That means hooking
a service into the latter will also hook it into the
former.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[5] Actually the majority of services of the default Fedora
install now take a name on the bus after startup.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 01 Oct 2010 04:42:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-10-01:/blog/projects/systemd-for-admins-3.html</guid><category>projects</category></item><item><title>Xiph Video</title><link>https://0pointer.net/blog/projects/video.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.xiph.org/video/"&gt;Don't miss Monty's awesome video.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 24 Sep 2010 10:58:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-09-24:/blog/projects/video.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part II</title><link>https://0pointer.net/blog/projects/systemd-for-admins-2.html</link><description>
                
&lt;p&gt;Here's the second installment of my &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1.html"&gt;ongoing series about systemd for administrators&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;Which Service Owns Which Processes?&lt;/h4&gt;

&lt;p&gt;On most Linux systems the number of processes that are running by
default is substantial. Knowing which process does what and where it
belongs to becomes increasingly difficult. Some services even maintain
a couple of worker processes which clutter the "&lt;tt&gt;ps&lt;/tt&gt;" output with
many additional processes that are often not easy to recognize. This is
further complicated if daemons spawn arbitrary 3rd-party processes, as
Apache does with CGI processes, or cron does with user jobs.&lt;/p&gt;

&lt;p&gt;A slight remedy for this is often the process inheritance tree, as
shown by "&lt;tt&gt;ps xaf&lt;/tt&gt;". However this is usually not reliable, as processes
whose parents die get reparented to PID 1, and hence all information
about inheritance gets lost. If a process "double forks" it hence loses
its relationships to the processes that started it. (This actually is
supposed to be a feature and is relied on for the traditional Unix
daemonizing logic.) Furthermore processes can freely change their names
with &lt;tt&gt;PR_SETNAME&lt;/tt&gt; or by patching &lt;tt&gt;argv[0]&lt;/tt&gt;, thus making
it harder to recognize them. In fact they can play hide-and-seek with
the administrator pretty nicely this way.&lt;/p&gt;

&lt;p&gt;In systemd we place every process that is spawned in a &lt;i&gt;control
group&lt;/i&gt; named after its service. Control groups (or &lt;i&gt;cgroups&lt;/i&gt;)
at their most basic are simply groups of processes that can be
arranged in a hierarchy and labelled individually. When processes
spawn other processes these children are automatically made members of
the parents cgroup. Leaving a cgroup is not possible for unprivileged
processes. Thus, cgroups can be used as an effective way to label
processes after the service they belong to and be sure that the
service cannot escape from the label, regardless how often it forks or
renames itself. Furthermore this can be used to safely kill a service
and all processes it created, again with no chance of escaping.&lt;/p&gt;

&lt;p&gt;In today's installment I want to introduce you to two commands you
may use to relate systemd services and processes. The first one, is
the well known &lt;tt&gt;ps&lt;/tt&gt; command which has been updated to show
cgroup information along the other process details. And this is how it
looks:&lt;/p&gt;

&lt;pre&gt;$ ps xawf -eo pid,user,cgroup,args
  PID USER     CGROUP                              COMMAND
    2 root     -                                   [kthreadd]
    3 root     -                                    \_ [ksoftirqd/0]
[...]
 4281 root     -                                    \_ [flush-8:0]
    1 root     name=systemd:/systemd-1             /sbin/init
  455 root     name=systemd:/systemd-1/sysinit.service /sbin/udevd -d
28188 root     name=systemd:/systemd-1/sysinit.service  \_ /sbin/udevd -d
28191 root     name=systemd:/systemd-1/sysinit.service  \_ /sbin/udevd -d
 1096 dbus     name=systemd:/systemd-1/dbus.service /bin/dbus-daemon --system --address=systemd: --nofork --systemd-activation
 1131 root     name=systemd:/systemd-1/auditd.service auditd
 1133 root     name=systemd:/systemd-1/auditd.service  \_ /sbin/audispd
 1135 root     name=systemd:/systemd-1/auditd.service      \_ /usr/sbin/sedispatch
 1171 root     name=systemd:/systemd-1/NetworkManager.service /usr/sbin/NetworkManager --no-daemon
 4028 root     name=systemd:/systemd-1/NetworkManager.service  \_ /sbin/dhclient -d -4 -sf /usr/libexec/nm-dhcp-client.action -pf /var/run/dhclient-wlan0.pid -lf /var/lib/dhclient/dhclient-7d32a784-ede9-4cf6-9ee3-60edc0bce5ff-wlan0.lease -
 1175 avahi    name=systemd:/systemd-1/avahi-daemon.service avahi-daemon: running [epsilon.local]
 1194 avahi    name=systemd:/systemd-1/avahi-daemon.service  \_ avahi-daemon: chroot helper
 1193 root     name=systemd:/systemd-1/rsyslog.service /sbin/rsyslogd -c 4
 1195 root     name=systemd:/systemd-1/cups.service cupsd -C /etc/cups/cupsd.conf
 1207 root     name=systemd:/systemd-1/mdmonitor.service mdadm --monitor --scan -f --pid-file=/var/run/mdadm/mdadm.pid
 1210 root     name=systemd:/systemd-1/irqbalance.service irqbalance
 1216 root     name=systemd:/systemd-1/dbus.service /usr/sbin/modem-manager
 1219 root     name=systemd:/systemd-1/dbus.service /usr/libexec/polkit-1/polkitd
 1242 root     name=systemd:/systemd-1/dbus.service /usr/sbin/wpa_supplicant -c /etc/wpa_supplicant/wpa_supplicant.conf -B -u -f /var/log/wpa_supplicant.log -P /var/run/wpa_supplicant.pid
 1249 68       name=systemd:/systemd-1/haldaemon.service hald
 1250 root     name=systemd:/systemd-1/haldaemon.service  \_ hald-runner
 1273 root     name=systemd:/systemd-1/haldaemon.service      \_ hald-addon-input: Listening on /dev/input/event3 /dev/input/event9 /dev/input/event1 /dev/input/event7 /dev/input/event2 /dev/input/event0 /dev/input/event8
 1275 root     name=systemd:/systemd-1/haldaemon.service      \_ /usr/libexec/hald-addon-rfkill-killswitch
 1284 root     name=systemd:/systemd-1/haldaemon.service      \_ /usr/libexec/hald-addon-leds
 1285 root     name=systemd:/systemd-1/haldaemon.service      \_ /usr/libexec/hald-addon-generic-backlight
 1287 68       name=systemd:/systemd-1/haldaemon.service      \_ /usr/libexec/hald-addon-acpi
 1317 root     name=systemd:/systemd-1/abrtd.service /usr/sbin/abrtd -d -s
 1332 root     name=systemd:/systemd-1/getty@.service/tty2 /sbin/mingetty tty2
 1339 root     name=systemd:/systemd-1/getty@.service/tty3 /sbin/mingetty tty3
 1342 root     name=systemd:/systemd-1/getty@.service/tty5 /sbin/mingetty tty5
 1343 root     name=systemd:/systemd-1/getty@.service/tty4 /sbin/mingetty tty4
 1344 root     name=systemd:/systemd-1/crond.service crond
 1346 root     name=systemd:/systemd-1/getty@.service/tty6 /sbin/mingetty tty6
 1362 root     name=systemd:/systemd-1/sshd.service /usr/sbin/sshd
 1376 root     name=systemd:/systemd-1/prefdm.service /usr/sbin/gdm-binary -nodaemon
 1391 root     name=systemd:/systemd-1/prefdm.service  \_ /usr/libexec/gdm-simple-slave --display-id /org/gnome/DisplayManager/Display1 --force-active-vt
 1394 root     name=systemd:/systemd-1/prefdm.service      \_ /usr/bin/Xorg :0 -nr -verbose -auth /var/run/gdm/auth-for-gdm-f2KUOh/database -nolisten tcp vt1
 1495 root     name=systemd:/user/lennart/1             \_ pam: gdm-password
 1521 lennart  name=systemd:/user/lennart/1                 \_ gnome-session
 1621 lennart  name=systemd:/user/lennart/1                     \_ metacity
 1635 lennart  name=systemd:/user/lennart/1                     \_ gnome-panel
 1638 lennart  name=systemd:/user/lennart/1                     \_ nautilus
 1640 lennart  name=systemd:/user/lennart/1                     \_ /usr/libexec/polkit-gnome-authentication-agent-1
 1641 lennart  name=systemd:/user/lennart/1                     \_ /usr/bin/seapplet
 1644 lennart  name=systemd:/user/lennart/1                     \_ gnome-volume-control-applet
 1646 lennart  name=systemd:/user/lennart/1                     \_ /usr/sbin/restorecond -u
 1652 lennart  name=systemd:/user/lennart/1                     \_ /usr/bin/devilspie
 1662 lennart  name=systemd:/user/lennart/1                     \_ nm-applet --sm-disable
 1664 lennart  name=systemd:/user/lennart/1                     \_ gnome-power-manager
 1665 lennart  name=systemd:/user/lennart/1                     \_ /usr/libexec/gdu-notification-daemon
 1670 lennart  name=systemd:/user/lennart/1                     \_ /usr/libexec/evolution/2.32/evolution-alarm-notify
 1672 lennart  name=systemd:/user/lennart/1                     \_ /usr/bin/python /usr/share/system-config-printer/applet.py
 1674 lennart  name=systemd:/user/lennart/1                     \_ /usr/lib64/deja-dup/deja-dup-monitor
 1675 lennart  name=systemd:/user/lennart/1                     \_ abrt-applet
 1677 lennart  name=systemd:/user/lennart/1                     \_ bluetooth-applet
 1678 lennart  name=systemd:/user/lennart/1                     \_ gpk-update-icon
 1408 root     name=systemd:/systemd-1/console-kit-daemon.service /usr/sbin/console-kit-daemon --no-daemon
 1419 gdm      name=systemd:/systemd-1/prefdm.service /usr/bin/dbus-launch --exit-with-session
 1453 root     name=systemd:/systemd-1/dbus.service /usr/libexec/upowerd
 1473 rtkit    name=systemd:/systemd-1/rtkit-daemon.service /usr/libexec/rtkit-daemon
 1496 root     name=systemd:/systemd-1/accounts-daemon.service /usr/libexec/accounts-daemon
 1499 root     name=systemd:/systemd-1/systemd-logger.service /lib/systemd/systemd-logger
 1511 lennart  name=systemd:/systemd-1/prefdm.service /usr/bin/gnome-keyring-daemon --daemonize --login
 1534 lennart  name=systemd:/user/lennart/1        dbus-launch --sh-syntax --exit-with-session
 1535 lennart  name=systemd:/user/lennart/1        /bin/dbus-daemon --fork --print-pid 5 --print-address 7 --session
 1603 lennart  name=systemd:/user/lennart/1        /usr/libexec/gconfd-2
 1612 lennart  name=systemd:/user/lennart/1        /usr/libexec/gnome-settings-daemon
 1615 lennart  name=systemd:/user/lennart/1        /usr/libexec/gvfsd
 1626 lennart  name=systemd:/user/lennart/1        /usr/libexec//gvfs-fuse-daemon /home/lennart/.gvfs
 1634 lennart  name=systemd:/user/lennart/1        /usr/bin/pulseaudio --start --log-target=syslog
 1649 lennart  name=systemd:/user/lennart/1         \_ /usr/libexec/pulse/gconf-helper
 1645 lennart  name=systemd:/user/lennart/1        /usr/libexec/bonobo-activation-server --ac-activate --ior-output-fd=24
 1668 lennart  name=systemd:/user/lennart/1        /usr/libexec/im-settings-daemon
 1701 lennart  name=systemd:/user/lennart/1        /usr/libexec/gvfs-gdu-volume-monitor
 1707 lennart  name=systemd:/user/lennart/1        /usr/bin/gnote --panel-applet --oaf-activate-iid=OAFIID:GnoteApplet_Factory --oaf-ior-fd=22
 1725 lennart  name=systemd:/user/lennart/1        /usr/libexec/clock-applet
 1727 lennart  name=systemd:/user/lennart/1        /usr/libexec/wnck-applet
 1729 lennart  name=systemd:/user/lennart/1        /usr/libexec/notification-area-applet
 1733 root     name=systemd:/systemd-1/dbus.service /usr/libexec/udisks-daemon
 1747 root     name=systemd:/systemd-1/dbus.service  \_ udisks-daemon: polling /dev/sr0
 1759 lennart  name=systemd:/user/lennart/1        gnome-screensaver
 1780 lennart  name=systemd:/user/lennart/1        /usr/libexec/gvfsd-trash --spawner :1.9 /org/gtk/gvfs/exec_spaw/0
 1864 lennart  name=systemd:/user/lennart/1        /usr/libexec/gvfs-afc-volume-monitor
 1874 lennart  name=systemd:/user/lennart/1        /usr/libexec/gconf-im-settings-daemon
 1903 lennart  name=systemd:/user/lennart/1        /usr/libexec/gvfsd-burn --spawner :1.9 /org/gtk/gvfs/exec_spaw/1
 1909 lennart  name=systemd:/user/lennart/1        gnome-terminal
 1913 lennart  name=systemd:/user/lennart/1         \_ gnome-pty-helper
 1914 lennart  name=systemd:/user/lennart/1         \_ bash
29231 lennart  name=systemd:/user/lennart/1         |   \_ ssh tango
 2221 lennart  name=systemd:/user/lennart/1         \_ bash
 4193 lennart  name=systemd:/user/lennart/1         |   \_ ssh tango
 2461 lennart  name=systemd:/user/lennart/1         \_ bash
29219 lennart  name=systemd:/user/lennart/1         |   \_ emacs systemd-for-admins-1.txt
15113 lennart  name=systemd:/user/lennart/1         \_ bash
27251 lennart  name=systemd:/user/lennart/1             \_ empathy
29504 lennart  name=systemd:/user/lennart/1             \_ ps xawf -eo pid,user,cgroup,args
 1968 lennart  name=systemd:/user/lennart/1        ssh-agent
 1994 lennart  name=systemd:/user/lennart/1        gpg-agent --daemon --write-env-file
18679 lennart  name=systemd:/user/lennart/1        /bin/sh /usr/lib64/firefox-3.6/run-mozilla.sh /usr/lib64/firefox-3.6/firefox
18741 lennart  name=systemd:/user/lennart/1         \_ /usr/lib64/firefox-3.6/firefox
28900 lennart  name=systemd:/user/lennart/1             \_ /usr/lib64/nspluginwrapper/npviewer.bin --plugin /usr/lib64/mozilla/plugins/libflashplayer.so --connection /org/wrapper/NSPlugins/libflashplayer.so/18741-6
 4016 root     name=systemd:/systemd-1/sysinit.service /usr/sbin/bluetoothd --udev
 4094 smmsp    name=systemd:/systemd-1/sendmail.service sendmail: Queue runner@01:00:00 for /var/spool/clientmqueue
 4096 root     name=systemd:/systemd-1/sendmail.service sendmail: accepting connections
 4112 ntp      name=systemd:/systemd-1/ntpd.service /usr/sbin/ntpd -n -u ntp:ntp -g
27262 lennart  name=systemd:/user/lennart/1        /usr/libexec/mission-control-5
27265 lennart  name=systemd:/user/lennart/1        /usr/libexec/telepathy-haze
27268 lennart  name=systemd:/user/lennart/1        /usr/libexec/telepathy-logger
27270 lennart  name=systemd:/user/lennart/1        /usr/libexec/dconf-service
27280 lennart  name=systemd:/user/lennart/1        /usr/libexec/notification-daemon
27284 lennart  name=systemd:/user/lennart/1        /usr/libexec/telepathy-gabble
27285 lennart  name=systemd:/user/lennart/1        /usr/libexec/telepathy-salut
27297 lennart  name=systemd:/user/lennart/1        /usr/libexec/geoclue-yahoo&lt;/pre&gt;

&lt;p&gt;(Note that this output is shortened, I have removed most of the
kernel threads here, since they are not relevant in the context of
this blog story)&lt;/p&gt;

&lt;p&gt;In the third column you see the cgroup systemd assigned to each
process. You'll find that the &lt;tt&gt;udev&lt;/tt&gt; processes are in the
&lt;tt&gt;name=systemd:/systemd-1/sysinit.service&lt;/tt&gt; cgroup, which is
where systemd places all processes started by the
&lt;tt&gt;sysinit.service&lt;/tt&gt; service, which covers early boot.&lt;/p&gt;

&lt;p&gt;My personal recommendation is to set the shell alias &lt;tt&gt;psc&lt;/tt&gt;
to the ps command line shown above:&lt;/p&gt;

&lt;pre&gt;alias psc='ps xawf -eo pid,user,cgroup,args'&lt;/pre&gt;

&lt;p&gt;With this service information of processes is just four keypresses
away!&lt;/p&gt;

&lt;p&gt;A different way to present the same information is the
&lt;tt&gt;systemd-cgls&lt;/tt&gt; tool we ship with systemd. It shows the cgroup
hierarchy in a pretty tree. Its output looks like this:&lt;/p&gt;

&lt;pre&gt;$ systemd-cgls
+    2 [kthreadd]
[...]
+ 4281 [flush-8:0]
+ user
| \ lennart
|   \ 1
|     +  1495 pam: gdm-password
|     +  1521 gnome-session
|     +  1534 dbus-launch --sh-syntax --exit-with-session
|     +  1535 /bin/dbus-daemon --fork --print-pid 5 --print-address 7 --session
|     +  1603 /usr/libexec/gconfd-2
|     +  1612 /usr/libexec/gnome-settings-daemon
|     +  1615 /ushr/libexec/gvfsd
|     +  1621 metacity
|     +  1626 /usr/libexec//gvfs-fuse-daemon /home/lennart/.gvfs
|     +  1634 /usr/bin/pulseaudio --start --log-target=syslog
|     +  1635 gnome-panel
|     +  1638 nautilus
|     +  1640 /usr/libexec/polkit-gnome-authentication-agent-1
|     +  1641 /usr/bin/seapplet
|     +  1644 gnome-volume-control-applet
|     +  1645 /usr/libexec/bonobo-activation-server --ac-activate --ior-output-fd=24
|     +  1646 /usr/sbin/restorecond -u
|     +  1649 /usr/libexec/pulse/gconf-helper
|     +  1652 /usr/bin/devilspie
|     +  1662 nm-applet --sm-disable
|     +  1664 gnome-power-manager
|     +  1665 /usr/libexec/gdu-notification-daemon
|     +  1668 /usr/libexec/im-settings-daemon
|     +  1670 /usr/libexec/evolution/2.32/evolution-alarm-notify
|     +  1672 /usr/bin/python /usr/share/system-config-printer/applet.py
|     +  1674 /usr/lib64/deja-dup/deja-dup-monitor
|     +  1675 abrt-applet
|     +  1677 bluetooth-applet
|     +  1678 gpk-update-icon
|     +  1701 /usr/libexec/gvfs-gdu-volume-monitor
|     +  1707 /usr/bin/gnote --panel-applet --oaf-activate-iid=OAFIID:GnoteApplet_Factory --oaf-ior-fd=22
|     +  1725 /usr/libexec/clock-applet
|     +  1727 /usr/libexec/wnck-applet
|     +  1729 /usr/libexec/notification-area-applet
|     +  1759 gnome-screensaver
|     +  1780 /usr/libexec/gvfsd-trash --spawner :1.9 /org/gtk/gvfs/exec_spaw/0
|     +  1864 /usr/libexec/gvfs-afc-volume-monitor
|     +  1874 /usr/libexec/gconf-im-settings-daemon
|     +  1882 /usr/libexec/gvfs-gphoto2-volume-monitor
|     +  1903 /usr/libexec/gvfsd-burn --spawner :1.9 /org/gtk/gvfs/exec_spaw/1
|     +  1909 gnome-terminal
|     +  1913 gnome-pty-helper
|     +  1914 bash
|     +  1968 ssh-agent
|     +  1994 gpg-agent --daemon --write-env-file
|     +  2221 bash
|     +  2461 bash
|     +  4193 ssh tango
|     + 15113 bash
|     + 18679 /bin/sh /usr/lib64/firefox-3.6/run-mozilla.sh /usr/lib64/firefox-3.6/firefox
|     + 18741 /usr/lib64/firefox-3.6/firefox
|     + 27251 empathy
|     + 27262 /usr/libexec/mission-control-5
|     + 27265 /usr/libexec/telepathy-haze
|     + 27268 /usr/libexec/telepathy-logger
|     + 27270 /usr/libexec/dconf-service
|     + 27280 /usr/libexec/notification-daemon
|     + 27284 /usr/libexec/telepathy-gabble
|     + 27285 /usr/libexec/telepathy-salut
|     + 27297 /usr/libexec/geoclue-yahoo
|     + 28900 /usr/lib64/nspluginwrapper/npviewer.bin --plugin /usr/lib64/mozilla/plugins/libflashplayer.so --connection /org/wrapper/NSPlugins/libflashplayer.so/18741-6
|     + 29219 emacs systemd-for-admins-1.txt
|     + 29231 ssh tango
|     \ 29519 systemd-cgls
\ systemd-1
  + 1 /sbin/init
  + ntpd.service
  | \ 4112 /usr/sbin/ntpd -n -u ntp:ntp -g
  + systemd-logger.service
  | \ 1499 /lib/systemd/systemd-logger
  + accounts-daemon.service
  | \ 1496 /usr/libexec/accounts-daemon
  + rtkit-daemon.service
  | \ 1473 /usr/libexec/rtkit-daemon
  + console-kit-daemon.service
  | \ 1408 /usr/sbin/console-kit-daemon --no-daemon
  + prefdm.service
  | + 1376 /usr/sbin/gdm-binary -nodaemon
  | + 1391 /usr/libexec/gdm-simple-slave --display-id /org/gnome/DisplayManager/Display1 --force-active-vt
  | + 1394 /usr/bin/Xorg :0 -nr -verbose -auth /var/run/gdm/auth-for-gdm-f2KUOh/database -nolisten tcp vt1
  | + 1419 /usr/bin/dbus-launch --exit-with-session
  | \ 1511 /usr/bin/gnome-keyring-daemon --daemonize --login
  + getty@.service
  | + tty6
  | | \ 1346 /sbin/mingetty tty6
  | + tty4
  | | \ 1343 /sbin/mingetty tty4
  | + tty5
  | | \ 1342 /sbin/mingetty tty5
  | + tty3
  | | \ 1339 /sbin/mingetty tty3
  | \ tty2
  |   \ 1332 /sbin/mingetty tty2
  + abrtd.service
  | \ 1317 /usr/sbin/abrtd -d -s
  + crond.service
  | \ 1344 crond
  + sshd.service
  | \ 1362 /usr/sbin/sshd
  + sendmail.service
  | + 4094 sendmail: Queue runner@01:00:00 for /var/spool/clientmqueue
  | \ 4096 sendmail: accepting connections
  + haldaemon.service
  | + 1249 hald
  | + 1250 hald-runner
  | + 1273 hald-addon-input: Listening on /dev/input/event3 /dev/input/event9 /dev/input/event1 /dev/input/event7 /dev/input/event2 /dev/input/event0 /dev/input/event8
  | + 1275 /usr/libexec/hald-addon-rfkill-killswitch
  | + 1284 /usr/libexec/hald-addon-leds
  | + 1285 /usr/libexec/hald-addon-generic-backlight
  | \ 1287 /usr/libexec/hald-addon-acpi
  + irqbalance.service
  | \ 1210 irqbalance
  + avahi-daemon.service
  | + 1175 avahi-daemon: running [epsilon.local]
  + NetworkManager.service
  | + 1171 /usr/sbin/NetworkManager --no-daemon
  | \ 4028 /sbin/dhclient -d -4 -sf /usr/libexec/nm-dhcp-client.action -pf /var/run/dhclient-wlan0.pid -lf /var/lib/dhclient/dhclient-7d32a784-ede9-4cf6-9ee3-60edc0bce5ff-wlan0.lease -cf /var/run/nm-dhclient-wlan0.conf wlan0
  + rsyslog.service
  | \ 1193 /sbin/rsyslogd -c 4
  + mdmonitor.service
  | \ 1207 mdadm --monitor --scan -f --pid-file=/var/run/mdadm/mdadm.pid
  + cups.service
  | \ 1195 cupsd -C /etc/cups/cupsd.conf
  + auditd.service
  | + 1131 auditd
  | + 1133 /sbin/audispd
  | \ 1135 /usr/sbin/sedispatch
  + dbus.service
  | +  1096 /bin/dbus-daemon --system --address=systemd: --nofork --systemd-activation
  | +  1216 /usr/sbin/modem-manager
  | +  1219 /usr/libexec/polkit-1/polkitd
  | +  1242 /usr/sbin/wpa_supplicant -c /etc/wpa_supplicant/wpa_supplicant.conf -B -u -f /var/log/wpa_supplicant.log -P /var/run/wpa_supplicant.pid
  | +  1453 /usr/libexec/upowerd
  | +  1733 /usr/libexec/udisks-daemon
  | +  1747 udisks-daemon: polling /dev/sr0
  | \ 29509 /usr/libexec/packagekitd
  + dev-mqueue.mount
  + dev-hugepages.mount
  \ sysinit.service
    +   455 /sbin/udevd -d
    +  4016 /usr/sbin/bluetoothd --udev
    + 28188 /sbin/udevd -d
    \ 28191 /sbin/udevd -d&lt;/pre&gt;

&lt;p&gt;(This too is shortened, the same way)&lt;/p&gt;

&lt;p&gt;As you can see, this command shows the processes by their cgroup
and hence service, as systemd labels the cgroups after the
services. For example, you can easily see that the auditing service
&lt;tt&gt;auditd.service&lt;/tt&gt; spawns three individual processes,
&lt;tt&gt;auditd&lt;/tt&gt;, &lt;tt&gt;audisp&lt;/tt&gt; and &lt;tt&gt;sedispatch&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;If you look closely you will notice that a number of processes have
been assigned to the cgroup &lt;tt&gt;/user/1&lt;/tt&gt;. At this point let's
simply leave it at that systemd not only maintains services in cgroups,
but user session processes as well. In a later installment we'll discuss in
more detail what this about.&lt;/p&gt;

&lt;p&gt;So much for now, come back soon for the next installment!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 08 Sep 2010 00:52:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-09-08:/blog/projects/systemd-for-admins-2.html</guid><category>projects</category></item><item><title>Video Interview With Yours Truly</title><link>https://0pointer.net/blog/projects/google-video.html</link><description>
                
&lt;p&gt;Google just published a &lt;a href="http://google-opensource.blogspot.com/2010/09/interviews-from-guadec-part-3.html"&gt;video interview with yours truly&lt;/a&gt;. Watch it! Oh, and Vincent, I even put on a red shirt for you!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 04 Sep 2010 00:42:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-09-04:/blog/projects/google-video.html</guid><category>projects</category></item><item><title>systemd Status Update</title><link>https://0pointer.net/blog/projects/systemd-update.html</link><description>
                
&lt;p&gt;It has been a while &lt;a href="http://0pointer.de/blog/projects/systemd.html"&gt;since my original
announcement of systemd&lt;/a&gt;. Here's a little status update, on what
happened since then. For simplicity's sake I'll just list here what we
worked on in a bulleted list, with no particular order and without
trying to cover this comprehensively:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;systemd has been accepted as Feature for Fedora 14, and as it
looks right now everything worked out nicely and we'll ship F14 with
systemd as init system.&lt;/li&gt;

&lt;li&gt;We added a number of additional unit types: &lt;tt&gt;.timer&lt;/tt&gt; for
cron-style timer-based activation of services, &lt;tt&gt;.swap&lt;/tt&gt; exposes
swap files and partitions the same way we handle mount points, and
&lt;tt&gt;.path&lt;/tt&gt; can be used to activate units dependending on the
existance/creation of files or fill status of spool directories.&lt;/li&gt;

&lt;li&gt;We hooked systemd up to SELinux: systemd is now capabale of
properly labelling directories, sockets and FIFOs it creates according
to the SELinux policy for the services we maintain.&lt;/li&gt;

&lt;li&gt;We hooked systemd up to the Linux auditing subsystem: as first
init system at all systemd now generates auditing records for all
services it starts/stops, including their failure status.&lt;/li&gt;

&lt;li&gt;We hooked systemd up to TCP wrappers, for all socket connections
it accepts.&lt;/li&gt;

&lt;li&gt;We hooked systemd up to PAM, so that optionally, when systemd runs
a service as a different user it initializes the usual PAM session
setup and teardown hooks.&lt;/li&gt;

&lt;li&gt;We hooked systemd up to D-Bus, so that D-Bus passes activation
requests to systemd and systemd becomes the central point for all
kinds of activation, thus greatly extending the control of the
execution environment of bus activated services, and making them
accessible through the same utilities as SysV services. Also, this
enables us to do race-free parallelized start-up for D-Bus services
and their clients, thus speeding up things even further.&lt;/li&gt;

&lt;li&gt;systemd is now able to handle various Debian and OpenSUSE-specific
extensions to the classic SysV init script formats natively, on top of
the Fedora extensions we already parse.&lt;/li&gt;

&lt;li&gt;The D-Bus coverage of the systemd interface is now complete,
allowing both introspection of runtime data and of parsed
configuration data. It's fun now to introspect systemd with &lt;a href="http://davidz25.blogspot.com/2010/08/gdbus1-bash-completion.html"&gt;&lt;tt&gt;gdbus&lt;/tt&gt;&lt;/a&gt;
or &lt;tt&gt;d-feet&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;We added a &lt;a href="http://0pointer.de/public/systemd-man/pam_systemd.html"&gt;systemd
PAM module&lt;/a&gt;, which assigns the processes of each user session to
its own cgroup in the systemd cgroup tree. This also enables reliable
killing of all processes associated with a session when the user logs
out. This also manages a secure per-user &lt;tt&gt;/var/run&lt;/tt&gt;-style directory
which is supposed to be used for sockets and similar files that shall
be cleaned up when the user logs out.&lt;/li&gt;

&lt;li&gt;There's a new tool &lt;a href="http://0pointer.de/public/systemd-man/systemd-cgls.html"&gt;&lt;tt&gt;systemd-cgls&lt;/tt&gt;&lt;/a&gt;,
which plots a pretty process tree based on the systemd cgroup
hierarchy. It's really pretty. Try it!&lt;/li&gt;

&lt;li&gt;We now have our own cgroup hierarchy beneath
&lt;tt&gt;/cgroup/systemd&lt;/tt&gt; (though is will move to &lt;tt&gt;/sys/fs/&lt;/tt&gt;
before the F14 release).&lt;/li&gt;

&lt;li&gt;We have pretty code that automatically spawns a getty on a serial
port when the kernel console is redirected to a serial TTY.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;systemctl&lt;/tt&gt; got beefed up substantially (it can even draw
dependency graphs now, via &lt;tt&gt;dot&lt;/tt&gt;!), and the SysV compatiblity
tools were extended to more completely and correctly support what was
historically provided by SysV. For example, we'll now warn the user
when systemd service files have changed but systemd was not asked to
reload its configuration. Also, you can now use systemd's native
client tools to reboot or shut-down an Upstart or sysvinit system, to
facilitate upgrades.&lt;/li&gt;

&lt;li&gt;We provide a &lt;a href="http://cgit.freedesktop.org/systemd/plain/src/sd-daemon.h"&gt;reference
implementation&lt;/a&gt; for the socket activation and other APIs for nicer
interaction with systemd.&lt;/li&gt;

&lt;li&gt;We have a pretty complete &lt;a href="http://0pointer.de/public/systemd-man/"&gt;set of documentation&lt;/a&gt;
now, &lt;a href="http://0pointer.de/public/systemd-man/daemon.html"&gt;some
of it&lt;/a&gt; even extending to areas not directly related to systemd
itself.&lt;/li&gt;

&lt;li&gt;Quite a number of upstream packages now ship with systemd service
files out-of-the-box now, that work across all distributions that have
adopted systemd. It is our intention to unify the boot and service
management between distributions with systemd, and this shows fruits
already. Furthermore a number of upstream packages now ship our
patches for socket-based activation.&lt;/li&gt;

&lt;li&gt;Even more options that control the process execution environment
or the sockets we create are now supported.&lt;/li&gt;

&lt;li&gt;Earlier today I began my series of blog stories on &lt;a href="http://0pointer.de/blog/projects/systemd-for-admins-1"&gt;systemd
for administrators&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;We reimplemented almost all boot-up and shutdown scripts of the
standard Fedora install in much smaller, simpler and faster C
utilities, or in systemd itself. Most of this will not be enabled in
F14 however, even though it is shipped with systemd upstream. With
this enabled the entire Linux system gains a completely new feeling as
the number of shells we spawn approaches zero, and the PID of the
first user terminal is way &amp;lt; 500 now, and the early boot-up is
fully parallelized. We looked at the boot scripts of Fedora, OpenSUSE
and Debian and distilled from this a list of functionality that makes
up the early boot process and reimplemented this in C, if possible
following the bahaviour of one of the existing implementations from
these three distributions. This turned out to be much less effort than
anticipated, and we are actually quite excited about this. Look
forward to the fruits of this work in F15, when we might be able to
present you a shell-less boot at least for standard desktop/laptop
systems.&lt;/li&gt;

&lt;li&gt;We spent some time reinvestigating the current syslog logic, and
came up with an elegant and simple scheme to provide &lt;tt&gt;/dev/log&lt;/tt&gt;
compatible logging right from the time systemd is first initialized
right until the time the kernel halts the machine. Through the wonders
of socket based activation we first connect the &lt;tt&gt;/dev/log&lt;/tt&gt;
socket with a minimal bridge to the kernel log buffer (&lt;tt&gt;kmsg&lt;/tt&gt;)
and then, as soon as the real syslog is started up as part of the
later bootup phase, we dynamically replace this minimal bridge by the
real syslog daemon -- without losing a single log message. Since one
of the first things the real syslog daemon does is flushing the kernel
log buffer into log files, all logged messages will sooner or later be
stored on disk, regardless whether they have been generated during
early boot, late boot or system runtime. On top of that if the syslog
daemon terminates or is shut down during runtime, the bridge becomes
active again and log output is written to kmsg again. The same applies
when the system goes down. This provides a simple an robust way how we
can ensure that no logs will ever be lost again, and logging is
available from the beginning of boot-up to the end of
shut-down. Plymouth will most likely adopt a similar scheme for initrd
logging, thus ensuring that everything ever logged on the system will
properly end up in the log files, whether it comes from the kernel,
from the initrd, from early-boot, from runtime or shutdown. And if
syslogd is not around, &lt;tt&gt;dmesg&lt;/tt&gt; will provide you with access to
the log messages. While this bridge is part of systemd upstream, we'll
most likely enable this bridge in Fedora only starting with F15. Also
note that embedded systems that have no interest in shipping a full
syslogd solution can simply use this syslog bridge during the entire
runtime, and thus making the kernel log buffer the centralized log
storage, with all the advantages this offers: zero disk IO at runtime,
access to serial and netconsole logging, and remote debug access to
the kernel log buffer.&lt;/li&gt;

&lt;li&gt;We now install autofs units for many "API" kernel virtual file
systems by default, such as &lt;tt&gt;binfmt_misc&lt;/tt&gt; or
&lt;tt&gt;hugetlbfs&lt;/tt&gt;. That means that the file system access is readily
available, client code no longer has to manually load the respective
kernel modules, as they are autoloaded on first access of the file
system. This has many advantages: it is not only faster to set up
during boot, but also simpler for applications, as they can just
assume the functionality is available. On top of that permission
problems for the initialization go away, since manual module loading
requires root privileges.&lt;/li&gt;

&lt;li&gt;Many smaller fixes and enhancements, all across the board, which
if mentioned here would make this blog story another blog
novel. Suffice to say, we did a lot of polishing to ready systemd for
F14.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;All in all, systemd is progressing nicely, and the features we have
been working on in the last months are without exception features not
existing in any other of the init systems available on Linux and our
feature set already was far ahead of what the older init
implementations provide. And we have quite a bit planned for the
future. So, stay tuned!&lt;/p&gt;

&lt;p&gt;Also note that I'll speak about systemd at &lt;a href="http://www.linux-kongress.org/2010/program.html"&gt;LinuxKongress
2010&lt;/a&gt; in Nuremberg, Germany. Later this year I'll also be speaking
at the &lt;a href="http://www.linuxplumbersconf.org/2010/ocw/proposals/873"&gt;Linux
Plumbers Conference&lt;/a&gt; in Boston, MA. Make sure to drop by if you
want to learn about systemd or discuss exiciting new ideas or features
with us.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 23 Aug 2010 13:32:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-08-23:/blog/projects/systemd-update.html</guid><category>projects</category></item><item><title>systemd for Administrators, Part 1</title><link>https://0pointer.net/blog/projects/systemd-for-admins-1.html</link><description>
                
&lt;p&gt;As many of you know, &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt; is the new
Fedora init system, starting with F14, and it is also on its way to being adopted in
a number of other distributions as well (for example, &lt;a href="http://en.opensuse.org/SDB:Systemd"&gt;OpenSUSE&lt;/a&gt;). For administrators
systemd provides a variety of new features and changes and enhances the
administrative process substantially. This blog story is the first part of a
series of articles I plan to post roughly every week for the next months. In
every post I will try to explain one new feature of systemd. Many of these features
are small and simple, so these stories should be interesting to a broader audience.
However, from time to time we'll dive a little bit deeper into the great new
features systemd provides you with.&lt;/p&gt;

&lt;h4&gt;Verifying Bootup&lt;/h4&gt;

&lt;p&gt;Traditionally, when booting up a Linux system, you see a lot of
little messages passing by on your screen. As we work on speeding up
and parallelizing the boot process these messages are becoming visible
for a shorter and shorter time only and be less and less readable --
if they are shown at all, given we use graphical boot splash
technology like Plymouth these days. Nonetheless the information of
the boot screens was and still is very relevant, because it shows you
for each service that is being started as part of bootup, wether it
managed to start up successfully or failed (with those green or red
&lt;tt&gt;[ OK ]&lt;/tt&gt; or &lt;tt&gt;[ FAILED ]&lt;/tt&gt; indicators). To improve the
situation for machines that boot up fast and parallelized and to make
this information more nicely available during runtime, we added a
feature to systemd that tracks and remembers for each service whether
it started up successfully, whether it exited with a non-zero exit
code, whether it timed out, or whether it terminated abnormally (by
segfaulting or similar), both during start-up and runtime. By simply
typing &lt;tt&gt;systemctl&lt;/tt&gt; in your shell you can query the state of all
services, both systemd native and SysV/LSB services:&lt;/p&gt;

&lt;pre&gt;[root@lambda] ~# systemctl
UNIT                                          LOAD   ACTIVE       SUB          JOB             DESCRIPTION
dev-hugepages.automount                       loaded active       running                      Huge Pages File System Automount Point
dev-mqueue.automount                          loaded active       running                      POSIX Message Queue File System Automount Point
proc-sys-fs-binfmt_misc.automount             loaded active       waiting                      Arbitrary Executable File Formats File System Automount Point
sys-kernel-debug.automount                    loaded active       waiting                      Debug File System Automount Point
sys-kernel-security.automount                 loaded active       waiting                      Security File System Automount Point
sys-devices-pc...0000:02:00.0-net-eth0.device loaded active       plugged                      82573L Gigabit Ethernet Controller
&lt;i&gt;[...]&lt;/i&gt;
sys-devices-virtual-tty-tty9.device           loaded active       plugged                      /sys/devices/virtual/tty/tty9
-.mount                                       loaded active       mounted                      /
boot.mount                                    loaded active       mounted                      /boot
dev-hugepages.mount                           loaded active       mounted                      Huge Pages File System
dev-mqueue.mount                              loaded active       mounted                      POSIX Message Queue File System
home.mount                                    loaded active       mounted                      /home
proc-sys-fs-binfmt_misc.mount                 loaded active       mounted                      Arbitrary Executable File Formats File System
abrtd.service                                 loaded active       running                      ABRT Automated Bug Reporting Tool
accounts-daemon.service                       loaded active       running                      Accounts Service
acpid.service                                 loaded active       running                      ACPI Event Daemon
atd.service                                   loaded active       running                      Execution Queue Daemon
auditd.service                                loaded active       running                      Security Auditing Service
avahi-daemon.service                          loaded active       running                      Avahi mDNS/DNS-SD Stack
bluetooth.service                             loaded active       running                      Bluetooth Manager
console-kit-daemon.service                    loaded active       running                      Console Manager
cpuspeed.service                              loaded active       exited                       LSB: processor frequency scaling support
crond.service                                 loaded active       running                      Command Scheduler
cups.service                                  loaded active       running                      CUPS Printing Service
dbus.service                                  loaded active       running                      D-Bus System Message Bus
getty@tty2.service                            loaded active       running                      Getty on tty2
getty@tty3.service                            loaded active       running                      Getty on tty3
getty@tty4.service                            loaded active       running                      Getty on tty4
getty@tty5.service                            loaded active       running                      Getty on tty5
getty@tty6.service                            loaded active       running                      Getty on tty6
haldaemon.service                             loaded active       running                      Hardware Manager
hdapsd@sda.service                            loaded active       running                      sda shock protection daemon
irqbalance.service                            loaded active       running                      LSB: start and stop irqbalance daemon
iscsi.service                                 loaded active       exited                       LSB: Starts and stops login and scanning of iSCSI devices.
iscsid.service                                loaded active       exited                       LSB: Starts and stops login iSCSI daemon.
livesys-late.service                          loaded active       exited                       LSB: Late init script for live image.
livesys.service                               loaded active       exited                       LSB: Init script for live image.
lvm2-monitor.service                          loaded active       exited                       LSB: Monitoring of LVM2 mirrors, snapshots etc. using dmeventd or progress polling
mdmonitor.service                             loaded active       running                      LSB: Start and stop the MD software RAID monitor
modem-manager.service                         loaded active       running                      Modem Manager
netfs.service                                 loaded active       exited                       LSB: Mount and unmount network filesystems.
NetworkManager.service                        loaded active       running                      Network Manager
ntpd.service                                  loaded &lt;span style="color: red"&gt;&lt;b&gt;maintenance  maintenance&lt;/b&gt;&lt;/span&gt;                  Network Time Service
polkitd.service                               loaded active       running                      Policy Manager
prefdm.service                                loaded active       running                      Display Manager
rc-local.service                              loaded active       exited                       /etc/rc.local Compatibility
rpcbind.service                               loaded active       running                      RPC Portmapper Service
rsyslog.service                               loaded active       running                      System Logging Service
rtkit-daemon.service                          loaded active       running                      RealtimeKit Scheduling Policy Service
sendmail.service                              loaded active       running                      LSB: start and stop sendmail
sshd@172.31.0.53:22-172.31.0.4:36368.service  loaded active       running                      SSH Per-Connection Server
sysinit.service                               loaded active       running                      System Initialization
systemd-logger.service                        loaded active       running                      systemd Logging Daemon
udev-post.service                             loaded active       exited                       LSB: Moves the generated persistent udev rules to /etc/udev/rules.d
udisks.service                                loaded active       running                      Disk Manager
upowerd.service                               loaded active       running                      Power Manager
wpa_supplicant.service                        loaded active       running                      Wi-Fi Security Service
avahi-daemon.socket                           loaded active       listening                    Avahi mDNS/DNS-SD Stack Activation Socket
cups.socket                                   loaded active       listening                    CUPS Printing Service Sockets
dbus.socket                                   loaded active       running                      dbus.socket
rpcbind.socket                                loaded active       listening                    RPC Portmapper Socket
sshd.socket                                   loaded active       listening                    sshd.socket
systemd-initctl.socket                        loaded active       listening                    systemd /dev/initctl Compatibility Socket
systemd-logger.socket                         loaded active       running                      systemd Logging Socket
systemd-shutdownd.socket                      loaded active       listening                    systemd Delayed Shutdown Socket
dev-disk-by\x1...x1db22a\x1d870f1adf2732.swap loaded active       active                       /dev/disk/by-uuid/fd626ef7-34a4-4958-b22a-870f1adf2732
basic.target                                  loaded active       active                       Basic System
bluetooth.target                              loaded active       active                       Bluetooth
dbus.target                                   loaded active       active                       D-Bus
getty.target                                  loaded active       active                       Login Prompts
graphical.target                              loaded active       active                       Graphical Interface
local-fs.target                               loaded active       active                       Local File Systems
multi-user.target                             loaded active       active                       Multi-User
network.target                                loaded active       active                       Network
remote-fs.target                              loaded active       active                       Remote File Systems
sockets.target                                loaded active       active                       Sockets
swap.target                                   loaded active       active                       Swap
sysinit.target                                loaded active       active                       System Initialization

LOAD   = Reflects whether the unit definition was properly loaded.
ACTIVE = The high-level unit activation state, i.e. generalization of SUB.
SUB    = The low-level unit activation state, values depend on unit type.
JOB    = Pending job for the unit.

221 units listed. Pass --all to see inactive units, too.
[root@lambda] ~#&lt;/pre&gt;

&lt;p&gt;(I have shortened the output above a little, and removed a few lines not relevant for this blog post.)&lt;/p&gt;

&lt;p&gt;Look at the ACTIVE column, which shows you the high-level state of
a service (or in fact of any kind of unit systemd maintains, which can
be more than just services, but we'll have a look on this in a later
blog posting), whether it is &lt;i&gt;active&lt;/i&gt; (i.e. running),
&lt;i&gt;inactive&lt;/i&gt; (i.e. not running) or in any other state. If you look
closely you'll see one item in the list that is marked &lt;i&gt;maintenance&lt;/i&gt;
and highlighted in red. This informs you about a service that failed
to run or otherwise encountered a problem. In this case this is
ntpd. Now, let's find out what actually
happened to ntpd, with the &lt;tt&gt;systemctl status&lt;/tt&gt;
command:&lt;/p&gt;

&lt;pre&gt;[root@lambda] ~# systemctl status ntpd.service
ntpd.service - Network Time Service
	  Loaded: loaded (/etc/systemd/system/ntpd.service)
	  Active: &lt;span style="color: red"&gt;&lt;b&gt;maintenance&lt;/b&gt;&lt;/span&gt;
	    Main: 953 (code=exited, status=255)
	  CGroup: name=systemd:/systemd-1/ntpd.service
[root@lambda] ~#&lt;/pre&gt;

&lt;p&gt;This shows us that NTP terminated during runtime (when it ran as
PID 953), and tells us exactly the error condition: the process exited
with an exit status of 255.&lt;/p&gt;

&lt;p&gt;In a later systemd version, we plan to hook this up to ABRT, &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=622773"&gt;as soon as
this enhancement request is fixed&lt;/a&gt;. Then, if &lt;tt&gt;systemctl
status&lt;/tt&gt; shows you information about a service that crashed it will
direct you right-away to the appropriate crash dump in ABRT.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Summary:&lt;/b&gt; use &lt;tt&gt;systemctl&lt;/tt&gt; and &lt;tt&gt;systemctl
status&lt;/tt&gt; as modern, more complete replacements for the traditional
boot-up status messages of SysV services. &lt;tt&gt;systemctl status&lt;/tt&gt;
not only captures in more detail the error condition but also shows
runtime errors in addition to start-up errors.&lt;/p&gt;

&lt;p&gt;That's it for this week, make sure to come back next week, for the
next posting about systemd for administrators!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 23 Aug 2010 10:22:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-08-23:/blog/projects/systemd-for-admins-1.html</guid><category>projects</category></item><item><title>Dear Lazy Web,</title><link>https://0pointer.net/blog/lenovo-laptop-codes.html</link><description>
                
&lt;p&gt;does anybody know how to decode those Lenovo ThinkPad model IDs? I am
interested in the T410s. For example, there's the model NUK3AGE, and there's
NUHFXGE, and there's NUHYXGE. Some web sites claim NUK3AGE has Nvidia graphics,
others claim VGA is Intel-only. Some web sites claim it has a touch screen,
others say the contrary. The Lenovo web site isn't helpful to figure out the
differences between the models and what the feature set of the various models
really is. I figured out the GE suffix indicates a german keyboard, but what
about the remaining code? Anybody knows how to decypher those IDs or knows a
reliable source explaining their feature set?&lt;/p&gt;

&lt;p&gt;Love,&lt;/p&gt;

&lt;p&gt;Lennart&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 19 Aug 2010 13:27:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-08-19:/blog/lenovo-laptop-codes.html</guid><category>misc</category></item><item><title>Me too!</title><link>https://0pointer.net/blog/projects/bad-lennart.html</link><description>
                
&lt;p&gt;I too forgot to mention that my accommodation at GUADEC was sponsored by the GNOME Foundation. Thanks guys!&lt;/p&gt;

&lt;p&gt;&lt;img alt="Sponsored" src="http://1.bp.blogspot.com/_2o81e3u4ZFU/TFfrnz00y6I/AAAAAAAAAW0/h8eVbnSRcc4/s400/sponsored-badge-simple.png" width="213" height="213" /&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 03 Aug 2010 13:22:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-08-03:/blog/projects/bad-lennart.html</guid><category>projects</category></item><item><title>Dear Canonical,</title><link>https://0pointer.net/blog/projects/sound-theme-canonical.html</link><description>
                #ignore yes

&lt;p&gt;Today I &lt;a href="http://design.canonical.com/2010/08/ubuntu-needs-a-new-sound-theme/"&gt;came
across this blog post of your design team&lt;/a&gt;. In context of the recent
criticism you had to endure regarding upstream contributions I am disappointed
that you have not bothered to ping anybody from the upstream freedesktop sound
theme (for example yours truly) about this in advance. No, you went to cook
your own soup. What really disappoints me is that we have asked multiple times
for help and support and contributions for the sound theme, to only very little
success, and I even asked some of the Canonical engineers about this topic and
in particular regarding some clarifications of the licensing of the old Ubuntu
sound theme. I am sorry, but if you had listened, or looked, or asked you would
have been aware that we were looking for somebody to maintain this actively,
upstream -- and because we didn't have the time to maintain this we only
did the absolute minimum work necessary and we only maintain this ourselves
because noone else wanted to.&lt;/p&gt;

&lt;p&gt;It should be upstream first, downstream second.&lt;/p&gt;

&lt;p&gt;I am sorry if I sound like an always complaining prick to you. But believe
me, I am not saying this because I wouldn't like you or anything like that.
I am just saying this because I believe you could do things
oh so much better.&lt;/p&gt;

&lt;p&gt;Please fix this. We want your contributions. Upstream.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 03 Aug 2010 02:24:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-08-03:/blog/projects/sound-theme-canonical.html</guid><category>projects</category></item><item><title>Beating a Dead Horse</title><link>https://0pointer.net/blog/projects/i-am-more-awesome-than-canonical.html</link><description>
                
&lt;p&gt;I guess it's a bit beating a dead horse, but I had a good laugh today when
&lt;a href="http://www.neary-consulting.com/index.php/services/gnome-census/"&gt;I
learned&lt;/a&gt; that I alone contributed more to GNOME than the entirety of
Canonical, and only 800 additional commits seperating me from being more awesome than Nokia.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;/me is amused&lt;/tt&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 03 Aug 2010 01:46:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-08-03:/blog/projects/i-am-more-awesome-than-canonical.html</guid><category>projects</category></item><item><title>Interview With Yours Truly</title><link>https://0pointer.net/blog/projects/i-like-listening-to-myself.html</link><description>
                
&lt;p&gt;&lt;a href="http://linuxoutlaws.com/podcast/ogg/160"&gt;Here's a podcast interview
with yours truly&lt;/a&gt; where I speak a little about PulseAudio and systemd. Seek
to 64:43 for my lovely impetuous voice. There's also an interview with Owen
just before mine.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 02 Aug 2010 17:13:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-08-02:/blog/projects/i-like-listening-to-myself.html</guid><category>projects</category></item><item><title>Linux Plumbers Conference 2010 CFP Ending Soon!</title><link>https://0pointer.net/blog/projects/plumbersconf-2010.html</link><description>
                #nocomments y

&lt;p&gt;The &lt;a href="http://www.linuxplumbersconf.org/2010/06/03/linux-plumbers-conference-call-for-papers"&gt;Call
for Papers&lt;/a&gt; for the &lt;a href="http://www.linuxplumbersconf.org/"&gt;Linux
Plumbers Conference (LPC)&lt;/a&gt; in November in Cambridge, Massachusetts is ending
soon, on &lt;b&gt;July 19th 2010 (That's the upcoming monday!)&lt;/b&gt;. It's a conference
about the core infrastructure of Linux systems: the part of the system where
userspace and the kernel interface. It's the only conference where the focus is
specifically on getting together the kernel people who work on the userspace
interfaces and the userspace people who have to deal with kernel interfaces.
It's supposed to be a place where all the people doing infrastructure work sit
down and talk, so that both parties understand better what the requirements and
needs of the other are, and where we can work towards fixing the major problems
we currently have with our lower-level infrastructure and APIs.&lt;/p&gt;

&lt;p&gt;The two previous LPCs were hugely successful (as reported on LWN on various
occasions), and this time we hope to repeat that.&lt;/p&gt;

&lt;p&gt;Like the previous years, I will be running the Audio conference track of
LPC, this time together with Mark Brown. Audio infrastructure on Linux has been
steadily improving the last years all over the place, but there's still a lot
to do.  Join us at the LPC to discuss the next steps and help improving Linux
audio further! If you are doing &lt;b&gt;audio infrastructure work&lt;/b&gt; on Linux, make
sure to attend and &lt;b&gt;submit a paper!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.linuxplumbersconf.org/2010/ocw/login"&gt;Sign up soon!&lt;/a&gt;
&lt;a href="http://www.linuxplumbersconf.org/2010/ocw/events/LPC2010/proposals/new"&gt;Send
in your paper quickly!&lt;/a&gt; &lt;b&gt;Only three days left to the end of the
CFP!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.linuxplumbersconf.org"&gt;&lt;img style="border: 0" src="http://linuxplumbersconf.org/2010/style/tagline-2010.png" alt="Plumbers Logo" width="493" height="60" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(I am also planning to do a presentation there about &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;, together
with Kay. Make sure to attend if you are interested in that topic.)&lt;/p&gt;

&lt;p&gt;See you in Boston!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 16 Jul 2010 18:35:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-07-16:/blog/projects/plumbersconf-2010.html</guid><category>projects</category></item><item><title>Addendum on the Brokenness of File Locking</title><link>https://0pointer.net/blog/projects/locking2.html</link><description>
                
&lt;p&gt;I forgot to mention another central problem in my &lt;a href="http://0pointer.de/blog/projects/locking"&gt;blog story about file locking
on Linux&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Different machines have access to different features of the same file
system. Here's an example: let's say you have two machines in your home LAN.
You want them to share their &lt;tt&gt;$HOME&lt;/tt&gt; directory, so that you (or your family) can
use either machine and have access to all your (or their) data. So you export
&lt;tt&gt;/home&lt;/tt&gt; on one machine via NFS and mount it from the other machine.&lt;/p&gt;

&lt;p&gt;So far so good. But what happens to file locking now? Programs on the first
machine see a fully-featured ext3 or ext4 file system, where all kinds of
locking works (even though the API might suck as mentioned in the earlier blog
story). But what about the other machine? If you set up &lt;tt&gt;lockd&lt;/tt&gt; properly
then POSIX locking will work on both. If you didn't one machine can use POSIX
locking properly, the other cannot. And it gets even worse: as mentioned recent
NFS implementations on Linux transparently convert client-side BSD locking into
POSIX locking on the server side. Now, if the same application uses BSD locking on both
the client and the server side from two instances they will end up with two
orthogonal locks and although both sides think they have properly acquired a
lock (and they actually did) they will overwrite each other's data, because
those two locks are independent. (And one wonders why the NFS developers
implemented this brokenness nonetheless...).&lt;/p&gt;

&lt;p&gt;This basically means that locking cannot be used unless it is verified that
&lt;i&gt;everyone&lt;/i&gt; accessing a file system can make use of the same file system feature
set. If you use file locking on a file system you should do so only if you are
sufficiently sure that nobody using a broken or weird NFS implementation might
want to access and lock those files as well. And practically that is
impossible. Even if &lt;tt&gt;fpathconf()&lt;/tt&gt; was improved so that it could inform
the caller whether it can successfully apply a file lock to a file, this would
still not give any hint if the same is true for everybody else accessing the
file. But that is essential when speaking of advisory (i.e.  cooperative) file
locking.&lt;/p&gt;

&lt;p&gt;And no, this isn't easy to fix. So again, the recommendation: forget about
file locking on Linux, it's nothing more than a useless toy.&lt;/p&gt;

&lt;p&gt;Also read &lt;a href="http://www.samba.org/samba/news/articles/low_point/tale_two_stds_os2.html"&gt;Jeremy
Allison's&lt;/a&gt; (Samba) take on POSIX file locking. It's an interesting read.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 28 Jun 2010 19:49:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-06-28:/blog/projects/locking2.html</guid><category>projects</category></item><item><title>On the Brokenness of File Locking</title><link>https://0pointer.net/blog/projects/locking.html</link><description>
                
&lt;p&gt;It's amazing how far Linux has come without providing for proper file
locking that works and is usable from userspace. A little overview why file
locking is still in a very sad state:&lt;/p&gt;

&lt;p&gt;To begin with, there's a plethora of APIs, and all of them are awful:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;POSIX File locking as available with &lt;tt&gt;fcntl(F_SET_LK)&lt;/tt&gt;: the POSIX
locking API is the most portable one and in theory works across NFS. It can do
byte-range locking. So much on the good side. On the bad side there's a lot
more however: locks are bound to processes, not file descriptors. That means
that this logic cannot be used in threaded environments unless combined with a
process-local mutex. This is hard to get right, especially in libraries that do
not know the environment they are run in, i.e. whether they are used in
threaded environments or not. The worst part however is that POSIX locks are
automatically released if a process calls &lt;tt&gt;close()&lt;/tt&gt; on &lt;i&gt;any&lt;/i&gt; (!) of
its open file descriptors for that file. That means that when one part of a
program locks a file and another by coincidence accesses it too for a short
time, the first part's lock will be broken and it won't be notified about that.
Modern software tends to load big frameworks (such as Gtk+ or Qt) into memory
as well as arbitrary modules via mechanisms such as NSS, PAM, gvfs,
GTK_MODULES, Apache modules, GStreamer modules where one module seldom can
control what another module in the same process does or accesses. The effect of
this is that POSIX locks are unusable in any non-trivial program where it
cannot be ensured that a file that is locked is &lt;i&gt;never&lt;/i&gt; accessed by
any other part of the process at the same time. Example: a user managing
daemon wants to write &lt;tt&gt;/etc/passwd&lt;/tt&gt; and locks the file for that. At
the same time in another thread (or from a stack frame further down)
something calls &lt;tt&gt;getpwuid()&lt;/tt&gt; which internally accesses
&lt;tt&gt;/etc/passwd&lt;/tt&gt; and causes the lock to be released, the first thread
(or stack frame) not knowing that. Furthermore should two threads use the
locking fcntl()s on the same file they will interfere with each other's locks
and reset the locking ranges and flags of each other. On top of that locking
cannot be used on any file that is publicly accessible (i.e. has the R bit set
for groups/others, i.e. more access bits on than 0600), because that would
otherwise effectively give arbitrary users a way to indefinitely block
execution of any process (regardless of the UID it is running under) that wants
to access and lock the file. This is generally not an acceptable security risk.
Finally, while POSIX file locks are supposedly NFS-safe they not always really
are as there are still many NFS implementations around where locking is not properly
implemented, and NFS tends to be used in heterogenous networks. The biggest
problem about this is that there is no way to properly detect whether file
locking works on a specific NFS mount (or any mount) or not.&lt;/li&gt;

&lt;li&gt;The other API for POSIX file locks: &lt;tt&gt;lockf()&lt;/tt&gt; is another API for the
same mechanism and suffers by the same problems. One wonders why there are two
APIs for the same messed up interface.&lt;/li&gt;

&lt;li&gt;BSD locking based on &lt;tt&gt;flock()&lt;/tt&gt;. The semantics of this kind of
locking are much nicer than for POSIX locking: locks are bound to file
descriptors, not processes. This kind of locking can hence be used safely
between threads and can even be inherited across &lt;tt&gt;fork()&lt;/tt&gt; and
&lt;tt&gt;exec()&lt;/tt&gt;. Locks are only automatically broken on the &lt;tt&gt;close()&lt;/tt&gt;
call for the one file descriptor they were created with (or the last duplicate
of it). On the other hand this kind of locking does not offer byte-range
locking and suffers by the same security problems as POSIX locking, and works
on even less cases on NFS than POSIX locking (i.e. on BSD and Linux &amp;lt; 2.6.12
they were NOPs returning success). And since BSD locking is not as portable as
POSIX locking this is sometimes an unsafe choice.  Some OSes even find it funny
to make &lt;tt&gt;flock()&lt;/tt&gt; and &lt;tt&gt;fcntl(F_SET_LK)&lt;/tt&gt; control the same locks.
Linux treats them independently -- except for the cases where it doesn't: on
Linux NFS they are transparently converted to POSIX locks, too now. What a chaos!&lt;/li&gt;

&lt;li&gt;Mandatory locking is available too. It's based on the POSIX locking API but
not portable in itself. It's dangerous business and should generally be avoided
in cleanly written software.&lt;/li&gt;

&lt;li&gt;Traditional lock file based file locking. This is how things where done
traditionally, based around known atomicity guarantees of certain basic file
system operations. It's a cumbersome thing, and requires polling of the file
system to get notifications when a lock is released. Also, On Linux NFS &amp;lt; 2.6.5
it doesn't work properly, since O_EXCL isn't atomic there. And of course the
client cannot really know what the server is running, so again this brokeness
is not detectable.&lt;/li&gt;

&lt;/ul&gt;

&lt;h4&gt;The Disappointing Summary&lt;/h4&gt;

&lt;p&gt;File locking on Linux is just broken. The broken semantics of POSIX locking
show that the designers of this API apparently never have tried to actually use
it in real software. It smells a lot like an interface that kernel people
thought makes sense but in reality doesn't when you try to use it from
userspace.&lt;/p&gt;

&lt;p&gt;Here's a list of places where you shouldn't use file locking due to the
problems shown above: If you want to lock a file in $HOME, forget about it as
$HOME might be NFS and locks generally are not reliable there. The same applies
to every other file system that might be shared across the network. If the file
you want to lock is accessible to more than your own user (i.e. an access mode
&gt; 0700), forget about locking, it would allow others to block your
application indefinitely. If your program is non-trivial or threaded or uses a
framework such as Gtk+ or Qt or any of the module-based APIs such as NSS, PAM,
... forget about about POSIX locking. If you care about portability, don't use
file locking.&lt;/p&gt;

&lt;p&gt;Or to turn this around, the only case where it is kind of safe to use file locking
is in trivial applications where portability is not key and by using BSD
locking on a file system where you can rely that it is local and on files
inaccessible to others. Of course, that doesn't leave much, except for private
files in &lt;tt&gt;/tmp&lt;/tt&gt; for trivial user applications.&lt;/p&gt;

&lt;p&gt;Or in one sentence: in its current state Linux file locking is unusable.&lt;/p&gt;

&lt;p&gt;And that is a shame.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update&lt;/b&gt;: &lt;a href="http://0pointer.de/blog/projects/locking2"&gt;Check out the follow-up story on this topic.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 26 Jun 2010 19:38:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-06-26:/blog/projects/locking.html</guid><category>projects</category></item><item><title>On IDs</title><link>https://0pointer.net/blog/projects/ids.html</link><description>
                
&lt;p&gt;When programming software that cooperates with software running on behalf of
other users, other sessions or other computers it is often necessary to work with
unique identifiers. These can be bound to various hardware and software objects
as well as lifetimes. Often, when people look for such an ID to use they pick
the wrong one because semantics and lifetime or the IDs are not clear. Here's a
little incomprehensive list of IDs accessible on Linux and how you should or
should not use them.&lt;/p&gt;

&lt;h4&gt;Hardware IDs&lt;/h4&gt;

&lt;ol&gt;

&lt;li&gt;&lt;tt&gt;/sys/class/dmi/id/product_uuid&lt;/tt&gt;: The main board product UUID, as
set by the board manufacturer and encoded in the BIOS DMI information. It may
be used to identify a mainboard and only the mainboard. It changes when the
user replaces the main board. Also, often enough BIOS manufacturers write bogus
serials into it. In addition, it is x86-specific. Access for unprivileged users
is forbidden. Hence it is of little general use.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;CPUID/EAX=3&lt;/tt&gt; CPU serial number: A CPU UUID, as set by the
CPU manufacturer and encoded on the CPU chip. It may be used to identify a CPU
and only a CPU. It changes when the user replaces the CPU. Also, most modern
CPUs don't implement this feature anymore, and older computers tend to disable
this option by default, controllable via a BIOS Setup option. In addition, it
is x86-specific. Hence this too is of little general use.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;/sys/class/net/*/address&lt;/tt&gt;: One or more network MAC addresses, as
set by the network adapter manufacturer and encoded on some network card
EEPROM. It changes when the user replaces the network card. Since network cards
are optional and there may be more than one the availability if this ID is not
guaranteed and you might have more than one to choose from. On virtual machines
the MAC addresses tend to be random. This too is hence of little general use.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;/sys/bus/usb/devices/*/serial&lt;/tt&gt;: Serial numbers of various USB
devices, as encoded in the USB device EEPROM. Most devices don't have a serial
number set, and if they have it is often bogus. If the user replaces his USB
hardware or plugs it into another machine these IDs may change or appear in
other machines. This hence too is of little use.&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;There are various other hardware IDs available, many of which you may
discover via the ID_SERIAL udev property of various devices, such hard disks
and similar. They all have in common that they are bound to specific
(replacable) hardware, not universally available, often filled with bogus data
and random in virtualized environments. Or in other words: don't use them, don't
rely on them for identification, unless you really know what you are doing and
in general they do not guarantee what you might hope they guarantee.&lt;/p&gt;

&lt;h4&gt;Software IDs&lt;/h4&gt;

&lt;ol&gt;

&lt;li&gt;&lt;tt&gt;/proc/sys/kernel/random/boot_id&lt;/tt&gt;: A random ID that is regenerated
on each boot. As such it can be used to identify the local machine's current
boot. It's universally available on any recent Linux kernel. It's a good and
safe choice if you need to identify a specific boot on a specific booted
kernel.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;gethostname()&lt;/tt&gt;, &lt;tt&gt;/proc/sys/kernel/hostname&lt;/tt&gt;: A non-random ID
configured by the administrator to identify a machine in the network. Often
this is not set at all or is set to some default value such as
&lt;tt&gt;localhost&lt;/tt&gt; and not even unique in the local network. In addition it
might change during runtime, for example because it changes based on updated
DHCP information. As such it is almost entirely useless for anything but
presentation to the user. It has very weak semantics and relies on correct
configuration by the administrator. Don't use this to identify machines in a
distributed environment. It won't work unless centrally administered, which
makes it useless in a globalized, mobile world. It has no place in
automatically generated filenames that shall be bound to specific hosts. Just
don't use it, please. It's really not what many people think it is.
&lt;tt&gt;gethostname()&lt;/tt&gt; is standardized in POSIX and hence portable to other
Unixes.&lt;/li&gt;

&lt;li&gt;IP Addresses returned by SIOCGIFCONF or the respective Netlink APIs: These
tend to be dynamically assigned and often enough only valid on local networks
or even only the local links (i.e. 192.168.x.x style addresses, or even
169.254.x.x/IPv4LL). Unfortunately they hence have little use outside of
networking.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;gethostid()&lt;/tt&gt;: Returns a supposedly unique 32-bit identifier for the
current machine. The semantics of this is not clear. On most machines this
simply returns a value based on a local IPv4 address. On others it is
administrator controlled via the &lt;tt&gt;/etc/hostid&lt;/tt&gt; file. Since the semantics
of this ID are not clear and most often is just a value based on the IP address it is
almost always the wrong choice to use. On top of that 32bit are not
particularly a lot. On the other hand this is standardized in POSIX and hence
portable to other Unixes. It's probably best to ignore this value and if people
don't want to ignore it they should probably symlink &lt;tt&gt;/etc/hostid&lt;/tt&gt; to
&lt;tt&gt;/var/lib/dbus/machine-id&lt;/tt&gt; or something similar.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;/var/lib/dbus/machine-id&lt;/tt&gt;: An ID identifying a specific Linux/Unix
installation. It does not change if hardware is replaced. It is not unreliable
in virtualized environments. This value has clear semantics and is considered
part of the D-Bus API. It is supposedly globally unique and portable to all
systems that have D-Bus. On Linux, it is universally available, given that
almost all non-embedded and even a fair share of the embedded machines ship
D-Bus now.  This is the recommended way to identify a machine, possibly with a
fallback to the host name to cover systems that still lack D-Bus. If your
application links against &lt;tt&gt;libdbus&lt;/tt&gt;, you may access this ID with
&lt;tt&gt;dbus_get_local_machine_id()&lt;/tt&gt;, if not you can read it directly from the file system.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;/proc/self/sessionid&lt;/tt&gt;: An ID identifying a specific Linux login
session. This ID is maintained by the kernel and part of the auditing logic. It
is uniquely assigned to each login session during a specific system boot,
shared by each process of a session, even across su/sudo and cannot be changed
by userspace. Unfortunately some distributions have so far failed to set things
up properly for this to work (Hey, you, Ubuntu!), and this ID is always
&lt;tt&gt;(uint32_t) -1&lt;/tt&gt; for them. But there's hope they get this fixed
eventually. Nonetheless it is a good choice for a unique session identifier on
the local machine and for the current boot. To make this ID globally unique it
is best combined with &lt;tt&gt;/proc/sys/kernel/random/boot_id&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;getuid()&lt;/tt&gt;: An ID identifying a specific Unix/Linux user. This ID is
usually automatically assigned when a user is created. It is not unique across
machines and may be reassigned to a different user if the original user was
deleted. As such it should be used only locally and with the limited validity
in time in mind. To make this ID globally unique it is not sufficient to
combine it with &lt;tt&gt;/var/lib/dbus/machine-id&lt;/tt&gt;, because the same ID might be
used for a different user that is created later with the same UID. Nonetheless
this combination is often good enough. It is available on all POSIX systems.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;ID_FS_UUID&lt;/tt&gt;: an ID that identifies a specific file system in the
udev tree. It is not always clear how these serials are generated but this
tends to be available on almost all modern disk file systems. It is not
available for NFS mounts or virtual file systems. Nonetheless this is often a
good way to identify a file system, and in the case of the root directory even
an installation. However due to the weakly defined generation semantics the
D-Bus machine ID is generally preferrable.&lt;/li&gt;

&lt;/ol&gt;

&lt;h4&gt;Generating IDs&lt;/h4&gt;

&lt;p&gt;Linux offers a kernel interface to generate UUIDs on demand, by reading from
&lt;tt&gt;/proc/sys/kernel/random/uuid&lt;/tt&gt;. This is a very simple interface to
generate UUIDs. That said, the logic behind UUIDs is unnecessarily complex and
often it is a better choice to simply read 16 bytes or so from
&lt;tt&gt;/dev/urandom&lt;/tt&gt;.&lt;/p&gt;

&lt;h4&gt;Summary&lt;/h4&gt;

&lt;p&gt;And the gist of it all: &lt;b&gt;Use &lt;tt&gt;/var/lib/dbus/machine-id&lt;/tt&gt;! Use
&lt;tt&gt;/proc/self/sessionid&lt;/tt&gt;! Use &lt;tt&gt;/proc/sys/kernel/random/boot_id&lt;/tt&gt;!
Use &lt;tt&gt;getuid()&lt;/tt&gt;! Use &lt;tt&gt;/dev/urandom&lt;/tt&gt;!&lt;/b&gt; And forget about the
rest, in particular the host name, or the hardware IDs such as DMI. And keep in
mind that you may combine the aforementioned IDs in various ways to get
different semantics and validity constraints.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 26 Jun 2010 17:02:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-06-26:/blog/projects/ids.html</guid><category>projects</category></item><item><title>Slides from LinuxTag 2010</title><link>https://0pointer.net/blog/projects/linuxtag-2010-slides.html</link><description>
                
&lt;p&gt;On popular request, &lt;a href="http://0pointer.de/public/systemd-presentation-linuxtag2010.pdf"&gt;here are my (terse) slides&lt;/a&gt; from LinuxTag on &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;systemd&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 15 Jun 2010 14:15:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-06-15:/blog/projects/linuxtag-2010-slides.html</guid><category>projects</category></item><item><title>Change of Plans</title><link>https://0pointer.net/blog/projects/linuxtag2k10.html</link><description>
                
&lt;p&gt;The upcoming week I'll do two talks at LinuxTag 2010 at the Berlin Fair Grounds. One of them was only
added to the schedule today, &lt;a href="http://www.linuxtag.org/2010/en/program/free-conference/wednesday/details.html?talkid=387"&gt;about
systemd&lt;/a&gt;. Systemd has never been presented in a public talk before, so make
sure to attend this historic moment... ;-). &lt;a href="http://0pointer.de/blog/projects/systemd.html"&gt;Read about&lt;/a&gt; &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;what has&lt;/a&gt; &lt;a href="http://lwn.net/Articles/389149/"&gt;been written&lt;/a&gt; &lt;a href="http://0pointer.de/blog/projects/systemd-in-the-news.html"&gt;about systemd
so far&lt;/a&gt;, so that you can ask the sharpest questions during my
presentation.&lt;/p&gt;

&lt;p&gt;My second talk might be about stuff a little less reported in the press, but
still very interesting, about &lt;a href="http://www.linuxtag.org/2010/en/program/free-conference/all-speakers/details.html?talkid=425"&gt;Surround Sound in Gnome&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See you at LinuxTag!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 05 Jun 2010 19:25:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-06-05:/blog/projects/linuxtag2k10.html</guid><category>projects</category></item><item><title>Mango Lassi is Back</title><link>https://0pointer.net/blog/projects/mango-lassi-is-back.html</link><description>
                
&lt;p&gt;&lt;img src="http://0pointer.de/public/mango-lassi-icon.png" width="48" height="48" alt="Mango Lassi's Icon" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com/herzi/mango-lassi"&gt;Sven Herzberg&lt;/a&gt; has recently
been doing a lot of work on &lt;a href="http://0pointer.de/blog/projects/mango-lassi.html"&gt;Mango Lassi&lt;/a&gt;, a
project deserving love but which I as its original author haven't touched
in 3 years.&lt;/p&gt;

&lt;p&gt;His work is already bearing fruits:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.lanedo.com/~herzi/mango-lassi-herzi.png"&gt;&lt;img src="http://www.lanedo.com/~herzi/mango-lassi-herzi.png" width="1280" height="800" alt="Mango Lassi" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Distribution packagers, please go and package &lt;a href="http://github.com/herzi/mango-lassi"&gt;his version&lt;/a&gt;, Mango Lassi is an
awesome, wonderful tool that needs distributor love.&lt;/p&gt;

&lt;p&gt;If you want to use Mango Lassi without waiting for the distribution packagers to catch up, Sven &lt;a href="https://build.opensuse.org/package/show?package=mango-lassi&amp;amp;project=home%3Aherzi"&gt;has built some packages for you in the OpenSUSE Build Service&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sven, KUTGW!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 19 May 2010 17:39:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-05-19:/blog/projects/mango-lassi-is-back.html</guid><category>projects</category></item><item><title>Name Your Threads</title><link>https://0pointer.net/blog/projects/name-your-threads.html</link><description>
                
&lt;p&gt;Stefan Kost recently pointed me to the fact that the Linux system call
&lt;tt&gt;prctl(PR_SET_NAME)&lt;/tt&gt; does not in fact change the process name, but the
task name (comm field) -- in contrast to what &lt;a href="http://www.kernel.org/doc/man-pages/online/pages/man2/prctl.2.html"&gt;the
man page&lt;/a&gt; suggests.&lt;/p&gt;

&lt;p&gt;That makes it very useful for naming threads, since you can read back the
name you set with PR_SET_NAME earlier from the &lt;tt&gt;/proc&lt;/tt&gt; file system
(&lt;tt&gt;/proc/$PID/task/$TID/comm&lt;/tt&gt; on newer kernels,
&lt;tt&gt;/proc/$PID/task/$TID/stat&lt;/tt&gt;'s second field on older kernels), and hence
distuingish which thread might be responsible for the high CPU load or similar
problems.&lt;/p&gt;

&lt;p&gt;So, now go, if you have a project which involves a lot of threads, name them
all individually, and make it easier to debug them. What's missing now, of
course, is that gdb learns this and shows the comm name when doing &lt;tt&gt;info
threads&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I have changed PulseAudio now to name all threads it creates.&lt;/p&gt;

&lt;p&gt;Of course, what would be even better than this is full file system extended
attribute support in procfs, so that we could attach arbitrary information to
processes and threads, including references to &lt;tt&gt;.desktop&lt;/tt&gt; files and such.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 11 May 2010 01:22:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-05-11:/blog/projects/name-your-threads.html</guid><category>projects</category></item><item><title>systemd Now Has a Web Site</title><link>https://0pointer.net/blog/projects/systemd-website.html</link><description>
                
&lt;p&gt;We now have a &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;web
site&lt;/a&gt;, a &lt;a href="http://lists.freedesktop.org/mailman/listinfo/systemd-devel"&gt;mailing
list&lt;/a&gt;, a bugzilla component and moved our
&lt;a href="http://cgit.freedesktop.org/systemd/"&gt;git repositories to freedesktop.org&lt;/a&gt;. Make sure to update your check-outs.&lt;/p&gt;

&lt;p&gt;For more details see &lt;a href="http://www.freedesktop.org/wiki/Software/systemd"&gt;our new web site&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 07 May 2010 22:29:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-05-07:/blog/projects/systemd-website.html</guid><category>projects</category></item><item><title>LAC Video Streams Online</title><link>https://0pointer.net/blog/projects/lac-video.html</link><description>
                
&lt;p&gt;The great people from the &lt;a href="http://lac.linuxaudio.org/2010/"&gt;Linux Audio Conference&lt;/a&gt; &lt;a href="http://lists.linuxaudio.org/pipermail/linux-audio-dev/2010-May/027529.html"&gt;uploaded
the video streams from the event&lt;/a&gt;. &lt;a href="http://www.linuxproaudio.org/lac2010/"&gt;Among them&lt;/a&gt; you can find &lt;a href="http://www.linuxproaudio.org/lac2010/day1_1400_Pro_Audio_is_Easy_Consumer_Audio_is_Hard.ogv"&gt;my
own presentation&lt;/a&gt;. Enjoy!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 05 May 2010 20:22:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-05-05:/blog/projects/lac-video.html</guid><category>projects</category></item><item><title>PulseAudio and Jack</title><link>https://0pointer.net/blog/projects/when-pa-and-when-not.html</link><description>
                #nocomments yes

&lt;p&gt;One thing became very clear to me during my trip to the &lt;a href="http://lac.linuxaudio.org/2010/"&gt;Linux Audio Conference 2010&lt;/a&gt;
in Utrecht: even many pro audio folks are not sure what &lt;a href="http://jackaudio.org/"&gt;Jack&lt;/a&gt; does that &lt;a href="http://www.pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; doesn't do and what
PulseAudio does that Jack doesn't do; why they are not competing, why
you cannot replace one by the other, and why merging them (at least in
the short term) might not make immediate sense.  In other words, why
millions of phones on this world run PulseAudio and not Jack, and why
a music studio running PulseAudio is crack.&lt;/p&gt;

&lt;p&gt;To light this up a bit and for future reference I'll try to explain in the
following text why there is this seperation between the two systems and why this isn't
necessarily bad. This is mostly a written up version of (parts of) &lt;a href="http://lac.linuxaudio.org/2010/download/lennarts-talk-auf-der-lac-2010.pdf"&gt;my slides
from LAC&lt;/a&gt;, so if you attended that event you might find little new, but I hope
it is interesting nonetheless.&lt;/p&gt;

&lt;p&gt;This is mostly written from my perspective as a hacker working on
consumer audio stuff (more specifically having written most of
PulseAudio), but I am sure most pro audio folks would agree with the
points I raise here, and have more things to add. What I explain below
is in no way comprehensive, just a list of a couple of points I think
are the most important, as they touch the very core of both
systems (and we ignore all the toppings here, i.e. sound effects, yadda, yadda).&lt;/p&gt;

&lt;p&gt;First of all let's clear up the background of the sound server use cases here:&lt;/p&gt;

&lt;table border="1"&gt;
&lt;tr&gt;&lt;th&gt;Consumer Audio (i.e. PulseAudio)&lt;/th&gt;
&lt;th&gt;Pro Audio (i.e. Jack)&lt;/th&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;Reducing power usage is a defining requirement, most systems are battery powered (Laptops, Cell Phones).&lt;/td&gt;
&lt;td&gt;Power usage usually not an issue, power comes out of the wall.&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;Must support latencies low enough for telephony and
games. Also covers high latency uses, such as movie and music playback
(2s of latency is a good choice).&lt;/td&gt; &lt;td&gt;Minimal latencies are a
definining requirement.&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;System is highly dynamic, with applications starting/stopping, hardware added and removed all the time.&lt;/td&gt;
&lt;td&gt;System is usually static in its configuration during operation.&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;User is usually not proficient in the technologies used.&lt;small&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/small&gt;&lt;/td&gt;
&lt;td&gt;User is usually a professional and knows audio technology and computers well.&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;User is not necessarily the administrator of his machine, might have limited access.&lt;/td&gt;
&lt;td&gt;User usually administrates his own machines, has root privileges.&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;Audio is just one use of the system among many, and often just a background job.&lt;/td&gt;
&lt;td&gt;Audio is the primary purpose of the system.&lt;/td&gt;&lt;/tr&gt;

&lt;tr&gt;&lt;td&gt;Hardware tends to have limited resources and be crappy and cheap.&lt;/td&gt;
&lt;td&gt;Hardware is powerful, expensive and high quality.&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Of course, things are often not as black and white like this, there are uses
that fall in the middle of these two areas.&lt;/p&gt;

&lt;p&gt;From the table above a few conclusions may be drawn:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;A consumer sound system must support both low and high latency operation.
Since low latencies mean high CPU load and hence high power
consumption&lt;small&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/small&gt; (Heisenberg...), a system should always run with the
highest latency latency possible, but the lowest latency necessary.&lt;/li&gt;

&lt;li&gt;Since the consumer system is highly dynamic in its use latencies must be
adjusted dynamically too. That makes a design such as PulseAudio's &lt;a href="http://0pointer.de/blog/projects/pulse-glitch-free.html"&gt;timer-based scheduling&lt;/a&gt; important.&lt;/li&gt;

&lt;li&gt;A pro audio system's primary optimization target is low latency. Low
power usage, dynamic changeble configuration (i.e. a short drop-out while you
change your pipeline is acceptable) and user-friendliness may be sacrificed for
that.&lt;/li&gt;

&lt;li&gt;For large buffer sizes a zero-copy design suggests itself: since data
blocks are large the cache pressure can be considerably reduced by zero-copy
designs. Only for large buffers the cost of passing pointers around is
considerable smaller than the cost of passing around the data itself (or the
other way round: if your audio data has the same size as your pointers, then
passing pointers around is useless extra work).&lt;/li&gt;

&lt;li&gt;On a resource constrained system the ideal audio pipeline does not touch
and convert the data passed along it unnecessarily. That makes it important to
support natively the sample types and interleaving modes of the audio source or
destination.&lt;/li&gt;

&lt;li&gt;A consumer system needs to simplify the view on the hardware, hide the its
complexity: hide redundant mixer elements, or merge them while making use of
the hardware capabilities, and extending it in software so that the same
functionality is provided on all hardware. A production system should not hide
or simplify the hardware functionality.&lt;/li&gt;

&lt;li&gt;A consumer system should not drop-out when a client misbehaves or the
configuration changes (OTOH if it happens in exceptions it is not disastrous
either). A synchronous pipeline is hence not advisable, clients need to supply
their data asynchronously.&lt;/li&gt;

&lt;li&gt;In a pro audio system a drop-out during reconfiguration is acceptable,
during operation unacceptable.&lt;/li&gt;

&lt;li&gt;In consumer audio we need to make compromises on resource usage,
which pro audio does not have to commit to. Example: a pro audio
system can issue &lt;tt&gt;memlock()&lt;/tt&gt; with little limitations since the
hardware is powerful (i.e. a lot of RAM available) and audio is the
primary purpose. A consumer audio system cannot do that because that
call practically makes memory unavailable to other applications,
increasing their swap pressure. And since audio is not the primary
purpose of the system and resources limited we hence need to find a
different way.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Jack has been designed for low latencies, where synchronous
operation is advisable, meaning that a misbehaving client call stall
the entire pipeline. Changes of the pipeline or latencies usually
result in drop-outs in one way or the other, since the entire pipeline
is reconfigured, from the hardware to the various clients. Jack only
supports FLOAT32 samples and non-interleaved audio channels (and that
is a good thing). Jack does not employ reference-counted zero-copy
buffers. It does not try to simplify the hardware mixer in any
way.&lt;/p&gt;

&lt;p&gt;PulseAudio OTOH can deal with varying latancies, &lt;a href="http://0pointer.de/blog/projects/pulse-glitch-free.html"&gt;dynamically
adjusting to the lowest latencies any of the connected clients
needs&lt;/a&gt;. Client communication is fully asynchronous, a single client
cannot stall the entire pipeline. PulseAudio supports a variety of PCM
formats and channel setups. PulseAudio's design is heavily based on
reference-counted zero-copy buffers that are passed around, even
between processes, instead of the audio data itself. PulseAudio tries
to simplify the hardware mixer as suggested above.&lt;/p&gt;

&lt;p&gt;Now, the two paragraphs above hopefully show how Jack is more
suitable for the pro audio use case and PulseAudio more for the
consumer audio use case. One question asks itself though: can we marry
the two approaches? Yes, we probably can, MacOS has a unified approach
for both uses. However, it is not clear this would be a good
idea. First of all, a system with the complexities introduced by
sample format/channel mapping conversion, as well as dynamically
changing latencies and pipelines, and asynchronous behaviour would
certainly be much less attractive to pro audio developers. In fact,
that Jack limits itself to synchronous, FLOAT32-only,
non-interleaved-only audio streams is one of the big features of its
design. Marrying the two approaches would corrupt that. A merged
solution would probably not have a good stand in the community.&lt;/p&gt;

&lt;p&gt;But it goes even further than this: what would the use case for
this be? After all, most of the time, you don't want your event
sounds, your Youtube, your VoIP and your Rhythmbox mixed into the new
record you are producing. Hence a clear seperation between the two
worlds might even be handy?&lt;/p&gt;

&lt;p&gt;Also, let's not forget that we lack the manpower to even create
such an audio chimera.&lt;/p&gt;

&lt;p&gt;So, where to from here? Well, I think we should put the focus on
cooperation instead of amalgamation: teach PulseAudio to go out of the
way as soon as Jack needs access to the device, and optionally make
PulseAudio a normal JACK client while both are running. That way, the
user has the option to use the PulseAudio supplied streams, but
normally does not see them in his pipeline. The first part of this has
already been implemented: Jack2 and PulseAudio do not fight for the
audio device, a friendly handover takes place. Jack takes precedence,
PulseAudio takes the back seat. The second part is still missing: you
still have to manually hookup PulseAudio to Jack if you are interested
in its streams. If both are implemented starting Jack basically has
the effect of replacing PulseAudio's core with the Jack core, while
still providing full compatibility with PulseAudio clients.&lt;/p&gt;

&lt;p&gt;And that I guess is all I have to say on the entire Jack and
PulseAudio story.&lt;/p&gt;

&lt;p&gt;Oh, one more thing, while we are at clearing things up: some news
sites claim that PulseAudio's not necessarily stellar reputation in
some parts of the community comes from Ubuntu and other distributions
having integrated it too early. Well, let me stress here explicitly,
that while they might have made a mistake or two in packaging
PulseAudio and I publicly pointed that out (and probably not in a too
friendly way), I do believe that the point in time they adopted it was
right. Why? Basically, it's a chicken and egg problem. If it is not
used in the distributions it is not tested, and there is no pressure
to get fixed what then turns out to be broken: in PulseAudio itself,
and in both the layers on top and below of it. Don't forget that
pushing a new layer into an existing stack will break a lot of
assumptions that the neighboring layers made. Doing this &lt;i&gt;must&lt;/i&gt;
break things. Most Free Software projects could probably use more
developers, and that is particularly true for Audio on Linux. And
given that that is how it is, pushing the feature in at that point in
time was the right thing to do. Or in other words, if the features are
right, and things do work correctly as far as the limited test base
the developers control shows, then one day you need to push into the
distributions, even if this might break setups and software that
previously has not been tested, unless you want to stay stuck in your
development indefinitely. So yes, Ubuntu, I think you did well with
adopting PulseAudio when you did.&lt;/p&gt;

&lt;h5&gt;Footnotes&lt;/h5&gt;

&lt;p&gt;&lt;small&gt;[1] Side note: yes, consumers tend not to know what &lt;a href="http://en.wikipedia.org/wiki/Decibel"&gt;dB&lt;/a&gt; is, and expect
volume settings in "percentages", a mostly meaningless unit in
audio. This even spills into projects like VLC or Amarok which expose
linear volume controls (which is a really bad idea).&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] In case you are wondering why that is the case: if the latency is
low the buffers must be sized smaller. And if the buffers are sized smaller
then the CPU will have to wake up more often to fill them up for the same
playback time. This drives up the CPU load since less actual payload can be
processed for the amount of housekeeping that the CPU has to do during each
buffer iteration. Also, frequent wake-ups make it impossible for the CPU to go
to deeper sleep states. Sleep states are the primary way for modern CPUs
to save power.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 05 May 2010 02:44:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-05-05:/blog/projects/when-pa-and-when-not.html</guid><category>projects</category></item><item><title>systemd In The News</title><link>https://0pointer.net/blog/projects/systemd-in-the-news.html</link><description>
                #nocomments yes

&lt;p&gt;A few news sites brought articles (some shorter, others longer) about &lt;a href="http://0pointer.de/blog/projects/systemd.html"&gt;last week's blog story on systemd&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lwn.net/Articles/385536/"&gt;Linux Weekly News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.h-online.com/open/news/item/Systemd-presented-as-SysV-Init-and-Upstart-alternative-991875.html"&gt;The H Open&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.osnews.com/story/23232/Rethinking_PID_1"&gt;OSNews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pro-linux.de/news/1/15621/systemd-alternative-zu-init-vorgeschlagen.html"&gt;Pro Linux (german)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.golem.de/1005/74884.html"&gt;Golem (german)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.heise.de/ct/meldung/SysVinit-und-Upstart-Alternative-Systemd-vorgestellt-991662.html"&gt;c't (german)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/r/coding/comments/bym56/systemd_rethinking_pid_1/"&gt;Reddit #1&lt;/a&gt;, &lt;a href="http://www.reddit.com/r/linux/comments/bybxf/rethinking_pid_1/"&gt;Reddit #2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Related to this, &lt;a href="http://www.netsplit.com/2010/04/30/on-systemd/"&gt;Scott's cordial reply&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://brainstorm.ubuntu.com/idea/24701/"&gt;And this I find funny, make sure to vote for it... ;-)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many of the comments on those stories are quite interesting, though sometimes a little, uh..., misled... ;-)&lt;/p&gt;

&lt;p&gt;Generally the reception of the ideas seems to be very positive. And that's certainly good news and encouraging.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 05 May 2010 01:30:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-05-05:/blog/projects/systemd-in-the-news.html</guid><category>projects</category></item><item><title>Rethinking PID 1</title><link>https://0pointer.net/blog/projects/systemd.html</link><description>
                
    &lt;p&gt;If you are well connected or good at reading between the lines
    you might already know what this blog post is about. But even then
    you may find this story interesting. So grab a cup of coffee,
    sit down, and read what's coming.&lt;/p&gt;

    &lt;p&gt;This blog story is long, so even though I can only recommend
    reading the long story, here's the one sentence summary: we are
    experimenting with a new init system and it is fun.&lt;/p&gt;

    &lt;p&gt;&lt;a href="http://git.0pointer.de/?p=systemd.git"&gt;Here's the code.&lt;/a&gt; And here's the story:&lt;/p&gt;

    &lt;h4&gt;Process Identifier 1&lt;/h4&gt;

    &lt;p&gt;On every Unix system there is one process with the special
    process identifier 1. It is started by the kernel before all other
    processes and is the parent process for all those other processes
    that have nobody else to be child of. Due to that it can do a lot
    of stuff that other processes cannot do. And it is also
    responsible for some things that other processes are not
    responsible for, such as bringing up and maintaining userspace
    during boot.&lt;/p&gt;

    &lt;p&gt;Historically on Linux the software acting as PID 1 was the
    venerable sysvinit package, though it had been showing its age for
    quite a while. Many replacements have been suggested, only one of
    them really took off: &lt;a href="http://upstart.ubuntu.com/"&gt;Upstart&lt;/a&gt;, which has by now found
    its way into all major distributions.&lt;/p&gt;

    &lt;p&gt;As mentioned, the central responsibility of an init system is
    to bring up userspace. And a good init system does that
    fast. Unfortunately, the traditional SysV init system was not
    particularly fast.&lt;/p&gt;

    &lt;p&gt;For a fast and efficient boot-up two things are crucial:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;To start &lt;b&gt;less&lt;/b&gt;.&lt;/li&gt;

      &lt;li&gt;And to start &lt;b&gt;more&lt;/b&gt; in &lt;i&gt;parallel&lt;/i&gt;.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;What does that mean? Starting less means starting fewer
    services or deferring the starting of services until they are
    actually needed. There are some services where we know that they
    will be required sooner or later (syslog, D-Bus system bus, etc.),
    but for many others this isn't the case. For example, bluetoothd
    does not need to be running unless a bluetooth dongle is actually
    plugged in or an application wants to talk to its D-Bus
    interfaces. Same for a printing system: unless the machine
    physically is connected to a printer, or an application wants to
    print something, there is no need to run a printing daemon such as
    CUPS. Avahi: if the machine is not connected to a
    network, there is no need to run &lt;a href="http://avahi.org"&gt;Avahi&lt;/a&gt;, unless some application wants
    to use its APIs. And even SSH: as long as nobody wants to contact
    your machine there is no need to run it, as long as it is then
    started on the first connection. (And admit it, on most machines
    where sshd might be listening somebody connects to it only every
    other month or so.)&lt;/p&gt;

    &lt;p&gt;Starting more in parallel means that if we have
    to run something, we should not serialize its start-up (as sysvinit
    does), but run it all at the same time, so that the available
    CPU and disk IO bandwidth is maxed out, and hence
    the overall start-up time minimized.&lt;/p&gt;

    &lt;h4&gt;Hardware and Software Change Dynamically&lt;/h4&gt;

    &lt;p&gt;Modern systems (especially general purpose OS) are highly
    dynamic in their configuration and use: they are mobile, different
    applications are started and stopped, different hardware added and
    removed again. An init system that is responsible for maintaining
    services needs to listen to hardware and software
    changes. It needs to dynamically start (and sometimes stop)
    services as they are needed to run a program or enable some
    hardware.&lt;/p&gt;

    &lt;p&gt;Most current systems that try to parallelize boot-up still
    synchronize the start-up of the various daemons involved: since
    Avahi needs D-Bus, D-Bus is started first, and only when D-Bus
    signals that it is ready, Avahi is started too. Similar for other
    services: livirtd and X11 need HAL (well, I am considering the
    Fedora 13 services here, ignore that HAL is obsolete), hence HAL
    is started first, before livirtd and X11 are started. And
    libvirtd also needs Avahi, so it waits for Avahi too. And all of
    them require syslog, so they all wait until Syslog is fully
    started up and initialized. And so on.&lt;/p&gt;

    &lt;h4&gt;Parallelizing Socket Services&lt;/h4&gt;

    &lt;p&gt;This kind of start-up synchronization results in the
    serialization of a significant part of the boot process. Wouldn't
    it be great if we could get rid of the synchronization and
    serialization cost? Well, we can, actually. For that, we need to
    understand what exactly the daemons require from each other, and
    why their start-up is delayed. For traditional Unix daemons,
    there's one answer to it: they wait until the socket the other
    daemon offers its services on is ready for connections. Usually
    that is an AF_UNIX socket in the file-system, but it could be
    AF_INET[6], too.  For example, clients of D-Bus wait that
    &lt;tt&gt;/var/run/dbus/system_bus_socket&lt;/tt&gt; can be connected to,
    clients of syslog wait for &lt;tt&gt;/dev/log&lt;/tt&gt;, clients of CUPS wait
    for &lt;tt&gt;/var/run/cups/cups.sock&lt;/tt&gt; and NFS mounts wait for
    &lt;tt&gt;/var/run/rpcbind.sock&lt;/tt&gt; and the portmapper IP port, and so
    on. And think about it, this is actually the only thing they wait
    for!&lt;/p&gt;

    &lt;p&gt;Now, if that's all they are waiting for, if we manage to make
    those sockets available for connection earlier and only actually
    wait for that instead of the full daemon start-up, then we can
    speed up the entire boot and start more processes in parallel. So,
    how can we do that? Actually quite easily in Unix-like systems: we
    can create the listening sockets &lt;b&gt;before&lt;/b&gt; we actually start
    the daemon, and then just pass the socket during &lt;tt&gt;exec()&lt;/tt&gt;
    to it. That way, we can create &lt;b&gt;all&lt;/b&gt; sockets for &lt;b&gt;all&lt;/b&gt;
    daemons in one step in the init system, and then in a second step
    run all daemons at once. If a service needs another, and it is not
    fully started up, that's completely OK: what will happen is that
    the connection is queued in the providing service and the client
    will potentially block on that single request. But only that one
    client will block and only on that one request. Also, dependencies
    between services will no longer necessarily have to be configured
    to allow proper parallelized start-up: if we start all sockets at
    once and a service needs another it can be sure that it can
    connect to its socket.&lt;/p&gt;

    &lt;p&gt;Because this is at the core of what is following, let me say
    this again, with different words and by example: if you start
    syslog and and various syslog clients at the same time, what will
    happen in the scheme pointed out above is that the messages of the
    clients will be added to the &lt;tt&gt;/dev/log&lt;/tt&gt; socket buffer. As
    long as that buffer doesn't run full, the clients will not have to
    wait in any way and can immediately proceed with their start-up. As
    soon as syslog itself finished start-up, it will dequeue all
    messages and process them. Another example: we start D-Bus and
    several clients at the same time. If a synchronous bus
    request is sent and hence a reply expected, what will happen is
    that the client will have to block, however only that one client
    and only until D-Bus managed to catch up and process it.&lt;/p&gt;

    &lt;p&gt;Basically, the kernel socket buffers help us to maximize
    parallelization, and the ordering and synchronization is done by
    the kernel, without any further management from userspace! And if
    all the sockets are available before the daemons actually start-up,
    dependency management also becomes redundant (or at least
    secondary): if a daemon needs another daemon, it will just connect
    to it. If the other daemon is already started, this will
    immediately succeed. If it isn't started but in the process of
    being started, the first daemon will not even have to wait for it,
    unless it issues a synchronous request. And even if the other
    daemon is not running at all, it can be auto-spawned. From the
    first daemon's perspective there is no difference, hence dependency
    management becomes mostly unnecessary or at least secondary, and
    all of this in optimal parallelization and optionally with
    on-demand loading. On top of this, this is also more robust, because
    the sockets stay available regardless whether the actual daemons
    might temporarily become unavailable (maybe due to crashing). In
    fact, you can easily write a daemon with this that can run, and
    exit (or crash), and run again and exit again (and so on), and all
    of that without the clients noticing or loosing any request.&lt;/p&gt;

    &lt;p&gt;It's a good time for a pause, go and refill your coffee mug,
    and be assured, there is more interesting stuff following.&lt;/p&gt;

    &lt;p&gt;But first, let's clear a few things up: is this kind of logic
    new? No, it certainly is not. The most prominent system that works
    like this is Apple's launchd system: on MacOS the listening of the
    sockets is pulled out of all daemons and done by launchd. The
    services themselves hence can all start up in parallel and
    dependencies need not to be configured for them. And that is
    actually a really ingenious design, and the primary reason why
    MacOS manages to provide the fantastic boot-up times it
    provides. I can highly recommend &lt;a href="https://www.youtube.com/watch?v=SjrtySM9Dns"&gt;this
    video&lt;/a&gt; where the launchd folks explain what they are
    doing. Unfortunately this idea never really took on outside of the Apple
    camp.&lt;/p&gt;

    &lt;p&gt;The idea is actually even older than launchd. Prior to launchd
    the venerable &lt;tt&gt;inetd&lt;/tt&gt; worked much like this: sockets were
    centrally created in a daemon that would start the actual service
    daemons passing the socket file descriptors during
    &lt;tt&gt;exec()&lt;/tt&gt;. However the focus of &lt;tt&gt;inetd&lt;/tt&gt; certainly
    wasn't local services, but Internet services (although later
    reimplementations supported AF_UNIX sockets, too). It also wasn't a
    tool to parallelize boot-up or even useful for getting implicit
    dependencies right.&lt;/p&gt;

    &lt;p&gt;For TCP sockets &lt;tt&gt;inetd&lt;/tt&gt; was primarily used in a way that
    for every incoming connection a new daemon instance was
    spawned. That meant that for each connection a new
    process was spawned and initialized, which is not a
    recipe for high-performance servers. However, right from the
    beginning &lt;tt&gt;inetd&lt;/tt&gt; also supported another mode, where a
    single daemon was spawned on the first connection, and that single
    instance would then go on and also accept the follow-up connections
    (that's what the &lt;tt&gt;wait&lt;/tt&gt;/&lt;tt&gt;nowait&lt;/tt&gt; option in
    &lt;tt&gt;inetd.conf&lt;/tt&gt; was for, a particularly badly documented
    option, unfortunately.) Per-connection daemon starts probably gave
    inetd its bad reputation for being slow. But that's not entirely
    fair.&lt;/p&gt;

    &lt;h4&gt;Parallelizing Bus Services&lt;/h4&gt;

    &lt;p&gt;Modern daemons on Linux tend to provide services via D-Bus
    instead of plain AF_UNIX sockets. Now, the question is, for those
    services, can we apply the same parallelizing boot logic as for
    traditional socket services? Yes, we can, D-Bus already has all
    the right hooks for it: using bus activation a service can be
    started the first time it is accessed. Bus activation also gives
    us the minimal per-request synchronisation we need for starting up
    the providers and the consumers of D-Bus services at the same
    time: if we want to start Avahi at the same time as CUPS (side
    note: CUPS uses Avahi to browse for mDNS/DNS-SD printers), then we
    can simply run them at the same time, and if CUPS is quicker than
    Avahi via the bus activation logic we can get D-Bus to queue the
    request until Avahi manages to establish its service name.&lt;/p&gt;

    &lt;p&gt;So, in summary: the socket-based service activation and the
    bus-based service activation together enable us to start
    &lt;b&gt;all&lt;/b&gt; daemons in parallel, without any further
    synchronization. Activation also allows us to do lazy-loading of
    services: if a service is rarely used, we can just load it the
    first time somebody accesses the socket or bus name, instead of
    starting it during boot.&lt;/p&gt;

    &lt;p&gt;And if that's not great, then I don't &lt;b&gt;know&lt;/b&gt; what is
    great!&lt;/p&gt;

    &lt;h4&gt;Parallelizing File System Jobs&lt;/h4&gt;

    &lt;p&gt;If you look &lt;a href="http://picasaweb.google.com/betsubetsu43/Fedora#5179125455943690130"&gt;at
    the serialization graphs of the boot process&lt;/a&gt; of current
    distributions, there are more synchronisation points than just
    daemon start-ups: most prominently there are file-system related
    jobs: mounting, fscking, quota. Right now, on boot-up a lot of
    time is spent idling to wait until all devices that are listed in
    &lt;tt&gt;/etc/fstab&lt;/tt&gt; show up in the device tree and are then
    fsck'ed, mounted, quota checked (if enabled). Only after that is
    fully finished we go on and boot the actual services.&lt;/p&gt;

    &lt;p&gt;Can we improve this? It turns out we can. Harald Hoyer came up
    with the idea of using the venerable autofs system for this:&lt;/p&gt;

    &lt;p&gt;Just like a &lt;tt&gt;connect()&lt;/tt&gt; call shows that a service is
    interested in another service, an &lt;tt&gt;open()&lt;/tt&gt; (or a similar
    call) shows that a service is interested in a specific file or
    file-system. So, in order to improve how much we can parallelize
    we can make those apps wait only if a file-system they are looking
    for is not yet mounted and readily available: we set up an autofs
    mount point, and then when our file-system finished fsck and quota
    due to normal boot-up we replace it by the real mount. While the
    file-system is not ready yet, the access will be queued by the
    kernel and the accessing process will block, but only that one
    daemon and only that one access. And this way we can begin
    starting our daemons even before all file systems have been fully
    made available -- without them missing any files, and maximizing
    parallelization.&lt;/p&gt;

    &lt;p&gt;Parallelizing file system jobs and service jobs does
    not make sense for &lt;tt&gt;/&lt;/tt&gt;, after all that's where the service
    binaries are usually stored. However, for file-systems such as
    &lt;tt&gt;/home&lt;/tt&gt;, that usually are bigger, even encrypted, possibly
    remote and seldom accessed by the usual boot-up daemons, this
    can improve boot time considerably. It is probably not necessary
    to mention this, but virtual file systems, such as
    procfs or sysfs should never be mounted via autofs.&lt;/p&gt;

    &lt;p&gt;I wouldn't be surprised if some readers might find integrating
    autofs in an init system a bit fragile and even weird, and maybe
    more on the "crackish" side of things. However, having played
    around with this extensively I can tell you that this actually
    feels quite right. Using autofs here simply means that we can
    create a mount point without having to provide the backing file
    system right-away. In effect it hence only delays accesses. If an
    application tries to access an autofs file-system and we take very
    long to replace it with the real file-system, it will hang in an
    interruptible sleep, meaning that you can safely cancel it, for
    example via C-c. Also note that at any point, if the mount point
    should not be mountable in the end (maybe because fsck failed), we
    can just tell autofs to return a clean error code (like
    ENOENT). So, I guess what I want to say is that even though
    integrating autofs into an init system might appear adventurous at
    first, our experimental code has shown that this idea works
    surprisingly well in practice -- if it is done for the right
    reasons and the right way.&lt;/p&gt;

    &lt;p&gt;Also note that these should be &lt;i&gt;direct&lt;/i&gt; autofs
    mounts, meaning that from an application perspective there's
    little effective difference between a classic mount point and one
    based on autofs.&lt;/p&gt;

    &lt;h4&gt;Keeping the First User PID Small&lt;/h4&gt;

    &lt;p&gt;Another thing we can learn from the MacOS boot-up logic is
    that shell scripts are evil. Shell is fast and shell is slow. It
    is fast to hack, but slow in execution. The classic sysvinit boot
    logic is modelled around shell scripts. Whether it is
    &lt;tt&gt;/bin/bash&lt;/tt&gt; or any other shell (that was written to make
    shell scripts faster), in the end the approach is doomed to be
    slow. On my system the scripts in &lt;tt&gt;/etc/init.d&lt;/tt&gt; call
    &lt;tt&gt;grep&lt;/tt&gt; at least 77 times. &lt;tt&gt;awk&lt;/tt&gt; is called 92
    times, &lt;tt&gt;cut&lt;/tt&gt; 23 and &lt;tt&gt;sed&lt;/tt&gt; 74. Every time those
    commands (and others) are called, a process is spawned, the
    libraries searched, some start-up stuff like i18n and so on set up
    and more. And then after seldom doing more than a trivial string
    operation the process is terminated again. Of course, that has to
    be incredibly slow. No other language but shell would do something like
    that. On top of that, shell scripts are also very fragile, and
    change their behaviour drastically based on environment variables
    and suchlike, stuff that is hard to oversee and control.&lt;/p&gt;

    &lt;p&gt;So, let's get rid of shell scripts in the boot process! Before
    we can do that we need to figure out what they are currently
    actually used for: well, the big picture is that most of the time,
    what they do is actually quite boring. Most of the scripting is
    spent on trivial setup and tear-down of services, and should be
    rewritten in C, either in separate executables, or moved into the
    daemons themselves, or simply be done in the init system.&lt;/p&gt;

    &lt;p&gt;It is not likely that we can get rid of shell scripts during
    system boot-up entirely anytime soon. Rewriting them in C takes
    time, in a few case does not really make sense, and sometimes
    shell scripts are just too handy to do without. But we can
    certainly make them less prominent.&lt;/p&gt;

    &lt;p&gt;A good metric for measuring shell script infestation of the
    boot process is the PID number of the first process you can start
    after the system is fully booted up. Boot up, log in, open a
    terminal, and type &lt;tt&gt;echo $$&lt;/tt&gt;. Try that on your Linux
    system, and then compare the result with MacOS! (Hint, it's
    something like this: Linux PID 1823; MacOS PID 154, measured on
    test systems we own.)&lt;/p&gt;

    &lt;h4&gt;Keeping Track of Processes&lt;/h4&gt;

    &lt;p&gt;A central part of a system that starts up and maintains
    services should be process babysitting: it should watch
    services. Restart them if they shut down. If they crash it should
    collect information about them, and keep it around for the
    administrator, and cross-link that information with what is
    available from crash dump systems such as abrt, and in logging
    systems like syslog or the audit system.&lt;/p&gt;

    &lt;p&gt;It should also be capable of shutting down a service
    completely. That might sound easy, but is harder than you
    think. Traditionally on Unix a process that does double-forking
    can escape the supervision of its parent, and the old parent will
    not learn about the relation of the new process to the one it
    actually started. An example: currently, a misbehaving CGI script
    that has double-forked is not terminated when you shut down
    Apache. Furthermore, you will not even be able to figure out its
    relation to Apache, unless you know it by name and purpose.&lt;/p&gt;

    &lt;p&gt;So, how can we keep track of processes, so that they cannot
    escape the babysitter, and that we can control them as one unit
    even if they fork a gazillion times?&lt;/p&gt;

    &lt;p&gt;Different people came up with different solutions for this. I
    am not going into much detail here, but let's at least say that
    approaches based on ptrace or the netlink connector (a kernel
    interface which allows you to get a netlink message each time any
    process on the system fork()s or exit()s) that some people have
    investigated and implemented, have been criticised as ugly and not
    very scalable.&lt;/p&gt;

    &lt;p&gt;So what can we do about this? Well, since quite a while the
    kernel knows &lt;a href="http://git.kernel.org/gitweb.cgi?p=linux/kernel/git/torvalds/linux-2.6.git;a=blob;f=Documentation/cgroups/cgroups.txt;hb=HEAD"&gt;Control
    Groups&lt;/a&gt; (aka "cgroups"). Basically they allow the creation of a
    hierarchy of groups of processes. The hierarchy is directly
    exposed in a virtual file-system, and hence easily accessible. The
    group names are basically directory names in that file-system. If
    a process belonging to a specific cgroup fork()s, its child will
    become a member of the same group. Unless it is privileged and has
    access to the cgroup file system it cannot escape its
    group. Originally, cgroups have been introduced into the kernel
    for the purpose of containers: certain kernel subsystems can
    enforce limits on resources of certain groups, such as limiting
    CPU or memory usage. Traditional resource limits (as implemented
    by &lt;tt&gt;setrlimit()&lt;/tt&gt;) are (mostly) per-process. cgroups on the
    other hand let you enforce limits on entire groups of
    processes. cgroups are also useful to enforce limits outside of
    the immediate container use case. You can use it for example to
    limit the total amount of memory or CPU Apache and all its
    children may use. Then, a misbehaving CGI script can no longer
    escape your &lt;tt&gt;setrlimit()&lt;/tt&gt; resource control by simply
    forking away.&lt;/p&gt;

    &lt;p&gt;In addition to container and resource limit enforcement cgroups
    are very useful to keep track of daemons: cgroup membership is
    securely inherited by child processes, they cannot escape. There's
    a notification system available so that a supervisor process can
    be notified when a cgroup runs empty. You can find the cgroups of
    a process by reading &lt;tt&gt;/proc/$PID/cgroup&lt;/tt&gt;. cgroups hence
    make a very good choice to keep track of processes for babysitting
    purposes.&lt;/p&gt;

    &lt;h4&gt;Controlling the Process Execution Environment&lt;/h4&gt;

    &lt;p&gt;A good babysitter should not only oversee and control when a
    daemon starts, ends or crashes, but also set up a good, minimal,
    and secure working environment for it.&lt;/p&gt;

    &lt;p&gt;That means setting obvious process parameters such as the
    &lt;tt&gt;setrlimit()&lt;/tt&gt; resource limits, user/group IDs or the
    environment block, but does not end there. The Linux kernel gives
    users and administrators a lot of control over processes (some of
    it is rarely used, currently). For each process you can set CPU
    and IO scheduler controls, the capability bounding set, CPU
    affinity or of course cgroup environments with additional limits,
    and more.&lt;/p&gt;

    &lt;p&gt;As an example, &lt;tt&gt;ioprio_set()&lt;/tt&gt; with
    &lt;tt&gt;IOPRIO_CLASS_IDLE&lt;/tt&gt; is a great away to minimize the effect
    of &lt;tt&gt;locate&lt;/tt&gt;'s &lt;tt&gt;updatedb&lt;/tt&gt; on system interactivity.&lt;/p&gt;

    &lt;p&gt;On top of that certain high-level controls can be very useful,
    such as setting up read-only file system overlays based on
    read-only bind mounts. That way one can run certain daemons so
    that all (or some) file systems appear read-only to them, so that
    EROFS is returned on every write request. As such this can be used
    to lock down what daemons can do similar in fashion to a poor
    man's SELinux policy system (but this certainly doesn't replace
    SELinux, don't get any bad ideas, please).&lt;/p&gt;

    &lt;p&gt;Finally logging is an important part of executing services:
    ideally every bit of output a service generates should be logged
    away. An init system should hence provide logging to daemons it
    spawns right from the beginning, and connect stdout and stderr to
    syslog or in some cases even &lt;tt&gt;/dev/kmsg&lt;/tt&gt; which in many
    cases makes a very useful replacement for syslog (embedded folks,
    listen up!), especially in times where the kernel log buffer is
    configured ridiculously large out-of-the-box.&lt;/p&gt;

    &lt;h4&gt;On Upstart&lt;/h4&gt;

    &lt;p&gt;To begin with, let me emphasize that I actually like the code
    of Upstart, it is very well commented and easy to
    follow. It's certainly something other projects should learn
    from (including my own).&lt;/p&gt;

    &lt;p&gt;That being said, I can't say I agree with the general approach
    of Upstart. But first, a bit more about the project:&lt;/p&gt;

    &lt;p&gt;Upstart does not share code with sysvinit, and its
    functionality is a super-set of it, and provides compatibility to
    some degree with the well known SysV init scripts. It's main
    feature is its event-based approach: starting and stopping of
    processes is bound to "events" happening in the system, where an
    "event" can be a lot of different things, such as: a network
    interfaces becomes available or some other software has been
    started.&lt;/p&gt;

    &lt;p&gt;Upstart does service serialization via these events: if the
    &lt;tt&gt;syslog-started&lt;/tt&gt; event is triggered this is used as an
    indication to start D-Bus since it can now make use of Syslog. And
    then, when &lt;tt&gt;dbus-started&lt;/tt&gt; is triggered,
    &lt;tt&gt;NetworkManager&lt;/tt&gt; is started, since it may now use
    &lt;tt&gt;D-Bus&lt;/tt&gt;, and so on.&lt;/p&gt;

    &lt;p&gt;One could say that this way the actual logical dependency tree
    that exists and is understood by the admin or developer is
    translated and encoded into event and action rules: every logical
    "a needs b" rule that the administrator/developer is aware of
    becomes a "start a when b is started" plus "stop a when b is
    stopped". In some way this certainly is a simplification:
    especially for the code in Upstart itself. However I would argue
    that this simplification is actually detrimental. First of all,
    the logical dependency system does not go away, the person who is
    writing Upstart files must now translate the dependencies manually
    into these event/action rules (actually, two rules for each
    dependency). So, instead of letting the computer figure out what
    to do based on the dependencies, the user has to manually
    translate the dependencies into simple event/action rules. Also,
    because the dependency information has never been encoded it is
    not available at runtime, effectively meaning that an
    administrator who tries to figure our &lt;i&gt;why&lt;/i&gt; something
    happened, i.e. why a is started when b is started, has no chance
    of finding that out.&lt;/p&gt;

    &lt;p&gt;Furthermore, the event logic turns around all dependencies,
    from the feet onto their head. Instead of &lt;i&gt;minimizing&lt;/i&gt; the
    amount of work (which is something that a good init system should
    focus on, as pointed out in the beginning of this blog story), it
    actually &lt;i&gt;maximizes&lt;/i&gt; the amount of work to do during
    operations. Or in other words, instead of having a clear goal and
    only doing the things it really needs to do to reach the goal, it
    does one step, and then after finishing it, it does &lt;b&gt;all&lt;/b&gt;
    steps that possibly could follow it.&lt;/p&gt;

    &lt;p&gt;Or to put it simpler: the fact that the user just started D-Bus
    is in no way an indication that NetworkManager should be started
    too (but this is what Upstart would do). It's right the other way
    round: when the user asks for NetworkManager, that is definitely
    an indication that D-Bus should be started too (which is certainly
    what most users would expect, right?).&lt;/p&gt;

    &lt;p&gt;A good init system should start only what is needed, and that
    on-demand. Either lazily or parallelized and in advance. However
    it should not start more than necessary, particularly not
    everything installed that could use that service.&lt;/p&gt;

    &lt;p&gt;Finally, I fail to see the actual usefulness of the event
    logic. It appears to me that most events that are exposed in
    Upstart actually are not punctual in nature, but have duration: a
    service starts, is running, and stops. A device is plugged in, is
    available, and is plugged out again. A mount point is in the
    process of being mounted, is fully mounted, or is being
    unmounted. A power plug is plugged in, the system runs on AC, and
    the power plug is pulled. Only a minority of the events an init
    system or process supervisor should handle are actually punctual,
    most of them are tuples of start, condition, and stop. This
    information is again not available in Upstart, because it focuses
    in singular events, and ignores durable dependencies.&lt;/p&gt;

    &lt;p&gt;Now, I am aware that some of the issues I pointed out above are
    in some way mitigated by certain more recent changes in Upstart,
    particularly condition based syntaxes such as &lt;tt&gt;start on
    (local-filesystems and net-device-up IFACE=lo)&lt;/tt&gt; in Upstart
    rule files. However, to me this appears mostly as an attempt to
    fix a system whose core design is flawed.&lt;/p&gt;

    &lt;p&gt;Besides that Upstart does OK for babysitting daemons, even though
    some choices might be questionable (see above), and there are certainly a lot
    of missed opportunities (see above, too).&lt;/p&gt;

    &lt;p&gt;There are other init systems besides sysvinit, Upstart and
    launchd. Most of them offer little substantial more than Upstart or
    sysvinit. The most interesting other contender is Solaris SMF,
    which supports proper dependencies between services. However, in
    many ways it is overly complex and, let's say, a bit &lt;i&gt;academic&lt;/i&gt;
    with its excessive use of XML and new terminology for known
    things. It is also closely bound to Solaris specific features such
    as the &lt;i&gt;contract&lt;/i&gt; system.&lt;/p&gt;

    &lt;h4&gt;Putting it All Together: systemd&lt;/h4&gt;

    &lt;p&gt;Well, this is another good time for a little pause, because
    after I have hopefully explained above what I think a good PID 1
    should be doing and what the current most used system does, we'll
    now come to where the beef is. So, go and refill you coffee mug
    again. It's going to be worth it.&lt;/p&gt;

    &lt;p&gt;You probably guessed it: what I suggested above as requirements
    and features for an ideal init system is actually available now,
    in a (still experimental) init system called &lt;tt&gt;systemd&lt;/tt&gt;, and
    which I hereby want to announce. &lt;a href="http://git.0pointer.de/?p=systemd.git"&gt;Again, here's the
    code.&lt;/a&gt; And here's a quick rundown of its features, and the
    rationale behind them:&lt;/p&gt;

    &lt;p&gt;systemd starts up and supervises the entire system (hence the
    name...). It implements all of the features pointed out above and
    a few more. It is based around the notion of &lt;i&gt;units&lt;/i&gt;. Units
    have a name and a type. Since their configuration is usually
    loaded directly from the file system, these unit names are
    actually file names. Example: a unit &lt;tt&gt;avahi.service&lt;/tt&gt; is
    read from a configuration file by the same name, and of course
    could be a unit encapsulating the Avahi daemon. There are several
    kinds of units:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;tt&gt;service&lt;/tt&gt;: these are the most obvious kind of unit:
      daemons that can be started, stopped, restarted, reloaded. For
      compatibility with SysV we not only support our own
      configuration files for services, but also are able to read
      classic SysV init scripts, in particular we parse the LSB
      header, if it exists. &lt;tt&gt;/etc/init.d&lt;/tt&gt; is hence not much
      more than just another source of configuration.&lt;/li&gt;

      &lt;li&gt;&lt;tt&gt;socket&lt;/tt&gt;: this unit encapsulates a socket in the
      file-system or on the Internet. We currently support AF_INET,
      AF_INET6, AF_UNIX sockets of the types stream, datagram, and
      sequential packet. We also support classic FIFOs as
      transport. Each &lt;tt&gt;socket&lt;/tt&gt; unit has a matching
      &lt;tt&gt;service&lt;/tt&gt; unit, that is started if the first connection
      comes in on the socket or FIFO. Example: &lt;tt&gt;nscd.socket&lt;/tt&gt;
      starts &lt;tt&gt;nscd.service&lt;/tt&gt; on an incoming connection.&lt;/li&gt;

      &lt;li&gt;&lt;tt&gt;device&lt;/tt&gt;: this unit encapsulates a device in the
      Linux device tree. If a device is marked for this via udev
      rules, it will be exposed as a &lt;tt&gt;device&lt;/tt&gt; unit in
      systemd. Properties set with &lt;tt&gt;udev&lt;/tt&gt; can be used as
      configuration source to set dependencies for device units.&lt;/li&gt;

      &lt;li&gt;&lt;tt&gt;mount&lt;/tt&gt;: this unit encapsulates a mount point in the
      file system hierarchy. systemd monitors all mount points how
      they come and go, and can also be used to mount or
      unmount mount-points. &lt;tt&gt;/etc/fstab&lt;/tt&gt; is used here as an
      additional configuration source for these mount points, similar to
      how SysV init scripts can be used as additional configuration
      source for &lt;tt&gt;service&lt;/tt&gt; units.&lt;/li&gt;

      &lt;li&gt;&lt;tt&gt;automount&lt;/tt&gt;: this unit type encapsulates an automount
      point in the file system hierarchy. Each &lt;tt&gt;automount&lt;/tt&gt;
      unit has a matching &lt;tt&gt;mount&lt;/tt&gt; unit, which is started
      (i.e. mounted) as soon as the automount directory is
      accessed.&lt;/li&gt;

      &lt;li&gt;&lt;tt&gt;target&lt;/tt&gt;: this unit type is used for logical
      grouping of units: instead of actually doing anything by itself
      it simply references other units, which thereby can be controlled
      together. Examples for this are: &lt;tt&gt;multi-user.target&lt;/tt&gt;,
      which is a target that basically plays the role of run-level 5 on
      classic SysV system, or &lt;tt&gt;bluetooth.target&lt;/tt&gt; which is
      requested as soon as a bluetooth dongle becomes available and
      which simply pulls in bluetooth related services that otherwise
      would not need to be started: &lt;tt&gt;bluetoothd&lt;/tt&gt; and
      &lt;tt&gt;obexd&lt;/tt&gt; and suchlike.&lt;/li&gt;

      &lt;li&gt;&lt;tt&gt;snapshot&lt;/tt&gt;: similar to &lt;tt&gt;target&lt;/tt&gt; units
      snapshots do not actually do anything themselves and their only
      purpose is to reference other units. Snapshots can be used to
      save/rollback the state of all services and units of the init
      system. Primarily it has two intended use cases: to allow the
      user to temporarily enter a specific state such as "Emergency
      Shell", terminating current services, and provide an easy way to
      return to the state before, pulling up all services again that
      got temporarily pulled down. And to ease support for system
      suspending: still many services cannot correctly deal with
      system suspend, and it is often a better idea to shut them down
      before suspend, and restore them afterwards.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;p&gt;All these units can have dependencies between each other (both
    positive and negative, i.e. 'Requires' and 'Conflicts'): a device
    can have a dependency on a service, meaning that as soon as a
    device becomes available a certain service is started. Mounts get
    an implicit dependency on the device they are mounted from. Mounts
    also gets implicit dependencies to mounts that are their prefixes
    (i.e. a mount &lt;tt&gt;/home/lennart&lt;/tt&gt; implicitly gets a dependency
    added to the mount for &lt;tt&gt;/home&lt;/tt&gt;) and so on. &lt;/p&gt;

    &lt;p&gt;A short list of other features:&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;For each process that is spawned, you may control: the
      environment, resource limits, working and root directory, umask,
      OOM killer adjustment, nice level, IO class and priority, CPU policy
      and priority, CPU affinity, timer slack, user id, group id,
      supplementary group ids, readable/writable/inaccessible
      directories, shared/private/slave mount flags,
      capabilities/bounding set, secure bits, CPU scheduler reset of
      fork, private &lt;tt&gt;/tmp&lt;/tt&gt; name-space, cgroup control for
      various subsystems. Also, you can easily connect
      stdin/stdout/stderr of services to syslog, &lt;tt&gt;/dev/kmsg&lt;/tt&gt;,
      arbitrary TTYs. If connected to a TTY for input systemd will make
      sure a process gets exclusive access, optionally waiting or enforcing
      it.&lt;/li&gt;

      &lt;li&gt;Every executed process gets its own cgroup (currently by
      default in the debug subsystem, since that subsystem is not
      otherwise used and does not much more than the most basic
      process grouping), and it is very easy to configure systemd to
      place services in cgroups that have been configured externally,
      for example via the libcgroups utilities.&lt;/li&gt;

      &lt;li&gt;The native configuration files use a syntax that closely
      follows the well-known &lt;tt&gt;.desktop&lt;/tt&gt; files. It is a simple syntax for
      which parsers exist already in many software frameworks. Also, this
      allows us to rely on existing tools for i18n for service
      descriptions, and similar. Administrators and developers don't
      need to learn a new syntax.&lt;/li&gt;

      &lt;li&gt;As mentioned, we provide compatibility with SysV init
      scripts. We take advantages of LSB and Red Hat chkconfig headers
      if they are available. If they aren't we try to make the best of
      the otherwise available information, such as the start
      priorities in &lt;tt&gt;/etc/rc.d&lt;/tt&gt;. These init scripts are simply
      considered a different source of configuration, hence an easy
      upgrade path to proper systemd services is available. Optionally
      we can read classic PID files for services to identify the main
      pid of a daemon. Note that we make use of the dependency
      information from the LSB init script headers, and translate
      those into native systemd dependencies. Side note: Upstart is
      unable to harvest and make use of that information. Boot-up on a
      plain Upstart system with mostly LSB SysV init scripts will
      hence not be parallelized, a similar system running systemd
      however will. In fact, for Upstart all SysV scripts together
      make one job that is executed, they are not treated
      individually, again in contrast to systemd where SysV init
      scripts are just another source of configuration and are all
      treated and controlled individually, much like any other native
      systemd service.&lt;/li&gt;

      &lt;li&gt;Similarly, we read the existing &lt;tt&gt;/etc/fstab&lt;/tt&gt;
      configuration file, and consider it just another source of
      configuration. Using the &lt;tt&gt;comment=&lt;/tt&gt; fstab option you can
      even mark &lt;tt&gt;/etc/fstab&lt;/tt&gt; entries to become &lt;tt&gt;systemd&lt;/tt&gt;
      controlled automount points.&lt;/li&gt;

      &lt;li&gt;If the same unit is configured in multiple configuration
      sources (e.g. &lt;tt&gt;/etc/systemd/system/avahi.service&lt;/tt&gt; exists,
      and &lt;tt&gt;/etc/init.d/avahi&lt;/tt&gt; too), then the native
      configuration will always take precedence, the legacy format is
      ignored, allowing an easy upgrade path and packages to carry
      both a SysV init script and a systemd service file for a
      while.&lt;/li&gt;

      &lt;li&gt;We support a simple templating/instance mechanism. Example:
      instead of having six configuration files for six gettys, we
      only have one &lt;tt&gt;getty@.service&lt;/tt&gt; file which gets instantiated to
      &lt;tt&gt;getty@tty2.service&lt;/tt&gt; and suchlike. The interface part can
      even be inherited by dependency expressions, i.e. it is easy to
      encode that a service &lt;tt&gt;dhcpcd@eth0.service&lt;/tt&gt; pulls in
      &lt;tt&gt;avahi-autoipd@eth0.service&lt;/tt&gt;, while leaving the
      &lt;tt&gt;eth0&lt;/tt&gt; string wild-carded.&lt;/li&gt;

      &lt;li&gt;For socket activation we support full compatibility with the
      traditional inetd modes, as well as a very simple mode that
      tries to mimic launchd socket activation and is recommended for
      new services. The inetd mode only allows passing one socket to
      the started daemon, while the native mode supports passing
      arbitrary numbers of file descriptors. We also support one
      instance per connection, as well as one instance for all
      connections modes. In the former mode we name the cgroup the
      daemon will be started in after the connection parameters, and
      utilize the templating logic mentioned above for this. Example:
      &lt;tt&gt;sshd.socket&lt;/tt&gt; might spawn services
      &lt;tt&gt;sshd@192.168.0.1-4711-192.168.0.2-22.service&lt;/tt&gt; with a
      cgroup of &lt;tt&gt;sshd@.service/192.168.0.1-4711-192.168.0.2-22&lt;/tt&gt;
      (i.e. the IP address and port numbers are used in the instance
      names. For AF_UNIX sockets we use PID and user id of the
      connecting client). This provides a nice way for the
      administrator to identify the various instances of a daemon and
      control their runtime individually. The native socket passing
      mode is very easily implementable in applications: if
      &lt;tt&gt;$LISTEN_FDS&lt;/tt&gt; is set it contains the number of sockets
      passed and the daemon will find them sorted as listed in the
      &lt;tt&gt;.service&lt;/tt&gt; file, starting from file descriptor 3 (a
      nicely written daemon could also use &lt;tt&gt;fstat()&lt;/tt&gt; and
      &lt;tt&gt;getsockname()&lt;/tt&gt; to identify the sockets in case it
      receives more than one). In addition we set &lt;tt&gt;$LISTEN_PID&lt;/tt&gt;
      to the PID of the daemon that shall receive the fds, because
      environment variables are normally inherited by sub-processes and
      hence could confuse processes further down the chain. Even
      though this socket passing logic is very simple to implement in
      daemons, we will provide a BSD-licensed reference implementation
      that shows how to do this. We have ported a couple of existing
      daemons to this new scheme.&lt;/li&gt;

      &lt;li&gt;We provide compatibility with &lt;tt&gt;/dev/initctl&lt;/tt&gt; to a
      certain extent. This compatibility is in fact implemented with a
      FIFO-activated service, which simply translates these legacy
      requests to D-Bus requests. Effectively this means the old
      &lt;tt&gt;shutdown&lt;/tt&gt;, &lt;tt&gt;poweroff&lt;/tt&gt; and similar commands from
      Upstart and &lt;tt&gt;sysvinit&lt;/tt&gt; continue to work with
      systemd.&lt;/li&gt;

      &lt;li&gt;We also provide compatibility with &lt;tt&gt;utmp&lt;/tt&gt; and
      &lt;tt&gt;wtmp&lt;/tt&gt;. Possibly even to an extent that is far more
      than healthy, given how crufty &lt;tt&gt;utmp&lt;/tt&gt; and &lt;tt&gt;wtmp&lt;/tt&gt;
      are.&lt;/li&gt;

      &lt;li&gt;systemd supports several kinds of
      dependencies between units. &lt;tt&gt;After&lt;/tt&gt;/&lt;tt&gt;Before&lt;/tt&gt; can be used to fix
      the ordering how units are activated. It is completely
      orthogonal to &lt;tt&gt;Requires&lt;/tt&gt; and &lt;tt&gt;Wants&lt;/tt&gt;, which
      express a positive requirement dependency, either mandatory, or
      optional. Then, there is &lt;tt&gt;Conflicts&lt;/tt&gt; which
      expresses a negative requirement dependency. Finally, there are
      three further, less used dependency types.&lt;/li&gt;

      &lt;li&gt;systemd has a minimal transaction system. Meaning: if a unit
      is requested to start up or shut down we will add it and all its
      dependencies to a temporary &lt;i&gt;transaction&lt;/i&gt;. Then, we will
      verify if the transaction is consistent (i.e. whether the
      ordering via &lt;tt&gt;After&lt;/tt&gt;/&lt;tt&gt;Before&lt;/tt&gt; of all units is
      cycle-free). If it is not, systemd will try to fix it up, and
      removes non-essential jobs from the transaction that might
      remove the loop. Also, systemd tries to suppress non-essential
      jobs in the transaction that would stop a running
      service. Non-essential jobs are those which the original request
      did not directly include but which where pulled in by
      &lt;tt&gt;Wants&lt;/tt&gt; type of dependencies. Finally we check whether
      the jobs of the transaction contradict jobs that have already
      been queued, and optionally the transaction is aborted then. If
      all worked out and the transaction is consistent and minimized
      in its impact it is merged with all already outstanding jobs and
      added to the run queue. Effectively this means that before
      executing a requested operation, we will verify that it makes
      sense, fixing it if possible, and only failing if it really cannot
      work.&lt;/li&gt;

      &lt;li&gt;We record start/exit time as well as the PID and exit status
      of every process we spawn and supervise. This data can be used
      to cross-link daemons with their data in abrtd, auditd and
      syslog. Think of an UI that will highlight crashed daemons for
      you, and allows you to easily navigate to the respective UIs for
      syslog, abrt, and auditd that will show the data generated from
      and for this daemon on a specific run.&lt;/li&gt;

      &lt;li&gt;We support reexecution of the init process itself at any
      time. The daemon state is serialized before the reexecution and
      deserialized afterwards. That way we provide a simple way to
      facilitate init system upgrades as well as handover from an
      initrd daemon to the final daemon. Open sockets and autofs
      mounts are properly serialized away, so that they stay
      connectible all the time, in a way that clients will not even
      notice that the init system reexecuted itself. Also, the fact
      that a big part of the service state is encoded anyway in the
      cgroup virtual file system would even allow us to resume
      execution without access to the serialization data. The
      reexecution code paths are actually mostly the same as the init
      system configuration reloading code paths, which
      guarantees that reexecution (which is probably more seldom
      triggered) gets similar testing as reloading (which is probably
      more common).&lt;/li&gt;

      &lt;li&gt;Starting the work of removing shell scripts from the boot
      process we have recoded part of the basic system setup in C and
      moved it directly into systemd. Among that is mounting of the API
      file systems (i.e. virtual file systems such as &lt;tt&gt;/proc&lt;/tt&gt;,
      &lt;tt&gt;/sys&lt;/tt&gt; and &lt;tt&gt;/dev&lt;/tt&gt;.) and setting of the
      host-name.&lt;/li&gt;

      &lt;li&gt;Server state is introspectable and controllable via
      D-Bus. This is not complete yet but quite extensive.&lt;/li&gt;

      &lt;li&gt;While we want to emphasize socket-based and bus-name-based
      activation, and we hence support dependencies between sockets and
      services, we also support traditional inter-service
      dependencies. We support multiple ways how such a service can
      signal its readiness: by forking and having the start process
      exit (i.e. traditional &lt;tt&gt;daemonize()&lt;/tt&gt; behaviour), as well
      as by watching the bus until a configured service name appears.&lt;/li&gt;

      &lt;li&gt;There's an interactive mode which asks for confirmation each
      time a process is spawned by systemd. You may enable it by
      passing &lt;tt&gt;systemd.confirm_spawn=1&lt;/tt&gt; on the kernel command
      line.&lt;/li&gt;

      &lt;li&gt;With the &lt;tt&gt;systemd.default=&lt;/tt&gt; kernel command line
      parameter you can specify which unit systemd should start on
      boot-up. Normally you'd specify something like
      &lt;tt&gt;multi-user.target&lt;/tt&gt; here, but another choice could even
      be a single service instead of a target, for example
      out-of-the-box we ship a service &lt;tt&gt;emergency.service&lt;/tt&gt; that
      is similar in its usefulness as &lt;tt&gt;init=/bin/bash&lt;/tt&gt;, however
      has the advantage of actually running the init system, hence
      offering the option to boot up the full system from the
      emergency shell.&lt;/li&gt;

      &lt;li&gt;There's a minimal UI that allows you to
      start/stop/introspect services. It's far from complete but
      useful as a debugging tool. It's written in Vala (yay!) and goes
      by the name of &lt;tt&gt;systemadm&lt;/tt&gt;.&lt;/li&gt;

    &lt;/ol&gt;

    &lt;p&gt;It should be noted that systemd uses many Linux-specific
    features, and does not limit itself to POSIX. That unlocks a lot
    of functionality a system that is designed for portability to
    other operating systems cannot provide.&lt;/p&gt;

    &lt;h4&gt;Status&lt;/h4&gt;

    &lt;p&gt;All the features listed above are already implemented. Right
    now systemd can already be used as a drop-in replacement for
    Upstart and sysvinit (at least as long as there aren't too many
    native upstart services yet. Thankfully most distributions don't
    carry too many native Upstart services yet.)&lt;/p&gt;

    &lt;p&gt;However, testing has been minimal, our version number is
    currently at an impressive 0. Expect breakage if you run this in
    its current state. That said, overall it should be quite stable
    and some of us already boot their normal development systems with
    systemd (in contrast to VMs only). YMMV, especially if you try
    this on distributions we developers don't use.&lt;/p&gt;

    &lt;h4&gt;Where is This Going?&lt;/h4&gt;

    &lt;p&gt;The feature set described above is certainly already
    comprehensive. However, we have a few more things on our plate. I
    don't really like speaking too much about big plans but here's a
    short overview in which direction we will be pushing this:&lt;/p&gt;

    &lt;p&gt;We want to add at least two more unit types: &lt;tt&gt;swap&lt;/tt&gt;
    shall be used to control swap devices the same way we
    already control mounts, i.e. with automatic dependencies on the
    device tree devices they are activated from, and
    suchlike. &lt;tt&gt;timer&lt;/tt&gt; shall provide functionality similar to
    &lt;tt&gt;cron&lt;/tt&gt;, i.e. starts services based on time events, the
    focus being both monotonic clock and wall-clock/calendar
    events. (i.e. "start this 5h after it last ran" as well as "start
    this every monday 5 am")&lt;/p&gt;

    &lt;p&gt;More importantly however, it is also our plan to experiment with
    systemd not only for optimizing boot times, but also to make it
    the ideal session manager, to replace (or possibly just augment)
    &lt;tt&gt;gnome-session&lt;/tt&gt;, &lt;tt&gt;kdeinit&lt;/tt&gt; and similar daemons. The problem set of a
    session manager and an init system are very similar: quick start-up
    is essential and babysitting processes the focus. Using the same
    code for both uses hence suggests itself. Apple recognized that
    and does just that with launchd. And so should we: socket and bus
    based activation and parallelization is something session services
    and system services can benefit from equally.&lt;/p&gt;

    &lt;p&gt;I should probably note that all three of these features are
    already partially available in the current code base, but not
    complete yet. For example, already, you can run systemd just fine
    as a normal user, and it will detect that is run that way and
    support for this mode has been available since the very beginning,
    and is in the very core. (It is also exceptionally useful for
    debugging! This works fine even without having the system
    otherwise converted to systemd for booting.)&lt;/p&gt;

    &lt;p&gt;However, there are some things we probably should fix in the
    kernel and elsewhere before finishing work on this: we
    need swap status change notifications from the kernel similar to
    how we can already subscribe to mount changes; we want a
    notification when CLOCK_REALTIME jumps relative to
    CLOCK_MONOTONIC; we want to allow &lt;a href="http://lkml.org/lkml/2010/2/2/165"&gt;normal processes to get
    some init-like powers&lt;/a&gt;; we need a &lt;a href="http://lists.freedesktop.org/archives/xdg/2010-April/011446.html"&gt;well-defined
    place where we can put user sockets&lt;/a&gt;. None of these issues are
    really essential for systemd, but they'd certainly improve
    things.&lt;/p&gt;

    &lt;h4&gt;You Want to See This in Action?&lt;/h4&gt;

    &lt;p&gt;Currently, there are no tarball releases, but it should be
    straightforward to check out the code &lt;a href="http://git.0pointer.de/?p=systemd.git"&gt;from our
    repository&lt;/a&gt;. In addition, to have something to start with, &lt;a href="http://0pointer.de/public/etc-systemd-system.tar.gz"&gt;here's
    a tarball with unit configuration files&lt;/a&gt; that allows an
    otherwise unmodified Fedora 13 system to work with systemd. We
    have no RPMs to offer you for now.&lt;/p&gt;

    &lt;p&gt;An easier way is to download &lt;a href="http://surfsite.org/f13-systemd-livecd.torrent"&gt;this Fedora 13 qemu image&lt;/a&gt;, which
    has been prepared for systemd. In the grub menu you can select
    whether you want to boot the system with Upstart or systemd. Note
    that this system is minimally modified only. Service information
    is read exclusively from the existing SysV init scripts. Hence it
    will not take advantage of the full socket and bus-based
    parallelization pointed out above, however it will interpret the
    parallelization hints from the LSB headers, and hence boots faster
    than the Upstart system, which in Fedora does not employ any
    parallelization at the moment. The image is configured to output
    debug information on the serial console, as well as writing it to
    the kernel log buffer (which you may access with &lt;tt&gt;dmesg&lt;/tt&gt;).
    You might want to run &lt;tt&gt;qemu&lt;/tt&gt; configured with a virtual
    serial terminal. All passwords are set to &lt;tt&gt;systemd&lt;/tt&gt;.&lt;/p&gt;

    &lt;p&gt;Even simpler than downloading and booting the qemu image is
    looking at pretty screen-shots. Since an init system usually is
    well hidden beneath the user interface, some shots of
    &lt;tt&gt;systemadm&lt;/tt&gt; and &lt;tt&gt;ps&lt;/tt&gt; must do:&lt;/p&gt;

    &lt;p&gt;&lt;img src="http://0pointer.de/public/systemadm.png" width="1057" height="881" alt="systemadm" /&gt;&lt;/p&gt;

    &lt;p&gt;That's systemadm showing all loaded units, with more detailed
    information on one of the getty instances.&lt;/p&gt;

    &lt;p&gt;&lt;img src="http://0pointer.de/public/pscgroups.png" width="1057" height="881" alt="ps" /&gt;&lt;/p&gt;

    &lt;p&gt;That's an excerpt of the output of &lt;tt&gt;ps xaf -eo
    pid,user,args,cgroup&lt;/tt&gt; showing how neatly the processes are
    sorted into the cgroup of their service. (The fourth column is the
    cgroup, the &lt;tt&gt;debug:&lt;/tt&gt; prefix is shown because we use the
    debug cgroup controller for systemd, as mentioned earlier. This is
    only temporary.)&lt;/p&gt;

    &lt;p&gt;Note that both of these screenshots show an only minimally
    modified Fedora 13 Live CD installation, where services are
    exclusively loaded from the existing SysV init scripts. Hence,
    this does not use socket or bus activation for any existing
    service.&lt;/p&gt;

    &lt;p&gt;Sorry, no bootcharts or hard data on start-up times for the
    moment. We'll publish that as soon as we have fully parallelized
    all services from the default Fedora install. Then, we'll welcome
    you to benchmark the systemd approach, and provide our own
    benchmark data as well.&lt;/p&gt;

    &lt;p&gt;Well, presumably everybody will keep bugging me about this, so
    here are two numbers I'll tell you. However, they are completely
    unscientific as they are measured for a VM (single CPU) and by
    using the stop timer in my watch. Fedora 13 booting up with
    Upstart takes 27s, with systemd we reach 24s (from grub to gdm,
    same system, same settings, shorter value of two bootups, one
    immediately following the other). Note however that this shows
    nothing more than the speedup effect reached by using the LSB
    dependency information parsed from the init script headers for
    parallelization. Socket or bus based activation was not utilized
    for this, and hence these numbers are unsuitable to assess the
    ideas pointed out above. Also, systemd was set to debug verbosity
    levels on a serial console. So again, this benchmark data has
    barely any value.&lt;/p&gt;

    &lt;h4&gt;Writing Daemons&lt;/h4&gt;

    &lt;p&gt;An ideal daemon for use with systemd does a few things
    differently then things were traditionally done. Later on, we will
    publish a longer guide explaining and suggesting how to write a daemon for use
    with this systemd. Basically, things get simpler for daemon
    developers:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;We ask daemon writers not to fork or even double fork
      in their processes, but run their event loop from the initial process
      systemd starts for you. Also, don't call &lt;tt&gt;setsid()&lt;/tt&gt;.&lt;/li&gt;

      &lt;li&gt;Don't drop user privileges in the daemon itself, leave this
      to systemd and configure it in systemd service configuration
      files. (There are exceptions here. For example, for some daemons
      there are good reasons to drop privileges inside the daemon
      code, after an initialization phase that requires elevated
      privileges.)&lt;/li&gt;

      &lt;li&gt;Don't write PID files&lt;/li&gt;

      &lt;li&gt;Grab a name on the bus&lt;/li&gt;

      &lt;li&gt;You may rely on systemd for logging, you are welcome to log
      whatever you need to log to stderr.&lt;/li&gt;

      &lt;li&gt;Let systemd create and watch sockets for you, so that socket
      activation works. Hence, interpret &lt;tt&gt;$LISTEN_FDS&lt;/tt&gt; and
      &lt;tt&gt;$LISTEN_PID&lt;/tt&gt; as described above.&lt;/li&gt;

      &lt;li&gt;Use SIGTERM for requesting shut downs from your daemon.&lt;/li&gt;

    &lt;/ul&gt;

    &lt;p&gt;The list above is very similar to what &lt;a href="http://developer.apple.com/mac/library/documentation/MacOSX/Conceptual/BPSystemStartup/Articles/LaunchOnDemandDaemons.html"&gt;Apple
    recommends for daemons compatible with launchd&lt;/a&gt;. It should be
    easy to extend daemons that already support launchd
    activation to support systemd activation as well.&lt;/p&gt;

    &lt;p&gt;Note that systemd supports daemons not written in this style
    perfectly as well, already for compatibility reasons (launchd has
    only limited support for that). As mentioned, this even extends to
    existing inetd capable daemons which can be used unmodified for
    socket activation by systemd.&lt;/p&gt;

    &lt;p&gt;So, yes, should systemd prove itself in our experiments and get
    adopted by the distributions it would make sense to port at least
    those services that are started by default to use socket or
    bus-based activation. &lt;a href="http://people.freedesktop.org/~kay/LISTEN_FDS/"&gt;We have
    written proof-of-concept patches&lt;/a&gt;, and the porting turned out
    to be very easy. Also, we can leverage the work that has already
    been done for launchd, to a certain extent. Moreover, adding
    support for socket-based activation does not make the service
    incompatible with non-systemd systems.&lt;/p&gt;

    &lt;h4 id="faqs"&gt;FAQs&lt;/h4&gt;

    &lt;dl&gt;

      &lt;dt&gt;Who's behind this?&lt;/dt&gt;

      &lt;dd&gt;Well, the current code-base is mostly my work, Lennart
      Poettering (Red Hat). However the design in all its details is
      result of close cooperation between Kay Sievers (Novell) and
      me. Other people involved are Harald Hoyer (Red Hat), Dhaval
      Giani (Formerly IBM), and a few others from various
      companies such as Intel, SUSE and Nokia.&lt;/dd&gt;

      &lt;dt&gt;Is this a Red Hat project?&lt;/dt&gt;

      &lt;dd&gt;No, this is my personal side project. Also, let me emphasize
      this: &lt;i&gt;the opinions reflected here are my own. They are not
      the views of my employer, or Ronald McDonald, or anyone
      else.&lt;/i&gt;&lt;/dd&gt;

      &lt;dt&gt;Will this come to Fedora?&lt;/dt&gt;

      &lt;dd&gt;If our experiments prove that this approach works out, and
      discussions in the Fedora community show support for this, then
      yes, we'll certainly try to get this into Fedora.&lt;/dd&gt;

      &lt;dt&gt;Will this come to OpenSUSE?&lt;/dt&gt;

      &lt;dd&gt;Kay's pursuing that, so something similar as for Fedora applies here, too.&lt;/dd&gt;

      &lt;dt&gt;Will this come to Debian/Gentoo/Mandriva/MeeGo/Ubuntu/[insert your favourite distro here]?&lt;/dt&gt;

      &lt;dd&gt;That's up to them. We'd certainly welcome their interest, and help with the integration.&lt;/dd&gt;

      &lt;dt&gt;Why didn't you just add this to Upstart, why did you invent something new?&lt;/dt&gt;

      &lt;dd&gt;Well, the point of the part about Upstart above was to show
      that the core design of Upstart is flawed, in our
      opinion. Starting completely from scratch suggests itself if the
      existing solution appears flawed in its core. However, note that
      we took a lot of inspiration from Upstart's code-base
      otherwise.&lt;/dd&gt;

      &lt;dt&gt;If you love Apple launchd so much, why not adopt that?&lt;/dt&gt;

      &lt;dd&gt;launchd is a great invention, but I am not convinced that it
      would fit well into Linux, nor that it is suitable for a system
      like Linux with its immense scalability and flexibility to
      numerous purposes and uses.&lt;/dd&gt;

      &lt;dt&gt;Is this an &lt;a href="http://en.wikipedia.org/wiki/Not_Invented_Here"&gt;NIH&lt;/a&gt; project?&lt;/dt&gt;

      &lt;dd&gt;Well, I hope that I managed to explain in the text above why
      we came up with something new, instead of building on Upstart or
      launchd. We came up with systemd due to technical
      reasons, not political reasons.&lt;/dd&gt;

      &lt;dd&gt;Don't forget that it is Upstart that includes
      &lt;a href="https://launchpad.net/libnih"&gt;a library called NIH&lt;/a&gt;
      (which is kind of a reimplementation of glib) -- not systemd!&lt;/dd&gt;

      &lt;dt&gt;Will this run on [insert non-Linux OS here]?&lt;/dt&gt;

      &lt;dd&gt;Unlikely. As pointed out, systemd uses many Linux specific
      APIs (such as epoll, signalfd, libudev, cgroups, and numerous
      more), a port to other operating systems appears to us as not
      making a lot of sense. Also, we, the people involved are
      unlikely to be interested in merging possible ports to other
      platforms and work with the constraints this introduces. That said,
      git supports branches and rebasing quite well, in case
      people really want to do a port.&lt;/dd&gt;

      &lt;dd&gt;Actually portability is even more limited than just to other OSes: we require a very
      recent Linux kernel, glibc, libcgroup and libudev.  No support for
      less-than-current Linux systems, sorry.&lt;/dd&gt;

      &lt;dd&gt;If folks want to implement something similar for other
      operating systems, the preferred mode of cooperation is probably
      that we help you identify which interfaces can be shared with
      your system, to make life easier for daemon writers to support
      both systemd and your systemd counterpart. Probably, the focus should be
      to share interfaces, not code.&lt;/dd&gt;

      &lt;dt&gt;I hear [fill one in here: the Gentoo boot system, initng,
      Solaris SMF, runit, uxlaunch, ...] is an awesome init system and
      also does parallel boot-up, so why not adopt that?&lt;/dt&gt;

      &lt;dd&gt;Well, before we started this we actually had a very close
      look at the various systems, and none of them did what we had in
      mind for systemd (with the exception of launchd, of course). If
      you cannot see that, then please read again what I wrote
      above.&lt;/dd&gt;

&lt;!--      &lt;dt&gt;First you &lt;a href="http://pulseaudio.org/"&gt;break my
      audio&lt;/a&gt;, and now you want to corrupt my boot?&lt;/dt&gt;

      &lt;dd&gt;Yes. And don't forget that I am also responsible for &lt;a
      href="http://avahi.org/"&gt;crucifying your network&lt;/a&gt;. I am
      coming after you! Muhahahaha!&lt;/dd&gt;--&gt;

    &lt;/dl&gt;

    &lt;h4 id="contributions"&gt;Contributions&lt;/h4&gt;

    &lt;p&gt;We are very interested in patches and help. It should be common
    sense that every Free Software project can only benefit from the
    widest possible external contributions. That is particularly true
    for a core part of the OS, such as an init system. We value your
    contributions and hence do not require copyright assignment (&lt;a href="http://www.ebb.org/bkuhn/blog/2010/02/01/copyright-not-all-equal.html"&gt;Very
    much unlike Canonical/Upstart&lt;/a&gt;!). And also, we use git,
    everybody's favourite VCS, yay!&lt;/p&gt;

    &lt;p&gt;We are particularly interested in help getting systemd to work
    on other distributions, besides Fedora and OpenSUSE. (Hey, anybody
    from Debian, Gentoo, Mandriva, MeeGo looking for something to do?)
    But even beyond that we are keen to attract contributors on every
    level: we welcome C hackers, packagers, as well as folks who are interested
    to write documentation, or contribute a logo.&lt;/p&gt;

    &lt;h4 id="community"&gt;Community&lt;/h4&gt;

    &lt;p&gt;At this time we only have &lt;a href="http://git.0pointer.de/?p=systemd.git"&gt;source code
    repository&lt;/a&gt; and an IRC channel (&lt;tt&gt;#systemd&lt;/tt&gt; on
    Freenode). There's no mailing list, web site or bug tracking
    system. We'll probably set something up on freedesktop.org
    soon. If you have any questions or want to contact us otherwise we
    invite you to join us on IRC!&lt;/p&gt;

    &lt;p&gt;&lt;b&gt;Update: &lt;a href="http://0pointer.de/blog/projects/systemd-website.html"&gt;our GIT repository has moved.&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 30 Apr 2010 10:46:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-04-30:/blog/projects/systemd.html</guid><category>projects</category></item><item><title>A Few Notes on Bloom Filters</title><link>https://0pointer.net/blog/projects/bloom.html</link><description>
                
&lt;p&gt;For future reference (mostly for myself), here's a little summary of how to
use &lt;a href="http://en.wikipedia.org/wiki/Bloom_filter"&gt;Bloom filters&lt;/a&gt; in
real world applications.&lt;/p&gt;

&lt;p&gt;Most references are terse and vague on how to pick the hash functions for
bloom filters, so here's some detail about that: For small filters, just use a
boring and fast hash function like the &lt;a href="http://www.google.com/codesearch?q=djb+hash+function&amp;amp;hl=en"&gt;djb hash
function&lt;/a&gt; and split up the 32bit result into smaller independent chunks for
each of the k hash indexes you'll need. Often those 32 bits already provide
enough hash bits to get enough independent bloom filter indexes. And if they
don't you basically have three options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use multiple different hash functions, and then &lt;a href="http://sites.google.com/site/murmurhash/"&gt;MurmurHash&lt;/a&gt; seems to be a
very good choice. It's simple, readily usable code (even in C, though the
reference implementation claims to be C++), and properly licensed. It is a hash
function that takes a seed parameter which can be used to create as many
independent hash functions as needed.&lt;/li&gt;

&lt;li&gt;Use a cryptographic hash function. Most of them can be implemented really
fast on modern CPUs and are already available in some library you use anyway.
SHA512 for example outputs plenty bits you can split into k chunks as you need
them for your k bloom filter indexes. (Of course, if you are afraid of US
export regulations this might be a choice you want to avoid.)&lt;/li&gt;

&lt;li&gt;Use two independent hash functions and combine &lt;a href="http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/esa06.pdf"&gt;them
linearly&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The size of the bloom filter and the number of hash functions you should be
using depending on your application can be calculated using the formulas on the
Wikipedia page:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;m = -n*ln(p)/(ln(2)^2)&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;This will tell you the number of bits m to use for your filter, given the
number n of elements in your filter and the false positive probability p you
want to achieve. All that for the ideal number of hash functions k which you
can calculate like this:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;k = 0.7*m/n&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;And that's already everything you need to know to build good bloom filters.
If you know the p and n for your use case the above will tell you the m and k, and
how to choose the k hash functions.&lt;/p&gt;

&lt;p&gt;Bloom filters are a really really useful tool, and given their simplicity
something every developer should be aware of.&lt;/p&gt;

&lt;p&gt;(And in case you were wondering what this all is about, Kay Sievers and I
were discussing using bloom filters in the libudev netlink BSD socket filters,
to allow monitoring a certain subset of devices that is orthogonal to the usual
subsystem hierarchy, and all that in a way where the number of wakeups in
listening clients is minimized)&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 20 Apr 2010 22:01:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-04-20:/blog/projects/bloom.html</guid><category>projects</category></item><item><title>Down the Amazon II</title><link>https://0pointer.net/blog/photos/amazon2.html</link><description>
                
&lt;p&gt;As a followup to &lt;a href="http://0pointer.de/blog/photos/amazon.html"&gt;this
blog story&lt;/a&gt; here are a couple of non-panorama shots from the trip:&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=206"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-206.jpg" alt="Image 206" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=144"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-144.jpg" alt="Image 144" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=142"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-142.jpg" alt="Image 142" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=113"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-113.jpg" alt="Image 113" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=96"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-96.jpg" alt="Image 96" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=897"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-897.jpg" alt="Image 897" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=91"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-91.jpg" alt="Image 91" width="120" height="80" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=751"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-751.jpg" alt="Image 751" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=112"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-112.jpg" alt="Image 112" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=72"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-72.jpg" alt="Image 72" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=131"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-131.jpg" alt="Image 131" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=233"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-233.jpg" alt="Image 233" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=488"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-488.jpg" alt="Image 488" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=249"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-249.jpg" alt="Image 249" width="120" height="80" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=272"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-272.jpg" alt="Image 272" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=356"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-356.jpg" alt="Image 356" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=393"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-393.jpg" alt="Image 393" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=234"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-234.jpg" alt="Image 234" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=435"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-435.jpg" alt="Image 435" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=450"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-450.jpg" alt="Image 450" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=485"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-485.jpg" alt="Image 485" width="120" height="80" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=60"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-60.jpg" alt="Image 60" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=502"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-502.jpg" alt="Image 502" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=753"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-753.jpg" alt="Image 753" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=822"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-822.jpg" alt="Image 822" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=951"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-951.jpg" alt="Image 951" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=960"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-960.jpg" alt="Image 960" width="120" height="80" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=85"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-85.jpg" alt="Image 85" width="120" height="80" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=199"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-199.jpg" alt="Image 199" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=653"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-653.jpg" alt="Image 653" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=194"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-194.jpg" alt="Image 194" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=164"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-164.jpg" alt="Image 164" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=89"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-89.jpg" alt="Image 89" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=231"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-231.jpg" alt="Image 231" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=240"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-240.jpg" alt="Image 240" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=263"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-263.jpg" alt="Image 263" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=685"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-685.jpg" alt="Image 685" width="80" height="120" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=331"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-331.jpg" alt="Image 331" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=334"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-334.jpg" alt="Image 334" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=337"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-337.jpg" alt="Image 337" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=389"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-389.jpg" alt="Image 389" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=537"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-537.jpg" alt="Image 537" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=570"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-570.jpg" alt="Image 570" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=582"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-582.jpg" alt="Image 582" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=197"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-197.jpg" alt="Image 197" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=655"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-655.jpg" alt="Image 655" width="80" height="120" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=660"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-660.jpg" alt="Image 660" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=108"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-108.jpg" alt="Image 108" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=697"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-697.jpg" alt="Image 697" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=710"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-710.jpg" alt="Image 710" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=747"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-747.jpg" alt="Image 747" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=705"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-705.jpg" alt="Image 705" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=776"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-776.jpg" alt="Image 776" width="80" height="120" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Amazon%202010-03&amp;amp;photo=832"&gt;&lt;img src="http://0pointer.de/photos/galleries/Amazon%202010-03/thumbs/img-832.jpg" alt="Image 832" width="80" height="120" /&gt;&lt;/a&gt;
&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 04 Apr 2010 00:59:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-04-04:/blog/photos/amazon2.html</guid><category>photos</category></item><item><title>Down the Amazon</title><link>https://0pointer.net/blog/photos/amazon.html</link><description>
                
&lt;p&gt;After &lt;a href="http://0pointer.de/blog/projects/bossa2010.html"&gt;BOSSA in
Manaus/Brazil&lt;/a&gt; we took a very enjoyable boat trip down the Amazon, to
Santar&amp;eacute;m and particularly Alter do Ch&amp;atilde;o, a ridiculously amazing
island paradise with glaring white sand in the middle of the jungle:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/tapajos2"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/tapajos2-gimped-small.jpeg" width="1024" height="188" alt="Tapajos 2" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The town is located on the Tapaj&amp;oacute;s River:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/tapajos1"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/tapajos1-gimped-small.jpeg" width="1024" height="155" alt="Tapajos 1" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/tapajos3"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/tapajos3-gimped-small.jpeg" width="1024" height="184" alt="Tapajos 3" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Up the river you find the Tapaj&amp;oacute;s National Forest:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/tapajos4"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/tapajos4-gimped-small.jpeg" width="1024" height="231" alt="Tapajos 4" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there we went on to S&amp;atilde;o Lu&amp;iacute;s, a beautiful old colonial town:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/saoluis1"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/saoluis1-gimped-small.jpeg" width="1024" height="168" alt="Sao Luis 1" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/saoluis3"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/saoluis3-gimped-small.jpeg" width="1024" height="255" alt="Sao Luis 3" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/saoluis4"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/saoluis4-gimped-small.jpeg" width="1024" height="172" alt="Sao Luis 4" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/saoluis2"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/saoluis2-gimped-small.jpeg" width="1024" height="288" alt="Sao Luis 2" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A windy and wet sailing catamaran ride from S&amp;atilde;o Lu&amp;iacute;s you find Alc&amp;acirc;ntara, another old colonial town, now partly in ruins and deserted:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/alcantara1"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/alcantara1-gimped-small.jpeg" width="1024" height="159" alt="Alcantara 1" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/alcantara2"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/alcantara2-gimped-small.jpeg" width="1024" height="186" alt="Alcantara 2" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/alcantara3"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/alcantara3-gimped-small.jpeg" width="1024" height="151" alt="Alcantara 3" /&gt;&lt;/a&gt;&lt;/p&gt;



        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 03 Apr 2010 22:25:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-04-03:/blog/photos/amazon.html</guid><category>photos</category></item><item><title>Public Service Announcement: Beware of rsvg_term()!</title><link>https://0pointer.net/blog/projects/beware-of-rsvg-term.html</link><description>
                
&lt;p&gt;As a short followup on &lt;a href="http://0pointer.de/blog/projects/beware-of-xmlCleanupParser"&gt;an older blog posting of mine&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;So you are using librsvg's &lt;tt&gt;rsvg_term()&lt;/tt&gt; in your code?  If so then
you are probably misusing it and triggering crashes in PulseAudio related code.
The same way everybody should stop using libxml2's &lt;tt&gt;xmlCleanupParser()&lt;/tt&gt;
call, stop using &lt;tt&gt;rsvg_term()&lt;/tt&gt;! It's really hard to use it correctly,
and uneeded anyway. &lt;a href="https://bugzilla.gnome.org/show_bug.cgi?id=592100"&gt;Also see this bug
report.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 23 Mar 2010 21:29:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-03-23:/blog/projects/beware-of-rsvg-term.html</guid><category>projects</category></item><item><title>Bossa 2010/Manaus Slides</title><link>https://0pointer.net/blog/projects/bossa2010.html</link><description>
                
&lt;p&gt;The slides for my talk about the audio infrastructure of Linux mobile
devices at &lt;a href="http://bossaconference.indt.org/"&gt;BOSSA 2010&lt;/a&gt; in Manaus/Brazil &lt;a href="http://0pointer.de/public/pulse-bossa2010.pdf"&gt;are now available
online&lt;/a&gt;. They are terse (as usual), and the most interesting stuff is
probably in what I said, and not so much in what I wrote in those slides.  But
nonetheless I believe this might still be quite interesting for attendees as
well as non-attendees.&lt;/p&gt;

&lt;p&gt;The talk focuses on the audio architecture of the Nokia N900 and the Palm
Pre, and of course particularly their use of &lt;a href="http://pulseaudio.org"&gt;PulseAudio&lt;/a&gt; for all things audio. I analyzed
and compared their patch sets to figure out what their priorities are, what we
should move into PulseAudio mainline, and what should better be left in their
private patch sets.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 09 Mar 2010 19:04:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-03-09:/blog/projects/bossa2010.html</guid><category>projects</category></item><item><title>Measure Your Sound Card!</title><link>https://0pointer.net/blog/projects/decibel-data.html</link><description>
                #nocomments y

&lt;p&gt;In recent versions &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt;
integrates the &lt;a href="http://people.redhat.com/alexl/files/why-alsa-sucks.png"&gt;numerous mixer
elements ALSA exposes&lt;/a&gt; into one single powerful slider which tries to make
the best of the granularity and range of the hardware and extends that in
software so that we can provide an equally powerful slider on all systems.
That means if your hardware only supports a limited volume range (many
integrated USB speakers for example cannot be completely muted with the
hardware volume slider), limited granularity (some hardware sliders only have 8
steps or so), or no per-channel volumes (many sound cards have a single slider
that covers all channels), then PulseAudio tries its best to make use of the
next hardware volume slider in the pipeline to compensate for that, and so on,
finally falling back to software for everything that cannot be done in
hardware. &lt;a href="http://pulseaudio.org/wiki/PulseAudioStoleMyVolumes"&gt;This is
explained in more detail here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now this algorithm depends on that we know the actual attenuation factors
(factors like that are usually written in units of dB which is why I will call
this the "dB data" from now on) of the hardware volume controls. Thankfully
ALSA includes that information in its driver interfaces. However for some
hardware this data is not reliable. For example, one of my own cards (a
Terratec Aureon 5.1 MkII USB) contains invalid dB data in its USB descriptor
and ALSA passes that on to PulseAudio. The effect of that is that the
PulseAudio volume control behaves very weirdly for this card, in a way that the
volume "jumps" and changes in unexpected ways (or doesn't change at all in some
ranges!) when you slowly move the slider, or that the volume is completely
muted over large ranges of the slider where it should not be. Also this breaks the
&lt;i&gt;flat volume&lt;/i&gt; logic in PulseAudo, to the result that playing one stream
(let's say a music stream) and then adding a second one (let's say an event
sound) might incorrectly attenuate the first one (i.e. whenever you play an
event sound the music changes in volume).&lt;/p&gt;

&lt;p&gt;Incorrect dB data is not a new problem. However PulseAudio is the first
application that actually depends on the correctness of this data. Previously
the dB info was shown as auxiliary information in some volume controls, and
only noticed and understood by very few, technical people. It was not used for
further calculations.&lt;/p&gt;

&lt;p&gt;Now, the reasons I am writing this blog posting are firstly to inform you
about this type of bug and the results it has on the logic PulseAudio
implements, and secondly (and more importantly) to point you to &lt;a href="http://pulseaudio.org/wiki/BadDecibel"&gt;this little Wiki page&lt;/a&gt; I wrote
that explains how to verify if this is indeed a problem on your card (in case
you are experiencing any of the symptoms mentioned above) and secondly what to
do to improve the situation, and how to get correct dB data that can be
included as quirk in your driver.&lt;/p&gt;

&lt;p&gt;Thank you for your attention.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 24 Feb 2010 01:49:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-02-24:/blog/projects/decibel-data.html</guid><category>projects</category></item><item><title>Horizontal Panoramas Are So 2009!</title><link>https://0pointer.net/blog/photos/brussels-cathedral.html</link><description>
                
&lt;p&gt;Horizontal panoramas are so 2009 -- which is why I now give you the &lt;i&gt;vertical panorama&lt;/i&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/cathedral"&gt;&lt;img style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/cathedral-gimped-small.jpeg" width="1024" height="266" alt="Brussels Cathedral" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if I wasn't too stupid to hold my camera steady shooting upwards, this could actually have been a really good picture.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 21 Feb 2010 02:31:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-02-21:/blog/photos/brussels-cathedral.html</guid><category>photos</category></item><item><title>Speaker Setup</title><link>https://0pointer.net/blog/projects/speaker-setup.html</link><description>
                
&lt;p&gt;While tracking down some surround sound related bugs I was missing a speaker
setup and testing utility. So I decided to do something about it and I present you &lt;a href="http://git.0pointer.de/?p=gnome-speaker-setup.git"&gt;gnome-speaker-setup&lt;/a&gt;:&lt;/p&gt;

&lt;img src="http://0pointer.de/public/gnome-speaker-setup.png" width="729" height="736" alt="gnome-speaker-setup" /&gt;

&lt;p&gt;The tool should be very robust and even deal with the weirdest channel
mappings. OTOH the artwork is not really good and appropriate. But I hope it still shows some resemblance to &lt;a href="http://people.fedoraproject.org/~hadess/gnome-volume-control/multi-speaker/drivers1.gif"&gt;other&lt;/a&gt;
&lt;a href="http://people.fedoraproject.org/~hadess/gnome-volume-control/multi-speaker/3.jpg"&gt;UIs&lt;/a&gt;
of this type. If you are an artist wand want to contribute better artwork make
sure to go through the &lt;a href="http://live.gnome.org/GnomeArt/ArtRequests/"&gt;Gnome Art Requests&lt;/a&gt; page,
and more specifically &lt;a href="http://live.gnome.org/GnomeArt/ArtRequests/issue22"&gt;this particular
request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This (or something like it) will hopefully and eventually end up in some way
or another in gnome-media. Until that day comes I'll maintain this tool independently.&lt;/p&gt;

&lt;p&gt;To compile this you need a recent &lt;a href="http://live.gnome.org/Vala"&gt;Vala&lt;/a&gt; and &lt;a href="http://0pointer.de/lennart/projects/libcanberra/"&gt;libcanberra
0.23&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 21 Feb 2010 00:58:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-02-21:/blog/projects/speaker-setup.html</guid><category>projects</category></item><item><title>India, 360 Degrees at a Time, Part Seven</title><link>https://0pointer.net/blog/photos/india-360-at-a-time-7.html</link><description>
                
&lt;p&gt;Here's the seventh and &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-1.html"&gt;final&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-2.html"&gt;part&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-3.html"&gt;of&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-4.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-5.html"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-6.html"&gt;series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the grandest sights in Delhi is &lt;a href="http://en.wikipedia.org/wiki/Humayun%27s_Tomb"&gt;Humayun's tomb&lt;/a&gt;, a predecessor of the greatest mausoleum of them all, the &lt;a href="http://0pointer.de/static/tajmahal2.html"&gt;Taj Mahal&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/delhi3"&gt;&lt;img alt="Humayun's Tomb" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/delhi3-gimped-small.jpeg" width="1024" height="174" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A little bit further down a view on the garden:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/delhi4"&gt;&lt;img alt="Humayun's Tomb" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/delhi4-gimped-small.jpeg" width="1024" height="177" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From a different corner:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/delhi2"&gt;&lt;img alt="Humayun's Tomb" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/delhi2-gimped-small.jpeg" width="1024" height="159" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll finish with our last panorama that shows the courtyard the &lt;a href="http://en.wikipedia.org/wiki/Jama_Masjid,_Delhi"&gt;Jama Masjid&lt;/a&gt; of Old Delhi:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/delhi5"&gt;&lt;img alt="Jama Masjid" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/delhi5-gimped-small.jpeg" width="1024" height="183" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all panoramas from this trip. Thanks for your interest.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 19 Jan 2010 21:43:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-01-19:/blog/photos/india-360-at-a-time-7.html</guid><category>photos</category></item><item><title>India, 360 Degrees at a Time, Part Six</title><link>https://0pointer.net/blog/photos/india-360-at-a-time-6.html</link><description>
                
&lt;p&gt;Here's the sixth &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-1.html"&gt;part&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-2.html"&gt;of&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-3.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-4.html"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-5.html"&gt;series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Leaving Jodhpur we continued our journey to &lt;a href="http://en.wikipedia.org/wiki/Jaisalmer"&gt;Jaisalmer&lt;/a&gt;, a sand castle of a town in the &lt;a href="http://en.wikipedia.org/wiki/Thar_Desert"&gt;Thar desert&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/jaisalmer2"&gt;&lt;img alt="Jaisalmer" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/jaisalmer2-gimped-small.jpeg" width="1024" height="213" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the vicinity of Jaisalmer you'll find cliche sand dunes like you'd expect from a grown-up desert:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/jaisalmer1"&gt;&lt;img alt="Jaisalmer" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/jaisalmer1-gimped-small.jpeg" width="1024" height="194" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our next station after a long, cold and dusty train ride was &lt;a href="http://en.wikipedia.org/wiki/Delhi"&gt;Delhi&lt;/a&gt;. The principal mosque of Old Delhi is the &lt;a href="http://en.wikipedia.org/wiki/Jama_Masjid,_Delhi"&gt;Jama Masjid&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/delhi1"&gt;&lt;img alt="Jama Masjid" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/delhi1-gimped-small.jpeg" width="1024" height="183" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for now, tomorrow I'll post the rest of my panoramas from this trip, all from Delhi.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 18 Jan 2010 22:14:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-01-18:/blog/photos/india-360-at-a-time-6.html</guid><category>photos</category></item><item><title>India, 360 Degrees at a Time, Part Five</title><link>https://0pointer.net/blog/photos/india-360-at-a-time-5.html</link><description>
                
&lt;p&gt;Here's the fourth part &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-1.html"&gt;of&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-2.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-3.html"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-4.html"&gt;series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After Udaipur the next stop on our trip was &lt;a href="http://en.wikipedia.org/wiki/Jodhpur"&gt;Jodhpur&lt;/a&gt;, the blue city. Which is called that way due of the blue colour of many of its houses:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/jodhpur2"&gt;&lt;img alt="Jodhpur" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/jodhpur2-gimped-small.jpeg" width="1024" height="159" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On a hill next to &lt;a href="http://en.wikipedia.org/wiki/Mehrangarh_Fort"&gt;Mehrangarh Fort&lt;/a&gt;, one of the biggest Forts in India (the big sand castle on the hill in the panorama above), you find the &lt;a href="http://en.wikipedia.org/wiki/Jaswant_Thada"&gt;Jaswant Thada&lt;/a&gt;, a memorial of the Maharajas of Jodhpur:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/jodhpur1"&gt;&lt;img alt="Jodhpur" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/jodhpur1-gimped-small.jpeg" width="1024" height="235" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside the fort you'll find highly decorated courtyards:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/jodhpur3"&gt;&lt;img alt="Jodhpur" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/jodhpur3-gimped-small.jpeg" width="1024" height="247" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for Jodhpur, tomorrow I'll post more panoramas, from other stops of our trip.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 17 Jan 2010 18:43:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-01-17:/blog/photos/india-360-at-a-time-5.html</guid><category>photos</category></item><item><title>India, 360 Degrees at a Time, Part Four</title><link>https://0pointer.net/blog/photos/india-360-at-a-time-4.html</link><description>
                
&lt;p&gt;Here's the fourth part of &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-1.html"&gt;my&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-2.html"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-3.html"&gt;series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After Hampi we went to Bangalore to attend &lt;a href="http://foss.in/"&gt;foss.in&lt;/a&gt;. (Fantastic conference, btw. The concerts at
the venue are unparalleled.) From there we flew up to &lt;a href="http://en.wikipedia.org/wiki/Udaipur"&gt;Udaipur&lt;/a&gt;, in Rajasthan. Udaipur
is (among other things) famous for being the place where the central scenes of &lt;a href="http://en.wikipedia.org/wiki/Octopussy"&gt;Octopussy&lt;/a&gt; were filmed.
Octopussy's famous white palace is on Jagniwas Island in Lake Pichola:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/udaipur1"&gt;&lt;img alt="Udaipur" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/udaipur1-gimped-small.jpeg" width="1024" height="70" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This panorama was taken from another island in the lake, Jagmandir Island, which is visible in the following shot on the left:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/udaipur2"&gt;&lt;img alt="Udaipur" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/udaipur2-gimped-small.jpeg" width="1024" height="150" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Udaipur's scenery, seen from the Maharaja's City Palace down onto Pichola Lake:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/udaipur3"&gt;&lt;img alt="Udaipur" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/udaipur3-gimped-small.jpeg" width="1024" height="175" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for Udaipur, tomorrow I'll post more panoramas, from other stops of our trip.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 16 Jan 2010 03:10:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-01-16:/blog/photos/india-360-at-a-time-4.html</guid><category>photos</category></item><item><title>Announcing udev-browse</title><link>https://0pointer.net/blog/projects/udev-browse.html</link><description>
                
&lt;p&gt;It's easy to get lost in &lt;tt&gt;/sys&lt;/tt&gt; and not much fun typing long
&lt;tt&gt;udevadm info&lt;/tt&gt; command lines all the time. Today, when I had enough of
that I sat down and spent an hour to write a little UI for exploring the
udev/sysfs tree: &lt;tt&gt;udev-browse&lt;/tt&gt;. I wrote it for my own use, but I am quite sure I am not the only
one who wants a little bit simpler access to the device tree. &lt;a href="http://git.0pointer.de/?p=udev-browse.git"&gt;So here you go.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And since everybody loves screenshots here you go:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/udev-browse"&gt;&lt;img src="http://0pointer.de/public/udev-browse" width="931" height="728" alt="udev-browse" style="border: 0px" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Two usability hints: if you run &lt;tt&gt;udev-browse&lt;/tt&gt; from a directory in
&lt;tt&gt;/sys&lt;/tt&gt; &lt;tt&gt;udev-browse&lt;/tt&gt; will automatically present the device of
that path on startup. And if you know the name of a device you can just type it
into the device listbox (which is focussed by default). The usual Gtk+ live
search will then find you the right entry right-away. It's pretty nifty.&lt;/p&gt;

&lt;p&gt;It's written in Vala with minimal dependencies.&lt;/p&gt;

&lt;p&gt;I want to keep the maintainership burden for this minimal. So no tarballs, no releases, and I won't reply to your emails regarding this tool, unless they include a good, clean, git formatted patch. Thank you for your understanding.&lt;/p&gt;

&lt;p&gt;Anyone wants to package this for Fedora? I'd be very thankful if someone would pick it up.&lt;/p&gt;

&lt;p&gt;Have fun.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 16 Jan 2010 02:19:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-01-16:/blog/projects/udev-browse.html</guid><category>projects</category></item><item><title>India, 360 Degrees at a Time, Part Three</title><link>https://0pointer.net/blog/photos/india-360-at-a-time-3.html</link><description>
                
&lt;p&gt;Here's the third part of my &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-1.html"&gt;ongoing&lt;/a&gt; &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-2.html"&gt;series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Still in Hampi here's another 360 from the Hills in Hampi down to the Achyutaraya Temple:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/hampi5"&gt;&lt;img alt="Matanga Hill" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/hampi5-gimped-small.jpeg" width="1024" height="234" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A little further down, before dawn, here's a shot from the rocky path leading up the hill:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/hampi6"&gt;&lt;img alt="Matanga Hill" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/hampi6-gimped-small.jpeg" width="1024" height="250" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our last picture for today is a view down from Hemakuta Hill which is
covered with old temples and other structures. In the middle you'll see the
large &lt;a href="http://en.wikipedia.org/wiki/Virupaksha_Temple"&gt;Virupaksha
Temple&lt;/a&gt; which is still in full use. In that temple you'll find an amazing &lt;a href="http://en.wikipedia.org/wiki/Camera_obscura"&gt;camera obscura&lt;/a&gt;, a
physics teacher's dream that projects the temple tower onto a wall (&lt;a href="http://0pointer.de/photos/?gallery=India%20Karnataka%202009-11&amp;amp;photo=871"&gt;projection&lt;/a&gt;,
&lt;a href="http://0pointer.de/photos/?gallery=India%20Karnataka%202009-11&amp;amp;photo=865"&gt;subject&lt;/a&gt;, more interesting in reality. Really.)&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/hampi8"&gt;&lt;img alt="Hemakuta Hill" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/hampi8-gimped-small.jpeg" width="1024" height="155" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for Hampi, tomorrow I'll post more panoramas, from other stops of our trip.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 14 Jan 2010 23:47:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-01-14:/blog/photos/india-360-at-a-time-3.html</guid><category>photos</category></item><item><title>Public Service Announcement: Beware of xmlCleanupParser()!</title><link>https://0pointer.net/blog/projects/beware-of-xmlCleanupParser.html</link><description>
                
&lt;p&gt;Everyone and his dog seem to call libxml2's xmlCleanupParser() at
inappropriate places. For example &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=532307"&gt;Empathy&lt;/a&gt; does it,
and Abiword does it too. &lt;a href="http://www.google.com/codesearch?q=xmlCleanupParser"&gt;Google Code Search&lt;/a&gt; seems to reveal at least Inkscape and Dia
do it as well.&lt;/p&gt;

&lt;p&gt;So, please, if your project links against libxml2 verify that it calls
xmlCleanupParser() only once, and right before exiting! And if it calls it more
often or somewhere else, then please fix that!&lt;/p&gt;

&lt;p&gt;For more information &lt;a href="http://lists.fedoraproject.org/pipermail/devel/2010-January/129117.html"&gt;see
my post on fedora-devel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for your time.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 13 Jan 2010 00:29:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-01-13:/blog/projects/beware-of-xmlCleanupParser.html</guid><category>projects</category></item><item><title>India, 360 Degrees at a Time, Part Two</title><link>https://0pointer.net/blog/photos/india-360-at-a-time-2.html</link><description>
                
&lt;p&gt;Here's the second part of my &lt;a href="http://0pointer.de/blog/photos/india-360-at-a-time-1.html"&gt;ongoing series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Climbing down the hills, on the banks of the Tungabhadra river you find people washing laundry and bathing, and &lt;a href="http://0pointer.de/photos/?gallery=India%20Karnataka%202009-11&amp;amp;photo=1434"&gt;coracles&lt;/a&gt; waiting to be used for a trip through the river.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/hampi2"&gt;&lt;img alt="Tungabhadra River" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/hampi2-gimped-small.jpeg" width="1024" height="146" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The greatest of the ancient temples in Hampi is the &lt;a href="http://en.wikipedia.org/wiki/Vijayanagara#Vittala_Temple"&gt;Vitthala Temple&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/hampi3"&gt;&lt;img alt="Vitthala Temple" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/hampi3-gimped-small.jpeg" width="1024" height="162" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set in in lush green scenery you find the Achyutaraya Temple, which you already might have seen, from above, in &lt;a href="http://0pointer.de/static/hampi7"&gt;yesterday's series&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/hampi4"&gt;&lt;img alt="Achyutaraya Temple" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/hampi4-gimped-small.jpeg" width="1024" height="164" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it for today, tomorrow I'll post more panoramas, both from Hampi and other stops of our trip.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 12 Jan 2010 19:05:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-01-12:/blog/photos/india-360-at-a-time-2.html</guid><category>photos</category></item><item><title>India, 360 Degrees at a Time, Part One</title><link>https://0pointer.net/blog/photos/india-360-at-a-time-1.html</link><description>
                
&lt;p&gt;Yes, I won't spare you my panorama shots from my recent trip to India. After
arriving in Goa &lt;a href="http://en.wikipedia.org/wiki/Badami"&gt;Badami&lt;/a&gt; was
our next stop. It's a very pretty little town in northern Karnataka, and here's
a panorama shot from the entrance of the town's famous caves:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/badami1"&gt;&lt;img alt="Badami" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/badami1-gimped-small.jpeg" width="1024" height="324" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next step was one of the most amazing places on earth, &lt;a href="http://en.wikipedia.org/wiki/Hampi"&gt;Hampi&lt;/a&gt; in central Karnataka. It
is definitely one of the greatest sights I have ever seen, and I guess I can
say I have seen quite a few in my life. A vast landscape of hills covered in
boulders, lush mango and banana plantations, rice fields, dotted with age-old
temples and impressive ruins. Locals crossing the river in &lt;a href="http://0pointer.de/photos/?gallery=India%20Karnataka%202009-11&amp;amp;photo=1434"&gt;coracles&lt;/a&gt; that look
like they belong in a time centuries ago. Women washing colourful laundry in
the river, pilgrims wading across the river in their black clothes.  An India
that delivers every bit of that promise it makes to its visitors.  The ruins
rival the grand sites in Greece and the landscape sometimes looks like a
Crysis in-game scene.&lt;/p&gt;

&lt;p&gt;Taken from one of the hills in Hampi this is the sunset:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/hampi1"&gt;&lt;img alt="Hampi Sunset" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/hampi1-gimped-small.jpeg" width="1024" height="122" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then, the next day at dawn make your way up the hills again and you can get an even greater view on the whole scenery:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/hampi7"&gt;&lt;img alt="Hampi Dawn" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/hampi7-gimped-small.jpeg" width="1024" height="200" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it for today, tomorrow I'll post more panoramas, both from Hampi and other stops of our trip.&lt;/p&gt;

&lt;p&gt;Also, if you haven't seen them yet, don't miss &lt;a href="http://0pointer.de/blog/photos/india-again.html"&gt;my panoramas from my India trip the year before&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 11 Jan 2010 20:56:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2010-01-11:/blog/photos/india-360-at-a-time-1.html</guid><category>photos</category></item><item><title>Jodhpur After Dark</title><link>https://0pointer.net/blog/photos/jodhpur.html</link><description>
                
&lt;div&gt; &lt;a href="http://0pointer.de/photos/?gallery=India%20Rajasthan%202009-12&amp;amp;photo=1536"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%20Rajasthan%202009-12/lq/img-1536.jpg" width="320" height="480" alt="Jodhpur" /&gt;&lt;/a&gt;&amp;nbsp;&lt;a href="http://0pointer.de/photos/?gallery=India%20Rajasthan%202009-12&amp;amp;photo=1505"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%20Rajasthan%202009-12/lq/img-1505.jpg" width="320" height="480" alt="Jodhpur" /&gt;&lt;/a&gt;&amp;nbsp;&lt;a href="http://0pointer.de/photos/?gallery=India%20Rajasthan%202009-12&amp;amp;photo=1526"&gt;&lt;img src="http://0pointer.de/photos/galleries/India%20Rajasthan%202009-12/lq/img-1526.jpg" width="320" height="480" alt="Jodhpur" /&gt;&lt;/a&gt; &lt;/div&gt;

&lt;p&gt;India is a weird and beautiful country. And I am too lazy to retouch my photos.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 31 Dec 2009 16:33:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-12-31:/blog/photos/jodhpur.html</guid><category>photos</category></item><item><title>On OOM</title><link>https://0pointer.net/blog/projects/on-oom.html</link><description>
                
&lt;p&gt;Building on what &lt;a href="http://log.ometer.com/2008-02.html#4.2"&gt;Havoc
wrote two years ago about the fallacies of OOM safety (Out Of Memory) in user code&lt;/a&gt; I'd
like to point you to &lt;a href="http://article.gmane.org/gmane.comp.audio.jackit/19998"&gt;this little mail
I just posted to jack-devel&lt;/a&gt; which tries to give you the bigger picture.
Should be interesting for non-audio folks, too.&lt;/p&gt;

&lt;p&gt;Say &lt;b&gt;NO&lt;/b&gt; to OOM safety!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 13 Nov 2009 02:25:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-11-13:/blog/projects/on-oom.html</guid><category>projects</category></item><item><title>Public Service Announcement</title><link>https://0pointer.net/blog/projects/no-more-dmidecode.html</link><description>
                
&lt;p&gt;Folks! Since quite some time now the kernel exports the DMI machine
information below &lt;tt&gt;/sys/class/dmi/id/&lt;/tt&gt;. You may stop now parsing the
output of &lt;tt&gt;dmidecode&lt;/tt&gt; thus depending on external tools and privileged
code.&lt;/p&gt;

&lt;p&gt;For example, to read your BIOS vendor string all you need to do is this:&lt;/p&gt;

&lt;pre&gt;$ read bv &amp;lt; /sys/class/dmi/id/bios_vendor
$ echo $bv&lt;/pre&gt;

&lt;p&gt;Which is of course much simpler, and cleaner, and safer than anything involving &lt;tt&gt;dmidecode&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for your time!&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 06 Nov 2009 11:14:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-11-06:/blog/projects/no-more-dmidecode.html</guid><category>projects</category></item><item><title>Ubuntu doesn't get it</title><link>https://0pointer.net/blog/projects/pa-in-ubuntu.html</link><description>
                #nocomments yes

&lt;p&gt;&amp;lt;rant&amp;gt;&lt;/p&gt;

&lt;p&gt;So in the past Ubuntu packaged PA in a way that, let's say, was not
exactly optimal. I thought they'd gotten around fixing things since then. Turns
out they didn't. Seems in their upcoming release they again did some &lt;a href="https://bugs.launchpad.net/ubuntu/+source/pulseaudio/+bug/452458"&gt;genius
thing to make PA on Ubuntu perform worse than it could&lt;/a&gt;. The Ubuntu kernel
contains all kind of closed-source and other crap to no limits, but backporting
a tiny patch that is blessed and merged upstream and in Fedora for ages, that
they won't do. Gah.&lt;/p&gt;

&lt;p&gt;And it doesn't stop there. &lt;a href="http://bazaar.launchpad.net/~ubuntu-core-dev/pulseaudio/ubuntu/annotate/head%3A/debian/patches/0053-fix-sigsegv-module-bluetooth-device.patch"&gt;This
patch is an outright insult&lt;a /&gt;. &lt;a href="http://bazaar.launchpad.net/~ubuntu-core-dev/pulseaudio/ubuntu/annotate/head%3A/debian/patches/0090-disable-flat-volumes.patch"&gt;This
is disappointing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Madness. Not good, Ubuntu, really not good! And I'll get all the
complaints for this f**up again. Thanks!&lt;/p&gt;

&lt;p&gt;/me is disappointed. Ubuntu, you really can do better than this.&lt;/p&gt;

&lt;p&gt;&amp;lt;/rant&amp;gt;&lt;/p&gt;



        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 19 Oct 2009 03:13:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-10-19:/blog/projects/pa-in-ubuntu.html</guid><category>projects</category></item><item><title>The Times They Are A-Changin'</title><link>https://0pointer.net/blog/projects/win7-plays-catchup.html</link><description>
                #nocomments y

&lt;p&gt;Kinda fun &lt;a href="http://channel9.msdn.com/shows/Going+Deep/Elliot-H-Omiya-Larry-Osterman-and-Frank-Yerrace-Inside-Windows-7-Audio-Stack/"&gt;watching
this video&lt;/a&gt;. As it seems the big new features of the Windows 7 audio stack are the
ability to move streams while they are live, to do role-based policy routing,
and to pause streams during phone calls. Hah! That's so yesterday! &lt;a href="http://pulseaudio.org/"&gt;A certain sound server I happen to know very
well&lt;/a&gt; has been supporting this for a longer time already, and you can even
buy that logic in &lt;a href="http://maemo.nokia.com/n900/"&gt;various consumer
products&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Nice to know that in some areas of the audio stack it's not us who need to
play catch-up with them, but they are the ones who need to play catch-up with
us.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 18 Oct 2009 19:33:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-10-18:/blog/projects/win7-plays-catchup.html</guid><category>projects</category></item><item><title>In The Press II</title><link>https://0pointer.net/blog/projects/cio-lpc-2k9.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.cio.com.au/article/320807/open_source_identity_pulseaudio_creator_lennart_poettering"&gt;CIO has an interview with me.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 10 Oct 2009 16:38:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-10-10:/blog/projects/cio-lpc-2k9.html</guid><category>projects</category></item><item><title>In The Press</title><link>https://0pointer.net/blog/projects/lwn-lpc-2k9.html</link><description>
                
&lt;p&gt;&lt;a href="http://lwn.net/Articles/355542/"&gt;LWN covers Paul's and my talk at the Audio MC at LPC, Portland.&lt;/a&gt; (Subscribers only for now)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; &lt;a href="http://lwn.net/SubscriberLink/355542/e354c2205dade9e4/"&gt;Here's a free
subscriber link.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 07 Oct 2009 20:29:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-10-07:/blog/projects/lwn-lpc-2k9.html</guid><category>projects</category></item><item><title>LPC Audio BoF Notes</title><link>https://0pointer.net/blog/projects/audio-bof-notes.html</link><description>
                
&lt;p&gt;Here are some very short notes from the Audio BoF
at the &lt;a href="http://linuxplumbersconf.org/2009/"&gt;Linux Plumbers
Conference&lt;/a&gt; in Portland two weeks ago. Sorry for the delay!&lt;/p&gt;

&lt;p&gt;Biggest issue discussed was audio routing. On embedded devices this gets
more complex each day, and there are a lot of open questions on the desktop,
too. Different DSP scenarios; how do mixer controls match up with PCM streams
and jack sensing? How do we determine which volume control sliders that are in
the pipeline we are currently interested in? How does that relate to policy
decisions? Format to store audio routing in?&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://www.slimlogic.co.uk/?p=40"&gt;ALSA scenario subsystem&lt;/a&gt;
currently being worked on by Liam Girdwood and the folks at SlimLogic and
currently on its way to being integrated into ALSA proper hopefully helps us,
so that we can strip a lot of complexity related to the routing logic from
PulseAudio and move it into a lower level which naturally knows more about the
hardware's internal routing.&lt;/p&gt;

&lt;p&gt;Does it make sense for some apps to bypass the ALSA userspace layer and
to talk to the kernel drivers via ioctl()s directly?i (i.e. thus not depending on ALSA's
LISP intepreter, and a lot of other complexities)? Probably yes, but certainly
not in the short term future. Salsa? libsydney?&lt;/p&gt;

&lt;p&gt;Should the timing deviation estimation/interpolation be moved from
PulseAudio into the kernel? Might be a good idea. Particularly interesting
when we try to to monitor not only the system and audio clocks, but the video
output and particularly the video input (i.e. video4linux) clocks, too. A
unified kernel-based timing system has advantages in accuracy, allows better
handling of (pseudo-) atomic timing snapshots, and would centralize timing
handling not only between different applications (PA and JACK) but also
between different subsystems.  Problem: current timing stuff in PulseAudio
might be a bit too homegrown for moving it 1:1 into the kernel. Also, depends
on FP. Needs someone to push this. Apple does the clock handling in the
kernel. How does this relate to ALSA's timer API?&lt;/p&gt;

&lt;p&gt;Seems Ubuntu is going to kill OSS pretty soon too, following Fedora's lead. Yay!&lt;/p&gt;

&lt;p&gt;And that's all I have. Should be the biggest points raised. Ping me if I
forgot something.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 07 Oct 2009 01:36:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-10-07:/blog/projects/audio-bof-notes.html</guid><category>projects</category></item><item><title>Latency Control</title><link>https://0pointer.net/blog/projects/latency-control.html</link><description>
                #nocomments yes

&lt;p&gt;An often asked question is how to properly talk to &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; from within applications where
latency matters. To answer that question once and for all I've &lt;a href="http://pulseaudio.org/wiki/LatencyControl"&gt;written this guide in our
Wiki&lt;/a&gt; that should light things up a little. If you are interested in audio
latency in PA, want to know how to minimize CPU usage and power consumption or
how to maximize drop-out safety make sure to read this!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 06 Oct 2009 20:49:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-10-06:/blog/projects/latency-control.html</guid><category>projects</category></item><item><title>Canonical,</title><link>https://0pointer.net/blog/projects/canonical-contributions.html</link><description>
                #nocomments y

&lt;p&gt;one small note: requiring &lt;a href="http://www.canonical.com/contributors"&gt;copyright assignment&lt;/a&gt; from
contributors, and putting your code in exotic VCSes that only a minority of
potential contributors know or are willing to use is not helpful for attracting
contributions -- right the contrary, it scares them away. Please fix that!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 05 Oct 2009 21:17:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-10-05:/blog/projects/canonical-contributions.html</guid><category>projects</category></item><item><title>Conferences</title><link>https://0pointer.net/blog/projects/lpc-bluez-maemo-2009.html</link><description>
                
&lt;p&gt;Last week I've been at the &lt;a href="http://linuxplumbersconf.org/2009/"&gt;Linux Plumbers Conference&lt;/a&gt; in
Portland. Like last year it kicked ass and proved again being one of the most
relevant Linux developer conferences (if not &lt;i&gt;the&lt;/i&gt; most relevant one). I
ran the Audio MC at the conference which was very well attended. The slides
for our &lt;a href="http://linuxplumbersconf.org/2009/program/"&gt;four talks in the
track are available online&lt;/a&gt;. (My own slides are probably a bit too terse
for most readers, the interesting stuff was in the talking, not the
reading...) Personally, for me the most interesting part was to see to which
degree Nokia actually adopted &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt;
in the N900.  While I was aware that Nokia was using it, I wasn't aware that
their use is as comprehensive as it turned out it is. And the industry
support from other companies is really impressive too. After the main track we
had a BoF session, which notes I'll post a bit later. Many thanks to Paul,
Jyri, Pierre for their great talks. Unfortunately, Palm, the only manufacturer
who is actually already shipping a phone with PulseAudio didn't send anyone to
the conference who wanted to talk about that. Let's hope they'll eventually
learn that just throwing code over the wall is not how Open Source works.
Maybe they'll send someone to next year's LPC in Boston, where I hope to be
able to do the Audio MC again.&lt;/p&gt;

&lt;p&gt;Right now I am at the BlueZ Summit in Stuttgart. Among other things we have
been discussing how to improve Bluetooth Audio support in PulseAudio. I guess
one could say thet the Bluetooth support in PulseAudio is already one of its
highlights, in fact working better then the support on other OSes (yay, that's
an area where Linux Audio really shines!). So up next is better support for
allowing PA to receive A2DP audio, i.e. making PA act as if it was a Headset or
your hifi. Use case: send music from from your mobile to your desktop's hifi
speakers. (Actually this is already support in current BlueZ/PA versions, but
not easily accessible). Also Bluetooth headsets tend to support AC3 or MP3
decoding natively these days so we should support that in PA too. Codec
handling has been on the TODO list for PA for quite some time, for the SPDIF or
HDMI cases, and Bluetooth Audio is another reason why we really should have
that.&lt;/p&gt;

&lt;p&gt;Next week I'll be at the &lt;a href="http://wiki.maemo.org/Maemo_Summit_2009"&gt;Maemo Summit&lt;/a&gt; in Amsterdam.
Nokia kindly invited me. Unfortunately I was a bit too late to get a proper
talk accepted.  That said, I am sure if enough folks are interested we could do
a little ad-hoc BoF and find some place at the venue for it. If you have any
questions regarding PA just talk to me. The N900 uses PulseAudio for all things
audio so I am quite sure we'll have a lot to talk about.&lt;/p&gt;

&lt;p&gt;See you in Amsterdam!&lt;/p&gt;

&lt;p&gt;One last thing: Check out &lt;a href="http://colin.guthr.ie/2009/10/kde-plus-pulseaudio-does-not-equal-sucks/"&gt;Colin's
work to improve integration of PulseAudio and KDE&lt;/a&gt;!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 02 Oct 2009 16:57:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-10-02:/blog/projects/lpc-bluez-maemo-2009.html</guid><category>projects</category></item><item><title>Plumbers 2009 Audio Bof Thu, 10:00 am</title><link>https://0pointer.net/blog/projects/plumbers-audio-bof.html</link><description>
                
&lt;p&gt;Tomorrow, Thu 24th 10 am, there's going to be an Audio BoF at LPC Portland, Salon E. Don't miss it.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 24 Sep 2009 01:10:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-09-24:/blog/projects/plumbers-audio-bof.html</guid><category>projects</category></item><item><title>Skype</title><link>https://0pointer.net/blog/projects/skype.html</link><description>
                
&lt;p&gt;A quick update on Skype: the next Skype version will include native
PulseAudio support. And not only that but they even &lt;a href="http://0pointer.de/blog/projects/tagging-audio.html"&gt;tag their audio
streams properly&lt;/a&gt;. This enables PulseAudio to do fancy stuff like
automatically pausing your audio playback when you have a phone call. Good job!&lt;/p&gt;

&lt;p&gt;In some ways they are now doing a better job with integration in to the modern
audio landscape than some Free Software telephony applications!&lt;/p&gt;

&lt;p&gt;Unfortunately they didn't fix the biggest bug though: it's still not Free
Software!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 22 Sep 2009 19:51:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-09-22:/blog/projects/skype.html</guid><category>projects</category></item><item><title>More Mutrace</title><link>https://0pointer.net/blog/projects/mutrace2.html</link><description>
                
&lt;p&gt;Here's a list of quick updates on my &lt;a href="http://git.0pointer.de/?p=mutrace.git"&gt;&lt;tt&gt;mutrace&lt;/tt&gt;&lt;/a&gt; mutex profiler since
&lt;a href="http://0pointer.de/blog/projects/mutrace.html"&gt;my initial announcement two weeks ago&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;I added some special support for tracking down use of mutexes in realtime
threads. It's a very simple extension that -- if enabled -- checks on each
mutex operation wheter it is executed by a realtime thread or not. (--track-rt) The
output of a test run of this you can find in &lt;a href="http://lalists.stanford.edu/lad/2009/09/0116.html"&gt;this announcement on LAD&lt;/a&gt;.
Particularly interesting is that you can use this to track down which mutexes
are good candidates for priority inheritance.&lt;/p&gt;

&lt;p&gt;The mutrace tarball now also includes a companion tool &lt;tt&gt;matrace&lt;/tt&gt;
that can be used to track down memory allocation operations in realtime
threads. See the same lad announcement as above for example output of this
tool.&lt;/p&gt;

&lt;p&gt;With help from Boudewijn Rempt I added some compatibility code for
profiling C++/Qt apps with mutrace, which he already used &lt;a href="http://mail.kde.org/pipermail/kimageshop/2009-September/007471.html"&gt;for some&lt;/a&gt; &lt;a href="http://mail.kde.org/pipermail/kimageshop/2009-September/007470.html"&gt;interesting
profiling results&lt;/a&gt; on krita.&lt;/p&gt;

&lt;p&gt;Finally, after my comments on the locking hotspots in glib's type system,
Wim Taymans and Edward Hervey worked on turning the mutex-emulated rwlocks
into OS native ones with quite positive results, &lt;a href="https://bugzilla.gnome.org/show_bug.cgi?id=585375"&gt;for more information see this
bug&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As soon as &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=523553"&gt;my review request&lt;/a&gt; is fully processed mutrace will be available
in rawhide.&lt;/p&gt;

&lt;p&gt;A snapshot tarball of &lt;tt&gt;mutrace&lt;/tt&gt; &lt;a href="http://0pointer.de/public/mutrace-0.1.tar.gz"&gt;you may find here&lt;/a&gt;
(despite the name of the tarball that's just a snapshot, not the real release
0.1), for all those folks who are afraid of git, or don't have a current
autoconf/automake/libtool installed.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://lwn.net/Articles/352828/"&gt;Oh, and they named a unit after me.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 22 Sep 2009 19:38:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-09-22:/blog/projects/mutrace2.html</guid><category>projects</category></item><item><title>Measuring Lock Contention</title><link>https://0pointer.net/blog/projects/mutrace.html</link><description>
                
&lt;p&gt;When naively profiling multi-threaded applications the time spent waiting
for mutexes is not necessarily visible in the generated output. However lock
contention can have a big impact on the runtime behaviour of applications. On
Linux &lt;a href="http://valgrind.org/docs/manual/drd-manual.html"&gt;valgrind's
drd&lt;/a&gt; can be used to track down mutex contention. Unfortunately running
applications under valgrind/drd slows them down massively, often having the
effect of itself generating many of the contentions one is trying to track
down. Also due to its slowness it is very time consuming work.&lt;/p&gt;

&lt;p&gt;To improve the situation if have now written &lt;a href="http://git.0pointer.de/?p=mutrace.git"&gt;a mutex profiler called
&lt;tt&gt;mutrace&lt;/tt&gt;&lt;/a&gt;. In contrast to valgrind/drd it does not virtualize the
CPU instruction set, making it a lot faster. In fact, the hooks &lt;tt&gt;mutrace&lt;/tt&gt;
relies on to profile mutex operations should only minimally influence
application runtime. &lt;tt&gt;mutrace&lt;/tt&gt; is not useful for finding
synchronizations bugs, it is solely useful for profiling locks.&lt;/p&gt;

&lt;p&gt;Now, enough of this introductionary blabla. Let's have a look on the data
&lt;tt&gt;mutrace&lt;/tt&gt; can generate for you. As an example we'll look at
&lt;tt&gt;gedit&lt;/tt&gt; as a bit of a prototypical Gnome application. Gtk+ and the other
Gnome libraries are not really known for their heavy use of multi-threading,
and the APIs are generally not thread-safe (for a good reason). However,
internally subsytems such as &lt;tt&gt;gio&lt;/tt&gt; do use threading quite extensibly.
And as it turns out there are a few hotspots that can be discovered with
&lt;tt&gt;mutrace&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;
$ LD_PRELOAD=/home/lennart/projects/mutrace/libmutrace.so gedit
mutrace: 0.1 sucessfully initialized.
&lt;/pre&gt;

&lt;p&gt;gedit is now running and its mutex use is being profiled. For this example
I have now opened a file with it, typed a few letters and then quit the program
again without saving. As soon as gedit exits &lt;tt&gt;mutrace&lt;/tt&gt; will print the
profiling data it gathered to stderr. &lt;a href="http://0pointer.de/public/mutrace.txt"&gt;The full output you can see
here.&lt;/a&gt; The most interesting part is at the end of the generated output, a
breakdown of the most contended mutexes:&lt;/p&gt;

&lt;pre&gt;
mutrace: 10 most contended mutexes:

 Mutex #   Locked  Changed    Cont. tot.Time[ms] avg.Time[ms] max.Time[ms]       Type
      35   368268      407      275      120,822        0,000        0,894     normal
       5   234645      100       21       86,855        0,000        0,494     normal
      26   177324       47        4       98,610        0,001        0,150     normal
      19    55758       53        2       23,931        0,000        0,092     normal
      53      106       73        1        0,769        0,007        0,160     normal
      25    15156       70        1        6,633        0,000        0,019     normal
       4      973       10        1        4,376        0,004        0,174     normal
      75       68       62        0        0,038        0,001        0,004     normal
       9     1663       52        0        1,068        0,001        0,412     normal
       3   136553       41        0       61,408        0,000        0,281     normal
     ...      ...      ...      ...          ...          ...          ...        ...

mutrace: Total runtime 9678,142 ms.
&lt;/pre&gt;

&lt;p&gt;(Sorry, LC_NUMERIC was set to de_DE.UTF-8, so if you can't make sense of
all the commas, think &lt;tt&gt;s/,/./g&lt;/tt&gt;!)&lt;/p&gt;

&lt;p&gt;For each mutex a line is printed. The 'Locked' column tells how often the
mutex was locked during the entire runtime of about 10s. The 'Changed' column
tells us how often the owning thread of the mutex changed. The 'Cont.' column
tells us how often the lock was already taken when we tried to take it and we
had to wait. The fifth column tell us for how long during the entire runtime
the lock was locked, the sixth tells us the average lock time, and the seventh
column tells us the longest time the lock was held. Finally, the last column
tells us what kind of mutex this is (recursive, normal or otherwise).&lt;/p&gt;

&lt;p&gt;The most contended lock in the example above is #35. 275 times during the
runtime a thread had to wait until another thread released this mutex. All in
all more then 120ms of the entire runtime (about 10s) were spent with this
lock taken!&lt;/p&gt;

&lt;p&gt;In the full output we can now look up which mutex #35 actually is:&lt;/p&gt;

&lt;pre&gt;
Mutex #35 (0x0x7f48c7057d28) first referenced by:
	/home/lennart/projects/mutrace/libmutrace.so(pthread_mutex_lock+0x70) [0x7f48c97dc900]
	/lib64/libglib-2.0.so.0(g_static_rw_lock_writer_lock+0x6a) [0x7f48c674a03a]
	/lib64/libgobject-2.0.so.0(g_type_init_with_debug_flags+0x4b) [0x7f48c6e38ddb]
	/usr/lib64/libgdk-x11-2.0.so.0(gdk_pre_parse_libgtk_only+0x8c) [0x7f48c853171c]
	/usr/lib64/libgtk-x11-2.0.so.0(+0x14b31f) [0x7f48c891831f]
	/lib64/libglib-2.0.so.0(g_option_context_parse+0x90) [0x7f48c67308e0]
	/usr/lib64/libgtk-x11-2.0.so.0(gtk_parse_args+0xa1) [0x7f48c8918021]
	/usr/lib64/libgtk-x11-2.0.so.0(gtk_init_check+0x9) [0x7f48c8918079]
	/usr/lib64/libgtk-x11-2.0.so.0(gtk_init+0x9) [0x7f48c89180a9]
	/usr/bin/gedit(main+0x166) [0x427fc6]
	/lib64/libc.so.6(__libc_start_main+0xfd) [0x7f48c5b42b4d]
	/usr/bin/gedit() [0x4276c9]
&lt;/pre&gt;

&lt;p&gt;As it appears in this Gtk+ program the rwlock &lt;tt&gt;type_rw_lock&lt;/tt&gt;
(defined in glib's &lt;tt&gt;gobject/gtype.c&lt;/tt&gt;) is a hotspot. GLib's rwlocks are
implemented on top of mutexes, so an obvious attempt in improving this could
be to actually make them use the operating system's rwlock primitives.&lt;/p&gt;

&lt;p&gt;If a mutex is used often but only ever by the same thread it cannot starve
other threads. The 'Changed.' column lists how often a specific mutex changed
the owning thread. If the number is high this means the risk of contention is
also high. The 'Cont.' column tells you about contention that actually took
place.&lt;/p&gt;

&lt;p&gt;Due to the way &lt;tt&gt;mutrace&lt;/tt&gt; works we cannot profile mutexes that are
used internally in glibc, such as those used for synchronizing &lt;tt&gt;stdio&lt;/tt&gt;
and suchlike.&lt;/p&gt; &lt;p&gt;&lt;tt&gt;mutrace&lt;/tt&gt; is implemented entirely in userspace. It
uses all kinds of exotic GCC, glibc and kernel features, so you might have a
hard time compiling and running it on anything but a very recent Linux
distribution. I have tested it on Rawhide but it should work on slightly older
distributions, too.&lt;/p&gt;

&lt;p&gt;Make sure to build your application with &lt;tt&gt;-rdynamic&lt;/tt&gt; to make the
backtraces &lt;tt&gt;mutrace&lt;/tt&gt; generates useful.&lt;/p&gt;

&lt;p&gt;As of now, &lt;tt&gt;mutrace&lt;/tt&gt; only profiles mutexes. Adding support for
rwlocks should be easy to add though. Patches welcome.&lt;/p&gt;

&lt;p&gt;The output &lt;tt&gt;mutrace&lt;/tt&gt; generates can be influenced by various
&lt;tt&gt;MUTRACE_xxx&lt;/tt&gt; environment variables. See the sources for more
information.&lt;/p&gt;

&lt;p&gt;And now, please take &lt;tt&gt;mutrace&lt;/tt&gt; and profile and speed up your application!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://git.0pointer.de/?p=mutrace.git"&gt;You may find the sources in my
git repository.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 15 Sep 2009 00:07:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-09-15:/blog/projects/mutrace.html</guid><category>projects</category></item><item><title>pthread_key_create() is dangerous</title><link>https://0pointer.net/blog/projects/pthread-key-create.html</link><description>
                
&lt;p&gt;If you use &lt;tt&gt;pthread_key_create()&lt;/tt&gt; with a non-NULL &lt;tt&gt;destructor&lt;/tt&gt;
parameter (or an equivalent TLS construct) in a library/shared object then you
&lt;i&gt;MUST&lt;/i&gt; link your library wth &lt;tt&gt;-z nodelete&lt;/tt&gt; (or an equivalent
construct).&lt;/p&gt;

&lt;p&gt;If you don't, then you'll have a lot of fun (like I just had) debugging
segfaults in the TLS destruction logic where functions are called that might
not even exist anymore in memory.&lt;/p&gt;

&lt;p&gt;Now don't tell me I hadn't told you.&lt;/p&gt;

&lt;p&gt;(Oh, and I hope I don't need to mention that all GObject-based libraries should
link with &lt;tt&gt;-z nodelete&lt;/tt&gt; anyway, for making sure the type system doesn't
break.)&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 10 Aug 2009 22:39:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-08-10:/blog/projects/pthread-key-create.html</guid><category>projects</category></item><item><title>The Highest Man in Spain</title><link>https://0pointer.net/blog/photos/canaries-360.html</link><description>
                
&lt;p&gt;Ever wanted to know what's the view like being the highest person in all of Spain? -- No? Hmm, can't help you then. -- Otherwise:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/teide2"&gt;&lt;img alt="Pico del Teide" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/teide2-small.jpeg" width="1024" height="230" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's on the summit of &lt;a href="http://en.wikipedia.org/wiki/Pico_del_Teide"&gt;Pico del Teide&lt;/a&gt; at 3718m, on &lt;a href="http://en.wikipedia.org/wiki/Tenerife"&gt;Tenerife island&lt;/a&gt;. Unless you leave solid ground this is as high as you can get in Spain. 163m lower it's a bit more obvious that the Teide is a volcano:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/teide"&gt;&lt;img alt="Pico del Teide" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/teide-small.jpeg" width="1024" height="184" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And coming down to the surrounding caldera it's even more obvious:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/teide3"&gt;&lt;img alt="Pico del Teide" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/teide3-small.jpeg" width="1024" height="260" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/teide4"&gt;&lt;img alt="Pico del Teide" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/teide4-small.jpeg" width="1024" height="296" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/teide5"&gt;&lt;img alt="Pico del Teide" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/teide5-small.jpeg" width="1024" height="229" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On a ridge next to the caldera you find the &lt;a href="http://en.wikipedia.org/wiki/Teide_Observatory"&gt;Teide Observatory&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/observatory"&gt;&lt;img alt="Teide Observatory" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/observatory.jpeg" width="1024" height="98" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The caldera is covered in old lava flows:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/caldera"&gt;&lt;img alt="Caldera" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/caldera-small.jpeg" width="1024" height="240" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/caldera2"&gt;&lt;img alt="Caldera" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/caldera2-small.jpeg" width="1024" height="307" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vulcanism has created various interesting rock formations in the caldera:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/roques"&gt;&lt;img alt="Roques" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/roques-small.jpeg" width="1024" height="194" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/roques2"&gt;&lt;img alt="Roques" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/roques2-small.jpeg" width="1024" height="176" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tenerife is not just about the Teide and its dusty caldera. In the north of the island you find the &lt;a href="http://en.wikipedia.org/wiki/Macizo_de_Anaga"&gt;Anaga mountain range&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/tenerife-north"&gt;&lt;img alt="Tenerife North" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/tenerife-north-small.jpeg" width="1024" height="175" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Neighboring &lt;a href="http://en.wikipedia.org/wiki/Gran_Canaria"&gt;Gran Canaria&lt;/a&gt; was where our little trip started and ended, right after the &lt;a href="http://www.grancanariadesktopsummit.org/"&gt;Gran Canaria Desktop Summit&lt;/a&gt;. Gran Canaria has no Teide but a very impressive landscape nonetheless:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/nublo"&gt;&lt;img alt="Roque Nublo" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/nublo-small.jpeg" width="1024" height="210" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's the view from the &lt;a href="http://en.wikipedia.org/wiki/Roque_Nublo"&gt;Roque Nublo&lt;/a&gt;, the island's most famous landmark. The rock itself is visible here (on the left):&lt;/p&gt;
&lt;p&gt;&lt;a href="http://0pointer.de/static/nublo2"&gt;&lt;img alt="Roque Nublo" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/nublo2-small.jpeg" width="1024" height="176" /&gt;&lt;/a&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 09 Aug 2009 22:22:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-08-09:/blog/photos/canaries-360.html</guid><category>photos</category></item><item><title>Oh Nine Sixteen</title><link>https://0pointer.net/blog/projects/oh-nine-sixteen.html</link><description>
                #nocomments y

&lt;p&gt;As a followup to &lt;a href="http://0pointer.de/blog/projects/oh-nine-fifteen.html"&gt;Oh Nine
Fifteen&lt;/a&gt; here's a little overview of the changes coming with &lt;a href="http://pulseaudio.org/"&gt;PulseAudio 0.9.16&lt;/a&gt; which will be part of
Fedora 12 (already in Rawhide; I think Ubuntu Karmic (?) will have it
too).&lt;/p&gt;

&lt;h3&gt;A New Mixer Logic&lt;/h3&gt;

&lt;p&gt;We now try to control more than just a single ALSA mixer element for volume
control. This increases the hardware volume range and granularity exposed and
should also help minimizing problems by incomplete or incorrect default mixer
initialization on the lower levels.&lt;/p&gt;

&lt;p&gt;This also adds support for allowing selection of input/output ports for
sound cards.  This is used to expose changing between Mic vs. Line-In for input
source selection and Headphones vs. Speaker for output selection (of course the
list of available port is strictly dependant on what you hardware supports).
The list of available ports is deliberately kept minimal.&lt;/p&gt;

&lt;p&gt;Thanks to Bastien the newest GNOME Volume Control now exposes profile/port
switching quite nicely, &lt;a href="http://www.hadess.net/2009/07/bad-at-updates-easy-51.html"&gt;which he
blogged about.&lt;/a&gt; &lt;a href="http://0pointer.de/public/g-v-c-ports"&gt;This
screenshot shows how the port (here called 'Connector') can be selected
in the new dialog.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The mixer rework also allows us to handle semi-pro/pro sound cards a bit
more flexibly. For example, which profiles/ports are exposed in PulseAudio or
how specific mixer elements are handled can now be controlled by editing .ini
file like configuration files in &lt;tt&gt;/usr/share/pulseaudio/alsa-mixer/&lt;/tt&gt;.
&lt;a href="https://tango.0pointer.de/pipermail/pulseaudio-discuss/2009-June/004229.html"&gt;Read
this mail for more information about this.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;UPnP MediaServer Support&lt;/h3&gt;

&lt;p&gt;PulseAudio now integrates with Zeeshan's fabulous &lt;a href="http://live.gnome.org/Rygel"&gt;Rygel UPnP/DLNA MediaServer&lt;/a&gt;. If enabled
Rygel will automatically expose all local audio devices which are managed by
PulseAudio as UPnP/DLNA MediaServer items which your UPnP/DLNA MediaRenderers
can now tune into. (Meaning: you can now stream audio from your PC  directly to
your UPnP DMP (Digital Media Player) device, such as the PS3.) Communication
between Rygel and PulseAudio follows our little &lt;a href="http://live.gnome.org/Rygel/MediaServerSpec"&gt;Media Server Spec on the
GNOME Wiki&lt;/a&gt;. This nicely complements the RAOP (Apple Airport) support we
introduced in PulseAudio 0.9.15. In one of the next versions of
PulseAudio/Rygel we hope to add support for PulseAudio becoming a MediaRenderer
as well. This will then not only allow you to stream from your PC to your
DMP device, but also allows PulseAudio to act as
"networked speaker", which can be used by any UPnP/AV/DLNA control point, such
as Windows' Media Player.&lt;/p&gt;

&lt;h3&gt;Hotplug Support Improved&lt;/h3&gt;

&lt;p&gt;If you select a particular device as the default for a specific application
or class of streams, then when unplugging the device PulseAudio moves the stream
automatically to another audio device if one exists. New in PulseAudio 0.9.16
is that if you replug the audio device the stream will instantly be moved back,
requiring no further user intervention.&lt;/p&gt;

&lt;p&gt;Also, PulseAudio now includes some implicit rules for doing the 'right
thing' when finding an audio device for an application. For example, unless
configured otherwise it will now route telephony applications automatically to
Bluetooth headsets if one is connected, in favour of the internal sound card of
the computer.&lt;/p&gt;

&lt;h3&gt;Surround Sound Support for Event Sounds&lt;/h3&gt;

&lt;p&gt;This is more a new feature of &lt;a href="http://0pointer.de/lennart/projects/libcanberra/"&gt;libcanberra&lt;/a&gt; than
of PulseAudio, but nonetheless: we now support surround for events sounds.
This allows us to play full 5.1 login sounds for example, in best THX cinema
fashion. We'd love to ship a 5.1 sound for login by default in &lt;a href="http://cgit.freedesktop.org/~mccann/sound-theme-freedesktop/"&gt;sound-theme-freedesktop&lt;/a&gt;.
We'd be very thankful if &lt;i&gt;you&lt;/i&gt; would be willing to contribute a sound
here, or two! A sound a bit less bombastic than the famous cinema THX effect
would probably be a good idea though.&lt;/p&gt;

&lt;p&gt;And then there's of course the usual batch of fixes and small improvements.
A substantial number of non-user visible changes have been made as well. For
example, as HAL is now obsolete PulseAudio now moved to udev for its device
discovery needs. We replaced our gdbm support by support for tdb. Also,
we stripped all security senstive code from PulseAudio, and ported it to use
&lt;a href="http://0pointer.de/blog/projects/rtkit.html"&gt;RealtimeKit&lt;/a&gt; instead.
For the upcoming distributions that means that PulseAudio will run as real-time
process by default, improving drop-out safety.&lt;/p&gt;

&lt;p&gt;And for some extra PA eye-candy, have a look on &lt;a href="http://www.gnome-look.org/content/show.php/Impulse+-+PulseAudio+visualizer?content=99383"&gt;Impulse&lt;/a&gt;!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 05 Aug 2009 02:30:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-08-05:/blog/projects/oh-nine-sixteen.html</guid><category>projects</category></item><item><title>World Domination Accomplished</title><link>https://0pointer.net/blog/projects/avahi-world-domination.html</link><description>
                #nocomments y

&lt;p&gt;I hereby officially declare that I have reached my goal of world domination. &lt;a href="http://emacs-fu.blogspot.com/2009/07/emacs-23-is-very-near.html"&gt;Emacs 23
(apparently due today) ships with Avahi support out of the box.&lt;/a&gt; Obviously,
one of the most natural combinations of software thinkable.&lt;/p&gt;

&lt;p&gt;After Emacs, there's not much else I could win, or is there?&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 29 Jul 2009 21:03:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-07-29:/blog/projects/avahi-world-domination.html</guid><category>projects</category></item><item><title>Yet Another Kit</title><link>https://0pointer.net/blog/projects/rtkit.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/cgroups-and-rtwatch"&gt;A while
back&lt;/a&gt; I was celebrating that arrival of &lt;i&gt;secure&lt;/i&gt; realtime scheduling
for the desktop.  As it appears this was a bit premature then, since (mis-)using
cgroups for this turned out to be more problematic and messy than I
anticipated.&lt;/p&gt;

&lt;p&gt;As a followup I'd now like to point you to &lt;a href="http://lalists.stanford.edu/lad/2009/06/0191.html"&gt;this announcement I
posted to LAD yesterday&lt;/a&gt;, introducing &lt;a href="http://git.0pointer.de/?p=rtkit.git"&gt;RealtimeKit&lt;/a&gt; which should fix
the problem for good. It has now entered Rawhide becoming part of the default
install (by means of being a dependency of PulseAudio), and I assume the other
distros are going to adopt it pretty soon, too.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://lalists.stanford.edu/lad/2009/06/0191.html"&gt;Read the full announcement.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 20 Jun 2009 21:29:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-06-20:/blog/projects/rtkit.html</guid><category>projects</category></item><item><title>Linux Plumbers Conference 2009 CFP Ending Soon!</title><link>https://0pointer.net/blog/projects/plumbersconf-2009.html</link><description>
                
&lt;p&gt;The &lt;a href="http://linuxplumbersconf.org/2009/submit/"&gt;Call for Papers&lt;/a&gt; for
the &lt;a href="http://www.linuxplumbersconf.org/"&gt;Linux Plumbers Conference (LPC)&lt;/a&gt;
in September in Portland, Oregon &lt;a href="http://lwn.net/Articles/336707/"&gt;is ending soon&lt;/a&gt;, on &lt;b&gt;June 15th 2009&lt;/b&gt;. It's a conference
about the core infrastructure of Linux systems: the part of the system where
userspace and the kernel interface. It's the first conference where the focus
is specifically on getting together the kernel people who work on the
userspace interfaces and the userspace people who have to deal with kernel
interfaces. It's supposed to be a place where all the people doing
infrastructure work sit down and talk, so that each other understands better
what the requirements and needs of the other are, and where we can work
towards fixing the major problems we currently have with our lower-level
APIs.&lt;/p&gt;

&lt;p&gt;Last year's conference was hugely successful. If you want to read up what
happened then, LWN &lt;a href="http://lwn.net/Articles/297958/"&gt;has&lt;/a&gt; &lt;a href="http://lwn.net/Articles/299088/"&gt;good&lt;/a&gt; &lt;a href="http://lwn.net/Articles/300324/"&gt;coverage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like last year, I will be running the Audio conference track of LPC. Audio
infrastructure on Linux is still heavily fragmented. Pro, desktop and embedded worlds are
very seperate. While we have quite good driver support the
user experience is far from perfect, mostly because our infrastructure is
so balkanized. Join us at the LPC and help to fix this! If you are doing &lt;b&gt;audio infrastructure work&lt;/b&gt; on Linux, make sure to attend and &lt;b&gt;submit a paper!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://linuxplumbersconf.org/2009/register/"&gt;Sign up soon!&lt;/a&gt; &lt;a href="http://linuxplumbersconf.org/2009/submit/"&gt;Send in your paper quickly!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.linuxplumbersconf.org"&gt;&lt;img style="border: 0" src="http://linuxplumbersconf.org/2009/style/tagline.png" alt="Plumbers Logo" width="493" height="90" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in Portland!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 12 Jun 2009 16:18:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-06-12:/blog/projects/plumbersconf-2009.html</guid><category>projects</category></item><item><title>Living in Berlin? You are a GNOMEr?</title><link>https://0pointer.net/blog/projects/berlin-gnomers.html</link><description>
                
&lt;p&gt;If you live in Berlin and are a GNOMEr of some kind then please feel
invited top drop by tomorrow (Fri 29) at 4 pm at the &lt;a href="http://www.pratergarten.de/d/biergarten.php4"&gt;Prater Biergarten&lt;/a&gt;
(Weather permitting outside, otherwise inside).  We'll have a little GNOME
get-together. For now, we know that at least the Openismus Berlin folks will
be there, as will I and presumably one special guest from Finland, and whoever
else wants to attend.&lt;/p&gt;

&lt;p&gt;Hope to see you tomorrow!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 28 May 2009 23:50:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-05-28:/blog/projects/berlin-gnomers.html</guid><category>projects</category></item><item><title>The Sound of Fedora 11</title><link>https://0pointer.net/blog/projects/shameless-self-promotion.html</link><description>
                
&lt;p&gt;&lt;a href="http://jaboutboul.blogspot.com/2009/05/sound-of-fedora-11.html"&gt;I learned so much when I read this interview.&lt;/a&gt; And so will you!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 21 May 2009 17:03:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-05-21:/blog/projects/shameless-self-promotion.html</guid><category>projects</category></item><item><title>All About Fragments</title><link>https://0pointer.net/blog/projects/all-about-periods.html</link><description>
                
&lt;p&gt;In my on-going series &lt;i&gt;&lt;a href="http://0pointer.de/blog/projects/guide-to-sound-apis"&gt;Writing
Better Audio Applications&lt;/a&gt;&lt;/i&gt; for Linux, here's another
installment: a little explanation how fragments/periods and buffer
sizes should be chosen when doing audio playback with traditional
audio APIs such as ALSA and OSS. This originates from &lt;a href="http://bugzilla.gnome.org/show_bug.cgi?id=572953#c5"&gt;some emails
I exchanged with the Ekiga folks&lt;/a&gt;. In the last weeks I kept copying
this explanation to various other folks. I guess it would make sense
to post this on my blog here too to reach a wider audience. So here it
is, mostly unedited:&lt;/p&gt;

&lt;pre&gt;
Yes. You shouldn't misuse the fragments logic of sound devices. It's
like this:

   The latency is defined by the buffer size.
   The wakeup interval is defined by the fragment size.

The buffer fill level will oscillate between 'full buffer' and 'full
buffer minus 1x fragment size minus OS scheduling latency'. Setting
smaller fragment sizes will increase the CPU load and decrease battery
time since you force the CPU to wake up more often. OTOH it increases
drop out safety, since you fill up playback buffer earlier. Choosing
the fragment size is hence something which you should do balancing out
your needs between power consumption and drop-out safety. With modern
processors and a good OS scheduler like the Linux one setting the
fragment size to anything other than half the buffer size does not
make much sense.

Your &lt;i&gt;[Ekiga's ptlib driver that is]&lt;/i&gt; ALSA output is configured
to set the the fragment size to the size of your codec audio
frames. And that's a bad idea. Because the codec frame size has not
been chosen based on power consumption or drop-out safety
reasoning. It has been chosen by the codec designers based on
different reasoning, such as latency.

You probably configured your backend this ways because the ALSA
library docs say that it is recommended to write to the sound card in
multiples of the fragment size. However deducing from this that you
hence should configure the fragment size to the codec frame size is
wrong!

The best way to implement playback these days for ALSA is to write as
much as snd_pcm_avail() tells you to each time you wake up due to
POLLOUT on the sound card. If that is not a multiple of your codec
frame size then you need to buffer the the remainder of the decoded
data yourself in system memory.

The ALSA fragment size you should normally set as large as possible
given your latency constraints but that you have at least two
fragments in your buffer size.

I hope this explains a bit how frag_size/buffer_size should be
chosen. If you have questions, just ask.

(Oh, ALSA uses the term 'period' for what I call 'fragment'
above. It's synonymous)
&lt;/pre&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 19 Apr 2009 01:34:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-04-19:/blog/projects/all-about-periods.html</guid><category>projects</category></item><item><title>GNOME now esound-free</title><link>https://0pointer.net/blog/projects/esound-free.html</link><description>
                
&lt;p&gt;&lt;a href="http://blogs.gnome.org/aklapper/"&gt;Andre Klapper&lt;/a&gt; just informed
me that GNOME is now officially &lt;a href="http://en.wikipedia.org/wiki/Esound"&gt;esound&lt;/a&gt;-free: all modules have been ported over
to &lt;a href="http://0pointer.de/lennart/projects/libcanberra/"&gt;libcanberra&lt;/a&gt;
for event sounds or GStreamer/PulseAudio for everything else. It's time to
celebrate!&lt;/p&gt;

&lt;p&gt;It's an end of an era. The oldest version of esound in GNOME CVS is 0.2.1,
commited on May 11th 1998.  It has been shipped with every GNOME release since
1.0 back in 1999. (esound outside of GNOME dates even further back, probably
some time in the year 1997 or so). After almost 11 years in GNOME it's all over now.
Oh, those were the good times.&lt;/p&gt;

&lt;p&gt;If you maintain a module that is not part of GNOME that still uses
esound, hurry and update yours as well!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 05 Apr 2009 20:23:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-04-05:/blog/projects/esound-free.html</guid><category>projects</category></item><item><title>What YOU need to know about Practical Real-Time Programming</title><link>https://0pointer.net/blog/projects/realtime-bossa.html</link><description>
                
&lt;p&gt;&lt;a href="http://etrunko.blogspot.com/"&gt;Eduardo Lima&lt;/a&gt; just added a couple
of more videos from &lt;a href="http://www.bossaconference.indt.org/"&gt;one of the
best conferences in existence&lt;/a&gt; to &lt;a href="http://openbossa.blip.tv/"&gt;the
OpenBOSSA&lt;/a&gt; channel at blip.tv. Humbly as I am I'd like to ask everyone who
is interested in real-time and/or audio/video/animation programming &lt;a href="http://blip.tv/file/1953900"&gt;&lt;b&gt;to have a peek at this particular one&lt;/b&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's all.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 04 Apr 2009 01:38:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-04-04:/blog/projects/realtime-bossa.html</guid><category>projects</category></item><item><title>Device Reservation Spec</title><link>https://0pointer.net/blog/projects/device-reservation.html</link><description>
                
&lt;p&gt;The &lt;a href="http://jackaudio.org/"&gt;JACK&lt;/a&gt; folks and I have agreed on a little specification for &lt;a href="http://git.0pointer.de/?p=reserve.git;a=blob_plain;f=reserve.txt"&gt;device
reservation&lt;/a&gt; that allows clean hand-over of audio device access from
&lt;a href="http://pulseaudio.org"&gt;PulseAudio&lt;/a&gt; to JACK and back. The specification is generic enough to allow
locking/hand-over of other device types as well, not just audio cards. So, in
case someone needs to implement a similar kind of locking/handover for any kind of resource here's some
prior art you can base your work on. Given that HAL is supposed to go away
pretty soon this might be an option for a replacement for HAL's current device
locking. The logic is as simple as it can get. Whoever owns a certain service name on
the D-Bus session bus owns the device access. For further details, &lt;a href="http://git.0pointer.de/?p=reserve.git;a=blob_plain;f=reserve.txt"&gt;read the spec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There's even a &lt;a href="http://git.0pointer.de/?p=reserve.git"&gt;reference
implementation&lt;/a&gt; available, which both JACK2 and PulseAudio have now
integrated.&lt;/p&gt;

&lt;p&gt;Also known as PAX SOUND SERVERIS.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 26 Feb 2009 18:55:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-02-26:/blog/projects/device-reservation.html</guid><category>projects</category></item><item><title>Having fun with bzr</title><link>https://0pointer.net/blog/projects/bizarre-fun.html</link><description>
                #nocomments y

&lt;p&gt;So I wanted to hack proper channel mapping query support into &lt;a href="http://www.mega-nerd.com/libsndfile"&gt;libsndfile&lt;/a&gt;, something I have had
on my TODO list for years. The first step was to find the &lt;a href="http://www.mega-nerd.com/libsndfile/development.html"&gt;source code
repository for it&lt;/a&gt;. That was easy. Alas the VCS used is bzr. There are some
very vocal folks on the Internet who claim that the bzr user interface is
stupendously easy to use in contrast to git which apparantly is the very
definition of complexity. And if it is stated on the Internet it must be true.
I think I mastered git quite well, so yeah, checking out the sources with bzr
can't be that difficult for my limited brain capacity.&lt;/p&gt;

&lt;p&gt;So let's do what Erik suggests for checking out the sources:&lt;/p&gt;

&lt;pre&gt;$ bzr get http://www.mega-nerd.com/Bzr/libsndfile-pub/&lt;/pre&gt;

&lt;p&gt;Calling this I get a nice percentage counter that starts at 0% and ends at, ... uh, 0%. That gives me a real feeling of progress. It takes a while, and then I get an error:&lt;/p&gt;

&lt;pre&gt;bzr: ERROR: Not a branch: "http://www.mega-nerd.com/Bzr/libsndfile-pub/".&lt;/pre&gt;

&lt;p&gt;Now that's a useful error message. They even include an all-caps word! I guess that error message is right -- it's not a branch, it is a repository. Or is it not?&lt;/p&gt;

&lt;p&gt;So what do we do about this? Maybe &lt;tt&gt;get&lt;/tt&gt; is not actually the right verb. Let's try to play around a bit. Let's use the verb I use to get sources with in git:&lt;/p&gt;

&lt;pre&gt;$ bzr clone http://www.mega-nerd.com/Bzr/libsndfile-pub/&lt;/pre&gt;

&lt;p&gt;Hmm, this results in exactly same 0% to 0% progress counter, and the same useless error message.&lt;/p&gt;

&lt;p&gt;Now I remember that bzr is actually more inspired by Subversion's UI than by git's, so let's try it the SVN way.&lt;/p&gt;

&lt;pre&gt;$ bzr checkout http://www.mega-nerd.com/Bzr/libsndfile-pub/&lt;/pre&gt;

&lt;p&gt;Hmm, and of course, I get exactly the same results again. A counter that counts from 0% to 0% and the same useless error message.&lt;/p&gt;

&lt;p&gt;Ok, maybe that error is bzr's standard reply? Let's check this out:&lt;/p&gt;

&lt;pre&gt;$ bzr waldo http://www.mega-nerd.com/Bzr/libsndfile-pub/
bzr: ERROR: unknown command "waldo"&lt;/pre&gt;

&lt;p&gt;Apparently not. bzr actually knows more than one error message.&lt;/p&gt;

&lt;p&gt;Ok, I admit doing this by trial-and-error is a rather lame approach. RTFM! So let's try this.&lt;/p&gt;

&lt;pre&gt;$ man bzr-get
No manual entry for bzr-get&lt;/pre&gt;

&lt;p&gt;Ouch. No man page? How awesome. Ah, wait, maybe they have only a single unreadable mega man page for everything. Let's try this:&lt;/p&gt;

&lt;pre&gt;$ man bzr&lt;/pre&gt;

&lt;p&gt;Wow, this actually worked. Seems to list all commands. Now let's look for the help on &lt;tt&gt;bzr get&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;/bzr get
Pattern not found  (press RETURN)&lt;/pre&gt;

&lt;p&gt;Hmm, no documentation for their most important command? That's weird! Ok, let's try it again with our git vocabulary:&lt;/p&gt;

&lt;pre&gt;/bzr clone
Pattern not found  (press RETURN)&lt;/pre&gt;

&lt;p&gt;Ok, this not funny anymore. Apparently the verbs are listed in alphabetical order.
So let's browse to the letter &lt;i&gt;g&lt;/i&gt; as in &lt;tt&gt;get&lt;/tt&gt;. However it doesn't
exist. There's &lt;tt&gt;bzr export&lt;/tt&gt;, and then the next entry is &lt;tt&gt;bzr
help&lt;/tt&gt; (Oh, irony!) -- but no &lt;tt&gt;get&lt;/tt&gt; in-between.&lt;/p&gt;

&lt;p&gt;Ok, enough of this shit. Maybe the message wants to tell us that the repo
actually doesn't exist (even though it confusingly calls it a "branch"). Let's
go back to the original page at Erik's site and read things again. Aha, the
"&lt;i&gt;main archive archive can be found at (yes, the directory looks empty, but
it isn't):  &lt;a href="http://www.mega-nerd.com/Bzr/libsndfile-pub/"&gt;http://www.mega-nerd.com/Bzr/libsndfile-pub/&lt;/a&gt;".&lt;/i&gt;
Hmm, indeed -- that URL looks very empty when it is accessed. How weird though
that in bzr a repo is an empty directory!&lt;/p&gt;

&lt;p&gt;And at this point I gave up and downloaded the tarball to make my patches
against. I have still not managed to check out the sources from the repo.
Somehow I get the feeling the actual repo really isn't available anymore under that address.&lt;/p&gt;

&lt;p&gt;So why am I blogging about this? Not so much to start another flamefest, to
nourish the fanboys, nor because it is so much fun to bash other people's work or
simply to piss people off. It's more for two reasons:&lt;/p&gt;

&lt;p&gt;Firstly, simply to make
the point that folks can claim a thousand times that git's UI sucks and bzr's
UI is awesome. It's simply not true. From what I experienced it is not the
tiniest bit better.  The error messages useless, the documentation incomplete,
the interfaces surprising and exactly as redundant as git's. The only
effective difference I noticed is that it takes a bit longer to show those
error messages with bzr -- the Python tax. To summarize this more positively: git excels as much as bzr does. Both' documentation, their error messages and their user interface are the best in their class. And they have all the best chances for future improvement.&lt;/p&gt;

&lt;p&gt;And the second reason of course is that I'd still like to know what the correct way to get the sources is. But for that I should probably ask Erik himself.&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 25 Feb 2009 10:39:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-02-25:/blog/projects/bizarre-fun.html</guid><category>projects</category></item><item><title>This is funny</title><link>https://0pointer.net/blog/got-style.html</link><description>
                
&lt;p&gt;&lt;a href="http://userstyles.org/styles/6371"&gt;Uh?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some folks apparently don't have much respect for my web design skills -- and I always considered myself the Malevich of web design! Pfft!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 23 Feb 2009 16:52:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-02-23:/blog/got-style.html</guid><category>misc</category></item><item><title>Generating Copyright Headers from git History</title><link>https://0pointer.net/blog/projects/copyright.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/public/copyright.py"&gt;Here's a little a little tool I
wrote&lt;/a&gt; that automatically generates copyright headers for source files in a
git repository based on the git history.&lt;/p&gt;

&lt;p&gt;Run it like this:&lt;/p&gt;

&lt;pre&gt;~/projects/pulseaudio$ copyright.py src/pulsecore/sink.c src/pulsecore/core-util.c&lt;/pre&gt;

&lt;p&gt;And it will give you this:&lt;/p&gt;

&lt;pre&gt;
File: src/pulsecore/sink.c
	Copyright 2004, 2006-2009 Lennart Poettering
	Copyright 2006-2007 Pierre Ossman
	Copyright 2008-2009 Marc-Andre Lureau
File: src/pulsecore/core-util.c
	Copyright 2004, 2006-2009 Lennart Poettering
	Copyright 2006-2007 Pierre Ossman
	Copyright 2008 Stelian Ionescu
	Copyright 2009 Jared D. McNeill
	Copyright 2009 Marc-Andre Lureau
&lt;/pre&gt;

&lt;p&gt;This little script could use love from a friendly soul to make it crawl entire source trees and patch in appropriate copyright headers. Anyone up for it?&lt;/p&gt;




        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 21 Feb 2009 00:16:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-02-21:/blog/projects/copyright.html</guid><category>projects</category></item><item><title>Tagging Audio Streams</title><link>https://0pointer.net/blog/projects/tagging-audio.html</link><description>
                
&lt;p&gt;So you are hacking an audio application and the audio data you are
generating might eventually end up in &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; before it is played. &lt;b&gt;&lt;a href="http://pulseaudio.org/wiki/ApplicationProperties"&gt;If that's the case then please make sure
to read this!&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Here's the quick summary for Gtk+ developers:&lt;/p&gt;

&lt;p&gt;PulseAudio can enforce all kinds of policy on sounds. For example, starting
in 0.9.15, we will automatically pause your media player while a phone call is
going on. To implement this we however need to know what the stream you
are sending to PulseAudio should be categorized as: is it music? Is it a
movie? Is it game sounds? Is it a phone call stream?&lt;/p&gt;

&lt;p&gt;Also, PulseAudio would like to show a nice icon and an application name next
to each stream in the volume control. That requires it to be able to deduce
this data from the stream.&lt;/p&gt;

&lt;p&gt;And here's where you come into the game: please add three lines like the
following next to the beginning of your &lt;tt&gt;main()&lt;/tt&gt; function to your Gtk+
application:&lt;/p&gt;

&lt;pre&gt;
...
&lt;a href="http://library.gnome.org/devel/glib/unstable/glib-Miscellaneous-Utility-Functions.html#g-set-application-name"&gt;g_set_application_name&lt;/a&gt;(_("Totem Movie Player"));
&lt;a href="http://library.gnome.org/devel/gtk/unstable/GtkWindow.html#gtk-window-set-default-icon-name"&gt;gtk_window_set_default_icon_name&lt;/a&gt;("totem");
&lt;a href="http://library.gnome.org/devel/glib/unstable/glib-Miscellaneous-Utility-Functions.html#g-setenv"&gt;g_setenv&lt;/a&gt;("PULSE_PROP_media.role", "video", TRUE);
...
&lt;/pre&gt;

&lt;p&gt;If you do this then the PulseAudio client libraries will be able to figure out the rest for you.&lt;/p&gt;

&lt;p&gt;There is more meta information (aka "properties") you can set for your application or for your streams that is useful to PulseAudio. In case you want to know more about them or you are looking for equivalent code to the above example for non-Gtk+ applications, &lt;a href="http://pulseaudio.org/wiki/ApplicationProperties"&gt;make sure to read the mentioned page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;Oh, and even if your app doesn't do audio, calling &lt;tt&gt;g_set_application_name()&lt;/tt&gt; and &lt;tt&gt;gtk_window_set_default_icon_name()&lt;/tt&gt; is always a good idea!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 20 Feb 2009 22:02:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-02-20:/blog/projects/tagging-audio.html</guid><category>projects</category></item><item><title>How to Version D-Bus Interfaces Properly and Why Using / as Service Entry Point Sucks</title><link>https://0pointer.net/blog/projects/versioning-dbus.html</link><description>
                
&lt;p&gt;So you are designing a D-Bus interface and want to make it future-proof. Of
course, you thought about versioning your stuff. But you wonder how to do that
best. Here are a few things I learned about versioning D-Bus APIs which might
be of general interest:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Version your interfaces!&lt;/b&gt; This one is pretty obvious. No explanation
needed. Simply include the interface version in the interface name as suffix.
i.e. the initial release should use &lt;tt&gt;org.foobar.AwesomeStuff1&lt;/tt&gt;, and if
you do changes you should introduce &lt;tt&gt;org.foobar.AwesomeStuff2&lt;/tt&gt;, and so
on, possibly dropping the old interface.&lt;/p&gt;

&lt;p&gt;When should you bump the interface version? Generally, I'd recommend only
bumping when doing incompatible changes, such as function call signature
changes. This of course requires clients to handle the
&lt;tt&gt;org.freedesktop.DBus.Error.UnknownMethod&lt;/tt&gt; error properly for each function
you add to an existing interface. That said, in a few cases it might make sense
to bump the interface version even without breaking compatibility of the calls.
(e.g. in case you add something to an interface that is not directly visible in
the introspection data)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Version your services!&lt;/b&gt; This one is almost as obvious. When you
completely rework your D-Bus API introducing a new service name might be a
good idea. Best way to do this is by simply bumping the service name. Hence,
call your service &lt;tt&gt;org.foobar.AwesomeService1&lt;/tt&gt; right from the beginning
and then bump the version if you reinvent the wheel. And don't forget that you
can acquire more than one well-known service name on the bus, so even if you
rework everything you can keep compatibilty. (Example: BlueZ 3 to BlueZ 4 switch)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Version your 'entry point' object paths!&lt;/b&gt; This one is far from
obvious. The reasons why object paths should be versioned are purely technical,
not philosophical: for signals sent from a service D-Bus overwrites the
originating service name by the unique name (e.g. &lt;tt&gt;:1.42&lt;/tt&gt;) even if you
fill in a well-known name (e.g. &lt;tt&gt;org.foobar.AwesomeService1&lt;/tt&gt;). Now,
let's say your application registers two well-known service names, let's say
two versions of the same service, versioned like mentioned above. And you have
two objects -- one on each of the two service names -- that implement a generic
interface and share the same object path: for the client there will be no way
to figure out to which service name the signals sent from this object path
belong. And that's why you should make sure to use versioned and hence
different paths for both objects. i.e. start with
&lt;tt&gt;/org/foobar/AwesomeStuff1&lt;/tt&gt; and then bump to
&lt;tt&gt;/org/foobar/AwesomeStuff2&lt;/tt&gt; and so on. (&lt;a href="http://cgit.freedesktop.org/~david/eggdbus/tree/src/eggdbus/eggdbusconnection.c?id=670144c1d962a3d79584a7e944dabc191d635c76#n357"&gt;Also see David's comments about this.&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;When should you bump the object path version? Probably only when you
bump the service name it belongs to. Important is to version the 'entry point'
object path. Objects below that don't need explicit versioning.&lt;/p&gt;

&lt;p&gt;In summary: For good D-Bus API design &lt;b&gt;you should version all three: D-Bus interfaces, service names &lt;i&gt;and&lt;/i&gt; 'entry point' object paths.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;And don't forget: nobody gets API design right the first time. So even if
you think your D-Bus API is perfect: version things right from the beginning
because later on it might turn out you were not quite as bright as you thought
you were.&lt;/p&gt;

&lt;p&gt;A corollary from the reasoning behind versioning object paths as described
above is that using &lt;tt&gt;/&lt;/tt&gt; as entry point object path for your service is a
bad idea. It makes it very hard to implement more than one service or service
version on a single D-Bus connection. Again: &lt;b&gt;Don't use &lt;tt&gt;/&lt;/tt&gt; as entry
point object path. Use something like &lt;tt&gt;/org/foobar/AwesomeStuff&lt;/tt&gt;!&lt;/b&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 11 Feb 2009 19:03:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-02-11:/blog/projects/versioning-dbus.html</guid><category>projects</category></item><item><title>Writing Volume Control UIs is Hard</title><link>https://0pointer.net/blog/projects/writing-volume-control-uis.html</link><description>
                
&lt;p&gt;Writing modern volume control UIs (i.e. 'mixer tools') is much harder to get
right than it might appear at first. Because that is the way it is I've put
together a &lt;a href="http://pulseaudio.org/wiki/WritingVolumeControlUIs"&gt;rough
guide what to keep in mind when writing them for PulseAudio&lt;/a&gt;. Originally
just intended to be a bit of help for the gnome-volume-control guys I believe
this could be an interesting read for other people as well.&lt;/p&gt;

&lt;p&gt;It touches a lot of topics: volumes in general, how to present them,
what to present, base volumes, flat volumes, what to do about multichannel
volumes, controlling clients, controlling cards, handling default devices,
saving/restoring volumes/devices, sound event sliders, how to monitor PCM and
more.&lt;/p&gt;

&lt;p&gt;So make sure to give it at least a quick peek! If you plan to write a volume
control for ncurses or KDE (hint, hint!) even more so, it's a must read.&lt;/p&gt;

&lt;p&gt;Maybe this might also help illustrating why I think that abstracting volume
control interfaces inside of abstraction layers such as Phonon or GStreamer is
doomed to fail, and just not even worth the try.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pulseaudio.org/wiki/WritingVolumeControlUIs"&gt;And now, without further ado I give you 'Writing Volume Control UIs'&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 10 Feb 2009 21:03:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-02-10:/blog/projects/writing-volume-control-uis.html</guid><category>projects</category></item><item><title>Oh Nine Fifteen</title><link>https://0pointer.net/blog/projects/oh-nine-fifteen.html</link><description>
                
&lt;p&gt;Last week I've released &lt;a href="https://tango.0pointer.de/pipermail/pulseaudio-discuss/2009-February/003068.html"&gt;a
test version&lt;/a&gt; for the upcoming 0.9.15 release of &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt;. It's going to be a major one,
so here's a little overview what's new from the user's perspective.&lt;/p&gt;

&lt;h3&gt;Flat Volumes&lt;/h3&gt;

&lt;p&gt;Based on code originally contributed by Marc-Andr&amp;eacute; Lureau we now
support &lt;i&gt;Flat Volumes&lt;/i&gt;. The idea behind flat volumes has been
inspired by how Windows Vista handles volume control: instead of
maintaining one volume control per application stream plus one device
volume we instead fix the device volume automatically to the "loudest"
application stream volume. Sounds confusing? Actually it's right the contrary, it feels pretty natural and
easy to use and brings us a big step forward to reduce a bit the
number of volume sliders in the entire audio pipeline from the application to what you hear.&lt;/p&gt;

&lt;p&gt;The flat volumes logic only applies to devices where we know the
actual multiplication factor of the hardware volume slider. That's
most devices supported by the ALSA kernel drivers except for a few
older devices and some cheap USB hardware that exports invalid
dB information.&lt;/p&gt;

&lt;h3&gt;On-the-fly Reconfiguration of Devices (aka "S/PDIF Support")&lt;/h3&gt;

&lt;p&gt;PulseAudio will now automatically probe all possible combinations
of configurations how to use your sound card for playback and
capturing and then allow on-the-fly switching of the
configuration. What does that mean? Basically you may now switch
beetween "Analog Stereo", "Digital S/PDIF Stereo", "Analog Surround
5.1" (... and so on) on-the-fly without having to reconfigure PA on
the configuration file level or even having to stop your streams. This
fixes a couple of issues PA had previously, including proper SPDIF
support, and per-device configuration of the channel map of
devices.&lt;/p&gt;

&lt;p&gt;Unfortunately there is no UI for this yet, and hence you need to
use &lt;tt&gt;pactl&lt;/tt&gt;/&lt;tt&gt;pacmd&lt;/tt&gt; on the command line to switch between the
profiles. Typing &lt;tt&gt;list-cards&lt;/tt&gt; in &lt;tt&gt;pacmd&lt;/tt&gt; will tell you
which profiles your card supports. &lt;/p&gt;

&lt;p&gt;In a later PA version this functionality will be extended to also
allow input connector switching (i.e. microphone vs. line-in) and
output connector switching (i.e. internal speakers vs. line-out)
on-the-fly.&lt;/p&gt;

&lt;h3&gt;Native support for 24bit samples&lt;/h3&gt;

&lt;p&gt;PA now supports 24bit packed samples as well as 24bit stored in
the LSBs of 32bit integers natively. Previously these formats were
always converted into 32bit MSB samples.&lt;/p&gt;

&lt;h3&gt;Airport Express Support&lt;/h3&gt;

&lt;p&gt;Colin Guthrie contributed native Airport Express support. This will
make the &lt;a href="http://en.wikipedia.org/wiki/Remote_Audio_Output_Protocol"&gt;RAOP&lt;/a&gt;
audio output of ApEx routers appear like local sound devices
(unfortunately sound devices with a very long latency), i.e. any
application connecting to PulseAudio can output audio to ApEx devices
in a similar way to how iTunes can do it on MacOSX.&lt;/p&gt;

&lt;p&gt;Before you ask: it is unlikely that we will ever make PulseAudio be
able to act as an ApEx compatible device that takes connections from
iTunes (i.e. becoming a RAOP server instead of just an RAOP client).
Apple has an unfriendly attitude of dongling their devices to their
applications: normally iTunes has to cryptographically authenticate
itself to the device and the device to iTunes. iTunes' key has been
recovered by the infamous &lt;a href="http://nanocr.eu/2004/08/11/reversing-airtunes/"&gt;Jon Lech
Johansen&lt;/a&gt;, but the device key is still unknown. Without that key it
is not realistically possible to disguise PA as an ApEx.&lt;/p&gt;

&lt;h3&gt;Other stuff&lt;/h3&gt;

&lt;p&gt;There have been some extensive changes to natively support
Bluetooth audio devices well by directly accessing BlueZ. This code
was originally contributed by the GSoC student Jo&amp;atilde;o Paulo Rechi
Vita. Initially, 0.9.15 was intended to become the version were BT audio
just works. Unfortunately the kernel is not really up to that yet, and
I am not sure everything will be in place so that 0.9.15 will ship
with well working BT support.&lt;/p&gt;

&lt;p&gt;There have been a lot of internal changes and API additions. Most of
these however are not visible to the user.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 10 Feb 2009 20:11:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-02-10:/blog/projects/oh-nine-fifteen.html</guid><category>projects</category></item><item><title>Pascal,</title><link>https://0pointer.net/blog/projects/pascal-terjan.html</link><description>
                
&lt;p&gt;replacing integral parts of a system is always a bit of a dilemma. If we
replace it only after all the other software/drivers that interface with it is known
to work well with it then nobody will bother doing all that compatbility work
since they can say "Nobody uses it yet, so why should I bother?" -- and hence
the change can never take place.&lt;/p&gt;

&lt;p&gt;If we replace it before everything works perfectly well with it, then folks
will complain: "Oh my god, it doesn't work with my software/drivers, you suck!" -- &lt;a href="http://fasmz.org/~pterjan/blog/?date=20090127"&gt;like you just did (though in more polite words)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hence regardless which way we do it we will do it the wrong way. Biting the
bullet and doing the change is however still the better, the only path to
improvement. With the limited amount of manpower we have pushing things out
knowing that there is some software/drivers that don't work well with it is our only
option -- especially if the software in question is unfixable by us since it is
closed source.&lt;/p&gt;

&lt;p&gt;Hence, if we'd do as you wish and not make the distributions adopt
PulseAudio right now we can forget about fixing audio on Linux entirely and it
will stagnate forever.&lt;/p&gt;

&lt;p&gt;As mentioned &lt;a href="http://www.j5live.com/2009/01/26/ah-the-memories/"&gt;by J5&lt;/a&gt; this was the same story with D-Bus, HAL, with udev, and other stuff.&lt;/p&gt;

&lt;p&gt;And again, folks may claim that PulseAudio is very buggy. While it certainly
has bugs, like every software has, most of the issues reported are not things
we can or should fix/work-around in PulseAudio, but that are in other layers of
the system. In ALSA, in the drivers, in the client applications. However only
PA makes them become visible since it depends on a lot more functionality to
work properly than any other program before. And quite frankly we use a lot of stuff exactly nobody has used
before and that of course was broken due that (in ALSA as one example).&lt;/p&gt;

&lt;p&gt;Having said all this. Just pointing to other folks to blame doesn't really
solve the problem. I did a lot of testing on different sound chips, making
sure PulseAudio works fine on them. Of course it's a limited testing set (six
cards right now to be exact, a seventh model currently being sent to me by my
employer, Red Hat.). The list of cards that are currently known to be
problematic are &lt;a href="http://pulseaudio.org/wiki/BrokenSoundDrivers"&gt;listed
in our Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I am not saying that the points you make are rubbish. However, please see the big picture before getting vocal about it.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 27 Jan 2009 19:17:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-01-27:/blog/projects/pascal-terjan.html</guid><category>projects</category></item><item><title>India, Again</title><link>https://0pointer.net/blog/photos/india-again.html</link><description>
                
&lt;p&gt;Right after my &lt;a href="http://0pointer.de/blog/photos/brazil"&gt;trip to
Brazil in November&lt;/a&gt; I flew to Bangalore for &lt;a href="http://foss.in/"&gt;FOSS.in 2008&lt;/a&gt;. It was one amazing conference! After
the &lt;a href="http://foss.in/news/fossin2008-the-omelette-post.html"&gt;bold
changes&lt;/a&gt; they had announced I feared they might be a bit too ... bold. But
they were not. FOSS.in worked out very well, it was a great success, and it
was good to see a lot of familiar faces again. (Which reminds me: Hey, the four of you from the
&lt;a href="http://workouts.foss.in/2008/index.php/Implementing_volume-follows-focus_in_PulseAudio"&gt;PulseAudio
Workout&lt;/a&gt;, could you please drop me a line? I forgot to put down your
email addresses.)&lt;/p&gt;

&lt;p&gt;After FOSS.in I flew up to Rajasthan for a much too short trip through this
marvelous state:&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=409"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-409.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=423"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-423.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=438"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-438.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=436"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-436.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=458"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-458.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=501"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-501.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=877"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-877.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1062"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1062.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1070"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1070.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1178"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1178.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=111"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-111.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1253"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1253.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1340"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1340.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1826"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1826.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1901"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1901.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1957"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1957.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=2391"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-2391.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=2479"&gt;&lt;img width="120" height="80" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-2479.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=24"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-24.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=2341"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-2341.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=105"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-105.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=116"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-116.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=126"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-126.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=284"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-284.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=25"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-25.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=320"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-320.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=68"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-68.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=73"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-73.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=79"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-79.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=94"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-94.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=367"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-367.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=394"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-394.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1240"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1240.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=410"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-410.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=413"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-413.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=420"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-420.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=426"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-426.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=425"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-425.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=427"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-427.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=424"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-424.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1861"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1861.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1337"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1337.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=470"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-470.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=568"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-568.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=608"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-608.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=663"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-663.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=669"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-669.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=719"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-719.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=805"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-805.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1068"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1068.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1246"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1246.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1134"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1134.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1208"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1208.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1350"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1350.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1469"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1469.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1740"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1740.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1881"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1881.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=2526"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-2526.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=387"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-387.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1976"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1976.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=2036"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-2036.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=2093"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-2093.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=2436"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-2436.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=2480"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-2480.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=2502"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-2502.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1089"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1089.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1251"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1251.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1589"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1589.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=2278"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-2278.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1321"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1321.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202008-11&amp;amp;photo=1965"&gt;&lt;img width="80" height="120" alt="India" src="http://0pointer.de/photos/galleries/India%202008-11/thumbs/img-1965.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/static/pushkar"&gt;&lt;img src="http://0pointer.de/static/pushkar-small.jpeg" alt="Panorama" width="1024" height="188" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/static/pushkar2"&gt;&lt;img src="http://0pointer.de/static/pushkar2-small.jpeg" alt="Panorama" width="1024" height="135" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/static/jaipur1"&gt;&lt;img src="http://0pointer.de/static/jaipur1-small.jpeg" alt="Panorama" width="1024" height="172" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/static/fatehpur"&gt;&lt;img src="http://0pointer.de/static/fatehpur-small.jpeg" alt="Panorama" width="1024" height="137" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/static/tajmahal1"&gt;&lt;img src="http://0pointer.de/static/tajmahal1-small.jpeg" alt="Panorama" width="1024" height="190" /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/static/tajmahal2"&gt;&lt;img src="http://0pointer.de/static/tajmahal2-small.jpeg" alt="Panorama" width="1024" height="180" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;That's Pushkar, Jaipur, Fatehpur Sikri and the Taj Mahal (the real one, not the Hotel they bombed).&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 17 Jan 2009 21:37:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-01-17:/blog/photos/india-again.html</guid><category>photos</category></item><item><title>Brazil</title><link>https://0pointer.net/blog/photos/brazil.html</link><description>
                
&lt;p&gt;In November I spent three weeks in Brazil, the country where I grew up two decades ago. Surprisingly little had changed since then. Except maybe that this time I had an DSLR:&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=273"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-273.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=514"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-514.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1030"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1030.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=210"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-210.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1070"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1070.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1627"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1627.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1340"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1340.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1236"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1236.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;
&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1885"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1885.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=2291"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-2291.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=2423"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-2423.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1680"&gt;&lt;img width="120" height="80" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1680.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=758"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-758.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=863"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-863.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1507"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1507.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1267"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1267.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1464"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1464.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1525"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1525.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=2027"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-2027.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=2102"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-2102.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=2223"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-2223.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=2491"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-2491.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=2583"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-2583.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1626"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1626.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1887"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1887.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=2615"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-2615.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=123"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-123.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1231"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1231.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=1294"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-1294.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Brazil%202008-11&amp;amp;photo=982"&gt;&lt;img width="80" height="120" alt="Brazil" src="http://0pointer.de/photos/galleries/Brazil%202008-11/thumbs/img-982.jpg" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;That's Rio de Janeiro and the old colonial towns of Ouro Preto, Mariana, S&amp;atilde;o Jo&amp;atilde;o del Rey, Tiradentes, Congonhas do Campo, Paraty in Minas Gerais and Rio State.&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/static/ouro-preto"&gt;&lt;img src="http://0pointer.de/static/ouro-preto-small.jpeg" alt="Panorama" width="1024" height="167" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/static/copacabana"&gt;&lt;img src="http://0pointer.de/static/copacabana-small.jpeg" alt="Panorama" width="1024" height="212" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Once again Ouro Preto, and Copacabana Beach at night.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 17 Jan 2009 15:12:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2009-01-17:/blog/photos/brazil.html</guid><category>photos</category></item><item><title>Automatic Backtrace Generation</title><link>https://0pointer.net/blog/projects/automatic-backtrace.html</link><description>
                
&lt;p&gt;&lt;a href="https://wiki.ubuntu.com/Apport"&gt;Ubuntu has Apport&lt;/a&gt;. &lt;a href="http://fedoraproject.org/wiki/Features/CrashHandling"&gt;Fedora has nothing.&lt;/a&gt; That sucks big time.&lt;/p&gt;

&lt;p&gt;Here's the result of a few minutes of hacking up something similar to Apport based on the awesome (and much underused) &lt;a href="http://sourceware.org/frysk/"&gt;Frysk&lt;/a&gt; debugging tool kit. It doesn't post any backtraces on any Internet servers and has no fancy UI -- but it automatically dumps a stacktrace of every crashing process on the system to syslog and stores all kinds of data in &lt;tt&gt;/tmp/core.*/&lt;/tt&gt; for later inspection.&lt;/p&gt;

&lt;pre&gt;
#!/bin/bash
set -e
export PATH=/sbin:/bin:/usr/sbin:/usr/bin
DIR="/tmp/core.$1.$2"
umask 077
mkdir "$DIR"
cat &amp;gt; "$DIR/core"
exec &amp;amp;&amp;gt; "$DIR/dump.log"
set +e
echo "$1" &amp;gt; "$DIR/pid"
echo "$2" &amp;gt; "$DIR/timestamp"
echo "$3" &amp;gt; "$DIR/uid"
echo "$4" &amp;gt; "$DIR/gid"
echo "$5" &amp;gt; "$DIR/signal"
echo "$6" &amp;gt; "$DIR/hostname"
set -x
fauxv "$DIR/core" &amp;gt; "$DIR/auxv"
fexe "$DIR/core" &amp;gt; "$DIR/exe"
fmaps "$DIR/core" &amp;gt; "$DIR/maps"
PKGS=`/usr/bin/fdebuginfo "$DIR/core" | grep "\-\-\-" | cut -d ' ' -f 1 | sort | uniq | grep '^/'| xargs rpm -qf | sort | uniq`
[ "x$PKGS" != x ] &amp;amp;&amp;amp; debuginfo-install -y $PKGS
fstack -rich "$DIR/core" &amp;gt; "$DIR/fstack"
set +x
(
	echo "Application `cat "$DIR/exe"` (pid=$1,uid=$3,gid=$4) crashed with signal $5."
	echo "Stack trace follows:"
	cat "$DIR/fstack"
	echo "Auxiliary vector:"
	cat "$DIR/auxv"
	echo "Maps:"
	cat "$DIR/maps"
	echo "For details check $DIR"
) | logger -p local6.info -t "frysk-core-dump-$1"
&lt;/pre&gt;

&lt;p&gt;Copy that into a file &lt;tt&gt;$SOMEWHERE/frysk-core-dump&lt;/tt&gt;. Then do a &lt;tt&gt;chmod +x $SOMEWHERE/frysk-core-dump&lt;/tt&gt; and a &lt;tt&gt;chown root:root $SOMEWHERE/frysk-core-dump&lt;/tt&gt;. Now, tell the kernel that core dumps should be handed to this script:&lt;/p&gt;

&lt;pre&gt;
# echo "|$SOMEWHERE/frysk-core-dump %p %t %u %g %s %h" &gt; /proc/sys/kernel/core_pattern
&lt;/pre&gt;

&lt;p&gt;Finally, increase RLIMIT_CORE to actually enable core dumps. &lt;tt&gt;ulimit -c
unlimited&lt;/tt&gt; is a good idea. This will enable them only for your shell and
everything it spawns. In &lt;tt&gt;/etc/security/limits.conf&lt;/tt&gt; you can enable
them for all users. I haven't found out yet how to enable them globally
in Fedora though, i.e. for every single process that is started after boot including system daemons.&lt;/p&gt;

&lt;p&gt;You can test this with running &lt;tt&gt;sleep 4711&lt;/tt&gt; and then dumping core with C-\. The stacktrace should appear right-away in &lt;tt&gt;/var/log/messages&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;This script will automatically try to install the debugging symbols for the crashing application via yum. In some cases it hence might take a while until the backtrace appears in syslog.&lt;/p&gt;

&lt;p&gt;Don't forget to install Frysk before trying this script!&lt;/p&gt;

&lt;p&gt;You can't believe how useful this script is. Something crashed and the backtrace is already waiting for you! It's a bugfixer's wet dream.&lt;/p&gt;

&lt;p&gt;I am a bit surprised though that noone else came up with this before me. Or maybe I am just too dumb to use Google properly?&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 29 Oct 2008 23:05:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-10-29:/blog/projects/automatic-backtrace.html</guid><category>projects</category></item><item><title>People of the Free World [1]!</title><link>https://0pointer.net/blog/projects/free-sound-themes.html</link><description>
                
&lt;p&gt;GNOME 2.24 supports &lt;a href="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec"&gt;XDG
sound themes&lt;/a&gt;. Unfortunately however right now there is only a single sound
theme in existence: the &lt;a href="http://cgit.freedesktop.org/~mccann/sound-theme-freedesktop/"&gt;sound-theme-freedesktop&lt;/a&gt;
-- which is pretty basic.&lt;/p&gt;

&lt;p&gt;Help us change this! There are many web sites like &lt;a href="http://art.gnome.org/"&gt;art.gnome.org&lt;/a&gt; which provide a large selection
of graphical themes for Gtk+, Metacity, icon sets and so on. We want to see a similarly large selection of sound themes available! And we'd like you to contribute to this!&lt;/p&gt;

&lt;p&gt;How do you prepare sound themes? Read the &lt;a href="http://0pointer.de/public/sound-theme-spec.html"&gt;XDG Sound Theming&lt;/a&gt;
and the &lt;a href="http://0pointer.de/public/sound-naming-spec.html"&gt;XDG Sound
Naming&lt;/a&gt; specifications. Start with basing your work on the aforementioned &lt;a href="http://people.freedesktop.org/~mccann/dist/sound-theme-freedesktop-0.2.tar.bz2"&gt;sound-theme-freedesktop&lt;/a&gt;.
And then just go ahead!&lt;/p&gt;

&lt;p&gt;Please note that only subset of the sounds listed in the Sound Naming
Specification is currently hooked up properly -- i.e. generated when "input
feedback" is enabled or triggered by applications. Nonetheless it makes sense
to include them in your theme, because eventually they will be hooked up.&lt;/p&gt;

&lt;p&gt;When you put a theme together, make sure that you only select sounds that
have a sensible Free Software license -- or if you have produced them yourself
you pick a good license yourself. GPLv2+, LGPLv2+, CC-BY-SA 3.0 and CC-BY 3.0
are good choices.&lt;/p&gt;

&lt;p&gt;Not everyone is as lucky as &lt;a href="http://blogs.gnome.org/hughsie/"&gt;Richard Hughes&lt;/a&gt; and has a mom who is
practically an endless source of special effect sounds. If your mom sucks then
don't despair! The OLPC team has compiled &lt;a href="http://wiki.laptop.org/go/Sound_samples"&gt;a huge set of Free sounds&lt;/a&gt;
that is waiting to be made an XDG sound theme. I am eagerly looking forward to your sound
themes that make use of &lt;a href="http://www.archive.org/details/Berklee44v13"&gt;"The Berklee Sampling
Archive - Volume 13 - synthesizer - fx (126 samples) spaceships, lasers,
explosions, machineguns, glisses"&lt;/a&gt; to start a war in space each time you
click a button on your screen!&lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] &lt;i&gt;Free&lt;/i&gt; as in &lt;i&gt;free desktops&lt;/i&gt; that is.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] OK, to be honest I am not actually that eagerly looking forward to that. Spacewar-at-your-fingertips is pretty lame in comparison to a theme called "Richard's Mom"&lt;sup&gt;[3]&lt;/sup&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[3] You have no idea what all those Hughsie's-Mom-jokes are about? Then listen to the sound files that are shipped with gnome-power-manager!&lt;/small&gt;&lt;/p&gt;




        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 22 Oct 2008 21:21:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-10-22:/blog/projects/free-sound-themes.html</guid><category>projects</category></item><item><title>Berliners!</title><link>https://0pointer.net/blog/berliners.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.vorratsdatenspeicherung.de/static/demo_en.html"&gt;Berliners, you
might want to attend this rally!&lt;/a&gt; It's tomorrow (hmm, or actually today
considering it's already past midnight), October 11th 2 pm,
Alexanderplatz.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 11 Oct 2008 02:25:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-10-11:/blog/berliners.html</guid><category>misc</category></item><item><title>Responses to my Audio API Guide</title><link>https://0pointer.net/blog/projects/guide-to-sound-apis-followup.html</link><description>
                
&lt;p&gt;My &lt;a href="http://0pointer.de/blog/projects/guide-to-sound-apis.html"&gt;Audio API guide&lt;/a&gt; got quite a few responses.&lt;/p&gt;

&lt;h3&gt;The Good&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://mailman.alsa-project.org/pipermail/alsa-devel/2008-September/010862.html"&gt;Takashi
likes it.&lt;/a&gt; &lt;a href="http://www.schleef.org/blog/2008/09/24/clear-cutting-the-jungle/"&gt;And so
does David.&lt;/a&gt; Which is great because both are key people in the Linux
multimedia community.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://lwn.net/Articles/300423/"&gt;It made it to LWN.&lt;/a&gt; I sincerely
and humbly hope this is not going to stay the only news site picking this up.
;-)&lt;/p&gt;

&lt;p&gt;The &lt;i&gt;safe ALSA&lt;/i&gt; part of the recommendations will most likely be added to the ALSA documentation soon. The GNOME-relevent part I will be adding to the GNOME platform overview.&lt;/p&gt;

&lt;h3&gt;The Bad&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://aseigo.blogspot.com/2008/09/linux-audio-layers.html"&gt;Aaron
basically likes it&lt;/a&gt;, although he appears disappointed that KDE's and Qt's
Phonon wasn't mentioned more positively. Aaron is very fair in his criticism.
Nonetheless I don't think it is valid. My guide is not a list of alternatives.
It's a list of recommendations. My recommendations. I do believe that my
recommendations very much match the mainstream of the opinions of the key
people in Linux multimedia and desktop audio. Of course I don't nearly know
everyone of the key hackers in Linux multimedia. But I do know most of those
who are actively interested in collaboration, whose projects have a lot
mindshare and who attend the conferences that matter for Linux desktop audio.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://blogs.gnome.org/uraeus/2008/09/25/in-the-land-of-silly-arguments/"&gt;Also see Christian's comments on Aaron's post.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;The Ugly&lt;/h3&gt;

&lt;p&gt;It wasn't my intention to start another GNOME-vs.-KDE flamefest.
Unfortunately a lot of people took this as great opportunity to troll at the
various blog comment forums. I guess it is inevitable that some of those whose
favourite software is not listed on a recommendation guide like this start to
clamour about that. It's a pity not everyone who thinks I am treating KDE
unfairly criticises that as fairly and reasonable as Aaron. Anyway, I humbly take this as a sign that
people do consider this guide to be relevant and much needed. ;-)&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 26 Sep 2008 00:05:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-09-26:/blog/projects/guide-to-sound-apis-followup.html</guid><category>projects</category></item><item><title>Everybody Loves Pretty Graphics</title><link>https://0pointer.net/blog/projects/the-linux-audio-stack.html</link><description>
                
&lt;p&gt;As kind of a followup to my &lt;a href="http://0pointer.de/blog/projects/guide-to-sound-apis.html"&gt;Guide to Linux
Sound APIs&lt;/a&gt; here're some pretty graphics I just drew. (At least "pretty" to
the degree of my limited drawing abilities). It's a block diagram depicting the
Linux audio stack. A lot of people already drew something similar, and often
enough the result was horribly complicated and -- in its conclusion
disappointing. So, here's my try:&lt;/p&gt;

&lt;p&gt;&lt;img style="border:0" alt="Linux Audio Stack" src="http://0pointer.de/public/linux-audio-stack.png" width="601" height="245" /&gt;&lt;/p&gt;

&lt;p&gt;The components interface each other across the horizontal lines. The
vertical lines seperate unrelated components. The drawing only includes
modern, supported APIs and systems as described in the aforementioned blog
article.  It (hopefully) shows that things in the Linux audio world are not
all that bad at all and we have workable answers for most questions without
too much complexity, although they might not entirely make everyone overly
happy.&lt;/p&gt;

&lt;p&gt;In an outburst of bias I completely ommited KDE-specific technologies from
this drawing. I guess even if I would have included them it'd be called biased
anyway, so why bother? Also, they would have distracted the reader and complicated the
drawing considerably due to KDE's affection for pluggable backends. So: if you
care about KDE, please ignore this diagram.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 25 Sep 2008 01:44:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-09-25:/blog/projects/the-linux-audio-stack.html</guid><category>projects</category></item><item><title>A Guide Through The Linux Sound API Jungle</title><link>https://0pointer.net/blog/projects/guide-to-sound-apis.html</link><description>
                
&lt;p&gt;At the &lt;a href="http://lwn.net/Articles/299211/"&gt;Audio MC&lt;/a&gt; at the &lt;a href="http://linuxplumbersconf.org/"&gt;Linux Plumbers Conference&lt;/a&gt; one
thing became very clear: it is very difficult for programmers to
figure out which audio API to use for which purpose and which API not
to use when doing audio programming on Linux. So here's my try to
guide you through this jungle:&lt;/p&gt;

&lt;h3&gt;What do you want to do?&lt;/h3&gt;

&lt;dl&gt;
&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;I want to write a media-player-like application!&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Use GStreamer! (Unless your focus is only KDE in which cases Phonon might be an alternative.)&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;I want to add event sounds to my application!&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Use libcanberra, install your sound files according to the XDG Sound Theming/Naming Specifications! (Unless your focus is only KDE in which case KNotify might be an alternative although it has a different focus.)&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;I want to do professional audio programming, hard-disk recording, music synthesizing, MIDI interfacing!&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Use JACK and/or the full ALSA interface.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;I want to do basic PCM audio playback/capturing!&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Use the &lt;i&gt;safe&lt;/i&gt; ALSA subset.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;I want to add sound to my game!&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Use the audio API of SDL for full-screen games, libcanberra for simple games with standard UIs such as Gtk+.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;I want to write a mixer application!&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Use the layer you want to support directly: if you want to support enhanced desktop software mixers, use the PulseAudio volume control APIs. If you want to support hardware mixers, use the ALSA mixer APIs.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;I want to write audio software for the plumbing layer!&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;Use the full ALSA stack.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;I want to write audio software for embedded applications!&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;For technical appliances usually the &lt;i&gt;safe&lt;/i&gt; ALSA subset is a good choice, this however depends highly on your use-case.&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3&gt;You want to know more about the different sound APIs?&lt;/h3&gt;

&lt;dl&gt;
&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;GStreamer&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href="http://www.gstreamer.net/"&gt;GStreamer&lt;/a&gt; is the de-facto
standard media streaming system for Linux desktops. It supports decoding and
encoding of audio and video streams. You can use it for a wide range of
purposes from simple audio file playback to elaborate network
streaming setups. GStreamer supports a wide range of CODECs and audio
backends. GStreamer is not particularly suited for basic PCM playback
or low-latency/realtime applications. GStreamer is portable and not
limited in its use to Linux. Among the supported backends are ALSA, OSS, PulseAudio. [&lt;a href="http://gstreamer.freedesktop.org/documentation/"&gt;Programming Manuals and References&lt;/a&gt;]&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;libcanberra&lt;/i&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a href="http://0pointer.de/lennart/projects/libcanberra/"&gt;libcanberra&lt;/a&gt;
is an abstract event sound API. It implements the &lt;a href="http://www.freedesktop.org/wiki/Specifications/sound-theme-spec"&gt;XDG
Sound Theme and Naming Specifications&lt;/a&gt;. libcanberra is a blessed
GNOME dependency, but itself has no dependency on GNOME/Gtk/GLib and can be
used with other desktop environments as well. In addition to an easy
interface for playing sound files, libcanberra provides caching
(which is very useful for networked thin clients) and allows passing
of various meta data to the underlying audio system which then can be
used to enhance user experience (such as positional event sounds) and
for improving accessibility. libcanberra supports multiple backends
and is portable beyond Linux. Among the supported backends are ALSA, OSS, PulseAudio, GStreamer. [&lt;a href="http://0pointer.de/lennart/projects/libcanberra/gtkdoc/"&gt;API Reference&lt;/a&gt;]&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;JACK&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;&lt;a href="http://jackaudio.org/"&gt;JACK&lt;/a&gt; is a sound system for
connecting professional audio production applications and hardware
output. It's focus is low-latency and application interconnection. It
is not useful for normal desktop or embedded use. It is not an API
that is particularly useful if all you want to do is simple PCM
playback. JACK supports multiple backends, although ALSA is best
supported. JACK is portable beyond Linux. Among the supported backends are ALSA, OSS. [&lt;a href="http://jackaudio.org/files/docs/html/index.html"&gt;API Reference&lt;/a&gt;]&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;Full ALSA&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;&lt;a href="http://www.alsa-project.org/"&gt;ALSA&lt;/a&gt; is the Linux API
for doing PCM playback and recording. ALSA is very focused on
hardware devices, although other backends are supported as well (to a
limit degree, see below). ALSA as a name is used both for the Linux
audio kernel drivers and a user-space library that wraps these. ALSA -- the library -- is
comprehensive, and portable (to a limited degree). The full ALSA API
can appear very complex and is large. However it supports almost
everything modern sound hardware can provide. Some of the
functionality of the ALSA API is limited in its use to actual hardware
devices supported by the Linux kernel (in contrast to software sound
servers and sound drivers implemented in user-space such as those for
Bluetooth and FireWire audio -- among others) and Linux specific
drivers. [&lt;a href="http://www.alsa-project.org/alsa-doc/alsa-lib/"&gt;API
Reference&lt;/a&gt;]&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;Safe ALSA&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;Only a subset of the full ALSA API works on all backends ALSA
supports. It is highly recommended to stick to this &lt;i&gt;safe&lt;/i&gt; subset
if you do ALSA programming to keep programs portable, future-proof and
compatible with sound servers, Bluetooth audio and FireWire audio. See
below for more details about which functions of ALSA are considered
safe. The &lt;i&gt;safe&lt;/i&gt; ALSA API is a suitable abstraction for basic,
portable PCM playback and recording -- not just for ALSA kernel driver
supported devices. Among the supported backends are ALSA kernel driver
devices, OSS, PulseAudio, JACK.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;Phonon&lt;/i&gt; and &lt;i&gt;KNotify&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;&lt;a href="http://phonon.kde.org/"&gt;Phonon&lt;/a&gt; is high-level
abstraction for media streaming systems such as GStreamer, but goes a
bit further than that. It supports multiple backends. KNotify is a
system for "notifications", which goes beyond mere event
sounds. However it does not support the XDG Sound Theming/Naming
Specifications at this point, and also doesn't support caching or
passing of event meta-data to an underlying sound system. KNotify
supports multiple backends for audio playback via Phonon. Both APIs
are KDE/Qt specific and should not be used outside of KDE/Qt
applications. [&lt;a href="http://api.kde.org/4.0-api/kdelibs-apidocs/phonon/html/index.html"&gt;Phonon API Reference&lt;/a&gt;] [&lt;a href="http://api.kde.org/4.x-api/kdebase-runtime-apidocs/knotify/html/index.html"&gt;KNotify API Reference&lt;/a&gt;] &lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;SDL&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;&lt;a href="http://www.libsdl.org/"&gt;SDL&lt;/a&gt; is a portable API
primarily used for full-screen game development. Among other stuff it
includes a portable audio interface. Among others SDL support OSS,
PulseAudio, ALSA as backends. [&lt;a href="http://www.libsdl.org/cgi/docwiki.cgi"&gt;API Reference&lt;/a&gt;]&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;PulseAudio&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;&lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; is a sound system
for Linux desktops and embedded environments that runs in user-space
and (usually) on top of ALSA. PulseAudio supports network
transparency, per-application volumes, spatial events sounds, allows
switching of sound streams between devices on-the-fly, policy
decisions, and many other high-level operations. PulseAudio adds a &lt;a href="http://0pointer.de/blog/projects/pulse-glitch-free.html"&gt;glitch-free&lt;/a&gt;
audio playback model to the Linux audio stack. PulseAudio is not
useful in professional audio production environments. PulseAudio is
portable beyond Linux. PulseAudio has a native API and also supports
the &lt;i&gt;safe&lt;/i&gt; subset of ALSA, in addition to limited,
LD_PRELOAD-based OSS compatibility. Among others PulseAudio supports
OSS and ALSA as backends and provides connectivity to JACK. [&lt;a href="http://0pointer.de/lennart/projects/pulseaudio/doxygen/"&gt;API
Reference&lt;/a&gt;]&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;OSS&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;The &lt;a href="http://www.opensound.com/"&gt;Open Sound System&lt;/a&gt; is a
low-level PCM API supported by a variety of Unixes including Linux. It
started out as the standard Linux audio system and is supported on
current Linux kernels in the API version 3 as OSS3. OSS3 is considered
obsolete and has been fully replaced by ALSA. A successor to OSS3
called OSS4 is available but plays virtually no role on Linux and is
not supported in standard kernels or by any of the relevant
distributions. The OSS API is very low-level, based around direct
kernel interfacing using ioctl()s. It it is hence awkward to use and
can practically not be virtualized for usage on non-kernel audio
systems like sound servers (such as PulseAudio) or user-space sound
drivers (such as Bluetooth or FireWire audio). OSS3's timing model
cannot properly be mapped to software sound servers at all, and is
also problematic on non-PCI hardware such as USB audio. Also, OSS does
not do sample type conversion, remapping or resampling if
necessary. This means that clients that properly want to support OSS
need to include a complete set of converters/remappers/resamplers for
the case when the hardware does not natively support the requested
sampling parameters. With modern sound cards it is very common to
support only S32LE samples at 48KHz and nothing else. If an OSS client
assumes it can always play back S16LE samples at 44.1KHz it will thus
fail. OSS3 is portable to other Unix-like systems, various differences
however apply. OSS also doesn't support surround sound and other
functionality of modern sounds systems properly. &lt;b&gt;OSS should be
considered obsolete and not be used in new applications.&lt;/b&gt; ALSA and
PulseAudio have limited LD_PRELOAD-based compatibility with OSS. [&lt;a href="http://www.opensound.com/pguide/oss.pdf"&gt;Programming Guide&lt;/a&gt;]&lt;/dd&gt;

&lt;/dl&gt;

&lt;p&gt;All sound systems and APIs listed above are supported in all
relevant current distributions. For libcanberra support the newest
development release of your distribution might be necessary.&lt;/p&gt;

&lt;p&gt;All sound systems and APIs listed above are suitable for
development for commercial (read: closed source) applications, since
they are licensed under LGPL or more liberal licenses or no client
library is involved.&lt;/p&gt;

&lt;h3&gt;You want to know why and when you should use a specific sound API?&lt;/h3&gt;

&lt;dl&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;GStreamer&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;GStreamer is best used for very high-level needs: i.e. you want to
play an audio file or video stream and do not care about all the tiny
details down to the PCM or codec level.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;libcanberra&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;libcanberra is best used when adding sound feedback to user input
in UIs. It can also be used to play simple sound files for
notification purposes.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;JACK&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;JACK is best used in professional audio production and where interconnecting applications is required.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;Full ALSA&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;The full ALSA interface is best used for software on "plumbing layer" or when you want to make use of very specific hardware features, which might be need for audio production purposes.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;Safe ALSA&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;The &lt;i&gt;safe&lt;/i&gt; ALSA interface is best used for software that wants to output/record basic PCM data from hardware devices or software sound systems.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;Phonon&lt;/i&gt; and &lt;i&gt;KNotify&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;Phonon and KNotify should only be used in KDE/Qt applications and only for high-level media playback, resp. simple audio notifications.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;SDL&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;SDL is best used in full-screen games.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;PulseAudio&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;For now, the PulseAudio API should be used only for applications
that want to expose sound-server-specific functionality (such as
mixers) or when a PCM output abstraction layer is already available in
your application and it thus makes sense to add an additional backend
to it for PulseAudio to keep the stack of audio layers minimal.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;&lt;i&gt;OSS&lt;/i&gt;&lt;/dt&gt;

&lt;dd&gt;OSS should not be used for new programs.&lt;/dd&gt;

&lt;/dl&gt;

&lt;h3&gt;You want to know more about the &lt;i&gt;safe&lt;/i&gt; ALSA subset?&lt;/h3&gt;

&lt;p&gt;Here's a list of DOS and DONTS in the ALSA API if you care about
that you application stays future-proof and works fine with
non-hardware backends or backends for user-space sound drivers such as
Bluetooth and FireWire audio. Some of these recommendations apply for
people using the full ALSA API as well, since some functionality
should be considered obsolete for all cases.&lt;/p&gt;

&lt;p&gt;If your application's code does not follow these rules, you must have
a very good reason for that. Otherwise your code should simply be considered
&lt;b&gt;broken&lt;/b&gt;!&lt;/p&gt;

&lt;p&gt;DONTS:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; use "async handlers", e.g. via
&lt;tt&gt;snd_async_add_pcm_handler()&lt;/tt&gt; and friends. Asynchronous
handlers are implemented using POSIX signals, which is a very
questionable use of them, especially from libraries and plugins. Even
when you don't want to limit yourself to the &lt;i&gt;safe&lt;/i&gt; ALSA subset
it is highly recommended not to use this functionality. &lt;a href="http://mailman.alsa-project.org/pipermail/alsa-devel/2008-May/008030.html"&gt;Read
this for a longer explanation why signals for audio IO are
evil.&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; parse the ALSA configuration file yourself or with
any of the ALSA functions such as &lt;tt&gt;snd_config_xxx()&lt;/tt&gt;. If you
need to enumerate audio devices use &lt;tt&gt;snd_device_name_hint()&lt;/tt&gt;
(and related functions). That
is the only API that also supports enumerating non-hardware audio
devices and audio devices with drivers implemented in userspace.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; parse any of the files from
&lt;tt&gt;/proc/asound/&lt;/tt&gt;. Those files only include information about
kernel sound drivers -- user-space plugins are not listed there. Also,
the set of kernel devices might differ from the way they are presented
in user-space. (i.e. sub-devices are mapped in different ways to
actual user-space devices such as &lt;tt&gt;surround51&lt;/tt&gt; an suchlike.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; rely on stable device indexes from ALSA. Nowadays
they depend on the initialization order of the drivers during boot-up
time and are thus not stable.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; use the &lt;tt&gt;snd_card_xxx()&lt;/tt&gt; APIs. For
enumerating use &lt;tt&gt;snd_device_name_hint()&lt;/tt&gt; (and related
functions). &lt;tt&gt;snd_card_xxx()&lt;/tt&gt; is obsolete. It will only list
kernel hardware devices. User-space devices such as sound servers,
Bluetooth audio are not included. &lt;tt&gt;snd_card_load()&lt;/tt&gt; is
completely obsolete in these days.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; hard-code device strings, especially not
&lt;tt&gt;hw:0&lt;/tt&gt; or &lt;tt&gt;plughw:0&lt;/tt&gt; or even &lt;tt&gt;dmix&lt;/tt&gt; -- these devices define no channel
mapping and are mapped to raw kernel devices. It is highly recommended
to use exclusively &lt;tt&gt;default&lt;/tt&gt; as device string. If specific
channel mappings are required the correct device strings should be
&lt;tt&gt;front&lt;/tt&gt; for stereo, &lt;tt&gt;surround40&lt;/tt&gt; for Surround 4.0,
&lt;tt&gt;surround41&lt;/tt&gt;, &lt;tt&gt;surround51&lt;/tt&gt;, and so on. Unfortunately at
this point ALSA does not define standard device names with channel
mappings for non-kernel devices. This means &lt;tt&gt;default&lt;/tt&gt; may only
be used safely for mono and stereo streams. You should probably prefix
your device string with &lt;tt&gt;plug:&lt;/tt&gt; to make sure ALSA transparently
reformats/remaps/resamples your PCM stream for you if the
hardware/backend does not support your sampling parameters
natively.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; assume that any particular sample type is supported
except the following ones: U8, S16_LE, S16_BE, S32_LE, S32_BE,
FLOAT_LE, FLOAT_BE, MU_LAW, A_LAW.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; use &lt;tt&gt;snd_pcm_avail_update()&lt;/tt&gt; for
synchronization purposes. It should be used exclusively to query the
amount of bytes that may be written/read right now. Do &lt;b&gt;not&lt;/b&gt; use
&lt;tt&gt;snd_pcm_delay()&lt;/tt&gt; to query the fill level of your playback
buffer. It should be used exclusively for synchronisation
purposes. Make sure you fully understand the difference, and note that
the two functions return values that are not necessarily directly
connected!&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; assume that the mixer controls always know dB information.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; assume that all devices support MMAP style buffer access.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; assume that the hardware pointer inside the (possibly mmaped) playback buffer is the actual position of the sample in the DAC. There might be an extra latency involved.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; try to recover with your own code from ALSA error conditions such as buffer under-runs. Use &lt;tt&gt;snd_pcm_recover()&lt;/tt&gt; instead.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; touch buffering/period metrics unless you have
specific latency needs. Develop defensively, handling correctly the
case when the backend cannot fulfill your buffering metrics
requests. Be aware that the buffering metrics of the playback buffer
only indirectly influence the overall latency in many
cases. i.e. setting the buffer size to a fixed value might actually result in
practical latencies that are much higher.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; assume that &lt;tt&gt;snd_pcm_rewind()&lt;/tt&gt; is available and works and to which degree.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; assume that the time when a PCM stream can receive
new data is strictly dependant on the sampling and buffering
parameters and the resulting average throughput. Always make sure to
supply new audio data to the device when it asks for it by signalling
"writability" on the fd. (And similarly for capturing)&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; use the "simple" interface &lt;tt&gt;snd_spcm_xxx()&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; use any of the functions marked as "obsolete".&lt;/li&gt;

&lt;li&gt;Do &lt;b&gt;not&lt;/b&gt; use the timer, midi, rawmidi, hwdep subsystems.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;DOS:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Use &lt;tt&gt;snd_device_name_hint()&lt;/tt&gt; for enumerating audio devices.&lt;/li&gt;

&lt;li&gt;Use &lt;tt&gt;snd_smixer_xx()&lt;/tt&gt; instead of raw &lt;tt&gt;snd_ctl_xxx()&lt;/tt&gt;&lt;/li&gt;

&lt;li&gt;For synchronization purposes use &lt;tt&gt;snd_pcm_delay()&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;For checking buffer playback/capture fill level use &lt;tt&gt;snd_pcm_update_avail()&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;Use &lt;tt&gt;snd_pcm_recover()&lt;/tt&gt; to recover from errors returned by any of the ALSA functions.&lt;/li&gt;

&lt;li&gt;If possible use the largest buffer sizes the device supports to maximize power saving and drop-out safety. Use &lt;tt&gt;snd_pcm_rewind()&lt;/tt&gt; if you need to react to user input quickly.&lt;/li&gt;

&lt;/ul&gt;

&lt;h3&gt;FAQ&lt;/h3&gt;

&lt;dl&gt;

&lt;dt style="padding-top:8pt"&gt;What about ESD and NAS?&lt;/dt&gt;

&lt;dd&gt;ESD and NAS are obsolete, both as API and as sound daemon. Do not develop for it any further.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;ALSA isn't portable!&lt;/dt&gt;

&lt;dd&gt;That's not true! Actually the user-space library is relatively portable, it even includes a backend for OSS sound devices. There is no real reason that would disallow using the ALSA libraries on other Unixes as well.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;Portability is key to me! What can I do?&lt;/dt&gt;

&lt;dd&gt;Unfortunately no truly portable (i.e. to Win32) PCM API is
available right now that I could truly recommend. The systems shown
above are more or less portable at least to Unix-like operating
systems. That does not mean however that there are suitable backends
for all of them available. If you care about portability to Win32 and
MacOS you probably have to find a solution outside of the
recommendations above, or contribute the necessary
backends/portability fixes. None of the systems (with the exception of
OSS) is truly bound to Linux or Unix-like kernels.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;What about PortAudio?&lt;/dt&gt;

&lt;dd&gt;I don't think that PortAudio is very good API for Unix-like operating systems. I cannot recommend it, but it's your choice.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;Oh, why do you hate OSS4 so much?&lt;/dt&gt;

&lt;dd&gt;I don't hate anything or anyone. I just don't think OSS4 is a
serious option, especially not on Linux. On Linux, it is also
completely redundant due to ALSA.&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;You idiot, you have no clue!&lt;/dt&gt;

&lt;dd&gt;You are right, I totally don't. But that doesn't hinder me from recommending things. Ha!&lt;/dd&gt;

&lt;dt style="padding-top:8pt"&gt;Hey I wrote/know this tiny new project which is an awesome abstraction layer for audio/media!&lt;/dt&gt;

&lt;dd&gt;Sorry, that's not sufficient. I only list software here that is known to be sufficiently relevant and sufficiently well maintained.&lt;/dd&gt;

&lt;/dl&gt;

&lt;h3&gt;Final Words&lt;/h3&gt;

&lt;p&gt;Of course these recommendations are very basic and are only intended to
lead into the right direction. For each use-case different necessities
apply and hence options that I did not consider here might become
viable. It's up to you to decide how much of what I wrote here
actually applies to your application.&lt;/p&gt;

&lt;p&gt;This summary only includes software systems that are considered
stable and universally available at the time of writing. In the
future I hope to introduce a more suitable and portable replacement
for the &lt;i&gt;safe&lt;/i&gt; ALSA subset of functions. I plan to update this text
from time to time to keep things up-to-date.&lt;/p&gt;

&lt;p&gt;If you feel that I forgot a use case or an important API, then
please contact me or leave a comment. However, I think the summary
above is sufficiently comprehensive and if an entry is missing I most
likely deliberately left it out.&lt;/p&gt;

&lt;p&gt;(Also note that I am upstream for both PulseAudio and libcanberra and did some minor contributions to ALSA, GStreamer and some other of the systems listed above. Yes, I am biased.)&lt;/p&gt;

&lt;p&gt;Oh, and please syndicate this, digg it. I'd like to see this guide to be well-known all around the Linux community. Thank you!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 24 Sep 2008 21:52:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-09-24:/blog/projects/guide-to-sound-apis.html</guid><category>projects</category></item><item><title>My take on the Plumbers Conference</title><link>https://0pointer.net/blog/projects/lpc-summary.html</link><description>
                
&lt;p&gt;I just came back from the &lt;a href="http://linuxplumbersconf.org/"&gt;Linux
Plumbers Conference&lt;/a&gt;. As some of you might know I was doing an MC about Audio
there. Don Marti attended the track and wrote up an &lt;a href="http://lwn.net/Articles/299211/"&gt;interesting article&lt;/a&gt; over at LWN.
It's a recommended read, including the immense number of comments it already
resulted in. (I will try to reply to all comments coming up, in case you have questions -- just post them over at LWN)&lt;/p&gt;

&lt;p&gt;I must really say though that calling that article "It's a mess" and
highlighting my critical comments on the situation this way makes me feel
slightly uncomfortable, though. Sure, we have some issues to fix and it's the
words I chose at the conference -- but it's only part of the story. Things are
not really all that bad, and we have enough good stuff to focus on.&lt;/p&gt;

&lt;p&gt;I enjoyed LPC, and especially the audio MC a lot. The discussions during the
MC were lively, focussed and very enlightening. Much better than at others
conferences I have been to the information flow was two-ways: instead of just
having a speaker who talks about stuff and attendees that listen to them, here
all talks were very interactive -- a lot of people in the audience had
something to say, and the others did benefit from it.&lt;/p&gt;

&lt;p&gt;LPC organization was flawless, Portland is awesome. The food was good, too.
To summarize: I am happy, very happy! I look forward for another iteration next year and hope we'll be able to
have an audio MC then, too.&lt;/p&gt;

&lt;p&gt;LPC organizers: rock on! Takashi, Jonathan: thank you very much for your
participation in the Audio MC!&lt;/p&gt;

&lt;p&gt;(If you are not subscribed to LWN but want to read the article linked above, ping me, I can hand out a few free links. Alternatively, wait for thursday and it will be available for free.)&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 22 Sep 2008 02:51:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-09-22:/blog/projects/lpc-summary.html</guid><category>projects</category></item><item><title>Audio BoF</title><link>https://0pointer.net/blog/projects/audio-bod-lpc.html</link><description>
                
&lt;p&gt;To whom it may concern: there'll be an Audio BoF tomorrow (Thu) at the &lt;a href="http://linuxplumbersconf.org/"&gt;Linux Plumbers Conference&lt;/a&gt;, starting at 4
pm. Dont miss it.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 18 Sep 2008 00:03:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-09-18:/blog/projects/audio-bod-lpc.html</guid><category>projects</category></item><item><title>New libcanberra backends</title><link>https://0pointer.net/blog/projects/canberra-oh-eight.html</link><description>
                
&lt;p&gt;I released &lt;a href="http://0pointer.de/lennart/projects/libcanberra/"&gt;libcanberra 0.8&lt;/a&gt; a
few hours ago. Biggest changes are some portability fixes for Solaris/FreeBSD,
inclusion of an OSS backend (contributed by Joe Marcus Clarke) and a
GStreamer backend (contributed by Marc-Andr&amp;eacute; Lureau). This will hopefully make
&lt;a href="http://mail.gnome.org/archives/desktop-devel-list/2008-August/msg00044.html"&gt;certain doubts&lt;/a&gt; regarding libcanberra void.&lt;/p&gt;

&lt;p&gt;Oh, and &lt;a href="http://0pointer.de/lennart/projects/libcanberra/"&gt;libcanberra now has a homepage&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 28 Aug 2008 22:01:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-08-28:/blog/projects/canberra-oh-eight.html</guid><category>projects</category></item><item><title>PulseAudio on Transifex</title><link>https://0pointer.net/blog/projects/pa-on-tx.html</link><description>
                
&lt;p&gt;Thanks to &lt;a href="http://dimitris.glezos.com/weblog"&gt;Dimitris Glezos&lt;/a&gt;
&lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; and its auxiliary tools are
now available on &lt;a href="https://translate.fedoraproject.org/submit/"&gt;Fedora's Transifex&lt;/a&gt; for
translation. If you want to contribute translations, please submit them via
Transifex, which will then result in direct commits to our upstream source
code repositories -- without further delay or workload on my side. Submission via
other ways (bug report, mail ...) will no longer be accepted.&lt;/p&gt;

&lt;p&gt;Submit your translations &lt;i&gt;now&lt;/i&gt; &lt;a href="https://translate.fedoraproject.org/submit/module/pulseaudio/"&gt;for
PulseAudio&lt;/a&gt;, &lt;a href="https://translate.fedoraproject.org/submit/module/pavucontrol"&gt;for
the volume control&lt;/a&gt;, and &lt;a href="https://translate.fedoraproject.org/submit/module/paprefs"&gt;for
the preferences dialog&lt;/a&gt;. And while we are at it, &lt;a href="https://translate.fedoraproject.org/submit/module/avahi"&gt;Avahi's waiting
for your translations, too&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 28 Aug 2008 21:35:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-08-28:/blog/projects/pa-on-tx.html</guid><category>projects</category></item><item><title>Scott,</title><link>https://0pointer.net/blog/projects/apple-development-platform.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.netsplit.com/2008/08/11/development-platform/"&gt;in
contrast to what you say&lt;/a&gt; the Apple audio stack (CoreAudio) is far less
streamlined that it might appear on first sight. The different APIs that make
up the Apple audio stack are far more redundant than you might think. Also,
they are different in programming style, and you can list at least as many
seperate components for different areas of audio with different API/naming
styles as you just did for the Linux audio stack.&lt;/p&gt;

&lt;p&gt;Listing two components of the Linux audio stack that are considered
obsolete these days, and listing one item twice doesn't really help making your
post unassailable.&lt;/p&gt;

&lt;p&gt;Having said that, yes, our Linux audio stack is still chaotic,
redundant, badly documented and incomplete. You are very welcome to help fixing
this. But just doing a bit PR and sticking a single name on the sum of it all doesn't
even touch the real problems we have with the audio APIs on Linux.&lt;/p&gt;

&lt;p&gt;Free software development is in its very essence distributed. The fact that
our APIs sometimes appear a bit higgledy-piggledy is probably just an
inevitable consequence of this.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 12 Aug 2008 20:02:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-08-12:/blog/projects/apple-development-platform.html</guid><category>projects</category></item><item><title>String Pools</title><link>https://0pointer.net/blog/projects/string-pools.html</link><description>
                
&lt;p&gt;In part 2.4.3 of Ulrich Drepper's excellent &lt;i&gt;&lt;a href="http://people.redhat.com/drepper/dsohowto.pdf"&gt;How To Write Shared
Libraries&lt;/a&gt;&lt;/i&gt; (which unfortunately is a bit out-of-date these days) Ulrich
suggests replacing arrays of constant strings by a single concatenated string
plus an index lookup table, to avoid unnecessary relocations during startup of
ELF programs. Maintaining this &lt;i&gt;string pool&lt;/i&gt; is however troublesome,
it is hard to read and difficult to edit. In appendix B Ulrich
lists an example C excerpt which contains some code for simplifying the
maintaining of such strings pools, after an idea from Bruno Haible. In my
opinion however that suggestion is not that much simpler, and requires
splitting off the actual strings into a seperate source file. Ugly!&lt;/p&gt;

&lt;p&gt;Some Free Software uses string pools to speed up relocation, e.g. &lt;a href="http://svn.gnome.org/viewvc/gtk%2B/trunk/gdk/x11/gdksettings.c?view=markup"&gt;GTK+&lt;/a&gt;.
Some development tools like &lt;a href="http://www.gnu.org/software/gperf/manual/html_node/Gperf-Declarations.html"&gt;gperf&lt;/a&gt;
contain support for string pools.&lt;/p&gt;

&lt;p&gt;All solutions for string pool maintaining I could find on the Internet were not exactly
beautiful. Either they were completely manual, manual plus a validity checking
tool, or very very cumbersome. Googling around I was unable to find a satisfactory tool for this purpose&lt;sup&gt;[1]&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;After &lt;a href="http://blog.flameeyes.eu/"&gt;Diego Petteno&lt;/a&gt; complained about
my heavy use of arrays of constant strings in &lt;a href="http://git.0pointer.de/?p=libatasmart.git"&gt;libatasmart&lt;/a&gt; I sat down to
change the situation, and wrote &lt;tt&gt;&lt;a href="http://git.0pointer.de/?p=libatasmart.git;a=blob;f=strpool.c;hb=master"&gt;strpool.c&lt;/a&gt;&lt;/tt&gt;,
a simple parser for a very, very minimal subset of C, written in plain ANSI C.
It looks for two special comment markers &lt;tt&gt;/* %STRINGPOOLSTART% */&lt;/tt&gt; and
&lt;tt&gt;/* %STRINGPOOLSTOP% */&lt;/tt&gt;, moves all immediate strings between those
markers into a common string pool and rewrites the input with the strings
replaced by indexes. Code accessing those strings must use the
special &lt;tt&gt;_P()&lt;/tt&gt; macro. With these minimal changes to a
source file, passing it through &lt;tt&gt;strpool.c&lt;/tt&gt; will automatically rewrite
it to a string-poolized version. The nice thing about this is that the
necessary changes in the source are minimal, and the code stays compilable with
and without passing it through the &lt;tt&gt;strpool.c&lt;/tt&gt; preprocessor.&lt;/p&gt;

&lt;p&gt;Here's an example. First the original non-string-poolized version:&lt;/p&gt;

&lt;pre&gt;
static const char* const table[] = {
	"waldo",
	"uxknurz",
	"foobar",
	"fubar"
};

static int main(int argc, char* argv[]) {
	printf("%s\n", table[2]);
	return 1;
}
&lt;/pre&gt;

&lt;p&gt;For later use with &lt;tt&gt;strpool.c&lt;/tt&gt; we change this like this:&lt;/p&gt;

&lt;pre&gt;
&lt;b&gt;#ifndef STRPOOL
#define _P(x) x
#endif&lt;/b&gt;

&lt;b&gt;/* %STRINGPOOLSTART% */&lt;/b&gt;
static const char* const table[] = {
	"waldo",
	"uxknurz",
	"foobar",
	"fubar"
};
&lt;b&gt;/* %STRINGPOOLSTOP% */&lt;/b&gt;

static int main(int argc, char* argv[]) {
	printf("%s\n", &lt;b&gt;_P&lt;/b&gt;(table[2]));
	return 1;
}
&lt;/pre&gt;

&lt;p&gt;When passed through &lt;tt&gt;strpool.c&lt;/tt&gt; this will be rewritten as:&lt;/p&gt;

&lt;pre&gt;
&lt;b&gt;/* Saved 3 relocations, saved 0 strings (0 b) due to suffix compression. */
static const char _strpool_[] =
	"waldo\0"
	"uxknurz\0"
	"foobar\0"
	"fubar\0";
#ifndef STRPOOL
#define STRPOOL
#endif
#ifndef _P
#define _P(x) (_strpool_ + ((x) - (const char*) 1))
#endif&lt;/b&gt;

#ifndef STRPOOL
#define _P(x) x
#endif

/* %STRINGPOOLSTART% */
static const char* const table[] = {
	&lt;b&gt;((const char*) 1)&lt;/b&gt;,
	&lt;b&gt;((const char*) 7)&lt;/b&gt;,
	&lt;b&gt;((const char*) 15)&lt;/b&gt;,
	&lt;b&gt;((const char*) 22)&lt;/b&gt;
};
/* %STRINGPOOLSTOP% */

static int main(int argc, char* argv[]) {
	printf("%s\n", _P(table[2]));
	return 1;
}
&lt;/pre&gt;

&lt;p&gt;All three versions can be compiled directly with gcc. However, the version
that was passed through &lt;tt&gt;strpool.c&lt;/tt&gt; compresses the number of
relocations for the table array from 4 to 1. Which isn't much of a
difference, but the larger your tables are the more relevant the difference in
the number of necessary relocations gets.&lt;/p&gt;

&lt;p&gt;A more realistic example is &lt;a href="http://git.0pointer.de/?p=libatasmart.git;a=blob;f=atasmart.c;hb=master"&gt;atasmart.c&lt;/a&gt; which after being preprocessed with &lt;tt&gt;strpool.c&lt;/tt&gt; looks like &lt;a href="http://0pointer.de/public/atasmart.strpool.c"&gt;this&lt;/a&gt;. In this specific example the number of necessary startup relocations goes down from &gt; 100 to 9.&lt;/p&gt;

&lt;p&gt;I am note sure if the parser is 100% correct, but it works fine with all sources I tried. It even does suffix compression like gcc does for normal strings too.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Or maybe I just suck in googling? Anyone has a suggestion for such a tool?&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 25 Jul 2008 23:32:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-07-25:/blog/projects/string-pools.html</guid><category>projects</category></item><item><title>PulseAudio 0.9.11 released</title><link>https://0pointer.net/blog/projects/pulseaudio-0.9.11.html</link><description>
                
&lt;p&gt;&lt;a href="https://tango.0pointer.de/pipermail/pulseaudio-discuss/2008-July/002083.html"&gt;I just relased PulseAudio 0.9.11&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's an awesome release. To learn more about why, read the linked email, and &lt;a href="http://0pointer.de/blog/projects/pulse-glitch-free.html"&gt;this&lt;/a&gt; and &lt;a href="http://0pointer.de/blog/projects/jeffrey-stedfast.html"&gt;maybe this blog story&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pulseaudio.org/"&gt;&lt;img src="http://pulseaudio.org/chrome/site/patitle.png" width="345" height="70" style="border: 0" alt="PulseAudio logo" /&gt;&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 24 Jul 2008 15:32:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-07-24:/blog/projects/pulseaudio-0.9.11.html</guid><category>projects</category></item><item><title>Linux Plumbers Conference CFP Extended!</title><link>https://0pointer.net/blog/projects/plumbersconf-2.html</link><description>
                
&lt;p&gt;The &lt;a href="http://www.linuxplumbersconf.org/cfp/"&gt;Call for Papers&lt;/a&gt; for
the &lt;a href="http://www.linuxplumbersconf.org/"&gt;Linux Plumbers Conference&lt;/a&gt;
in September in Portland, Oregon &lt;a href="http://lwn.net/Articles/291189/"&gt;has been extended&lt;/a&gt; until &lt;b&gt;July 31st 2008&lt;/b&gt;. It's a conference
about the core infrastructure of Linux systems: the part of the system where
userspace and the kernel interface. It's the first conference where the focus
is specifically on getting together the kernel people who work on the
userspace interfaces and the userspace people who have to deal with kernel
interfaces. It's supposed to be a place where all the people doing
infrastructure work sit down and talk, so that each other understands better
what the requirements and needs of the other are, and where we can work
towards fixing the major problems we currently have with our lower-level
APIs.&lt;/p&gt;

&lt;p&gt;I am running the Audio microconf of the Plumbers Conference. Audio
infrastructure on Linux is still heavily fragmented. Pro, desktop and embedded worlds are
almost completely seperate worlds. While we have quite good driver support the
user experience is far from perfect, mostly due because our infrastructure is
so balkanized. Join us at the Plumbers Conference and help to fix this! If you are doing &lt;b&gt;audio infrastructure work&lt;/b&gt; on Linux, make sure to attend and &lt;b&gt;submit a paper!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://linuxplumbersconf.org/register/"&gt;Sign up soon!&lt;/a&gt; &lt;a href="http://linuxplumbersconf.org/cfp/"&gt;Send in your paper early!&lt;/a&gt; The conference is expected to sell out pretty quickly!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.linuxplumbersconf.org"&gt;&lt;img style="border: 0" src="http://www.linuxplumbersconf.org/images/banner.png" alt="Plumbers Logo" width="475" height="88" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in Portland!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 23 Jul 2008 13:39:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-07-23:/blog/projects/plumbersconf-2.html</guid><category>projects</category></item><item><title>Oh, Solomon! He has outdone you!</title><link>https://0pointer.net/blog/photos/istanbul-domes.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/istanbul-domes"&gt;&lt;img src="http://0pointer.de/static/domes-many" width="800" height="219" alt="Domes" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wide-angle lenses are a great invention.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 20 Jul 2008 23:29:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-07-20:/blog/photos/istanbul-domes.html</guid><category>photos</category></item><item><title>PulseAudio FUD</title><link>https://0pointer.net/blog/projects/jeffrey-stedfast.html</link><description>
                
&lt;p&gt;&lt;b&gt;Jeffrey Stedfast&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Jeffrey Stedfast seems to have made it his new &lt;a href="http://jeffreystedfast.blogspot.com/2008/06/pulseaudio-solution-in-search-of.html"&gt;hobby&lt;/a&gt;
&lt;a href="http://jeffreystedfast.blogspot.com/2008/07/more-pulseaudio-problems.html"&gt;to&lt;/a&gt;
&lt;a href="http://jeffreystedfast.blogspot.com/2008/07/pulseaudio-again.html"&gt;bash&lt;/a&gt;
&lt;a href="http://jeffreystedfast.blogspot.com/2008/07/pulseaudio-i-told-you-so.html"&gt;PulseAudio&lt;/a&gt;.
In a series of very negative blog postings he flamed my software and hence me
in best NotZed-like fashion.  Particularly interesting in this case is the
fact that he apologized to me privately on IRC for this behaviour shortly
after his first posting when he was critizised on &lt;tt&gt;#gnome-hackers&lt;/tt&gt; --
only to continue flaming and bashing in more blog posts shortly after. Flaming
is very much part of the Free Software community I guess. A lot of people do
it from time to time (including me). But maybe there are better places for
this than Planet Gnome. And maybe doing it for days is not particularly nice.
And maybe flaming sucks in the first place anyway.&lt;/p&gt;

&lt;p&gt;Regardless what I think about Jeffrey and his behaviour on Planet Gnome,
let's have a look on his trophies, the five "bugs" he posted:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://bugzilla.gnome.org/show_bug.cgi?id=542296"&gt;Not directly related to PulseAudio itself.&lt;/a&gt; Also, finding errors in code that is related to esd is not exactly the most difficult thing in the world.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bugzilla.gnome.org/show_bug.cgi?id=542391"&gt;The same theme&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pulseaudio.org/ticket/320"&gt;Fixed 3 months ago&lt;/a&gt;. It is certainly not my fault that this isn't available in Jeffrey's distro.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pulseaudio.org/ticket/322"&gt;A real, valid bug report&lt;/a&gt;. Fixed in git a while back, but not available in any released version. May only be triggered under heavy load or with a bad high-latency scheduler.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pulseaudio.org/ticket/323"&gt;A valid bug, but not really in PulseAudio&lt;/a&gt;. Mostly caused because the ALSA API and PA API don't really match 100%.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;OK, Jeffrey found a real bug, but I wouldn't say this is really enough to make all the fuss about. Or is it?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Why PulseAudio?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Jeffrey wrote something about '&lt;i&gt;solution looking for a problem&lt;/i&gt;' when
speaking of PulseAudio. While that was certainly not a nice thing to say it
however tells me one thing: I apparently didn't manage to communicate well
enough why I am doing PulseAudio in the first place. So, why am I doing it then?&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;There's so much more a good audio system needs to provide than just the
most basic mixing functionality. Per-application volumes, moving streams
between devices during playback, positional event sounds (i.e. click on the
left side of the screen, have the sound event come out through the left
speakers), secure session-switching support, monitoring of sound playback
levels, rescuing playback streams to other audio devices on hot unplug,
automatic hotplug configuration, automatic up/downmixing stereo/surround,
high-quality resampling, network transparency, sound effects, simultaneous
output to multiple sound devices are all features PA provides right now, and
what you don't get without it. It also provides the infrastructure for
upcoming features like volume-follows-focus, automatic attenuation of music on
signal on VoIP stream, UPnP media renderer support, Apple RAOP support,
mixing/volume adjustments with dynamic range compression, adaptive volume of
event sounds based on the volume of music streams, jack sensing, switching
between stereo/surround/spdif during runtime, ...&lt;/li&gt;

&lt;li&gt;And even for the most basic mixing functionality plain ALSA/dmix is not
really everlasting happiness. Due to the way it works all clients are forced
to use the same buffering metrics all the time, that means all clients are
limited in their wakeup/latency settings. You will burn more CPU than
necessary this way, keep the risk of drop-outs unnecessarily high and still
not be able to make clients with low-latency requirements happy. &lt;a href="http://0pointer.de/blog/projects/pulse-glitch-free.html"&gt;'Glitch-Free'
PulseAudio&lt;/a&gt; fixes all this. Quite frankly I believe that 'glitch-free'
PulseAudio is the single most important killer feature that should be enough
to convince everyone why PulseAudio is the right thing to do. Maybe people
actually don't know that they want this. But they absolutely do, especially
the embedded people -- if used properly it is a must for power-saving during
audio playback. It's a pity that how awesome this feature is you cannot
directly see from the user interface.&lt;sup&gt;[1]&lt;/sup&gt;&lt;/li&gt;

&lt;li&gt;PulseAudio provides compatibility with a lot of sound systems/APIs that bare ALSA
or bare OSS don't provide.&lt;/li&gt;

&lt;li&gt;And last but not least, I love breaking Jeffrey's audio. It's just soo much fun, you really have to try it! ;-)&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;If you want to know more about why I think that PulseAudio is an important part of the modern Linux desktop audio stack, please &lt;a href="http://0pointer.de/public/foss.in-pulse.pdf"&gt;read my slides from FOSS.in 2007&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Misconceptions&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Many people (like Jeffrey) wonder why have software mixing at all if you
have hardware mixing? The thing is, hardware mixing is a thing of the past,
modern soundcards don't do it anymore. Precisely for doing things like mixing
in software SIMD CPU extensions like SSE have been invented. Modern sound
cards these days are kind of "dumbed" down, high-quality DACs. They don't do
mixing anymore, many modern chips don't even do volume control anymore.
Remember the days where having a Wavetable chip was a killer feature of a
sound card? Those days are gone, today wavetable synthesizing is done almost
exlcusively in software -- and that's exactly what happened to hardware mixing
too. And it is good that way. In software mixing is is much easier to do
fancier stuff like DRC which will increase quality of mixing. And modern CPUs provide
all the necessary SIMD command sets to implement this efficiently.&lt;/p&gt;

&lt;p&gt;Other people believe that JACK would be a better solution for the problem.
This is nonsense. JACK has been designed for a very different purpose. It is
optimized for low latency inter-application communication. It requires
floating point samples, it knows nothing about channel mappings, it depends on
every client to behave correctly. And so on, and so on. It is a sound server
for audio production. For desktop applications it is however not well suited.
For a desktop saving power is very important, one application misbehaving
shouldn't have an effect on other application's playback; converting from/to
FP all the time is not going to help battery life either. Please understand
that for the purpose of pro audio you can make completely different
compromises than you can do on the desktop. For example, while having
'glitch-free' is great for embedded and desktop use, it makes no sense at all
for pro audio, and would only have a drawback on performance. So, please stop
bringing up JACK again and again. It's just not the right tool for desktop
audio, and this opinion is shared by the JACK developers themselves. &lt;/p&gt;

&lt;p&gt;Jeffrey thinks that audio mixing is nothing for userspace. Which is
basically what OSS4 tries to do: mixing in kernel space. However, the future
of PCM audio is floating points. Mixing them in kernel space is problematic because (at least on Linux) FP in kernel space is a no-no.
Also, the kernel people made clear more than once that maths/decoding/encoding like this
should happen in userspace. Quite honestly, doing the mixing in kernel space
is probably one of the primary reasons why I think that OSS4 is a bad idea.
The fancier your mixing gets (i.e. including resampling, upmixing, downmixing,
DRC, ...) the more difficulties you will have to move such a complex,
time-intensive code into the kernel.&lt;/p&gt;

&lt;p&gt;Not everytime your audio breaks it is alone PulseAudio's fault. For
example, the original flame of Jeffrey's was about the low volume that he
experienced when running PA. This is mostly due to the suckish way we
initialize the default volumes of ALSA sound cards. Most distributions have
simple scripts that initialize ALSA sound card volumes to fixed values like
75% of the available range, without understanding what the range or the
controls actually mean. This is actually a very bad thing to do. Integrated
USB speakers for example tend export the full amplification range via the
mixer controls. 75% for them is incredibly loud. For other hardware (like
apparently Jeffrey's) it is too low in volume. How to fix this has been
discussed on the ALSA mailing list, but no final solution has been presented
yet. Nonetheless, the fact that the volume was too low, is completely
unrelated to PulseAudio.&lt;/p&gt;

&lt;p&gt;PulseAudio interfaces with lower-level technologies like ALSA on one hand,
and with high-level applications on the other hand. Those systems are not
perfect. Especially closed-source applications tend to do very evil things
with the audio APIs (Flash!) that are very hard to support on virtualized
sound systems such as PulseAudio [2]. However, things are getting better. &lt;a href="http://pulseaudio.org/wiki/AlsaIssues"&gt;My list of issues I found in
ALSA&lt;/a&gt; is getting shorter. Many applications have already been fixed.&lt;/p&gt;

&lt;p&gt;The reflex "my audio is broken it must be PulseAudio's fault" is certainly
easy to come up with, but it certainly is not always right.&lt;/p&gt;

&lt;p&gt;Also note that -- like many areas in Free Software -- development of the
desktop audio stack on Linux is a bit understaffed. AFAIK there are only two
people working on ALSA full-time and only me working on PulseAudio and other
userspace audio infrastructure, assisted by a few others who supply code and patches
from time to time, some more and some less.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;More Breakage to Come&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I now tried to explain why the audio experience on systems with PulseAudio
might not be as good as some people hoped, but what about the future? To be
frank: the next version of PulseAudio (0.9.11) will break even more things.
The 'glitch-free' stuff mentioned above uses quite a few features of the
underlying ALSA infrastructure that apparently noone has been using before --
and which just don't work properly yet on all drivers. And there are quite a
few drivers around, and I only have a very limited set of hardware to test
with.  Already I know that the some of the most popular drivers (USB and HDA)
do not work entirely correctly with 'glitch-free'.&lt;/p&gt;

&lt;p&gt;So you ask why I plan to release this code knowing that it will break
things? Well, it works on some hardware/drivers properly, and for the others I
know work-arounds to get things to work. And 0.9.11 has been delayed for too
long already. Also I need testing from a bigger audience. And it is not so
much 0.9.11 that is buggy, it is the code it is based on. 'Glitch-free' PA
0.9.11 is going to part of Fedora 10. Fedora has always been more bleeding
edge than other other distributions. Picking 0.9.11 just like that for an
'LTS' release might however be a not a good idea.&lt;/p&gt;

&lt;p&gt;So, please bear with me when I release 0.9.11. Snapshots have already
been available in Rawhide for a while, and hell didn't freeze over.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The Distributions' Role in the Game&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Some distributions did a better job adopting PulseAudio than others. On the
good side I certainly have to list Mandriva, Debian&lt;sup&gt;[3]&lt;/sup&gt;, and
Fedora&lt;sup&gt;[4]&lt;/sup&gt;. OTOH Ubuntu didn't exactly do a stellar job. They didn't
do their homework. Adopting PA in a distribution is a fair amount of work,
given that it interfaces with so many different things at so many different
places. The integration with other systems is crucial. The information was all
out there, communicated on the wiki, the mailing lists and on the PA IRC
channel. But if you join and hang around on neither, then you won't get the
memo. To my surprise when Ubuntu adopted PulseAudio they moved into one of their
'LTS' releases rightaway &lt;sup&gt;[5]&lt;/sup&gt;. Which I guess can be called gutsy --
on the background that I work for Red Hat and PulseAudio is not part of RHEL
at this time. I get a lot of flak from Ubuntu users, and I am pretty sure the
vast amount of it is undeserving and not my fault.&lt;/p&gt;

&lt;p&gt;Why Jeffrey's distro of choice (SUSE?) didn't package &lt;tt&gt;pavucontrol&lt;/tt&gt; 0.9.6
although it has been released months ago I don't know. But there's &lt;a href="http://www.pulseaudio.org/ticket/320"&gt;certainly no reason to whine about
that to me&lt;/a&gt; and bash me for it.&lt;/p&gt;

&lt;p&gt;Having said all this -- it's easy to point to other software's faults or
other people's failures. So, admitting this, PulseAudio is certainly not
bug-free, far from that. It's a relatively complex piece of software
(threading, real-time, lock-free, sensitive to timing, ...), and every
software has its bugs. In some workloads they might be easier to find than it
others. And I am working on fixing those which are found. I won't forget any
bug report, but the order and priority I work on them is still mostly up to me
I guess, right? There's still a lot of work to do in desktop audio, it will
take some time to get things completely right and complete. &lt;/p&gt;

&lt;p&gt;Calls for "audio should just work (tm)" are often heard. But if you don't
want to stick with a sound system that was state of the art in the 90's for
all times, then I fear things *will have* to break from time to time. And
Jeffrey, I have no idea what you are actually hacking on. Some people
mentioned something with Evolution. If that's true, then quite honestly,
&lt;i&gt;"email should just work"&lt;/i&gt;, too, shouldn't it? Evolution is not exactly
famous for it's legendary bug-freeness and stability, or did I miss something?
Maybe &lt;i&gt;you&lt;/i&gt; should be the one to start with making things "just work", especially since
Evolution has been around for much longer already.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Back to Work&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Now that I responded to Jeffrey's FUD I think we all can go back to work
and end this flamefest! I wish people would actually try to understand
things before writing an insulting rant -- without the slightest clue -- but
with words like "clusterfuck". I'd like to thank all the people who commented
on Jeffrey's blog and basically already said what I wrote here
now.&lt;/p&gt;

&lt;p&gt;So, and now I am off hacking a bit on PulseAudio a bit more -- or should
I say in Jeffrey's words: on my &lt;i&gt;clusterfuck&lt;/i&gt; that is an &lt;i&gt;epic fail&lt;/i&gt; and that &lt;i&gt;no desktop user needs&lt;/i&gt;?&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] BTW 'glitch-free' is nothing I invented, other OS have been doing something
like this for quite a while (Vista, Mac OS). On Linux however, PulseAudio is
the first and only implementation (at least to my knowledge).&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] In fact, Flash 9 can not be made fully working on PulseAudio.
This is because the way Flash destructs it's driver backends is racy.
Unfixably racy, from external code. Jeffrey complained about Flash instability
in his second post. This is unfair to PulseAudio, because I cannot fix this.
This is like complaining that X crashes when you use binary-only
&lt;tt&gt;fglrx&lt;/tt&gt;.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[3] To Debian's standards at least. Since development of Debian is
very distributed the integration of such a system as PulseAudio is much more
difficult since in touches so many different packages in the system that are
kind of private property by a lot of different maintainers with different
views on things.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[4] I maintain the Fedora stuff myself, so I might be a bit biased on this one... ;-)&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[5] I guess Ubuntu sees that this was a bit too much too early, too.
At least that's how I understood my invitation to UDS in Prague. Since that
summit I haven't heard anything from them anymore, though.&lt;/small&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 18 Jul 2008 17:02:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-07-18:/blog/projects/jeffrey-stedfast.html</guid><category>projects</category></item><item><title>Topkapi Tiles</title><link>https://0pointer.net/blog/photos/topkapi-tiles.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/public/tiles-gimped.jpg"&gt;&lt;img src="http://0pointer.de/public/tiles-preview.jpg" width="450" height="450" alt="Topkapi Tiles" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tiles in the Topkap&amp;#x131; Saray&amp;#x131; in &amp;#x130;stanbul, Turkey. This
time the symmetry is perfect. Thanks to Gimp.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 17 Jul 2008 02:45:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-07-17:/blog/photos/topkapi-tiles.html</guid><category>photos</category></item><item><title>Topkapi</title><link>https://0pointer.net/blog/photos/topkapi.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/public/topkapi-reduced.jpg"&gt;&lt;img src="http://0pointer.de/public/topkapi-preview.jpg" width="450" height="450" alt="Topkapi Cupola" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the cupolas in the Topkap&amp;#x131; Saray&amp;#x131; in &amp;#x130;stanbul, Turkey. In one of the inner rings is a certain asymmetry. I wonder why?&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 17 Jul 2008 01:05:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-07-17:/blog/photos/topkapi.html</guid><category>photos</category></item><item><title>Conferences and Laptop Bags</title><link>https://0pointer.net/blog/projects/schwag-bags.html</link><description>
                
&lt;p&gt;Conference organizers! Be attentive to the signs of times! There's a trend towards smaller laptops. Don't hand out laptop bags where those newer laptops (such as the X60) fits in two or more times! Lighter is better!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 15 Jul 2008 15:02:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-07-15:/blog/projects/schwag-bags.html</guid><category>projects</category></item><item><title>The Thing with Planet Fedora</title><link>https://0pointer.net/blog/fedora-people.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/fedora-planet.html"&gt;A while
ago&lt;/a&gt; I posted a story on my blog which then appeared on Fedora Planet. In it
I expressed my doubts on the usefulness of the planet, due to its low
signal-to-noise ratio, due to the babel-like mix of languages. As a response to
this posting I got a lot of really dumb comments, both directly on the blog
story and by email. I was called "intolerant", a "Nazi", "stupid", that I
should "revise my geography", that I should go "fuck myself", that I apparently
thought that the "world was USA property" &lt;sup&gt;[1]&lt;/sup&gt;.  Back then I thought
that there were just a few morons in the peripherals of the community. But now, since &lt;a href="http://nicubunu.blogspot.com/2008/07/mixed-stuff-fonts-photos-games.html"&gt;this
incident happened&lt;/a&gt; I started to wonder if we might actually have a bigger
problem in the community.&lt;/p&gt;

&lt;p&gt;I guess this is a good opportunity to pimp David Arlie's alternative
&lt;a href="http://www.kernelplanet.org/fedora/"&gt;Fedora aggregator&lt;/a&gt; which I find a very useful replacement for Fedora Planet.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] I am wondering though why people think that I am a monoglot
american? I am not. Neither monoglot, nor american. And if suggesting that I
was was intended as an insult, then I can only say that it insulted me far
less than the insulter might have thought...&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 14 Jul 2008 23:08:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-07-14:/blog/fedora-people.html</guid><category>misc</category></item><item><title>Being Smart</title><link>https://0pointer.net/blog/projects/being-smart.html</link><description>
                
&lt;p&gt;Last weekend I set myself the task to write an &lt;a href="http://en.wikipedia.org/wiki/S.M.A.R.T."&gt;ATA S.M.A.R.T.&lt;/a&gt; (i.e. hard
disk health monitoring) reader and parser.  After spending some time reading
all kinds of &lt;a href="http://www.t13.org/"&gt;T13&lt;/a&gt; and &lt;a href="http://www.t10.org/"&gt;T10&lt;/a&gt; docs and a bit of hacking I now present
you the following new software:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;b&gt;&lt;tt&gt;libatasmart&lt;/tt&gt;:&lt;/b&gt; a lean, small and clean implementation of an ATA S.M.A.R.T.
reading and parsing library. It's fairly comprehensive, however I only support
a subset of the full S.M.A.R.T. set of functions: those parts which made sense to
me, not the esoteric stuff. &lt;a href="http://git.0pointer.de/?p=libatasmart.git;a=blob;f=atasmart.h"&gt;Here's the API&lt;/a&gt; and &lt;a href="http://git.0pointer.de/?p=libatasmart.git;a=blob;f=README"&gt;here's the README&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;skdump:&lt;/b&gt; a little tool that produces a similar output to &lt;tt&gt;smartctl
-a&lt;/tt&gt;, but uses &lt;tt&gt;libatasmart&lt;/tt&gt;.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;sktest:&lt;/b&gt; a little tool for starting/aborting S.M.A.R.T. self-tests, based on &lt;tt&gt;libatasmart&lt;/tt&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;gnome-disk-health-service:&lt;/b&gt; a little wrapper around
&lt;tt&gt;libatasmart&lt;/tt&gt; that exports its entire functionality via D-Bus, so that
unpriviliged processes can introspect a drive's health records, including
temperature, number of bad sectors and suchlike. This is written in Vala, which
BTW is awesome for doing D-Bus services. Actually after having done this once now I
really hope I will never have to write a D-Bus server without Vala again. I
also wrote a Vala &lt;tt&gt;.vapi&lt;/tt&gt; file for &lt;tt&gt;libatasmart&lt;/tt&gt; which is shipped in
its tarball.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;gnome-disk-health:&lt;/b&gt; a little tool that reads the S.M.A.R.T.
data from g-d-h-s and presents it in a pretty dialog. Includes support for
viewing attributes and starting self-tests and stuff. Also written with
Vala.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Why?&lt;/b&gt; You might ask what the point of all this stuff is where
&lt;a href="http://smartmontools.sourceforge.net/"&gt;smartmontools&lt;/a&gt; already
exists.  What I'd like to see on future GNOME desktops is that as soon as a
disk starts to fail a notification bubble pops up warning the user about this
fact, and suggesting that he makes backups and replaces the disk. For a tight
integration into the desktop, a S.M.A.R.T. implementation that is small, and not
C++, and a library (i.e. embeddable into other software with a sane interface)
is highly preferable. Also, stuff like distribution installers should link
against &lt;tt&gt;libatasmart&lt;/tt&gt; to warn the user about old, and defective disks
before he even starts the installation on them. (Hey, anaconda developers! That means you! It's a tiny library, and all you need to do is a single call: &lt;tt&gt;int sk_disk_smart_status(SkDisk *d, SkBool *good);&lt;/tt&gt;)&lt;/p&gt;

&lt;p&gt;Please note that I certainly don't plan to replace &lt;tt&gt;smartmontools&lt;/tt&gt;.
&lt;tt&gt;libatasmart&lt;/tt&gt; will always implement only a subset of S.M.A.R.T. If you want
the full set of functionality then please refer to &lt;tt&gt;smartmontools&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Where's this going?&lt;/b&gt; I plan to fully maintain &lt;tt&gt;libatasmart&lt;/tt&gt;
(including &lt;tt&gt;skdump&lt;/tt&gt; and &lt;tt&gt;sktest&lt;/tt&gt;) for the future. However
&lt;tt&gt;g-d-h&lt;/tt&gt; and &lt;tt&gt;g-d-h-s&lt;/tt&gt; will probably just bitrot in my repository
-- unless someone else wants to pick this up and maintain it.  The reason my
further interest in those tools is rather limited is that for the long run we
will hopefully will see davidz's &lt;a href="http://hal.freedesktop.org/docs/DeviceKit-disks/"&gt;DeviceKit-disks&lt;/a&gt; (&lt;a href="http://people.freedesktop.org/~david/gdu-smart-and-failing.png"&gt;screenhot&lt;/a&gt;)
changed to use this library for health monitoring. Then DK-d will export the
S.M.A.R.T. info on the bus, and a separate daemon would not be necessary anymore.
DK-d provides a single interface for all kinds of health parameters for
storage, including RAID health and suchlike. I thus think this is the way
forward and not g-d-h-s. (That should, of course, not hinder anyone to step up
and take up maintainership of g-d-h/g-d-h-s if he wants to. There might be good
reasons for doing so. Maybe because you need something to do, or because you
want a S.M.A.R.T. solution for the desktop now, and not wait until DeviceKit gets
pushed into all the distros).&lt;/p&gt;

&lt;p&gt;So, here's where you can get this stuff:&lt;/p&gt;

&lt;blockquote&gt;
	&lt;p&gt;&lt;tt&gt;git://git.0pointer.de/libatasmart.git&lt;/tt&gt;&lt;/p&gt;
	&lt;p&gt;&lt;tt&gt;git://git.0pointer.de/gnome-disk-health.git&lt;/tt&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="http://git.0pointer.de/"&gt;Browse the GIT repos.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will roll a 0.1 tarball of &lt;tt&gt;libatasmart&lt;/tt&gt; soon. I'd be thankful if people could run
&lt;tt&gt;skdump&lt;/tt&gt; on their disks and check if its output is basically the same as
&lt;tt&gt;smartctl -a&lt;/tt&gt;'s. Especially people with BE machines.&lt;/p&gt;

&lt;p&gt;Of course the most important part of a software announcement is always the screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/g-d-h"&gt;&lt;img src="http://0pointer.de/public/g-d-h-small" width="500" height="401" alt="Smart-Ass!" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;return -ETOOMANYDOTS;&lt;/tt&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 01 Jul 2008 23:43:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-07-01:/blog/projects/being-smart.html</guid><category>projects</category></item><item><title>On Version Control Systems</title><link>https://0pointer.net/blog/projects/on-version-control-systems.html</link><description>
                
&lt;p&gt;Here's what I have to say about today's state of version control systems in Free Software:&lt;/p&gt;

&lt;p&gt;We shouldn't forget that a VC system is just a development tool. Preferring
one over the other is nothing that has any direct influence on code quality, it
doesn't make your algorithms perform any better, or your applications look
prettier. It's just a tool. As such it should just do its job and get out of the
way. A programmer should have religious arguments about code quality, about
algorithms or about UIs, but what he certainly should not have is religious
arguments over the feature set of specific VCSes&lt;sup&gt;[1]&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Does this mean it doesn't matter at all which VCS to choose? No, of course
it does matter a lot. The step from traditional VCSes to DVCS is a major one, an
important one. Starting a fresh new Free Software project today and choosing
CVS or SVN is anachronistic at best.&lt;/p&gt;

&lt;p&gt;Which leaves of course the question, which DVCS to pick.  If you take the
"get out of the way" requirement seriously than there can only be one answer to
the question: GIT. Why? It certainly (still) has a steep learning curve, and a
steeper one than most other VC systems. But what is even harder to learn than
GIT is learning all of GIT, Mercurial, Monotone, Bizarre^H^H^H^H^H^H^HBazaar,
Darcs, Arch, SVK at the same time. If every project picked a different VCS
system, and you'd want to contribute to more than just a single project, then
you'd have to learn them all. And learning them all means learning them all not
very well. And needing to learn them all means scaring people away who don't
want to learn yet another VCS just to check out your code. Fragmentation in use of VCSes for Free Software projects hinders development. &lt;/p&gt;

&lt;p&gt;Which brings me to the main point I want to raise with this blog story:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;It is much more important to make contributing to Free Software projects
easy by choosing a VCS everyone knows well -- than it is to make it easy by
choosing a VCS that everyone could learn easily.&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, and which VCS is it that has a chance of qualifying as "everyone knows
well" and is a DVCS? I would say there is only one answer to the question: GIT.
Sure, there are some high-profile projects using HG (Mozilla, Java, Solaris),
but my impression is that the vast majority of projects that are central to
free desktops do use GIT.&lt;/p&gt;

&lt;p&gt;Certainly, some DVCSes might be nicer than others, there might be areas
where GIT is lacking in comparison to others, but those differences are tiny.
What matters more is not scaring contributors away by making it hard for them
to contribute by requiring them to learn yet another VCS.&lt;/p&gt;

&lt;p&gt;Yes, with CVS, SVN and GIT I think I have learned enough VC systems for now.
My hunger for learning further ones is exactly zero. Let me just code, and
don't make it hard for me by asking me to learn your favourite one, please.&lt;/p&gt;

&lt;p&gt;Or in other, frank words, if you start a new Open Source project today, and you
don't choose GIT as VCS then you basically ask potential
contributors to go away.&lt;/p&gt;

&lt;p&gt;ALSA recently switched from Mercurial to GIT. That was a good move.&lt;/p&gt;

&lt;p&gt;So, please stop discussing which DVCS is the best one. It doesn't matter. Picking one
that everyone knows is far more important.&lt;/p&gt;

&lt;p&gt;That's all I have to say.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Of course, unless he himself develops a VC system.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 21 Jun 2008 20:20:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-06-21:/blog/projects/on-version-control-systems.html</guid><category>projects</category></item><item><title>FOMS 2009 CFP</title><link>https://0pointer.net/blog/projects/foms-2009.html</link><description>
                
&lt;p&gt;And here's a &lt;a href="http://www.foms-workshop.org/foms2009/pmwiki.php/Main/CFP"&gt;another
conference CFP&lt;/a&gt;, this time for &lt;a href="http://www.foms-workshop.org/foms2009/"&gt;Foundations of Open Media
Software 2009&lt;/a&gt; (FOMS). It's simply the best conference about multimedia on
free systems. Period.&lt;/p&gt;

&lt;p&gt;It's the third iteration now, and the first two were
plain awesome, so don't miss this one. It happens in Hobart, Tasmania, next to linux.conf.au 2009.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.foms-workshop.org/foms2009/"&gt;&lt;img src="http://www.foms-workshop.org/foms2009/pub/skins/foms.png" width="170" height="170" alt="FOMS Logo" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Send in your paper! Attend! Spread the word!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 19 Jun 2008 21:25:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-06-19:/blog/projects/foms-2009.html</guid><category>projects</category></item><item><title>Linux Plumbers Conference CFP</title><link>https://0pointer.net/blog/projects/plumbersconf.html</link><description>
                
&lt;p&gt;The &lt;a href="http://www.linuxplumbersconf.org/cfp/"&gt;Call for Papers&lt;/a&gt; for
the &lt;a href="http://www.linuxplumbersconf.org/"&gt;Linux Plumbers Conference&lt;/a&gt;
in September in Portland is out now. It's a conference about the core
infrastructure of Linux systems: the part of the system where userspace and the
kernel interface. It's the first conference where the focus is specifically on
getting together the kernel people who work on the userspace interfaces and the
userspace people who have to deal with kernel interfaces. It's supposed to be a
place where all the people doing infrastructure work sit down and talk, so that
each other understands better what the requirements and needs of the other are,
and where we can work towards fixing the major problems we currently have with
our lower-level APIs.&lt;/p&gt;

&lt;p&gt;I am running the Audio microconf of the Plumbers Conference. Audio
infrastructure on Linux is still heavily fragmented. Pro, desktop and embedded worlds are
almost completely seperate worlds. While we have quite good driver support the
user experience is far from perfect, mostly due because our infrastructure is
so balkanized. Join us at the Plumbers Conference and help to fix this! &lt;b&gt;If you are doing audio infrastructure work on Linux, make sure to attend or -- even better -- submit a paper!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://linuxplumbersconf.org/register/"&gt;Sign up soon!&lt;/a&gt; &lt;a href="http://linuxplumbersconf.org/cfp/"&gt;Send in your paper early!&lt;/a&gt; The conference is expected to sell out pretty quickly!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.linuxplumbersconf.org"&gt;&lt;img src="http://www.linuxplumbersconf.org/images/banner.png" alt="Plumbers Logo" width="950" height="177" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in Portland!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 19 Jun 2008 16:53:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-06-19:/blog/projects/plumbersconf.html</guid><category>projects</category></item><item><title>How to convert a GIT SVN mirror into GIT upstream</title><link>https://0pointer.net/blog/projects/git-mirror-to-upstream.html</link><description>
                
&lt;p&gt;Yesterday &lt;a href="https://tango.0pointer.de/pipermail/pulseaudio-discuss/2008-June/001952.html"&gt;I did the final steps&lt;/a&gt; to convert all my SVN repositories to &lt;a href="http://git.0pointer.de/"&gt;GIT&lt;/a&gt; (including Avahi and PulseAudio). I had been running hot GIT mirrors of the SVN repositories for quite a while now. The last step was the switch to make them canonical upstream, and to disable the SVN repos.&lt;/p&gt;

&lt;p&gt;For future Google reference, here are the steps that are necessary to make an SVN GIT mirror into a proper GIT repo:&lt;/p&gt;

&lt;pre&gt;
# On the client:
$ git clone ssh://..../git/foobar foobar
$ cd foobar
$ git checkout trunk
$ git branch -m master
$ git push origin master
# This is a good time to edit the HEAD file on the server and replace its contents "ref: refs/heads/trunk" by "ref: refs/heads/master"
$ git push origin :trunk
&lt;/pre&gt;

&lt;p&gt;This will basically replace '&lt;tt&gt;trunk&lt;/tt&gt;' by '&lt;tt&gt;master&lt;/tt&gt;', and make it
the default when clients clone the repository. This will however not rename
tags from the &lt;tt&gt;git-svn&lt;/tt&gt; style to the GIT style. (Which I personally
think would be a bad idea anyway, BTW)&lt;/p&gt;

&lt;p&gt;Removing the &lt;tt&gt;origin&lt;/tt&gt; from the server's config file is a good idea, too, since the repo is now canonical upstream.&lt;/p&gt;

&lt;p&gt;Of course, afterwards you still need to create proper &lt;tt&gt;.gitignore&lt;/tt&gt;
files for the repositories. Just taking the value of the old
&lt;tt&gt;svn:ignore&lt;/tt&gt; property is a bad idea BTW, because &lt;tt&gt;.gitignore&lt;/tt&gt;
lists patterns that are used for the directory it is placed in &lt;i&gt;and
everything beneath&lt;/i&gt;, while &lt;tt&gt;svn:ignore&lt;/tt&gt; is not applied
recursively.&lt;/p&gt;

&lt;p&gt;And finally you need to remove all those &lt;tt&gt;$Id$&lt;/tt&gt; lines and suchlike
from all source files since they are kind of pointless on GIT. It is left as an
excercise to the user to craft a good sed or perl script to do this
automatically and recursively for an entire tree.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Lazyweb&lt;/b&gt;, do you have a good idea how to integrate &lt;tt&gt;mutt&lt;/tt&gt; and
&lt;tt&gt;git-am&lt;/tt&gt; best? I want a key in mutt I can press which will ask me for a
GIT directory and then call &lt;tt&gt;git-am --interactive&lt;/tt&gt; for the currently
selected email. Anyone got a good idea? Right now I am piping the mail from
&lt;tt&gt;mutt&lt;/tt&gt; to &lt;tt&gt;git-am&lt;/tt&gt;. But that sucks, because &lt;tt&gt;--interactive&lt;/tt&gt; refuses to work called like that
and because I cannot specify the git repo to apply this to.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 18 Jun 2008 17:29:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-06-18:/blog/projects/git-mirror-to-upstream.html</guid><category>projects</category></item><item><title>K lovers and event sounds</title><link>https://0pointer.net/blog/projects/k-lovers-and-event-sounds.html</link><description>
                
&lt;p&gt;OK, before more people complain that I didn't keep the KDE in the loop about
&lt;a href="http://0pointer.de/blog/projects/sixfold-announcement.html"&gt;all that
fancy event sound infrastructure work&lt;/a&gt;. The complaint is only partially
valid: stuff like the sound specs have been seen before by the KDE guys. And
for the rest it's just better to have something concrete to discuss about first instead of
just starting an unfocussed discussion about all the grand plans we might have without
ever having looked into actually implementing them.&lt;/p&gt;

&lt;p&gt;Shortly after I posted that last blog story of mine &lt;a href="http://article.gmane.org/gmane.comp.kde.devel.general/53475"&gt;I informed
the KDE guys&lt;/a&gt; about this, and asked for their comments and suggestions. And
&lt;a href="http://article.gmane.org/gmane.comp.kde.devel.general/53571"&gt;this is
my summary of those dicussions&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 12 Jun 2008 18:29:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-06-12:/blog/projects/k-lovers-and-event-sounds.html</guid><category>projects</category></item><item><title>A Sixfold Announcement</title><link>https://0pointer.net/blog/projects/sixfold-announcement.html</link><description>
                
&lt;p&gt;Let's have a small poll here: what is the most annoying feature of a modern
GNOME desktop? You got three options to choose from:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Event sounds, if they are enabled&lt;/li&gt;
&lt;li&gt;Event sounds, if they are enabled&lt;/li&gt;
&lt;li&gt;Event sounds, if they are enabled&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Difficult choice, right?&lt;/p&gt;

&lt;p&gt;In my pursuit to make this choice a little bit less difficult, I'd like to draw your attention to the following six announcements:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Announcement Number One: The XDG Sound Theming Specification&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Following closely the mechanisms of the &lt;a href="http://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html"&gt;XDG
Icon Theme Specification&lt;/a&gt; I may now announce you the &lt;a href="http://0pointer.de/public/sound-theme-spec.html"&gt;XDG Sound Theme
Specification&lt;/a&gt; which will hopefully be established as the future standard
for better event sound theming for free desktops. This project was started by
Patryk Zawadzki and is now maintained by Marc-Andr&amp;#233; Lureau.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Announcement Number Two: The XDG Sound Naming Specification&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;If we have a Sound Theming Specification, then we also need an &lt;a href="http://0pointer.de/public/sound-naming-spec.html"&gt;XDG Sound Naming
Specification&lt;/a&gt;, again drawing heavily from the original &lt;a href="http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html"&gt;XDG
Icon Naming Specification&lt;/a&gt;. It's based on some older &lt;i&gt;Bango&lt;/i&gt; work
(which seems to be a defunct project these days), and is also maintained by
Monsieur Lureau. The list of defined sounds is hopefully much more complete
than any previous work in this area for free desktops.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Announcement Number Three: The freedesktop Sound Theme&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Of course, what would the mentioned two standards be worth if there wasn't a
single implementation of them? So here I may now announce you the first
(rubbish) version of the &lt;a href="http://0pointer.de/public/sound-theme-freedesktop.tar.gz"&gt;XDG freedesktop
Sound Theme.&lt;/a&gt;. It's basically just a tarball with a number of symlinks
linking to the old &lt;tt&gt;gnome-audio&lt;/tt&gt; event sounds. It's only a very small
subset of the entire list of XDG sound names. My hope is that this initial
release will spark community contributions for a better, higher quality default
sound theme for free desktops. If you are some kind of musician or audio
technician I am happy to take your submissions!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Announcement Number Four: The libcanberra Event Sound API&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Ok, we now have those two specs, and an example theme, what else is missing
to make this stuff a success? Absolutely right, an actual implementation of the
sound theming logic! And this is what &lt;a href="http://git.0pointer.de/?p=libcanberra.git;a=summary"&gt;libcanberra&lt;/a&gt; is.
It is a very small and lean implementation of the specification. However, it is
also very powerful, and can be used in a much more elaborate way than previous
APIs. It's all about the central function called &lt;tt&gt;ca_context_play()&lt;/tt&gt;
which takes a NULL terminated list of string properties for the sound you want
to generate. How this looks like?&lt;/p&gt;

&lt;pre&gt;
{
	ca_context *c = NULL;

	/* Create a context for the event sounds for your application */
	ca_context_create(&amp;amp;c);

	/* Set a few application-global properties */
	ca_context_change_props(c,
	                        CA_PROP_APPLICATION_NAME, "An example",
				CA_PROP_APPLICATION_ID, "org.freedesktop.libcanberra.Test",
				CA_PROP_APPLICATION_ICON_NAME, "libcanberra-test",
			        NULL);

	/* ... */

	/* Trigger an event sound */
	ca_context_play(c, 0,
			CA_PROP_EVENT_ID, "button-pressed", /* The XDG sound name */
			CA_PROP_MEDIA_NAME, "The user pressed the button foobar",
			CA_PROP_EVENT_MOUSE_X, "555",
			CA_PROP_EVENT_MOUSE_Y, "666",
			CA_PROP_WINDOW_NAME, "Foobar Dialog",
			CA_PROP_WINDOW_ICON_NAME, "libcanberra-test-foobar-dialog",
			CA_PROP_WINDOW_X11_DISPLAY, ":0",
			CA_PROP_WINDOW_X11_XID, "4711",
			NULL);

	/* ... */

	ca_context_destroy(&amp;amp;c);
}
&lt;/pre&gt;

&lt;p&gt;So, the idea is pretty simple, it's all built around those sound event
properties. A few you initialize globally for your application, and some you
pass each time you actually want to trigger a sound. The properties listed
above are only a subset of the default ones that are defined. They can be
extended at any time.  Why is it good to attach all this information to those
event sounds? First, for a11y reasons, where visual feedback in addition of
audible feedback might be advisable. And then, if the underlying sound system
knows which window triggered the event it can take per-window volumes or other
settings into account. If we know that the sound event was triggered by a mouse
event, then the sound system could position the sound in space: i.e. if you
click a button on the left side of the screen, the event sound will come more
out of your left speaker, and if you click on the right, it will be positioned
nearer to the right speaker. The more information the underlying audio system
has about the event sound the fancier 'earcandy' it can do to enhance your user
experience with all kinds of audio effects.&lt;/p&gt;

&lt;p&gt;The library is thread-safe, brings no dependencies besides OGG Vorbis (and of
course a Libc), and whatever the used backend requires. The library can
support multiple different backends. Either you can compile a single one
directly into the &lt;tt&gt;libcanberra.so&lt;/tt&gt; library, or you can bind them at
runtime via shared objects. Right now, libcanberra supports ALSA, &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; and a null backend. The library is
designed to be portable, however only supports Linux right now. The idea is to
translate the XDG sound names into the sounds that are native the local
platform (i.e. to whatever API Windows or MacOS use natively for sound events).&lt;/p&gt;

&lt;p&gt;Besides all that fancy property stuff it also can do implicit on-demand
cacheing of samples in the sound server, cancel currently playing sounds,
notify an application when a sound finished to play and other features.&lt;/p&gt;

&lt;p&gt;My hope is that this piece of core desktop technology can be shared by both
GNOME and the KDE world.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/libcanberra-html/libcanberra-canberra.html"&gt;Check out the (complete!) documentation!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/libcanberra-0.1.tar.gz"&gt;Download libcanberra 0.1 now!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://git.0pointer.de/?p=libcanberra.git;a=blob;f=README;h=0e4c850be8761b77041f72b475a2b21ff78e30fb;hb=master"&gt;Read the README now!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Announcement Number Five: The libcanberra-gtk Sound Event Binding for Gtk+&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;If you compile libcanberra with Gtk+ support (optional), than you'll get an
additional library &lt;tt&gt;libcanberra-gtk&lt;/tt&gt; which provides a couple of
functions to simplify event sound generation from Gtk+ programs. It will
maintain a global libcanberra context, and provides a few functions that will
automatically fill in quite a few properties for you, so that you don't have to
fill them in manually. How does that look like? Deadly simple:&lt;/p&gt;

&lt;pre&gt;
{
	/* Trigger an event sound from a GtkWidget, will automaticall fill in CA_PROP_WINDOW_xxx */
	ca_gtk_play_for_widget(GTK_WIDGET(w), 0,
                               CA_PROP_EVENT_ID, "foobar-event",
			       CA_PROP_EVENT_DESCRIPTION, "foobar event happened",
			       NULL);

	/* Alternatively, triggger an event sound from a GdkEvent, will also fill in CA_PROP_EVENT_MOUSE_xxx  */
	ca_gtk_play_for_event(gtk_get_current_event(), 0
                              CA_PROP_EVENT_ID, "waldo-event",
			      CA_PROP_EVENT_DESCRIPTION, "waldo event happened",
			      NULL);
}
&lt;/pre&gt;

&lt;p&gt;Simple? Yes, deadly simple.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/libcanberra-html/libcanberra-canberra-gtk.html"&gt;Check out the (complete!) documentation!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Announcement Number Five: the libcanberra-gtk-module Gtk+ Module&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Okey, the example code for libcanberra-gtk is already very simple. Can we do
it even shorter? Yes!&lt;/p&gt;

&lt;p&gt;If you compile libcanberra with Gtk+ support, then you will also get a ne
GtkModule which will automatically hook into all kinds of events inside a Gtk+
program and generate sound events from them. You can have sounds when you press
a button, when you popup a menu or window, or when you select an item from a
list box. It's all done automatically, no further change in the program is
necessary. It works very similar to the old sound event code in libgnomeui, but
is far less ugly, much more complete, and most importantly, works for all Gtk+
programs, not just those which link against libgnomeui. To activate this feature $GTK_MODULES=libcanberra-gtk-module must be set. So, just for completeness sake, here's how the example code for using this feature in your program looks like:&lt;/p&gt;

&lt;pre&gt;
{
}
&lt;/pre&gt;

&lt;p&gt;Yes, indeed. No code changes necessary. You get all those fancy UI sounds for free. Awesome? Awesome!&lt;/p&gt;

&lt;p&gt;Of course, if you use custom widgets, or need more than just the simplest
audio feedback for input you should link against libcanberra-gtk yourself, and add
&lt;tt&gt;ca_gtk_play_for_widget()&lt;/tt&gt; and &lt;tt&gt;ca_gtk_play_for_event()&lt;/tt&gt; calls to
your code, at the right places.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Announcement Number Six: My GUADEC talk&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;You want to know more about all this fancy new sound event world order? Then
make sure to attend &lt;a href="http://guadec.expectnation.com/guadec08/public/schedule/detail/40"&gt;my
talk at GUADEC 2008 in Istanbul&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Ok, that't enough announcements for now. If you want to discuss or
contribute to the two specs, then please join the &lt;a href="http://lists.freedesktop.org/mailman/listinfo/xdg"&gt;XDG mailing list&lt;/a&gt;.
If you want to contribute to libcanberra, you are invited to join the &lt;a href="https://tango.0pointer.de/mailman/listinfo/libcanberra-discuss"&gt;libcanberra
mailing list&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course these six announcements won't add a happy end to the GNOME sound
event story just like that. We still need better sounds, and better integration
into applications. But just think of how high quality the sound events on e.g.
MacOS X are, and you can see (or hear) what I hope to get for the free desktops
as well. Also my hope is that since we now have a decent localization
infrastructure for our sounds in place, we can make speech sound events more
popular, and thus sound events much more useful. i.e. have a nice girl's voice telling you "You disc finished
burning!" instead of some annoying nobody-knows-what-it-means bing sound. I am
one of those who usually have there event sounds disabled all the time. My hope
is that in a few months time I won't have any reason more to do so.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 10 Jun 2008 18:46:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-06-10:/blog/projects/sixfold-announcement.html</guid><category>projects</category></item><item><title>Dopplr</title><link>https://0pointer.net/blog/dopplr.html</link><description>
                
&lt;p&gt;Until yesterday Ohloh was the only social network site I was a member of.
That changed now. I joined &lt;a href="http://dopplr.com/"&gt;DOPPLR&lt;/a&gt;. It's pretty
nice. Very Web 2.0, but in the good way. Free Software people, join now!&lt;/p&gt;

&lt;p&gt;No, nobody paid me for writing this, I just think it is indeed useful.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 02 Jun 2008 10:46:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-06-02:/blog/dopplr.html</guid><category>misc</category></item><item><title>Singapore, Australia, Hong Kong and Recife</title><link>https://0pointer.net/blog/photos/sg-au-hk.html</link><description>
                
&lt;p&gt;In January/February around &lt;a href="http://www.foms-workshop.org/foms2008/"&gt;FOMS 2008&lt;/a&gt; and &lt;a href="http://linux.conf.au/"&gt;linux.conf.au&lt;/a&gt; I traveled to Singapore, Hong Kong and Australia,
together with two fellow hackers, Kay and David. It took a while until I found the
time to go through and sort all the photos I made on this trip. But finally I am done, and I am not going
to spare you a few shots.&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=149"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-149.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=294"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-294.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=375"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-375.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=383"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-383.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=469"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-469.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=46"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-46.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=59"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-59.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=82"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-82.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=89"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-89.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=510"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-510.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=527"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-527.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=474"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-474.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=525"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-525.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=73"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-73.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=449"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-449.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Singapore%202008-01&amp;amp;photo=166"&gt;&lt;img alt="Singapore" src="http://0pointer.de/photos/galleries/Singapore%202008-01/thumbs/img-166.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;That was &lt;a href="http://en.wikipedia.org/wiki/Singapore"&gt;Singapore&lt;/a&gt;. The next destination on the trip was Australia, more specifically &lt;a href="http://en.wikipedia.org/wiki/Great_Ocean_Road"&gt;Great Ocean Road&lt;/a&gt; and the &lt;a href="http://en.wikipedia.org/wiki/Northern_Territory"&gt;Northern Territory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=228"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-228.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=129"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-129.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=274"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-274.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=497"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-497.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=381"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-381.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=470"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-470.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=590"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-590.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=814"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-814.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=885"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-885.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=389"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-389.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=883"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-883.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=394"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-394.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=125"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-125.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=165"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-165.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=136"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-136.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=193"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-193.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=237"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-237.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=840"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-840.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=325"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-325.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=393"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-393.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=94"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-94.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=195"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-195.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=453"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-453.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=622"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-622.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=731"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-731.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Australia%202008-02&amp;amp;photo=755"&gt;&lt;img alt="Australia" src="http://0pointer.de/photos/galleries/Australia%202008-02/thumbs/img-755.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;And on we went, for &lt;a href="http://en.wikipedia.org/wiki/Hong_Kong"&gt;Hong Kong&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Hong Kong 2008-02&amp;amp;photo=1"&gt;&lt;img alt="Hong Kong" src="http://0pointer.de/photos/galleries/Hong%20Kong%202008-02/thumbs/img-1.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Hong Kong 2008-02&amp;amp;photo=17"&gt;&lt;img alt="Hong Kong" src="http://0pointer.de/photos/galleries/Hong%20Kong%202008-02/thumbs/img-17.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Hong Kong 2008-02&amp;amp;photo=58"&gt;&lt;img alt="Hong Kong" src="http://0pointer.de/photos/galleries/Hong%20Kong%202008-02/thumbs/img-58.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Hong Kong 2008-02&amp;amp;photo=176"&gt;&lt;img alt="Hong Kong" src="http://0pointer.de/photos/galleries/Hong%20Kong%202008-02/thumbs/img-176.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Hong Kong 2008-02&amp;amp;photo=25"&gt;&lt;img alt="Hong Kong" src="http://0pointer.de/photos/galleries/Hong%20Kong%202008-02/thumbs/img-25.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Hong Kong 2008-02&amp;amp;photo=42"&gt;&lt;img alt="Hong Kong" src="http://0pointer.de/photos/galleries/Hong%20Kong%202008-02/thumbs/img-42.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Hong Kong 2008-02&amp;amp;photo=14"&gt;&lt;img alt="Hong Kong" src="http://0pointer.de/photos/galleries/Hong%20Kong%202008-02/thumbs/img-14.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;In March I attended the &lt;a href="http://www.bossaconference.indt.org/"&gt;BOSSA Conference&lt;/a&gt; in Brazil and visited &lt;a href="http://en.wikipedia.org/wiki/Recife"&gt;Recife&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Olinda"&gt;Olinda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=56"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-56.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=138"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-138.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=77"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-77.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=141"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-141.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=303"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-303.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=275"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-275.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=164"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-164.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=244"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-244.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=218"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-218.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=189"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-189.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=178"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-178.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=165"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-165.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=143"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-143.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=54"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-54.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Recife 2008-03&amp;amp;photo=45"&gt;&lt;img alt="Brazil" src="http://0pointer.de/photos/galleries/Recife%202008-03/thumbs/img-45.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;That's all for now.&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 05 May 2008 00:51:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-05-05:/blog/photos/sg-au-hk.html</guid><category>photos</category></item><item><title>360¬∞ of Recife</title><link>https://0pointer.net/blog/photos/patio-de-sao-pedro.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/patio-de-sao-pedro"&gt;&lt;img alt="Patio de S√£o Pedro" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/patio-de-sao-pedro-small.jpeg" width="1024" height="186" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's the colonial P&amp;aacute;tio de S&amp;atilde;o Pedro in Recife's Santo Ant&amp;ocirc;nio quarter.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 03 May 2008 18:47:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-05-03:/blog/photos/patio-de-sao-pedro.html</guid><category>photos</category></item><item><title>Hong Kong from Victoria Peak</title><link>https://0pointer.net/blog/photos/hongkong.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/hongkong"&gt;&lt;img alt="Hong Kong" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/hongkong-small.jpeg" width="1024" height="199" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yepp, pretty well known view.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 03 May 2008 18:39:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-05-03:/blog/photos/hongkong.html</guid><category>photos</category></item><item><title>360¬∞ of BOSSA</title><link>https://0pointer.net/blog/photos/summerville.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/summerville"&gt;&lt;img alt="Summerville Beach" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/summerville-small.jpeg" width="1024" height="183" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's the beach of the Summerville Resort near Porto de Galinhas, Brazil, where
the best Free Software conference in existence took place in 2008: &lt;a href="http://www.bossaconference.indt.org/"&gt;INDT's BOSSA Conference&lt;/a&gt;. Oh boy, if you don't believe how good it was, &lt;a href="http://youtube.com/watch?v=sdo-bY6TBzA"&gt;just watch their video&lt;/a&gt;.&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 03 May 2008 18:32:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-05-03:/blog/photos/summerville.html</guid><category>photos</category></item><item><title>360¬∞ of Grand Place, Brussels</title><link>https://0pointer.net/blog/photos/grand-place.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/grand-place"&gt;&lt;img alt="Grand Place, Brussels" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/grand-place-small.jpeg" width="1024" height="238" /&gt;&lt;/a&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 03 May 2008 18:28:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-05-03:/blog/photos/grand-place.html</guid><category>photos</category></item><item><title>GSoC 2008</title><link>https://0pointer.net/blog/projects/gsoc-2008.html</link><description>
                
&lt;p&gt;I am happy that two &lt;a href="http://code.google.com/soc/2008/"&gt;GSoC&lt;/a&gt; projects got accepted that are related to
projects I maintain:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a href="http://code.google.com/soc/2008/gnome/appinfo.html?csaid=92FFD4A9E4DC91F9"&gt;LLMNR
Protocol Integration in Avahi&lt;/a&gt;, by Sunil Kumar Ghai, mentored by &lt;a href="http://www.lathiat.net/blog"&gt;Trent
Lloyd&lt;/a&gt;. The &lt;a href="http://www.gnome.org/"&gt;GNOME project&lt;/a&gt; generously allowed this application to happen under
its umbrella. &lt;a href="http://en.wikipedia.org/wiki/LLMNR"&gt;LLMNR&lt;/a&gt; support
is a big improvement for &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt;. We will then
integrate into newer Windows networks as seamless as we already integrate into
MacOS X networks.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://code.google.com/soc/2008/bluez/appinfo.html?csaid=2218999748B418AE"&gt;Integration
of the Bluetooth Audio service with PulseAudio&lt;/a&gt;, by Jo&amp;atilde;o Paulo Rechi
Vita, mentored by &lt;a href="http://vudentz.blogspot.com/"&gt;Luiz Augusto von
Dentz&lt;/a&gt;. Made possible through the &lt;a href="http://www.bluez.org/"&gt;BlueZ
project&lt;/a&gt;.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;I'd like to thank the GNOME and BlueZ projects for making these GSoC applications a reality.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 22 Apr 2008 17:08:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-04-22:/blog/projects/gsoc-2008.html</guid><category>projects</category></item><item><title>Finally, Secure Real-Time on the Desktop</title><link>https://0pointer.net/blog/projects/cgroups-and-rtwatch.html</link><description>
                
&lt;p&gt;Finally, secure real-time scheduling on the Linux desktop can be become a
reality. Linux 2.6.25 gained &lt;a href="http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=blob;f=Documentation/scheduler/sched-rt-group.txt;h=1c6332f4543c350889eae9ba2b4c766270c1b65e;hb=HEAD"&gt;Real-Time
Group Scheduling&lt;/a&gt;, a feature which allows to limit the amount of CPU time
real-time processes and threads may consume.&lt;/p&gt;

&lt;p&gt;Traditionally on Linux real-time scheduling was limited to priviliged
processes, because RT processes can lock up the machine if they enter a busy
loop. Scheduling is effectively disabled for them -- they can do whatever
they want and are (almost) never preempted by the kernel in what they are doing.
In 2.6.12 RLIMIT_RTPRIO was introduced. It's a &lt;a href="http://linux.die.net/man/2/setrlimit"&gt;resource limit&lt;/a&gt; which opened up
real-time scheduling for normal user processes.  However the ability to lock up
the machine for RT processes was not touched by this. When using
&lt;tt&gt;/usr/security/limits.conf&lt;/tt&gt; to raise this limit for specific users
they'd gain the ability to lock up your machine.&lt;/p&gt;

&lt;p&gt;Due to this raising this limit is a task that is left to the administrator
on all current distros. Shipping a distro with the limit raised by default is
shipping a distro where local users can easily freeze their machines.&lt;/p&gt;

&lt;p&gt;It was always possible to write "watchdog" tools that could supervise RT
processes by running on a higher RT priority and checking the CPU load imposed
by the process on the system. However, to this point it was not possible in
any way that would actually be secure (so that processes cannot escape the
watchdog by forking), that wouldn't require lots of work in the
watchdog (which is a bad idea since it runs at a very high RT priority, thus
while it doing its stuff it will block the important RT processes from
running), or that wouldn't be totally ugly.&lt;/p&gt;

&lt;p&gt;Real-Time Group Scheduling solves the problem. It is now possible to create
a &lt;a href="http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=blob;f=Documentation/cgroups.txt;h=31d12e21ff8a9a780cbdeef130421d419338e310;hb=HEAD"&gt;cgroup&lt;/a&gt;
for the processes to supervise. The processes cannot escape the cgroup by
forking. Then, by manipulating the &lt;tt&gt;cpu.rt_runtime_us&lt;/tt&gt; property of the
cgroup a certain amount of RT CPU time can be assigned to the cgroup --
processes in the group cannot spend more time than this limit per one
period of time. (The period length can be controlled globally via
&lt;tt&gt;/proc/sys/kernel/sched_rt_period_us&lt;/tt&gt;).&lt;/p&gt;

&lt;p&gt;To demonstrate this I wrote a tool &lt;a href="http://git.0pointer.de/?p=rtwatch.git;a=blob;f=rtwatch.c;h=594979f9059e803bd6ef13b985563974d9197d65;hb=master"&gt;rtwatch&lt;/a&gt;
which implements this technique in a watchdog tool that is SUID root, creates a
cgroup, and forks off a user defined process inside, it with raised
RLIMIT_PTPRIO but normal user priviliges. The child process can then acquire RT
scheduling but never consume more CPU than allowed by the cgroup, with no
option to lock up the machine anymore.&lt;/p&gt;

&lt;p&gt;How to use this?&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;$ rtwatch 5 rtcpuhogger&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;This will start the process &lt;tt&gt;rtcpuhogger&lt;/tt&gt; and grant it 5% of the
available CPU time. To make sure that this is not misused by the user rtwatch
will refuse to assign more than 50% CPU time to a single child. Since RT
scheduling is all about determinism it is not possible to assign more than 100%
CPU time (globally in sum) to all RT processes this way. Also, rtwatch will
always make sure that 5% will be left for other tasks.&lt;/p&gt;

&lt;p&gt;To work, rtwatch needs to run on Linux 2.6.25 with CONFIG_RT_GROUP_SCHED
enabled. Unfortunately the Fedora kernel &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=442959"&gt;is not compiled this way, yet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why is all this so great? Those who attended my talk &lt;a href="http://mirror.linux.org.au/pub/linux.conf.au/2008/slides/266-realtime.pdf"&gt;Practical
Real-Time Programming in Userspace&lt;/a&gt; at Linux.conf.au 2008 (or watched &lt;a href="http://mirror.linux.org.au/pub/linux.conf.au/2008/Fri/mel8-266.ogg"&gt;the
video&lt;/a&gt;) will know that besides the fact that I'd love to enable RT support
for PulseAudio in Fedora in coming releases &lt;i&gt;by default&lt;/i&gt; I'd also love to
see RT programming more often used in desktop applications. Everywhere were the
CPU time spent on a specific process should not depend on the overall system
load, but solely on the time constraints of the job itself and what is process
needs RT scheduling should be enabled. Examples for this are music or movie
playback (the movie player should have enough time to decode one frame every
25th of a second, regardless what else is running on the system), fancy
animations, quick reactions to user actions (i.e. updating the mouse cursor).
All this for a machine that is snappier and more responsive with shorter
latencies, regardless what else happens on the machine.&lt;/p&gt;

&lt;p&gt;The day before yesterday, when Linux 2.6.25 was released, we came a big step closer to
this goal.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 18 Apr 2008 17:33:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-04-18:/blog/projects/cgroups-and-rtwatch.html</guid><category>projects</category></item><item><title>Respect $LC_MESSAGES!</title><link>https://0pointer.net/blog/projects/LC_MESSAGES.html</link><description>
                
&lt;p&gt;&lt;tt&gt;&amp;lt;rant&amp;gt;&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;I really dislike if software ignores my setting of $LC_MESSAGES=C and shows
me its UI in German, just because I set $LANG=de_DE. I hate that. I don't want
no UI strings in German, the translations are mediocre. I want everything else
in German (paper sizes, ...), but no strings please. That's why I configured
my locale settings this way. I don't want those settings ignored.&lt;/p&gt;

&lt;p&gt;Please, developers, read through locale(7) and related man pages before you hack up i18n support. Thank you.&lt;/p&gt;

&lt;p&gt;The offenders that pissed me off right now are &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=441973"&gt;Firefox&lt;/a&gt; and &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=439314"&gt;Fedora's man&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;&amp;lt;/rant&amp;gt;&lt;/tt&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 11 Apr 2008 00:24:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-04-11:/blog/projects/LC_MESSAGES.html</guid><category>projects</category></item><item><title>What's Cooking in PulseAudio's glitch-free Branch</title><link>https://0pointer.net/blog/projects/pulse-glitch-free.html</link><description>
                
&lt;p&gt;A while ago I started development of special branch of &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; which is called
&lt;tt&gt;glitch-free&lt;/tt&gt;. In a few days I will merge it back to PulseAudio
trunk, and eventually release it as 0.9.11. I think it's time to
explain a little what all this "glitch-freeness" is about, what made
it so tricky to implement, and why this is totally awesome
technology. So, here we go:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Traditional Playback Model&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Traditionally on most operating systems audio is scheduled via
sound card &lt;a href="http://en.wikipedia.org/wiki/Interrupt_request"&gt;interrupts
(IRQs)&lt;/a&gt;. When an application opens a sound card for playback it
configures it for a fixed size playback buffer. Then it fills this
buffer with digital &lt;a href="http://en.wikipedia.org/wiki/Pulse-code_modulation"&gt;PCM&lt;/a&gt;
sample data. And after that it tells the hardware to start
playback. Then, the hardware reads the samples from the buffer, one at
a time, and passes it on to the &lt;a href="http://en.wikipedia.org/wiki/Digital-to-analog_converter"&gt;DAC&lt;/a&gt;
so that eventually it reaches the speakers.&lt;/p&gt;

&lt;p&gt;After a certain number of samples played the sound hardware
generates an interrupt. This interrupt is forwarded to the
application. On Linux/Unix this is done via &lt;tt&gt;poll()/select()&lt;/tt&gt;,
which the application uses to sleep on the sound card file
descriptor. When the application is notified via this interrupt it
overwrites the samples that were just played by the hardware with new
data and goes to sleep again. When the next interrupt arrives the next
block of samples is overwritten, and so on and so on. When the
hardware reaches the end of the hardware buffer it starts from its
beginning again, in a true &lt;a href="http://en.wikipedia.org/wiki/Ring_buffer"&gt;ring buffer&lt;/a&gt;
fashion. This goes on and on and on.&lt;/p&gt;

&lt;p&gt;The number of samples after which an interrupt is generated is
usually called a &lt;i&gt;fragment&lt;/i&gt; (ALSA likes to call the same thing a
&lt;i&gt;period&lt;/i&gt; for some reason). The number of fragments the entire
playback buffer is split into is usually integral and usually a power of
two, 2 and 4 being the most frequently used values.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/fragments.png"&gt;&lt;img src="http://0pointer.de/public/fragments.png" width="1023" height="447" alt="Schematic overview" /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;small&gt;&lt;b&gt;Image 1:&lt;/b&gt; &lt;i&gt;Schematic overview of the playback buffer in the traditional playback model, in the best way the author can visualize this with his limited drawing abilities.&lt;/i&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;If the application is not quick enough to fill up the hardware
buffer again after an interrupt we get a buffer &lt;i&gt;underrun&lt;/i&gt;
("drop-out"). An underrun is clearly hearable by the user as a
discontinuity in audio which is something we clearly don't want. We
thus have to carefully make sure that the buffer and fragment sizes
are chosen in a way that the software has enough time to calculate the
data that needs to be played, and the OS has enough time to forward
the interrupt from the hardware to the userspace software and the
write request back to the hardware.&lt;/p&gt;

&lt;p&gt;Depending on the requirements of the application the size of the
playback buffer is chosen. It can be as small as 4ms for low-latency
applications (such as music synthesizers), or as long as 2s for
applications where latency doesn't matter (such as music players). The
hardware buffer size directly translates to the latency that the
playback adds to the system. The smaller the fragment sizes the
application configures, the more time the application has to fill up
the playback buffer again.&lt;/p&gt;

&lt;p&gt;Let's formalize this a bit: Let BUF_SIZE be the size of the
hardware playback buffer in samples, FRAG_SIZE the size of one
fragment in samples, and NFRAGS the number of fragments the buffer is
split into (equivalent to BUF_SIZE divided by FRAG_SIZE), RATE the sampling
rate in samples per second. Then, the overall latency is identical to
BUF_SIZE/RATE. An interrupt is generated every FRAG_SIZE/RATE. Every
time one of those interrupts is generated the application should fill
up one fragment again, if it missed one interrupt this might become
more than one. If it doesn't miss any interrupt it has
(NFRAGS-1)*FRAG_SIZE/RATE time to fulfill the request. If it needs
more time than this we'll get an underrun. The fill level of the
playback buffer should thus usually oscillate between BUF_SIZE and
(NFRAGS-1)*FRAG_SIZE. In case of missed interrupts it might however
fall considerably lower, in the worst case to 0 which is, again, an
underrun.&lt;/p&gt;

&lt;p&gt;It is difficult to choose the buffer and fragment sizes in an
optimal way for an application:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;The buffer size should be as large as possible to minimize the
risk of drop-outs.&lt;/li&gt;

&lt;li&gt;The buffer size should be as small as possible to guarantee
minimal latencies.&lt;/li&gt;

&lt;li&gt;The fragment size should be as large as possible to minimize the
number of interrupts, and thus the required CPU time used, to maximize
the time the CPU can sleep for between interrupts and thus the battery
lifetime (i.e. the fewer interrupts are generated the lower your audio
app will show up in powertop, and that's what all is about,
right?)&lt;/li&gt;

&lt;li&gt;The fragment size should be as small as possible to give the
application as much time as possible to fill up the playback buffer,
to minimize drop-outs.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;As you can easily see it is impossible to choose buffering metrics
in a way that they are optimal on all four requirements.&lt;/p&gt;

&lt;p&gt;This traditional model has major drawbacks:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;The buffering metrics are highly dependant on what the sound hardware
can provide. Portable software needs to be able to deal with hardware
that can only provide a very limited set of buffer and fragment
sizes.&lt;/li&gt;

&lt;li&gt;The buffer metrics are configured only once, when the device is
opened, they usually cannot be reconfigured during playback without
major discontinuities in audio. This is problematic if more than one
application wants to output audio at the same time via a sound server
(or &lt;tt&gt;dmix&lt;/tt&gt;) and they have different requirements on
latency. For these sound servers/dmix the fragment metrics are
configured statically in a configuration file, and are the same during
the whole lifetime. If a client connects that needs lower latencies,
it basically lost. If a client connects that doesn't need as low
latencies, we will continouisly burn more CPU/battery than
necessary. &lt;/li&gt;

&lt;li&gt;It is practically impossible to choose the buffer metrics optimal
for your application -- there are too many variables in the equation:
you can't know anything about the IRQ/scheduling latencies of the
OS/machine your software will be running on; you cannot know how much
time it will actually take to produce the audio data that shall be
pushed to the audio device (unless you start counting cycles, which is
a good way to make your code unportable); the scheduling latencies are
hugely dependant on the system load on most current OSes (unless you
have an RT system, which we generally do not have). As said, for sound
servers/dmix it is impossible to know in advance what the requirements
on latency are that the applications that might eventually connect
will have.&lt;/li&gt;

&lt;li&gt;Since the number of fragments is integral and &lt;i&gt;at least 2&lt;/i&gt;
on almost all existing hardware we will generate at least two interrupts
on each buffer iteration. If we fix the buffer size to 2s then we will
generate an interrupt at least every 1s. We'd then have 1s to fill up
the buffer again -- on all modern systems this is far more than we'd
ever need. It would be much better if we could fix the fragment size
to 1.9s, which still gives us 100ms to fill up the playback buffer
again, still more than necessary on most systems.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Due to the limitations of this model most current (Linux/Unix)
software uses buffer metrics that turned out to "work most of the
time", very often they are chosen without much thinking, by copying
other people's code, or totally at random.&lt;/p&gt;

&lt;p&gt;PulseAudio &amp;lt;= 0.9.10 uses a fragment size of 25ms by default, with
four fragments. That means that right now, unless you reconfigure your
PulseAudio manually clients will not get latencies lower than 100ms
whatever you try, and as long as music is playing you will
get 40 interrupts/s. (The relevant configuration options for PulseAudio are
&lt;tt&gt;default-fragments=&lt;/tt&gt; and &lt;tt&gt;default-fragment-size-msec=&lt;/tt&gt;
in &lt;tt&gt;daemon.conf&lt;/tt&gt;)&lt;/p&gt;

&lt;p&gt;dmix uses 16 fragments by default with a size of 21 ms each (on my
system at least -- this varies, depending on your hardware). You can't
get less than 47 interrupts/s. (You can change the parameters in
&lt;tt&gt;.asoundrc&lt;/tt&gt;)&lt;/p&gt;

&lt;p&gt;So much about the traditional model and its limitations. Now, we'll
have a peek on how the new &lt;tt&gt;glitch-free&lt;/tt&gt; branch of PulseAudio
does its things. The technology is not really new. It's inspired
by what Vista does these days and what Apple CoreAudio has already
been doing for quite a while. However, on Linux this technology is
new, we have been lagging behind quite a bit. Also I claim that what
PA does now goes beyond what Vista/MacOS does in many ways, though of
course, they provide much more than we provide in many other ways. The
name &lt;i&gt;glitch-free&lt;/i&gt; is inspired by the term Microsoft uses to
call this model, however I must admit that I am not sure that my
definition of this term and theirs actually is the same.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Glitch-Free Playback Model&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The first basic idea of the &lt;i&gt;glitch-free&lt;/i&gt; playback model (a
better, less marketingy name is probably &lt;i&gt;timer-based audio
scheduling&lt;/i&gt; which is the term I internally use in the PA codebase)
is to no longer depend on sound card interrupts to schedule audio but
use system timers instead. System timers are far more flexible then
the fragment-based sound card timers. They can be reconfigured at any
time, and have a granularity that is independant from any buffer
metrics of the sound card. The second basic idea is to use playback
buffers that are as large as possible, up to a limit of 2s or 5s. The
third basic idea is to allow rewriting of the hardware buffer at any
time. This allows instant reaction on user-input (i.e. pause/seek
requests in your music player, or instant event sounds) although the
huge latency imposed by the hardware playback buffer would suggest
otherwise.&lt;/p&gt;

&lt;p&gt;PA configures the audio hardware to the largest playback buffer
size possible, up to 2s. The sound card interrupts are disabled as far
as possible (most of the time this means to simply lower NFRAGS to the
minimal value supported by the hardware. It would be great if ALSA
would allow us to disable sound card interrupts entirely). Then, PA
constantly determines what the minimal latency requirement of all
connected clients is. If no client specified any requirements we fill
up the whole buffer all the time, i.e. have an actual latency of
2s. However, if some applications specified requirements, we take the
lowest one and only use as much of the configured hardware buffer as
this value allows us. In practice, this means we only partially fill the
buffer each time we wake up. Then, we configure a system timer
to wake us up 10ms before the buffer would run empty and fill it up
again then. If the overall latency is configured to less than 10ms we
wakeup after half the latency requested.&lt;/p&gt;

&lt;p&gt;If the sleep time turns out to be too long (i.e. it took more than
10ms to fill up the hardware buffer) we will get an underrun. If this
happens we can double the time we wake up before the buffer would run
empty, to 20ms, and so on. If we notice that we only used much less
than the time we estimated, we can halve this value again. This
adaptive scheme makes sure that in the unlikely event of a buffer
underrun it will happen most likely only once and never again.&lt;/p&gt;

&lt;p&gt;When a new client connects or an existing client disconnects, or
when a client wants to rewrite what it already wrote, or the user
wants to change the volume of one of the streams, then PA will
resample its data passed by the client, convert it to the proper
hardware sample type, and remix it with the data of the other
clients. This of course makes it necessary to keep a "history" of data
of all clients around so that if one client requests a
rewrite we have the necessary data around to remix what already was
mixed before.&lt;/p&gt;

&lt;p&gt;The benefits of this model are manyfold:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;We minimize the overall number of interrupts, down to what the
latency requirements of the connected clients allow us. i.e. we save power,
don't show up in powertop anymore for normal music playback.&lt;/li&gt;

&lt;li&gt;We maximize drop-out safety, because we buffer up to 2s in the
usual cases. Only with operating systems which have scheduling
latencies &amp;gt; 2s we can still get drop-outs. Thankfully no
operating system is that bad.&lt;/li&gt;

&lt;li&gt;In the event of an underrun we don't get stuck in it, but instead
are able to recover quickly and can make sure it doesn't happen again.&lt;/li&gt;

&lt;li&gt;We provide "zero-latency". Each client can rewrite its playback
buffer at any time, and this is forwarded to the hardware, even if
this means that the sample currently being played needs to be
rewritten. This means much quicker reaction to user input, a more
responsive user experience.&lt;/li&gt;

&lt;li&gt;We become much less dependant on what the sound hardware provides
us with. We can configure wakeup times that are independant from the
fragment settings that the hardware actually supports.&lt;/li&gt;

&lt;li&gt;We can provide almost any latency a client might request,
dynamically without reconfiguration, without discontinuities in
audio.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Of course, this scheme also comes with major complications:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;System timers and sound card timers deviate. On many sound cards
by quite a bit. Also, not all sound cards allow the user to query the
playback frame index at any time, but only shortly after each IRQ. To
compensate for this deviation PA contains a non-trivial algorithm
which tries to estimate and follow the deviation over time. If this
doesn't work properly it might happen that an underrun happens much
earlier than we expected.&lt;/li&gt;

&lt;li&gt;System timers on Unix are not very high precision. On traditional
Linux with HZ=100 sleep times for timers are rounded up to multiples
of 10ms. Only very recent Linux kernels with &lt;tt&gt;hrtimers&lt;/tt&gt; can
provide something better, but only on x86 and x86-64 until now. This
makes the whole scheme unusable for low latency setups unless you run
the very latest Linux. Also, &lt;tt&gt;hrtimers&lt;/tt&gt; are not (yet) exposed in
&lt;tt&gt;poll()/select()&lt;/tt&gt;. It requires major jumping through loops to
work around this limitation.&lt;/li&gt;

&lt;li&gt;We need to keep a history of sample data for each stream around, thus increasing the memory
footprint and potentially increased cache pressure. PA tries to work
against the increased memory footprint and cache pressure this might cause by doing
zero-copy memory management.&lt;/li&gt;

&lt;li&gt;We're still dependant on the maximum playback buffer size the
sound hardware supports. Many sound cards don't even support 2s, but only
300ms or suchlike.&lt;/li&gt;

&lt;li&gt;The rewriting of the client buffers causing rewriting of the
hardware buffer complicates the resampling/converting step
immensly. In general the code to implement this model is more complex
than for the traditional model. Also, ALSA has not really been
designed with this design in mind, which makes some things very hard
to get right and suboptimal.&lt;/li&gt;

&lt;li&gt;Generally, this works reliably only on newest ALSA, newest kernel,
newest everything. It has pretty steep requirements on software and
sometimes even on hardware. To stay comptible with systems that don't
fulfill these requirements we need to carry around code for the
traditional playback model as well, increasing the code base by far.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;The advantages of the scheme clearly outweigh the complexities it
causes. Especially the power-saving features of glitch-free PA should
be enough reason for the embedded Linux people to adopt it
quickly. Make PA disappear from powertop even if you play music!&lt;/p&gt;

&lt;p&gt;The code in the &lt;tt&gt;glitch-free&lt;/tt&gt; is still rough and sometimes
incomplete. I will merge it shortly into &lt;tt&gt;trunk&lt;/tt&gt; and then
upload a snapshot to Rawhide.&lt;/p&gt;

&lt;p&gt;I hope this text also explains to the few remaining PA haters a
little better why PA is a good thing, and why everyone should have it
on his Linux desktop. Of course these changes are not visible on the
surface, my hope with this blog story is to explain a bit better why
infrastructure matters, and counter misconceptions what PA actually is
and what it gives you on top of ALSA.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 08 Apr 2008 19:54:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-04-08:/blog/projects/pulse-glitch-free.html</guid><category>projects</category></item><item><title>Updated PulseAudio Plugin for SDL</title><link>https://0pointer.net/blog/projects/pa-plugin-for-sdl.html</link><description>
                
&lt;p&gt;Quick update for all game kiddies: apply &lt;a href="http://0pointer.de/public/sdl-pulse-rework.patch"&gt;this patch&lt;/a&gt; to SDL and enjoy PulseAudio in your favourite SDL based game without buffering issues. It's basically just fixes the bogus buffer metrics of Stephan's original patch.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 31 Mar 2008 20:34:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-03-31:/blog/projects/pa-plugin-for-sdl.html</guid><category>projects</category></item><item><title>Updated PulseAudio Plugin for Xine</title><link>https://0pointer.net/blog/projects/pa-plugin-for-xine.html</link><description>
                
&lt;p&gt;Quick update for all K-lovers: apply &lt;a href="http://0pointer.de/public/xine-pulse-rework.patch"&gt;this patch&lt;/a&gt; to xine-lib and enjoy PulseAudio in Amarok and other KDE apps without stability issues. It's a race-free rework of Diego's original patch.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 31 Mar 2008 04:21:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-03-31:/blog/projects/pa-plugin-for-xine.html</guid><category>projects</category></item><item><title>BOSSA 2008</title><link>https://0pointer.net/blog/projects/bossa-2008.html</link><description>
                
&lt;p&gt;Just three words: awesome awesome awesome.&lt;/p&gt;

&lt;p&gt;And for those asking for it, &lt;a href="http://0pointer.de/public/pulseaudio-bossa-2008.pdf"&gt;here are my
slides&lt;/a&gt;, in which I try to explain the new "glitch-free" audio scheduling
core of PulseAudio that I recently commited to the &lt;tt&gt;glitch-free&lt;/tt&gt; branch
in PA SVN. I also try to make clear why this functionality is practically a
*MUST* for all people who want to have low-latency audio, minimal power
consumption and maximum drop-out safety for their audio playback. And thus, why
all those fancy embedded Linux devices should adopt it better sooner than
later. The slides might appear a bit terse if you don't have that awesome guy
they usually come with presenting them to you.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 20 Mar 2008 22:38:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-03-20:/blog/projects/bossa-2008.html</guid><category>projects</category></item><item><title>360¬∞ of Petrified Dunes</title><link>https://0pointer.net/blog/photos/petrified-dunes.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/kings-canyon-dunes.html"&gt;&lt;img alt="Petrified Dunes near Kings Canyon" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/kings-canyon-dunes-gimped-small.jpeg" width="1024" height="161" /&gt;&lt;/a&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 17 Feb 2008 14:07:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-02-17:/blog/photos/petrified-dunes.html</guid><category>photos</category></item><item><title>A Whole Lot of Nothing</title><link>https://0pointer.net/blog/photos/a-whole-lot-of-nothing.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/saltlake.html"&gt;&lt;img alt="The Outback near Mount Conner" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/saltlake-small.jpeg" width="1024" height="126" /&gt;&lt;/a&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 16 Feb 2008 18:50:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-02-16:/blog/photos/a-whole-lot-of-nothing.html</guid><category>photos</category></item><item><title>Kata Tjuta in the Heat of the Day</title><link>https://0pointer.net/blog/photos/kata-tjuta.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/kata-tjuta.html"&gt;&lt;img alt="Kata Tjuta" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/kata-tjuta-gimped-small.jpeg" width="1024" height="216" /&gt;&lt;/a&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 15 Feb 2008 01:58:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-02-15:/blog/photos/kata-tjuta.html</guid><category>photos</category></item><item><title>Back from LCA</title><link>https://0pointer.net/blog/projects/lca2008.html</link><description>
                
&lt;p&gt;After coming back from my somewhat extended linux.conf.au trip I spent the
whole day grepping through email. Only 263 unprocessed emails left in my inbox.
Yay.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;PRTPILU&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Thanks to the LCA guys, video footage is now available of all talks,
including my &lt;a href="http://linux.conf.au/programme/detail?TalkID=266"&gt;talk
&lt;i&gt;Practical Real-Time Programming in Linux Userspace&lt;/i&gt;&lt;/a&gt; (&lt;a href="http://mirror.linux.org.au/pub/linux.conf.au/2008/Fri/mel8-266.ogg"&gt;Theora&lt;/a&gt;,
&lt;a href="http://mirror.linux.org.au/pub/linux.conf.au/2008/slides/266-realtime.pdf"&gt;Slides&lt;/a&gt;).
In my endless modesty I have to recommend: go, watch it, it contains some
really good stuff (including me not being able to divide 1 by 1000). Right now,
the real-time features of the Linux kernel are seldomly used on the desktop due
to a couple of reasons, among them general difficulty and unsafety to use them
but predominantly it's probably just unawareness. There are a couple of
situations however, where scheduling desktop processes as RT makes a lot of
sense (think of video playback, mouse curse feedback, etc.), to decouple the
execution (scheduling) latency from the system load. This talk focussed mostly
on non-trivial technical stuff and all the limitations RT on Linux still has.
To fully grok what's going on you thus need some insight into concurrent
programming and stuff. &lt;/p&gt;

&lt;p&gt;My plan is to submit a related talk to GUADEC wich will focus more on
actually building RT apps for the desktop, in the hope we will eventually be
able to ship a desktop with audio and video that never skips, and where user
feedback is still snappy and quick even if we do the most complicated IO
intensive processing in lots of different processes in the background on slow
hardware.&lt;/p&gt;

&lt;p&gt;I didn't have time to go through all my slides (which I intended that way
and is perfectly OK), so you might want to browse through my slides even if you
saw the whole clip. The slides, however, are not particularly verbose.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Rumors&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Regarding &lt;a href="http://q-funk.blogspot.com/2008/02/rumor-has-it.html"&gt;all&lt;/a&gt; &lt;a href="http://planet.gentoo.org/developers/leio/2008/02/05/spreading_the_rumors"&gt;those&lt;/a&gt;
&lt;a href="http://blogs.gnome.org/snark/2008/02/06/spreading-the-rumors/"&gt;rumors&lt;/a&gt;
that have been spread while I -- the maintainer of PulseAudio -- was in the
middle of the australian outback, fist-fighting with kangaroos near Uluru: I
am not really asking anyone to port their apps to the native &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; API right now. While I do think
the API is quite powerful and not redundant, I also acknowledge that it is
very difficult to use properly (and very easy to misuse), (mostly) due to its
fully asynchronous nature.  The mysterious &lt;i&gt;libsydney&lt;/i&gt; project is
supposed to fix this and a lot more.  libsydney is mostly the Dukem Nukem
Forever of audio APIs right now, but in contrast to DNF I didn't really
announce it publicly yet, so it doesn't really count. &lt;tt&gt;;-)&lt;/tt&gt; Suffice to
say, the current situation of audio APIs is a big big mess. We are working on
cleaning it up. For now: stick to the well established and least-broken APIs,
which boils down to ALSA. Stop using the OSS API &lt;i&gt;now&lt;/i&gt;! Don't program
against the ESD API (except for event sounds).  But, most importantly: please
stop misusing the existing APIs.  I am doing my best to allow all current APIs
to run without hassles on top of PA, but due to the sometimes blatant misues,
or even brutal violations of those APIs it is very hard to get that working
for all applications (yes, that means you, Adobe, and you, Skype). Don't
expect that mmap is available on all audio devices -- it's not, and especially
not on PA. Don't use &lt;tt&gt;/proc/asound/pcm&lt;/tt&gt; as an API for enumerating audio
devices. It's totally unsuitable for that. Don't hard code device strings. Use
&lt;tt&gt;default&lt;/tt&gt; as device string. Don't make assumptions that are not and
cannot be true for non-hardware devices. Don't fiddle around with period
settings unless you fully grok them and know what you are doing. In short: be
a better citizen, write code you don't need to be ashamed of. ALSA has its
limitations and my compatibility code certainly as well, but this is not an
excuse for working around them by writing code that makes little children cry.
If you have a good ALSA backend for your program than this will not only fix
your issues with PA, but also with Bluetooth, you will have less code to
maintain and also code that is much easier to maintain.&lt;/p&gt;

&lt;p&gt;Or even shorter: &lt;b&gt;Fix. Your. Broken. ALSA. Client. Code.&lt;/b&gt; Thank you.&lt;/p&gt;

&lt;p&gt;Oh, if you have questions regarding PA, just ping me on IRC (if I am
around) or write me an email, like everyone else. Mysterious, blogged pseudo
invitations to rumored meetings is not the best way to contact me.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 12 Feb 2008 20:26:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-02-12:/blog/projects/lca2008.html</guid><category>projects</category></item><item><title>Ich bin ein Berliner</title><link>https://0pointer.net/blog/ich-bin-ein-berliner.html</link><description>
                
&lt;p&gt;To whom it may concern: I finally moved from Hamburg (Wohldorf) into my new flat in Berlin (Friedrichshain).&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 17 Jan 2008 13:00:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-01-17:/blog/ich-bin-ein-berliner.html</guid><category>misc</category></item><item><title>GIT Mirrors of my SVN Repositories</title><link>https://0pointer.net/blog/projects/svn-git.html</link><description>
                
&lt;p&gt;To whom it may concern: as a first step to move away from SVN and towards
GIT for all my code, I have now configured &lt;a href="http://git.0pointer.de/"&gt;live GIT mirrors&lt;/a&gt; for all my &lt;a href="http://svn.0pointer.de/"&gt;SVN repositories&lt;/a&gt;. The plan is to move fully
to GIT, but not as long as the GIT integration into Trac is as painful as it is
right now. The scripts I used to initialize and update the mirrors are &lt;a href="http://0pointer.de/public/svn-live-init"&gt;svn-live-init&lt;/a&gt; and &lt;a href="http://0pointer.de/public/svn-live-update"&gt;svn-live-update&lt;/a&gt;, for those
interested. They are based on scripts CJ van den Berg supplied me with.&lt;/p&gt;

&lt;p&gt;It would be great to have the mirror to be both ways. Lazyweb, do you know how to do that?&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 03 Jan 2008 15:12:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2008-01-03:/blog/projects/svn-git.html</guid><category>projects</category></item><item><title>Avahi/Zeroconf patch for distcc updated</title><link>https://0pointer.net/blog/projects/avahi-distcc.html</link><description>
                
&lt;p&gt;I finally found them time to sit down and update my venerable &lt;a href="http://avahi.org"&gt;Avahi&lt;/a&gt;/&lt;a href=" http://en.wikipedia.org/wiki/Zeroconf"&gt;Zeroconf&lt;/a&gt; &lt;a href="http://0pointer.de/public/distcc-avahi.patch"&gt;patch for
distcc&lt;/a&gt;. A patched &lt;a href="http://distcc.samba.org/"&gt;distcc&lt;/a&gt;
automatically discovers suitable compiler servers on the local network, without
the need to manually configure them. (&lt;a href="http://lists.samba.org/archive/distcc/2007q4/003593.html"&gt;Announcement&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Here's a quick HOWTO for using a patched distcc like this:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Make sure to start &lt;tt&gt;distccd&lt;/tt&gt; (the server) with the new
&lt;tt&gt;--zeroconf&lt;/tt&gt; switch, This will make it announce its services on the
network.&lt;/li&gt;

&lt;li&gt;Edit your &lt;tt&gt;$HOME/.distcc/hosts&lt;/tt&gt; and add &lt;tt&gt;+zeroconf&lt;/tt&gt;. This
magic string will enable Zeroconf support in the client, i.e. will be expanded
to the list of available suitable distcc servers on your LAN.&lt;/li&gt;

&lt;li&gt;Now set &lt;tt&gt;$CC&lt;/tt&gt; to &lt;tt&gt;distcc gcc&lt;/tt&gt; globally for your login
sessions. This will tell all well-behaving build systems to use &lt;tt&gt;distcc&lt;/tt&gt;
for compilation (this doesn't work for the kernel, as one notable exception).
Even better than setting &lt;tt&gt;$CC&lt;/tt&gt; to &lt;tt&gt;distcc gcc&lt;/tt&gt; is setting it to
&lt;tt&gt;ccache distcc gcc&lt;/tt&gt; which will enable &lt;a href="http://ccache.samba.org/"&gt;ccache&lt;/a&gt; in addition to distcc. i.e. stick something like this in your &lt;tt&gt;~/.bash_profile&lt;/tt&gt;: &lt;tt&gt;export CC="ccache distcc gcc"&lt;/tt&gt;&lt;/li&gt;

&lt;li&gt;And finally use &lt;tt&gt;make -j `distcc -j`&lt;/tt&gt; instead of plain &lt;tt&gt;make&lt;/tt&gt;
to enable parallel building with the right number of concurrent processes.
Setting &lt;tt&gt;$MAKEFLAGS&lt;/tt&gt; properly is an alternative option, however is suboptimal if
the evalutation is only done once at login time. &lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;If this doesn't work for you than it is a good idea to run &lt;tt&gt;distcc
--show-hosts&lt;/tt&gt; to get a list of discovered distcc servers. If this list
isn't complete then this is most likely due to mismatching GCC versions or
architectures. To check if that's the case use &lt;tt&gt;avahi-browse -r
_distcc._tcp&lt;/tt&gt; and compare the values of the &lt;tt&gt;cc_machine&lt;/tt&gt; and
&lt;tt&gt;cc_version&lt;/tt&gt; fields. Please note that different Linux distributions use
different GCC machine strings. Which is expected since GCC is usually patched quite
a bit on the different distributions. This means that a Fedora &lt;tt&gt;distcc&lt;/tt&gt;
(the client) will not find a Debian &lt;tt&gt;distccd&lt;/tt&gt; (the server) and vice
versa. But again: that's a feature, not a bug.&lt;/p&gt;

&lt;p&gt;The new &lt;tt&gt;-j&lt;/tt&gt; and &lt;tt&gt;--show-hosts&lt;/tt&gt; options for &lt;tt&gt;distcc&lt;/tt&gt; are useful for non-zeroconf setups, too.&lt;/p&gt;

&lt;p&gt;The patch will automatically discover the number of CPUs on remote machines
and make use of that information to better distribute jobs.&lt;/p&gt;

&lt;p&gt;In short: Zeroconf support in &lt;tt&gt;distcc&lt;/tt&gt; is totally hot, everyone should have it!&lt;/p&gt;

&lt;p&gt;For more information have a look on &lt;a href="http://lists.samba.org/archive/distcc/2004q4/002774.html"&gt;the announcement of my original
patch from 2004&lt;/a&gt; (at that time for the historic HOWL Zeroconf daemon), or read the new
announcement linked above.&lt;/p&gt;

&lt;p&gt;Distribution packagers! Please merge this new patch into your packages! It
would be a pity to withhold Zeroconf support in distcc from your users any
longer!&lt;/p&gt;

&lt;p&gt;Unfortunately, Fedora doesn't include any distcc packages. Someone should be
changing that (who's not me ;-)).&lt;/p&gt;

&lt;p&gt;You like this patch? Then &lt;a href="http://www.ohloh.net/accounts/7661"&gt;give me a kudo on ohloh.net&lt;/a&gt;. Now that I earned a golden 10 (after kicking Larry Ewing from position 64. Ha, take that Mr. Ewing!), I need to make sure I don't fall into silver oblivion again. ;-)&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 30 Dec 2007 17:51:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-12-30:/blog/projects/avahi-distcc.html</guid><category>projects</category></item><item><title>Avahi 0.6.22</title><link>https://0pointer.net/blog/projects/avahi-0.6.22.html</link><description>
                
&lt;p&gt;A couple of minutes ago I released &lt;a href="http://avahi.org/"&gt;Avahi
0.6.22&lt;/a&gt; into the wild, the newest iteration of everyone's favourite zero
configuration networking suite.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://avahi.org/"&gt;&lt;img style="border: 0" src="http://avahi.org/chrome/site/avahi-trac.png" width="200" height="96" alt="Avahi Logo" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You ask why this is something to blog about?&lt;/p&gt;

&lt;p&gt;Firstly, new in this version is Sjoerd Simons' &lt;tt&gt;avahi-gobject&lt;/tt&gt;
library, a GObject wrapper around the Avahi API. It allows full GObject-style
object oriented programming of Zeroconf applications, with signals and
everything. To all you GNOME/Gtk+ hackers out there: now it is even more fun to
hack your own Zeroconf applications for GNOME/Gtk+!&lt;/p&gt;

&lt;p&gt;Secondly, this is the first release to ship i18n support. For those who
prefer to run their systems with non-english locales&lt;sup&gt;[1]&lt;/sup&gt; this should
be good news. I've always been a little afraid of adding i18n support, since
this either meant that I would have contstantly had to commit i18n patches, or that I
would have needed to move my code to GNOME SVN. However, we now have &lt;a href="https://publictest5.fedora.redhat.com/submit/"&gt;Fedora's Transifex&lt;/a&gt;,
which allows me to open up my SVN for translators without much organizational
work on my side. Translations are handled centrally, and commited back to my
repository when needed. It's a bit like Canonical's Rosetta, but with a focus
on commiting i18n changes upstream, and without being closed-source crap.&lt;/p&gt;

&lt;p&gt;You like this release? Then &lt;a href="http://www.ohloh.net/accounts/7661"&gt;give me a kudo on ohloh.net&lt;/a&gt;. My
ego still thirsts for gold, and I am still (or again) 25 positions away from
that. ;-)&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Personally, I run my desktop with &lt;tt&gt;$LC_MESSAGES=C&lt;/tt&gt;, but
LANG=de_DE, which are the settings I can recommend to everyone who is from Germany and wants to stay
sane. Unfortunately it is a PITA to configure this on
GNOME, though.&lt;/small&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 17 Dec 2007 17:43:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-12-17:/blog/projects/avahi-0.6.22.html</guid><category>projects</category></item><item><title>Back from India</title><link>https://0pointer.net/blog/photos/india.html</link><description>
                
&lt;p&gt;&lt;a href="http://foss.in/"&gt;FOSS.in&lt;/a&gt; was one of the best conferences I have ever
been to, and a lot of fun. The organization was flawless and I can
only heartily recommend everyone to send in a presentation proposal for next year's
iteration. I certainly hope the commitee is going to accept my proposals next year again. Especially the food was gorgeous.&lt;/p&gt;

&lt;p&gt;I will spare you the usual conference photos, you can find a lot of those on &lt;a href="http://flickr.com/search/?q=fossin2007&amp;amp;m=tags"&gt;flickr&lt;/a&gt;. However, what I will not spare you are a couple of photos I shot in &lt;a href="http://en.wikipedia.org/wiki/Bangalore"&gt;Bangalore&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Srirangapatna"&gt;Srirangapatna&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/Mysore"&gt;Mysore&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=146"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-146.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=510"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-510.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=462"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-462.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=149"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-149.jpg" width="120" height="80" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=24"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-24.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=378"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-378.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=88"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-88.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=138"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-138.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=251"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-251.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=260"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-260.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=306"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-306.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=339"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-339.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=477"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-477.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=342"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-342.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=400"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-400.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=456"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-456.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=486"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-486.jpg" width="80" height="120" /&gt;&lt;/a&gt; &amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=India%202007-12&amp;amp;photo=524"&gt;&lt;img alt="India" src="http://0pointer.de/photos/galleries/India%202007-12/thumbs/img-524.jpg" width="80" height="120" /&gt;&lt;/a&gt;
&lt;/p&gt;


&lt;p&gt;
&lt;a href="http://0pointer.de/static/mysore"&gt;&lt;img src="http://0pointer.de/static/mysore-small.jpeg" alt="Panorama" width="1024" height="187" /&gt;&lt;/a&gt;
&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 16 Dec 2007 11:42:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-12-16:/blog/photos/india.html</guid><category>photos</category></item><item><title>Oh, Felix America!</title><link>https://0pointer.net/blog/felix-america.html</link><description>
                
&lt;p&gt;&lt;a href="http://amazon.de/gp/product/B00065GZL2/ref=s9_asin_image_1?pf_rd_m=A3JWKAKR8XB7XF&amp;amp;pf_rd_s=center-2&amp;amp;pf_rd"&gt;These&lt;/a&gt; &lt;a href="http://www.amazon.de/Canon-EF-50mm-1-Objektiv/dp/B00066HJPC/ref=pd_ecc_rvi_2"&gt;two&lt;/a&gt; lenses cost EUR 679 resp. EUR 386.45 at amazon.de.&lt;/p&gt;

&lt;p&gt;On amazon.com you can &lt;a href="http://www.amazon.com/Canon-EF-S-10-22mm-3-5-4-5-Digital/dp/B0002Y5WXE/ref=pd_bbs_sr_1?ie=UTF8&amp;amp;s=electro"&gt;get&lt;/a&gt; &lt;a href="http://www.amazon.com/Canon-50mm-Medium-Telephoto-Cameras/dp/B00009XVCZ/ref=pd_bbs_sr_1?ie=UTF8&amp;amp;s=electr"&gt;them&lt;/a&gt; for US$ 639, resp. US$ 289.95.&lt;/p&gt;

&lt;p&gt;At &lt;a href="http://www.google.com/search?ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;q=639+us+dollars+in+euro"&gt;today's&lt;/a&gt; &lt;a href="http://www.google.com/search?hl=en&amp;amp;safe=off&amp;amp;q=289.95+us+dollars+in+euro&amp;amp;btnG=Search"&gt;courses&lt;/a&gt; that's 430 EUR, resp. 195 EUR.&lt;/p&gt;

&lt;p&gt;Americans pay 63%, resp. 50% of what Germans have to pay for these lenses. How unfair! :-(&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 28 Nov 2007 20:39:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-11-28:/blog/felix-america.html</guid><category>misc</category></item><item><title>Lazyweb: POSIX Process Groups and Sessions</title><link>https://0pointer.net/blog/projects/pgrp-vs-session.html</link><description>
                
&lt;p&gt;&lt;i&gt;Dear Lazyweb,&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;I have trouble understanding what exactly POSIX process groups and sessions
are good for. The &lt;a href="http://www.opengroup.org/onlinepubs/009695399/functions/setpgid.html"&gt;POSIX&lt;/a&gt;
&lt;a href="http://www.opengroup.org/onlinepubs/009695399/functions/setsid.html"&gt;docs&lt;/a&gt;
are very vague on this. What exactly is the effect of being in a process
group with some other process, and what does being in the same session with it
add on top? And what is the benefit of being a group/session &lt;b&gt;leader&lt;/b&gt; in contrast of just being a normal random process in the group/session?&lt;/p&gt;

&lt;p&gt;The only thing I understood is that &lt;tt&gt;kill(2)&lt;/tt&gt; with a negative first
parameter can be used to "multicast" signals to entire process groups, and that
SIGINT on C-c is delivered that way. But, is that all? The POSIX docs say
"&lt;i&gt;... for the purpose of signaling, placement in foreground or background,
and other job control actions&lt;/i&gt;", which is very vague. What are those
"&lt;i&gt;other job control actions?&lt;/i&gt;". What does job control persist of besides
multicasting signals? And what is "&lt;i&gt;placement in foreground or background&lt;/i&gt;" other
than delivering signals?&lt;/p&gt;

&lt;p&gt;And I totally don't get POSIX sessions and how they differ from POSIX process groups. Please enlighten me!&lt;/p&gt;

&lt;p&gt;Puzzled,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;Lennart&lt;/i&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 26 Nov 2007 03:22:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-11-26:/blog/projects/pgrp-vs-session.html</guid><category>projects</category></item><item><title>Emulated atomic operations and real-time scheduling</title><link>https://0pointer.net/blog/projects/atomic-rt.html</link><description>
                
&lt;p&gt;Unfortunately not all CPU architectures have native support for &lt;a href="http://en.wikipedia.org/wiki/Atomic_operations"&gt;atomic
operations&lt;/a&gt;, or only support a very limited subset.  Most
prominently &lt;a href="http://en.wikipedia.org/wiki/ARM_architecture"&gt;ARM&lt;/a&gt;v5 (and
older) hasn't any support besides the most basic atomic swap
operation&lt;sup&gt;[1]&lt;/sup&gt;. Now, more and more free code is starting to
use atomic operations and &lt;a href="http://en.wikipedia.org/wiki/Lock-free"&gt;lock-free
algorithms&lt;/a&gt;, one being my own project, &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt;. If you have ever done &lt;a href="http://en.wikipedia.org/wiki/Real-time"&gt;real-time
programming&lt;/a&gt; you probably know that you cannot really do it without
support for atomic operations. One question remains however: what to
do on CPUs which support only the most basic atomic operations
natively?&lt;/p&gt;

&lt;p&gt;On the kernel side atomic ops are very easy to emulate: just disable
interrupts temporarily, then do your operation non-atomically, and afterwards
enable them again. That's relatively cheap and works fine (unless you are on SMP -- which
fortunately you usually are not for those CPUs). The Linux
kernel does it this way and it is good. But what to do in user-space, where you cannot just go and disable interrupts?&lt;/p&gt;

&lt;p&gt;Let's see how the different userspace libraries/frameworks do it
for ARMv5, a very relevant architecture that only knows an atomic swap (exchange)
but no &lt;a href="http://en.wikipedia.org/wiki/Compare-and-swap"&gt;CAS&lt;/a&gt;
or even atomic arithmetics. Let's start with an excerpt from &lt;a href="http://sourceware.org/cgi-bin/cvsweb.cgi/ports/sysdeps/arm/bits/atomic.h?rev=1.1&amp;amp;content-type=text/x-cvsweb-markup&amp;amp;cvsroot=glibc"&gt;glibc's
atomic operations implementation for ARM&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;/* Atomic compare and exchange.  These sequences are not actually atomic;
   there is a race if *MEM != OLDVAL and we are preempted between the two
   swaps.  However, they are very close to atomic, and are the best that a
   pre-ARMv6 implementation can do without operating system support.
   LinuxThreads has been using these sequences for many years.  */&lt;/pre&gt;

&lt;p&gt;This comment says it all. Not good. The more you make use of atomic
operations the more likely you're going to to hit this race. Let's
hope glibc is not a heavy user of atomic operations. &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; however is, and
PulseAudio happens to be my focus.&lt;/p&gt;

&lt;p&gt;Let's have a look on how &lt;a href="http://google.com/codesearch?hl=en&amp;amp;q=+show:R2PL3lqx9sY:caDbKUtFdpk:0EHcDMTKVeo&amp;amp;sa=N&amp;amp;cd=2&amp;amp;ct=rc&amp;amp;cs_p=http://www.studio-to-go.co.uk/source-packages/2.x/qt4-x11-4.2.3.tar.bz2&amp;amp;cs_f=qt4-x11-4.2.3/src/corelib/arch/qatomic_arm.h"&gt;Qt4&lt;/a&gt;
does it:&lt;/p&gt;

&lt;pre&gt;extern Q_CORE_EXPORT char q_atomic_lock;

inline char q_atomic_swp(volatile char *ptr, char newval)
{
    register int ret;
    asm volatile("swpb %0,%1,[%2]"
                 : "=&amp;amp;r"(ret)
                 : "r"(newval), "r"(ptr)
                 : "cc", "memory");
    return ret;
}

inline int q_atomic_test_and_set_int(volatile int *ptr, int expected, int newval)
{
    int ret = 0;
    while (q_atomic_swp(&amp;amp;q_atomic_lock, ~0) != 0);
    if (*ptr == expected) {
	*ptr = newval;
	ret = 1;
    }
    q_atomic_swp(&amp;amp;q_atomic_lock, 0);
    return ret;
}&lt;/pre&gt;

&lt;p&gt;So, what do we have here? A slightly better version. In standard
situations it actually works. But it sucks big time, too. Why? It
contains a spin lock: the variable &lt;tt&gt;q_atomic_lock&lt;/tt&gt; is used for
locking the atomic operation. The code tries to set it to non-zero,
and if that fails it tries again, until it succeeds, in the hope that
the other thread -- which currently holds the lock -- gives it up. The
big problem here is: it might take a while until that happens, up to
1/HZ time on Linux. Usually you want to use atomic operations to
minimize the need for mutexes and thus speed things up. Now, here you
got a lock, and it's the worst kind: the spinning lock. Not
good. Also, if used from a real-time thread the machine simply locks
up when we enter the loop in contended state, because preemption is
disabled for RT threads and thus the loop will spin forever. Evil. And
then, there's another problem: it's a big bottleneck, because all
atomic operations are synchronized via a single variable which is
&lt;tt&gt;q_atomic_lock&lt;/tt&gt;. Not good either. And let's not forget that
only code that has access to &lt;tt&gt;q_atomic_lock&lt;/tt&gt; actually can
execute this code safely. If you want to use it for
lock-free IPC via shared memory this is going to break. And let's not
forget that it is unusable from signal handlers (which probably
doesn't matter much, though). So, in summary: this code sucks,
too.&lt;/p&gt;

&lt;p&gt;Next try, let's have a look on how &lt;a href="http://svn.gnome.org/viewvc/glib/trunk/glib/gatomic.c?revision=5748&amp;amp;view=markup"&gt;glib&lt;/a&gt;
does it:&lt;/p&gt;

&lt;pre&gt;static volatile int atomic_spin = 0;

static int atomic_spin_trylock (void)
{
  int result;

  asm volatile (
    "swp %0, %1, [%2]\n"
    : "=&amp;amp;r,&amp;amp;r" (result)
    : "r,0" (1), "r,r" (&amp;amp;atomic_spin)
    : "memory");
  if (result == 0)
    return 0;
  else
    return -1;
}

static void atomic_spin_lock (void)
{
  while (atomic_spin_trylock())
    sched_yield();
}

static void atomic_spin_unlock (void)
{
  atomic_spin = 0;
}

gint
g_atomic_int_exchange_and_add (volatile gint *atomic,
			       gint           val)
{
  gint result;

  atomic_spin_lock();
  result = *atomic;
  *atomic += val;
  atomic_spin_unlock();

  return result;
}&lt;/pre&gt;


&lt;p&gt;Once again, a spin loop. However, this implementation makes use of
&lt;tt&gt;sched_yield()&lt;/tt&gt; for asking the OS to reschedule. It's a bit
better than the Qt version, since it doesn't spin just burning CPU,
but instead tells the kernel to execute something else, increasing the
chance that the thread currently holding the lock is scheduled. It's a
bit friendlier, but it's not great either because this might still delay
execution quite a bit. It's better then the Qt version. And probably
one of the very few ligitimate occasions where using
&lt;tt&gt;sched_yield()&lt;/tt&gt; is OK. It still doesn't work for RT -- because
&lt;tt&gt;sched_yield()&lt;/tt&gt; in most cases is a NOP on for RT threads, so
you still get a machine lockup. And it still has the
one-lock-to-rule-them-all bottleneck. And it still is not compatible
with shared memory.&lt;/p&gt;

&lt;p&gt;Then, there's &lt;a href="http://google.com/codesearch?hl=en&amp;amp;q=+show:qG2_4wZ91VE:2IKv4KO6qLk:JVTLjbfbCrs&amp;amp;sa=N&amp;amp;cd=1&amp;amp;ct=rc&amp;amp;cs_p=http://freshmeat.net/redir/gc/15903/url_tgz/gc6.8.tar.gz&amp;amp;cs_f=gc-7.0/libatomic_ops-1.2/src/atomic_ops.c"&gt;libatomic_ops&lt;/a&gt;. It's
the most complex code, so I'll spare you to paste it here. Basically
it uses the same spin loop. With three differences however:&lt;/p&gt;

&lt;ol&gt;

&lt;li&gt;16 lock variables instead of a single one are used. The variable
that is used is picked via simple hashing of the pointer to the atomic variable
that shall be modified. This removes the one-lock-to-rule-them-all
bottleneck.&lt;/li&gt;

&lt;li&gt;Instead of &lt;tt&gt;pthread_yield()&lt;/tt&gt; it uses &lt;tt&gt;select()&lt;/tt&gt; with
a small timeval parameter to give the current holder of the lock some
time to give it up. To make sure that the &lt;tt&gt;select()&lt;/tt&gt; is not
optimized away by the kernel and the thread thus never is preempted
the sleep time is increased on every loop iteration.&lt;/li&gt;

&lt;li&gt;It explicitly disables signals before doing the atomic operation.&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;It's certainly the best implementation of the ones discussed here:
It doesn't suffer by the one-lock-to-rule-them-all bottleneck. It's
(supposedly) signal handler safe (which however comes at the cost of
doing two syscalls on every atomic operation -- probably a very high
price). It actually works on RT, due to sleeping for an explicit
time. However it still doesn't deal with &lt;a href="http://en.wikipedia.org/wiki/Priority_inversion"&gt;priority
inversion&lt;/a&gt; problems -- which is a big issue for real-time
programming. Also, the time slept in the &lt;tt&gt;select()&lt;/tt&gt; call might
be relatively long, since at least on Linux the time passed to
&lt;tt&gt;select()&lt;/tt&gt; is rounded up to 1/HZ -- not good for RT either. And
then, it still doesn't work for shared memory IPC.&lt;/p&gt;

&lt;p&gt;So, what do we learn from this? At least one thing: better don't do
real-time programming with ARMv5&lt;sup&gt;[2]&lt;/sup&gt;. But more practically, how
could a good emulation for atomic ops, solely based on atomic swap
look like? Here are a few ideas: &lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Use an implementation inspired by &lt;tt&gt;libatomic_ops&lt;/tt&gt;. Right
now it's the best available. It's probably a good idea, though, to
replace &lt;tt&gt;select()&lt;/tt&gt; by a &lt;tt&gt;nanosleep()&lt;/tt&gt;, since on recent
kernels the latter doesn't round up to 1/HZ anymore, at least when you
have high-resolution timers&lt;sup&gt;[3]&lt;/sup&gt; Then, if you can live
without signal handler safety, drop the signal mask changing.&lt;/li&gt;

&lt;li&gt;If you use something based on &lt;tt&gt;libatomic_ops&lt;/tt&gt; and want to
use it for shared memory IPC, then you have the option to move the
lock variables into shared memory too. Note however, that this allows
evil applications to lock up your process by taking the locks and
never giving them up. (Which however is always a problem if not all
atomic operations you need are available in hardware) So if you do
this, make sure that only trusted processes can attach to your memory
segment.&lt;/li&gt;

&lt;li&gt;Alternatively, spend some time and investigate if it is possible
to use futexes to sleep on the lock variables. This is not trivial
though, since futexes right now expect the availability of an atomic
increment operation. But it might be possible to emulate this good
enough with the swap operation. There's now even a FUTEX_LOCK_PI
operation which would allow &lt;a href="http://en.wikipedia.org/wiki/Priority_inheritance"&gt;priority inheritance&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;Alternatively, find a a way to allow user space disabling
interrupts cheaply (requires kernel patching). Since enabling
RT scheduling is a priviliged operation already (since you may easily
lock up your machine with it), it might not be too problematic to
extend the ability to disable interrupts to user space: it's just yet
another way to lock up your machine.&lt;/li&gt;

&lt;li&gt;For the &lt;tt&gt;libatomic_ops&lt;/tt&gt; based algorithm: if you're lucky
and defined a struct type for your atomic integer types, like the
kernel does, or like I do in PulseAudio with &lt;tt&gt;pa_atomic_t&lt;/tt&gt;,
then you can stick the lock variable directly into your
structure. This makes shared memory support transparent, and removes
the one-lock-to-rule-them-all bottleneck completely. Of course, OTOH it
increases the memory consumption a bit and increases cache pressure
(though I'd assume that this is neglible).&lt;/li&gt;

&lt;li&gt;For the &lt;tt&gt;libatomic_ops&lt;/tt&gt; based algorithm: start sleeping for
the time returned by &lt;a href="http://www.opengroup.org/onlinepubs/000095399/functions/clock_getres.html"&gt;clock_getres()&lt;/a&gt;
(cache the result!). You cannot sleep shorter than that anyway.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Yepp, that's as good as it gets. Unfortunately I cannot serve you
the optimal solution on a silver platter. I never actually did
development for ARMv5, this blog story just sums up my thoughts on all
the code I saw which emulates atomic ops on ARMv5. But maybe someone
who actually cares about atomic operations on ARM finds this
interesting and maybe invests some time to prepare patches for Qt,
glib, glibc -- and &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; I added two more ideas to the list above.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update 2:&lt;/b&gt; Andrew Haley just posted something like &lt;a href="http://0pointer.de/blog/projects/atomic-rt#1194273540.23"&gt;the optimal solution&lt;/a&gt; for the problem. It would be great if people would start using this.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] The Nokia 770 has an ARMv5 chip, N800 has ARMv6. The OpenMoko phone apparently uses ARMv5.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] And let's not even think about CPUs which don't even have an atomic swap!&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[3] Which however you probably won't, given that they're only available on x86 on stable Linux kernels for now -- but still, it's cleaner.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 05 Nov 2007 00:17:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-11-05:/blog/projects/atomic-rt.html</guid><category>projects</category></item><item><title>Rain in Montreal</title><link>https://0pointer.net/blog/photos/montreal-rain.html</link><description>
                
&lt;p&gt;Sometimes, rain can be quite beautiful.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/photos/?gallery=Montreal%202007-07&amp;amp;photo=8&amp;amp;exif_style=&amp;amp;show_thumbs="&gt;&lt;img src="http://0pointer.de/static/montreal-rain-1.jpeg" alt="Montreal 1" width="156" height="234" /&gt;&lt;/a&gt;&amp;nbsp;&lt;a href="http://0pointer.de/photos/?gallery=Montreal%202007-07&amp;amp;photo=10"&gt;&lt;img src="http://0pointer.de/static/montreal-rain-2.jpeg" alt="Montreal 2" width="350" height="234" /&gt;&lt;/a&gt;&amp;nbsp;&lt;a href="http://0pointer.de/photos/?gallery=Montreal%202007-07&amp;amp;photo=9"&gt;&lt;img src="http://0pointer.de/static/montreal-rain-3.jpeg" alt="Montreal 3" width="156" height="234" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I took these during my stay at Montreal after &lt;a href="http://www.linuxsymposium.org/2007/index_2007.php"&gt;OLS 2007&lt;/a&gt;.  Which reminds me: don't miss my talks at &lt;a href="http://foss.in/2007"&gt;foss.in 2007&lt;/a&gt;, &lt;a href="http://linux.conf.au/"&gt;linux.conf.au 2008&lt;/a&gt; and &lt;a href="http://www.annodex.org/events/foms2008/"&gt;FOMS 2008&lt;/a&gt;. I'll be speaking about &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt;, &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; and practical real-time programming in userspace.&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 03 Nov 2007 00:40:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-11-03:/blog/photos/montreal-rain.html</guid><category>photos</category></item><item><title>Fedora Interview</title><link>https://0pointer.net/blog/projects/fedora-interview.html</link><description>
                
&lt;p&gt;Don't miss &lt;a href="http://fedoraproject.org/wiki/Interviews/LennartPoettering"&gt;this interesting Fedora interview with yours truly&lt;/a&gt;, where I go a bit into detail what's coming next for PulseAudio.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 30 Oct 2007 23:48:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-10-30:/blog/projects/fedora-interview.html</guid><category>projects</category></item><item><title>The next step</title><link>https://0pointer.net/blog/projects/pa-097.html</link><description>
                
&lt;p&gt;A few minutes ago, I finally released &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; &lt;a href="http://pulseaudio.org/milestone/0.9.7"&gt;0.9.7&lt;/a&gt;. Changes are numerous,
especially internally where the core is now threaded and mostly lock-free.
Check the rough list on the &lt;a href="http://pulseaudio.org/milestone/0.9.7"&gt;milestone page&lt;/a&gt;, &lt;a href="https://tango.0pointer.de/pipermail/pulseaudio-discuss/2007-October/000824.html"&gt;announcement email&lt;/a&gt;. As many of you
know we are shipping a pre-release of 0.9.7 in Fedora 8, enabled by default. The final release
offers quite a few additions over that prerelease. To show off a couple of nice features, here's a screencast, showing hotplug, simultaneous playback (what Apple calls aggregation) and zeroconfish network support:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://dev.gentooexperimental.org/~flameeyes/mezcalero-pulse-demo.ogm"&gt;&lt;img src="http://0pointer.de/public/demo-pulse-small.jpeg" width="300" height="262" alt="screencast" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please excuse the typos. Yes, I still use XMMS, don't ask &lt;sup&gt;&lt;small&gt;[1]&lt;/small&gt;&lt;/sup&gt;. Yes, you
need a bit of imagination to fully appreciate a screencast that lacks an audio track -- but demos audio software.&lt;/p&gt;

&lt;p&gt;So, what's coming next? Earcandy, timer-based scheduling/"glitch-free" audio, scriptability through Lua, the todo list is huge. My &lt;a href="http://0pointer.de/public/todo"&gt;unnoffical, scratchy, partly german TODO list for PulseAudio&lt;/a&gt; is available online.&lt;/p&gt;

&lt;p&gt;As it appears all relevant distros will now move to PA by default. So,
hopefully, PA is coming to a desktop near you pretty soon. -- Oh, you are one
of those who still don't see the benefit of a desktop sound server? Then,
please reread this &lt;a href="http://mail.gnome.org/archives/desktop-devel-list/2007-October/msg00136.html"&gt;too
long email of mine&lt;/a&gt;, or maybe &lt;a href="http://arstechnica.com/journals/linux.ars/2007/10/17/pulseaudio-to-bring-earcandy-to-linux"&gt;this
ars.technica article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OTOH, if you happen to like this release, then consider giving me a kudo on &lt;a href="http://www.ohloh.net/accounts/7661"&gt;ohloh.net&lt;/a&gt;, my ego wants a golden 10. ;-)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://pulseaudio.org/chrome/site/patitle.png" width="345" height="70" alt="logo" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Footnotes:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Those music players which categorize audio by ID3 tags just don't
work for me, because most of my music files are very badly named. However, my
directory structure is very well organized, but all those newer players don't
care about directory structures as it seems. XMMS doesn't really either, but
&lt;tt&gt;xmms .&lt;/tt&gt; does the job from the terminal.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;a href="http://farragut.flameeyes.is-a-geek.org/"&gt;Flameeyes&lt;/a&gt;, thank's for hosting this clip.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 30 Oct 2007 23:10:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-10-30:/blog/projects/pa-097.html</guid><category>projects</category></item><item><title>Glowing Sun</title><link>https://0pointer.net/blog/glowing-sun.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/photos/?gallery=Red%20IQ%202007-10"&gt;&lt;img src="http://0pointer.de/static/glowing-sun.jpeg" width="640" height="602" alt="Danish design in Red" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/blog/iq-light-mania.html"&gt;Danish-Mexican design&lt;/a&gt;,
this time in built from red ibico PolyOpaque; for your stylish and very
personal red light district.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 21 Oct 2007 21:40:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-10-21:/blog/glowing-sun.html</guid><category>misc</category></item><item><title>Yummy Mango Yummy Lassi Yummy</title><link>https://0pointer.net/blog/projects/lassi-lassi-popassi.html</link><description>
                
&lt;p&gt;&lt;a href="http://zee-nix.blogspot.com/2007/10/mango-lassi-icon.html"&gt;Zeeshan&lt;/a&gt;,
Mango Lassi tastes a lot different than a milk shake, believe me! Also,
even if Mango Lassi was actually a western thing, do you know that just
recently I was witness of &lt;a href="http://www.ohloh.net/accounts/4078"&gt;Sjoerd&lt;/a&gt;&lt;sup&gt;&lt;small&gt;[1]&lt;/small&gt;&lt;/sup&gt; ordering a Vindaloo Pizza
(or was it Korma?) at a Boston restaurant -- italian pizza with indian-style curry on top. Now, that's what some people
might be calling "ignorant of indian cuisine". But actually I think that, like
in music, mixing different styles, combining things from different origins is a
good thing, and is what makes culture live.&lt;/p&gt;

&lt;div&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/div&gt;
&lt;div&gt;[1] Who doesn't have a blog. Can you believe it?&lt;/div&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 17 Oct 2007 01:53:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-10-17:/blog/projects/lassi-lassi-popassi.html</guid><category>projects</category></item><item><title>An Icon for Mango Lassi</title><link>https://0pointer.net/blog/projects/mango-lassi-icon.html</link><description>
                
&lt;p&gt;Thanks to &lt;a href="http://vdepizzol.wordpress.com"&gt;Vinicius Depizzol&lt;/a&gt;'s great work, &lt;a href="http://0pointer.de/blog/projects/mango-lassi.html"&gt;Mango Lassi&lt;/a&gt; now has an icon:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://0pointer.de/public/mango-lassi-icon.png" width="48" height="48" alt="Mango Lassi's new icon" /&gt;&lt;/p&gt;

&lt;p&gt;Muito obrigado!&lt;/p&gt;

&lt;p&gt;I'd also like to thank everyone else who sent in an icon suggestion. Thank you very much!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 12 Oct 2007 21:59:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-10-12:/blog/projects/mango-lassi-icon.html</guid><category>projects</category></item><item><title>Fedora Planet Noise</title><link>https://0pointer.net/blog/projects/fedora-planet.html</link><description>
                
&lt;p&gt;Am I the only one who thinks that the usefulness of &lt;a href="http://planet.fedoraproject.org/"&gt;Fedora Planet&lt;/a&gt; as severely limited
because of the low signal-to-noise ratio that is due to far too many non-english (i.e. german,
french) language posts?&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 12 Oct 2007 21:52:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-10-12:/blog/projects/fedora-planet.html</guid><category>projects</category></item><item><title>PulseAudio FUD</title><link>https://0pointer.net/blog/projects/pulseaudio-fud.html</link><description>
                
&lt;p&gt;If you want to know more about &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt;'s relation to GNOME (especially if
you think PA is evil) then please read through &lt;a href="http://mail.gnome.org/archives/desktop-devel-list/2007-October/thread.html#00055"&gt;this
thread&lt;/a&gt; on desktop-devel, and especially &lt;a href="http://mail.gnome.org/archives/desktop-devel-list/2007-October/msg00136.html"&gt;this
long email I posted as a reply a few minutes ago&lt;/a&gt;, where I try to debunk all the &lt;a href="http://en.wikipedia.org/wiki/Fear%2C_uncertainty_and_doubt"&gt;FUD&lt;/a&gt; that has been spread.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 12 Oct 2007 21:42:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-10-12:/blog/projects/pulseaudio-fud.html</guid><category>projects</category></item><item><title>Mango Lassi</title><link>https://0pointer.net/blog/projects/mango-lassi.html</link><description>
                
&lt;p&gt;Yesterday, at the GNOME Summit in Boston I did a quick presentation of my new desktop input sharing
hotness thingy, called "Mango Lassi" (Alternatively known as "GNOME Input Sharing"). Something like a &lt;a href="http://synergy2.sourceforge.net/"&gt;Synergy&lt;/a&gt; done right, or an &lt;a href="http://x2x.dottedmag.net/"&gt;x2x&lt;/a&gt; that doesn't suck.&lt;/p&gt;

&lt;p&gt;So, for those who couldn't attend, here's a screenshot, which doesn't really tell how great it is, and which might also be a bit confusing:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/mango-lassi.png"&gt;&lt;img src="http://0pointer.de/public/mango-lassi-small.png" width="256" height="192" alt="Mango Lassi Screenshot" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here's a list of random features already available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discover desktops to share mouse and keyboards with automatically via &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fully peer-to-peer. All Mango Lassi instances are both client and server at the same time. Other hosts may enter or leave a running session at any time.&lt;/li&gt;
&lt;li&gt;No need to open X11 up for the network&lt;/li&gt;

&lt;li&gt;You have a 50% chance that for your setup you don't need any configuration
at all. In the case of the other 50% you might need to swap the order of your
screens manually in a simple dialog, because Mango Lassi didn't guess correctly which
screen is left and which screen is right.&lt;/li&gt;

&lt;li&gt;libnotify integration so that it tells you whenever a desktop joins or leaves your session.&lt;/li&gt;

&lt;li&gt;Shows a nice OSD on your screen when your screen's input is currently being redirected to another screen.&lt;/li&gt;
&lt;li&gt;Uses all those nifty GNOME APIs, like D-Bus-over-TCP, Avahi, libnotify, Gtk, ...&lt;/li&gt;
&lt;li&gt;Supports both the X11 clipboard and the selection, supporting all content types, and not just simple text -- i.e. you can copy and paste image data between Gimp on your screens&lt;/li&gt;
&lt;li&gt;Lot's of bugs and useless debug output, since this is basically the work of just three weekends.&lt;/li&gt;
&lt;li&gt;Tray icon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And here's a list of missing features:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Drag'n'drop between screens. (I figured out how this could work, it's just
a matter of actually implementing this, which is probably considerable work,
because this would require some UI work, to show a download dialog and
suchlike.)&lt;/li&gt;

&lt;li&gt;Integration with Matthias' GTK+ window migration patches, which would allow dragging GTK+ windows between screens. The migration code for GTK+ basically works. It's just a matter of getting them merged in GTK+ proper, and hooking them up properly with Mango Lassi, which probably needs some kind of special support in Metacity so that we get notified when a window drag is happening and the pointer comes near the edges of the screens.&lt;/li&gt;

&lt;li&gt;Encryption, authentication: Best solution would probably be that D-Bus would get native TLS support which we could then make use of.&lt;/li&gt;

&lt;li&gt;Support for legacy operating systems like Windows/MacOS. I personally don't
care much about this. However, Zeroconf implementations and D-Bus is available on
Windows/MacOS too, and the exposed D-Bus interfaces are not too X11-centric, so
this should be doable without too much work.&lt;/li&gt;

&lt;li&gt;UI Love, actually hooking up the desktop order changing buttons, save and restore the order automatically.&lt;/li&gt;

&lt;li&gt;MPX support (this would *rock*)&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;And finally, here's where you can get it:&lt;/p&gt;

&lt;pre&gt;git clone http://git.0pointer.de/repos/mango-lassi.git/&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://git.0pointer.de/?p=mango-lassi.git;a=summary"&gt;gitweb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, and I don't take feature wishlist requests for this project. If you need
a feature, implement it yourself. It's Free Software after all! I'd be happy if
someone would be willing to work on Mango Lassi in a way that it can become a
really good GNOME citizen and maybe even a proper part of it. But personally
I'll probably only work on it to a level where it does all I need to work with
my Laptop and my Desktop PC on my desk in a sane way. I am almost 100% busy
with &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; these days, and thus
unable to give Mango Lassi the love it could use. So, stand up now, if you want
to take over maintainership!&lt;/p&gt;

&lt;p&gt;Hmm, Mango Lassi could use some good artwork, starting with an icon. I am
quite sure that someone with better graphic skills then me could easily create
a delicious icon perhaps featuring a glass of fresh, juicy &lt;a href="http://images.google.com/images?ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;q=mango+lassi&amp;amp;um=1&amp;amp;sa=N&amp;amp;tab=wi"&gt;Mango
Lassi&lt;/a&gt;. I'd be very thankful for every icon submission!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 09 Oct 2007 18:35:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-10-09:/blog/projects/mango-lassi.html</guid><category>projects</category></item><item><title>Twenty-First</title><link>https://0pointer.net/blog/projects/twenty-first.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.linuxworld.com/community/?q=node/1447"&gt;Hahaha.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yours truely, Lennart (C list blogger).&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 09 Oct 2007 06:21:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-10-09:/blog/projects/twenty-first.html</guid><category>projects</category></item><item><title>This is a good move</title><link>https://0pointer.net/blog/projects/kmod.html</link><description>
                &lt;p&gt;&lt;a href="https://www.redhat.com/archives/fedora-devel-list/2007-September/msg01949.html"&gt;I hope other distributions will follow.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 23 Sep 2007 17:02:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-09-23:/blog/projects/kmod.html</guid><category>projects</category></item><item><title>Enforcing a Whitespace Regime</title><link>https://0pointer.net/blog/projects/whitespace-regime.html</link><description>
                
&lt;p&gt;So, you want to be as tough as the kernel guys and enforce a strict
whitespace regime on your project? But you lack the whitespace
fascists with too many free time lurking on your mailing list who
might do all the bitching about badly formatted patches for you?
Salvation is here:&lt;/p&gt;

&lt;p&gt;Stick &lt;a href="http://0pointer.de/public/pre-commit.txt"&gt;this
pre-commit file&lt;/a&gt; in your SVN repository as
&lt;tt&gt;hooks/pre-commit&lt;/tt&gt; and give it a &lt;tt&gt;chmod +x&lt;/tt&gt; and your
SVN server will do all the bitching for you -- for free:&lt;/p&gt;

&lt;pre&gt;#!/bin/bash -e

REPOS="$1"
TXN="$2"

SVNLOOK=/usr/bin/svnlook

# Require some text in the log
$SVNLOOK log -t "$TXN" "$REPOS" | grep -q '[a-zA-Z0-9]' || exit 1

# Block commits with tabs or trailing whitespace
$SVNLOOK diff -t "$TXN" "$REPOS" | python /dev/fd/3 3&amp;lt;&amp;lt;'EOF'
import sys
ignore = True
SUFFIXES = [ ".c", ".h", ".cc", ".C", ".cpp", ".hh", ".H", ".hpp", ".java" ]
filename = None

for ln in sys.stdin:

        if ignore and ln.startswith("+++ "):
                filename = ln[4:ln.find("\t")].strip()
                ignore = not reduce(lambda x, y: x or y, map(lambda x: filename.endswith(x), SUFFIXES))

        elif not ignore:
		if ln.startswith("+"):

			if ln.count("\t") &amp;gt; 0:
                        	sys.stderr.write("\n*** Transaction blocked, %s contains tab character:\n\n%s" % (filename, ln))
                        	sys.exit(1)

                	if ln.endswith(" \n"):
                        	sys.stderr.write("\n*** Transaction blocked, %s contains lines with trailing whitespace:\n\n%s&amp;lt;EOL&amp;gt;\n" % (filename, ln.rstrip("\n")))
                        	sys.exit(1)

		if not (ln.startswith("@") or \
			ln.startswith("-") or \
			ln.startswith("+") or \
			ln.startswith(" ")):

			ignore = True

sys.exit(0)
EOF

exit "$?"&lt;/pre&gt;

&lt;p&gt;This will cause all commits to be blocked that don't follow my personal tase of whitespace rules.&lt;/p&gt;

&lt;p&gt;Of course, it is up to you to adjust this script to your personal
taste of fascism. If you hate tabs like I do, and fear trailing
whitespace like I do, than you can use this script without any
changes. Otherwise, learn Python and do some trivial patching.&lt;/p&gt;

&lt;p&gt;Hmm, so you wonder why anyone would enforce a whitespace regime
like this? First of all, it's a chance to be part of a regime --
where you are the dictator! Secondly, if people use tabs source files
look like &lt;i&gt;Kraut und R&amp;uuml;ben&lt;/i&gt;, different in every
editor&lt;sup&gt;[1]&lt;/sup&gt;. Thirdly, trailing whitespace make clean diffs
difficult&lt;sup&gt;[2]&lt;/sup&gt;. And think of the hard disk space savings!&lt;/p&gt;

&lt;p&gt;I wonder how this might translate into GIT. I have a couple of GIT
repositories where I'd like to enforce a similar regime as in my SVN repositories. Suggestions welcome!&lt;/p&gt;

&lt;p&gt;Oh, and to make it bearable to live under such a regime, configure
your &lt;tt&gt;$EDITOR&lt;/tt&gt; properly, for example by hooking
&lt;tt&gt;nuke-trailing-whitespace.el&lt;/tt&gt; to &lt;tt&gt;'write-file-hooks&lt;/tt&gt; in
Emacs.&lt;/p&gt;

&lt;small&gt;&lt;b&gt;Footnotes&lt;/b&gt;&lt;/small&gt;

&lt;p&gt;&lt;small&gt;[1] Yes, some people think this is a feature. I don't. But talk to &lt;tt&gt;/dev/null&lt;/tt&gt; if you want to discuss this with me.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] Yes, there is &lt;tt&gt;diff -b&lt;/tt&gt;, but it is still a PITA.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 20 Sep 2007 23:01:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-09-20:/blog/projects/whitespace-regime.html</guid><category>projects</category></item><item><title>iLock-in: Apple locks Free Software out, but where's the news?</title><link>https://0pointer.net/blog/projects/apple-sucks.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.figuiere.net/hub/blog/?2007/09/15/559-free-software-lock-out"&gt;So,
Apple now blocks third-party software from accessing iPods.&lt;/a&gt; But is behaviour like that
news? No, unfortunately not at all.&lt;/p&gt;

&lt;p&gt;Let's have a look on two technologies that are closely related to the iPod
and Apple-style media playback: &lt;a href="http://en.wikipedia.org/wiki/Digital_Audio_Access_Protocol"&gt;DAAP (Digital
Audio Access Protocol)&lt;/a&gt; and &lt;a href="http://en.wikipedia.org/wiki/RAOP"&gt;RAOP
(Remote Audio Output Protocol).&lt;/a&gt; RAOP is the protocol that is spoken when
you want to output audio from iTunes over the network on your AirPort base
station. DAAP is the popular protocol which you can use to swap music
between multiple iTunes instances on a LAN. Both technologies use cryptographic hashes to block interoperable alternative implementations.&lt;/p&gt;

&lt;p&gt;Now, the RAOP client crypto key has been extracted from iTunes, hence its
now possible to implement alternative software that takes the role of iTunes
and streams audio to an AirPort. However, noone managed to extract the RAOP
server key yet, hence noone is able to implement software that exposes itself
as AirPort-compatible audio sink on the network, so that iTunes could stream
data to it.&lt;/p&gt;

&lt;p&gt;With DAAP it's a similar situation: iTunes uses cryptographic hashes to make
sure that only real iTunes instances can swap audio with each other. This key
has been broken multiple times, hence there are now a couple of alternative
DAAP implementations, which can swap audio with iTunes (&lt;a href="http://www.gnome.org/projects/rhythmbox/"&gt;Rhythmbox&lt;/a&gt; being one
example). However, with iTunes 7 Apple changed the cryptographic key once
again, and until now nobody managed to break it.&lt;/p&gt;

&lt;p&gt;So basically, Apple now dongles AirPorts to iTunes, iTunes to iTunes and
iTunes to iPods. The whole Apple eco-system of media devices and software is dongled
together. And none of the current iterations of the underlying technologies
have been fully broken yet.&lt;/p&gt;

&lt;p&gt;While the audio files you can buy at the iTunes shop may now be DRM-free,
you're still locked into the Apple eco-system if you do that. They replaced DRM with
&lt;a href="http://en.wikipedia.org/wiki/Vendor_lockin"&gt;vendor lock-in&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This lock-in behaviour is childish at best. DAAP once was the de-facto
standard for swapping media files in LANs. Swapping files in LANs is
perfectly legitimate and legal. Then, Microsoft/Intel started to include a
similar technology in UPnP, the &lt;a href="http://www.upnp.org/standardizeddcps/mediaserver.asp"&gt;UPnP
MediaServer&lt;/a&gt;. An open technology that has now been included in endless media
server devices. Several Free Software implementations exist (most notably &lt;a href="http://www.gupnp.org/"&gt;gUPnP&lt;/a&gt;). These days, uPNP MediaServer is
ubiquitous, DAAP is no more. Apple had the much better starting position, but
they blew it, because of their childish locking-out of alternative
implementations.&lt;/p&gt;

&lt;p&gt;I believe that DAAP is the superior protocol in comparison to UPnP
MediaServer. (Not really surprising, since I wrote most of &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt;, which is a free implementation of
mDNS/DNS-SD ("Zeroconf"), the (open) Apple technology that is the basis for
DAAP.) However, due to the closedness of DAAP I would recommend everyone to
favour UPnP MediaServer over DAAP. It's a pity.&lt;/p&gt;

&lt;p&gt;Both DAAP and UPnP MediaServer are transfer protocols, nothing that is ever
directly exposed to the user. Right now, Free Software media players support DAAP much better than UPnP MediaServer. Hopefully, they will start to
abstract the differences away, and allow swapping music the same way over DAAP
and over uPnP. And hopefully, DAAP will eventually die or Apple will open
it.  They have shown that they are able to change for the good, they became much
more open with WebKit, and they changed the license of Bonjour to a real Free
Software license. Let's hope they will eventually notice that locking users in
makes their own technology irrelevant in the long term.&lt;/p&gt;

&lt;p&gt;Oh, and let's hope that &lt;a href="http://nanocrew.net/"&gt;Jon&lt;/a&gt; finds the time to break all remaining Apple crypto keys! Jon, DAAP 7.0, and the RAOP server key is waiting for you! I'd love to make &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; RAOP-compatible, both as client and as server.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; &lt;a href="http://arstechnica.com/news.ars/post/20070916-gtkpod-coders-crack-apples-new-ipod-checksum.html"&gt;Ars Technica has an update on this.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 15 Sep 2007 18:52:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-09-15:/blog/projects/apple-sucks.html</guid><category>projects</category></item><item><title>You talkin' to me?</title><link>https://0pointer.net/blog/projects/lugradio.html</link><description>
                
&lt;p&gt;Woah, &lt;a href="http://www.lugradio.org/episodes/83"&gt;I am interviewed on LugRadio&lt;/a&gt;. (@ 71:09)&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 14 Sep 2007 00:12:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-09-14:/blog/projects/lugradio.html</guid><category>projects</category></item><item><title>ccache</title><link>https://0pointer.net/blog/projects/ccache.html</link><description>
                
&lt;pre&gt;
$ ccache -s | egrep "(cache hit|cache miss)"
cache hit                        3518652
cache miss                        168484
$ echo $((168484*1000/3518652))
47
$
&lt;/pre&gt;

&lt;p&gt;Less than 5% of the compiler invocations on my development machine since 2004 actually processed new and unseen code.&lt;/p&gt;

&lt;p&gt;I'm still unsure, though, what this is telling me?&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 02 Sep 2007 23:54:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-09-02:/blog/projects/ccache.html</guid><category>projects</category></item><item><title>Three days left</title><link>https://0pointer.net/blog/projects/foms-2008.html</link><description>
                
&lt;p&gt;Only &lt;b&gt;three days&lt;/b&gt; left for sending in your paper for &lt;a href="http://www.annodex.org/events/foms2008/"&gt;FOMS 2008, the best Free Software
multimedia conference/workshop around&lt;/a&gt;. The best chance to meet all the
important people from the major multimedia projects!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 22 Aug 2007 16:34:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-08-22:/blog/projects/foms-2008.html</guid><category>projects</category></item><item><title>An era ends, a new one begins</title><link>https://0pointer.net/blog/projects/pulseaudio-fedora.html</link><description>
                
&lt;p&gt;&lt;a href="https://www.redhat.com/archives/fedora-devel-list/2007-August/msg01196.html"&gt;Earlier today&lt;/a&gt; I switched Fedora over to install &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; instead of the venerable &lt;a href="http://www.tux.org/~ricdude/overview.html"&gt;EsounD&lt;/a&gt; by default.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 16 Aug 2007 22:30:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-08-16:/blog/projects/pulseaudio-fedora.html</guid><category>projects</category></item><item><title>GUADEC 2007 Slides</title><link>https://0pointer.net/blog/projects/guadec-2007-slides.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/public/pulseaudio-presentation-guadec2007.pdf"&gt;My GUADEC 2007 slides.&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 03 Aug 2007 23:55:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-08-03:/blog/projects/guadec-2007-slides.html</guid><category>projects</category></item><item><title>I wonder ...</title><link>https://0pointer.net/blog/projects/send-file.html</link><description>
                
&lt;p&gt;... whether the guys behind &lt;a href="http://code.google.com/p/giver/"&gt;this&lt;/a&gt; know about &lt;a href="http://techn.ocracy.org/telekinesis/"&gt;this&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;It's a pleasure to see as many projects as possible making use of &lt;a href="http://avahi.org"&gt;Avahi&lt;/a&gt;.
OTOH I believe that all solutions should speak the same protocol. Using
Apple's somewhat standardized link-local iChat/XMPP protocol (which is what Telekinesis does) seems to be the
best option to me: because you get MacOSX interoperability for free and
many IM clients (including many on Windows) already contain support for this as
well.&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 23 Jul 2007 19:10:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-07-23:/blog/projects/send-file.html</guid><category>projects</category></item><item><title>CUPS 1.3b1 gained Zeroconf support</title><link>https://0pointer.net/blog/projects/cups-bonjour.html</link><description>
                
&lt;p&gt;Seems CUPS now comes with Zeroconf/Bonjour network printer browsing support included in the &lt;a href="http://www.cups.org/articles.php?L479"&gt;upstream tarball&lt;/a&gt;. I haven't
tried this myself, but presumably CUPS should work on &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; as well, since we ship a -- these days nearly
perfect -- Bonjour compatibility library. &lt;/p&gt;

&lt;p&gt;In Fedora Rawhide &lt;a href="http://cvs.fedora.redhat.com/viewcvs/devel/cups/cups-avahi.patch?rev=1.1&amp;amp;view=auto"&gt;this
functionality&lt;/a&gt; seems to be enabled already. Other distibutions, please follow!&lt;/p&gt;

&lt;p&gt;Seems at least one good thing came from the recent &lt;a href="http://lwn.net/Articles/242020/"&gt;Apple buyout of CUPS/Easy
Software Products&lt;/a&gt;: I can now remove one item from my TODO list which has been there for a long time already.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 23 Jul 2007 18:32:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-07-23:/blog/projects/cups-bonjour.html</guid><category>projects</category></item><item><title>Slides for LRL and OLS</title><link>https://0pointer.net/blog/projects/ols-lrl-slides.html</link><description>
                
&lt;p&gt;For those interested: here're my slides for my presentations at LRL and OLS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/public/pulseaudio-presentation-ols2007.pdf"&gt;Ottawa Linux Symposium 2007: Cleaning up the Linux Desktop Audio Mess&lt;/a&gt; (Not too much new stuff here if you already read my LCA slides)&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/public/avahi-presentation-lrl2007.pdf"&gt;LugRadio Live 2007: Six Use Cases for Avahi&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;LWN linked &lt;a href="http://excess.org/article/2007/07/ottawa-linux-symposium-2007-day-4/"&gt;a short summary of my OLS talk&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 11 Jul 2007 00:25:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-07-11:/blog/projects/ols-lrl-slides.html</guid><category>projects</category></item><item><title>Im Zentrum der Macht</title><link>https://0pointer.net/blog/photos/im-zentrum-der-macht.html</link><description>
                
&lt;p&gt;The Government District in Berlin, with the &lt;i&gt;Reichstag&lt;/i&gt; and the offices of the members of the &lt;i&gt;Bundestag&lt;/i&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/regierungsviertel.html"&gt;&lt;img src="http://0pointer.de/static/regierungsviertel-small.jpeg" width="1024" height="175" alt="Im Zentrum der Macht" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Diana Temple in the &lt;i&gt;Hofgarten&lt;/i&gt; in Munich:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/hofgarten.html"&gt;&lt;img src="http://0pointer.de/static/hofgarten-small.jpeg" width="1024" height="167" alt="Hofgarten" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;i&gt;K&amp;ouml;nigsplatz&lt;/i&gt; in Munich:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/koenigsplatz.html"&gt;&lt;img src="http://0pointer.de/static/koenigsplatz-small.jpeg" width="1024" height="122" alt="K√∂nigsplatz" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;i&gt;Residenz&lt;/i&gt; in Munich:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/residenz.html"&gt;&lt;img src="http://0pointer.de/static/residenz-small.jpeg" width="1024" height="166" alt="Residenz" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;View from the tower of Old &lt;i&gt;St. Peter&lt;/i&gt; in Munich:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/stpeter.html"&gt;&lt;img src="http://0pointer.de/static/stpeter-small.jpeg" width="1024" height="162" alt="St. Peter" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Green pastures of Hamburg-Wohldorf:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/wohldorfer-feld.html"&gt;&lt;img src="http://0pointer.de/static/wohldorfer-feld-small.jpeg" width="1024" height="146" alt="Wohldorfer Feld" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/panos.cgi"&gt;All my panoramic photos.&lt;/a&gt; (Warning! Page contains a lot of oversized, badly scaled images.)&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 23 Jun 2007 22:26:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-06-23:/blog/photos/im-zentrum-der-macht.html</guid><category>photos</category></item><item><title>Re: Avahi - what happened. on Solaris..?</title><link>https://0pointer.net/blog/projects/project-indiana-part2.html</link><description>
                
&lt;p&gt;&lt;a href="http://dar-k.blogspot.com/2007/06/avahi-what-happened-on-solaris.html"&gt;In response to Darren Kenny&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;On Linux (and FreeBSD) &lt;a href="http://0pointer.de/lennart/projects/nss-mdns/"&gt;nss-mdns&lt;/a&gt; has been
providing &lt;i&gt;decent low-level integration of mDNS at the nsswitch level&lt;/i&gt; for
ages. In fact it even predates Avahi by a few months. Porting it to Solaris
would have been almost trivial. And, Sun engineers even asked about nss-mdns,
so I am quite sure that Sun knew about this.&lt;/li&gt;

&lt;li&gt;You claim that our C API was &lt;i&gt;internal&lt;/i&gt;? I wonder who told you that. I
definitely did not. The API has been available on the Avahi web site for ages
and is relatively well documented &lt;sup&gt;[1]&lt;/sup&gt;, I wonder how anyone could
ever come to the opinion that it was "internal". Regarding API stability: yes, I
said that we make no guarantees about API stability -- but I also said it was
a top-priority for us to keep the API compatible. I think that is the best you
can get from &lt;i&gt;any&lt;/i&gt; project of the Free Software community. If there is
something in an API that we later learn is irrecoverably broken or stupid by design, then
we take the freedom to replace that or remove it entirely. Oh, and even Sun
does things like that in Java, Just think of the Java 1.x
&lt;tt&gt;java.lang.Thread.stop()&lt;/tt&gt; API.&lt;/li&gt;

&lt;li&gt;&lt;tt&gt;nss-mdns&lt;/tt&gt; does not make any use of D-Bus. It never did, it never will.&lt;/li&gt;

&lt;li&gt;GNOME never formally made the decision &lt;i&gt;to go Avahi&lt;/i&gt; AFAIK. It's just what
everyone uses because it is available on all distributions. Also, a lot of GNOME software
can also be compiled against HOWL/Bonjour.&lt;/li&gt;

&lt;li&gt;Implementing the Avahi API on top of the Bonjour API is just crack. For a
crude comparison: this is like implementing a POSIX compatiblity layer on top
of the DOS API. Crack. Just crack. There is lot of functionality you can
*never* emulate in any reasonable way on top of the current Bonjour API:
properly integrated IPv4+IPv6 support, &lt;tt&gt;AVAHI_BROWSER_ALL_FOR_NOW&lt;/tt&gt;, the fact that the Avahi API is
transaction-based, all the different flag definitions, and a lot more. From a
technical persepective emulating Avahi on top of Bonjour is not feasible, while
the other way round perfectly is.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Let's also not forget that Avahi comes with a Bonjour compatibility layer,
which gets almost any Bonjour app working on top of Avahi. And in contrast your
Avahi-on-top-of-Bonjour stuff it is not inherently borked. Yes, our Bonjour compatibility layer is
not perfect, but should be very easy to fix if there should still be an
incompatibility left. And the API of that layer is of course as much set in
stone as the upstream Bonjour API. Oh, and you wouldn't have to run two daemons instead of
just one. And you would only need to ship and maintain a single mDNS package.
Oh, and the compatibility layer would only be needed for the few remaing
applications that still use Bonjour exclusively, and not by the majority of
applications.&lt;/p&gt;

&lt;p&gt;So, in effect you chose Bonjour because of its API and added some Avahi'sh
API on top and this all is totally crackish. If you'd have done it the other way round
you would have gotten both APIs as well, but the overall solution would not
have been totally crackish. And let's not forget that Avahi is much more
complete than Bonjour. (Maybe except wide-area support, Federico!).&lt;/p&gt;

&lt;p&gt;Anyway, my original rant was not about the way Sun makes its decision but
just about the fact that your Avahi-to-Bonjour-bridge is ... crack! And that
it remains.&lt;/p&gt;

&lt;p&gt;Wow, six times &lt;i&gt;crack&lt;/i&gt; in a single article.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Footnotes:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] For a Free Software API at least.&lt;/small&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 13 Jun 2007 21:14:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-06-13:/blog/projects/project-indiana-part2.html</guid><category>projects</category></item><item><title>Project Indiana</title><link>https://0pointer.net/blog/projects/project-indiana.html</link><description>
                
&lt;p&gt;Dear Sun Microsystems,&lt;/p&gt;

&lt;p&gt;I wonder if the mythical "Project Indiana" consists of &lt;a href="http://src.opensolaris.org/source/xref/jds/spec-files/trunk/patches/"&gt;patches
like these&lt;/a&gt; which among other strange things make the &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; daemon just a frontend to the &lt;a href="http://www.apple.com/macosx/features/bonjour/"&gt;Apple
Bonjour&lt;/a&gt; daemon. Given that Avahi is a superset of
Bonjour in both functionality and API this is just so ridiculuous --
I haven't seen such a monstrous crack in quite a while.&lt;/p&gt;

&lt;p&gt;Sun, you don't get it, do you? That way you will only reach the
crappiness, bugginess and brokeness of Windows, not the power and
usability of Linux.&lt;/p&gt;

&lt;p&gt;Oh, and please rename that "fork" of Avahi to something completely
different -- because it actually is exactly that: something completely
different than Avahi.&lt;/p&gt;

&lt;p&gt;Love,&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Lennart&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 13 Jun 2007 14:07:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-06-13:/blog/projects/project-indiana.html</guid><category>projects</category></item><item><title>Freikarten!</title><link>https://0pointer.net/blog/projects/linuxtag-freikarten.html</link><description>
                
&lt;p&gt;Anyone looking for free tickets for &lt;a href="http://linuxtag.org/"&gt;LinuxTag 2007 (Berlin)&lt;/a&gt;? Just ping me, and I'll send you one. (Be quick, they are limited!)&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 29 May 2007 15:05:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-05-29:/blog/projects/linuxtag-freikarten.html</guid><category>projects</category></item><item><title>Conferences</title><link>https://0pointer.net/blog/projects/conferences-2007.html</link><description>
                
&lt;p&gt;I will be speaking at following conferences in the next three months:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.linuxtag.org/2007/en/conf/events/vp-freitag/vortragsdetails.html?talkid=88"&gt;LinuxTag, Berlin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.linuxsymposium.org/2007/view_abstract.php?content_key=158"&gt;Ottawa Linux Symposium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.lugradio.org/live/2007/schedule.html"&gt;LugRadio Live, Wolverhampton&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://guadec.org/node/565"&gt;GUADEC, Birmingham&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="http://farm1.static.flickr.com/230/480023477_8a690b9c72_m.jpg" width="240" height="100" alt="LugRadio Live Speaker" /&gt;&lt;/p&gt;



        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 28 May 2007 16:51:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-05-28:/blog/projects/conferences-2007.html</guid><category>projects</category></item><item><title>Cuddle opening function braces, anyone?</title><link>https://0pointer.net/blog/projects/cuddle-function.html</link><description>
                
&lt;p&gt;Dear Lazyweb!&lt;/p&gt;

&lt;p&gt;Does anyone know how I can teach GNU indent to cuddle opening function braces and the closing ')' of the argument list ? i.e.&lt;/p&gt;

&lt;pre&gt;
int main(int argc, char* argv[]) {
}
&lt;/pre&gt;

&lt;p&gt;instead of:&lt;/p&gt;

&lt;pre&gt;
int main(int argc, char* argv[])
{
}
&lt;/pre&gt;

&lt;p&gt;Any help appreciated!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 10 May 2007 16:22:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-05-10:/blog/projects/cuddle-function.html</guid><category>projects</category></item><item><title>DMI-based Autoloading of Linux Kernel Modules</title><link>https://0pointer.net/blog/projects/dmi-based-module-autoloading.html</link><description>
                
&lt;p&gt;So, you've always been annoyed by the fact that you have to load all those
laptop, i2c, hwmon, hdaps Linux kernel modules manually without having spiffy
udev doing that work for you automagically? No more! I just sent &lt;a href="http://0pointer.de/public/dmi-id.patch"&gt;a patch&lt;/a&gt; &lt;a href="http://lkml.org/lkml/2007/5/8/428"&gt;to LKML&lt;/a&gt; which adds &lt;a href="http://en.wikipedia.org/wiki/Desktop_Management_Interface"&gt;DMI/SMBIOS&lt;/a&gt;-based
module autoloading to the Linux kernel.&lt;/p&gt;

&lt;p&gt;Hopefully this patch will be integrated into Linus' kernel shortly. As
soon as that happens udev will automatically recognize your laptop/mainboard
model and load the relevant modules.&lt;/p&gt;

&lt;p&gt;Module maintainers, please add &lt;tt&gt;MODULE_ALIAS&lt;/tt&gt; lines to your kernel
modules to make sure that they are autoloaded using this new mechanism, as soon
as it gets commited in Linus' kernel.&lt;/p&gt;

&lt;p&gt;For a fully automatically configured system only ACPI-DSDT-based module
autoloading is missing. I.e. load the "battery" module only when an ACPI
battery is actually around.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 08 May 2007 22:16:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-05-08:/blog/projects/dmi-based-module-autoloading.html</guid><category>projects</category></item><item><title>Suomenlinna</title><link>https://0pointer.net/blog/photos/suomenlinna.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/static/suomenlinna.html"&gt;&lt;img src="http://0pointer.de/static/suomenlinna-small.jpeg" width="1024" height="181" alt="Suomenlinna" /&gt;&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 02 May 2007 01:48:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-05-02:/blog/photos/suomenlinna.html</guid><category>photos</category></item><item><title>On Using Hugin</title><link>https://0pointer.net/blog/photos/hugin.html</link><description>
                
&lt;p&gt;On popular request, here are a few suggestions how to make best use of Hugin for stitching your panoramas. You probably should have read some of the tutorials at &lt;a href="http://hugin.sourceforge.net/tutorials/index.shtml"&gt;Hugin's web site&lt;/a&gt; before reading these suggestions.&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Use manual exposure settings in your camera. On Canon cameras this means
you should be using the "M" mode. Make sure choose good exposure times and
aperture so that the entire range you plan to take photos of is well exposed.
If you don't know how to use the "M" mode of your camera you probably should
be reading an introduction into photography now. The reason for setting
exposure values manually is that you want the same exposing on all photos from
your settings.&lt;/li&gt;

&lt;li&gt;Disable automatic white balance mode. You probably should have done that
anyway. "Semi-automatic" white balance mode is probably OK (i.e. selecting
the white balance from one of the pre-defined profiles, such as "Daylight",
"Cloudy", ...)&lt;/li&gt;

&lt;li&gt;Also manually set the ISO level. You probably should be doing that anyway.&lt;/li&gt;

&lt;li&gt;Using autofocus is probably OK.&lt;/li&gt;

&lt;li&gt;Try not not move around too much while taking the photo series. Hugin doesn't like that too much. It's OK to move a little, but you should do all the shots for your panorama from a single point, and not while moving on a circle, line, or even Bezier-line.&lt;/li&gt;

&lt;li&gt;When doing 360&amp;deg; panoramas it is almost guaranteed (at least in northern
countries) that you have the sun as back light. That will overexpose the
panorama in that direction and lower the contrast in the area. To work against
this, you might want to choose to do your panorama shots at noon in summer when
sun is in zenith. Gray-scaling the shot and doing some other kind of
post-processing might be a way to ease this problem.&lt;/li&gt;

&lt;li&gt;To work against &lt;a href="http://en.wikipedia.org/wiki/Chromatic_aberration"&gt;chromatic aberration&lt;/a&gt; it is a good idea to use large overlap areas, and doing your shots in "landscape" rather then "portrait" (so that only the center of each image is used in the final image)&lt;/li&gt;

&lt;li&gt;Running hugin/enblend on an encrypted &lt;tt&gt;$HOME&lt;/tt&gt; (like I do) won't make you particularly happy.&lt;/li&gt;

&lt;li&gt;Pass &lt;tt&gt;-m 256&lt;/tt&gt; to enblend. At least on my machine (with limited RAM and dm-crypt) things are a lot faster that way.&lt;/li&gt;

&lt;li&gt;Sometimes moving things (e.g. people) show up twice (or even more times) in the resulting panorama. Sometimes that is funny, sometimes it is not. To remove them, open the seperate &lt;tt&gt;tif&lt;/tt&gt; files before feeding them into enblend into Gimp and cut away the things you want to remove from all but one of these images. Then pass that on to enblend.&lt;/li&gt;

&lt;li&gt;If regardless how many control points you set in Hugin the images just don't fit together, you should probably run "Optimize Everything" instead of just "Optimize Positions".&lt;/li&gt;

&lt;li&gt;When doing your shots, make sure to hold the camera all the time at the same height, to avoid having to cut too much of the image away in the final post-processing. This is sometimes quite difficult, especially if you have images with no clear horizon.&lt;/li&gt;

&lt;li&gt;Remember that you can set horizontal and vertical lines as control points in Hugin!
Good for straitening things out and making sure that vertical things are
actually vertical in the resulting panorama.&lt;/li&gt;

&lt;/ul&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 02 May 2007 00:45:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-05-02:/blog/photos/hugin.html</guid><category>photos</category></item><item><title>Helsingin Tuomiokirkko</title><link>https://0pointer.net/blog/photos/helsingin-tuomiokirkko.html</link><description>
                
&lt;p&gt;Following an invitation of the Nokia 770/N800 multimedia team I've been
visiting the Nokia research center in Helsinki last week. A good opportunity to get some more material for &lt;a href="http://hugin.sourceforge.net/"&gt;Hugin&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/helsingin-tuomiokirkko.html"&gt;&lt;img src="http://0pointer.de/static/helsingin-tuomiokirkko-small.jpeg" width="1024" height="291" alt="Helsingin Tuomiokirkko" /&gt;&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 02 May 2007 00:42:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-05-02:/blog/photos/helsingin-tuomiokirkko.html</guid><category>photos</category></item><item><title>Tag me!</title><link>https://0pointer.net/blog/projects/tag.html</link><description>
                
&lt;p&gt;Jeff now started to use &lt;tt&gt;lennartpoettering&lt;/tt&gt; for &lt;a href="http://perkypants.org/blog/2007/05/02/links-for-2007-05-01/"&gt;tagging his blog stories&lt;/a&gt;... &lt;b&gt;AWESOME&lt;/b&gt;!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 01 May 2007 20:41:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-05-01:/blog/projects/tag.html</guid><category>projects</category></item><item><title>My thoughts on the future of Gnome-VFS</title><link>https://0pointer.net/blog/projects/gnomevfs-future.html</link><description>
                
&lt;p&gt;One of the major construction sites in GNOME and all the other free
desktop environments is the VFS abstraction. Recently, there has been
some discussion about developing a &lt;a href="http://freedesktop.org/wiki/Software/dvfs"&gt;replacement DVFS&lt;/a&gt;
as replacement for the venerable Gnome-VFS system. Here are my 5 euro
cent on this issue (Yepp, I am not fully up-to-date on the whole DVFS
discussion, but during my flight from HEL to HAM I wrote this up,
without being necesarily too well informed, lacking an Internet
connection. Hence, if you find that I am an uniformed idiot, you're of
course welcome to flame me!):&lt;/p&gt;

&lt;p&gt;First of all, we have to acknowledge that Gnome-VFS never achieved any major
adoption besides some core (not even all) GNOME applications. The reasons are
many, among them: the API wasn't all fun, using Gnome-VFS added another
dependency to applications, KDE uses a different abstraction (KIO), and many
others. Adoption was suboptimal, and due to that user experience was
suboptimal, too (to say the least). &lt;/p&gt;

&lt;p&gt;One of the basic problems of Gnome-VFS is that it is a (somewhat) redundant
abstraction layer over yet another abstraction layer. Gnome-VFS makes available
an API that offers more or less the same functionality as the (most of the
time) underlying POSIX API. The POSIX API is well accepted, relatively
easy-to-use, portable and very well accepted. The same is not true for
Gnome-VFS. Semantics of the translation between Gnome-VFS and POSIX are not
always that clear. Paths understood  by Gnome-VFS (URLs) follow a different
model than those of the Linux kernel. Applications which understand Gnome-VFS
can deal with FTP and HTTP resources, while the majority of the applications
which do not link against Gnome-VFS does not understand it. Integration of
Gnome-VFS-speaking and POSIX-speaking applications is difficult and most of the
time only partially implementable.&lt;/p&gt;

&lt;p&gt;So, in short: One one side we have that POSIX API which is a file system
abstraction API.  And a (kernel-based) virtual file system behind it. And on the other
side we have the Gnome-VFS API which is also a file system abstraction API and
a virtual file system behind it. Hence, why did we decide to standardize on
Gnome-VFS, and not just on POSIX?&lt;/p&gt;

&lt;p&gt;The major reason of course is that until recently accessing FTP,
HTTP and other protocol shares through the POSIX API was not doable
without special kernel patches.  However, a while ago the FUSE system
has been merged into the Linux kernel and has been made available for
other operating systems as well, among them FreeBSD and MacOS X. This
allows implementing file system drivers in userspace.  Currently there
are all kinds of these FUSE based file systems around, FTP and SSHFS
are only two of them. My very own &lt;a href="http://0pointer.de/lennart/projects/fusedav/"&gt;fusedav&lt;/a&gt; tool
implements WebDAV for FUSE.&lt;/p&gt;

&lt;p&gt;Another (*the* other?) major problem of the POSIX file system API is
its synchronous design.  While that is usually not a problem for local
file systems and for high-speed network file systems such as NFS it
becomes a problem for slow network FSs such as HTTP or FTP. Having the
GUI block for various seconds while an application saves its documents
is certainly not user friendly. But, can this be fixed? Yes, definitely, it can!
Firstly, there already is the POSIX AIO interface -- which however is
quite unfriendly to use (one reason is its use of Unix signals for
notification of completed IO operations). Secondly, the (Linux) kernel
people are working on a better asynchronous IO API (see the
syslets/fibrils discussion).  Unfortunately it will take a while
before that new API will finally be available in upstream
kernels. However, there's always the third solution: add an
asynchronous API entirely in userspace. This is doable in a clean (and
glib-ified) fashion: have a couple of worker threads which
(synchronously) execute the various POSIX file system functions and
add a nice, asynchronous API that can start and stop these threads,
feed them operations to execute, and so on.&lt;/p&gt;

&lt;p&gt;So, what's the grand solution I propose for the desktop VFS mess? First, kick
Gnome-VFS entirely and don't replace it. Instead write a small D-Bus-accessible
daemon that organizes a special directory &lt;tt&gt;~/net/&lt;/tt&gt;. Populate that
directory with subdirectories for all WebDAV, FTP, NFS and SMB shares that can
be found on the local network using both Avahi-based browsing and native SMB
browsing. Now use the Linux automounting interface on top of that directory and
automount the respective share every time someone wants to access it. For
shares that are not announced via Avahi/Samba, add some D-Bus API (and a nice
UI) for adding arbitrary shares. NFS and CIFS/SMB shares are mounted with the
fast, optimized kernel filesystem implementation; WebDAV and FTP on the other
hand are accessed via userspace FUSE-based file systems. The latter should also
integrate with D-BUS in some way, to query the user nicely for access
credentials and suchlike, with gnome-keyring support and everything.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;~/net/&lt;/tt&gt; itself can -- but probably doesn't need to -- be a FUSE
filesystem itself.&lt;/p&gt;

&lt;p&gt;A shared library should be made available that will implement a few
remaining things, that are not available in the POSIX file
system API directly:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;As mentioned, some nice Glib-ish asynchronous POSIX file system
API wrapper&lt;/li&gt;

&lt;li&gt;High-level file system operations such as copying, moving,
deleting (trash!) which show a nice GUI when they are long-running
operations.&lt;/li&gt;

&lt;li&gt;An API to translate and setup URL &lt;tt&gt;&amp;lt;-&amp;gt;&lt;/tt&gt; filesystem
mappings, i.e. something that translates
&lt;tt&gt;ftp://test.local/a/certain/path/&lt;/tt&gt; to
&lt;tt&gt;~/net/ftp:test.local/a/certain/path&lt;/tt&gt; and vice versa. (and
probably also to a more user-friendly notation, maybe like "&lt;tt&gt;FTP Share
on test.local&lt;/tt&gt;" or similar). (Needs to communicate with the &lt;tt&gt;~/net/&lt;/tt&gt;
handling daemon to setup mappings if required)&lt;/li&gt;

&lt;li&gt;Meta data extraction. It makes sense to integrate that with
extended attribute support (EA) in the kernel file system layer, which should be used more often anyway.&lt;/li&gt;

&lt;li&gt;Explicit mount operations (in contrast to implicit mounts, that
are done through automounting) (this also needs to communicate with
the &lt;tt&gt;~/net/&lt;/tt&gt; daemon in some way) &lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Et voil&amp;#225;! Without a lot of new code you get a nice, asynchronous,
modern, well integrated file system, that doesn't suck. (or at least,
it doesn't suck as much as other solutions).&lt;/p&gt;

&lt;p&gt;Also, this way we can escape the "abstraction trap". Let's KDE play
the abstraction game, maybe they'll grow up eventually and learn that
abstracting abstracted abstraction layers is child's play.&lt;/p&gt;

&lt;p&gt;Yeah, sure, this proposed solution also has a few drawbacks, but be it that way. Here's a short incomprehensive list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The POSIX file system API sucks for file systems that don't have "inodes" or that are attached to a specific user sessions. -- Yes, sure, but both problems have been overcome by the FUSE project, at least partially.&lt;/li&gt;
&lt;li&gt;Not that portable -- Yes, but FUSE is now available for many systems besides Linux. The automount project is the bigger problem. But all you loose if you would run this proposed system on these (let's say "legacy") systems that don't have FUSE or automounting is access to FTP and WebDAV shares. So what? Local files can still be accessed.&lt;/li&gt;
&lt;li&gt;Translating between URLs and &lt;tt&gt;$HOME/net/&lt;/tt&gt; based paths sucks -- yepp, it does. But much less than not being able to access FTP/WebDAV shares from some apps but not from others, as we have it right now.&lt;/li&gt;
&lt;li&gt;Bah, you suck -- Yes, I do. On a straw, taking a nip from my caipirinha, right at the moment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I guess I don't have to list all the advantages of this solution, do I?&lt;/p&gt;

&lt;p&gt;BTW, pumping massive amounts of data through D-Bus sucks anyway.&lt;/p&gt;

&lt;p&gt;And no, I am not going to hack on this. Too busy with other stuff.&lt;/p&gt;

&lt;p&gt;The plane is now landing in HAM, that shall conclude our small rant.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; No, I didn't get a Caipirinha during my flight. That line I
added in before publishing the blog story, which was when I was drinking my
Caipirinha. In contrast to other people from the Free Software community I don't
own my own private jet yet, with two stewardesses that might fix me a
Caipirinha.&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 01 May 2007 19:30:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-05-01:/blog/projects/gnomevfs-future.html</guid><category>projects</category></item><item><title>To whom it may concern</title><link>https://0pointer.net/blog/redhat.html</link><description>
                
&lt;p&gt;In case anyone wants to know: starting today I am a Red Hat employee.&lt;/p&gt;

&lt;p&gt;It's nice if the first day on the new job is a public holiday.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 01 May 2007 14:40:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-05-01:/blog/redhat.html</guid><category>misc</category></item><item><title>Panoramic Hamburg</title><link>https://0pointer.net/blog/photos/hamburg-panoramas.html</link><description>
                
&lt;p&gt;Did I mention I love &lt;a href="http://hugin.sourceforge.net/"&gt;Hugin&lt;/a&gt;? I do, I really do:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/rathausmarkt.html"&gt;&lt;img src="http://0pointer.de/static/rathausmarkt-small.jpg" width="1024" height="165" alt="Hamburg Rathausmarkt" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/hbf.html"&gt;&lt;img src="http://0pointer.de/static/hbf-gimped-small.jpg" width="1024" height="260" alt="Hamburg Central Station" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/alsterarkaden.html"&gt;&lt;img src="http://0pointer.de/static/alsterarkaden-gimped-small.jpeg" width="1024" height="189" alt="Hamburg Alsterarkaden" /&gt;&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 24 Apr 2007 23:56:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-04-24:/blog/photos/hamburg-panoramas.html</guid><category>photos</category></item><item><title>Three Sisters</title><link>https://0pointer.net/blog/photos/three-sisters.html</link><description>
                
&lt;p&gt;Finally I found the time to sort &lt;a href="http://0pointer.de/photos/?gallery=Australia"&gt;my photos from Australia&lt;/a&gt;, when I vistited the country after linux.conf.au, in January this year. Some photos are quite good, many are not. However one panoramic view of the Three Sisters in the Blue Mountains NP is particularly beautiful:&lt;/p&gt;

&lt;a href="http://0pointer.de/static/three-sisters.html"&gt;&lt;img src="http://0pointer.de/static/three-sisters-small.jpeg" width="1024" height="124" alt="Three Sisters" /&gt;&lt;/a&gt;

&lt;p&gt;Just perfect as a desktop background on your Xinerama setup!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 21 Apr 2007 14:03:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-04-21:/blog/photos/three-sisters.html</guid><category>photos</category></item><item><title>What I miss in GNOME</title><link>https://0pointer.net/blog/projects/what-i-miss-in-gnome.html</link><description>
                
&lt;p&gt;A while back there has been a lot of noise about the GNOME
"platform" and what GNOME 3.0 should be. Personally -- while I
certainly like the progress GNOME makes as a "platform" -- I must say
that the platform is already quite good. In my opinion, what is
lacking right now are more the tools and utilities that are shipped
*with* the GNOME platform than the platform itself. More specifically
there are a set of (rather small) tools I am really missing in the standard set of
GNOME tools. So, here's my wishlist, in case anybody is interested to
know:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;&amp;lt;wishlist&amp;gt;&lt;/tt&gt;&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;A simple, usable VNC/RFB client as counterpart to the VNC server
&lt;tt&gt;vino&lt;/tt&gt; that has been shipped since early GNOME 2.0 times. Isn't
it kind of awkward that we have been shipping a VNC server since ages,
but no VNC client? What I want is a client (maybe called
&lt;tt&gt;vinagre&lt;/tt&gt; as a pun on &lt;tt&gt;vino&lt;/tt&gt;) that is more than just a simple frontend to
&lt;tt&gt;xvncviewer&lt;/tt&gt;, but not necessarily too fancy. Something that
integrates well into GNOME, i.e. uses D-Bus, gnome-keyring,
&lt;a href="http://0pointer.de/blog/projects/avahify-your-app.html"&gt;avahi-ui&lt;/a&gt;. &lt;a href="http://libvncserver.sourceforge.net/"&gt;There seems
to be a libvncclient library&lt;/a&gt; that might make the implementation of
this tool easy.  &lt;/li&gt;

&lt;li&gt;I am one of the (apparently not so few) people who run their GNOME
session with &lt;tt&gt;LANG=de_DE&lt;/tt&gt; and &lt;tt&gt;LC_MESSAGES=C&lt;/tt&gt;, which
enables german dates and everything else, but uses english
messages. Right now it's a PITA to configure GNOME that way. It's not
really documented how to do that, AFAIK. The best way to do this I
found is to edit &lt;tt&gt;~/.gnomerc&lt;/tt&gt; and set the variables in there. A
simple capplet which allows setting these environment variables from
&lt;tt&gt;gnome-session&lt;/tt&gt; would be a much better way to configure
this. Nothing to fancy again. Just two drop down lists, to choose
&lt;tt&gt;LANG&lt;/tt&gt; and &lt;tt&gt;LC_MESSAGES&lt;/tt&gt; and maybe a subset of the other
i18n variables, and possibly &lt;tt&gt;G_FILENAME_ENCODING&lt;/tt&gt; (although I
might be the only one who still hasn't switched his &lt;tt&gt;$HOME&lt;/tt&gt; to
UTF-8)&lt;/li&gt;

&lt;li&gt;There's no world clock in GNOME. Sure, there are &lt;a href="http://www.timeanddate.com/worldclock/"&gt;online tools&lt;/a&gt; for
this, but I am not always online with my laptop.&lt;/li&gt;

&lt;li&gt;There is no simple tool to take photo snapshots or record short videos
from webcams. I want to see something like &lt;a href="http://camorama.fixedgear.org/"&gt;camorama&lt;/a&gt; in
&lt;tt&gt;gnome-media&lt;/tt&gt;. Nothing too fancy again. No filters, no TV
functionality.  Just a small but useful GStreamer frontend.&lt;/li&gt;

&lt;li&gt;I'd like to see a simple BitTorrent client shipped with GNOME, which is
integrated well into the rest of GNOME/Epiphany, so that downloading files from
FTP or HTTP looks exactly like downloading them from Bittorrent.&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;&lt;tt&gt;&amp;lt;/wishlist&amp;gt;&lt;/tt&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 20 Apr 2007 19:06:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-04-20:/blog/projects/what-i-miss-in-gnome.html</guid><category>projects</category></item><item><title>Avahi on your N800</title><link>https://0pointer.net/blog/projects/avahi-n800.html</link><description>
                
&lt;p&gt;I'd love to see proper Avahi support in the Nokia N800 (just think of proper
file manager integration of announced WebDAV shares!), but until now Nokia
doesn't ship Avahi in Maemo. However, there's now a simple way to install at
least basic Avahi support on the N800. The INdT includes Avahi in their &lt;a href="http://openbossa.indt.org.br/canola/"&gt;Canola&lt;/a&gt; builds. Hence: just install
Canola and your N800 will register itself via mDNS on your network.&lt;/p&gt;

&lt;p&gt;In related news: I am happy to see that Avahi has apparently been included in the just announced &lt;a href="http://www.gnome.org/mobile/"&gt;GNOME Embedded Platform&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 19 Apr 2007 19:29:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-04-19:/blog/projects/avahi-n800.html</guid><category>projects</category></item><item><title>Releases, Releases, Releases ...</title><link>https://0pointer.net/blog/projects/releases-releases-releases.html</link><description>
                
&lt;p&gt;I have just released new versions of a few of my packages:&lt;/p&gt;

&lt;div&gt;&lt;img src="http://avahi.org/chrome/site/avahi-trac.png" width="200" height="96" style="float:right; border: 0px; margin: 10px" alt="Avahi Logo" /&gt;&lt;/div&gt;

&lt;ol&gt;

&lt;li&gt;&lt;a href="http://avahi.org/"&gt;Avahi 0.6.18&lt;/a&gt;: The most interesting change is probably
the addition of &lt;tt&gt;avahi-ui&lt;/tt&gt;, our new GTK library which implements a
standard dialog for browsing for Avahi services. A quick (albeit slightly out-of-date)
introduction into &lt;tt&gt;avahi-ui&lt;/tt&gt; (including screenshots) may be found in &lt;a href="http://0pointer.de/blog/projects/avahify-your-app.html"&gt;this old blog
story&lt;/a&gt; of mine. If you are a developer of a GNOME application that acts as network
client in some way, please consider adding support for &lt;tt&gt;avahi-ui&lt;/tt&gt; to your project. Examples where adding support for &lt;tt&gt;avahi-ui&lt;/tt&gt; makes sense are:
&lt;ul&gt;
&lt;li&gt;Mail applications such as Evolution may use it to browse for POP3, POP3S, IMAP, IMAPS and SMTP servers.&lt;/li&gt;
&lt;li&gt;VNC applications may use it to browse for VNC/RFB servers&lt;/li&gt;
&lt;li&gt;Database clients such as Glom may use it to browse for PostrgreSQL servers&lt;/li&gt;
&lt;li&gt;FTP clients may use it to browse for FTP servers&lt;/li&gt;
&lt;li&gt;RSS readers may use it to browse for local RSS feeds&lt;/li&gt;
&lt;li&gt;And lots of others&lt;/li&gt;
&lt;/ul&gt;
There are lots of other small and not so small changes in Avahi 0.6.18.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/lennart/projects/mod_dnssd/"&gt;mod_dnssd 0.5&lt;/a&gt;: Mostly an update for Apache 2.2&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/lennart/projects/mod_mime_xattr/"&gt;mod_mime_xattr 0.4&lt;/a&gt;: dito&lt;/li&gt;
&lt;/ol&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 18 Apr 2007 23:23:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-04-18:/blog/projects/releases-releases-releases.html</guid><category>projects</category></item><item><title>I Am Free Again!</title><link>https://0pointer.net/blog/thesis.html</link><description>
                
&lt;p&gt;&lt;i&gt;Es ist vollbracht!&lt;/i&gt; Today, at 10:54 am -- 66 min before deadline -- I
handed in my diploma thesis &lt;sup&gt;[1]&lt;/sup&gt;. In a few weeks time you may call me
&lt;i&gt;Diplom-Informatiker&lt;/i&gt;... &lt;i&gt;Herr Diplom-Informatiker.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;That's all.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Footnotes:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] Thesis title is &lt;i&gt;Diensteverwaltung in Ad-Hoc-Netzwerken&lt;/i&gt;
(which roughly translates to &lt;i&gt;Service Discovery in Ad-Hoc Networks&lt;/i&gt;).
Basically, the thesis is about "Mesh-DNS", a protocol akin to &lt;a href="http://www.multicastdns.org/"&gt;Multicast DNS&lt;/a&gt; (mDNS), which scales
better, fixes a few things and takes Mesh network architectures into account.
It is intended to be integrated into &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; and
to be used as service discovery protocol in OLPC. It is compatible with &lt;a href="http://www.dns-sd.org/"&gt;DNS-SD&lt;/a&gt;, but replaces mDNS. Due to that all
existing software linking against Avahi can make use of it without any major
changes. It adds a zone &lt;tt&gt;.mesh&lt;/tt&gt; which is organized by Mesh-DNS side-by-side to the mDNS-maintained zone &lt;tt&gt;.local&lt;/tt&gt;. You will be able to enable support for Mesh-DNS at Avahi
compile time. Most likely most distros won't enable it in their default builds,
although it offers quite a few features even outside OLPC, such as
automatic, idiot-proof router transparency.&lt;/small&gt;&lt;/p&gt;



        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 11 Apr 2007 23:28:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-04-11:/blog/thesis.html</guid><category>misc</category></item><item><title>What's going on with LinuxTag?</title><link>https://0pointer.net/blog/projects/linuxtag.html</link><description>
                
&lt;p&gt;Does anybody know what's going on with &lt;a href="https://www.linuxtag.org/2007/"&gt;LinuxTag&lt;/a&gt;? I submitted a presentation
proposal a few months ago. I haven't yet received an email whether my talk has been
accepted or not. According to &lt;a href="http://www.linuxtag.org/2007/de/conf/cfp/vp-deadlines.html"&gt;their
website&lt;/a&gt; notification emails should have been sent out on march 13th. Which
is nearly a month ago now. When I login to the "virtual conference
center" I see that my paper is still "In Review". They didn't respond to my emails (twice).&lt;/p&gt;

&lt;p&gt;Does anyone have an idea what is going on?&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 10 Apr 2007 20:34:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-04-10:/blog/projects/linuxtag.html</guid><category>projects</category></item><item><title>Dear Lazyweb!</title><link>https://0pointer.net/blog/projects/gnumeric-psfrag.html</link><description>
                
&lt;p&gt;Does anyone know what I can do to get &lt;a href="http://www.ctan.org/tex-archive/help/Catalogue/entries/psfrag.html"&gt;psfrag&lt;/a&gt;
work with PostScript files generated from &lt;a href="http://www.gnome.org/projects/gnumeric/"&gt;Gnumeric&lt;/a&gt; (i.e. Cairo) charts?&lt;/p&gt;

&lt;p&gt;Oh, and why does Gnumeric insist on using &lt;tt&gt;.ps&lt;/tt&gt; as suffix for
exported charts, although the files written are perfectly valid &lt;tt&gt;.eps&lt;/tt&gt;
files and presumably everyone uses them as such?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 09 Apr 2007 13:22:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-04-09:/blog/projects/gnumeric-psfrag.html</guid><category>projects</category></item><item><title>Piles of Paper</title><link>https://0pointer.net/blog/pile-of-paper.html</link><description>
                
&lt;p&gt;As an experiment to test how much people are willing to pay for big big pile
of old paper, I am selling &lt;a href="http://cgi.ebay.de/ws/eBayISAPI.dll?ViewItem&amp;amp;item=250097060215"&gt;my
collection of old editions of the german computer magazine c't&lt;/a&gt; on ebay.de.
Do yourself something good and buy yourself a piece of (german) computer
history. It's a unique chance because if noone wants it I am going to give it
into recycling, or maybe make a big, big bonfire.&lt;/p&gt;

&lt;p&gt;I heard that you can attract girls by reading old german computer magazines
from the late nineties. Not that this would have worked for me, but maybe it
works for you? There is nothing more attractive to a girl than old computer
magazines, especially if they are in a foreign language you don't understand.&lt;/p&gt;

&lt;p&gt;No, I am not kidding!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://cgi.ebay.de/ws/eBayISAPI.dll?ViewItem&amp;amp;item=250097060215"&gt;&lt;img src="http://0pointer.de/public/ctcatchy.jpeg" width="600" height="374" alt="Big Pile of Paper" /&gt;&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 27 Mar 2007 17:33:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-03-27:/blog/pile-of-paper.html</guid><category>misc</category></item><item><title>No GSoC for Avahi</title><link>https://0pointer.net/blog/projects/gsoc-avahi.html</link><description>
                
&lt;p&gt;As it seems, the &lt;a href="http://avahi.org/"&gt;Avahi project&lt;/a&gt; has not been
accepted as &lt;a href="http://code.google.com/soc/"&gt;Google Summer of Code&lt;/a&gt;
organization, &lt;a href="http://blogs.gnome.org/view/uraeus/2007/03/15/0"&gt;much like the GStreamer project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Grr, I cannot say I really understand why three wiki engines &lt;sup&gt;[1]&lt;/sup&gt; got accepted,
or a UI frontend for &lt;tt&gt;nmap&lt;/tt&gt; - but not important infrastructure projects like
GStreamer or Avahi. Mhmm, maybe I am just envious, and considering these two projects &lt;i&gt;important&lt;/i&gt; is just hybris...&lt;/p&gt;

&lt;p&gt;Anyway, we had already prepared &lt;a href="http://avahi.org/wiki/GoogleSummerOfCode"&gt;a list of exciting&lt;/a&gt; &lt;sup&gt;[2]&lt;/sup&gt; GSoC project
ideas for Avahi. If anyone is interested to work on one of these there might be a small chance to get this done under &lt;a href="http://live.gnome.org/SummerOfCode2007/Ideas"&gt;the GNOME umbrella&lt;/a&gt;. Feel free to contact either me or Trent if you are interested!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Footnotes:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[1] If there is something we already have enough of in Free Software - then it is Wiki engines. just check the output of &lt;tt&gt;apt-cache search wiki | wc -l&lt;/tt&gt; on a recent Debian system.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[2] In our definition of &lt;i&gt;exciting&lt;/i&gt;, of course - which doesn't seem to be the same as Google's. Grrrh!&lt;/small&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 15 Mar 2007 16:52:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-03-15:/blog/projects/gsoc-avahi.html</guid><category>projects</category></item><item><title>Selling my Nokia 770</title><link>https://0pointer.net/blog/ebay-770.html</link><description>
                
&lt;p&gt;I was one of the lucky ones to get a Nokia N800 developer discount code, and
am now a proud owner of one of these toys. Thus I decided &lt;a href="http://cgi.ebay.de/ws/eBayISAPI.dll?ViewItem&amp;amp;item=250087003779"&gt;to sell
off my old Nokia 770 at Ebay.de&lt;/a&gt;. This is your one-time chance to buy a 770
previously owned by one of the Avahi and PulseAudio developers! Wooow! Don't
miss this chance to add this exclusive device to your memorabilia collection!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 22 Feb 2007 19:32:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-02-22:/blog/ebay-770.html</guid><category>misc</category></item><item><title>FOMS/LCA Recap</title><link>https://0pointer.net/blog/projects/foms-lca-recap.html</link><description>
                
&lt;p&gt;Finally, here's my &lt;a href="http://lca2007.linux.org.au/"&gt;linux.conf.au 2007&lt;/a&gt; and &lt;a href="http://www.annodex.org/events/foms2007/"&gt;FOMS 2007&lt;/a&gt;
recap. Maybe a little bit late, but better late then never.&lt;/p&gt;

&lt;p&gt;FOMS was a very well organized conference with a packed schedule
and a lot of high-profile attendees. To my surprise &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; has been accepted by the
attendees without any opposition (at least none was expressed
aloud). After a few "discussions" on a few mailing lists (including
GNOME MLs) and some personal emails I got, I had thought that more
people were in opposition of the idea of having a userspace sound
daemon for the desktop. Apparently, I was overly pessimistic. Good
news, that!&lt;/p&gt;

&lt;p&gt;During the FOMS conference we discussed the problems audio on Linux
currently has. One of the major issues still is that we're lacking a
cross-platform PCM audio API everyone agrees on. ALSA is Linux-specific
and complicated to use. The only real contender is PortAudio. However,
PortAudio has its share of problems and hasn't reach wide adoption
yet. Right now most larger software projects implement an audio
abstraction layer of some kind, and mostly in a very dirty, simplistic
and limited fasion. MPlayer does, Xine does it, Flash does
it. Everyone does it, and it sucks. (Note: this is only a very short
overview why audio on Linux sucks right now. For a longer one, please
have a look on the first 15mins of my PulseAudio talk at LCA, linked
below.)&lt;/p&gt;

&lt;p&gt;Several people were asking why not to make the PulseAudio API the
new "standard" PCM API for Linux. Due to several reasons that would be a
bad idea. First of all, the PulseAudio API cannot be used on anything
else but PulseAudio. While PulseAudio has been ported to Win32, Vista
already has a userspace desktop sound server, hence running PulseAudio
on top of that doesn't make much sense. Thus the API is not exactly
cross-platform. Secondly, I - as the guy who designed it - am not
happy with the current PulseAudio API. While it is very powerful it is
also very difficult to use and easy to misuse, mostly due to its fully
asynchronous nature. In addition it is also not the exactly smallest
API around.&lt;/p&gt;

&lt;p&gt;So, what could be done about this? We agreed on a - maybe -
controversional solution: defining yet another abstracted PCM audio
API. Yes, fixing the problem that we have too many conflicting,
competing sound systems by defining yet another API sounds like a
paradoxon, but I do believe this is the right path to follow. Why?
Because none of the currently available solutions is suitable for all
application areas we have on Linux. Either the current APIs are not
portable, or they are horribly difficult to use properly, or have a
strange license, or are too simple in their functionality. MacOSX
managed to establish a single audio API (CoreAudio) that makes almost
everyone happy on that system - and we should be able to do same for
Linux. Secondly, none of the current APIs has been designed with
network sound servers in mind. However, proper networking support
reflects back into the API, and in a non-trivial way. An API which
works fine in networked environment needs to eliminate roundtrips
where possible, be open for time interpolation and have a flexible
buffering (besides other minor things). Thirdly none of the current
APIs offers enough functionality to properly support all the needs of
modern desktop sound systems, such as per-stream volumes, stream names
and notifications about external state changes.&lt;/p&gt;

&lt;p&gt;During FOMS and LCA, Mikko Leppanen (from Nokia), Jean-Marc Valin
(from Xiph) and I sat down and designed a draft API for the
functionality we would like to see in this API. For the time being we
dubbed it &lt;tt&gt;libsydney&lt;/tt&gt;, after the city where we started this
project. I plan to make this the only supported audio API for
PulseAudio, eventually. Thus, if you will code against PulseAudio you
will get cross-platform support for free. In addition, because
PulseAudio is now being integrated into the major distributions (at
least Ubuntu and Fedora), this library will be made available on most
systems through the backdoor.&lt;/p&gt;

&lt;p&gt;So, what will this new API offer? Firstly, the buffering model is
much more powerful than of any current sound API. The buffering model
mostly follows PulseAudio's internal buffering model which
(theoretically) can offer zero-latency streaming and has been
pioneered by Jim Gettys' AF sound server. It allows you to seek around
in the playback buffer very flexibly. This is very useful to allow
very fast reaction to the user's playback control commands while still
allowing large buffers, which are good to deal with high network
lag. In addition it is very handy for the programmer, such as when
implementing streaming clients where packets may arrive
out-of-order. The API will emulate this buffering model on top of
traditional audio devices, and when used on top of PulseAudio it will use
its native implementation. The API will also clearly define which
sound formats are guaranteed to be available, thus making it a lot
easier to code without thinking of different hardware supporting
different formats all the time. Of course, the API will be easier to
use than PulseAudio's current API. It will be very portable, scaling
from FPU-less architectures to pro-audio machines with a massive
number of synchronised channels. There are several modes available to
deal with XRUNs semi-automatically, one of them guaranteeing that the
time axis stays linear and monotonical in all events.&lt;/p&gt;

&lt;p&gt;The list of features of this new API is much longer, however,
enough of these grand plans! We didn't write any real code for this
yet. To make sure that this project is not another one of those which
are announced grandiosely without ever producing any code I will stop
listing features here now. We will eventually publish a first draft of
our C API for public discussion. Stay tuned.&lt;/p&gt;

&lt;p&gt;Side-by-side with &lt;tt&gt;libsydney&lt;/tt&gt; I discussed an abstract API
for desktop event sounds with Mikko (i.e. those annoying "bing" sounds
when you click a button and the like). Dubbed &lt;tt&gt;libcanberra&lt;/tt&gt;
(named after the city which one of the developers visited after
Sydney), this will hopefully be for the PulseAudio sample cache API
what &lt;tt&gt;libsydney&lt;/tt&gt; is for the PulseAudio streaming API: a total
replacement.&lt;/p&gt;

&lt;p&gt;As a by-product of the &lt;tt&gt;libsydney&lt;/tt&gt; discussion Jean-Marc
coded &lt;a href="http://svn.xiph.org/trunk/speex/libspeex/resample.h"&gt;a
fast C resampling library&lt;/a&gt; supporting both floating point and fixed
point and being licensed under BSD. (In contrast to
&lt;tt&gt;libsamplerate&lt;/tt&gt; which is GPL and floating-point-only, but which
probably has better quality). PulseAudio will make use of this new
library, as will &lt;tt&gt;libsydney&lt;/tt&gt;. And I sincerly hope that ALSA,
GStreamer and other projects replace their crappy home-grown
resamplers with this one!&lt;/p&gt;

&lt;p&gt;For PulseAudio I was looking for a CODEC which we could use to
encode audio if we have to transfer it over the network. Such a CODEC
would need to have low CPU requirements and allow low-latency
operation, while providing hifi audio. Compression ratio is not such a
high requirement. Unfortunately, as it seems no such CODEC exists,
especially not a "Free" one. However, the Xiph people recommended to
hack up a special version of FLAC for this task. FLAC is fast, has
(obviously) good quality and if hacked up could provide low-latency
encoding. However, FLAC doesn't compress that well. Current PulseAudio
thin-client installations require 170kB network bandwidth for each
client if hifi audio is used. Encoding this in FLAC this could cut
this in half. Not perfect, but better than nothing.&lt;/p&gt;

&lt;p&gt;So, that was FOMS! FOMS is a definitely highly recommended
conference. If you have the chance to attend next year, don't miss it!
I've never been to a more productive, packed conference in my life!&lt;/p&gt;

&lt;p&gt;At LCA I met fellow Avahi coder Trent Lloyd for the first time. Our
talk about Avahi went very well. During my flights to and back from
&lt;tt&gt;.au&lt;/tt&gt; I hacked up &lt;a href="http://0pointer.de/blog/projects/avahify-your-app.html"&gt;avahi-ui&lt;/a&gt;
which I also announced during that talk. Also, in related news,
&lt;tt&gt;tedp&lt;/tt&gt; started to work on an implementation of &lt;a href="http://files.dns-sd.org/draft-cheshire-nat-pmp.txt"&gt;NAT-PMP&lt;/a&gt;
(aka "reverse firewall piercing"; both client and server) for
inclusion in Avahi. This will hopefully make the upcoming Wide-Area
DNS support in Avahi much more useful.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;linux.conf.au&lt;/tt&gt; was a very exciting conference. As a speaker
you're treated like a rock star, with stuff like the speakers dinner,
the speakers adventure (climbing on top of Sydney's AMP tower) and
the penguin dinner. Heck, the organizers even picked me up at the
airport, something I really didn't expect when I landed in Sydney,
which however is quite nice after a 27h flight.&lt;/p&gt;

&lt;p&gt;Two talks I particularly enjoyed at LCA:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lca2007.linux.org.au/talk/154"&gt;nouveau - reverse engineered nvidia drivers&lt;/a&gt; (&lt;a href="http://mirror.linux.org.au/pub/linux.conf.au/2007/video/talks/154.ogg"&gt;Ogg Theora&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lca2007.linux.org.au/talk/221"&gt;burning cpu and battery on the gnome desktop&lt;/a&gt; (&lt;a href="http://mirror.linux.org.au/pub/linux.conf.au/2007/video/talks/221.ogg"&gt;Ogg Theora&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And just for the sake of completeness, here are the links to my presentations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://lca2007.linux.org.au/talk/211"&gt;The PulseAudio Sound Server&lt;/a&gt; (&lt;a href="http://mirror.linux.org.au/pub/linux.conf.au/2007/video/talks/211.ogg"&gt;Ogg Theora&lt;/a&gt;; &lt;a href="http://0pointer.de/public/pulseaudio-presentation-lca2007.pdf"&gt;Slides&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Using Avahi the "Right Way" (&lt;a href="http://mirror.linux.org.au/linux.conf.au/2007/video/monday/monday_1150_GNOME.ogg"&gt;Ogg Theora&lt;/a&gt;; &lt;a href="http://0pointer.de/public/avahi-presentation-lca2007.pdf"&gt;Slides&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, that's it for now. Thanks go to Silvia Pfeiffer, the rest of
the FOMS team and the Seven Team for organizing these two amazing
conferences!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 08 Feb 2007 21:51:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-02-08:/blog/projects/foms-lca-recap.html</guid><category>projects</category></item><item><title>Avahify Your Application!</title><link>https://0pointer.net/blog/projects/avahify-your-app.html</link><description>
                
&lt;p&gt;It has never been easier to add Zeroconf service discovery support to your GTK application!&lt;/p&gt;

&lt;p&gt;The upcoming &lt;a href="http://avahi.org/"&gt;Avahi 0.6.18&lt;/a&gt; will ship with a
new library &lt;tt&gt;libavahi-ui&lt;/tt&gt; which contains a GTK UI dialog
&lt;tt&gt;AuiServiceDialog&lt;/tt&gt;, a simple and easy-to-use dialog for
selecting Zeroconf services, similar in style to &lt;tt&gt;GtkFileChooserDialog&lt;/tt&gt; and friends. This dialog should be used whenever there is an IP
server to enter in a GTK GUI. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mail applications such as Evolution may use it to browse for POP3, POP3S, IMAP, IMAPS and SMTP servers.&lt;/li&gt;
&lt;li&gt;VNC applications may use it to browse for VNC/RFB servers&lt;/li&gt;
&lt;li&gt;Database clients such as Glom may use it to browse for PostrgreSQL servers&lt;/li&gt;
&lt;li&gt;FTP clients may use it to browse for FTP servers&lt;/li&gt;
&lt;li&gt;RSS readers may use it to browse for local RSS feeds&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, how does it look like? Here's a screenshot of a service dialog browsing for FTP, SFTP and WebDAV shares simultaneously:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://0pointer.de/public/service-dialog.png" width="484" height="441" alt="Service Dialog" /&gt;&lt;/p&gt;

&lt;p&gt;The dialog properly supports browsing in remote domains, browsing for
multiple service types at the same time (i.e. POP3 and POP3S) and supports
multi-homed services. It will also resolve the services if requested. Avahi
will ship a (very useful!) example tool &lt;a href="http://avahi.org/browser/trunk/avahi-ui/zssh.c"&gt;&lt;tt&gt;zssh.c&lt;/tt&gt;&lt;/a&gt; which
if started from the command line allows you to quickly browse for local SSH
servers and connect to one of those available. (&lt;a href="http://0pointer.de/public/zssh-screencast.ogm"&gt;Short Theora screencast of &lt;tt&gt;zssh&lt;/tt&gt;&lt;/a&gt; -
Please excuse the strange cursor, seems to be a bug in Istanbul 0.2.1,
which BTW is totally broken on multi-headed setups):&lt;/p&gt;

&lt;p&gt;A simple application making use of this dialog might look like this:&lt;/p&gt;
&lt;pre&gt;
#include &amp;lt;gtk/gtk.h&amp;gt;
#include &amp;lt;avahi-ui/avahi-ui.h&amp;gt;

int main(int argc, char*argv[]) {
    GtkWidget *d;

    gtk_init(&amp;amp;argc, &amp;amp;argv);

    d = aui_service_dialog_new("Choose Web Service");
    aui_service_dialog_set_browse_service_types(AUI_SERVICE_DIALOG(d), "_http._tcp", "_https._tcp", NULL);

    if (gtk_dialog_run(GTK_DIALOG(d)) == GTK_RESPONSE_OK)
        g_message("Selected service name: %s; service type: %s; host name: %s; port: %u",
		aui_service_dialog_get_service_name(AUI_SERVICE_DIALOG(d)),
		aui_service_dialog_get_service_type(AUI_SERVICE_DIALOG(d)),
		aui_service_dialog_get_host_name(AUI_SERVICE_DIALOG(d)),
		aui_service_dialog_get_port(AUI_SERVICE_DIALOG(d)));
    else
        g_message("Canceled.");

    gtk_widget_destroy(d);

    return 0;
}
&lt;/pre&gt;

&lt;p&gt;A more elaborate example is &lt;a href="http://avahi.org/browser/trunk/avahi-ui/zssh.c"&gt;&lt;tt&gt;zssh.c&lt;/tt&gt;&lt;/a&gt;. You
may browse &lt;a href="http://avahi.org/browser/trunk/avahi-ui/avahi-ui.h"&gt;the
full API online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;AuiServiceDialog&lt;/tt&gt; is not perfect yet. It still lacks i18n and a11y
support. In addition it follows the HIG only very roughly. Patches welcome! I
am also very interested in feedback from more experienced GTK programmers,
since my experience with implementing GTK controls is rather limited. This is
my first GTK library which should really feel like a GTK API. So please, read
through &lt;a href="http://avahi.org/browser/trunk/avahi-ui/avahi-ui.h"&gt;the
API&lt;/a&gt; and &lt;a href="http://avahi.org/browser/trunk/avahi-ui/avahi-ui.c"&gt;the
implementation&lt;/a&gt; and send me your comments! Thank you!&lt;/p&gt;

&lt;p&gt;If you want to integrate &lt;tt&gt;AuiServiceDialog&lt;/tt&gt; into your application and
don't want to wait for Avahi 0.6.18, just copy &lt;a href="http://avahi.org/browser/trunk/avahi-ui/avahi-ui.h?format=txt"&gt;&lt;tt&gt;avahi-ui.h&lt;/tt&gt;&lt;/a&gt;
and &lt;a href="http://avahi.org/browser/trunk/avahi-ui/avahi-ui.c?format=txt"&gt;&lt;tt&gt;avahi-ui.c&lt;/tt&gt;&lt;/a&gt; into your sources
and make sure to add &lt;tt&gt;avahi-client&lt;/tt&gt;, &lt;tt&gt;avahi-glib&lt;/tt&gt;, &lt;tt&gt;gtk+-2.0&lt;/tt&gt; to your &lt;tt&gt;pkg-config&lt;/tt&gt; dependencies.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 07 Feb 2007 13:56:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-02-07:/blog/projects/avahify-your-app.html</guid><category>projects</category></item><item><title>IQ Light Mania</title><link>https://0pointer.net/blog/iq-light-mania.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/iq-in-the-movies.html"&gt;As promised&lt;/a&gt; &lt;a href="http://0pointer.de/photos/?gallery=Mexican%20IQ"&gt;here's a gallery&lt;/a&gt; of
better quality photos of a mobile made from mexican style IQ lights.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/photos/?gallery=Mexican%20IQ"&gt;&lt;img src="http://0pointer.de/photos/galleries/Mexican%20IQ/lq/img-7.jpg" width="640" height="427" alt="IQ Light Mobile" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All these lights have been fabricated using &lt;a href="http://0pointer.de/blog/iqlamp-stencil.html"&gt;this stencil&lt;/a&gt; and &lt;a href="http://0pointer.de/blog/iq-light-final.html"&gt;this material&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope this gallery shows a little bit how fascinating these lamps are and explain why I am so obsessed of them that I cannot stop blogging about them.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 04 Feb 2007 17:55:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-02-04:/blog/iq-light-mania.html</guid><category>misc</category></item><item><title>IQ in the Movies</title><link>https://0pointer.net/blog/iq-in-the-movies.html</link><description>
                
&lt;p&gt;The (original) &lt;a href="http://0pointer.de/blog/iq-light-final.html"&gt;IQ Light&lt;/a&gt; is featured in the stylish and funny Hollywood movie &lt;a href="http://imdb.com/title/tt0425210/"&gt;Lucky Number Slevin&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://imdb.com/title/tt0425210/"&gt;&lt;img src="http://0pointer.de/public/lns2.jpeg" width="608" height="256" alt="Lucky Number Slevin Still" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Related to this, don't miss &lt;a href="http://point-at-infinity.org/iq/"&gt;this small but beautiful gallery of a mobile&lt;/a&gt; built entirely from (mexican style) IQ lights of various sizes. I hope to post better quality pictures of the same mobile shortly:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://point-at-infinity.org/iq/"&gt;&lt;img src="http://0pointer.de/public/iq-gal.jpeg" width="570" height="280" alt="IQ Gallery" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh, and I am finally back in &lt;tt&gt;.de&lt;/tt&gt; after my trip to &lt;tt&gt;.au&lt;/tt&gt; and
&lt;a href="http://lca2007.linux.org.au/"&gt;linux.conf.au 2007&lt;/a&gt;/&lt;a href="http://www.annodex.org/events/foms2007/"&gt;FOMS 2007&lt;/a&gt;. I hope to post a
recap of the conferences and their outcome for &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; and &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; shortly.&lt;/p&gt;

&lt;p&gt;Thanks to the impressing work of Silvia Pfeiffer and the LCA video team there's now a video of my PulseAudio presentation at LCA available online. (&lt;a href="http://mirror.linux.org.au/pub/linux.conf.au/2007/video/talks/211.ogg"&gt;Ogg Theora&lt;/a&gt;, &lt;a href="http://lca2007.linux.org.au/talk/211"&gt;Java Cortado&lt;/a&gt;). Don't miss it!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 02 Feb 2007 16:39:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-02-02:/blog/iq-in-the-movies.html</guid><category>misc</category></item><item><title>Good Morning, Freedom Lovers!</title><link>https://0pointer.net/blog/projects/freedom-lovers.html</link><description>
                
&lt;p&gt;On popular request, the slides of my PulseAudio talk at &lt;a href="http://lca2007.linux.org.au"&gt;linux.conf.au 2007&lt;/a&gt; are now &lt;a href="http://0pointer.de/public/pulseaudio-presentation-lca2007.pdf"&gt;available
for download&lt;/a&gt;. And &lt;a href="http://0pointer.de/public/avahi-presentation-lca2007.pdf"&gt;here are the
slides of the Avahi talk&lt;/a&gt; Trent and I did on GNOME.conf.au 2007. Videos will hopefully be available shortly from the LCA web site.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;... Horses? Did anyone say "Horses"?&lt;/i&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 19 Jan 2007 01:01:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-01-19:/blog/projects/freedom-lovers.html</guid><category>projects</category></item><item><title>FOMS 2007/Linux.conf.au 2007</title><link>https://0pointer.net/blog/projects/foms-lca-2007.html</link><description>
                
&lt;p&gt;On Wed, January 17th, I will be speaking at &lt;a href="http://lca2007.linux.org.au/talk/211"&gt;linux.conf.au 2007&lt;/a&gt; about the &lt;a href="http://pulseaudio.org/"&gt;PulseAudio sound server&lt;/a&gt;. Before that, on Mon January 15th, I will do a presentation about &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt;, together with Trent Lloyd, at GNOME.conf.au 2007. And even before that, I will attend &lt;a href="http://www.annodex.org/events/foms2007/Main/SubjectEntries"&gt;FOMS 2007&lt;/a&gt;, and probably say a word or two about &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt;, again.&lt;/p&gt;

&lt;p&gt;Can't wait for those 25h+ of flying from &lt;tt&gt;.de&lt;/tt&gt; to &lt;tt&gt;.au&lt;/tt&gt;!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 06 Jan 2007 19:48:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2007-01-06:/blog/projects/foms-lca-2007.html</guid><category>projects</category></item><item><title>One last followup</title><link>https://0pointer.net/blog/iq-light-final.html</link><description>
                
&lt;p&gt;A small, final followup on the &lt;a href="http://0pointer.de/blog/mexico-lamp.html"&gt;blog stories&lt;/a&gt; &lt;a href="http://0pointer.de/blog/chasing-light.html"&gt;about the mexican style&lt;/a&gt; &lt;a href="http://0pointer.de/blog/iqlamp-stencil.html"&gt;IQ Light&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;After some unsuccessful experimenting with materials like Polystyrene
(cracks too easily), I settled on 0.3mm white Polypropylene which is both easy
to work with and easy to find. The light becomes a little bit blue-greyish
cold. I bought &lt;a href="http://www.google.com/search?q=ibico%20polyopaque"&gt;Ibico PolyOpaque
report covers&lt;/a&gt; for this purpose, which you can get at German Staples stores.
You can get it in 25, 50 or 100 DIN-A4 packs. Because only two full-size
pieces can be cut from a single A4 sheet and you need 30 pieces you need at
least 15 sheets for a single full-size lamp. I built 10 lamps in various sizes from
this material and it seems to work pretty well. &lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 29 Dec 2006 20:35:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-12-29:/blog/iq-light-final.html</guid><category>misc</category></item><item><title>Das Leben der Anderen</title><link>https://0pointer.net/blog/leben-der-anderen.html</link><description>
                
&lt;p&gt;German movies are usually not my thing - I don't like the topics, I don't
like the scripting, I don't like the acting, I don't like the actors, I don't
like the drama and I don't like the humor. (Ok, they usually lack humor entirely, so there's not much not to like of the humor.)&lt;/p&gt;

&lt;p&gt;However, there's now a notable exception: &lt;a href="http://imdb.com/title/tt0405094/"&gt;Das Leben der Anderen&lt;/a&gt; (&lt;i&gt;The Lives of
Others&lt;/i&gt;) is a very good film, one that I really like. It's an absorbing drama, the scripting is good and the acting is fine. There's a good reason that
it has won the European Movie Award (Best Film) and is one of the top
contenders for next years' Oscar (at least the foreign language one).&lt;/p&gt;

&lt;p&gt;If you get the chance to see this movie, do it! It's worth it.&lt;/p&gt;




        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 14 Dec 2006 02:52:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-12-14:/blog/leben-der-anderen.html</guid><category>misc</category></item><item><title>San Francisco</title><link>https://0pointer.net/blog/photos/san-fran.html</link><description>
                
&lt;p&gt;As a followup to my &lt;a href="http://0pointer.de/static/windows"&gt;Windows of Barcelona&lt;/a&gt; series I prepared &lt;a href="http://0pointer.de/static/windows-sf"&gt;Windows of San Francisco&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/windows-sf"&gt;&lt;img src="http://0pointer.de/static/windows-sf-small.jpeg" width="225" height="222" alt="Windows of San Francisco" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few other series :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/static/adjazenz"&gt;Adjazenz Nummero 47&lt;/a&gt;, aka &lt;i&gt;Triptych to the City of San Francisco&lt;/i&gt; (shown below)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/static/kongruenz"&gt;Kongruenz Nummero 22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/static/korrespondenz"&gt;Korrespondenz Nummero 105&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/static/resonanz"&gt;Resonanz Nummero 62&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/adjazenz"&gt;&lt;img src="http://0pointer.de/static/adjazenz-small.jpeg" width="400" height="190" alt="Adjazenz!" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No, the German names and numbers of the series don't have any special meaning, their sole purpose is to sound "artsy", in the spirit of the famous work "Fluktuation 8" by a certain polish action artist.&lt;/p&gt;

&lt;p&gt;The remaining photos I made during my visit in San Francisco after the
Ubuntu Developers' Summit in Mountain View in November &lt;a href="http://0pointer.de/photos/?gallery=San%20Francisco"&gt;are now online&lt;/a&gt;,
as well.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 13 Dec 2006 19:25:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-12-13:/blog/photos/san-fran.html</guid><category>photos</category></item><item><title>Unique Eyebrows</title><link>https://0pointer.net/blog/photos/unique-eyebrows.html</link><description>
                
&lt;p&gt;Dear American People,&lt;/p&gt;

&lt;p&gt;I guess you'll find businesses selling &lt;i&gt;unique eyebrow
designs&lt;/i&gt; only in god's own country:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/unique-eyebrows"&gt;&lt;img src="http://0pointer.de/static/unique-eyebrows.jpeg" width="467" height="700" alt="Unique Eyebrows" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And what does "unique" mean? Do their customers get two
different designs for their two eyebrows? - What a bargain!&lt;/p&gt;

&lt;p&gt;Groucho Marx' greasepaint eyebrows are unique, in a way. Maybe that's what they are selling?&lt;/p&gt;

&lt;p&gt;Confused,&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Lennart (a worried European)&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 13 Dec 2006 01:03:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-12-13:/blog/photos/unique-eyebrows.html</guid><category>photos</category></item><item><title>Interlocking Quadrilaterals</title><link>https://0pointer.net/blog/iqlamp-stencil.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/chasing-light.html"&gt;As promised&lt;/a&gt;, here's
a stencil drawing of the Mexican-style IQ Lamp: &lt;a href="http://0pointer.de/public/iqlamp.ps"&gt;.ps&lt;/a&gt;, &lt;a href="http://0pointer.de/public/iqlamp.svg"&gt;.svg&lt;/a&gt;, &lt;a href="http://0pointer.de/public/iqlamp.pdf"&gt;.pdf&lt;/a&gt;. (1:1, DIN A4/ISO 216 paper size)&lt;/p&gt;

&lt;p&gt;&lt;img src="http://0pointer.de/public/iqlamp.png" width="150" height="119" alt="Fake IQ Light from Mexico - Stencil" /&gt;&lt;/p&gt;

&lt;p&gt;30 of these are needed to assemble one mexican style lamp, as depicted below.
The material to cut these patterns from needs to be a thin (less than .5 mm
thick) plastic (or maybe cardboard) which needs to be flexible - but not too
flexible, and not glossy. It might be advisable to use energy-saving light
bulbs for this lamp. They are entirely hidden inside the lamp and might be good
to avoid overheating of the plastic.  &lt;a href="http://www.sadiethepilot.com/iqweb/iqhowto.htm"&gt;Assembling
instructions&lt;/a&gt;, &lt;a href="http://www.bald-bang.com/IQlight/IQ%20video.html"&gt;Video&lt;/a&gt;, &lt;a href="http://www.instructables.com/id/E9TA9AH137ET2JYI75/"&gt;Instructable&lt;/a&gt;. Please note
that assembling the mexican-style IQ light needs a quite a bit manual force
because all pieces are bent a little, in contrast to the original danish
design which appears to be assembled without any force. (at least the video
clip suggests that.)  For mounting a cable/lamp socket you might need to cut a
small hole in one of the plastic sheets, to put the cable through.&lt;/p&gt;

&lt;p&gt;Once again the photo:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://0pointer.de/public/iq-lamp-mexico.jpeg" width="369" height="359" alt="Fake IQ Light from Mexico" /&gt;&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 04 Dec 2006 23:26:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-12-04:/blog/iqlamp-stencil.html</guid><category>misc</category></item><item><title>Es ist vollbracht!</title><link>https://0pointer.net/blog/projects/2.6.19.html</link><description>
                
&lt;p&gt;Yes, finally &lt;a href="http://www.kernel.org/git/gitweb.cgi?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=0215ffb08ce99e2bb59eca114a99499a4d06e704"&gt;Linux
2.6.19&lt;/a&gt; has been released. So you wonder why is this something to blog about? -- Because
it is the first Linux version that contains my super-cool &lt;a href="http://www.kernel.org/git/gitweb.cgi?p=linux/kernel/git/torvalds/linux-2.6.git;a=blob;h=fdb7153f4426c42b35be5e1206424c984f4de5ea;hb=0215ffb08ce99e2bb59eca114a99499a4d06e704;f=drivers/misc/msi-laptop.c"&gt;MSI
Laptop driver&lt;/a&gt;, one of the most impressing attainments of mankind, only
excelled perhaps by &lt;a href="http://kryptochef.net/index2e.htm"&gt;KRYPTOCHEF&lt;/a&gt;,
the only tool in existence which does &lt;i&gt;fullbit&lt;/i&gt; encryption.&lt;/p&gt;



        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 30 Nov 2006 02:22:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-11-30:/blog/projects/2.6.19.html</guid><category>projects</category></item><item><title>Chasing A Light</title><link>https://0pointer.net/blog/chasing-light.html</link><description>
                
&lt;p&gt;Last friday I posted a &lt;a href="http://0pointer.de/blog/mexico-lamp.html"&gt;little Lazyweb experiment&lt;/a&gt;,
a hunt for information about a certain kind of lamp sold by a street dealer in
Mexico City. A quick followup on the results:&lt;/p&gt;

&lt;p&gt;Surprinsingly many people responded, mostly by email, and partly by &lt;a href="http://0pointer.de/blog/mexico-lamp.html#1164411299.8"&gt;blog comment&lt;/a&gt;.
As it appears I am not the only one who's looking for this specific type of
lamp. Furthermore, a non-trivial set of Planet Gnome readers actually already
owns one of these devices. Apparently counterfeit versions of this lamp are
sold all around the world by street dealers and on markets.&lt;/p&gt;

&lt;p&gt;The lamp seems to be a modified version of the "IQ Light", a &lt;i&gt;self
assembly lighting system made up of interlocking quadrilaterals&lt;/i&gt;. It is
a scandinavian design, by Holger Str&amp;oslash;m, 1973. It is nowadays
exclusively distributed by &lt;a href="http://www.bald-bang.com/"&gt;Bald &amp;amp; Bang&lt;/a&gt;,
Denmark. The lighting system has a very interesting &lt;a href="http://www.iqlight.com/"&gt;web site of its own&lt;/a&gt;, which even includes an
&lt;a href="http://www.sadiethepilot.com/iqweb/iqhowto.htm"&gt;HOWTO&lt;/a&gt; for
assembling these lamps. The &lt;a href="http://www.bald-bang.com/IQlight/IQ%20video.html"&gt;Bald &amp;amp; Bang web site&lt;/a&gt; has a
very stylish video which also shows how to assemble an IQ lamp.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://0pointer.de/public/iq-lamp-mexico.jpeg" width="369" height="359" alt="Fake IQ Light from Mexico" /&gt;&lt;/p&gt;

&lt;p&gt;While my mexican specimen and the official design are very similar, they
differ: the mexican design looks - in a way - "tighter" and ... better (at
least in my humble opinion). For comparison, please have a look on the photo I took from the mexican version which is shown
above, and on the many photos returned by &lt;a href="http://images.google.com/images?hl=en&amp;amp;q=iq%20light&amp;amp;btnG=Google+Search&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;sa=N&amp;amp;tab=wi"&gt;Google
Images&lt;/a&gt;, or the one from the &lt;a href="http://www.sadiethepilot.com/iqweb/iqsorts.htm"&gt;IQ Light homepage&lt;/a&gt;. It
appears as if the basic geometrical form used by the mexican design is somehow
more narrow than the official danish one.&lt;/p&gt;

&lt;p&gt;So, where can one buy one of those lamps? Fake and real ones are sold &lt;a href="http://search.ebay.de/iq-lamp_W0QQcatrefZC6QQcoactionZcompareQQcoentrypageZsearchQQcopagenumZ1QQfposZ22397QQfromZR10QQfsooZ1QQfsopZ1QQftrtZ1QQftrvZ1QQga10244Z10425QQsacatZQ2d1QQsadisZ200QQsargnZQ2d1QQsaslcZ3QQsbrftogZ1QQsofocusZbs"&gt;on
eBay&lt;/a&gt;, &lt;a href="http://search.ebay.com/iq-lamp_W0QQfkrZ1QQfromZR8QQsubmitsearchZSearch"&gt;every
now an then&lt;/a&gt;. The &lt;a href="http://www.momastore.org/museum/moma/ProductDisplay_IQ%20Light%20Shade_10451_10001_16912_-1_11461_11463_null__"&gt;Museum
Store of the New York MoMA&lt;/a&gt; sells the original version for super-cheap $160.
If you search with Google you'll find many more offers like this one, but all
of them are not exactly cheap - for a bunch of thin plastic sheets. All these
shops sell the danish version of the design, noone was able to point me to a shop
where the modified, "mexican" version is sold.&lt;/p&gt;

&lt;p&gt;Given the hefty price tag and the fact that the fake, mexican version looks
better then the original one, I will now build my own lamps, based on the
mexican design. For that I will disassamble my specimen (at least partially)
and create a paper stencil of the basic plastic pattern. I hope to put this up
for download as a &lt;tt&gt;.ps&lt;/tt&gt; file some time next week, since many people
asked for instructions for building these lamps. Presumably the original
design is protected by copyright, hence I will not publish a step-by-step guide
how to build your own fake version. But thankfully this is not even necessary, since the vendor already published a HOWTO and a video for this, online.&lt;/p&gt;

&lt;p&gt;Thank you very much for your numerous responses!&lt;/p&gt;



        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 27 Nov 2006 21:37:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-11-27:/blog/chasing-light.html</guid><category>misc</category></item><item><title>Ubuntu vs. Free Software</title><link>https://0pointer.net/blog/projects/ubuntu-vs-free-software.html</link><description>
                
&lt;p&gt;Everybody should read &lt;a href="http://kennke.org/blog/?p=31"&gt;Roman Kennke's
take on Mark Shuttleworth's OpenSUSE spam mail&lt;/a&gt;. It's constructive and sensible.&lt;/p&gt;

&lt;p&gt;I hope the Ubuntu people find the strength to resist the short-term bliss of
desktop bling for long-term software freedom!&lt;/p&gt;

&lt;p&gt;Please learn the lession Java teaches us: resist the temptation of
closed source software and develop alternatives as free software!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 27 Nov 2006 20:39:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-11-27:/blog/projects/ubuntu-vs-free-software.html</guid><category>projects</category></item><item><title>Dear Lazyweb!</title><link>https://0pointer.net/blog/mexico-lamp.html</link><description>
                
&lt;p&gt;Let's see how well Lazyweb works for me!&lt;/p&gt;

&lt;p&gt;One of the nicest types of lamps I know is depicted on this photo:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://0pointer.de/photos/galleries/Various/lq/img-2.jpg" width="640" height="427" alt="mexico lamp" /&gt;&lt;/p&gt;

&lt;p&gt;This lamp is built from a number (16 or so, it's so difficult to count) of
identical shapes which are put together (a mano) in a very simple, mathematical
fashion. No glue or anything else is need to make it a very robust object. The
lamp looks a little bit like certain Julia fractals, its geometrical structure
is just beautiful. Every mathematical mind will enjoy it.&lt;/p&gt;

&lt;p&gt;This particular specimen has been bought from a street dealer in Mexico
City, and has been made of thin plastic sheets. I saw the same model made from
paper on a market near Barcelona this summer (during GUADEC). Unfortunately I
didn't seize the chance to buy any back then, and now I am regretting it!&lt;/p&gt;

&lt;p&gt;I've been trying to find this model in German and US shops for the last
months (Christmas is approaching fast!) but couldn't find a single specimen. I
wonder who designed this ingenious lamp and who produces it. It looks like a
scandinavian design to me, but that's just an uneducated guess.&lt;/p&gt;

&lt;p&gt;If you have any information about this specific lamp model, or could even
provide me with a pointer where to buy or how to order these lamps in/from
Germany, please leave a comment to this blog story, or write me an email to
&lt;tt&gt;mzynzcr (at) 0pointer (dot) de&lt;/tt&gt;! Thank you very much!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 25 Nov 2006 00:15:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-11-25:/blog/mexico-lamp.html</guid><category>misc</category></item><item><title>uds-mtv -&gt; San Francisco</title><link>https://0pointer.net/blog/projects/uds-mtv.html</link><description>
                
&lt;p&gt;Is anyone who's attending the Ubuntu Developers Summit in Mountain View right now heading for San Francisco tomorrow? I plan to stay a few days in the city to do sight seeing and stuff. Please catch me at the conference today if you are interested to join me visiting San Francisco!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 10 Nov 2006 19:01:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-11-10:/blog/projects/uds-mtv.html</guid><category>projects</category></item><item><title>Cui Bono?</title><link>https://0pointer.net/blog/projects/cui-bono.html</link><description>
                
&lt;p&gt;So, you thought that only Linux users (and other alternative OS zealots)
would benefit from &lt;a href="http://0pointer.de/blog/projects/s270ctrl"&gt;reverse
engineered Windows drivers&lt;/a&gt;? Ha! Far from the truth, it's the &lt;a href="http://www.msi-forum.de/thread.php?threadid=24813&amp;amp;gthreadview=0&amp;amp;hilight=&amp;amp;hilightuser=0&amp;amp;page=1#post199381"&gt;Windows
users themselves&lt;/a&gt; who are benefitting. (Sorry, that link is in German)&lt;/p&gt;

&lt;p&gt;Too bad that this specific Windows port actually infringes my copyrights
since it links my GPL'ed code against the non-free &lt;a href="http://www.logix4u.net/inpout32.htm"&gt;inpout32.dll&lt;/a&gt;. And the guy who did
that port doesn't even think it's necessary to put his email address anywhere.&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 25 Oct 2006 18:12:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-10-25:/blog/projects/cui-bono.html</guid><category>projects</category></item><item><title>MSI Laptop Owners!</title><link>https://0pointer.net/blog/projects/megawiki.html</link><description>
                
&lt;p&gt;MSI Laptop Owners! Join us and extend the &lt;a href="http://megawiki.org/"&gt;MegaWiki&lt;/a&gt;, the new Wiki for all kinds of information on Linux on MSI MegaBooks! (and all MSI built laptops sold under other brands)&lt;/p&gt;

&lt;p&gt;The MegaWiki is still rather empty but we hope that it will soon grow as
large as our inspiration, the &lt;a href="http://thinkwiki.org/"&gt;ThinkWiki&lt;/a&gt;
which collects information about IBM ThinkPads. For that we need your help!&lt;/p&gt;

&lt;p&gt;This site will be the new home of the MSI laptop drivers (backlight control,
rfkill) and provide modified ACPI DSDTs to fix a few BIOS errors. And more!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 25 Oct 2006 13:58:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-10-25:/blog/projects/megawiki.html</guid><category>projects</category></item><item><title>Conferences: UDS, FOMS and LCA</title><link>https://0pointer.net/blog/projects/conferences.html</link><description>
                
&lt;p&gt;To my surprise I have been invited to the Ubuntu Developers Summit in
Mountain View early next month (as a "ROCKSTAR", to quote Mark), to promote &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt;. And that although I am not an
Ubuntu developer, nor even much of an Ubuntu user. I'll be available for
discussing everything Multimedia/&lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; related. While I've not been
invited because of my involvement in Avahi/Zeroconf I will, of course, also be
available for discussion of these topics. As it appears, Canonical is &lt;a href="http://0pointer.de/blog/projects/launchpad-stole-my-name.html"&gt;not
resentful&lt;/a&gt;, or maybe it's just their way to bribe me into registering with
Launchpad? ;-)&lt;/p&gt;

&lt;p&gt;After UDS I plan to stay a few more days in San Francisco to visit the city.
Can anyone point me to cheap accomodation in SF, or perhaps even lives in SF and
has room where I could sleep?&lt;/p&gt;

&lt;p&gt;In addition my PulseAudio presentation has been accepted at &lt;a href="http://lca2007.linux.org.au/"&gt;linux.conf.au 2007&lt;/a&gt;. At &lt;a href="http://live.gnome.org/Sydney2007"&gt;GNOME.conf.au&lt;/a&gt; I hope to give
another presentation, together with Trent Lloyd about &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt;, everyone's favourite Zeroconf
implementation. And finally I plan to give yet another presentation, again about
PulseAudio, at &lt;a href="http://www.annodex.org/events/foms2007"&gt;FOMS 2007&lt;/a&gt;, the &lt;i&gt;Foundations of Open Media Software&lt;/i&gt;
conference, which happens shortly before linux.conf.au, also in Sydney. &lt;b&gt;FOMS
is still looking for more people to speak at the conference, so, please go to
&lt;a href="http://www.annodex.org/events/foms2007/Main/CFP"&gt;their CFP page&lt;/a&gt;
and send in your proposal if you have something to talk about!&lt;/b&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 24 Oct 2006 18:43:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-10-24:/blog/projects/conferences.html</guid><category>projects</category></item><item><title>One fring to rule them all...</title><link>https://0pointer.net/blog/projects/fring2.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/blog/projects/fring.html"&gt;A while ago&lt;/a&gt; I
played around with Cairo and created a Python tool &lt;tt&gt;fring&lt;/tt&gt;, similar to KDE's &lt;a href="http://www.methylblue.com/filelight/"&gt;Filelight&lt;/a&gt;, however not
interactive and very simple. Fr&amp;#233;d&amp;#233;ric Back took my code and gave it a little
GUI love, and this is the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/fring-large.png"&gt;&lt;img src="http://0pointer.de/public/fring-small.png" width="300" height="234" alt="fring screenshot" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fr&amp;#233;d&amp;#233;ric added a nice interactive GTK GUI and a fully asynchronous directory
walker based on Gnome-VFS which runs in a background thread and thus doesn't
block the UI. This makes the user interface snappier than Filelight's ever was.
It's a lot of fun to navigate your directories like this!&lt;/p&gt;

&lt;p&gt;I would have liked to post a screencast of the new &lt;tt&gt;fring&lt;/tt&gt; in action here, to show how
snappy it is. But unfortunately both &lt;a href="http://people.freedesktop.org/~company/byzanz/"&gt;Byzanz&lt;/a&gt; and &lt;a href="http://live.gnome.org/Istanbul"&gt;Istanbul&lt;/a&gt; failed horribly on my 16bpp
display.&lt;/p&gt;

&lt;p&gt;The current version of &lt;tt&gt;fring&lt;/tt&gt; is not yet polished for a public
release. In the meantime, you can get the sources from the SVN:&lt;/p&gt;

&lt;pre&gt;svn checkout svn://svn.0pointer.de/fring/trunk fring&lt;/pre&gt;

&lt;p&gt;Yes, I am aware that a future version of Baobab will offer a similar view of
the filesystem. However, it just was so much fun to hack on &lt;tt&gt;fring&lt;/tt&gt;, and
due to the power of Python it was so easy and quick to develop this tool, that
we just couldn't resist to do it.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 19 Oct 2006 00:43:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-10-19:/blog/projects/fring2.html</guid><category>projects</category></item><item><title>Updates</title><link>https://0pointer.net/blog/projects/stuff.html</link><description>
                
&lt;p&gt;Various, unrelated news:&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="http://www.der-marv.de/"&gt;Marvin Stark&lt;/a&gt; my project &lt;a href="http://packages.debian.org/unstable/utils/syrep"&gt;syrep&lt;/a&gt; is now
available in Debian. As you might know all the cool kids have written their
own distributed revision control systems. This is my contribution on this
topic. Although I started to work on it four years ago &lt;a href="http://0pointer.de/lennart/projects/syrep/"&gt;syrep&lt;/a&gt; is still unrivaled
and unbeaten in its specific feature set. (Which is admittedly very different
from the feature set of most other software in this area.)&lt;/p&gt;

&lt;p&gt;Thanks to CJ van den Berg and Sjoerd Simons (and a few others from
&lt;tt&gt;#pulseaudio&lt;/tt&gt;) &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; is now &lt;a href="http://packages.debian.org/unstable/sound/pulseaudio"&gt;available in
Debian&lt;/a&gt;, the auxiliary GUI tools like &lt;a href="http://0pointer.de/lennart/projects/pavucontrol/"&gt;pavucontrol&lt;/a&gt; seem to
be still missing. Nonetheless: it's now easier then ever to try PulseAudio:&lt;/p&gt;

&lt;pre&gt;sudo aptitude install pulseaudio \
    pulseaudio-module-hal \
    pulseaudio-esound-compat \
    pulseaudio-utils \
    libgstreamer-plugins-pulse0.10-0 \
    pulseaudio-module-gconf \
    pulseaudio-module-x11 \
    pulseaudio-module-zeroconf&lt;/pre&gt;

&lt;p&gt;For the next months I will focus on my &lt;i&gt;Diplomarbeit&lt;/i&gt; (German equivalent of a master thesis). Due to this I passed maintainership of &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; to &lt;a href="http://lathiat.livejournal.com/"&gt;Trent Lloyd&lt;/a&gt; and of &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; to &lt;a href="http://drzeus.cx/"&gt;Pierre Ossman&lt;/a&gt;. I hope to resume maintainership of both projects in January.&lt;/p&gt;

&lt;p&gt;My first &lt;a href="http://kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=8c4c731a89ea6458001f48033f8988447736fb38"&gt;non-trivial kernel patch&lt;/a&gt; has been merged into Linus' kernel, although the 2.6.19 merge window was already closed. I take this as birthday present from Linus.&lt;/p&gt;

&lt;p&gt;If you have a laptop (such as the &lt;a href="http://0pointer.de/lennart/tchibo.html"&gt;MSI S270&lt;/a&gt;) with Ricoh SD/MMC
interface (not one of the new controllers which are SDHCI compatible, but the
old ones where the SD/MMC is a virtual PCMCIA slot identifying itself as
&lt;tt&gt;Bay1Controller&lt;/tt&gt;), then please support me in writing a Linux driver for
it and request the necessary documentation and datasheets from Ricoh. For more
information on this issue see &lt;a href="https://tango.0pointer.de/pipermail/s270-linux/2006-October/thread.html"&gt;this
posting on the s270-linux mailing list&lt;/a&gt;, and &lt;a href="https://tango.0pointer.de/pipermail/s270-linux/2006-October/000045.html"&gt;this followup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's all for now.&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 18 Oct 2006 19:46:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-10-18:/blog/projects/stuff.html</guid><category>projects</category></item><item><title>avahi-autoipd Released and 'State of the Lemur'</title><link>https://0pointer.net/blog/projects/avahi-0.6.14.html</link><description>
                
&lt;p&gt;A few minutes ago I released &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; 0.6.14
which besides other, minor fixes and cleanups includes a new component &lt;a href="http://avahi.org/download/avahi-autoipd.8.xml"&gt;&lt;tt&gt;avahi-autoipd&lt;/tt&gt;&lt;/a&gt;.
This new daemon is an implementation of &lt;a href="http://files.zeroconf.org/rfc3927.txt"&gt;IPv4LL&lt;/a&gt; (aka RFC3927, aka
APIPA), a method for acquiring link-local IP addresses (those from the range
169.254/16) without a central server, such as DHCP.&lt;/p&gt;

&lt;p&gt;Yes, there are already plenty Free implementations of this protocol
available.  However, this one tries to do it right and integrates well with the
rest of Avahi. For a longer rationale for adding this tool to our distribution
instead of relying on externals tools, please read &lt;a href="http://lists.freedesktop.org/archives/avahi/2006-September/000863.html"&gt;this
mailing list thread&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is my hope that this tool is quickly adopted by the popular
distributions, which will allow Linux to finally catch up with technology that
has been available in Windows systems since Win98 times. If you're a
distributor please follow &lt;a href="http://avahi.org/wiki/AvahiAutoipd"&gt;these
notes&lt;/a&gt; which describe how to integrate this new tool into your distribution
best.&lt;/p&gt;

&lt;p&gt;Because &lt;tt&gt;avahi-autoipd&lt;/tt&gt; acts as &lt;tt&gt;dhclient&lt;/tt&gt; plug-in by default,
and only activates itself as last resort for acquiring an IP address I hope
that it will get much less in the way of the user than previous implementations
of this technology for Linux.&lt;/p&gt;

&lt;h4&gt;State of the Lemur&lt;/h4&gt;

&lt;p&gt;Almost 22 months after my first SVN commit to the flexmdns (which was the
name I chose for my mDNS implementation when I first started to work on it)
source code repository, 18 months after Trent and I decided to join our two
projects under the name "Avahi" and 12 months after the release of Avahi 0.1,
it's time for a little "State of the Lemur" post.&lt;/p&gt;

&lt;p&gt;To make it short: Avahi is ubiquitous in the Free Software world. &lt;tt&gt;;-)&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;All major (Debian, Ubuntu, Fedora, Gentoo, Mandriva, OpenSUSE) and many
minor distributions have it. A quick Google-based poll I did a few weeks ago
shows that it is part of at least &lt;a href="http://avahi.org/wiki/AboutAvahi#Distributions"&gt;19 different
distributions&lt;/a&gt;, including a range of embedded ones. The list of &lt;a href="http://avahi.org/wiki/Avah4users#SoftwareMakinguseofAvahi"&gt;applications
making native use&lt;/a&gt; of the Avahi client API is growing, currently bearing 31
items. That list does not include the legacy HOWL applications and the
applications that use our Bonjour compatibility API which can run on top of
Avahi, hence the real number of applications that can make use of Avahi is
slightly higher. The first commercial hardware appliances which include Avahi are
slowly appearing on the market. I know of at least three such products, one
being &lt;a href="http://www.excito.com/products.html"&gt;Bubba&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;If you package Avahi for a distribution, add Avahi support to an
application, or build a hardware appliance with Avahi, please make sure to add
an item to the respective lists linked above, it's a Wiki. Thank you!
(Anonymous registration without Mail address required, though) &lt;/i&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 14 Sep 2006 00:40:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-09-14:/blog/projects/avahi-0.6.14.html</guid><category>projects</category></item><item><title>Playing with Cairo</title><link>https://0pointer.net/blog/projects/fring.html</link><description>
                &lt;p&gt;Play around with &lt;a href="http://cairographics.org/"&gt;Cairo&lt;/a&gt;: &lt;b&gt;Check!&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;One thing that has been sitting on my TODO list for a very long
time was playing around with Cairo. No longer! Yesterday I spent a
little time on hacking a Cairo based equivalent of &lt;a href="http://www.methylblue.com/filelight/"&gt;KDE's Filelight&lt;/a&gt; (Which
BTW is one of the two programs that KDE has but GNOME really lacks,
the other being &lt;a href="http://kcachegrind.sourceforge.net/cgi-bin/show.cgi"&gt;KCacheGrind&lt;/a&gt;). The
result after two hours is this:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/fring.png"&gt;&lt;img src="http://0pointer.de/public/fring-small.png" width="300" height="225" alt="Fring Screenshot" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This screenshot shows the development tree of my &lt;a href="http://0pointer.de/lennart/projects/syrep/"&gt;Syrep tool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This tool has definitely nicer anti-aliased graphics than
Filelight, doesn't it? The source code is here: &lt;a href="http://0pointer.de/public/fring.py"&gt;&lt;tt&gt;fring.py&lt;/tt&gt;&lt;/a&gt;. Anyone
interested in turning this into a proper GNOME application?&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 13 Sep 2006 16:43:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-09-13:/blog/projects/fring.html</guid><category>projects</category></item><item><title>A few updates on PulseAudio</title><link>https://0pointer.net/blog/projects/pulse-news.html</link><description>
                
&lt;p&gt;Thanks to Marc-Andre Lureau there's now a &lt;a href="http://bugzilla.gnome.org/show_bug.cgi?id=348572"&gt;jhbuild file
for PulseAudio&lt;/a&gt;. And there is &lt;a href="http://live.gnome.org/PulseAudio"&gt;this (little bit chaotic)
Wiki page&lt;/a&gt; in GNOME Live! about the relation of PulseAudio and
GNOME.&lt;/p&gt;

&lt;p&gt;A few weeks ago I wrote a new page for our Wiki where I tried to
describe the steps necessary to get the most out of PulseAudio. It's
called the &lt;a href="http://pulseaudio.org/wiki/PerfectSetup"&gt;Perfect
Setup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few minutes ago I released &lt;a href="http://pulseaudio.org/"&gt;PulseAudio 0.9.5&lt;/a&gt; and new versions of the auxiliary tools. The changelog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add module-hal-detect, a module that detects all local sound hardware using &lt;a href="http://freedesktop.org/wiki/Software_2fhal"&gt;HAL&lt;/a&gt; and loads the necessary modules. Handles hot-plug and hot-removal of audio devices. (Contributed by Shahms E. King)&lt;/li&gt;
&lt;li&gt;Add shared memory transfer method for local clients&lt;/li&gt;
&lt;li&gt;Update module-volume-restore to automatically restore the output device last used by an application in addition to the volume it last used&lt;/li&gt;
&lt;li&gt;Add a new module module-rescue-streams for automatically moving streams to another sink/source if the sink/source they are connected to dies&lt;/li&gt;
&lt;li&gt;Add support for moving streams "hot" between sinks/sources&lt;/li&gt;
&lt;li&gt;Reduce memory consumption and CPU load as result of Valgrind/Massif profiling&lt;/li&gt;
&lt;li&gt;Add new module module-gconf for reading additional configuration statements from GConf&lt;/li&gt;
&lt;li&gt;Fix module-tunnel to work with the latest protocol&lt;/li&gt;
&lt;li&gt;Miscellaneous fixes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the nicest new features of PulseAudio 0.9.5 is HAL
integration (which has been contributed by Shahms King). PulseAudio will
now automatically detect all available sound devices and will make
use of them. It supports both hot-plug and hot-remove.&lt;/p&gt;

&lt;p&gt;Another nice feature is the GConf integration which allowed us to add another nice application to the PulseAudio toolset: the &lt;i&gt;PulseAudio Preferences&lt;/i&gt; utility:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/lennart/projects/paprefs//screenshot.png"&gt;&lt;img src="http://0pointer.de/public/paprefs-small.png" width="172" height="200" alt="paprefs screenshot" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea is to have a simple, nice configuration dialog that allows
configuration of the more exotic features of PulseAudio which we do
not enable by default due to security considerations or to not
confuse the user. Right now a lot of features are hidden behind
non-trivial configuration file statements. This preferences tool shall
make them available for the users which are not so keen on editing
configuration files.&lt;/p&gt;

&lt;p&gt;Playing around with &lt;a href="http://valgrind.org/"&gt;Valgrind&lt;/a&gt;'s
Massif tool and &lt;a href="http://kcachegrind.sourceforge.net/cgi-bin/show.cgi"&gt;KCachegrind&lt;/a&gt; I did a little bit of memory and perfomance profiling of
the PulseAudio daemon. The 0.9.5 release contains a lot of
optimizations which are result of this work.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;a href="http://0pointer.de/public/massif-pulseaudio.png"&gt;&lt;img src="http://0pointer.de/public/massif-pulseaudio-small.png" width="261" height="200" alt="Massif before" /&gt;&lt;/a&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;a href="http://0pointer.de/public/massif-pulseaudio2.png"&gt;&lt;img src="http://0pointer.de/public/massif-pulseaudio2-small.png" width="274" height="200" alt="Massif after" /&gt;&lt;/a&gt;

&lt;p&gt;These plots show the memory consumption against the time, from
starting the server, to playing stream, to stopping the stream and
shutting down the server again. The major improvement was actually an
update to &lt;a href="http://www.mega-nerd.com/SRC/index.html"&gt;libsamplerate&lt;/a&gt; done
by its maintainer to improve the memory handling of that library. (He
didn't release an updated version of his library containing the
changes shown in the plots yet).&lt;/p&gt;

&lt;p&gt;PulseAudio had the nice feature of remembering the playback volume of every
application for quite a while. Starting with 0.9.5 PulseAudio it also remembers
the output device for every application. Together with an updated Volume
Control tool which now allows moving streams between sinks while they are
played this can be used to configure a ruleset like "Ekiga always on the USB
headset, Rhytmbox always on the external speakers" very intuitively and easily:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/pavucontrol-move.png"&gt;&lt;img src="http://0pointer.de/public/pavucontrol-move-small.png" width="193" height="200" alt="pavucontrol screenshot" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here's a final screenshot showing all the tools we currently have for PulseAudio 0.9.5.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/pulse-screenshot.png"&gt;&lt;img src="http://0pointer.de/public/pulse-screenshot-small.png" width="500" height="200" alt="PA Screenshot" /&gt;&lt;/a&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 27 Aug 2006 02:19:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-08-27:/blog/projects/pulse-news.html</guid><category>projects</category></item><item><title>Launchpad is Evil</title><link>https://0pointer.net/blog/projects/launchpad-stole-my-name.html</link><description>
                
&lt;p&gt;I always think twice before entering my name in any web form or posting to a
mailing list. Is the web site/list respectable? Do the owners of the web site
have any commercial interest in my name (spam, marketing, ...)? Would I ever
regret that my name can be found with Google in context with this web
site/mailing list? If I enter my name is it used for collecting data about me?
Is there any reasonable privacy policy?&lt;/p&gt;

&lt;p&gt;Often enough I refrain from entering my name after deciding that the answers
to these questions are unsatisfactory. I like to be in control of my name. If I
am not confident that I remain in control I don't enter my name to any
service.&lt;/p&gt;

&lt;p&gt;Recently it came to my attention that Canonical decided to create &lt;a href="https://launchpad.net/people/mzqrovna"&gt;an account (!) for me&lt;/a&gt; in their
commercial, proprietary bug tracker called "Launchpad". I never asked for one!
I never even considered having one, because their service clearly is nothing
that would pass the tests mentioned above. They are a commercial service, my
account data is apparently "content" for them, they don't seem to have any
privacy policy. (At least I couldn't find any, the navigation is pretty
crappy.)&lt;/p&gt;

&lt;p&gt;Canonical's nimbus of being "the good guys" doesn't hinder them to
incorporate data from free sources (apparently they got my data from the Debian
BTS) and make a commercial service of it, without even asking the original
contributors if that would be OK with them, or if it is OK to incorporate their
name or personal profile in the service. Apparently Canonical is not much
better than a common spam harvester: generating personal profiles for
business, without consent of the "victim".&lt;/p&gt;

&lt;p&gt;&lt;b&gt;If anyone from Canonical reads this&lt;/b&gt;: It is not OK for me to use my name as
"content" for your commercial, proprietary service. Please remove any
reference to my name from your "account" database. I don't want to have a
Launchpad account. I don't plan to use Launchpad. Let me decide if I ever want to
join! Thank you very much.&lt;/p&gt;

&lt;p&gt;Update: I especially dislike the fact that they created an account for me in
a service where Hitler apparently already has six (!) accounts. I am very sure
that I don't want to be part of that community.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 26 Aug 2006 22:27:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-08-26:/blog/projects/launchpad-stole-my-name.html</guid><category>projects</category></item><item><title>Avahi porter for Win32 needed!</title><link>https://0pointer.net/blog/projects/avahi-win32.html</link><description>
                
&lt;p&gt;Are you a Win32 hacker and looking for something worthwhile to do in Free Software? We're
eagerly looking for someone to port &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; to
that platform. Now that &lt;a href="http://svn.sourceforge.net/viewvc/windbus/trunk/"&gt;D-Bus is available on
Win32&lt;/a&gt;, the last major stumbling block for this feat is no more.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 25 Aug 2006 23:18:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-08-25:/blog/projects/avahi-win32.html</guid><category>projects</category></item><item><title>Avahi 0.6.13 released</title><link>https://0pointer.net/blog/projects/avahi-0.6.13.html</link><description>
                
&lt;div&gt;&lt;img src="http://avahi.org/chrome/site/avahi-trac.png" width="200" height="96" style="float:right; border: 0px; margin: 10px" alt="Avahi Logo" /&gt;&lt;/div&gt;

&lt;p&gt;I am happy to bring you yet another release of &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt;, everyone's favourite Zeroconf stack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
    Add a new D-Bus method for changing the mDNS host name during
    runtime. This functionality is only available to members of the
    UNIX group "netdev", which is the same access group that is
    enforced by GNOME's NetworkManager daemon. Since NM will probably
    be the most prominent user of this new method, we decided to limit
    access to the same group. The access group can be set by passing
    --with-avahi-priv-access-group= to "configure". If you need more
    sophisticated access control you can freely edit
    /etc/dbus/system.d/avahi-dbus.conf.&lt;/li&gt;
  &lt;li&gt; Add a new utility "avahi-set-host-name" which is a command line
    wrapper around the aforementioned SetHostName() method.&lt;/li&gt;
  &lt;li&gt; Bonjour API compatibility library:
&lt;ul&gt;
        &lt;li&gt; Implement DNSServiceUpdateRecord()&lt;/li&gt;
        &lt;li&gt; Allow passing NULL as callback function for DNSServiceRegister()&lt;/li&gt;
        &lt;li&gt; Implement subtype registration in DNSServiceRegister() in a
          way that is compatible with Bonjour.&lt;/li&gt;
	&lt;li&gt; Update to newer copy of dns_sd.h&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt; If the host name changes update names of static services wich
    contain wildcards.&lt;/li&gt;
  &lt;li&gt; Don't build documentation about embedding the Avahi mDNS stack into
    other programs by default. This is a feature used only by embedded
    developers. Pass --enable-core-docs to "configure" to enable
    building these docs, like in Avahi &amp;lt;= 0.6.12.&lt;/li&gt;
  &lt;li&gt; Build Qt documentation only when Qt support is enabled in
    the configuration. Same for GLib.&lt;/li&gt;
  &lt;li&gt; Change algorithm used to find a new host name on conflict. In
    Avahi &amp;lt;= 0.6.12 a conflicting host name of "foobar" would be
    changed to the new name "foobar2". With 0.6.13 "foobar-2" will be
    picked instead. This follows Bonjour's behaviour and has the
    advantage not confusing people with regular host names ending in
    digits.&lt;/li&gt;
  &lt;li&gt; Don't disable all static services when SIGHUP is recieved.&lt;/li&gt;
  &lt;li&gt; Fix build when Avahi is configured without Gtk+ but with Python
    support&lt;/li&gt;
  &lt;li&gt;Fix build on MacOS X&lt;/li&gt;
  &lt;li&gt;Support using Solaris DBM instead of gdbm for the service type
    database. The latter is still recommended&lt;/li&gt;
  &lt;li&gt;Minor other fixes and documentation updates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The relevant NetworkManager bug about &lt;tt&gt;SetHostName()&lt;/tt&gt; is &lt;a href="http://bugzilla.gnome.org/show_bug.cgi?id=352828"&gt;#352828&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And &lt;a href="http://avahi.org/report/1"&gt;our bug tracker&lt;/a&gt; is back to only &lt;i&gt;two&lt;/i&gt; open bugs for Avahi. That's a good feeling, I can tell you!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 25 Aug 2006 21:59:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-08-25:/blog/projects/avahi-0.6.13.html</guid><category>projects</category></item><item><title>MSI S270 Laptop Linux Kernel Driver</title><link>https://0pointer.net/blog/projects/s270-kernel.html</link><description>
                
&lt;p&gt;Earlier this year I worked on &lt;a href="http://0pointer.de/blog/projects/s270ctrl"&gt;reverse engineering&lt;/a&gt; the
brightness control of my &lt;a href="http://0pointer.de/lennart/tchibo.html"&gt;MSI
S270 laptop&lt;/a&gt;.  Turning this work into a proper kernel driver was still left
to be done. Until yesterday... The result of yesterday's work are &lt;a href="http://lkml.org/lkml/2006/8/9/432"&gt;two&lt;/a&gt; &lt;a href="http://lkml.org/lkml/2006/8/9/431"&gt;kernel&lt;/a&gt; patches I already posted
for upstream inclusion.&lt;/p&gt;

&lt;p&gt;If you want to test these drivers, download the latest kernel patches:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/public/acpi-ec-transaction.patch"&gt;&lt;tt&gt;acpi-ec-transaction.patch&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/public/acpi-s270.patch"&gt;&lt;tt&gt;acpi-s270.patch&lt;/tt&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The two patches apply to kernel 2.6.17. After patching activate "MSI S270
Laptop Extras" under "Device Drivers"/"Misc devices" and recompile and install.
After loading the &lt;tt&gt;s270&lt;/tt&gt; module, you now have a backlight class driver
exposing its innards in &lt;tt&gt;/sys/class/backlight/s270bl/&lt;/tt&gt;. For
changing the screen brightness issue as &lt;tt&gt;root&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;echo 8 &gt; /sys/class/backlight/s270bl/brightness&lt;/pre&gt;

&lt;p&gt;This will set the screen brightness to maximum. The integer range is 0..8.&lt;/p&gt;

&lt;p&gt;In addition to this backlight class driver we export a platform driver which
allows reading the current state of the WLAN/Bluetooth subsystem. The platform
drivers also allows toggling the &lt;i&gt;automatic brightness control&lt;/i&gt; feature: &lt;/p&gt;

&lt;pre&gt;
cat /sys/devices/platform/s270pf/wlan                 # Show WLAN status
cat /sys/devices/platform/s270pf/bluetooth            # Show Bluetooth status
echo 1 &gt; /sys/devices/platform/s270pf/auto_brightness # Enable automatic brightness control&lt;/pre&gt;

&lt;p&gt;If the driver refuses to load (returning ENODEV) and you are sure you have
an MSI S270 the machine is probably not recognized correctly by its &lt;a href="http://en.wikipedia.org/wiki/Desktop_Management_Interface"&gt;DMI&lt;/a&gt; data.
In that case you can pass &lt;tt&gt;force=1&lt;/tt&gt; to the driver which will force the
driver load even when the DMI data doesn't match. YMMV. If everything works
correctly please make sure to send me the output of &lt;tt&gt;dmidecode&lt;/tt&gt;, so that
I can add the DMI data to the list of known laptops in the driver.&lt;/p&gt;

&lt;p&gt;There might even be a chance that this driver works on other MSI laptop
models, too (such as S260). YMMV. But don't come running when the driver causes
your machine to explode! MSI laptops such as the S270 or S260 are often sold as
OEM hardware under different brands (such as Cytron/TCM/Medion/Tchibo MD96100
or "SAM2000"), so if your laptop looks remotely like &lt;a href="http://0pointer.de/lennart/tchibo.html"&gt;this one&lt;/a&gt; and &lt;tt&gt;dmidecode |
grep MICRO-STAR&lt;/tt&gt; yields at least a single line, and you are adventurous
than you might want to test this driver on it. And don't forget to send me your
&lt;tt&gt;dmidecode&lt;/tt&gt; output if it works for you!&lt;/p&gt;

&lt;p&gt;Unfortunately HAL (at least in my version 0.5.7) doesn't support the generic
backlight device class yet, which means no &lt;tt&gt;gnome-power-manager&lt;/tt&gt; support
for now.&lt;/p&gt;

&lt;p&gt;Although this driver is based on reverse engineered data it should be
legally safe even in the US. After I did my initial work on the S270 controls
MSI supplied me with a register table of their &lt;i&gt;ACPI Embedded Controller&lt;/i&gt;
(which is what this driver interfaces with) and one of their engineers even
tested my work.&lt;/p&gt;

&lt;p&gt;Last but not least I created a &lt;a href="https://tango.0pointer.de/mailman/listinfo/s270-linux"&gt;mailing list for
discussion of Linux on the MSI S270&lt;/a&gt;. Please join if you run Linux on one of
these machines! I will announce future driver work for the S270 there.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 10 Aug 2006 19:34:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-08-10:/blog/projects/s270-kernel.html</guid><category>projects</category></item><item><title>Apple Bonjour adopts the Apache License 2.0</title><link>https://0pointer.net/blog/projects/bonjour-apache-license.html</link><description>
                
&lt;p&gt;Yesterday &lt;a href="http://bonjour.macosforge.org/"&gt;Apple Bonjour&lt;/a&gt; &lt;a href="http://lists.apple.com/archives/Darwin-dev/2006/Aug/msg00067.html"&gt;has
been&lt;/a&gt; &lt;a href="http://apple.slashdot.org/article.pl?sid=06/08/07/2359256"&gt;released&lt;/a&gt;
under the Apache License 2.0, replacing the old much criticized (because
non-free) APSL licensing.&lt;/p&gt;

&lt;p&gt;What does this mean for &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt;? First of all
although the &lt;a href="http://en.wikipedia.org/wiki/Apache_license"&gt;Apache
License&lt;/a&gt; is much better than the &lt;a href="http://www.gnu.org/philosophy/apsl.html"&gt;APSL&lt;/a&gt; it still isn't GPL
compatible (at least in the eyes of the FSF), which effectively means that
Bonjour still cannot be used by more than &lt;a href="http://freshmeat.net/stats/#license"&gt;66% of the Free Software&lt;/a&gt;
projects available. Secondly Avahi is more powerful in most areas than Bonjour
ever was.  (In fact, there is only a single feature where Bonjour surpasses us:
writable "Wide Area DNS-SD"). Avahi uses all the "hot" Free technologies like
&lt;a href="http://www.freedesktop.org/wiki/Software/dbus"&gt;D-Bus&lt;/a&gt; and a has much better integration in the Linux networking subsystem. Avahi is more secure (&lt;tt&gt;chroot()&lt;/tt&gt;...)
Avahi is compatible API- and ABI-wise with Bonjour, but not the other way
round. Avahi is now part of every major Linux distribution.&lt;/p&gt;

&lt;p&gt;Avahi is actively developed. The aforementioned Wide Area DNS-SD is currently
being worked on by Federico Lucifredi. Since I will write my master thesis
about mDNS scalability a lot of additional development will be done for Avahi
in the next month.&lt;/p&gt;

&lt;p&gt;In short: Avahi is here to stay. Apple's move to the Apache license is too little, too late.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Update:&lt;/b&gt; the Bonjour client libraries are BSD licensed, so the 66% argument doesn't hold.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 08 Aug 2006 12:38:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-08-08:/blog/projects/bonjour-apache-license.html</guid><category>projects</category></item><item><title>ZeroConf in Ubuntu</title><link>https://0pointer.net/blog/projects/zeroconf-ubuntu.html</link><description>
                &lt;p&gt;&lt;i&gt;(Disclaimer: I am not an Ubuntu user myself. But I happen to be the lead developer of &lt;a href="http://avahi.org"&gt;Avahi&lt;/a&gt;.)&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;It came to my attention that Ubuntu &lt;a href="https://lists.ubuntu.com/archives/ubuntu-devel/2006-July/thread.html#19137"&gt;is&lt;/a&gt;
&lt;a href="https://lists.ubuntu.com/archives/ubuntu-devel/2006-July/thread.html#19391"&gt;discussing&lt;/a&gt;
&lt;a href="https://lists.ubuntu.com/archives/ubuntu-devel/2006-July/thread.html#19088"&gt;whether&lt;/a&gt;
&lt;a href="https://lists.ubuntu.com/archives/ubuntu-devel/2006-July/thread.html#19071"&gt;to&lt;/a&gt;
enable Zeroconf/Avahi in default installations. I would like to point out a few
things:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;The "No Open Ports" policy:&lt;/b&gt; This policy (or at least the
way many people interprete it) seems to be thought out by someone who
doesn't have much experience with TCP/IP networking. While it might make sense
to enforce this for application-level protocols like HTTP or FTP it doesn't
make sense to apply it to transport-level protocols such as DHCP, DNS or in
this case &lt;a href="http://multicastdns.org/"&gt;mDNS&lt;/a&gt; (the underlying protocol of Zeroconf/Avahi/Bonjour):&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;Even the simplest DNS lookup requires the opening of an UDP port for a
short period of time to be able to recieve the response. This is usually not
visible to the administrator, because the time is too short to show up in
&lt;tt&gt;netstat -uln&lt;/tt&gt;, but nonetheless it is an open port. (UDP is not
session-based (like TCP is) so incoming packets are accepted regardless where
they come from)&lt;/li&gt;

&lt;li&gt;DHCP clients listen on UDP port 68 during their entire lifetime (which in
most cases is the same as the uptime of the machine). DHCP may be misused for
much worse things than mDNS. Evildoers can forge DHCP packets to change IP
addresses and routing of machines. This is definitely something that cannot be
done with mDNS. &lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;All three protocols, DNS, DHCP and mDNS, require a little bit of trust in
the local LAN. They (usually) don't come with any sort of authentication and
they all are very easy to forge. The impact of forged mDNS packets is clearly
less dangerous than forged DHCP or DNS packets. Why? Because mDNS doesn't
allow you to change the IP address or routing setup (which forged DHCP allows)
and because it cannot be used to spoof host names outside the &lt;tt&gt;.local&lt;/tt&gt;
domain (which forged DNS allows).&lt;/p&gt;

&lt;p&gt;Enforcing the "No Open ports" policy everywhere in Ubuntu would require that
both DNS and DHCP are disabled by default. However, as everybody probably
agrees, this would be ridiculous because a standard Ubuntu installation
couldn't even be used for the most basic things like web browsing.&lt;/p&gt;

&lt;p&gt;Oh, and BTW: DNS lookups are usually done by an NSS plugin which is loaded
by the libc into every process which uses &lt;tt&gt;gethostbyname()&lt;/tt&gt; (the function for doing host name resolutions).  So, in
effect every single process that uses this function has an open port for a
short time. And the DNS client code runs with user priviliges, so an exploit
really hurts. &lt;tt&gt;dhclient&lt;/tt&gt; (the DHCP client) runs as &lt;tt&gt;root&lt;/tt&gt; during the entire
runtime, so an exploit of it hurts even more. Avahi in contrast &lt;a href="http://avahi.org/wiki/SecurityConsiderations"&gt;runs as its own user and
&lt;tt&gt;chroot()&lt;/tt&gt;s&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is not my intention to force anyone to use &lt;a href="http://avahi.org/"&gt;my
software&lt;/a&gt;. However, enforcing the "No Open Ports" policy unconditionally is
not a good idea. Currently Ubuntu makes exceptions for DHCP/DNS and so
it should for mDNS.&lt;/p&gt;

&lt;p&gt;I do agree that publishing all kinds of local services with Avahi in a
default install is indeed problematic. However, if the "No Open Ports" policy
is enforced on all other application-level software, there shouldn't be any
application that would want to register a service with Avahi.&lt;/p&gt;

&lt;p&gt;Starting Avahi "on-demand" is not an option either, because it offers useful
services even when no local application is accessing is. Most notably this is
host name resolution for the local host name. (Hey, yeah, Zeroconf is more than
just &lt;i&gt;stealing music&lt;/i&gt;.)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Remember:&lt;/b&gt; &lt;a href="http://zeroconf.org/"&gt;Zeroconf&lt;/a&gt; is about
&lt;i&gt;Zero Configuration&lt;/i&gt;. Requiring the user to toggle some obscure
configuration option before he can use Zeroconf would make it a paradox.
Zeroconf was designed to make things "just work". If it isn't enabled by
default it is impossible to reach that goal.&lt;/p&gt;

&lt;p&gt;Oh, and I enabled commmenting in my blog, if anyone wants to flame me on this...&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 26 Jul 2006 20:59:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-07-26:/blog/projects/zeroconf-ubuntu.html</guid><category>projects</category></item><item><title>Announcing SECCURE</title><link>https://0pointer.net/blog/projects/seccure.html</link><description>
                
&lt;p&gt;Yesterday my brother released his second Free Software package, the &lt;a href="http://point-at-infinity.org/seccure/"&gt;SECCURE Elliptic Curve Crypto Utility for Reliable Encryption&lt;/a&gt;. (&lt;a href="http://en.wikipedia.org/wiki/Recursive_acronym"&gt;Recursive acronyms&lt;/a&gt;, yay!)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;The seccure toolset implements a selection of asymmetric algorithms based on elliptic curve cryptography (ECC). In particular, it offers public key encryption / decryption and signature generation / verification. ECC schemes offer a much better key size to security ratio than classical systems (RSA, DSA). Keys are short enough to make direct specification of keys on the command line possible (sometimes this is more convenient than the management of PGP-like key rings). seccure builds on this feature and therefore is the tool of choice whenever lightweight asymmetric cryptography -- independent of key servers, revocation certificates, the Web of Trust, or even configuration files -- is required.&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Anyone willing to work on the &lt;a href="http://bugs.debian.org/378987"&gt;Debian RFP&lt;/a&gt;?&lt;/p&gt;


&lt;p&gt;(The first Free Software package of him is &lt;a href="http://point-at-infinity.org/ssss/"&gt;ssss&lt;/a&gt;, an implementation of &lt;a href="http://en.wikipedia.org/wiki/Secret_sharing"&gt;Shamir's secret sharing scheme&lt;/a&gt;)&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 20 Jul 2006 14:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-07-20:/blog/projects/seccure.html</guid><category>projects</category></item><item><title>GUADEC Sound BOF Slides</title><link>https://0pointer.net/blog/projects/pulse-slides.html</link><description>
                &lt;p&gt;Marc-Andre was so kind to upload the &lt;a href="http://etudiant.epita.fr/~lureau_m/GUADEC06-Audio-BOF/"&gt;improvised mini-slides&lt;/a&gt; we had prepared for GUADEC's sound BOF. Unfortunately there is no recording of the BOF, so this is all we can offer for those interested but who were not able to attend GUADEC.&lt;/p&gt;

&lt;p&gt;In related news: Thanks to &lt;tt&gt;jat&lt;/tt&gt; there is now a native &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; driver for &lt;a href="http://www.musicpd.org/"&gt;MPD&lt;/a&gt; (in SVN), and I updated the &lt;a href="http://0pointer.de/public/mplayer-pulse.patch"&gt;MPlayer patch&lt;/a&gt;, which adds a native PulseAudio driver to MPlayer.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 16 Jul 2006 13:53:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-07-16:/blog/projects/pulse-slides.html</guid><category>projects</category></item><item><title>PulseAudio Zeroconf support ported to Avahi</title><link>https://0pointer.net/blog/projects/pulse-howl-avahi.html</link><description>
                
&lt;p&gt;&lt;a href="http://farragut.flameeyes.is-a-geek.org/articles/2006/07/11/black-out"&gt;Diego&lt;/a&gt; and others who complained: PulseAudio in SVN now uses Avahi natively for ZeroConf. The old HOWL based code has been removed. &lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 14 Jul 2006 00:06:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-07-14:/blog/projects/pulse-howl-avahi.html</guid><category>projects</category></item><item><title>Re: PulseAudio and GNOME</title><link>https://0pointer.net/blog/projects/pulse-davidz-reply.html</link><description>
                
&lt;p&gt;&lt;a href="http://blog.fubar.dk/?p=71"&gt;davidz&lt;/a&gt;: Shams King is
currently working on HAL support in &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt;. He's planning to extend
our &lt;a href="http://pulseaudio.org/wiki/Modules#modulecombine"&gt;module-combine&lt;/a&gt;
to automatically combine all available hardware sound cards found with
HAL into a single virtual sound sink. That way, if the user plugs in
an USB loudspeaker set it will automatically output the same audio as
the internal speakers did before. I believe this is the behaviour most
non-technical users would expect from a well designed system.&lt;/p&gt;

&lt;p&gt;Right now PulseAudio sink names cannot be used to identify the
underlying hardware devices, since they are generic names like
&lt;tt&gt;alsa_output&lt;/tt&gt; or &lt;tt&gt;oss_output2&lt;/tt&gt;. However, it might be a
good idea to use the ALSA device name
(i.e. &lt;tt&gt;alsa_output_hw_0_0&lt;/tt&gt;) or even the HAL identifier if it is
available. If &lt;a href="http://bugzilla.gnome.org/attachment.cgi?id=58344&amp;amp;action=view"&gt;this
dialog&lt;/a&gt; uses the normal GStreamer &lt;tt&gt;PropertyProbe&lt;/tt&gt; API to
query the available devices (and does not use HAL directly), we should
be able to support this easily in &lt;a href="http://0pointer.de/lennart/projects/gst-pulse/"&gt;gst-pulse&lt;/a&gt;
(right now we support this interface in GstPulseMixer, but not yet in
GstPulseSink).&lt;/p&gt;

&lt;p&gt;Marc-Andre, I wonder how the differentiation between "Sound events", "Music and
Movies" and "Audio/Video Conferencing" touches the "role"/"class" model of &lt;a href="http://live.gnome.org/GSmartMix"&gt;GSmartMix&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Regarding power saving and PulseAudio: First of all, PulseAudio
right now is intended to be run per-session, just like &lt;tt&gt;esd&lt;/tt&gt;
was. However, there is some incomplete support for running it as
system-wide instance.&lt;/p&gt;

&lt;p&gt;I think instead of integrating PulseAudio with
&lt;tt&gt;gnome-power-manager&lt;/tt&gt; the way you described it is probably a better idea
to close the sound device when it is idle regardless if we are in
power saving mode or not, and hope that the driver authors fix their
stuff to not produce any click or pop sounds when the device is opened
or closed. To be honest, all driver/sound card combinations I have
access to work properly in this area.&lt;/p&gt;

&lt;p&gt;In ALSA you usually open devices in O_RDONLY or O_WRONLY mode (and not
in O_RDWR) anyway, so falling back to it is not really necessary.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 13 Jul 2006 21:54:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-07-13:/blog/projects/pulse-davidz-reply.html</guid><category>projects</category></item><item><title>Photos from GUADEC</title><link>https://0pointer.net/blog/photos/guadec2006.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/public/guadec-2006-pics/"&gt;The few images with GNOME people&lt;/a&gt; I made at GUADEC are now online, too.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 11 Jul 2006 20:38:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-07-11:/blog/photos/guadec2006.html</guid><category>photos</category></item><item><title>Photos from Vilanova/Barcelona</title><link>https://0pointer.net/blog/photos/barcelona.html</link><description>
                
&lt;p&gt;I finally found the time to sort my photos from Vilanova i la Geltr&amp;uacute; and Barcelona.&lt;/p&gt;

&lt;p&gt;My &lt;i&gt;Windows of Barcelona&lt;/i&gt; series:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/windows.html"&gt;&lt;img src="http://0pointer.de/static/windows-small.png" width="150" height="148" alt="Windows of Barcelona" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few other nice shots:&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=361"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-361.jpg" width="80" height="120" alt="Photo #361" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=371"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-371.jpg" width="80" height="120" alt="Photo #371" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=366"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-366.jpg" width="80" height="120" alt="Photo #366" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=381"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-381.jpg" width="80" height="120" alt="Photo #381" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=386"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-386.jpg" width="80" height="120" alt="Photo #386" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=222"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-222.jpg" width="80" height="120" alt="Photo #222" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=210"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-210.jpg" width="80" height="120" alt="Photo #210" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=125"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-125.jpg" width="80" height="120" alt="Photo #125" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=137"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-137.jpg" width="80" height="120" alt="Photo #137" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=5"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-5.jpg" width="80" height="120" alt="Photo #5" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=311"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-311.jpg" width="80" height="120" alt="Photo #311" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=301"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-301.jpg" width="80" height="120" alt="Photo #301" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=317"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-317.jpg" width="80" height="120" alt="Photo #317" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=281"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-281.jpg" width="80" height="120" alt="Photo #281" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=269"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-269.jpg" width="80" height="120" alt="Photo #269" /&gt;&lt;/a&gt;
&lt;br /&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=268"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-268.jpg" width="80" height="120" alt="Photo #268" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=89"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-89.jpg" width="80" height="120" alt="Photo #89" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=49"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-49.jpg" width="80" height="120" alt="Photo #49" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=35"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-35.jpg" width="80" height="120" alt="Photo #35" /&gt;&lt;/a&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Barcelona&amp;amp;photo=95"&gt;&lt;img src="http://0pointer.de/photos/galleries/Barcelona/thumbs/img-95.jpg" width="80" height="120" alt="Photo #95" /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;These are: &lt;br /&gt;
1st row: &lt;i&gt;Casa Mil&amp;agrave;&lt;/i&gt;; dito; dito; dito; dito;  &lt;br /&gt;
2nd row: &lt;i&gt;Palau de la M&amp;uacute;sica Catalana&lt;/i&gt;; dito; &lt;i&gt;Mies van der Rohe&lt;/i&gt; Pavilion; dito; Vilanova Lighthouse;  &lt;br /&gt;
3rd row: &lt;i&gt;Sagrada Fam&amp;iacute;lia&lt;/i&gt;; dito; dito; &lt;i&gt;Hospital de Sant Pau&lt;/i&gt;; dito;  &lt;br /&gt;
4th row: &lt;i&gt;Sagrada Fam&amp;iacute;lia&lt;/i&gt;, seen from &lt;i&gt;Sant Pau&lt;/i&gt;; City Center/&lt;i&gt;Barri G&amp;ograve;tic&lt;/i&gt;; dito; dito; &lt;i&gt;Pla&amp;ccedil;a Reial&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;A panoramic view of Barcelona photographed from the Montjuic towards the north:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/montjuic1.html"&gt;&lt;img src="http://0pointer.de/static/montjuic1-small.jpeg" width="1024" height="146" alt="Barcelona Panorama" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those "thunderclouds" on the right side of the image are actually a
result of not using the same exposure settings on all photos that are
part of the panorama. Which is a mistake I didn't repeat with my
second panoramic view, which again shows Barcelona from the Montjuic, but this time towards the east:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/static/montjuic2.html"&gt;&lt;img src="http://0pointer.de/static/montjuic2-small.jpeg" width="1024" height="146" alt="Barcelona Panorama 2" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dont miss the &lt;a href="http://0pointer.de/photos/?gallery=Barcelona"&gt;the entire album&lt;/a&gt;!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 11 Jul 2006 15:43:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-07-11:/blog/photos/barcelona.html</guid><category>photos</category></item><item><title>PulseAudio 0.9.2 released</title><link>https://0pointer.net/blog/projects/pulse-release.html</link><description>
                
&lt;p&gt;We're proud to announce the first release of &lt;a href="http://pulseaudio.org/"&gt;PulseAudio&lt;/a&gt; after the name change from
&lt;i&gt;Polypaudio&lt;/i&gt;. Besides a variety of &lt;tt&gt;sed -i -e s/polyp/pulse/g&lt;/tt&gt; changes it
mostly contains minor bugfixes. &lt;a href="http://0pointer.de/lennart/projects/pulseaudio/pulseaudio-0.9.2.tar.gz"&gt;Get
it while it is hot!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In related news PulseAudio now gained its own domain and a new Trac-based homepage: &lt;a href="http://pulseaudio.org/"&gt;&lt;tt&gt;http://pulseaudio.org/&lt;/tt&gt;&lt;/a&gt;. And thanks to Rafael Jannone and Pierre Ossman we now have a logo:&lt;/p&gt;

&lt;img src="http://pulseaudio.org/chrome/site/patitle.png" width="470" height="85" alt="PulseAudio Logo" /&gt;

&lt;p&gt;Together with PulseAudio 0.9.2 we released updated versions of all the &lt;a href="http://pulseaudio.org/wiki/AboutPulseAudio#RelatedSoftware"&gt;auxiliary GUI
tools&lt;/a&gt;. A new utility has been released as well, named &lt;a href="http://0pointer.de/lennart/projects/padevchooser/"&gt;&lt;i&gt;PulseAudio Device
Chooser&lt;/i&gt;&lt;/a&gt;. It installs a tray icon and allows the user to quickly change
the sound server attached to the local X11 display, showing a list of servers that
is accumulated using ZeroConf service browsing. In addition it allows you to
quickly start one of the other GUI tools and shows notification whenever a new
PulseAudio server/sink/source appears on the network. Everybody loves
screenshots:&lt;/p&gt;

&lt;img src="http://0pointer.de/lennart/projects/padevchooser/screenshot.png" width="865" height="498" alt="PulseAudio Device Chooser Screenshot" /&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 09 Jul 2006 12:39:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-07-09:/blog/projects/pulse-release.html</guid><category>projects</category></item><item><title>GUADEC Sound BOF, Part 2</title><link>https://0pointer.net/blog/projects/guadec-bof2.html</link><description>
                &lt;p&gt;There has been some confusion about the date of the Sound BOF, since the &lt;a href="http://live.gnome.org/GUADEC2006/AfterHoursWorkshops"&gt;BOF Wiki&lt;/a&gt; said a different date than my blog &lt;a href="http://0pointer.de/blog/projects/guadec-bof.html"&gt;story of yesterday&lt;/a&gt;. To make this clear: the BOF will happen on friday, 4 p.m.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 28 Jun 2006 17:07:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-06-28:/blog/projects/guadec-bof2.html</guid><category>projects</category></item><item><title>GUADEC Sound BOF on Friday</title><link>https://0pointer.net/blog/projects/guadec-bof.html</link><description>
                
&lt;p&gt;There will be a Linux/Gnome &lt;a href="http://live.gnome.org/GUADEC2006/AfterHoursWorkshops"&gt;Sound BOF &lt;/a&gt; on Friday, 4:00 p.m. I will be there,
promoting PulseAudio, as will be Marc-Andre of GSmartMix frame. Everyone
interested in the future of audio in Gnome is welcome to join us!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 28 Jun 2006 03:48:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-06-28:/blog/projects/guadec-bof.html</guid><category>projects</category></item><item><title>Attending GUADEC</title><link>https://0pointer.net/blog/projects/guadec-2006.html</link><description>
                
&lt;p&gt;Due to the generosity of the GNOME Foundation I have been able to get to the GUADEC 2006 this year. I'd like to thank Jeff Waugh and Quim Gil for the "last-minute" funding of my trip to Vilanova, and all the sponsors who actually are providing the funds. If anyone wants to talk to me about &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; and/or &lt;a href="http://0pointer.de/lennart/projects/polypaudio/"&gt;PulseAudio (aka Polypaudio)&lt;/a&gt; (or any of my &lt;a href="http://0pointer.de/lennart"&gt;other projects&lt;/a&gt;), just try to find and speak to me. (Bungalow 870)&lt;/p&gt;

&lt;p&gt;In related news, the &lt;a href="http://pulseaudio.org/"&gt;new PulseAudio homepage&lt;/a&gt; will be "inaugurated" soon, becoming the official new home of PulseAudio/Polypaudio as soon as we release 0.9.2, which hopefully will be pretty soon.&lt;/p&gt;



        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 24 Jun 2006 17:33:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-06-24:/blog/projects/guadec-2006.html</guid><category>projects</category></item><item><title>TPFKAPA: The Project Formerly Known as Polypaudio</title><link>https://0pointer.net/blog/projects/pulse.html</link><description>
                
&lt;p&gt;It came to our attention that some people really disliked the name of &lt;a href="http://0pointer.de/lennart/projects/polypaudio/"&gt;Polypaudio&lt;/a&gt;, because
it reminded them of that &lt;a href="http://en.wikipedia.org/wiki/Polyp_%28medicine%29"&gt;medical condition&lt;/a&gt;,
though the software was actually named after the &lt;a href="http://en.wikipedia.org/wiki/Polyp"&gt;sea dweller&lt;/a&gt;. I actually
liked that double entendre, but many did not and expressed concerns that the name
would hinder Polypaudio's adoption. After a long discussion on
&lt;tt&gt;#polypaudio&lt;/tt&gt; we came to the conclusion that a name change is a good
idea in this case. Name changes are usually a bad idea, but this time it's
worth it, we think.&lt;/p&gt;

&lt;p&gt;The new name we agreed on is &lt;i&gt;PulseAudio&lt;/i&gt;, or shorter just &lt;i&gt;Pulse&lt;/i&gt;. It has
the nice advantage that it abbreviates to &lt;i&gt;pa&lt;/i&gt;, just as &lt;i&gt;Polypaudio&lt;/i&gt; did. This
allows us to keep source code compatiblity (and binary compatibility to a
certain degree) with the current releases of Polypaudio, because the symbol
prefix can stay &lt;tt&gt;pa_&lt;/tt&gt;. In addition the auxiliary tools &lt;a href="http://0pointer.de/lennart/projects/paman/"&gt;paman&lt;/a&gt;, &lt;a href="http://0pointer.de/lennart/projects/pavucontrol/"&gt;pavucontrol&lt;/a&gt;, &lt;a href="http://0pointer.de/lennart/projects/pavumeter/"&gt;pavumeter&lt;/a&gt; need not to
be renamed.&lt;/p&gt;

&lt;p&gt;We will try to make the transition as smooth as possible and would like to
apologize to all the packagers, who need to rename their packages now.&lt;/p&gt;

&lt;p&gt;The next release of Polypaudio (0.9.2) will be a bugfix release and be the first to bear the new name: &lt;i&gt;PulseAudio 0.9.2&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Polypaudio is dead. Long live PulseAudio!&lt;/i&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 16 Jun 2006 18:22:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-06-16:/blog/projects/pulse.html</guid><category>projects</category></item><item><title>Polypaudio article on LWN</title><link>https://0pointer.net/blog/projects/polypaudio-lwn.html</link><description>
                
&lt;p&gt;The &lt;a href="http://lwn.net/Articles/185613/"&gt;current issue of the Linux
Weekly News&lt;/a&gt; features a short article about &lt;a href="http://0pointer.de/lennart/projects/polypaudio/"&gt;Polypaudio&lt;/a&gt;. (The article is not (yet)
accessible for free, come back in a week if you aren't an LWN subscriber.)&lt;/p&gt;

&lt;p&gt;Quoting:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;With its support for a wide variety of popular audio utilities, actively developed code, and broad capabilities, the Polypaudio project fills an important role in Linux-based audio development.&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 01 Jun 2006 17:44:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-06-01:/blog/projects/polypaudio-lwn.html</guid><category>projects</category></item><item><title>Hamburg Dockland II</title><link>https://0pointer.net/blog/photos/dockland2.html</link><description>
                &lt;p&gt;Another view of the "Dockland" in Hamburg-Altona:&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Hamburg%20Dockland&amp;amp;photo=9&amp;amp;exif_style=&amp;amp;show_thumbs="&gt;&lt;img src="http://0pointer.de/photos/galleries/Hamburg%20Dockland/lq/img-9.jpg" width="320" height="480" alt="Hamburg Dockland II" /&gt;&lt;/a&gt;
&lt;/div&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 29 May 2006 22:26:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-05-29:/blog/photos/dockland2.html</guid><category>photos</category></item><item><title>Looking for a Logo</title><link>https://0pointer.net/blog/projects/polypaudio-logo.html</link><description>
                
&lt;p&gt;&lt;a href="http://0pointer.de/lennart/projects/polypaudio/"&gt;Polypaudio&lt;/a&gt;
needs a logo! If you have some time to spare and graphic talent please send us
your suggestions! Perhaps something in a nice &lt;a href="http://tango-project.org/"&gt;Tango&lt;/a&gt; design? See &lt;a href="http://en.wikipedia.org/wiki/Polyp"&gt;Wikipedia&lt;/a&gt; to for an explanation
what a &lt;i&gt;polyp&lt;/i&gt; is.&lt;/p&gt;

&lt;p&gt;Please send your suggestions to &lt;tt&gt;lennart (at) poettering (dot) net&lt;/tt&gt; or join &lt;tt&gt;#polypaudio&lt;/tt&gt; on freenode.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 29 May 2006 15:46:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-05-29:/blog/projects/polypaudio-logo.html</guid><category>projects</category></item><item><title>Anyone Interested in Packaging Polypaudio 0.9.0 for Debian?</title><link>https://0pointer.net/blog/projects/polypaudio-rfp.html</link><description>
                
&lt;p&gt;I opened an &lt;a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=369089"&gt;RFP for Polypaudio 0.9.0&lt;/a&gt; in the Debian BTS. Anyone interested?&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Update: We have found a volunteer in Franz Pletz.&lt;/i&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 28 May 2006 19:29:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-05-28:/blog/projects/polypaudio-rfp.html</guid><category>projects</category></item><item><title>Polypaudio 0.9.0 released</title><link>https://0pointer.net/blog/projects/polypaudio-0.9.0.html</link><description>
                
&lt;p&gt;We are proud to announce &lt;a href="http://0pointer.de/lennart/projects/polypaudio/"&gt;Polypaudio
0.9.0&lt;/a&gt;. This is a major step ahead since we decided to freeze the
current API. From now on we will maintain API compability (or at least
try to). To emphasize this starting with this release the shared
library sonames are properly versioned. While Polypaudio 0.9.0 is not
API/ABI compatible with 0.8 it is protocol compatible.&lt;/p&gt;

&lt;p&gt;Other notable changes beyond bug fixing, bug fixing and bug fixing
are: a new Open Sound System &lt;tt&gt;/dev/dsp&lt;/tt&gt; wrapper named
&lt;tt&gt;padsp&lt;/tt&gt; and a module &lt;tt&gt;module-volume-restore&lt;/tt&gt; have been
added.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;padsp&lt;/tt&gt; works more or less like that ESOUND tool known as
&lt;tt&gt;esddsp&lt;/tt&gt;. However, it is much cleaner in design and thus works
with many more applications than the original tool. Proper locking is
implemented which allows it to work in multithreaded applications. In
addition to mere &lt;tt&gt;/dev/dsp&lt;/tt&gt; emulation it wraps
&lt;tt&gt;/dev/sndstat&lt;/tt&gt; and &lt;tt&gt;/dev/mixer&lt;/tt&gt;. Proper synchronization
primitives are also available, which enables lip-sync movie playback
using &lt;tt&gt;padsp&lt;/tt&gt; on &lt;tt&gt;mplayer&lt;/tt&gt;. Other applications that are
known to work properly with &lt;tt&gt;padsp&lt;/tt&gt; are &lt;tt&gt;aumix&lt;/tt&gt;,
&lt;tt&gt;libao&lt;/tt&gt;, &lt;tt&gt;XMMS&lt;/tt&gt;, &lt;tt&gt;sox&lt;/tt&gt;. There are some things
&lt;tt&gt;padsp&lt;/tt&gt; doesn't support (yet): that's most notably recording,
and &lt;tt&gt;mmap()&lt;/tt&gt; wrapping. Recording will be added in a later
version. &lt;tt&gt;mmap()&lt;/tt&gt; support is available in &lt;tt&gt;esddsp&lt;/tt&gt; but
not in &lt;tt&gt;padsp&lt;/tt&gt;. I am reluctant to add support for this, because
it cannot work properly when it comes to playback latency
handling. However, latency handling this the primary reasoning for
using &lt;tt&gt;mmap()&lt;/tt&gt;.  In addition the hack that is included in
&lt;tt&gt;esddsp&lt;/tt&gt; works only for Quake2 and Quake3, both being Free
Software now. It probably makes more sense to fix those two games than
implementing a really dirty hack in &lt;tt&gt;padsp&lt;/tt&gt;. Remember that you
can always use the original &lt;tt&gt;esddsp&lt;/tt&gt; tools since Polypaudio
offers full protocol compatibility with ESOUND.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;module-volume-restore&lt;/tt&gt; is a small module that stores the
volume of all playback streams and restores them when the applications
which created them creates a new stream. If this module is loaded,
Polypaudio will make sure that you Gaim sounds are always played at
low volume, while your XMMS music is always played at full volume.&lt;/p&gt;

&lt;p&gt;Besides the new release of Polypaudio itself we released a bunch of
other packages to work with the new release:&lt;/p&gt;

&lt;ul&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/lennart/projects/gst-polyp/"&gt;&lt;tt&gt;gst-polyp&lt;/tt&gt;
0.9.0&lt;/a&gt;, a Polypaudio plugin for &lt;a href="http://gstreamer.freedesktop.org/"&gt;GStreamer 0.10&lt;/a&gt;. The
plugin is quite sophisticated. In fact it is probably the only
sink/source plugin for GStreamer that reaches the functionality of the
ALSA plugin that is shipped with upstream. It implements the
&lt;tt&gt;GstPropertyProbe&lt;/tt&gt; and &lt;tt&gt;GstImplementsInterface&lt;/tt&gt;
interfaces, which allow &lt;tt&gt;gnome-volume-meter&lt;/tt&gt; and other
GStreamer tools to control the volume of a Polypaudio server. The sink
element listens for &lt;tt&gt;GST_EVENT_TAG&lt;/tt&gt; events, and can thus use
ID3 tags and other meta data to name the playback stream in the
Polypaudio server. This is useful to identify the stream in the &lt;a href="http://0pointer.de/lennart/projects/pavucontrol/"&gt;Polypaudio
Volume Control&lt;/a&gt;. In short: Polypaudio 0.9.0 now offers first class
integration into GStreamer.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/lennart/projects/libao-polyp/"&gt;&lt;tt&gt;libao-polyp&lt;/tt&gt;
0.9.0&lt;/a&gt;, a simple plugin for &lt;a href="http://www.xiph.org/ao/"&gt;&lt;tt&gt;libao&lt;/tt&gt;&lt;/a&gt;, which is used for audio playback by tools like &lt;tt&gt;ogg123&lt;/tt&gt; and Gaim, besides others.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/lennart/projects/xmms-polyp/"&gt;&lt;tt&gt;xmms-polyp&lt;/tt&gt;
0.9.0&lt;/a&gt;, an output plugin for XMMS. As special feature it uses the
currently played song name for naming the audio stream in
Polypaudio.&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/lennart/projects/paman/"&gt;Polypaudio Manager 0.9.0&lt;/a&gt;, updated for Polypaudio 0.9.0&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/lennart/projects/pavucontrol/"&gt;Polypaudio Volume Control 0.9.0&lt;/a&gt;, updated for Polypaudio 0.9.0&lt;/li&gt;

&lt;li&gt;&lt;a href="http://0pointer.de/lennart/projects/pavumeter/"&gt;Polypaudio Volume Meter 0.9.0&lt;/a&gt;, updated for Polypaudio 0.9.0&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;A screenshot showing most of this in action:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/polypaudio.png"&gt;&lt;img src="http://0pointer.de/public/polypaudio-small.png" width="640" height="256" alt="Polypaudio Screenshot" /&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;This screenshot shows: the Polypaudio Manager, the Polypaudio
Volume Control, the Polypaudio Volume Meter, the XMMS plugin, the
GStreamer plugin used by Rhythmbox and &lt;tt&gt;gstreamer-properties&lt;/tt&gt;,
&lt;tt&gt;pacat&lt;/tt&gt; playing some noise from &lt;tt&gt;/dev/urandom&lt;/tt&gt;,
&lt;tt&gt;padsp&lt;/tt&gt; used on MPlayer. (This screenshot actually shows some
post-0.9.0 work, like the icons used by the application windows)
&lt;/i&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 28 May 2006 18:21:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-05-28:/blog/projects/polypaudio-0.9.0.html</guid><category>projects</category></item><item><title>A big bear hugged one and then there were two</title><link>https://0pointer.net/blog/projects/howl.html</link><description>
                
&lt;p&gt;Scott Herscher decided to &lt;a href="http://www.porchdogsoft.com/products/howl/"&gt;cease development of HOWL&lt;/a&gt;.
That means only &lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; and &lt;a href="http://www.apple.com/macosx/features/bonjour/"&gt;Bonjour&lt;/a&gt; are left as
widely known mDNS/DNS-SD implementations.&lt;/p&gt;

&lt;p&gt;Scott, your work on HOWL has not been in vain. Many Linux/Free Software
people (including me) learned to know &lt;a href="http://www.zeroconf.org/"&gt;Zeroconf&lt;/a&gt; with your software. Without the
troubles surrounding the licensing, I would never have started what is now
known as Avahi, and HOWL would still be the number one of the Linux mDNS/DNS-SD
implementations.&lt;/p&gt;

&lt;p&gt;The HOWL legacy will live on, since Avahi includes a HOWL compatibility layer which will be kept around for a while.&lt;/p&gt;

&lt;p&gt; A year and a few weeks ago Trent and I decided to merge our efforts and
form Avahi from our seperate works. I wonder how much time it will take us
until we see a similar R.I.P. note from the Bonjour camp, on our route to
&lt;b&gt;AVAHI WORLD DOMINATION&lt;/b&gt;. &lt;tt&gt;;-)&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;In contrast to what Scott wrote in his announcement, Avahi is far from being
strictly Linux. Avahi has been ported to FreeBSD, OpenBSD, MacOSX and recently
(not yet official) Solaris. (However, he's right with what he writes
about me.)&lt;/p&gt;



        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 26 May 2006 03:17:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-05-26:/blog/projects/howl.html</guid><category>projects</category></item><item><title>Hamburg Dockland</title><link>https://0pointer.net/blog/photos/dockland.html</link><description>
                &lt;p&gt;The "Dockland" in Hamburg-Altona:&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Hamburg%20Dockland&amp;amp;photo=13&amp;amp;exif_style=&amp;amp;show_thumbs="&gt;&lt;img src="http://0pointer.de/photos/galleries/Hamburg%20Dockland/lq/img-13.jpg" width="320" height="480" alt="Hamburg Dockland" /&gt;&lt;/a&gt;
&lt;/div&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 23 May 2006 20:17:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-05-23:/blog/photos/dockland.html</guid><category>photos</category></item><item><title>Introducing the Polypaudio Volume Control</title><link>https://0pointer.net/blog/projects/pavucontrol.html</link><description>
                &lt;p&gt;The result of a few hours of hacking:&lt;/p&gt;

&lt;img src="http://0pointer.de/lennart/projects/pavucontrol//screenshot.png" width="508" height="523" alt="pavucontrol screenshot" /&gt;

&lt;p&gt;&lt;tt&gt;pavucontrol&lt;/tt&gt; cannot only control the volume of hardware devices of the &lt;a href="http://0pointer.de/lennart/projects/polypaudio/"&gt;Polypaudio sound server&lt;/a&gt; but also of all playback streams seperately, much like the new Windows Vista volume control application.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/lennart/projects/pavucontrol/"&gt;Get the Polypaudio Volume Control while it is hot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On a side note I released updated versions of both the &lt;a href="http://0pointer.de/lennart/projects/pavumeter/"&gt;Polypaudio Volume Meter&lt;/a&gt; and the &lt;a href="http://0pointer.de/lennart/projects/paman/"&gt;Polypaudio Manager&lt;/a&gt; which are compatible with Polypaudio 0.8.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 21 Apr 2006 23:20:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-04-21:/blog/projects/pavucontrol.html</guid><category>projects</category></item><item><title>Polypaudio 0.8 Released</title><link>https://0pointer.net/blog/projects/polypaudio-0.8.html</link><description>
                
&lt;p style="margin-left: 1cm"&gt;&lt;i&gt;The &lt;a href="http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=339589"&gt;reports of Polypaudio's death&lt;/a&gt; are greatly exaggerated.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;We are proud to announce the release of &lt;a href="http://0pointer.de/lennart/projects/polypaudio/"&gt;Polypaudio&lt;/a&gt;
0.8, our networked sound daemon for Linux, other Unix-like operating
systems, and Microsoft Windows. Since the last official release, 0.7,
more than a year has passed. In the meantime Polypaudio experienced
major improvements. Major contributions have been made by both Pierre
Ossman and me. Pierre is being payed by &lt;a href="http://www.cendio.com/"&gt;Cendio AB&lt;/a&gt; to work on
Polypaudio. Cendio distributes Polypaudio along with their &lt;a href="http://www.cendio.com/products/thinlinc"&gt;ThinLinc Terminal
Server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some of the major changes: &lt;/p&gt;

&lt;ul&gt; &lt;li&gt;New playback buffer model that allows applications to freely seek in
the server side playback buffer (both with relative and absolute indexes) and to synchronize
multiple streams together, in a way that the playback times are guaranteed to
stay synchronized even in the case of a buffer underrun. (Lennart)&lt;/li&gt;

&lt;li&gt;Ported to &lt;i&gt;Microsoft Windows&lt;/i&gt; and &lt;i&gt;Sun Solaris&lt;/i&gt; (Pierre)&lt;/li&gt;

&lt;li&gt;Many inner loops (like sample type conversions) have been ported
to &lt;a href="http://liboil.freedesktop.org/wiki/"&gt;liboil&lt;/a&gt;, which
enables us to take advantage of modern SIMD instruction sets, like MMX or SSE/SSE2. (Lennart)&lt;/li&gt;

&lt;li&gt;Support for channel maps which allow applications to assign
specific speaker positions to logical channels. This enables support
for "surround sound". In addition we now support seperate volumes for
all channels. (Lennart)&lt;/li&gt;

&lt;li&gt;Support for hardware volume control for drivers that support
it. (Lennart, Pierre)&lt;/li&gt;

&lt;li&gt;Local users may now be authenticated just by the membership in a
UNIX group, without the need to exchange authentication cookies. (Lennart)&lt;/li&gt;

&lt;li&gt;A new driver module &lt;tt&gt;module-detect&lt;/tt&gt; which detects
automatically what local output devices are available and loads the
needed drivers. Supports ALSA, OSS, Solaris and Win32 devices. (Lennart, Pierre)&lt;/li&gt;

&lt;li&gt;Two new modules implementing &lt;a href="http://en.wikipedia.org/wiki/Real-time_Transport_Protocol"&gt;RTP&lt;/a&gt;/&lt;a href="http://en.wikipedia.org/wiki/Session_Description_Protocol"&gt;SDP&lt;/a&gt;/&lt;a href="http://en.wikipedia.org/wiki/Session_Announcement_Protocol"&gt;SAP&lt;/a&gt; based multicast audio
streaming. Useful for streaming music to multiple PCs with speakers
simultaneously. Or for implementing a simple "always-on" conferencing
solution for the LAN. Or for sharing a single MIC/LINE-IN jack on the
LAN. (Lennart)&lt;/li&gt;

&lt;li&gt;Two new modules for connecting Polypaudio to a &lt;a href="http://jackit.sourceforge.net/"&gt;JACK&lt;/a&gt; audio server
(Lennart)&lt;/li&gt;

&lt;li&gt;A new Zeroconf (mDNS/DNS-SD) publisher module. (Lennart)&lt;/li&gt;

&lt;li&gt;A new module to control the volume of an output sink with a &lt;a href="http://www.lirc.org/"&gt;LIRC&lt;/a&gt; supported infrared remote
control, and another one for doing so with a multimeda keyboard. (Lennart)&lt;/li&gt;

&lt;li&gt;Support for resolving remote host names asynchronously using &lt;a href="http://0pointer.de/lennart/projects/libasyncns/"&gt;libasyncns&lt;/a&gt;. (Lennart)&lt;/li&gt;

&lt;li&gt;A simple proof-of-concept HTTP module, which dumps the current daemon status to HTML. (Lennart)&lt;/li&gt;

&lt;li&gt;Add proper validity checking of passed parameter to every single
API functions. (Lennart)&lt;/li&gt;

&lt;li&gt;Last but not least, the documentation has been beefed up a lot and
is no longer just a simple doxygen-based API documentation (Pierre, Lennart)&lt;/li&gt;

&lt;/ul&gt;

&lt;p&gt;Sounds good, doesn't it? But that's not all!&lt;/p&gt;

&lt;p&gt;We're really excited about this new Polypaudio release. However,
there are more very exciting, good news in the Polypaudio world. Pierre
implemented a Polypaudio plugin for &lt;tt&gt;alsa-libs&lt;/tt&gt;. This means you
may now use any ALSA-aware application to access a Polypaudio sound
server! The patch has already merged upstream, and will probably
appear in the next official release of &lt;tt&gt;alsa-plugins&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Due to the massive internal changes we had to make a lot of modifications to
the public API. Hence applications which currently make use of the Polypaudio
0.7 API need to be updated. The patches or packages I maintain will be updated
in the next weeks one-by-one. (That is: xmms-polyp, the MPlayer patch, the
libao patch, the GStreamer patch and the PortAudio patch)&lt;/p&gt;

&lt;p&gt;A side note: I wonder what this new release means for Polypaudio in
Debian. I've never been informed by the Debian maintainers of
Polypaudio that it has been uploaded to Debian, and never of the
removal either. In fact I never exchanged a single line with those who
were the Debian maintainers of Polypaudio. Is this the intended way
how the Debian project wants its developers to communicate with
upstream? I doubt that!&lt;/p&gt;

&lt;h4&gt;How does Polypaudio compare to &lt;a href="http://www.tux.org/~ricdude/EsounD.html"&gt;ESOUND&lt;/a&gt;?&lt;/h4&gt;

&lt;p&gt;Polypaudio does everything what ESOUND does, and much more. It is a
fully compatible drop-in replacement. With a small script you can make
it command line compatible (including autospawning). ESOUND clients
may connect to our daemon just like they did to the original ESOUND
daemon, since we implemented a compatibility module for the ESOUND
protocol. &lt;/p&gt;

&lt;p&gt;Support for other well known networked audio protocols (such as
NAS) should be easy to add - if there is a need.&lt;/p&gt;

&lt;p&gt;For a full list of the features that Polypaudio has over ESOUND,
see &lt;a href="http://0pointer.de/lennart/projects/polypaudio/"&gt;Polypaudio's
homepage&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;How does Polypaudio compare to &lt;a href="http://www.alsa-project.org/"&gt;ALSA&lt;/a&gt;'s dmix?&lt;/h4&gt;

&lt;p&gt;Some people might ask whether there still is a need for a sound
server in times where ALSA's &lt;tt&gt;dmix&lt;/tt&gt; plugin is available. The
answer is: yes!&lt;/p&gt;

&lt;p&gt;Firstly, Polypaudio is networked, which &lt;tt&gt;dmix&lt;/tt&gt; is
not. However, there are many reasons why Polypaudio is useful on
non-networked systems as well. Polypaudio is portable, it is available
not just for Linux but for FreeBSD, Solaris and even Microsoft
Windows. Polypaudio is extensible, there is broad range of &lt;a href="http://0pointer.de/lennart/projects/polypaudio/modules.html"&gt;additional
modules&lt;/a&gt; available which allow the user to use Polypaudio in many
exciting ways ALSA doesn't offer. In Polypaudio streams, devices and
other server internals can be monitored and introspected freely. The
volume of the multiple streams may be manipulated independently of
each other, which allows new exciting applications like a work-alike
of the new per-application mixer tool featured in upcoming Windows
Vista. In multi-user systems, Polypaudio offers a secure and safe way
to allow multiple users to access the sound device
simultaneously. Polypaudio may be accessed through the ESOUND and the
ALSA APIs. In addition, ALSA dmix is still not supported properly by
many ALSA clients, and is difficult to setup.&lt;/p&gt;

&lt;p&gt;A side node: &lt;tt&gt;dmix&lt;/tt&gt; forks off its own simple sound daemon
anyway, hence there is no big difference to using Polypaudio with the
ALSA plugin in auto-spawning mode. (Though admittedly, those ALSA
clients that don't work properly with dmix, won't do so with our ALSA
plugin as well since they actually use the ALSA API incorrectly.)&lt;/p&gt;

&lt;h4&gt;How does Polypaudio compare to &lt;a href="http://jackit.sourceforge.net/"&gt;JACK&lt;/a&gt;?&lt;/h4&gt;

&lt;p&gt;Everytime people discuss sound servers on Unix/Linux and which way
is the right to go for desktops, JACK gets mentioned and suggested by some as a
replacement for ESOUND for the desktop. However, this is not
practical. JACK is not intended to be a desktop sound server, instead
it is designed for professional audio in mind. Its semantics are
different from other sound servers: e.g. it uses exclusively floating
point samples, doesn't deal directly with interleaved channels and
maintains a server global time-line which may be stopped and seeked
around. All that translates badly to desktop usages. JACK is really
nice software, but just not designed for the normal desktop user,
who's not working on professional audio production. &lt;/p&gt;

&lt;p&gt;Since we think that JACK is really a nice piece of work, we added
two new modules to Polypaudio which can be used to hook it up to a
JACK server.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/lennart/projects/polypaudio/"&gt;Get Polypaudio 0.8, while it is hot!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BTW: We're looking for a logo for Polypaudio. Feel free to send us your suggestions!&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Update: The Debian rant is unjust to Jeff Waugh. In fact, he had informed me that he prepared Debian packages of Polypaudio. I just never realized that he had actually uploaded them to Debian. What still stands, however, is that I've not been informed or asked about the removal.&lt;/i&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 13 Apr 2006 21:45:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-04-13:/blog/projects/polypaudio-0.8.html</guid><category>projects</category></item><item><title>Panoramic View of St.-Pauli-Langungsbruecken, Hamburg, Germany</title><link>https://0pointer.net/blog/photos/stintfang.html</link><description>
                &lt;p&gt;The result of stitching six photos together with &lt;a href="http://hugin.sourceforge.net/"&gt;Hugin&lt;/a&gt;, &lt;tt&gt;autopano-sift&lt;/tt&gt;, and &lt;tt&gt;enblend&lt;/tt&gt;:&lt;/p&gt;

&lt;a href="http://0pointer.de/static/landungsbruecken.html"&gt;&lt;img alt="Picture of St.-Pauli-Landungsbr√ºcken" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/qm-1000.jpeg" width="1000" height="242" /&gt;&lt;/a&gt;

&lt;p&gt;The &lt;i&gt;St.-Pauli-Landungsbr&amp;uuml;cken&lt;/i&gt; with the &lt;i&gt;Queen Mary 2&lt;/i&gt; in the drydock, Hamburg, Germany in November 2005. Photographed from the &lt;i&gt;Stintfang&lt;/i&gt;. The full image has a size of 9256x2240.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 04 Apr 2006 16:43:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-04-04:/blog/photos/stintfang.html</guid><category>photos</category></item><item><title>Panoramic View of Les Deux Alpes</title><link>https://0pointer.net/blog/photos/2alpes.html</link><description>
                &lt;p&gt;The result of stitching 16 photos together with &lt;a href="http://hugin.sourceforge.net/"&gt;Hugin&lt;/a&gt;, &lt;tt&gt;autopano-sift&lt;/tt&gt;, and &lt;tt&gt;enblend&lt;/tt&gt;:&lt;/p&gt;

&lt;a href="http://0pointer.de/static/2alpes.html"&gt;&lt;img alt="Picture of Les Deux Alpes" style="border: 10px solid #232729; background-color: #6b6c6; padding: 1px; -moz-border-radius: 7px; margin: 0.5cm" src="http://0pointer.de/static/2alpes-small.jpeg" width="1024" height="116" /&gt;&lt;/a&gt;

&lt;p&gt;The &lt;i&gt;Massif du Soreiller&lt;/i&gt; with the &lt;i&gt;Aiguille du Plat de la Selle&lt;/i&gt; near &lt;i&gt;Les Deux Alpes&lt;/i&gt;, France. Photographed from the &lt;i&gt;D&amp;ocirc;me de Puy Sali&amp;eacute;&lt;/i&gt;. The full image has a size of 14443x2156. &lt;a href="http://0pointer.de/photos/?gallery=Les%20Deux%20Alpes"&gt;More pictures from Les Deux Alpes&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 02 Apr 2006 00:48:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-04-02:/blog/photos/2alpes.html</guid><category>photos</category></item><item><title>LCD Brightness Control on MSI S270 Laptops</title><link>https://0pointer.net/blog/projects/s270ctrl.html</link><description>
                &lt;p&gt;In response to &lt;a href="http://mjg59.livejournal.com/57875.html"&gt;mjg59&lt;/a&gt;'s rant about
controlling the LCD brightness on laptops, I invested some time to
reverse engineer the Windows driver of my &lt;a href="http://0pointer.de/lennart/tchibo.html"&gt;MSI S270&lt;/a&gt; laptop
which implements changing LCD brightness. It requires some ugly
fiddling with registers of the "embedded controller" on ports 0x62 and
0x66. The result of my work is &lt;a href="http://0pointer.de/lennart/projects/s270ctrl/"&gt;s270ctrl&lt;/a&gt;, a
small userspace utility. I'm planning to turn this into a proper
kernel module soon.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 13 Feb 2006 22:25:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-02-13:/blog/projects/s270ctrl.html</guid><category>projects</category></item><item><title>Avahi Articles in German "Linux Magazin"</title><link>https://0pointer.net/blog/projects/avahi-linuxmag.html</link><description>
                &lt;p&gt;If you have access to the current issue (03/06) of the german
&lt;a href="http://www.linux-magazin.de/"&gt;Linux Magazin&lt;/a&gt; make sure to read the two extensive articles about
&lt;a href="http://avahi.org/"&gt;Avahi&lt;/a&gt; (p.64 and p.90). Daniel S. Haischt wrote the second article, I
wrote the other. Both are a worthy read!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 13 Feb 2006 22:22:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-02-13:/blog/projects/avahi-linuxmag.html</guid><category>projects</category></item><item><title>Debian Packages of mod_dnssd and mod_mime_xattr</title><link>https://0pointer.net/blog/projects/mod-dnssd-debian.html</link><description>
                &lt;p&gt;Due to the great work of Sebastien Estienne there are now Debian
packages of &lt;a href="http://0pointer.de/lennart/projects/mod_dnssd/"&gt;&lt;tt&gt;mod_dnssd&lt;/tt&gt;&lt;/a&gt;
and &lt;a href="http://0pointer.de/lennart/projects/mod_mime_xattr/"&gt;&lt;tt&gt;mod_mime_xattr&lt;/tt&gt;&lt;/a&gt;
available from my little &lt;a href="http://0pointer.de/debian/"&gt;Debian
package repository&lt;/a&gt;. They've been uploaded to Ubuntu as well, but
we are still looking for some Debian developer who would be willing to
upload them to Debian proper. Feel free to contact me if you are interested!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 12 Feb 2006 01:31:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-02-12:/blog/projects/mod-dnssd-debian.html</guid><category>projects</category></item><item><title>Pack Ice on the Elbe River</title><link>https://0pointer.net/blog/photos/pack-ice.html</link><description>
                &lt;p&gt;It has been pretty cold in Hamburg the last days. There's now a thick but holey ice cover on the Elbe river:&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Hamburg%20Ice%20Floes%202&amp;amp;photo=24"&gt;&lt;img src="http://0pointer.de/photos/galleries/Hamburg%20Ice%20Floes%202/lq/img-24.jpg" width="640" height="427" alt="River Elbe" /&gt;&lt;/a&gt;
&lt;/div&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 30 Jan 2006 02:47:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-01-30:/blog/photos/pack-ice.html</guid><category>photos</category></item><item><title>Adding Extended Attribute Support to Apache 2.0</title><link>https://0pointer.net/blog/projects/mod-mime-xattr.html</link><description>
                &lt;p&gt;I updated my little Apache module &lt;a href="http://0pointer.de/lennart/projects/mod_mime_xattr/"&gt;&lt;tt&gt;mod_mime_xattr&lt;/tt&gt;&lt;/a&gt; to be compatible with Apache 2.0.&lt;/p&gt;

&lt;p&gt;What is it useful for? Linux (2.4 with patch, 2.6 out-of-the-box) has been supporting &lt;a href="http://acl.bestbits.at/"&gt;extended attributes for files (EAs)&lt;/a&gt; for ages, but very few applications use them. To change that I wrote a small module for Apache which interpretes the EA &lt;tt&gt;user.mime_type&lt;/tt&gt; and uses its value as MIME type for all files served by Apache. The EA has been standardized by the &lt;a href="http://www.freedesktop.org/Standards/shared-mime-info-spec"&gt;XDG MIME system&lt;/a&gt;, but apparently neither Gnome nor KDE support it right now. &lt;/p&gt;

&lt;p&gt;Usage of &lt;tt&gt;mod_mime_xattr&lt;/tt&gt; is simple. To enable interpretation of the EA on the entire tree use something like this in your Apache configuration file:&lt;/p&gt;

&lt;pre&gt;&amp;lt;Directory /&amp;gt;
XAttrMimeType On
&amp;lt;/Directory&amp;gt;
&lt;/pre&gt;

&lt;p&gt;That's all that is required to make use of &lt;tt&gt;user.mime_type&lt;/tt&gt; on all files where it is set. To set the EA use a command like this one:&lt;/p&gt;

&lt;pre&gt;setfattr -n "user.mime_type" -v "text/html" foo.txt&lt;/pre&gt;

&lt;p&gt;And &lt;tt&gt;foo.txt&lt;/tt&gt; will become a file with the MIME type of &lt;tt&gt;text/html&lt;/tt&gt;, although its suffix is &lt;tt&gt;.txt&lt;/tt&gt;!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 23 Jan 2006 17:24:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-01-23:/blog/projects/mod-mime-xattr.html</guid><category>projects</category></item><item><title>Avahi Support for Apache</title><link>https://0pointer.net/blog/projects/mod_dnssd.html</link><description>
                
&lt;p&gt;The first release of &lt;a href="http://0pointer.de/lennart/projects/mod_dnssd/"&gt;&lt;tt&gt;mod_dnssd&lt;/tt&gt;&lt;/a&gt; is now available. It adds DNS-SD based Zeroconf support to Apache 2.0 using &lt;a href="http://avahi.org"&gt;Avahi&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This work has been inspired by Sander Temme's and Sebastien Estienne's &lt;a href="http://www.temme.net/sander/mod_zeroconf/"&gt;&lt;tt&gt;mod_zeroconf&lt;/tt&gt;&lt;/a&gt; module, but supersedes it in every way. MacOSX ships with &lt;tt&gt;mod_rendezvous&lt;/tt&gt;/&lt;tt&gt;mod_bonjour&lt;/tt&gt;, but &lt;tt&gt;mod_dnssd&lt;/tt&gt; is much more powerful than this piece of software as well. In short: &lt;tt&gt;mod_dnssd&lt;/tt&gt; is definitely the greatest way to add Zeroconf support to Apache available today.&lt;/p&gt;

&lt;p&gt;A few examples just to show how great &lt;tt&gt;mod_dnssd&lt;/tt&gt; is:&lt;/p&gt;

&lt;pre&gt;
DNSSDEnable On
&lt;/pre&gt;

&lt;p&gt;This is everything you need to enable DNS-SD support in Apache after loading the module. It will publish all virtual hosts and all existing &lt;tt&gt;mod_userdir&lt;/tt&gt; directories (i.e. &lt;tt&gt;~/public_html&lt;/tt&gt;) as services of type &lt;tt&gt;_http._tcp&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;In case you want to publish some subdirectory of the web server as service, just place &lt;tt&gt;DNSSDServiceName&lt;/tt&gt; inside a &amp;lt;Location&amp;gt; section for that path:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;Location /foobar&amp;gt;
	DNSSDServiceName "A special service called foobar"
&amp;lt;/Location&amp;gt;
&lt;/pre&gt;

&lt;p&gt;You can even use it to publish WebDAV shares using Apache's &lt;tt&gt;mod_dav&lt;/tt&gt; module:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;Location /webdav&amp;gt;
	Dav On
	DNSSDServiceName "A WebDAV folder"
	DNSSDServiceTypes _webdav._tcp
&amp;lt;/Location&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This especially cool since we now have a free software server counterpart for Gnome's and KDE's WebDAV client functionality.&lt;/p&gt;

&lt;p&gt;Or to publish your blog as RSS service:&lt;/p&gt;

&lt;pre&gt;
&amp;lt;Location /blog.cgi?rss&amp;gt;
	DNSSDServiceName "The blog"
	DNSSDServiceTypes _rss._tcp
&amp;lt;/Location&amp;gt;
&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/lennart/projects/mod_dnssd/"&gt;Get it while it is hot!&lt;/a&gt;&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 19 Jan 2006 16:53:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-01-19:/blog/projects/mod_dnssd.html</guid><category>projects</category></item><item><title>Avahi 0.6.3</title><link>https://0pointer.net/blog/projects/avahi-0.6.3.html</link><description>
                &lt;p&gt;A few days ago we relased Avahi 0.6.3. This is an important bugfix release, everyone should update as soon as possible.&lt;/p&gt;

&lt;p&gt;Avahi now has its own domain &lt;a href="http://avahi.org/"&gt;&lt;tt&gt;avahi.org&lt;/tt&gt;&lt;/a&gt; and finally has a logo, thanks to the great work of Mathieu Drouet:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://avahi.org/chrome/site/avahi-trac.png" width="200" height="96" alt="Avahi Logo" /&gt;&lt;/p&gt;

&lt;p&gt;Avahi has moved from &lt;a href="ftp://ftp.debian.org/debian/pool/main/a/avahi/"&gt;Debian&lt;/a&gt;
Experimental to Unstable. &lt;a href="http://packages.ubuntu.com/dapper/source/avahi"&gt;Ubuntu&lt;/a&gt; moved
it from Universe to Main since it successfully passed their security
auditing. The &lt;a href="http://fr2.rpmfind.net/linux/rpm2html/search.php?query=avahi&amp;amp;submit=Search+...&amp;amp;system=fedora&amp;amp;arch="&gt;Fedora
Core&lt;/a&gt; development distribution contains it too, as does &lt;a href="http://fr2.rpmfind.net/linux/rpm2html/search.php?query=avahi&amp;amp;submit=Search+...&amp;amp;system=suse&amp;amp;arch="&gt;SuSE&lt;/a&gt;'s
and &lt;a href="http://packages.gentoo.org/ebuilds/?avahi-0.6.2"&gt;Gentoo&lt;/a&gt;'s. But
where's Mandriva? Apparently they are &lt;a href="http://qa.mandriva.com/show_bug.cgi?id=19659"&gt;considering
it&lt;/a&gt;, for whatever it is worth. &lt;a href="http://www.freshports.org/net/avahi"&gt;FreeBSD Ports&lt;/a&gt; has it
too. I guess this means that Avahi has now been accepted by all major
distributions. Hurrah!&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 10 Jan 2006 02:09:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-01-10:/blog/projects/avahi-0.6.3.html</guid><category>projects</category></item><item><title>Winter</title><link>https://0pointer.net/blog/photos/winter.html</link><description>
                &lt;p&gt;Impressions of the winter in Val Thorens, Savoie, France and in Hamburg, Germany:&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Val%20Thorens&amp;amp;photo=34"&gt;&lt;img src="http://0pointer.de/photos/galleries/Val%20Thorens/lq/img-34.jpg" width="320" height="480" alt="Val Thorens" /&gt;&lt;/a&gt;
&amp;nbsp;
&lt;a href="http://0pointer.de/photos/?gallery=Hamburg%20Brook&amp;amp;photo=13"&gt;&lt;img src="http://0pointer.de/photos/galleries/Hamburg%20Brook/lq/img-13.jpg" width="320" height="480" alt="Hamburg Duvenstedter Brook" /&gt;&lt;/a&gt;
&lt;/div&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 10 Jan 2006 01:33:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2006-01-10:/blog/photos/winter.html</guid><category>photos</category></item><item><title>Fractals with Python</title><link>https://0pointer.net/blog/projects/mandelbrot.html</link><description>
                &lt;p&gt;It's impressing how easy it is to draw fractals with Python. Using the ubercool &lt;a href="http://www.pythonware.com/products/pil/index.htm"&gt;Python Imaging Library&lt;/a&gt; and native complex number support in Python you can code an elaborate and easy to understand fractal generator in less than 50 lines of code:&lt;/p&gt;

&lt;pre&gt;
#!/usr/bin/python
import Image, ImageDraw, math, colorsys

dimensions = (800, 800)
scale = 1.0/(dimensions[0]/3)
center = (2.2, 1.5)       # Use this for Mandelbrot set
#center = (1.5, 1.5)       # Use this for Julia set
iterate_max = 100
colors_max = 50

img = Image.new("RGB", dimensions)
d = ImageDraw.Draw(img)

# Calculate a tolerable palette
palette = [0] * colors_max
for i in xrange(colors_max):
    f = 1-abs((float(i)/colors_max-1)**15)
    r, g, b = colorsys.hsv_to_rgb(.66+f/3, 1-f/2, f)
    palette[i] = (int(r*255), int(g*255), int(b*255))

# Calculate the mandelbrot sequence for the point c with start value z
def iterate_mandelbrot(c, z = 0):
    for n in xrange(iterate_max + 1):
        z = z*z +c
        if abs(z) &gt; 2:
            return n
    return None

# Draw our image
for y in xrange(dimensions[1]):
    for x in xrange(dimensions[0]):
        c = complex(x * scale - center[0], y * scale - center[1])

        n = iterate_mandelbrot(c)            # Use this for Mandelbrot set
        #n = iterate_mandelbrot(complex(0.3, 0.6), c)  # Use this for Julia set

        if n is None:
            v = 1
        else:
            v = n/100.0

        d.point((x, y), fill = palette[int(v * (colors_max-1))])

del d
img.save("result.png")
&lt;/pre&gt;

&lt;p&gt;Some example pictures:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0pointer.de/public/julia.png"&gt;&lt;img src="http://0pointer.de/public/julia-small.png" width="93" height="100" alt="Julia Set" /&gt;&lt;/a&gt;&amp;nbsp;&lt;a href="http://0pointer.de/public/mandelbrot.png"&gt;&lt;img src="http://0pointer.de/public/mandelbrot-small.png" width="113" height="100" alt="Mandelbrot Set" /&gt;&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 29 Nov 2005 01:31:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-11-29:/blog/projects/mandelbrot.html</guid><category>projects</category></item><item><title>Introducing nss-myhostname</title><link>https://0pointer.net/blog/projects/nss-myhostname.html</link><description>
                
&lt;p&gt;I am doing a lot of embedded Linux work lately. The machines we use configure their hostname depending on some external configuration options. They boot from a CF card, which is mostly mounted read-only. Since the hostname changes often but we wanted to use &lt;tt&gt;sudo&lt;/tt&gt; we had a problem: &lt;tt&gt;sudo&lt;/tt&gt; requires the local host name to be resolvable using &lt;tt&gt;gethostbyname()&lt;/tt&gt;. On Debian this is usually done by patching &lt;tt&gt;/etc/hosts&lt;/tt&gt; correctly. Unfortunately that file resides on a read-only partition. Instead of hacking some ugly symlink based solution I decided to fix it the right way and wrote a tiny NSS module which does nothing more than mapping the hostname to the IP address 127.0.0.2 (and back). (That IP address is on the loopback device, but is not identical to &lt;tt&gt;localhost&lt;/tt&gt;.)&lt;/p&gt;

&lt;p&gt;Get &lt;a href="http://0pointer.de/lennart/projects/nss-myhostname/"&gt;&lt;tt&gt;nss-myhostname&lt;/tt&gt;&lt;/a&gt; while it is hot!&lt;/p&gt;

&lt;p&gt;BTW: &lt;a href="http://0pointer.de/lennart/projects/peekvc/"&gt;This tool I wrote&lt;/a&gt; is pretty useful on embedded machines too, and certainly easier to use than &lt;tt&gt;setterm -dump 1 -file /dev/stdout | fold -w 80&lt;/tt&gt;. And it does color too. And looping. And is much cooler anyway.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 20 Nov 2005 02:29:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-11-20:/blog/projects/nss-myhostname.html</guid><category>projects</category></item><item><title>Mission accomplished</title><link>https://0pointer.net/blog/projects/avahi-0.6.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.freedesktop.org/Software/Avahi"&gt;Avahi&lt;/a&gt; 0.6 is now officially released. &lt;a href="http://www.freedesktop.org/~lennart/avahi-0.6.tar.gz"&gt;Get it&lt;/a&gt; while it is hot!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.freedesktop.org/~lennart/announcement-0.6"&gt;Read the announcement&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In related news: I prepared &lt;a href="http://0pointer.de/public/distcc-avahi.patch"&gt;a patch for distcc that adds Zeroconf support using Avahi&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Fri, 18 Nov 2005 23:03:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-11-18:/blog/projects/avahi-0.6.html</guid><category>projects</category></item><item><title>Avahi 0.6 in Beta</title><link>https://0pointer.net/blog/projects/avahi-0.6-pre.html</link><description>
                
&lt;p&gt;Unless we find any major bugs &lt;a href="http://www.freedesktop.org/Software/Avahi"&gt;Avahi&lt;/a&gt; 0.6 will be released on friday. We ask everyone to do some testing for us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/public/avahi-snapshot.tar.gz"&gt;Current Avahi SVN snapshort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://0pointer.de/public/libdaemon-snapshot.tar.gz"&gt;Current libdaemon SVN snapshot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There have been a bunch of &lt;a href="http://0pointer.de/cgi-bin/viewcvs.cgi/*checkout*/trunk/docs/API-CHANGES-0.6"&gt;API changes&lt;/a&gt;. However, the API is now frozen, so feel free to start porting your application to the new API now.&lt;/p&gt;

&lt;p&gt;A rough overview about the many improvements in Avahi 0.6.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for (read-only) wide area support. (i.e. DNS-SD over unicast DNS)&lt;/li&gt;
&lt;li&gt;Ported to FreeBSD, NetBSD, Darwin/MacOSX and to some extent OpenBSD&lt;/li&gt;
&lt;li&gt;Compatibility layers for HOWL and Bonjour&lt;/li&gt;
&lt;li&gt;Support for registering/browsing abritrary records&lt;/li&gt;
&lt;li&gt;Proper support for DNS-SD service subtypes&lt;/li&gt;
&lt;li&gt;Native C implementations of the client utilities&lt;/li&gt;
&lt;li&gt;Now passes the Bonjour conformance test suite without any exceptions&lt;/li&gt;
&lt;li&gt;"Passive observation of failures"&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;chroot()&lt;/tt&gt; support&lt;/li&gt;
&lt;li&gt;Many traffic reduction improvements&lt;/li&gt;
&lt;li&gt;Bugfixes, cleanups&lt;/li&gt;
&lt;/ul&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 17 Nov 2005 01:10:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-11-17:/blog/projects/avahi-0.6-pre.html</guid><category>projects</category></item><item><title>Hamburg Harbour</title><link>https://0pointer.net/blog/photos/hheurokai.html</link><description>
                &lt;p&gt;The Eurokai in the Harbour of Hamburg in the early evening:&lt;/p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Hamburg%20Eurokai&amp;amp;photo=7"&gt;&lt;img src="http://0pointer.de/public/hheurokai.jpeg" alt="Hamburg Eurokai" width="480" height="700" /&gt;&lt;/a&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 01 Nov 2005 15:57:00 +0100</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-11-01:/blog/photos/hheurokai.html</guid><category>photos</category></item><item><title>Avahi Gains Compatibility Layers for Apple Bonjour and HOWL</title><link>https://0pointer.net/blog/projects/avahi-compat.html</link><description>
                
&lt;p&gt;A short while ago I checked in to SVN two API/ABI compatibility
modules which implement the &lt;a href="http://www.porchdogsoft.com/products/howl/"&gt;HOWL&lt;/a&gt; and the &lt;a href="http://developer.apple.com/documentation/Networking/Reference/DNSServiceDiscovery_CRef/"&gt;Apple
Bonjour (&lt;tt&gt;dns_sd.h&lt;/tt&gt;)&lt;/a&gt; DNS-SD/mDNS APIs on top of Avahi's
native API.  Effectively this means that you can run &lt;b&gt;*all*&lt;/b&gt;
Zeroconf-enabled software that is available for free operating systems
seamlessly on top of Avahi. Or at least the software that uses the
limited subset of API functions we support.  Missing functions will be
implemented on an on-demand basis.  Gnome-VFS/Nautilus works
perfectly, as does Gobby, which are the only real-world applications
we tested until now.&lt;/p&gt;

&lt;p&gt;The list of supported/unsupported functions is available from SVN &lt;a href="http://0pointer.de/cgi-bin/viewcvs.cgi/trunk/avahi-compat-howl/funcs.txt?view=auto"&gt;for HOWL&lt;/a&gt; and for
&lt;a href="http://0pointer.de/cgi-bin/viewcvs.cgi/trunk/avahi-compat-libdns_sd/funcs.txt?view=auto"&gt;&lt;tt&gt;dns-sd.h&lt;/tt&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The compatibility layers are actually pretty interesting pieces of code: for
compatibility with the way HOWL/Bonjour integrates with event loops we had to
hook up the timeout and I/O watches D-BUS depends on to a single file
descriptor. This involves all kinds of ugly things like threading and
"creative" ways to use the event loop abstraction Avahi provides. Some might
call this "cracktastic", but it actually works pretty well.&lt;/p&gt;

&lt;p&gt;The compatibility layers are not intended to be long term solutions. For
every session object we create a background thread that polls for events and a
DBUS session object. This is an utter waste of resources, especially on
&lt;tt&gt;dns_sd.h&lt;/tt&gt; where every basic operation uses a session object of its own.
In addition, our compatibility layers are incomplete. We do not offer the full
set of functions or the full semantics. Our compatibility is just good enough
to make most Zeroconf-aware programs work with Avahi right now.&lt;/p&gt;

&lt;p&gt;We consider neither &lt;tt&gt;dns_sd.h&lt;/tt&gt; nor the HOWL API a "well designed"
API and encourage people to port their programs to our more powerful native
API. To stress this the two modules will warn the user about their usage and
write a warning line to STDERR and &lt;tt&gt;syslog&lt;/tt&gt;. Hopefully this will annoy
people sufficiently that Avahi adoption speeds up a little.&lt;/p&gt;

&lt;p&gt;To our own surprise we actually support at least one API function more than each of the
reference implementations! From &lt;tt&gt;dns_sd.h&lt;/tt&gt; we support
&lt;tt&gt;DNSServiceEnumerateDomains()&lt;/tt&gt; which is actually unsupported by
Apple Bonjour on POSIX/Linux systems. The documented HOWL function
&lt;tt&gt;sw_ipv4_address_decompose()&lt;/tt&gt; is actually a NOOP in the
reference implementation, but isn't in our compatibility layer.&lt;/p&gt;

&lt;p&gt;Since &lt;tt&gt;dns_sd.h&lt;/tt&gt; is the only file licensed under a BSD license in the otherwise APSL-licensed
mDNSResponder distribution, we were able to copy it into our sources untouched.&lt;/p&gt;

&lt;p&gt;Here's &lt;a href="http://0pointer.de/public/avahi-compat.png"&gt;a screenshot of
Nautilus and Gobby&lt;/a&gt; running on top of Avahi through the HOWL compatibility
layers.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sun, 16 Oct 2005 17:29:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-10-16:/blog/projects/avahi-compat.html</guid><category>projects</category></item><item><title>Avahi Gains "Wide-Area" Support</title><link>https://0pointer.net/blog/projects/avahi-wide-area.html</link><description>
                &lt;p&gt;Yesterday in the late evening I commited "Wide Area" support to
&lt;a href="http://www.freedesktop.org/Software/Avahi"&gt;Avahi&lt;/a&gt; SVN, i.e. "DNS-SD over Unicast DNS". Only browsing, no
"Long-Lived Query" support and no publishing for now, but it is a
start.&lt;/p&gt;

&lt;p&gt;To show off how cool this is, here is a "screenshot" of
&lt;tt&gt;avahi-browse&lt;/tt&gt; showing all services defined in the domain
&lt;tt&gt;0pointer.de&lt;/tt&gt;:&lt;/p&gt;

&lt;pre&gt;
$ &lt;b&gt;avahi-browse -a -d 0pointer.de&lt;/b&gt;
Browsing domain '0pointer.de' on any.-1 ...
Browsing for services of type '_http-rss091._tcp' (Web Syndication RSS 0.91) in domain '0pointer.de' on any.-1 ...
Browsing for services of type '_http-rss20._tcp' (Web Syndication RSS 2.0) in domain '0pointer.de' on any.-1 ...
Browsing for services of type '_http._tcp' (Web Site) in domain '0pointer.de' on any.-1 ...
Found service 'Lennart's Blog' of type '_http-rss091._tcp' (Web Syndication RSS 0.91) in domain '0pointer.de' on any.-1.
Found service 'Lennart's Blog' of type '_http-rss20._tcp' (Web Syndication RSS 2.0) in domain '0pointer.de' on any.-1.
Found service 'Lennart's Homepage' of type '_http._tcp' (Web Site) in domain '0pointer.de' on any.-1.
Found service 'Avahi mDNS/DNS-SD' of type '_http._tcp' (Web Site) in domain '0pointer.de' on any.-1.
Found service 'Lennart's Photos' of type '_http._tcp' (Web Site) in domain '0pointer.de' on any.-1.
Found service 'Lennart's Blog' of type '_http._tcp' (Web Site) in domain '0pointer.de' on any.-1.
Service data for service 'Lennart's Blog' of type '_http-rss091._tcp' (Web Syndication RSS 0.91) in domain '0pointer.de' on any.-1:
        Host 0pointer.de (217.160.223.3), port 80, TXT data: ['path=/blog/index.rss']
Service data for service 'Lennart's Blog' of type '_http-rss20._tcp' (Web Syndication RSS 2.0) in domain '0pointer.de' on any.-1:
        Host 0pointer.de (217.160.223.3), port 80, TXT data: ['path=/blog/index.rss2']
Service data for service 'Lennart's Homepage' of type '_http._tcp' (Web Site) in domain '0pointer.de' on any.-1:
        Host 0pointer.de (217.160.223.3), port 80, TXT data: ['path=/lennart/']
Service data for service 'Avahi mDNS/DNS-SD' of type '_http._tcp' (Web Site) in domain '0pointer.de' on any.-1:
        Host freedesktop.org (131.252.208.82), port 80, TXT data: ['path=/Software/Avahi']
Service data for service 'Lennart's Photos' of type '_http._tcp' (Web Site) in domain '0pointer.de' on any.-1:
        Host 0pointer.de (217.160.223.3), port 80, TXT data: ['path=/photos/']
Service data for service 'Lennart's Blog' of type '_http._tcp' (Web Site) in domain '0pointer.de' on any.-1:
        Host 0pointer.de (217.160.223.3), port 80, TXT data: ['path=/blog']
&lt;/pre&gt;



        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 26 Sep 2005 17:18:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-09-26:/blog/projects/avahi-wide-area.html</guid><category>projects</category></item><item><title>Linux on the MSI S270 aka Cytron/TCM/Medion/Tchibo MD96100</title><link>https://0pointer.net/blog/projects/tchibo-linux.html</link><description>
                &lt;p&gt;I finally found the time to write up my experiences running Linux on my new shiny laptop. &lt;a href="http://0pointer.de/lennart/tchibo.html"&gt;Read it here&lt;/a&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 15 Sep 2005 22:11:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-09-15:/blog/projects/tchibo-linux.html</guid><category>projects</category></item><item><title>KDE Ported to Avahi</title><link>https://0pointer.net/blog/projects/avahi-kde.html</link><description>
                &lt;p&gt;Jakub Stachowski completed support for using Avahi as backend for KDE's KDNSSD subsystem. This means that you can use any Zeroconf-enabled KDE application (including Konqueror) with Avahi as mDNS stack.  You can find more information in the &lt;a href="http://wiki.kde.org/tiki-index.php?page=Zeroconf+in+KDE"&gt;KDNSSD Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The list of software supporting Avahi grows longer and longer. There are some patches for vino and GnomeMeeting floating around, Rhythmbox already merged DAAP support based on Avahi, KDE is now fully compatible with Avahi. Shall your project be the next in this list? To get started with Avahi, read the &lt;a href="http://www.freedesktop.org/~lennart/doxygen/"&gt;developer's documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh, yes, we released Avahi 0.3 and 0.4 recently. &lt;a href="http://www.freedesktop.org/Software/Avahi"&gt;Get it while it's hot&lt;/a&gt;. No major changes, just bugfixes an Qt main loop support.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 08 Sep 2005 23:52:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-09-08:/blog/projects/avahi-kde.html</guid><category>projects</category></item><item><title>Avahi 0.2 Release</title><link>https://0pointer.net/blog/projects/avahi-0.2-release.html</link><description>
                
&lt;p&gt;Yesterday we released &lt;a href="http://www.freedesktop.org/Software/Avahi"&gt;Avahi 0.2&lt;/a&gt;. Get it while it is hot! Full &lt;a href="http://www.freedesktop.org/~lennart/announcement-0.2"&gt;announcement here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;In related news: Jakub Stachowski is working on a &lt;tt&gt;kdnssd&lt;/tt&gt;-to-Avahi bridge. Soon KDE applications will be able to make use of Avahi without even knowing.&lt;/p&gt;

&lt;p&gt;Sebastien's Zeroconf Gnome Applet now has an SVN repository: &lt;tt&gt;svn checkout svn://svn.0pointer.de/service-discovery-applet/trunk service-discovery-applet&lt;/tt&gt;.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 29 Aug 2005 15:14:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-29:/blog/projects/avahi-0.2-release.html</guid><category>projects</category></item><item><title>GnomeMeeting Supports Avahi</title><link>https://0pointer.net/blog/projects/avahi-sebest.html</link><description>
                &lt;p&gt;Sebastien successfully completed porting GnomeMeeting to &lt;a href="http://www.freedesktop.org/Software/Avahi"&gt;Avahi&lt;/a&gt;. Therefore I declare him the first one to port a "real world" application to Avahi. Hurrah! &lt;a href="http://0pointer.de/public/gnomemeeting-avahi.png"&gt;Screenshot here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Shortly after, Sebestien - not lazy - announced his new Zeroconf service browser applet based on Avahi. It contains a drop down menu with all Zeroconf services found on your LAN. If you select a menu item the applet will execute the application that has been defined as Gnome URL handler for the specific protocol.&lt;/p&gt;

&lt;img src="http://0pointer.de/public/avahi-applet-browser.png" width="381" height="216" alt="s-d-a" /&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Sat, 27 Aug 2005 15:24:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-27:/blog/projects/avahi-sebest.html</guid><category>projects</category></item><item><title>Avahi on Linux Weekly News</title><link>https://0pointer.net/blog/projects/avahi-lwn.html</link><description>
                &lt;p&gt;Seems today's edition of &lt;a href="http://lwn.net/"&gt;LWN&lt;/a&gt; features a front page story about &lt;a href="http://www.freedesktop.org/Software/Avahi"&gt;Avahi&lt;/a&gt;. It's actually quite nice, even though I missed an emphasis on the fact that Avahi's mDNS stack itself is embeddable into applications via a shared library.&lt;/p&gt;

&lt;p&gt;I guess you'll have to wait a week if you want to read the article without subscription.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 25 Aug 2005 13:33:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-25:/blog/projects/avahi-lwn.html</guid><category>projects</category></item><item><title>Me too</title><link>https://0pointer.net/blog/google-talk.html</link><description>
                &lt;p&gt;I am on Google Talk now: &lt;b&gt;poettering (at) googlemail.com&lt;/b&gt;&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 25 Aug 2005 01:14:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-25:/blog/google-talk.html</guid><category>misc</category></item><item><title>Avahi 0.1 Finally Released</title><link>https://0pointer.net/blog/projects/avahi-0.1-release.html</link><description>
                
&lt;p&gt;We finally released &lt;a href="http://www.freedesktop.org/Software/Avahi"&gt;Avahi 0.1&lt;/a&gt;. Full release announcement &lt;a href="http://bur.st/~lathiat/avahi/announcement-0.1"&gt;here&lt;/a&gt;. Avahi comes with a powerful DBUS API. Just two show off the coolnes of that interface a Python example:&lt;/p&gt;

&lt;pre&gt;
import avahi, dbus, gobject

bus = dbus.SystemBus()
server = dbus.Interface(bus.get_object(avahi.DBUS_NAME, avahi.DBUS_PATH_SERVER), avahi.DBUS_INTERFACE_SERVER)

def new_service(interface, protocol, name, type, domain):
	print "Found service '%s' of type '%s' in domain '%s'" % (name, type, domain)

def remove_service(interface, protocol, name, type, domain):
	print "Service '%s' of type '%s' in domain '%s' disappeared." % (name, type, domain)

path = server.ServiceBrowserNew(avahi.IF_UNSPEC, avahi.PROTO_UNSPEC, "_http._tcp", "")
b = dbus.Interface(bus.get_object(avahi.DBUS_NAME, path), avahi.DBUS_INTERFACE_SERVICE_BROWSER)
b.connect_to_signal('ItemNew', new_service)
b.connect_to_signal('ItemRemove', remove_service)
gobject.MainLoop().run()
&lt;/pre&gt;

&lt;p&gt;This short program will connect to running &lt;tt&gt;avahi-daemon&lt;/tt&gt; and browse for web services.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Mon, 22 Aug 2005 00:54:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-22:/blog/projects/avahi-0.1-release.html</guid><category>projects</category></item><item><title>Bee on a Thistle</title><link>https://0pointer.net/blog/photos/biene.html</link><description>
                
&lt;p&gt;A bee on a thistle in the wheat field behind our house:&lt;/p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Hamburg%20Weizenfeld&amp;amp;photo=18"&gt;&lt;img src="http://0pointer.de/public/biene.jpeg" alt="Bee on a Thistle" /&gt;&lt;/a&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Tue, 16 Aug 2005 23:07:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-16:/blog/photos/biene.html</guid><category>photos</category></item><item><title>Simplified "Draft" Plugin for pyblosxom</title><link>https://0pointer.net/blog/projects/pyblosxom-ignore.html</link><description>
                &lt;p&gt;The pyblosxom plugin registry links a &lt;a href="http://pyblosxom.sourceforge.net/blog/registry/authentication/draft"&gt;plugin&lt;/a&gt; which allows hiding "draft" stories before publishing them, so that only you can see them. Unfortunately the link to this plugin is broken. So here's my (simplified) reimplementation:&lt;/p&gt;
&lt;pre&gt;
def cb_prepare(args):
        request = args["request"]
        query = request.getHttp().get('QUERY_STRING', '')

        if not query.endswith("&amp;amp;ignore") and not query == "ignore":
                data = request.getData()
                data["entry_list"] = filter(lambda e: not e.has_key('ignore'), data["entry_list"])
&lt;/pre&gt;
&lt;p&gt;To mark a story as "draft" simply insert this at line #2:&lt;/p&gt;
&lt;pre&gt;
#ignore yes
&lt;/pre&gt;
&lt;p&gt;To browse unpublished stories simply append &lt;tt&gt;?ignore&lt;/tt&gt; (or &lt;tt&gt;&amp;amp;ignore&lt;/tt&gt;) to your blog URL.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Thu, 11 Aug 2005 21:00:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-11:/blog/projects/pyblosxom-ignore.html</guid><category>projects</category></item><item><title>Linking pyblosxom to SVN</title><link>https://0pointer.net/blog/projects/pyblosxom-svn.html</link><description>
                
&lt;p&gt;If you run a pyblosxom blog with auto-copied stories from SVN you are
probably interested in getting stable story dates that don't change every time
you update a story. The date of the initial SVN log entry of a story is
something like the "day of birth" of a story, so it's a good value to use.
Christopher Baus implemented a &lt;a href="http://www.baus.net/svnpyblosxom"&gt;plugin&lt;/a&gt; for pyblosxom, which looks
overly complicated to me: it depends on memcached and comes in two large python
scripts.&lt;/p&gt;

&lt;p&gt;To simplify things I wrote this minimal replacement:&lt;/p&gt;

&lt;pre&gt;
import pysvn, os, sys, anydbm

from config import py

def get_mtime(fname):
        cache_fname = os.path.join(py['datadir'], 'SVNDATES')
        cache = anydbm.open(cache_fname, "c")

        if cache.has_key(fname):
                d = float(cache[fname])
        else:
                client = pysvn.Client(fname)
                l = client.log(fname)

                if len(l) &gt; 0:
                        d = l[0]['date']
                        cache[fname] = str(d)
                else:
                        d = -1

                del client

        del cache
        return d

def cb_filestat(args):
        args["mtime"] = list(args["mtime"])
        d = get_mtime(args["filename"])
        if d &gt;= 0:
                args["mtime"][8] = d
        return args
&lt;/pre&gt;

&lt;p&gt;Since accessing SVN logs is quite slow the script caches the "date of birth"
in a dbm file. Make sure that your web server has enough priviliges to access
that database file which is stored in &lt;tt&gt;$datadir/SVNDATES&lt;/tt&gt; by
default.&lt;/p&gt;


        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 10 Aug 2005 15:57:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-10:/blog/projects/pyblosxom-svn.html</guid><category>projects</category></item><item><title>Avahi 0.1 Looming</title><link>https://0pointer.net/blog/projects/avahi-0.1.html</link><description>
                
&lt;p&gt;&lt;a href="http://www.freedesktop.org/Software/Avahi"&gt;Avahi 0.1&lt;/a&gt; is due in
the next few days. The last missing piece is a simplifying C wrapper around the
DBUS API.  Though Avahi is currently pre-0.1 it is already quite complete and
mature. To put it with Ross Burton: "&lt;i&gt;... this doesnt count as 0.1 because it
has docs, man pages *and* works&lt;/i&gt;"&lt;/p&gt;

&lt;p&gt;Unfortunately python-dbus has quite a few bugs which make it very difficult
to code with. e.g. it doesn't handle sending empty arrays, fails to send byte
values and so on. It is difficult to work around all these issues, therefore
the Avahi client tools will not work with an unpatched python-dbus. You need to
apply &lt;a href="https://bugs.freedesktop.org/show_bug.cgi?id=4023"&gt;this
patch&lt;/a&gt; (applying to 0.35.2) to fix at least the byte value bug to get
them working.&lt;/p&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 10 Aug 2005 14:13:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-10:/blog/projects/avahi-0.1.html</guid><category>projects</category></item><item><title>Tiger Lilies</title><link>https://0pointer.net/blog/photos/tiger-lilies.html</link><description>
                
&lt;p&gt;In the garden:&lt;/p&gt;

&lt;a href="http://0pointer.de/photos/?gallery=Hamburg%20Garden%203&amp;amp;photo=39"&gt;&lt;img src="http://0pointer.de/photos/galleries/Hamburg%20Garden%203/lq/img-39.jpg" alt="Tiger Lillies" /&gt;&lt;/a&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 10 Aug 2005 14:11:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-10:/blog/photos/tiger-lilies.html</guid><category>photos</category></item><item><title>Wheat</title><link>https://0pointer.net/blog/photos/wheat.html</link><description>
                

&lt;p&gt;The wheat field behind our house:&lt;/p&gt;
&lt;a href="http://0pointer.de/photos/?gallery=Hamburg%20Garden%203&amp;amp;photo=27"&gt;&lt;img src="http://0pointer.de/photos/galleries/Hamburg%20Garden%203/lq/img-27.jpg" alt="Wheat Field" /&gt;&lt;/a&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 10 Aug 2005 14:11:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-10:/blog/photos/wheat.html</guid><category>photos</category></item><item><title>St.-Pauli-Elbtunnel</title><link>https://0pointer.net/blog/photos/elbtunnel.html</link><description>
                
&lt;p&gt;I really like this photo I made in the St.-Pauli-Elbtunnel in Hamburg:&lt;/p&gt;

&lt;a href="http://0pointer.de/photos/?gallery=Hamburg%20Skyline&amp;amp;photo=19"&gt;&lt;img src="http://0pointer.de/photos/galleries/Hamburg%20Skyline/lq/img-19.jpg" alt="St.-Pauli-Elbtunnel" /&gt;&lt;/a&gt;

        </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Poettering</dc:creator><pubDate>Wed, 10 Aug 2005 12:54:00 +0200</pubDate><guid isPermaLink="false">tag:0pointer.net,2005-08-10:/blog/photos/elbtunnel.html</guid><category>photos</category></item></channel></rss>